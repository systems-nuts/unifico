Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=4, align=4, at location [SP]
  fi#25: size=4, align=4, at location [SP]
  fi#26: size=4, align=4, at location [SP]
  fi#27: size=4, align=4, at location [SP]
  fi#28: size=4, align=4, at location [SP]
  fi#29: size=24, align=16, at location [SP]
  fi#30: size=16, align=16, at location [SP]
  fi#31: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: 1.000000e-08, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
  cp#7: -2.000000e+00, align=8

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @ep___const_main_dum_, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, debug-location !93; ep.c:82:12
  %10:fpr128 = LDRQui %9:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  STRQui %10:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  %11:gpr64 = LDRXui %9:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  STRXui %11:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, debug-location !106; ep.c:87:15
  $x1 = MOVaddr target-flags(aarch64-page) @ep__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, debug-location !106; ep.c:87:15
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !106; ep.c:87:15
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !108; ep.c:87:13
  PCN_STACKMAP 0, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.31.fp, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !108 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.31.fp), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:87:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !108; ep.c:87:13
  %14:gpr64 = COPY killed $x8, debug-location !106; ep.c:87:15
  STRXui %14:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  CBNZX %14:gpr64, %bb.2, debug-location !110; ep.c:87:9
  B %bb.1, debug-location !110; ep.c:87:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %stack.28.timers_enabled, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
  B %bb.3, debug-location !113; ep.c:89:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %15:gpr32 = MOVi32imm 1
  STRWui %15:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  %16:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
  $x0 = COPY %16:gpr64, debug-location !117; ep.c:92:9
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w8, debug-location !117; ep.c:92:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !117; ep.c:92:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %16:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !119; ep.c:102:30
  %19:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %20:fpr64 = LDRDui %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %21:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %22:fpr64 = LDRDui %21:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
  $d1 = COPY %22:fpr64, debug-location !119; ep.c:102:30
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !119; ep.c:102:30
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !120; ep.c:102:5
  PCN_STACKMAP 2, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !120 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:102:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
  %23:fpr64 = COPY killed $d0, debug-location !119; ep.c:102:30
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
  $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
  $x1 = MOVaddr target-flags(aarch64-page) @ep__str_2__15_0lf_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
  $d0 = COPY %23:fpr64, debug-location !120; ep.c:102:5
  BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !120; ep.c:102:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !121; ep.c:103:7
  PCN_STACKMAP 3, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, %23:fpr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !121 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:103:7
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !121; ep.c:103:7
  %27:gpr32 = MOVi32imm 14
  STRWui %27:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  %28:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  dead $wzr = SUBSWri %28:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !126; ep.c:104:9
  B %bb.4, debug-location !126; ep.c:104:9

bb.4.if.then6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %30:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  %31:gpr32common = nsw SUBWri %30:gpr32common, 1, 0, debug-location !127; ep.c:105:10
  STRWui %31:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

bb.5.if.end7:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %32:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  %33:gpr64common = ADDXri %stack.30.size, 0, 0
  %34:gpr64common = ADDXrr %32:gpr64, %33:gpr64common, debug-location !130; ep.c:106:12
  STRBBui $wzr, %34:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_3____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_3____NAS_Par, debug-location !133; ep.c:107:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w8, debug-location !133; ep.c:107:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !133; ep.c:107:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !134; ep.c:108:61
  PCN_STACKMAP 4, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !134 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:108:61
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !134; ep.c:108:61
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !135; ep.c:108:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_4___Number_o, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
  $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !135; ep.c:108:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !136; ep.c:110:14
  PCN_STACKMAP 5, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !136 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:110:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !136; ep.c:110:14
  STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  %40:gpr32 = MOVi32imm 16384
  STRWui %40:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  %41:gpr64common = ADDXri %stack.29.dum, 0, 0
  %42:gpr64sp = ORRXri %41:gpr64common, 8000, debug-location !139; ep.c:127:24
  %43:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  %44:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0, debug-location !140; ep.c:127:33
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
  $w0 = COPY $wzr, debug-location !141; ep.c:127:5
  $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
  $d0 = COPY %43:fpr64, debug-location !141; ep.c:127:5
  $x2 = COPY %44:gpr64sp, debug-location !141; ep.c:127:5
  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !141; ep.c:127:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !142; ep.c:128:22
  PCN_STACKMAP 6, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, %44:gpr64sp, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %43:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !142 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:22
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !142; ep.c:128:22
  %45:fpr64 = LDRDui %stack.29.dum, 2, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !144; ep.c:128:14
  $x0 = COPY %42:gpr64sp, debug-location !144; ep.c:128:14
  $d0 = COPY %45:fpr64, debug-location !144; ep.c:128:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !144; ep.c:128:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !145; ep.c:128:5
  PCN_STACKMAP 7, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %42:gpr64sp, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %45:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !145 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !145; ep.c:128:5
  %46:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
  STRDui %46:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  %285:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %286:gpr64 = MOVi64imm -3135276447761457362

bb.6.for.cond:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %47:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  dead $wzr = SUBSWri %47:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !153; ep.c:129:5
  B %bb.7, debug-location !153; ep.c:129:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %283:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  STRXroX %286:gpr64, %285:gpr64common, %283:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  %287:gpr32common = nsw ADDWri %283.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
  STRWui %287:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  B %bb.6, debug-location !159; ep.c:129:5

bb.8.for.end:
; predecessors: %bb.6
  successors: %bb.10(0x50000000), %bb.9(0x30000000); %bb.10(62.50%), %bb.9(37.50%)

  %49:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %0:fpr64 = LDRDui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %288:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
  FCMPDrr %288:fpr64, %288:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Bcc 7, %bb.10, implicit killed $nzcv, debug-location !164; ep.c:132:12
  B %bb.9, debug-location !164; ep.c:132:12

bb.9.call.sqrt:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  $d0 = COPY %0:fpr64, debug-location !164; ep.c:132:12
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  %288:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12

bb.10.for.end.split:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !164; ep.c:132:12
  PCN_STACKMAP 8, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %0:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !164 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
  $d0 = COPY %288:fpr64, debug-location !164; ep.c:132:12
  BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !164; ep.c:132:12
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !165; ep.c:132:10
  PCN_STACKMAP 9, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %288:fpr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !165 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:10
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !165; ep.c:132:10
  %51:fpr64 = COPY killed $d0, debug-location !164; ep.c:132:12
  STRDui %51:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
  $w0 = COPY $wzr, debug-location !166; ep.c:134:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !166; ep.c:134:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !166; ep.c:134:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !167; ep.c:135:5
  PCN_STACKMAP 10, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !167 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:135:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
  $w0 = MOVi32imm 1, debug-location !167; ep.c:135:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !167; ep.c:135:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !167; ep.c:135:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !168; ep.c:136:5
  PCN_STACKMAP 11, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !168 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:136:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
  $w0 = MOVi32imm 2, debug-location !168; ep.c:136:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !168; ep.c:136:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !168; ep.c:136:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !169; ep.c:137:5
  PCN_STACKMAP 12, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !169 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:137:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
  $w0 = COPY $wzr, debug-location !169; ep.c:137:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !169; ep.c:137:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !169; ep.c:137:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !170; ep.c:139:5
  PCN_STACKMAP 13, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !170 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:139:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !170; ep.c:139:5
  %55:gpr64 = MOVi64imm 4742906807993761792
  STRXui %55:gpr64, %stack.2.t1, 0, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !172; ep.c:142:5
  %57:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %58:fpr64 = LDRDui %57:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  $w0 = COPY $wzr, debug-location !172; ep.c:142:5
  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !172; ep.c:142:5
  $d0 = COPY %58:fpr64, debug-location !172; ep.c:142:5
  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !172; ep.c:142:5
  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !172; ep.c:142:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !172; ep.c:142:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !173; ep.c:148:8
  PCN_STACKMAP 14, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !173 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:148:8
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !173; ep.c:148:8
  STRXui %55:gpr64, %stack.2.t1, 0, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  STRWui $wzr, %stack.19.i, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

bb.11.for.cond26:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %60:gpr32common = LDRWui %stack.19.i, 0, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  dead $wzr = SUBSWri %60:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Bcc 12, %bb.13, implicit killed $nzcv, debug-location !180; ep.c:150:5
  B %bb.12, debug-location !180; ep.c:150:5

bb.12.for.body29:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %278:fpr64 = LDRDui %stack.2.t1, 0, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; ep.c:151:14
  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !183; ep.c:151:14
  $d0 = COPY %278:fpr64, debug-location !183; ep.c:151:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !183; ep.c:151:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !184; ep.c:151:12
  PCN_STACKMAP 15, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %278:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !184 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:151:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; ep.c:151:12
  %280:fpr64 = COPY killed $d0, debug-location !183; ep.c:151:14
  STRDui %280:fpr64, %stack.3.t2, 0, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  %281:gpr32common = LDRWui %stack.19.i, 0, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0, debug-location !185; ep.c:150:30
  STRWui %282:gpr32common, %stack.19.i, 0, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
  B %bb.11, debug-location !186; ep.c:150:5

bb.13.for.end33:
; predecessors: %bb.11
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %62:fpr64 = LDRDui %stack.2.t1, 0, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  STRDui %62:fpr64, %stack.11.an, 0, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  %63:gpr64 = MOVi64imm 4733340128880099328
  STRXui %63:gpr64, %stack.12.tt, 0, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
  STRXui $xzr, %stack.13.gc, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
  STRXui $xzr, %stack.8.sx, 0, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
  STRXui $xzr, %stack.9.sy, 0, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
  STRWui $wzr, %stack.19.i, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  %275:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

bb.14.for.cond34:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  %66:gpr32common = LDRWui %stack.19.i, 0, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  dead $wzr = SUBSWri %66:gpr32common, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
  Bcc 12, %bb.16, implicit killed $nzcv, debug-location !201; ep.c:160:5
  B %bb.15, debug-location !201; ep.c:160:5

bb.15.for.body37:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %273:gpr64common = LDRSWui %stack.19.i, 0, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  STRXroX $xzr, %275:gpr64common, %273:gpr64common, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  %277:gpr32common = nsw ADDWri %273.sub_32:gpr64common, 1, 0, debug-location !206; ep.c:160:26
  STRWui %277:gpr32common, %stack.19.i, 0, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  B %bb.14, debug-location !207; ep.c:160:5

bb.16.for.end42:
; predecessors: %bb.14
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %68:gpr32 = MOVi32imm -1
  STRWui %68:gpr32, %stack.25.k_offset, 0, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  %69:gpr32 = MOVi32imm 1
  STRWui %69:gpr32, %stack.23.k, 0, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  %190:gpr64 = MOVi64imm 4733340128880099328
  %213:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %214:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %215:fpr64 = LDRDui %214:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  %234:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %235:fpr64 = LDRDui %234:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %245:gpr64temp = ADRP target-flags(aarch64-page) %const.7
  %246:fpr64 = LDRDui %245:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  %262:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

bb.17.for.cond43:
; predecessors: %bb.16, %bb.39
  successors: %bb.18(0x7c000000), %bb.40(0x04000000); %bb.18(96.88%), %bb.40(3.12%)

  %70:gpr32 = LDRWui %stack.23.k, 0, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  %71:gpr32 = LDRWui %stack.18.np, 0, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  dead $wzr = SUBSWrr %70:gpr32, %71:gpr32, implicit-def $nzcv, debug-location !218; ep.c:172:5
  Bcc 12, %bb.40, implicit killed $nzcv, debug-location !218; ep.c:172:5
  B %bb.18, debug-location !218; ep.c:172:5

bb.18.for.body46:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %187:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  %188:gpr32 = LDRWui %stack.23.k, 0, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
  STRWui %189:gpr32, %stack.21.kk, 0, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  STRXui %190:gpr64, %stack.2.t1, 0, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  %191:fpr64 = LDRDui %stack.11.an, 0, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  STRDui %191:fpr64, %stack.3.t2, 0, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  STRWui %69:gpr32, %stack.19.i, 0, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16

bb.19.for.cond48:
; predecessors: %bb.18, %bb.23
  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)

  %193:gpr32common = LDRWui %stack.19.i, 0, debug-location !230 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  dead $wzr = SUBSWri %193:gpr32common, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
  Bcc 12, %bb.24, implicit killed $nzcv, debug-location !233; ep.c:179:9
  B %bb.20, debug-location !233; ep.c:179:9

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.21(0x40000000), %bb.22(0x40000000); %bb.21(50.00%), %bb.22(50.00%)

  %195:gpr32common = LDRWui %stack.21.kk, 0, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  dead $wzr = SUBSWri %195:gpr32common, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
  %197:gpr32 = CSINCWr %195:gpr32common, %195:gpr32common, 10, implicit killed $nzcv, debug-location !236; ep.c:180:21
  %198:gpr32 = SBFMWri %197:gpr32, 1, 31, debug-location !236; ep.c:180:21
  STRWui %198:gpr32, %stack.20.ik, 0, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  %199:gpr32common = ANDWri %197:gpr32, 2014, debug-location !240; ep.c:181:20
  dead $wzr = SUBSWrr %199:gpr32common, %195:gpr32common, implicit-def $nzcv, debug-location !243; ep.c:181:17
  Bcc 0, %bb.22, implicit killed $nzcv, debug-location !243; ep.c:181:17
  B %bb.21, debug-location !243; ep.c:181:17

bb.21.if.then54:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %201:fpr64 = LDRDui %stack.3.t2, 0, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !245; ep.c:182:22
  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !245; ep.c:182:22
  $d0 = COPY %201:fpr64, debug-location !245; ep.c:182:22
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !245; ep.c:182:22
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !246; ep.c:182:20
  PCN_STACKMAP 16, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %201:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !246 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:182:20
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !246; ep.c:182:20
  %203:fpr64 = COPY killed $d0, debug-location !245; ep.c:182:22
  STRDui %203:fpr64, %stack.4.t3, 0, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

bb.22.if.end56:
; predecessors: %bb.20, %bb.21
  successors: %bb.24(0x04000000), %bb.23(0x7c000000); %bb.24(3.12%), %bb.23(96.88%)

  %204:gpr32 = LDRWui %stack.20.ik, 0, debug-location !248 :: (dereferenceable load 4 from %ir.ik); ep.c:183:17
  CBZW %204:gpr32, %bb.24, debug-location !251; ep.c:183:17
  B %bb.23, debug-location !251; ep.c:183:17

bb.23.if.end60:
; predecessors: %bb.22
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %205:fpr64 = LDRDui %stack.3.t2, 0, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !253; ep.c:185:18
  $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !253; ep.c:185:18
  $d0 = COPY %205:fpr64, debug-location !253; ep.c:185:18
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !253; ep.c:185:18
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !254; ep.c:185:16
  PCN_STACKMAP 17, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %205:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !254 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:185:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !254; ep.c:185:16
  %207:fpr64 = COPY killed $d0, debug-location !253; ep.c:185:18
  STRDui %207:fpr64, %stack.4.t3, 0, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  %208:gpr32 = LDRWui %stack.20.ik, 0, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  STRWui %208:gpr32, %stack.21.kk, 0, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  %209:gpr32common = LDRWui %stack.19.i, 0, debug-location !257 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !257; ep.c:179:32
  STRWui %210:gpr32common, %stack.19.i, 0, debug-location !257 :: (store 4 into %ir.i); ep.c:179:32
  B %bb.19, debug-location !258; ep.c:179:9

bb.24.for.end64:
; predecessors: %bb.19, %bb.22
  successors: %bb.25(0x50000000), %bb.26(0x30000000); %bb.25(62.50%), %bb.26(37.50%)

  %211:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !261 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
  CBZW %211:gpr32, %bb.26, debug-location !263; ep.c:192:13
  B %bb.25, debug-location !263; ep.c:192:13

bb.25.if.then65:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; ep.c:193:13
  $w0 = MOVi32imm 2, debug-location !264; ep.c:193:13
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !264; ep.c:193:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !264; ep.c:193:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !264; ep.c:193:13
  PCN_STACKMAP 18, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !264 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:193:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; ep.c:193:13

bb.26.if.end66:
; predecessors: %bb.24, %bb.25
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !265; ep.c:194:9
  $w0 = MOVi32imm 131072, debug-location !265; ep.c:194:9
  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !265; ep.c:194:9
  $d0 = COPY %215:fpr64, debug-location !265; ep.c:194:9
  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !265; ep.c:194:9
  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !265; ep.c:194:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !265; ep.c:194:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !266; ep.c:195:13
  PCN_STACKMAP 19, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !266 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:195:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !266; ep.c:195:13
  %218:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !266 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
  CBZW %218:gpr32, %bb.28, debug-location !268; ep.c:195:13
  B %bb.27, debug-location !268; ep.c:195:13

bb.27.if.then68:
; predecessors: %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !269; ep.c:196:13
  $w0 = MOVi32imm 2, debug-location !269; ep.c:196:13
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !269; ep.c:196:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !269; ep.c:196:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !269; ep.c:196:13
  PCN_STACKMAP 20, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !269 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:196:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !269; ep.c:196:13

bb.28.if.end69:
; predecessors: %bb.26, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

  %220:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !270 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
  CBZW %220:gpr32, %bb.30, debug-location !272; ep.c:203:13
  B %bb.29, debug-location !272; ep.c:203:13

bb.29.if.then71:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !273; ep.c:204:13
  $w0 = MOVi32imm 1, debug-location !273; ep.c:204:13
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !273; ep.c:204:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !273; ep.c:204:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !273; ep.c:204:13
  PCN_STACKMAP 21, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !273 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:204:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !273; ep.c:204:13

bb.30.if.end72:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  STRWui $wzr, %stack.19.i, 0, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16

bb.31.for.cond73:
; predecessors: %bb.30, %bb.36
  successors: %bb.32(0x7c000000), %bb.37(0x04000000); %bb.32(96.88%), %bb.37(3.12%)

  %223:gpr32common = LDRWui %stack.19.i, 0, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  dead $wzr = SUBSWri %223:gpr32common, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
  Bcc 10, %bb.37, implicit killed $nzcv, debug-location !280; ep.c:206:9
  B %bb.32, debug-location !280; ep.c:206:9

bb.32.for.body76:
; predecessors: %bb.31
  successors: %bb.33(0x40000000), %bb.36(0x40000000); %bb.33(50.00%), %bb.36(50.00%)

  %230:gpr64 = LDRSWui %stack.19.i, 0, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  %231:gpr64common = ADDXrs %213:gpr64, %230:gpr64, 4, debug-location !284; ep.c:207:24
  %232:fpr64 = LDRDui %231:gpr64common, 0, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  %233:fpr64 = FADDDrr %232:fpr64, %232:fpr64, debug-location !285; ep.c:207:22
  %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
  STRDui %236:fpr64, %stack.6.x1, 0, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
  %237:fpr64 = LDRDui %231:gpr64common, 1, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  %238:fpr64 = FADDDrr %237:fpr64, %237:fpr64, debug-location !292; ep.c:208:22
  %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
  STRDui %239:fpr64, %stack.7.x2, 0, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
  %240:fpr64 = FMULDrr %236:fpr64, %236:fpr64, debug-location !297; ep.c:209:21
  %241:fpr64 = FMULDrr %239:fpr64, %239:fpr64, debug-location !300; ep.c:209:31
  %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
  STRDui %242:fpr64, %stack.2.t1, 0, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
  Bcc 8, %bb.36, implicit killed $nzcv, debug-location !306; ep.c:210:17
  B %bb.33, debug-location !306; ep.c:210:17

bb.33.if.then92:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.34(0x30000000); %bb.35(62.50%), %bb.34(37.50%)

  %243:fpr64 = LDRDui %stack.2.t1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !309; ep.c:211:34
  $d0 = COPY %243:fpr64, debug-location !309; ep.c:211:34
  BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !309; ep.c:211:34
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !309; ep.c:211:34
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !310; ep.c:211:32
  PCN_STACKMAP 22, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %243:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !310 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:32
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !310; ep.c:211:32
  %244:fpr64 = COPY killed $d0, debug-location !309; ep.c:211:34
  %247:fpr64 = FMULDrr %244:fpr64, %246:fpr64, debug-location !310; ep.c:211:32
  %248:fpr64 = LDRDui %stack.2.t1, 0, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  %4:fpr64 = FDIVDrr %247:fpr64, %248:fpr64, debug-location !312; ep.c:211:42
  %289:fpr64 = FSQRTDr %4:fpr64, debug-location !313; ep.c:211:22
  FCMPDrr %289:fpr64, %289:fpr64, implicit-def $nzcv, debug-location !314; ep.c:211:20
  Bcc 7, %bb.35, implicit killed $nzcv, debug-location !314; ep.c:211:20
  B %bb.34, debug-location !314; ep.c:211:20

bb.34.call.sqrt1:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !314; ep.c:211:20
  $d0 = COPY %4:fpr64, debug-location !314; ep.c:211:20
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !314; ep.c:211:20
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !314; ep.c:211:20
  %289:fpr64 = COPY killed $d0, debug-location !314; ep.c:211:20

bb.35.if.then92.split:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !314; ep.c:211:20
  PCN_STACKMAP 23, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %4:fpr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !314 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:20
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !314; ep.c:211:20
  STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
  %250:fpr64 = LDRDui %stack.6.x1, 0, debug-location !315 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
  %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
  STRDui %251:fpr64, %stack.4.t3, 0, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
  %252:fpr64 = LDRDui %stack.7.x2, 0, debug-location !319 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
  %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
  STRDui %253:fpr64, %stack.5.t4, 0, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  %254:fpr64 = FABSDr %251:fpr64, debug-location !323; ep.c:214:21
  %255:fpr64 = FABSDr %253:fpr64, debug-location !323; ep.c:214:21
  FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
  %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit killed $nzcv, debug-location !323; ep.c:214:21
  %257:fpr64 = FABSDr %256:fpr64, debug-location !323; ep.c:214:21
  undef %259.sub_32:gpr64 = FCVTZSUWDr %257:fpr64, debug-location !323; ep.c:214:21
  STRWui %259.sub_32:gpr64, %stack.22.l, 0, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  %261:gpr64 = SBFMXri %259:gpr64, 61, 31, debug-location !326; ep.c:215:24
  %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
  STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  %267:fpr64 = LDRDui %stack.8.sx, 0, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
  STRDui %268:fpr64, %stack.8.sx, 0, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
  %269:fpr64 = LDRDui %stack.9.sy, 0, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
  STRDui %270:fpr64, %stack.9.sy, 0, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20

bb.36.for.inc110:
; predecessors: %bb.32, %bb.35
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %271:gpr32common = LDRWui %stack.19.i, 0, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  %272:gpr32common = nsw ADDWri %271:gpr32common, 1, 0, debug-location !340; ep.c:206:30
  STRWui %272:gpr32common, %stack.19.i, 0, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
  B %bb.31, debug-location !341; ep.c:206:9

bb.37.for.end112:
; predecessors: %bb.31
  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

  %225:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !344 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
  CBZW %225:gpr32, %bb.39, debug-location !346; ep.c:221:13
  B %bb.38, debug-location !346; ep.c:221:13

bb.38.if.then114:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !347; ep.c:222:13
  $w0 = MOVi32imm 1, debug-location !347; ep.c:222:13
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !347; ep.c:222:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !347; ep.c:222:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !347; ep.c:222:13
  PCN_STACKMAP 24, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !347 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:222:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !347; ep.c:222:13

bb.39.for.inc116:
; predecessors: %bb.37, %bb.38
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %227:gpr32common = LDRWui %stack.23.k, 0, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  %228:gpr32common = nsw ADDWri %227:gpr32common, 1, 0, debug-location !348; ep.c:172:27
  STRWui %228:gpr32common, %stack.23.k, 0, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
  B %bb.17, debug-location !349; ep.c:172:5

bb.40.for.end118:
; predecessors: %bb.17
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  STRWui $wzr, %stack.19.i, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  %183:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

bb.41.for.cond119:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

  %74:gpr32common = LDRWui %stack.19.i, 0, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  dead $wzr = SUBSWri %74:gpr32common, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
  Bcc 12, %bb.43, implicit killed $nzcv, debug-location !358; ep.c:225:5
  B %bb.42, debug-location !358; ep.c:225:5

bb.42.for.body122:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  %180:fpr64 = LDRDui %stack.13.gc, 0, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  %181:gpr64common = LDRSWui %stack.19.i, 0, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  %184:fpr64 = LDRDroX %183:gpr64common, %181:gpr64common, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  %185:fpr64 = FADDDrr %180:fpr64, %184:fpr64, debug-location !363; ep.c:226:17
  STRDui %185:fpr64, %stack.13.gc, 0, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  %186:gpr32common = nsw ADDWri %181.sub_32:gpr64common, 1, 0, debug-location !365; ep.c:225:26
  STRWui %186:gpr32common, %stack.19.i, 0, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  B %bb.41, debug-location !366; ep.c:225:5

bb.43.do.end130:
; predecessors: %bb.41
  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !369; ep.c:231:5
  $w0 = COPY $wzr, debug-location !369; ep.c:231:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, debug-location !369; ep.c:231:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !369; ep.c:231:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !370; ep.c:232:10
  PCN_STACKMAP 25, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !370 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:10
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !370; ep.c:232:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !370; ep.c:232:10
  $w0 = COPY $wzr, debug-location !370; ep.c:232:10
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !370; ep.c:232:10
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !370; ep.c:232:10
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !371; ep.c:232:8
  PCN_STACKMAP 26, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !371 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:8
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !371; ep.c:232:8
  %77:fpr64 = COPY killed $d0, debug-location !370; ep.c:232:10
  STRDui %77:fpr64, %stack.10.tm, 0, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  STRWui $wzr, %stack.24.nit, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  %78:gpr32 = MOVi32imm 1
  STRWui %78:gpr32, %stack.27.verified, 0, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  %79:gpr64 = MOVi64imm 4675776847449726827
  STRXui %79:gpr64, %stack.14.sx_verify_value, 0, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  %80:gpr64 = MOVi64imm -4550329231111044107
  STRXui %80:gpr64, %stack.15.sy_verify_value, 0, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  CBZW %78:gpr32, %bb.45, debug-location !383; ep.c:268:9
  B %bb.44, debug-location !383; ep.c:268:9

bb.44.if.then133:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %81:fpr64 = LDRDui %stack.8.sx, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  %82:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
  %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
  %85:fpr64 = FABSDr %84:fpr64, debug-location !390; ep.c:269:18
  STRDui %85:fpr64, %stack.16.sx_err, 0, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
  %86:fpr64 = LDRDui %stack.9.sy, 0, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  %87:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
  %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
  %90:fpr64 = FABSDr %89:fpr64, debug-location !397; ep.c:270:18
  STRDui %90:fpr64, %stack.17.sy_err, 0, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
  %91:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %92:fpr64 = LDRDui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
  %93:gpr32 = CSINCWr $wzr, $wzr, 8, implicit killed $nzcv, debug-location !400; ep.c:271:29
  FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
  %94:gpr32 = CSINCWr $wzr, $wzr, 8, implicit killed $nzcv, debug-location !401; ep.c:271:41
  %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
  STRWui %95:gpr32, %stack.27.verified, 0, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18

bb.45.if.end142:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !404; ep.c:274:12
  %96:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %98:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %99:fpr64 = LDRDui %98:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $d0 = COPY %97:fpr64, debug-location !404; ep.c:274:12
  $d1 = COPY %99:fpr64, debug-location !404; ep.c:274:12
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !404; ep.c:274:12
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !405; ep.c:274:30
  PCN_STACKMAP 27, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !405 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:274:30
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !405; ep.c:274:30
  %100:fpr64 = COPY killed $d0, debug-location !404; ep.c:274:12
  %101:fpr64 = LDRDui %stack.10.tm, 0, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  %102:fpr64 = FDIVDrr %100:fpr64, %101:fpr64, debug-location !406; ep.c:274:28
  %103:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  %104:fpr64 = LDRDui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  %105:fpr64 = FDIVDrr %102:fpr64, %104:fpr64, debug-location !407; ep.c:274:33
  STRDui %105:fpr64, %stack.1.Mops, 0, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:276:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_5__EP_Benchm, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_5__EP_Benchm, debug-location !409; ep.c:276:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w8, debug-location !409; ep.c:276:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !409; ep.c:276:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !410; ep.c:277:35
  PCN_STACKMAP 28, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !410 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:277:35
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !410; ep.c:277:35
  %108:fpr64 = LDRDui %stack.10.tm, 0, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !411; ep.c:277:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_6_CPU_Time__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
  $d0 = COPY %108:fpr64, debug-location !411; ep.c:277:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !411; ep.c:277:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !412; ep.c:278:5
  PCN_STACKMAP 29, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %108:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !412 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:278:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:278:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:278:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_7_N___2__5d_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
  $w1 = MOVi32imm 30, debug-location !412; ep.c:278:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !412; ep.c:278:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !413; ep.c:279:46
  PCN_STACKMAP 30, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !413 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:279:46
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !413; ep.c:279:46
  %114:fpr64 = LDRDui %stack.13.gc, 0, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !414; ep.c:279:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_8_No__Gaussi, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
  $d0 = COPY %114:fpr64, debug-location !414; ep.c:279:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !414; ep.c:279:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !415; ep.c:280:42
  PCN_STACKMAP 31, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %114:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !415 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:280:42
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:42
  %117:fpr64 = LDRDui %stack.8.sx, 0, debug-location !415 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  %118:fpr64 = LDRDui %stack.9.sy, 0, debug-location !416 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !417; ep.c:280:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_9_Sums____25, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
  $d0 = COPY %117:fpr64, debug-location !417; ep.c:280:5
  $d1 = COPY %118:fpr64, debug-location !417; ep.c:280:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !417; ep.c:280:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !418; ep.c:281:5
  PCN_STACKMAP 32, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %117:fpr64, %118:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !418 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:281:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !418; ep.c:281:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !418; ep.c:281:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_10_Counts____, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit-def $sp, implicit-def dead $w8, debug-location !418; ep.c:281:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !418; ep.c:281:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !419; ep.c:282:12
  PCN_STACKMAP 33, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !419 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:282:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !419; ep.c:282:12
  STRWui $wzr, %stack.19.i, 0, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
  %174:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

bb.46.for.cond152:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

  %124:gpr32common = LDRWui %stack.19.i, 0, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  dead $wzr = SUBSWri %124:gpr32common, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
  Bcc 12, %bb.48, implicit killed $nzcv, debug-location !425; ep.c:282:5
  B %bb.47, debug-location !425; ep.c:282:5

bb.47.for.body155:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %172:gpr64 = LDRSWui %stack.19.i, 0, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  %175:fpr64 = LDRDroX %174:gpr64common, %172:gpr64, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !430; ep.c:283:9
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_11__3d_15_0lf, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
  $w1 = COPY %172.sub_32:gpr64, debug-location !430; ep.c:283:9
  $d0 = COPY %175:fpr64, debug-location !430; ep.c:283:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !430; ep.c:283:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !431; ep.c:284:5
  PCN_STACKMAP 34, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %172.sub_32:gpr64, %175:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !431 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:284:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !431; ep.c:284:5
  %178:gpr32common = LDRWui %stack.19.i, 0, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  %179:gpr32common = nsw ADDWri %178:gpr32common, 1, 0, debug-location !432; ep.c:282:26
  STRWui %179:gpr32common, %stack.19.i, 0, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
  B %bb.46, debug-location !433; ep.c:282:5

bb.48.for.end161:
; predecessors: %bb.46
  successors: %bb.49(0x50000000), %bb.52(0x30000000); %bb.49(62.50%), %bb.52(37.50%)

  %126:gpr32 = LDRWui %stack.24.nit, 0, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  %127:fpr64 = LDRDui %stack.10.tm, 0, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  %128:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  %129:gpr32 = LDRWui %stack.27.verified, 0, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !440; ep.c:286:5
  %130:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_22_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
  STRXui %130:gpr64, $sp, 10, debug-location !440 :: (store 8 into stack + 80); ep.c:286:5
  %132:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_21__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
  STRXui %132:gpr64, $sp, 9, debug-location !440 :: (store 8 into stack + 72); ep.c:286:5
  %133:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_20__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
  STRXui %133:gpr64, $sp, 8, debug-location !440 :: (store 8 into stack + 64); ep.c:286:5
  %134:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_19__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
  STRXui %134:gpr64, $sp, 7, debug-location !440 :: (store 8 into stack + 56); ep.c:286:5
  %135:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_18__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, debug-location !440; ep.c:286:5
  STRXui %135:gpr64, $sp, 6, debug-location !440 :: (store 8 into stack + 48); ep.c:286:5
  %136:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_17___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, debug-location !440; ep.c:286:5
  STRXui %136:gpr64, $sp, 5, debug-location !440 :: (store 8 into stack + 40); ep.c:286:5
  %137:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_16_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
  STRXui %137:gpr64, $sp, 4, debug-location !440 :: (store 8 into stack + 32); ep.c:286:5
  %138:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_15_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
  STRXui %138:gpr64, $sp, 3, debug-location !440 :: (store 8 into stack + 24); ep.c:286:5
  %139:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_14_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
  STRXui %139:gpr64, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
  STRWui %129:gpr32, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
  %140:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_13_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
  STRXui %140:gpr64, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_12_EP_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, debug-location !440; ep.c:286:5
  $w1 = MOVi32imm 66, debug-location !440; ep.c:286:5
  $w2 = MOVi32imm 31, debug-location !440; ep.c:286:5
  $w3 = COPY $wzr, debug-location !440; ep.c:286:5
  $w4 = COPY $wzr, debug-location !440; ep.c:286:5
  $w5 = COPY %126:gpr32, debug-location !440; ep.c:286:5
  $d0 = COPY %127:fpr64, debug-location !440; ep.c:286:5
  $d1 = COPY %128:fpr64, debug-location !440; ep.c:286:5
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !440; ep.c:286:5
  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp, debug-location !440; ep.c:286:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !441; ep.c:290:9
  PCN_STACKMAP 35, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %126:gpr32, %127:fpr64, %128:fpr64, %129:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !441 :: (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:290:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !441; ep.c:290:9
  %145:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !441 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
  CBZW %145:gpr32, %bb.52, debug-location !443; ep.c:290:9
  B %bb.49, debug-location !443; ep.c:290:9

bb.49.if.then163:
; predecessors: %bb.48
  successors: %bb.50(0x40000000), %bb.51(0x40000000); %bb.50(50.00%), %bb.51(50.00%)

  %146:fpr64 = LDRDui %stack.10.tm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  FCMPDri %146:fpr64, implicit-def $nzcv, debug-location !448; ep.c:291:13
  Bcc 8, %bb.51, implicit killed $nzcv, debug-location !448; ep.c:291:13
  B %bb.50, debug-location !448; ep.c:291:13

bb.50.if.then166:
; predecessors: %bb.49
  successors: %bb.51(0x80000000); %bb.51(100.00%)

  %147:gpr64 = MOVi64imm 4607182418800017408
  STRXui %147:gpr64, %stack.10.tm, 0, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16

bb.51.if.end167:
; predecessors: %bb.49, %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !451; ep.c:293:14
  $w0 = COPY $wzr, debug-location !451; ep.c:293:14
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !451; ep.c:293:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !451; ep.c:293:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !452; ep.c:293:12
  PCN_STACKMAP 36, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !452 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:293:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !452; ep.c:293:12
  %149:fpr64 = COPY killed $d0, debug-location !451; ep.c:293:14
  STRDui %149:fpr64, %stack.12.tt, 0, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
  %150:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  %151:fpr64 = LDRDui %150:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  %152:fpr64 = FMULDrr %149:fpr64, %151:fpr64, debug-location !455; ep.c:294:62
  %153:fpr64 = LDRDui %stack.10.tm, 0, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  %154:fpr64 = FDIVDrr %152:fpr64, %153:fpr64, debug-location !457; ep.c:294:70
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !458; ep.c:294:9
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_23__Total_tim, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
  $d0 = COPY %149:fpr64, debug-location !458; ep.c:294:9
  $d1 = COPY %154:fpr64, debug-location !458; ep.c:294:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !458; ep.c:294:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !459; ep.c:295:14
  PCN_STACKMAP 37, 0, %154:fpr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %149:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !459 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !459; ep.c:295:14
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !459; ep.c:295:14
  $w0 = MOVi32imm 1, debug-location !459; ep.c:295:14
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !459; ep.c:295:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !459; ep.c:295:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !460; ep.c:295:12
  PCN_STACKMAP 38, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !460 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !460; ep.c:295:12
  %158:fpr64 = COPY killed $d0, debug-location !459; ep.c:295:14
  STRDui %158:fpr64, %stack.12.tt, 0, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
  %159:fpr64 = FMULDrr %158:fpr64, %151:fpr64, debug-location !463; ep.c:296:60
  %160:fpr64 = LDRDui %stack.10.tm, 0, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  %161:fpr64 = FDIVDrr %159:fpr64, %160:fpr64, debug-location !465; ep.c:296:68
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !466; ep.c:296:9
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_24_Gaussian_p, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
  $d0 = COPY %158:fpr64, debug-location !466; ep.c:296:9
  $d1 = COPY %161:fpr64, debug-location !466; ep.c:296:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !466; ep.c:296:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !467; ep.c:297:14
  PCN_STACKMAP 39, 0, %161:fpr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %158:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !467 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !467; ep.c:297:14
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !467; ep.c:297:14
  $w0 = MOVi32imm 2, debug-location !467; ep.c:297:14
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def $d0, debug-location !467; ep.c:297:14
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !467; ep.c:297:14
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !468; ep.c:297:12
  PCN_STACKMAP 40, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !468 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !468; ep.c:297:12
  %165:fpr64 = COPY killed $d0, debug-location !467; ep.c:297:14
  STRDui %165:fpr64, %stack.12.tt, 0, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
  %166:fpr64 = FMULDrr %165:fpr64, %151:fpr64, debug-location !471; ep.c:298:60
  %167:fpr64 = LDRDui %stack.10.tm, 0, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  %168:fpr64 = FDIVDrr %166:fpr64, %167:fpr64, debug-location !473; ep.c:298:68
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; ep.c:298:9
  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_25_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
  $d0 = COPY %165:fpr64, debug-location !474; ep.c:298:9
  $d1 = COPY %168:fpr64, debug-location !474; ep.c:298:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !474; ep.c:298:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !475; ep.c:299:5
  PCN_STACKMAP 41, 0, %168:fpr64, %165:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !475; ep.c:299:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !475; ep.c:299:5

bb.52.if.end180:
; predecessors: %bb.48, %bb.51

  $w8 = COPY $wzr, debug-location !476; ep.c:301:5
  RET_ReallyLR implicit killed $w8, debug-location !476; ep.c:301:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %14:gpr64 = COPY killed $x8, debug-location !106; ep.c:87:15
    To: CBNZX %14:gpr64, %bb.2, debug-location !110; ep.c:87:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %14:gpr64 = COPY killed $x8, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%14
    SU(1): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(1):   STRXui %14:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Single Issue       : false;
ExitSU:   CBNZX %14:gpr64, %bb.2, debug-location !110; ep.c:87:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %14:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr64 = COPY killed $x8, debug-location !106; ep.c:87:15
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %14:gpr64 = COPY killed $x8, debug-location !106; ep.c:87:15
SU(1):   STRXui %14:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13

********** MI Scheduling **********
main:%bb.0 entry
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, debug-location !106; ep.c:87:15
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ep__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ep__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, debug-location !106; ep.c:87:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, debug-location !106; ep.c:87:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, debug-location !106; ep.c:87:15
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ep__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, debug-location !106; ep.c:87:15

********** MI Scheduling **********
main:%bb.0 entry
  From: STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %9:gpr64common = MOVaddr target-flags(aarch64-page) @ep___const_main_dum_, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, debug-location !93; ep.c:82:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=1 Reg=%9
    SU(2): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(2):   %10:fpr128 = LDRQui %9:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
  Successors:
    SU(3): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(3):   STRQui %10:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(4):   %11:gpr64 = LDRXui %9:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
  Successors:
    SU(5): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(5):   STRXui %11:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%11
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRXui %11:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
BotQ.A RemLatency SU(4) 1c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRQui %10:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %11:gpr64 = LDRXui %9:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %10:fpr128 = LDRQui %9:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %9:gpr64common = MOVaddr target-flags(aarch64-page) @ep___const_main_dum_, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, debug-location !93; ep.c:82:12
  Ready @6c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %9:gpr64common = MOVaddr target-flags(aarch64-page) @ep___const_main_dum_, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, debug-location !93; ep.c:82:12
SU(2):   %10:fpr128 = LDRQui %9:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
SU(4):   %11:gpr64 = LDRXui %9:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
SU(0):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRQui %10:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
SU(5):   STRXui %11:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12

********** MI Scheduling **********
main:%bb.2 if.else
  From: %15:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %15:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(1):   STRWui %15:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(2):   %16:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %15:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %15:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %16:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(2):   %16:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
SU(0):   %15:gpr32 = MOVi32imm 1
SU(1):   STRWui %15:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24

********** MI Scheduling **********
main:%bb.3 if.end
  From: %27:gpr32 = MOVi32imm 14
    To: Bcc 1, %bb.5, implicit killed $nzcv, debug-location !126; ep.c:104:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %27:gpr32 = MOVi32imm 14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(1):   STRWui %27:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(2):   %28:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWri %28:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%28
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %27:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) dead $wzr = SUBSWri %28:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %27:gpr32 = MOVi32imm 14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %28:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(2):   %28:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
SU(0):   %27:gpr32 = MOVi32imm 14
SU(3):   dead $wzr = SUBSWri %28:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
SU(1):   STRWui %27:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
    To: BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ep__str_2__15_0lf_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %23:fpr64, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %23:fpr64, debug-location !120; ep.c:102:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ep__str_2__15_0lf_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ep__str_2__15_0lf_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
SU(2):   $d0 = COPY %23:fpr64, debug-location !120; ep.c:102:5

********** MI Scheduling **********
main:%bb.3 if.end
  From: %19:gpr64temp = ADRP target-flags(aarch64-page) %const.0
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %19:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%19
  Single Issue       : false;
SU(1):   %20:fpr64 = LDRDui %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%19
  Successors:
    SU(4): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(2):   %21:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%21
  Single Issue       : false;
SU(3):   %22:fpr64 = LDRDui %21:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%21
  Successors:
    SU(5): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(4):   $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d1 = COPY %22:fpr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%22
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $d1 = COPY %22:fpr64, debug-location !119; ep.c:102:30
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %22:fpr64 = LDRDui %21:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 5c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %20:fpr64 = LDRDui %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %21:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %19:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %19:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(2):   %21:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(1):   %20:fpr64 = LDRDui %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   %22:fpr64 = LDRDui %21:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
SU(5):   $d1 = COPY %22:fpr64, debug-location !119; ep.c:102:30

********** MI Scheduling **********
main:%bb.4 if.then6
  From: %30:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %30:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%30
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %31:gpr32common = nsw SUBWri %30:gpr32common, 1, 0, debug-location !127; ep.c:105:10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%30
  Successors:
    SU(2): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(2):   STRWui %31:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%31
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %31:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %31:gpr32common = nsw SUBWri %30:gpr32common, 1, 0, debug-location !127; ep.c:105:10
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %30:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %30:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
SU(1):   %31:gpr32common = nsw SUBWri %30:gpr32common, 1, 0, debug-location !127; ep.c:105:10
SU(2):   STRWui %31:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %46:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %46:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%46
  Single Issue       : false;
SU(1):   STRDui %46:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%46
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %285:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %286:gpr64 = MOVi64imm -3135276447761457362
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %46:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 3 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %286:gpr64 = MOVi64imm -3135276447761457362
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %285:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %46:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %46:fpr64 = COPY killed $d0, debug-location !144; ep.c:128:14
SU(1):   STRDui %46:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
SU(2):   STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
SU(3):   %285:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(4):   %286:gpr64 = MOVi64imm -3135276447761457362

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $x0 = COPY %42:gpr64sp, debug-location !144; ep.c:128:14
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %42:gpr64sp, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %45:fpr64, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $d0 = COPY %45:fpr64, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %42:gpr64sp, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $x0 = COPY %42:gpr64sp, debug-location !144; ep.c:128:14
SU(1):   $d0 = COPY %45:fpr64, debug-location !144; ep.c:128:14

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $w0 = COPY $wzr, debug-location !141; ep.c:127:5
    To: BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY $wzr, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %43:fpr64, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = COPY %44:gpr64sp, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $x2 = COPY %44:gpr64sp, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) $d0 = COPY %43:fpr64, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY $wzr, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(1):   $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
SU(0):   $w0 = COPY $wzr, debug-location !141; ep.c:127:5
SU(2):   $d0 = COPY %43:fpr64, debug-location !141; ep.c:127:5
SU(3):   $x2 = COPY %44:gpr64sp, debug-location !141; ep.c:127:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %40:gpr32 = MOVi32imm 16384
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(2):   STRWui %40:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(3):   %41:gpr64common = ADDXri %stack.29.dum, 0, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%41
    SU(4): Data Latency=1 Reg=%41
  Single Issue       : false;
SU(4):   %42:gpr64sp = ORRXri %41:gpr64common, 8000, debug-location !139; ep.c:127:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%41
  Single Issue       : false;
SU(5):   %43:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %44:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0, debug-location !140; ep.c:127:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%41
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 6 4 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %44:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0, debug-location !140; ep.c:127:33
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
BotQ.A RemLatency SU(4) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %42:gpr64sp = ORRXri %41:gpr64common, 8000, debug-location !139; ep.c:127:24
  Ready @1c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %41:gpr64common = ADDXri %stack.29.dum, 0, 0
  Ready @2c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %40:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  Ready @3c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %43:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  Ready @4c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %40:gpr32 = MOVi32imm 16384
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
SU(1):   %40:gpr32 = MOVi32imm 16384
SU(5):   %43:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
SU(2):   STRWui %40:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
SU(3):   %41:gpr64common = ADDXri %stack.29.dum, 0, 0
SU(4):   %42:gpr64sp = ORRXri %41:gpr64common, 8000, debug-location !139; ep.c:127:24
SU(6):   %44:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0, debug-location !140; ep.c:127:33

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_4___Number_o, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_4___Number_o, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_4___Number_o, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_4___Number_o, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
SU(1):   $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %32:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%32
  Single Issue       : false;
SU(1):   %33:gpr64common = ADDXri %stack.30.size, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   %34:gpr64common = ADDXrr %32:gpr64, %33:gpr64common, debug-location !130; ep.c:106:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
    SU(0): Data Latency=4 Reg=%32
  Successors:
    SU(3): Data Latency=1 Reg=%34
  Single Issue       : false;
SU(3):   STRBBui $wzr, %34:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%34
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRBBui $wzr, %34:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %34:gpr64common = ADDXrr %32:gpr64, %33:gpr64common, debug-location !130; ep.c:106:12
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %33:gpr64common = ADDXri %stack.30.size, 0, 0
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %32:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
SU(1):   %33:gpr64common = ADDXri %stack.30.size, 0, 0
SU(2):   %34:gpr64common = ADDXrr %32:gpr64, %33:gpr64common, debug-location !130; ep.c:106:12
SU(3):   STRBBui $wzr, %34:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17

********** MI Scheduling **********
main:%bb.6 for.cond
  From: %47:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !153; ep.c:129:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %47:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %47:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %47:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %47:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %47:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
SU(1):   dead $wzr = SUBSWri %47:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5

********** MI Scheduling **********
main:%bb.7 for.body
  From: %283:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
    To: B %bb.6, debug-location !159; ep.c:129:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %283:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%283
    SU(1): Data Latency=4 Reg=%283
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX %286:gpr64, %285:gpr64common, %283:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%283
  Single Issue       : false;
SU(2):   %287:gpr32common = nsw ADDWri %283.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%283
  Successors:
    SU(3): Data Latency=1 Reg=%287
  Single Issue       : false;
SU(3):   STRWui %287:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%287
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.6, debug-location !159; ep.c:129:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %283:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %287:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %287:gpr32common = nsw ADDWri %283.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX %286:gpr64, %285:gpr64common, %283:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %283:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
SU(1):   STRXroX %286:gpr64, %285:gpr64common, %283:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
SU(2):   %287:gpr32common = nsw ADDWri %283.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
SU(3):   STRWui %287:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30

********** MI Scheduling **********
main:%bb.8 for.end
  From: %49:gpr64temp = ADRP target-flags(aarch64-page) %const.2
    To: Bcc 7, %bb.10, implicit killed $nzcv, debug-location !164; ep.c:132:12
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %49:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=1 Reg=%49
  Single Issue       : false;
SU(1):   %0:fpr64 = LDRDui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=%49
  Successors:
    SU(2): Data Latency=4 Reg=%0
  Single Issue       : false;
SU(2):   %288:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%0
  Successors:
    SU(3): Data Latency=1 Reg=%288
  Single Issue       : false;
SU(3):   FCMPDrr %288:fpr64, %288:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%288
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.10, implicit killed $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) FCMPDrr %288:fpr64, %288:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Ready @1c
  BotQ.A TopLatency SU(3) 6c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %288:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %0:fpr64 = LDRDui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %49:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %49:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(1):   %0:fpr64 = LDRDui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(2):   %288:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
SU(3):   FCMPDrr %288:fpr64, %288:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: STRXui %55:gpr64, %stack.2.t1, 0, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui %55:gpr64, %stack.2.t1, 0, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.19.i, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.19.i, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %55:gpr64, %stack.2.t1, 0, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   STRXui %55:gpr64, %stack.2.t1, 0, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
SU(1):   STRWui $wzr, %stack.19.i, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: %57:gpr64temp = ADRP target-flags(aarch64-page) %const.3
    To: BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !172; ep.c:142:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %57:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%57
  Single Issue       : false;
SU(1):   %58:fpr64 = LDRDui %57:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%57
  Successors:
    SU(4): Data Latency=4 Reg=%58
  Single Issue       : false;
SU(2):   $w0 = COPY $wzr, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $d0 = COPY %58:fpr64, debug-location !172; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%58
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit killed $d0, implicit killed $x2, implicit-def $sp, debug-location !172; ep.c:142:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 3 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot ORDER     
Scheduling SU(4) $d0 = COPY %58:fpr64, debug-location !172; ep.c:142:5
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 3 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $w0 = COPY $wzr, debug-location !172; ep.c:142:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !172; ep.c:142:5
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !172; ep.c:142:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %58:fpr64 = LDRDui %57:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %57:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(1):   %58:fpr64 = LDRDui %57:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(3):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !172; ep.c:142:5
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !172; ep.c:142:5
SU(2):   $w0 = COPY $wzr, debug-location !172; ep.c:142:5
SU(4):   $d0 = COPY %58:fpr64, debug-location !172; ep.c:142:5

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: %55:gpr64 = MOVi64imm 4742906807993761792
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !172; ep.c:142:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %55:gpr64 = MOVi64imm 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%55
  Single Issue       : false;
SU(1):   STRXui %55:gpr64, %stack.2.t1, 0, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%55
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %55:gpr64, %stack.2.t1, 0, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %55:gpr64 = MOVi64imm 4742906807993761792
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %55:gpr64 = MOVi64imm 4742906807993761792
SU(1):   STRXui %55:gpr64, %stack.2.t1, 0, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: %51:fpr64 = COPY $d0, debug-location !164; ep.c:132:12
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %51:fpr64 = COPY $d0, debug-location !164; ep.c:132:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%51
  Single Issue       : false;
SU(1):   STRDui %51:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%51
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %51:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %51:fpr64 = COPY $d0, debug-location !164; ep.c:132:12
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %51:fpr64 = COPY $d0, debug-location !164; ep.c:132:12
SU(1):   STRDui %51:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10

********** MI Scheduling **********
main:%bb.11 for.cond26
  From: %60:gpr32common = LDRWui %stack.19.i, 0, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
    To: Bcc 12, %bb.13, implicit killed $nzcv, debug-location !180; ep.c:150:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %60:gpr32common = LDRWui %stack.19.i, 0, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%60
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %60:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%60
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %60:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:gpr32common = LDRWui %stack.19.i, 0, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %60:gpr32common = LDRWui %stack.19.i, 0, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
SU(1):   dead $wzr = SUBSWri %60:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5

********** MI Scheduling **********
main:%bb.12 for.body29
  From: %280:fpr64 = COPY $d0, debug-location !183; ep.c:151:14
    To: B %bb.11, debug-location !186; ep.c:150:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %280:fpr64 = COPY $d0, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%280
  Single Issue       : false;
SU(1):   STRDui %280:fpr64, %stack.3.t2, 0, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%280
  Single Issue       : false;
SU(2):   %281:gpr32common = LDRWui %stack.19.i, 0, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%281
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0, debug-location !185; ep.c:150:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%281
  Successors:
    SU(4): Data Latency=1 Reg=%282
  Single Issue       : false;
SU(4):   STRWui %282:gpr32common, %stack.19.i, 0, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%282
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.11, debug-location !186; ep.c:150:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %280:fpr64 = COPY $d0, debug-location !183; ep.c:151:14
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) STRWui %282:gpr32common, %stack.19.i, 0, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0, debug-location !185; ep.c:150:30
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %280:fpr64, %stack.3.t2, 0, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %281:gpr32common = LDRWui %stack.19.i, 0, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %280:fpr64 = COPY $d0, debug-location !183; ep.c:151:14
SU(2):   %281:gpr32common = LDRWui %stack.19.i, 0, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
SU(1):   STRDui %280:fpr64, %stack.3.t2, 0, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
SU(3):   %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0, debug-location !185; ep.c:150:30
SU(4):   STRWui %282:gpr32common, %stack.19.i, 0, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30

********** MI Scheduling **********
main:%bb.12 for.body29
  From: $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !183; ep.c:151:14
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %278:fpr64, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %278:fpr64, debug-location !183; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !183; ep.c:151:14
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !183; ep.c:151:14
SU(1):   $d0 = COPY %278:fpr64, debug-location !183; ep.c:151:14

********** MI Scheduling **********
main:%bb.13 for.end33
  From: %62:fpr64 = LDRDui %stack.2.t1, 0, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: %275 
Live Thru: 
  LiveReg: %275
Top Pressure:

Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %62:fpr64 = LDRDui %stack.2.t1, 0, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%62
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   STRDui %62:fpr64, %stack.11.an, 0, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%62
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(2):   %63:gpr64 = MOVi64imm 4733340128880099328
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%63
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %63:gpr64, %stack.12.tt, 0, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%63
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   STRXui $xzr, %stack.13.gc, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRXui $xzr, %stack.8.sx, 0, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRXui $xzr, %stack.9.sy, 0, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui $wzr, %stack.19.i, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %275:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(8) %275:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
Bottom Pressure:

  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 7 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 1c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRDui %62:fpr64, %stack.11.an, 0, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %62
  UpdateRegP: SU(1) STRDui %62:fpr64, %stack.11.an, 0, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
              to 
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 7 
BotQ.A RemLatency SU(3) 1c
  BotQ.A RemainingLatency 3 + 2c > CritPath 4
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRXui %63:gpr64, %stack.12.tt, 0, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %63
  UpdateRegP: SU(3) STRXui %63:gpr64, %stack.12.tt, 0, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 7 6 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 7 
  BotQ.A RemainingLatency 2 + 3c > CritPath 4
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRWui $wzr, %stack.19.i, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 2 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRXui $xzr, %stack.9.sy, 0, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 5 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) STRXui $xzr, %stack.8.sx, 0, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui $xzr, %stack.13.gc, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %63:gpr64 = MOVi64imm 4733340128880099328
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %62:fpr64 = LDRDui %stack.2.t1, 0, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
Bottom Pressure:

  Ready @8c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %62:fpr64 = LDRDui %stack.2.t1, 0, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
SU(2):   %63:gpr64 = MOVi64imm 4733340128880099328
SU(4):   STRXui $xzr, %stack.13.gc, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
SU(5):   STRXui $xzr, %stack.8.sx, 0, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
SU(6):   STRXui $xzr, %stack.9.sy, 0, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
SU(7):   STRWui $wzr, %stack.19.i, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
SU(3):   STRXui %63:gpr64, %stack.12.tt, 0, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
SU(1):   STRDui %62:fpr64, %stack.11.an, 0, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
SU(8):   %275:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

********** MI Scheduling **********
main:%bb.14 for.cond34
  From: %66:gpr32common = LDRWui %stack.19.i, 0, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
    To: Bcc 12, %bb.16, implicit killed $nzcv, debug-location !201; ep.c:160:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %66:gpr32common = LDRWui %stack.19.i, 0, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %66:gpr32common, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.16, implicit killed $nzcv, debug-location !201; ep.c:160:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %66:gpr32common, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %66:gpr32common = LDRWui %stack.19.i, 0, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %66:gpr32common = LDRWui %stack.19.i, 0, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
SU(1):   dead $wzr = SUBSWri %66:gpr32common, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5

********** MI Scheduling **********
main:%bb.15 for.body37
  From: %273:gpr64common = LDRSWui %stack.19.i, 0, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
    To: B %bb.14, debug-location !207; ep.c:160:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %273:gpr64common = LDRSWui %stack.19.i, 0, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%273
    SU(1): Data Latency=4 Reg=%273
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX $xzr, %275:gpr64common, %273:gpr64common, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%273
  Single Issue       : false;
SU(2):   %277:gpr32common = nsw ADDWri %273.sub_32:gpr64common, 1, 0, debug-location !206; ep.c:160:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%273
  Successors:
    SU(3): Data Latency=1 Reg=%277
  Single Issue       : false;
SU(3):   STRWui %277:gpr32common, %stack.19.i, 0, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%277
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.14, debug-location !207; ep.c:160:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %273:gpr64common = LDRSWui %stack.19.i, 0, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %277:gpr32common, %stack.19.i, 0, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %277:gpr32common = nsw ADDWri %273.sub_32:gpr64common, 1, 0, debug-location !206; ep.c:160:26
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX $xzr, %275:gpr64common, %273:gpr64common, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %273:gpr64common = LDRSWui %stack.19.i, 0, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
SU(1):   STRXroX $xzr, %275:gpr64common, %273:gpr64common, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
SU(2):   %277:gpr32common = nsw ADDWri %273.sub_32:gpr64common, 1, 0, debug-location !206; ep.c:160:26
SU(3):   STRWui %277:gpr32common, %stack.19.i, 0, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26

********** MI Scheduling **********
main:%bb.16 for.end42
  From: %68:gpr32 = MOVi32imm -1
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: %262 %246 %235 %215 %213 %190 %69 
Live Thru: 
  LiveReg: %262
  LiveReg: %246
  LiveReg: %235
  LiveReg: %215
  LiveReg: %213
  LiveReg: %190
  LiveReg: %69
  UpdateRegP: SU(3) STRWui %69:gpr32, %stack.23.k, 0, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
              to 
Top Pressure:

Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
SU(0):   %68:gpr32 = MOVi32imm -1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %68:gpr32, %stack.25.k_offset, 0, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %69:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%69
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRWui %69:gpr32, %stack.23.k, 0, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%69
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %190:gpr64 = MOVi64imm 4733340128880099328
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %213:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %214:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=1 Reg=%214
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %215:fpr64 = LDRDui %214:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%214
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %234:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=1 Reg=%234
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %235:fpr64 = LDRDui %234:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%234
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %245:gpr64temp = ADRP target-flags(aarch64-page) %const.7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Data Latency=1 Reg=%245
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(11):   %246:fpr64 = LDRDui %245:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%245
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(12):   %262:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 9 7 
Queue BotQ.A: 12 5 4 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 8 10 12 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(12) %262:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 9 7 
Queue BotQ.A: 1 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 8 10 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(11) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %213:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 9 7 
Queue BotQ.A: 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 10 6 8 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(11) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %190:gpr64 = MOVi64imm 4733340128880099328
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 11 7 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 8 10 6 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %246:fpr64 = LDRDui %245:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %245
  UpdateRegP: SU(11) %246:fpr64 = LDRDui %245:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 9 7 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 8 10 6 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) STRWui %69:gpr32, %stack.23.k, 0, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @4c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 9 7 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 8 10 6 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) STRWui %68:gpr32, %stack.25.k_offset, 0, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %68
  UpdateRegP: SU(1) STRWui %68:gpr32, %stack.25.k_offset, 0, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
              to 
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 10 9 7 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 8 10 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %245:gpr64temp = ADRP target-flags(aarch64-page) %const.7
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 8 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(9) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %235:fpr64 = LDRDui %234:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %234
  UpdateRegP: SU(9) %235:fpr64 = LDRDui %234:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 8 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %234:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %215:fpr64 = LDRDui %214:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %214
  UpdateRegP: SU(7) %215:fpr64 = LDRDui %214:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
  BotQ.A RemainingLatency 0 + 10c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %214:gpr64temp = ADRP target-flags(aarch64-page) %const.3
Bottom Pressure:
GPR32=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %69:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR32=1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = MOVi32imm -1
Bottom Pressure:

  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %68:gpr32 = MOVi32imm -1
SU(2):   %69:gpr32 = MOVi32imm 1
SU(6):   %214:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(7):   %215:fpr64 = LDRDui %214:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(8):   %234:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(9):   %235:fpr64 = LDRDui %234:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(10):   %245:gpr64temp = ADRP target-flags(aarch64-page) %const.7
SU(1):   STRWui %68:gpr32, %stack.25.k_offset, 0, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
SU(3):   STRWui %69:gpr32, %stack.23.k, 0, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
SU(11):   %246:fpr64 = LDRDui %245:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
SU(4):   %190:gpr64 = MOVi64imm 4733340128880099328
SU(5):   %213:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(12):   %262:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

********** MI Scheduling **********
main:%bb.17 for.cond43
  From: %70:gpr32 = LDRWui %stack.23.k, 0, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
    To: Bcc 12, %bb.40, implicit killed $nzcv, debug-location !218; ep.c:172:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %70:gpr32 = LDRWui %stack.23.k, 0, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(1):   %71:gpr32 = LDRWui %stack.18.np, 0, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %70:gpr32, %71:gpr32, implicit-def $nzcv, debug-location !218; ep.c:172:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%71
    SU(0): Data Latency=4 Reg=%70
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.40, implicit killed $nzcv, debug-location !218; ep.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %70:gpr32, %71:gpr32, implicit-def $nzcv, debug-location !218; ep.c:172:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %71:gpr32 = LDRWui %stack.18.np, 0, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %70:gpr32 = LDRWui %stack.23.k, 0, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %70:gpr32 = LDRWui %stack.23.k, 0, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
SU(1):   %71:gpr32 = LDRWui %stack.18.np, 0, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
SU(2):   dead $wzr = SUBSWrr %70:gpr32, %71:gpr32, implicit-def $nzcv, debug-location !218; ep.c:172:5

********** MI Scheduling **********
main:%bb.18 for.body46
  From: %187:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: %69 %190 
Live Out: %69 %190 
Live Thru: GPR32=2
  LiveReg: %69
  UpdateRegP: SU(7) STRWui %69:gpr32, %stack.19.i, 0, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16
              to 
  LiveReg: %190
  UpdateRegP: SU(4) STRXui %190:gpr64, %stack.2.t1, 0, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
              to 
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %187:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%187
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %188:gpr32 = LDRWui %stack.23.k, 0, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%188
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%188
    SU(0): Data Latency=4 Reg=%187
  Successors:
    SU(3): Data Latency=1 Reg=%189
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   STRWui %189:gpr32, %stack.21.kk, 0, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%189
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   STRXui %190:gpr64, %stack.2.t1, 0, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %191:fpr64 = LDRDui %stack.11.an, 0, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%191
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   STRDui %191:fpr64, %stack.3.t2, 0, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%191
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   STRWui %69:gpr32, %stack.19.i, 0, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %69:gpr32, %stack.19.i, 0, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16
Bottom Pressure:
GPR32=2
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %189:gpr32, %stack.21.kk, 0, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
Bottom Pressure:
GPR32=3
  LiveReg: %189
  UpdateRegP: SU(3) STRWui %189:gpr32, %stack.21.kk, 0, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
              to 
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(6) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRDui %191:fpr64, %stack.3.t2, 0, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %191
  UpdateRegP: SU(6) STRDui %191:fpr64, %stack.3.t2, 0, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %187
  UpdateRegP: SU(2) %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
              to 
  LiveReg: %188
  UpdateRegP: SU(2) %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
              to GPR32 -1
  Ready @3c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRXui %190:gpr64, %stack.2.t1, 0, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %191:fpr64 = LDRDui %stack.11.an, 0, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
Bottom Pressure:
GPR32=4
  Ready @6c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %188:gpr32 = LDRWui %stack.23.k, 0, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
Bottom Pressure:
GPR32=3
  Ready @7c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %187:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
Bottom Pressure:
GPR32=2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %187:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
SU(1):   %188:gpr32 = LDRWui %stack.23.k, 0, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
SU(5):   %191:fpr64 = LDRDui %stack.11.an, 0, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
SU(4):   STRXui %190:gpr64, %stack.2.t1, 0, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
SU(2):   %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
SU(6):   STRDui %191:fpr64, %stack.3.t2, 0, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
SU(3):   STRWui %189:gpr32, %stack.21.kk, 0, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
SU(7):   STRWui %69:gpr32, %stack.19.i, 0, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16

********** MI Scheduling **********
main:%bb.19 for.cond48
  From: %193:gpr32common = LDRWui %stack.19.i, 0, debug-location !230 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
    To: Bcc 12, %bb.24, implicit killed $nzcv, debug-location !233; ep.c:179:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %193:gpr32common = LDRWui %stack.19.i, 0, debug-location !230 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%193
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %193:gpr32common, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%193
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.24, implicit killed $nzcv, debug-location !233; ep.c:179:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %193:gpr32common, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %193:gpr32common = LDRWui %stack.19.i, 0, debug-location !230 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %193:gpr32common = LDRWui %stack.19.i, 0, debug-location !230 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
SU(1):   dead $wzr = SUBSWri %193:gpr32common, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9

********** MI Scheduling **********
main:%bb.20 for.body51
  From: %195:gpr32common = LDRWui %stack.21.kk, 0, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
    To: Bcc 0, %bb.22, implicit killed $nzcv, debug-location !243; ep.c:181:17
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %195:gpr32common = LDRWui %stack.21.kk, 0, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(6): Data Latency=4 Reg=%195
    SU(2): Data Latency=4 Reg=%195
    SU(1): Data Latency=4 Reg=%195
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %195:gpr32common, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%195
  Successors:
    SU(6): Out  Latency=1
    SU(2): Data Latency=1 Reg=$nzcv
  Single Issue       : false;
SU(2):   %197:gpr32 = CSINCWr %195:gpr32common, %195:gpr32common, 10, implicit killed $nzcv, debug-location !236; ep.c:180:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$nzcv
    SU(0): Data Latency=4 Reg=%195
  Successors:
    SU(5): Data Latency=1 Reg=%197
    SU(3): Data Latency=1 Reg=%197
    SU(6): Anti Latency=0
  Single Issue       : false;
SU(3):   %198:gpr32 = SBFMWri %197:gpr32, 1, 31, debug-location !236; ep.c:180:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%197
  Successors:
    SU(4): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(4):   STRWui %198:gpr32, %stack.20.ik, 0, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(5):   %199:gpr32common = ANDWri %197:gpr32, 2014, debug-location !240; ep.c:181:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%197
  Successors:
    SU(6): Data Latency=1 Reg=%199
  Single Issue       : false;
SU(6):   dead $wzr = SUBSWrr %199:gpr32common, %195:gpr32common, implicit-def $nzcv, debug-location !243; ep.c:181:17
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%199
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=%195
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.22, implicit killed $nzcv, debug-location !243; ep.c:181:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %198:gpr32, %stack.20.ik, 0, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  Ready @0c
  BotQ.A TopLatency SU(4) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %195:gpr32common = LDRWui %stack.21.kk, 0, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %195:gpr32common, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %197:gpr32 = CSINCWr %195:gpr32common, %195:gpr32common, 10, implicit killed $nzcv, debug-location !236; ep.c:180:21
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 5 3 
BotQ.A RemLatency SU(6) 7c
TopQ.A RemLatency SU(5) 2c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) dead $wzr = SUBSWrr %199:gpr32common, %195:gpr32common, implicit-def $nzcv, debug-location !243; ep.c:181:17
  Ready @1c
  BotQ.A TopLatency SU(6) 7c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 5 3 
BotQ.A RemLatency SU(3) 6c
TopQ.A RemLatency SU(5) 2c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %199:gpr32common = ANDWri %197:gpr32, 2014, debug-location !240; ep.c:181:20
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %198:gpr32 = SBFMWri %197:gpr32, 1, 31, debug-location !236; ep.c:180:21
  Ready @3c
  BotQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %195:gpr32common = LDRWui %stack.21.kk, 0, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
SU(1):   dead $wzr = SUBSWri %195:gpr32common, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
SU(2):   %197:gpr32 = CSINCWr %195:gpr32common, %195:gpr32common, 10, implicit killed $nzcv, debug-location !236; ep.c:180:21
SU(3):   %198:gpr32 = SBFMWri %197:gpr32, 1, 31, debug-location !236; ep.c:180:21
SU(5):   %199:gpr32common = ANDWri %197:gpr32, 2014, debug-location !240; ep.c:181:20
SU(6):   dead $wzr = SUBSWrr %199:gpr32common, %195:gpr32common, implicit-def $nzcv, debug-location !243; ep.c:181:17
SU(4):   STRWui %198:gpr32, %stack.20.ik, 0, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16

********** MI Scheduling **********
main:%bb.21 if.then54
  From: %203:fpr64 = COPY $d0, debug-location !245; ep.c:182:22
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %203:fpr64 = COPY $d0, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%203
  Single Issue       : false;
SU(1):   STRDui %203:fpr64, %stack.4.t3, 0, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%203
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %203:fpr64, %stack.4.t3, 0, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %203:fpr64 = COPY $d0, debug-location !245; ep.c:182:22
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %203:fpr64 = COPY $d0, debug-location !245; ep.c:182:22
SU(1):   STRDui %203:fpr64, %stack.4.t3, 0, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

********** MI Scheduling **********
main:%bb.21 if.then54
  From: $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !245; ep.c:182:22
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %201:fpr64, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %201:fpr64, debug-location !245; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !245; ep.c:182:22
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !245; ep.c:182:22
SU(1):   $d0 = COPY %201:fpr64, debug-location !245; ep.c:182:22

********** MI Scheduling **********
main:%bb.23 if.end60
  From: %207:fpr64 = COPY $d0, debug-location !253; ep.c:185:18
    To: B %bb.19, debug-location !258; ep.c:179:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %207:fpr64 = COPY $d0, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%207
  Single Issue       : false;
SU(1):   STRDui %207:fpr64, %stack.4.t3, 0, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%207
  Single Issue       : false;
SU(2):   %208:gpr32 = LDRWui %stack.20.ik, 0, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%208
  Single Issue       : false;
SU(3):   STRWui %208:gpr32, %stack.21.kk, 0, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%208
  Single Issue       : false;
SU(4):   %209:gpr32common = LDRWui %stack.19.i, 0, debug-location !257 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%209
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !257; ep.c:179:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%209
  Successors:
    SU(6): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(6):   STRWui %210:gpr32common, %stack.19.i, 0, debug-location !257 :: (store 4 into %ir.i); ep.c:179:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%210
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.19, debug-location !258; ep.c:179:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %207:fpr64 = COPY $d0, debug-location !253; ep.c:185:18
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 1 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %210:gpr32common, %stack.19.i, 0, debug-location !257 :: (store 4 into %ir.i); ep.c:179:32
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !257; ep.c:179:32
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
BotQ.A RemLatency SU(3) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRWui %208:gpr32, %stack.21.kk, 0, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  Ready @2c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %207:fpr64, %stack.4.t3, 0, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %209:gpr32common = LDRWui %stack.19.i, 0, debug-location !257 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %208:gpr32 = LDRWui %stack.20.ik, 0, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %207:fpr64 = COPY $d0, debug-location !253; ep.c:185:18
SU(2):   %208:gpr32 = LDRWui %stack.20.ik, 0, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
SU(4):   %209:gpr32common = LDRWui %stack.19.i, 0, debug-location !257 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
SU(1):   STRDui %207:fpr64, %stack.4.t3, 0, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
SU(3):   STRWui %208:gpr32, %stack.21.kk, 0, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
SU(5):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !257; ep.c:179:32
SU(6):   STRWui %210:gpr32common, %stack.19.i, 0, debug-location !257 :: (store 4 into %ir.i); ep.c:179:32

********** MI Scheduling **********
main:%bb.23 if.end60
  From: $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !253; ep.c:185:18
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %205:fpr64, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %205:fpr64, debug-location !253; ep.c:185:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !253; ep.c:185:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !253; ep.c:185:18
SU(1):   $d0 = COPY %205:fpr64, debug-location !253; ep.c:185:18

********** MI Scheduling **********
main:%bb.26 if.end66
  From: $w0 = MOVi32imm 131072, debug-location !265; ep.c:194:9
    To: BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !265; ep.c:194:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = MOVi32imm 131072, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %215:fpr64, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !265; ep.c:194:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %215:fpr64, debug-location !265; ep.c:194:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $w0 = MOVi32imm 131072, debug-location !265; ep.c:194:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !265; ep.c:194:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !265; ep.c:194:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !265; ep.c:194:9
SU(3):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !265; ep.c:194:9
SU(0):   $w0 = MOVi32imm 131072, debug-location !265; ep.c:194:9
SU(2):   $d0 = COPY %215:fpr64, debug-location !265; ep.c:194:9

********** MI Scheduling **********
main:%bb.31 for.cond73
  From: %223:gpr32common = LDRWui %stack.19.i, 0, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
    To: Bcc 10, %bb.37, implicit killed $nzcv, debug-location !280; ep.c:206:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %223:gpr32common = LDRWui %stack.19.i, 0, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%223
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %223:gpr32common, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%223
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.37, implicit killed $nzcv, debug-location !280; ep.c:206:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %223:gpr32common, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %223:gpr32common = LDRWui %stack.19.i, 0, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %223:gpr32common = LDRWui %stack.19.i, 0, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
SU(1):   dead $wzr = SUBSWri %223:gpr32common, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9

********** MI Scheduling **********
main:%bb.32 for.body76
  From: %230:gpr64 = LDRSWui %stack.19.i, 0, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
    To: Bcc 8, %bb.36, implicit killed $nzcv, debug-location !306; ep.c:210:17
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %235 %213 
Live Out: %235 %213 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %235
  UpdateRegP: SU(4) %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
              to 
  UpdateRegP: SU(8) %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
              to 
  UpdateRegP: SU(14) FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %213
  UpdateRegP: SU(1) %231:gpr64common = ADDXrs %213:gpr64, %230:gpr64, 4, debug-location !284; ep.c:207:24
              to 
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
Cluster ld/st SU(2) - SU(6)
  Copy Succ SU(3)
SU(0):   %230:gpr64 = LDRSWui %stack.19.i, 0, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%230
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %231:gpr64common = ADDXrs %213:gpr64, %230:gpr64, 4, debug-location !284; ep.c:207:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%230
  Successors:
    SU(6): Data Latency=1 Reg=%231
    SU(2): Data Latency=1 Reg=%231
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %232:fpr64 = LDRDui %231:gpr64common, 0, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%231
  Successors:
    SU(3): Data Latency=4 Reg=%232
    SU(6): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %233:fpr64 = FADDDrr %232:fpr64, %232:fpr64, debug-location !285; ep.c:207:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%232
    SU(6): Ord  Latency=0 Artificial
  Successors:
    SU(4): Data Latency=1 Reg=%233
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%233
  Successors:
    SU(10): Data Latency=1 Reg=%236
    SU(5): Data Latency=1 Reg=%236
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRDui %236:fpr64, %stack.6.x1, 0, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%236
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %237:fpr64 = LDRDui %231:gpr64common, 1, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%231
    SU(2): Ord  Latency=0 Cluster
  Successors:
    SU(7): Data Latency=4 Reg=%237
    SU(3): Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %238:fpr64 = FADDDrr %237:fpr64, %237:fpr64, debug-location !292; ep.c:208:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=%237
  Successors:
    SU(8): Data Latency=1 Reg=%238
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=%238
  Successors:
    SU(11): Data Latency=1 Reg=%239
    SU(9): Data Latency=1 Reg=%239
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRDui %239:fpr64, %stack.7.x2, 0, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%239
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %240:fpr64 = FMULDrr %236:fpr64, %236:fpr64, debug-location !297; ep.c:209:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%236
  Successors:
    SU(12): Data Latency=1 Reg=%240
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %241:fpr64 = FMULDrr %239:fpr64, %239:fpr64, debug-location !300; ep.c:209:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%239
  Successors:
    SU(12): Data Latency=1 Reg=%241
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(11): Data Latency=1 Reg=%241
    SU(10): Data Latency=1 Reg=%240
  Successors:
    SU(14): Data Latency=1 Reg=%242
    SU(13): Data Latency=1 Reg=%242
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(13):   STRDui %242:fpr64, %stack.2.t1, 0, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%242
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(14):   FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(12): Data Latency=1 Reg=%242
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   Bcc 8, %bb.36, implicit killed $nzcv, debug-location !306; ep.c:210:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %230:gpr64 = LDRSWui %stack.19.i, 0, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
Top Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 9 5 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %231:gpr64common = ADDXrs %213:gpr64, %230:gpr64, 4, debug-location !284; ep.c:207:24
Top Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 13 9 5 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot ORDER     
Scheduling SU(13) STRDui %242:fpr64, %stack.2.t1, 0, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %242
  UpdateRegP: SU(13) STRDui %242:fpr64, %stack.2.t1, 0, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
              to 
  UpdateRegP: SU(14) FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 14 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(14) 13c
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @1c
  BotQ.A TopLatency SU(14) 13c
  BotQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 12 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(12) 12c
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %240
  UpdateRegP: SU(12) %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
              to 
  LiveReg: %241
  UpdateRegP: SU(12) %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 11 10 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %241:fpr64 = FMULDrr %239:fpr64, %239:fpr64, debug-location !300; ep.c:209:31
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %239
  UpdateRegP: SU(9) STRDui %239:fpr64, %stack.7.x2, 0, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
              to 
  UpdateRegP: SU(11) %241:fpr64 = FMULDrr %239:fpr64, %239:fpr64, debug-location !300; ep.c:209:31
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 10 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
  BotQ.A RemainingLatency 11 + 4c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %240:fpr64 = FMULDrr %236:fpr64, %236:fpr64, debug-location !297; ep.c:209:21
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %236
  UpdateRegP: SU(5) STRDui %236:fpr64, %stack.6.x1, 0, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
              to 
  UpdateRegP: SU(10) %240:fpr64 = FMULDrr %236:fpr64, %236:fpr64, debug-location !297; ep.c:209:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
  BotQ.A RemainingLatency 11 + 5c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRDui %239:fpr64, %stack.7.x2, 0, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @5c
  BotQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(5) 11c
  BotQ.A RemainingLatency 11 + 6c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %236:fpr64, %stack.6.x1, 0, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A TopLatency SU(5) 11c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 7c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %238
  UpdateRegP: SU(8) %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(4) 10c
  BotQ.A RemainingLatency 10 + 8c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %233
  UpdateRegP: SU(4) %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A TopLatency SU(4) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 6 2 
BotQ.A RemLatency SU(7) 9c
  BotQ.A RemainingLatency 9 + 9c > CritPath 14
TopQ.A RemLatency SU(6) 9c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %238:fpr64 = FADDDrr %237:fpr64, %237:fpr64, debug-location !292; ep.c:208:22
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %237
  UpdateRegP: SU(7) %238:fpr64 = FADDDrr %237:fpr64, %237:fpr64, debug-location !292; ep.c:208:22
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %233:fpr64 = FADDDrr %232:fpr64, %232:fpr64, debug-location !285; ep.c:207:22
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %232
  UpdateRegP: SU(3) %233:fpr64 = FADDDrr %232:fpr64, %232:fpr64, debug-location !285; ep.c:207:22
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 13 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %237:fpr64 = LDRDui %231:gpr64common, 1, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %231
  UpdateRegP: SU(2) %232:fpr64 = LDRDui %231:gpr64common, 0, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) %237:fpr64 = LDRDui %231:gpr64common, 1, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  BotQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %232:fpr64 = LDRDui %231:gpr64common, 0, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %230:gpr64 = LDRSWui %stack.19.i, 0, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
SU(1):   %231:gpr64common = ADDXrs %213:gpr64, %230:gpr64, 4, debug-location !284; ep.c:207:24
SU(2):   %232:fpr64 = LDRDui %231:gpr64common, 0, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
SU(6):   %237:fpr64 = LDRDui %231:gpr64common, 1, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
SU(3):   %233:fpr64 = FADDDrr %232:fpr64, %232:fpr64, debug-location !285; ep.c:207:22
SU(7):   %238:fpr64 = FADDDrr %237:fpr64, %237:fpr64, debug-location !292; ep.c:208:22
SU(4):   %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
SU(8):   %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
SU(5):   STRDui %236:fpr64, %stack.6.x1, 0, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
SU(9):   STRDui %239:fpr64, %stack.7.x2, 0, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
SU(10):   %240:fpr64 = FMULDrr %236:fpr64, %236:fpr64, debug-location !297; ep.c:209:21
SU(11):   %241:fpr64 = FMULDrr %239:fpr64, %239:fpr64, debug-location !300; ep.c:209:31
SU(12):   %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
SU(14):   FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
SU(13):   STRDui %242:fpr64, %stack.2.t1, 0, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16

********** MI Scheduling **********
main:%bb.33 if.then92
  From: %244:fpr64 = COPY $d0, debug-location !309; ep.c:211:34
    To: Bcc 7, %bb.35, implicit killed $nzcv, debug-location !314; ep.c:211:20
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %244:fpr64 = COPY $d0, debug-location !309; ep.c:211:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=0 Reg=%244
  Single Issue       : false;
SU(1):   %247:fpr64 = FMULDrr %244:fpr64, %246:fpr64, debug-location !310; ep.c:211:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%244
  Successors:
    SU(3): Data Latency=1 Reg=%247
  Single Issue       : false;
SU(2):   %248:fpr64 = LDRDui %stack.2.t1, 0, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%248
  Single Issue       : false;
SU(3):   %4:fpr64 = FDIVDrr %247:fpr64, %248:fpr64, debug-location !312; ep.c:211:42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%248
    SU(1): Data Latency=1 Reg=%247
  Successors:
    SU(4): Data Latency=1 Reg=%4
  Single Issue       : false;
SU(4):   %289:fpr64 = FSQRTDr %4:fpr64, debug-location !313; ep.c:211:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%4
  Successors:
    SU(5): Data Latency=1 Reg=%289
  Single Issue       : false;
SU(5):   FCMPDrr %289:fpr64, %289:fpr64, implicit-def $nzcv, debug-location !314; ep.c:211:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%289
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.35, implicit killed $nzcv, debug-location !314; ep.c:211:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) FCMPDrr %289:fpr64, %289:fpr64, implicit-def $nzcv, debug-location !314; ep.c:211:20
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %289:fpr64 = FSQRTDr %4:fpr64, debug-location !313; ep.c:211:22
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %4:fpr64 = FDIVDrr %247:fpr64, %248:fpr64, debug-location !312; ep.c:211:42
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %247:fpr64 = FMULDrr %244:fpr64, %246:fpr64, debug-location !310; ep.c:211:32
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %244:fpr64 = COPY $d0, debug-location !309; ep.c:211:34
  Ready @5c
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %248:fpr64 = LDRDui %stack.2.t1, 0, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(2):   %248:fpr64 = LDRDui %stack.2.t1, 0, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
SU(0):   %244:fpr64 = COPY $d0, debug-location !309; ep.c:211:34
SU(1):   %247:fpr64 = FMULDrr %244:fpr64, %246:fpr64, debug-location !310; ep.c:211:32
SU(3):   %4:fpr64 = FDIVDrr %247:fpr64, %248:fpr64, debug-location !312; ep.c:211:42
SU(4):   %289:fpr64 = FSQRTDr %4:fpr64, debug-location !313; ep.c:211:22
SU(5):   FCMPDrr %289:fpr64, %289:fpr64, implicit-def $nzcv, debug-location !314; ep.c:211:20

********** MI Scheduling **********
main:%bb.35 if.then92.split
  From: STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
    To: End RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
Live In: %262 %235 %289 
Live Out: %262 %235 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %262
  UpdateRegP: SU(15) %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(17) STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %235
  UpdateRegP: SU(16) %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
              to 
Top Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(1):   %250:fpr64 = LDRDui %stack.6.x1, 0, debug-location !315 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%250
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%250
  Successors:
    SU(19): Data Latency=1 Reg=%251
    SU(10): Data Latency=1 Reg=%251
    SU(7): Data Latency=1 Reg=%251
    SU(3): Data Latency=1 Reg=%251
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   STRDui %251:fpr64, %stack.4.t3, 0, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%251
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   %252:fpr64 = LDRDui %stack.7.x2, 0, debug-location !319 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%252
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%252
  Successors:
    SU(22): Data Latency=1 Reg=%253
    SU(10): Data Latency=1 Reg=%253
    SU(8): Data Latency=1 Reg=%253
    SU(6): Data Latency=1 Reg=%253
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   STRDui %253:fpr64, %stack.5.t4, 0, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%253
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   %254:fpr64 = FABSDr %251:fpr64, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%251
  Successors:
    SU(9): Data Latency=1 Reg=%254
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %255:fpr64 = FABSDr %253:fpr64, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(5): Data Latency=1 Reg=%253
  Successors:
    SU(9): Data Latency=1 Reg=%255
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(8): Data Latency=1 Reg=%255
    SU(7): Data Latency=1 Reg=%254
  Successors:
    SU(10): Data Latency=1 Reg=$nzcv
  Pressure Diff      : FPR8 2    FPR8+ZPR_3b 2    FPR8+ZPR4_with_zsub1_in_ZPR_3b 2    FPR8+ZPR4_with_zsub2_in_ZPR_3b 2    FPR8+ZPR4_with_zsub3_in_ZPR_3b 2    ZPR_4b 2    ZPR 2
  Single Issue       : false;
SU(10):   %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit killed $nzcv, debug-location !323; ep.c:214:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(9): Data Latency=1 Reg=$nzcv
    SU(5): Data Latency=1 Reg=%253
    SU(2): Data Latency=1 Reg=%251
  Successors:
    SU(11): Data Latency=1 Reg=%256
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   %257:fpr64 = FABSDr %256:fpr64, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(10): Data Latency=1 Reg=%256
  Successors:
    SU(12): Data Latency=1 Reg=%257
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   undef %259.sub_32:gpr64 = FCVTZSUWDr %257:fpr64, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=%257
  Successors:
    SU(14): Data Latency=1 Reg=%259
    SU(13): Data Latency=1 Reg=%259
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(13):   STRWui %259.sub_32:gpr64, %stack.22.l, 0, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%259
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %261:gpr64 = SBFMXri %259:gpr64, 61, 31, debug-location !326; ep.c:215:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=%259
  Successors:
    SU(17): Data Latency=1 Reg=%261
    SU(15): Data Latency=1 Reg=%261
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(14): Data Latency=1 Reg=%261
  Successors:
    SU(16): Data Latency=4 Reg=%263
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(16):   %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(15): Data Latency=4 Reg=%263
  Successors:
    SU(17): Data Latency=1 Reg=%266
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%266
    SU(15): Ord  Latency=0 Memory
    SU(14): Data Latency=1 Reg=%261
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %267:fpr64 = LDRDui %stack.8.sx, 0, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(19): Data Latency=4 Reg=%267
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(19):   %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%251
    SU(18): Data Latency=4 Reg=%267
  Successors:
    SU(20): Data Latency=1 Reg=%268
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   STRDui %268:fpr64, %stack.8.sx, 0, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%268
    SU(18): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(21):   %269:fpr64 = LDRDui %stack.9.sy, 0, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(22): Data Latency=4 Reg=%269
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(22):   %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%253
    SU(21): Data Latency=4 Reg=%269
  Successors:
    SU(23): Data Latency=1 Reg=%270
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(23):   STRDui %270:fpr64, %stack.9.sy, 0, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%270
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 20 17 13 6 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) STRDui %270:fpr64, %stack.9.sy, 0, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %270
  UpdateRegP: SU(23) STRDui %270:fpr64, %stack.9.sy, 0, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(23) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 20 17 13 6 3 22 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(17) 16c
  BotQ.A RemainingLatency 16 + 1c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
  Cand SU(17) BOT-PATH                  16 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %266
  UpdateRegP: SU(17) STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to GPR32 1
  LiveReg: %261
  UpdateRegP: SU(15) %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(17) STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to 
  Ready @1c
  BotQ.A TopLatency SU(17) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 20 22 13 6 3 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(16) 15c
  BotQ.A RemainingLatency 15 + 2c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
  Cand SU(16) BOT-PATH                  15 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %263
  UpdateRegP: SU(16) %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 0 20 22 13 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 14 + 3c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(20) STRDui %268:fpr64, %stack.8.sx, 0, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %268
  UpdateRegP: SU(20) STRDui %268:fpr64, %stack.8.sx, 0, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 0 3 22 13 6 19 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 13 + 4c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(22) %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
Bottom Pressure:
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %269
  UpdateRegP: SU(22) %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
              to 
  LiveReg: %253
  UpdateRegP: SU(6) STRDui %253:fpr64, %stack.5.t4, 0, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
              to 
  UpdateRegP: SU(8) %255:fpr64 = FABSDr %253:fpr64, debug-location !323; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(10) %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit killed $nzcv, debug-location !323; ep.c:214:21
              to 
  UpdateRegP: SU(22) %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 21 
Queue BotQ.A: 0 3 19 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 12 + 5c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(13) REG-MAX    GPR32:1                    
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) STRDui %253:fpr64, %stack.5.t4, 0, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
Bottom Pressure:
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 0 3 19 13 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(15) 11c
  BotQ.A RemainingLatency 11 + 6c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(13) REG-MAX    GPR32:1                    
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @6c
  BotQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 0 3 19 13 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
  BotQ.A RemainingLatency 10 + 7c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(14) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %261:gpr64 = SBFMXri %259:gpr64, 61, 31, debug-location !326; ep.c:215:24
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %259
  UpdateRegP: SU(13) STRWui %259.sub_32:gpr64, %stack.22.l, 0, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
              to 
  UpdateRegP: SU(14) %261:gpr64 = SBFMXri %259:gpr64, 61, 31, debug-location !326; ep.c:215:24
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 13 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(13) 10c
  BotQ.A RemainingLatency 10 + 8c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(13) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) STRWui %259.sub_32:gpr64, %stack.22.l, 0, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @8c
  BotQ.A TopLatency SU(13) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(12) 9c
  BotQ.A RemainingLatency 9 + 9c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(12) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) undef %259.sub_32:gpr64 = FCVTZSUWDr %257:fpr64, debug-location !323; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %257
  UpdateRegP: SU(12) undef %259.sub_32:gpr64 = FCVTZSUWDr %257:fpr64, debug-location !323; ep.c:214:21
              to GPR32 -1
  Ready @9c
  BotQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(11) 8c
  BotQ.A RemainingLatency 8 + 10c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(21) REG-MAX                            
  Cand SU(11) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %257:fpr64 = FABSDr %256:fpr64, debug-location !323; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %256
  UpdateRegP: SU(11) %257:fpr64 = FABSDr %256:fpr64, debug-location !323; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(10) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(19) ORDER                              
  Cand SU(21) REG-MAX                            
  Cand SU(10) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit killed $nzcv, debug-location !323; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %251
  UpdateRegP: SU(3) STRDui %251:fpr64, %stack.4.t3, 0, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
              to 
  UpdateRegP: SU(7) %254:fpr64 = FABSDr %251:fpr64, debug-location !323; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(10) %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit $nzcv, debug-location !323; ep.c:214:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
              to 
  Ready @11c
  BotQ.A BotLatency SU(10) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 19 21 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 12c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(19) %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %267
  UpdateRegP: SU(19) %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 0 3 9 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 13c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) STRDui %251:fpr64, %stack.4.t3, 0, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 0 21 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 21 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 14c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(21) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %269:fpr64 = LDRDui %stack.9.sy, 0, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 18 
Queue BotQ.A: 0 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 18 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 15c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(0) STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %289
  UpdateRegP: SU(0) STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
              to 
  UpdateRegP: SU(2) %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
              to 
  UpdateRegP: SU(5) %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
              to 
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 18 
Queue TopQ.P: 
Queue TopQ.A: 18 1 4 
BotQ.A RemLatency SU(9) 6c
  BotQ.A RemainingLatency 6 + 16c > CritPath 16
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(18) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(18) %267:fpr64 = LDRDui %stack.8.sx, 0, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
Bottom Pressure:
FPR8=6
GPR32=1
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %254
  UpdateRegP: SU(9) FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %255
  UpdateRegP: SU(9) FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
              to 
  Ready @17c
  BotQ.A TopLatency SU(9) 6c
  BotQ.A BotLatency SU(9) 10c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 18c > CritPath 16
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %255:fpr64 = FABSDr %253:fpr64, debug-location !323; ep.c:214:21
Bottom Pressure:
FPR8=5
GPR32=1
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @18c
  BotQ.A BotLatency SU(8) 11c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 19c > CritPath 16
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %254:fpr64 = FABSDr %251:fpr64, debug-location !323; ep.c:214:21
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @19c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  BotQ.A RemainingLatency 0 + 20c > CritPath 16
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %252
  UpdateRegP: SU(5) %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @20c
  BotQ.A BotLatency SU(5) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %250
  UpdateRegP: SU(2) %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @21c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 24 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %252:fpr64 = LDRDui %stack.7.x2, 0, debug-location !319 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @24c
  BotQ.A BotLatency SU(4) 16c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 23
  Executed: 25c
  Critical: 23c, 23 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %250:fpr64 = LDRDui %stack.6.x1, 0, debug-location !315 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 24
  Executed: 26c
  Critical: 24c, 24 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(1):   %250:fpr64 = LDRDui %stack.6.x1, 0, debug-location !315 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
SU(4):   %252:fpr64 = LDRDui %stack.7.x2, 0, debug-location !319 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
SU(2):   %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
SU(5):   %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
SU(7):   %254:fpr64 = FABSDr %251:fpr64, debug-location !323; ep.c:214:21
SU(8):   %255:fpr64 = FABSDr %253:fpr64, debug-location !323; ep.c:214:21
SU(9):   FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
SU(18):   %267:fpr64 = LDRDui %stack.8.sx, 0, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
SU(0):   STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
SU(21):   %269:fpr64 = LDRDui %stack.9.sy, 0, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
SU(3):   STRDui %251:fpr64, %stack.4.t3, 0, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
SU(19):   %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
SU(10):   %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit $nzcv, debug-location !323; ep.c:214:21
SU(11):   %257:fpr64 = FABSDr %256:fpr64, debug-location !323; ep.c:214:21
SU(12):   undef %259.sub_32:gpr64 = FCVTZSUWDr %257:fpr64, debug-location !323; ep.c:214:21
SU(13):   STRWui %259.sub_32:gpr64, %stack.22.l, 0, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
SU(14):   %261:gpr64 = SBFMXri %259:gpr64, 61, 31, debug-location !326; ep.c:215:24
SU(15):   %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
SU(6):   STRDui %253:fpr64, %stack.5.t4, 0, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
SU(22):   %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
SU(20):   STRDui %268:fpr64, %stack.8.sx, 0, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
SU(16):   %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
SU(17):   STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
SU(23):   STRDui %270:fpr64, %stack.9.sy, 0, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20

********** MI Scheduling **********
main:%bb.36 for.inc110
  From: %271:gpr32common = LDRWui %stack.19.i, 0, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
    To: B %bb.31, debug-location !341; ep.c:206:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %271:gpr32common = LDRWui %stack.19.i, 0, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%271
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %272:gpr32common = nsw ADDWri %271:gpr32common, 1, 0, debug-location !340; ep.c:206:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%271
  Successors:
    SU(2): Data Latency=1 Reg=%272
  Single Issue       : false;
SU(2):   STRWui %272:gpr32common, %stack.19.i, 0, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%272
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31, debug-location !341; ep.c:206:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %272:gpr32common, %stack.19.i, 0, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %272:gpr32common = nsw ADDWri %271:gpr32common, 1, 0, debug-location !340; ep.c:206:30
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %271:gpr32common = LDRWui %stack.19.i, 0, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %271:gpr32common = LDRWui %stack.19.i, 0, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
SU(1):   %272:gpr32common = nsw ADDWri %271:gpr32common, 1, 0, debug-location !340; ep.c:206:30
SU(2):   STRWui %272:gpr32common, %stack.19.i, 0, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30

********** MI Scheduling **********
main:%bb.39 for.inc116
  From: %227:gpr32common = LDRWui %stack.23.k, 0, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
    To: B %bb.17, debug-location !349; ep.c:172:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %227:gpr32common = LDRWui %stack.23.k, 0, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%227
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %228:gpr32common = nsw ADDWri %227:gpr32common, 1, 0, debug-location !348; ep.c:172:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%227
  Successors:
    SU(2): Data Latency=1 Reg=%228
  Single Issue       : false;
SU(2):   STRWui %228:gpr32common, %stack.23.k, 0, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%228
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.17, debug-location !349; ep.c:172:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %228:gpr32common, %stack.23.k, 0, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %228:gpr32common = nsw ADDWri %227:gpr32common, 1, 0, debug-location !348; ep.c:172:27
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %227:gpr32common = LDRWui %stack.23.k, 0, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %227:gpr32common = LDRWui %stack.23.k, 0, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
SU(1):   %228:gpr32common = nsw ADDWri %227:gpr32common, 1, 0, debug-location !348; ep.c:172:27
SU(2):   STRWui %228:gpr32common, %stack.23.k, 0, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27

********** MI Scheduling **********
main:%bb.40 for.end118
  From: STRWui $wzr, %stack.19.i, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.19.i, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %183:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %183:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.19.i, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   STRWui $wzr, %stack.19.i, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
SU(1):   %183:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

********** MI Scheduling **********
main:%bb.41 for.cond119
  From: %74:gpr32common = LDRWui %stack.19.i, 0, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
    To: Bcc 12, %bb.43, implicit $nzcv, debug-location !358; ep.c:225:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %74:gpr32common = LDRWui %stack.19.i, 0, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %74:gpr32common, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%74
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.43, implicit $nzcv, debug-location !358; ep.c:225:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %74:gpr32common, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %74:gpr32common = LDRWui %stack.19.i, 0, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %74:gpr32common = LDRWui %stack.19.i, 0, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
SU(1):   dead $wzr = SUBSWri %74:gpr32common, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5

********** MI Scheduling **********
main:%bb.42 for.body122
  From: %180:fpr64 = LDRDui %stack.13.gc, 0, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
    To: B %bb.41, debug-location !366; ep.c:225:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %180:fpr64 = LDRDui %stack.13.gc, 0, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%180
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %181:gpr64common = LDRSWui %stack.19.i, 0, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%181
    SU(2): Data Latency=4 Reg=%181
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %184:fpr64 = LDRDroX %183:gpr64common, %181:gpr64common, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%181
  Successors:
    SU(3): Data Latency=4 Reg=%184
  Single Issue       : false;
SU(3):   %185:fpr64 = FADDDrr %180:fpr64, %184:fpr64, debug-location !363; ep.c:226:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%184
    SU(0): Data Latency=4 Reg=%180
  Successors:
    SU(4): Data Latency=1 Reg=%185
  Single Issue       : false;
SU(4):   STRDui %185:fpr64, %stack.13.gc, 0, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%185
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %186:gpr32common = nsw ADDWri %181.sub_32:gpr64common, 1, 0, debug-location !365; ep.c:225:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%181
  Successors:
    SU(6): Data Latency=1 Reg=%186
  Single Issue       : false;
SU(6):   STRWui %186:gpr32common, %stack.19.i, 0, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%186
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.41, debug-location !366; ep.c:225:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %186:gpr32common, %stack.19.i, 0, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 1c > CritPath 9
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRDui %185:fpr64, %stack.13.gc, 0, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 8c
  BotQ.A RemainingLatency 8 + 2c > CritPath 9
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(3) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %185:fpr64 = FADDDrr %180:fpr64, %184:fpr64, debug-location !363; ep.c:226:17
  Ready @2c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %186:gpr32common = nsw ADDWri %181.sub_32:gpr64common, 1, 0, debug-location !365; ep.c:225:26
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 6c > CritPath 9
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %184:fpr64 = LDRDroX %183:gpr64common, %181:gpr64common, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %180:fpr64 = LDRDui %stack.13.gc, 0, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %181:gpr64common = LDRSWui %stack.19.i, 0, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(1):   %181:gpr64common = LDRSWui %stack.19.i, 0, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
SU(0):   %180:fpr64 = LDRDui %stack.13.gc, 0, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
SU(2):   %184:fpr64 = LDRDroX %183:gpr64common, %181:gpr64common, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
SU(5):   %186:gpr32common = nsw ADDWri %181.sub_32:gpr64common, 1, 0, debug-location !365; ep.c:225:26
SU(3):   %185:fpr64 = FADDDrr %180:fpr64, %184:fpr64, debug-location !363; ep.c:226:17
SU(4):   STRDui %185:fpr64, %stack.13.gc, 0, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
SU(6):   STRWui %186:gpr32common, %stack.19.i, 0, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26

********** MI Scheduling **********
main:%bb.43 do.end130
  From: %77:fpr64 = COPY $d0, debug-location !370; ep.c:232:10
    To: CBZW %78:gpr32, %bb.45, debug-location !383; ep.c:268:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: B0 
Live Out: 
Live Thru: 
  LiveReg: %78
  UpdateRegP: SU(4) STRWui %78:gpr32, %stack.27.verified, 0, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
              to 
Top Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %77:fpr64 = COPY $d0, debug-location !370; ep.c:232:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%77
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   STRDui %77:fpr64, %stack.10.tm, 0, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%77
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.24.nit, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %78:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Data Latency=1 Reg=%78
    SU(4): Data Latency=1 Reg=%78
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRWui %78:gpr32, %stack.27.verified, 0, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%78
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %79:gpr64 = MOVi64imm 4675776847449726827
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%79
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %79:gpr64, %stack.14.sx_verify_value, 0, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%79
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %80:gpr64 = MOVi64imm -4550329231111044107
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%80
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %80:gpr64, %stack.15.sy_verify_value, 0, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%80
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   CBZW %78:gpr32, %bb.45, debug-location !383; ep.c:268:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%78
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %77:fpr64 = COPY $d0, debug-location !370; ep.c:232:10
Top Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 2 1 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRXui %80:gpr64, %stack.15.sy_verify_value, 0, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
Bottom Pressure:
GPR32=2
  LiveReg: %80
  UpdateRegP: SU(8) STRXui %80:gpr64, %stack.15.sy_verify_value, 0, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 4 2 7 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
BotQ.A RemLatency SU(6) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %78:gpr32, %stack.27.verified, 0, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
Bottom Pressure:
GPR32=2
  Ready @1c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 7 2 3 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %80:gpr64 = MOVi64imm -4550329231111044107
Bottom Pressure:
GPR32=1
  Ready @2c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRXui %79:gpr64, %stack.14.sx_verify_value, 0, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
Bottom Pressure:
GPR32=2
  LiveReg: %79
  UpdateRegP: SU(6) STRXui %79:gpr64, %stack.14.sx_verify_value, 0, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
              to 
  Ready @3c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 5 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %79:gpr64 = MOVi64imm 4675776847449726827
Bottom Pressure:
GPR32=1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %78:gpr32 = MOVi32imm 1
Bottom Pressure:

  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.24.nit, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
Bottom Pressure:

  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %77:fpr64, %stack.10.tm, 0, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %77
  UpdateRegP: SU(1) STRDui %77:fpr64, %stack.10.tm, 0, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %77:fpr64 = COPY $d0, debug-location !370; ep.c:232:10
SU(1):   STRDui %77:fpr64, %stack.10.tm, 0, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
SU(2):   STRWui $wzr, %stack.24.nit, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
SU(3):   %78:gpr32 = MOVi32imm 1
SU(5):   %79:gpr64 = MOVi64imm 4675776847449726827
SU(6):   STRXui %79:gpr64, %stack.14.sx_verify_value, 0, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
SU(7):   %80:gpr64 = MOVi64imm -4550329231111044107
SU(4):   STRWui %78:gpr32, %stack.27.verified, 0, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
SU(8):   STRXui %80:gpr64, %stack.15.sy_verify_value, 0, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25

********** MI Scheduling **********
main:%bb.44 if.then133
  From: %81:fpr64 = LDRDui %stack.8.sx, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
    To: End RegionInstrs: 20
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %81:fpr64 = LDRDui %stack.8.sx, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=4 Reg=%81
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %82:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%82
    SU(2): Data Latency=4 Reg=%82
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%82
    SU(0): Data Latency=4 Reg=%81
  Successors:
    SU(3): Data Latency=1 Reg=%83
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%83
    SU(1): Data Latency=4 Reg=%82
  Successors:
    SU(4): Data Latency=1 Reg=%84
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   %85:fpr64 = FABSDr %84:fpr64, debug-location !390; ep.c:269:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%84
  Successors:
    SU(14): Data Latency=1 Reg=%85
    SU(5): Data Latency=1 Reg=%85
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRDui %85:fpr64, %stack.16.sx_err, 0, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%85
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %86:fpr64 = LDRDui %stack.9.sy, 0, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(8): Data Latency=4 Reg=%86
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %87:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(9): Data Latency=4 Reg=%87
    SU(8): Data Latency=4 Reg=%87
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%87
    SU(6): Data Latency=4 Reg=%86
  Successors:
    SU(9): Data Latency=1 Reg=%88
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%88
    SU(7): Data Latency=4 Reg=%87
  Successors:
    SU(10): Data Latency=1 Reg=%89
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %90:fpr64 = FABSDr %89:fpr64, debug-location !397; ep.c:270:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(9): Data Latency=1 Reg=%89
  Successors:
    SU(16): Data Latency=1 Reg=%90
    SU(11): Data Latency=1 Reg=%90
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   STRDui %90:fpr64, %stack.17.sy_err, 0, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%90
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   %91:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(13): Data Latency=1 Reg=%91
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(13):   %92:fpr64 = LDRDui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(12): Data Latency=1 Reg=%91
  Successors:
    SU(16): Data Latency=4 Reg=%92
    SU(14): Data Latency=4 Reg=%92
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(14):   FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%85
    SU(13): Data Latency=4 Reg=%92
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=1 Reg=$nzcv
  Pressure Diff      : FPR8 2    FPR8+ZPR_3b 2    FPR8+ZPR4_with_zsub1_in_ZPR_3b 2    FPR8+ZPR4_with_zsub2_in_ZPR_3b 2    FPR8+ZPR4_with_zsub3_in_ZPR_3b 2    ZPR_4b 2    ZPR 2
  Single Issue       : false;
SU(15):   %93:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(14): Data Latency=1 Reg=$nzcv
  Successors:
    SU(18): Data Latency=1 Reg=%93
    SU(16): Anti Latency=0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(13): Data Latency=4 Reg=%92
    SU(10): Data Latency=1 Reg=%90
  Successors:
    SU(17): Data Latency=1 Reg=$nzcv
  Pressure Diff      : FPR8 2    FPR8+ZPR_3b 2    FPR8+ZPR4_with_zsub1_in_ZPR_3b 2    FPR8+ZPR4_with_zsub2_in_ZPR_3b 2    FPR8+ZPR4_with_zsub3_in_ZPR_3b 2    ZPR_4b 2    ZPR 2
  Single Issue       : false;
SU(17):   %94:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(16): Data Latency=1 Reg=$nzcv
  Successors:
    SU(18): Data Latency=1 Reg=%94
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(17): Data Latency=1 Reg=%94
    SU(15): Data Latency=1 Reg=%93
  Successors:
    SU(19): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   STRWui %95:gpr32, %stack.27.verified, 0, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 1
  Single Issue       : false;
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 11 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) STRWui %95:gpr32, %stack.27.verified, 0, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18
Bottom Pressure:
GPR32=1
  LiveReg: %95
  UpdateRegP: SU(19) STRWui %95:gpr32, %stack.27.verified, 0, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18
              to 
  Ready @0c
  BotQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(18) 10c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(18) %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
Bottom Pressure:
GPR32=2
  LiveReg: %93
  UpdateRegP: SU(18) %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
              to 
  LiveReg: %94
  UpdateRegP: SU(18) %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(17) 9c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) %94:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
Bottom Pressure:
GPR32=1
  Ready @2c
  BotQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(16) 8c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %90
  UpdateRegP: SU(11) STRDui %90:fpr64, %stack.17.sy_err, 0, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
              to 
  UpdateRegP: SU(16) FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %92
  UpdateRegP: SU(14) FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(16) FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
              to 
  Ready @3c
  BotQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(15) 8c
  BotQ.A RemainingLatency 8 + 4c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(15) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %93:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @4c
  BotQ.A TopLatency SU(15) 8c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(5) 7c
  BotQ.A RemainingLatency 7 + 5c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %85
  UpdateRegP: SU(5) STRDui %85:fpr64, %stack.16.sx_err, 0, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
              to 
  UpdateRegP: SU(14) FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
              to 
  Ready @5c
  BotQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(5) 7c
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 7 + 6c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRDui %90:fpr64, %stack.17.sy_err, 0, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A TopLatency SU(11) 7c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 5 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(5) 7c
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 7 + 7c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDui %85:fpr64, %stack.16.sx_err, 0, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 10 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(10) 6c
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 6 + 8c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %90:fpr64 = FABSDr %89:fpr64, debug-location !397; ep.c:270:18
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %89
  UpdateRegP: SU(10) %90:fpr64 = FABSDr %89:fpr64, debug-location !397; ep.c:270:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 9 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 9c > CritPath 11
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %85:fpr64 = FABSDr %84:fpr64, debug-location !390; ep.c:269:18
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %84
  UpdateRegP: SU(4) %85:fpr64 = FABSDr %84:fpr64, debug-location !390; ep.c:269:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 9 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(9) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 11
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(13) %92:fpr64 = LDRDui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %91
  UpdateRegP: SU(13) %92:fpr64 = LDRDui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A BotLatency SU(13) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 9 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 11
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %88
  UpdateRegP: SU(9) %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
              to 
  LiveReg: %87
  UpdateRegP: SU(8) %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
              to 
  UpdateRegP: SU(9) %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 12 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
  BotQ.A RemainingLatency 0 + 12c > CritPath 11
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(8) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %86
  UpdateRegP: SU(8) %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 
Queue BotQ.A: 3 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 12 
  BotQ.A RemainingLatency 0 + 13c > CritPath 11
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %91:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @13c
  BotQ.A BotLatency SU(12) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %83
  UpdateRegP: SU(3) %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
              to 
  LiveReg: %82
  UpdateRegP: SU(2) %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
              to 
  UpdateRegP: SU(3) %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @14c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %81
  UpdateRegP: SU(2) %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 
  BotQ.A RemainingLatency 0 + 16c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %87:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @16c
  BotQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %86:fpr64 = LDRDui %stack.9.sy, 0, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 19 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 19c > CritPath 11
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %82:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @19c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 19
  Executed: 20c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %81:fpr64 = LDRDui %stack.8.sx, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
Bottom Pressure:

  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 20
  Executed: 21c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %81:fpr64 = LDRDui %stack.8.sx, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
SU(1):   %82:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
SU(6):   %86:fpr64 = LDRDui %stack.9.sy, 0, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
SU(7):   %87:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
SU(2):   %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
SU(3):   %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
SU(12):   %91:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(8):   %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
SU(9):   %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
SU(13):   %92:fpr64 = LDRDui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(4):   %85:fpr64 = FABSDr %84:fpr64, debug-location !390; ep.c:269:18
SU(10):   %90:fpr64 = FABSDr %89:fpr64, debug-location !397; ep.c:270:18
SU(5):   STRDui %85:fpr64, %stack.16.sx_err, 0, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
SU(11):   STRDui %90:fpr64, %stack.17.sy_err, 0, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
SU(14):   FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
SU(15):   %93:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
SU(16):   FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
SU(17):   %94:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
SU(18):   %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
SU(19):   STRWui %95:gpr32, %stack.27.verified, 0, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18

********** MI Scheduling **********
main:%bb.45 if.end142
  From: STRWui $wzr, %stack.19.i, 0, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.19.i, 0, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %174:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %174:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.19.i, 0, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   STRWui $wzr, %stack.19.i, 0, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
SU(1):   %174:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_9_Sums____25, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_9_Sums____25, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %117:fpr64, debug-location !417; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %118:fpr64, debug-location !417; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %118:fpr64, debug-location !417; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %117:fpr64, debug-location !417; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_9_Sums____25, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_9_Sums____25, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
SU(1):   $d0 = COPY %117:fpr64, debug-location !417; ep.c:280:5
SU(2):   $d1 = COPY %118:fpr64, debug-location !417; ep.c:280:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %117:fpr64 = LDRDui %stack.8.sx, 0, debug-location !415 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !417; ep.c:280:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %117:fpr64 = LDRDui %stack.8.sx, 0, debug-location !415 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %118:fpr64 = LDRDui %stack.9.sy, 0, debug-location !416 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !417; ep.c:280:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %118:fpr64 = LDRDui %stack.9.sy, 0, debug-location !416 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %117:fpr64 = LDRDui %stack.8.sx, 0, debug-location !415 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %117:fpr64 = LDRDui %stack.8.sx, 0, debug-location !415 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
SU(1):   %118:fpr64 = LDRDui %stack.9.sy, 0, debug-location !416 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_8_No__Gaussi, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_8_No__Gaussi, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %114:fpr64, debug-location !414; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %114:fpr64, debug-location !414; ep.c:279:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_8_No__Gaussi, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_8_No__Gaussi, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
SU(1):   $d0 = COPY %114:fpr64, debug-location !414; ep.c:279:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_7_N___2__5d_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_7_N___2__5d_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 30, debug-location !412; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 30, debug-location !412; ep.c:278:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_7_N___2__5d_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_7_N___2__5d_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
SU(1):   $w1 = MOVi32imm 30, debug-location !412; ep.c:278:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_6_CPU_Time__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_6_CPU_Time__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %108:fpr64, debug-location !411; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %108:fpr64, debug-location !411; ep.c:277:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_6_CPU_Time__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_6_CPU_Time__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
SU(1):   $d0 = COPY %108:fpr64, debug-location !411; ep.c:277:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %100:fpr64 = COPY $d0, debug-location !404; ep.c:274:12
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:276:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %100:fpr64 = COPY $d0, debug-location !404; ep.c:274:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%100
  Single Issue       : false;
SU(1):   %101:fpr64 = LDRDui %stack.10.tm, 0, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%101
  Single Issue       : false;
SU(2):   %102:fpr64 = FDIVDrr %100:fpr64, %101:fpr64, debug-location !406; ep.c:274:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%101
    SU(0): Data Latency=0 Reg=%100
  Successors:
    SU(5): Data Latency=1 Reg=%102
  Single Issue       : false;
SU(3):   %103:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1 Reg=%103
  Single Issue       : false;
SU(4):   %104:fpr64 = LDRDui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%103
  Successors:
    SU(5): Data Latency=4 Reg=%104
  Single Issue       : false;
SU(5):   %105:fpr64 = FDIVDrr %102:fpr64, %104:fpr64, debug-location !407; ep.c:274:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%102
    SU(4): Data Latency=4 Reg=%104
  Successors:
    SU(6): Data Latency=1 Reg=%105
  Single Issue       : false;
SU(6):   STRDui %105:fpr64, %stack.1.Mops, 0, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%105
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:276:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRDui %105:fpr64, %stack.1.Mops, 0, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %105:fpr64 = FDIVDrr %102:fpr64, %104:fpr64, debug-location !407; ep.c:274:33
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %102:fpr64 = FDIVDrr %100:fpr64, %101:fpr64, debug-location !406; ep.c:274:28
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %100:fpr64 = COPY $d0, debug-location !404; ep.c:274:12
  Ready @3c
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %104:fpr64 = LDRDui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %103:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %101:fpr64 = LDRDui %stack.10.tm, 0, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(1):   %101:fpr64 = LDRDui %stack.10.tm, 0, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
SU(3):   %103:gpr64temp = ADRP target-flags(aarch64-page) %const.5
SU(4):   %104:fpr64 = LDRDui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(0):   %100:fpr64 = COPY $d0, debug-location !404; ep.c:274:12
SU(2):   %102:fpr64 = FDIVDrr %100:fpr64, %101:fpr64, debug-location !406; ep.c:274:28
SU(5):   %105:fpr64 = FDIVDrr %102:fpr64, %104:fpr64, debug-location !407; ep.c:274:33
SU(6):   STRDui %105:fpr64, %stack.1.Mops, 0, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10

********** MI Scheduling **********
main:%bb.45 if.end142
  From: %96:gpr64temp = ADRP target-flags(aarch64-page) %const.0
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %96:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%96
  Single Issue       : false;
SU(1):   %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%96
  Successors:
    SU(4): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(2):   %98:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(3):   %99:fpr64 = LDRDui %98:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%98
  Successors:
    SU(5): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(4):   $d0 = COPY %97:fpr64, debug-location !404; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%97
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d1 = COPY %99:fpr64, debug-location !404; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%99
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $d1 = COPY %99:fpr64, debug-location !404; ep.c:274:12
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) $d0 = COPY %97:fpr64, debug-location !404; ep.c:274:12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %99:fpr64 = LDRDui %98:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 5c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %98:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %96:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %96:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(2):   %98:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(1):   %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   %99:fpr64 = LDRDui %98:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   $d0 = COPY %97:fpr64, debug-location !404; ep.c:274:12
SU(5):   $d1 = COPY %99:fpr64, debug-location !404; ep.c:274:12

********** MI Scheduling **********
main:%bb.46 for.cond152
  From: %124:gpr32common = LDRWui %stack.19.i, 0, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
    To: Bcc 12, %bb.48, implicit $nzcv, debug-location !425; ep.c:282:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %124:gpr32common = LDRWui %stack.19.i, 0, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%124
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %124:gpr32common, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%124
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.48, implicit $nzcv, debug-location !425; ep.c:282:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %124:gpr32common, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %124:gpr32common = LDRWui %stack.19.i, 0, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   %124:gpr32common = LDRWui %stack.19.i, 0, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
SU(1):   dead $wzr = SUBSWri %124:gpr32common, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5

********** MI Scheduling **********
main:%bb.47 for.body155
  From: %178:gpr32common = LDRWui %stack.19.i, 0, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
    To: B %bb.46, debug-location !433; ep.c:282:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %178:gpr32common = LDRWui %stack.19.i, 0, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%178
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %179:gpr32common = nsw ADDWri %178:gpr32common, 1, 0, debug-location !432; ep.c:282:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%178
  Successors:
    SU(2): Data Latency=1 Reg=%179
  Single Issue       : false;
SU(2):   STRWui %179:gpr32common, %stack.19.i, 0, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%179
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.46, debug-location !433; ep.c:282:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %179:gpr32common, %stack.19.i, 0, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %179:gpr32common = nsw ADDWri %178:gpr32common, 1, 0, debug-location !432; ep.c:282:26
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %178:gpr32common = LDRWui %stack.19.i, 0, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %178:gpr32common = LDRWui %stack.19.i, 0, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
SU(1):   %179:gpr32common = nsw ADDWri %178:gpr32common, 1, 0, debug-location !432; ep.c:282:26
SU(2):   STRWui %179:gpr32common, %stack.19.i, 0, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26

********** MI Scheduling **********
main:%bb.47 for.body155
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_11__3d_15_0lf, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_11__3d_15_0lf, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %172.sub_32:gpr64, debug-location !430; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %175:fpr64, debug-location !430; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %175:fpr64, debug-location !430; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %172.sub_32:gpr64, debug-location !430; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_11__3d_15_0lf, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_11__3d_15_0lf, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
SU(1):   $w1 = COPY %172.sub_32:gpr64, debug-location !430; ep.c:283:9
SU(2):   $d0 = COPY %175:fpr64, debug-location !430; ep.c:283:9

********** MI Scheduling **********
main:%bb.47 for.body155
  From: %172:gpr64 = LDRSWui %stack.19.i, 0, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !430; ep.c:283:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %172:gpr64 = LDRSWui %stack.19.i, 0, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%172
  Single Issue       : false;
SU(1):   %175:fpr64 = LDRDroX %174:gpr64common, %172:gpr64, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%172
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !430; ep.c:283:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %175:fpr64 = LDRDroX %174:gpr64common, %172:gpr64, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %172:gpr64 = LDRSWui %stack.19.i, 0, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 2
  Executed: 8c
  Critical: 2c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %172:gpr64 = LDRSWui %stack.19.i, 0, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
SU(1):   %175:fpr64 = LDRDroX %174:gpr64common, %172:gpr64, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35

********** MI Scheduling **********
main:%bb.48 for.end161
  From: %130:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_22_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !440; ep.c:286:5
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=8
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %128 %127 %126 %129 
Live Out: %128 %127 %126 %129 
Live Thru: FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %128
  UpdateRegP: SU(28) $d1 = COPY %128:fpr64, debug-location !440; ep.c:286:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %127
  UpdateRegP: SU(27) $d0 = COPY %127:fpr64, debug-location !440; ep.c:286:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %126
  UpdateRegP: SU(26) $w5 = COPY %126:gpr32, debug-location !440; ep.c:286:5
              to GPR32 -1
  LiveReg: %129
  UpdateRegP: SU(18) STRWui %129:gpr32, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
              to 
Top Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=8
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %130:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_22_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%130
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %130:gpr64, $sp, 10, debug-location !440 :: (store 8 into stack + 80); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%130
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %132:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_21__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%132
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %132:gpr64, $sp, 9, debug-location !440 :: (store 8 into stack + 72); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%132
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %133:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_20__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%133
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %133:gpr64, $sp, 8, debug-location !440 :: (store 8 into stack + 64); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%133
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %134:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_19__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%134
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %134:gpr64, $sp, 7, debug-location !440 :: (store 8 into stack + 56); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%134
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %135:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_18__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%135
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %135:gpr64, $sp, 6, debug-location !440 :: (store 8 into stack + 48); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%135
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %136:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_17___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%136
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %136:gpr64, $sp, 5, debug-location !440 :: (store 8 into stack + 40); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%136
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %137:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_16_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%137
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %137:gpr64, $sp, 4, debug-location !440 :: (store 8 into stack + 32); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%137
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %138:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_15_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%138
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %138:gpr64, $sp, 3, debug-location !440 :: (store 8 into stack + 24); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%138
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %139:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_14_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%139
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %139:gpr64, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%139
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRWui %129:gpr32, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %140:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_13_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%140
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %140:gpr64, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%140
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_12_EP_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w1 = MOVi32imm 66, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w2 = MOVi32imm 31, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w3 = COPY $wzr, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $w4 = COPY $wzr, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   $w5 = COPY %126:gpr32, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   $d0 = COPY %127:fpr64, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(28):   $d1 = COPY %128:fpr64, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !440; ep.c:286:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 22 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 28 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(24) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $d1 = COPY %128:fpr64, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=3
GPR32=8
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 22 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 24 27 26 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(24) PHYS-REG                           
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(27) $d0 = COPY %127:fpr64, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 22 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 24 25 26 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(24) PHYS-REG                           
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(26) $w5 = COPY %126:gpr32, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 22 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) PHYS-REG                           
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(25) $w4 = COPY $wzr, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 22 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) PHYS-REG                           
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w3 = COPY $wzr, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 22 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(20) STRXui %140:gpr64, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %140
  UpdateRegP: SU(20) STRXui %140:gpr64, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 23 21 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(23) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w2 = MOVi32imm 31, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @1c
  BotQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 22 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w1 = MOVi32imm 66, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %138:gpr64, $sp, 3, debug-location !440 :: (store 8 into stack + 24); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %138
  UpdateRegP: SU(15) STRXui %138:gpr64, $sp, 3, debug-location !440 :: (store 8 into stack + 24); ep.c:286:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 21 13 11 9 7 5 3 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %139:gpr64, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %139
  UpdateRegP: SU(17) STRXui %139:gpr64, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 11 9 7 5 3 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %136:gpr64, $sp, 5, debug-location !440 :: (store 8 into stack + 40); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %136
  UpdateRegP: SU(11) STRXui %136:gpr64, $sp, 5, debug-location !440 :: (store 8 into stack + 40); ep.c:286:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 16 9 7 5 3 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %137:gpr64, $sp, 4, debug-location !440 :: (store 8 into stack + 32); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %137
  UpdateRegP: SU(13) STRXui %137:gpr64, $sp, 4, debug-location !440 :: (store 8 into stack + 32); ep.c:286:5
              to 
  Ready @6c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 10 16 9 7 5 3 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_12_EP_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 7 5 3 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %134:gpr64, $sp, 7, debug-location !440 :: (store 8 into stack + 56); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %134
  UpdateRegP: SU(7) STRXui %134:gpr64, $sp, 7, debug-location !440 :: (store 8 into stack + 56); ep.c:286:5
              to 
  Ready @8c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 19 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %135:gpr64, $sp, 6, debug-location !440 :: (store 8 into stack + 48); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %135
  UpdateRegP: SU(9) STRXui %135:gpr64, $sp, 6, debug-location !440 :: (store 8 into stack + 48); ep.c:286:5
              to 
  Ready @9c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 19 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %140:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_13_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %132:gpr64, $sp, 9, debug-location !440 :: (store 8 into stack + 72); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %132
  UpdateRegP: SU(3) STRXui %132:gpr64, $sp, 9, debug-location !440 :: (store 8 into stack + 72); ep.c:286:5
              to 
  Ready @11c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %133:gpr64, $sp, 8, debug-location !440 :: (store 8 into stack + 64); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %133
  UpdateRegP: SU(5) STRXui %133:gpr64, $sp, 8, debug-location !440 :: (store 8 into stack + 64); ep.c:286:5
              to 
  Ready @12c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) STRWui %129:gpr32, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 16 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %139:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_14_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 2 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %130:gpr64, $sp, 10, debug-location !440 :: (store 8 into stack + 80); ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %130
  UpdateRegP: SU(1) STRXui %130:gpr64, $sp, 10, debug-location !440 :: (store 8 into stack + 80); ep.c:286:5
              to 
  Ready @15c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 14 12 10 2 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %138:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_15_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 12 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %137:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_16_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %136:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_17___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %135:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_18__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %134:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_19__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 21c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %133:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_20__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 22c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %132:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_21__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %130:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_22_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %130:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_22_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
SU(2):   %132:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_21__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
SU(4):   %133:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_20__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
SU(6):   %134:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_19__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
SU(8):   %135:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_18__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, debug-location !440; ep.c:286:5
SU(10):   %136:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_17___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, debug-location !440; ep.c:286:5
SU(12):   %137:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_16_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
SU(14):   %138:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_15_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
SU(1):   STRXui %130:gpr64, $sp, 10, debug-location !440 :: (store 8 into stack + 80); ep.c:286:5
SU(16):   %139:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_14_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
SU(18):   STRWui %129:gpr32, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
SU(5):   STRXui %133:gpr64, $sp, 8, debug-location !440 :: (store 8 into stack + 64); ep.c:286:5
SU(3):   STRXui %132:gpr64, $sp, 9, debug-location !440 :: (store 8 into stack + 72); ep.c:286:5
SU(19):   %140:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_13_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
SU(9):   STRXui %135:gpr64, $sp, 6, debug-location !440 :: (store 8 into stack + 48); ep.c:286:5
SU(7):   STRXui %134:gpr64, $sp, 7, debug-location !440 :: (store 8 into stack + 56); ep.c:286:5
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_12_EP_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, debug-location !440; ep.c:286:5
SU(13):   STRXui %137:gpr64, $sp, 4, debug-location !440 :: (store 8 into stack + 32); ep.c:286:5
SU(11):   STRXui %136:gpr64, $sp, 5, debug-location !440 :: (store 8 into stack + 40); ep.c:286:5
SU(17):   STRXui %139:gpr64, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
SU(15):   STRXui %138:gpr64, $sp, 3, debug-location !440 :: (store 8 into stack + 24); ep.c:286:5
SU(22):   $w1 = MOVi32imm 66, debug-location !440; ep.c:286:5
SU(23):   $w2 = MOVi32imm 31, debug-location !440; ep.c:286:5
SU(20):   STRXui %140:gpr64, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
SU(24):   $w3 = COPY $wzr, debug-location !440; ep.c:286:5
SU(25):   $w4 = COPY $wzr, debug-location !440; ep.c:286:5
SU(26):   $w5 = COPY %126:gpr32, debug-location !440; ep.c:286:5
SU(27):   $d0 = COPY %127:fpr64, debug-location !440; ep.c:286:5
SU(28):   $d1 = COPY %128:fpr64, debug-location !440; ep.c:286:5

********** MI Scheduling **********
main:%bb.48 for.end161
  From: %126:gpr32 = LDRWui %stack.24.nit, 0, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
    To: ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !440; ep.c:286:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %126:gpr32 = LDRWui %stack.24.nit, 0, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %127:fpr64 = LDRDui %stack.10.tm, 0, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %128:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %129:gpr32 = LDRWui %stack.27.verified, 0, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !440; ep.c:286:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %129:gpr32 = LDRWui %stack.27.verified, 0, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %128:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %127:fpr64 = LDRDui %stack.10.tm, 0, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %126:gpr32 = LDRWui %stack.24.nit, 0, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %126:gpr32 = LDRWui %stack.24.nit, 0, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
SU(1):   %127:fpr64 = LDRDui %stack.10.tm, 0, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
SU(2):   %128:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
SU(3):   %129:gpr32 = LDRWui %stack.27.verified, 0, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47

********** MI Scheduling **********
main:%bb.49 if.then163
  From: %146:fpr64 = LDRDui %stack.10.tm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
    To: Bcc 8, %bb.51, implicit $nzcv, debug-location !448; ep.c:291:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %146:fpr64 = LDRDui %stack.10.tm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%146
  Single Issue       : false;
SU(1):   FCMPDri %146:fpr64, implicit-def $nzcv, debug-location !448; ep.c:291:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 8, %bb.51, implicit $nzcv, debug-location !448; ep.c:291:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %146:fpr64, implicit-def $nzcv, debug-location !448; ep.c:291:13
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %146:fpr64 = LDRDui %stack.10.tm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %146:fpr64 = LDRDui %stack.10.tm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
SU(1):   FCMPDri %146:fpr64, implicit-def $nzcv, debug-location !448; ep.c:291:13

********** MI Scheduling **********
main:%bb.50 if.then166
  From: %147:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %147:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%147
  Single Issue       : false;
SU(1):   STRXui %147:gpr64, %stack.10.tm, 0, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%147
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %147:gpr64, %stack.10.tm, 0, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %147:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %147:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %147:gpr64, %stack.10.tm, 0, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16

********** MI Scheduling **********
main:%bb.51 if.end167
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_25_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_25_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %165:fpr64, debug-location !474; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %168:fpr64, debug-location !474; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %168:fpr64, debug-location !474; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %165:fpr64, debug-location !474; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_25_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_25_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
SU(1):   $d0 = COPY %165:fpr64, debug-location !474; ep.c:298:9
SU(2):   $d1 = COPY %168:fpr64, debug-location !474; ep.c:298:9

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %165:fpr64 = COPY $d0, debug-location !467; ep.c:297:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; ep.c:298:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %165:fpr64 = COPY $d0, debug-location !467; ep.c:297:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%165
    SU(1): Data Latency=0 Reg=%165
  Single Issue       : false;
SU(1):   STRDui %165:fpr64, %stack.12.tt, 0, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%165
  Single Issue       : false;
SU(2):   %166:fpr64 = FMULDrr %165:fpr64, %151:fpr64, debug-location !471; ep.c:298:60
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%165
  Successors:
    SU(4): Data Latency=1 Reg=%166
  Single Issue       : false;
SU(3):   %167:fpr64 = LDRDui %stack.10.tm, 0, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%167
  Single Issue       : false;
SU(4):   %168:fpr64 = FDIVDrr %166:fpr64, %167:fpr64, debug-location !473; ep.c:298:68
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%167
    SU(2): Data Latency=1 Reg=%166
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; ep.c:298:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %165:fpr64 = COPY $d0, debug-location !467; ep.c:297:14
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %168:fpr64 = FDIVDrr %166:fpr64, %167:fpr64, debug-location !473; ep.c:298:68
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %166:fpr64 = FMULDrr %165:fpr64, %151:fpr64, debug-location !471; ep.c:298:60
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %165:fpr64, %stack.12.tt, 0, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %167:fpr64 = LDRDui %stack.10.tm, 0, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %165:fpr64 = COPY $d0, debug-location !467; ep.c:297:14
SU(3):   %167:fpr64 = LDRDui %stack.10.tm, 0, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
SU(1):   STRDui %165:fpr64, %stack.12.tt, 0, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
SU(2):   %166:fpr64 = FMULDrr %165:fpr64, %151:fpr64, debug-location !471; ep.c:298:60
SU(4):   %168:fpr64 = FDIVDrr %166:fpr64, %167:fpr64, debug-location !473; ep.c:298:68

********** MI Scheduling **********
main:%bb.51 if.end167
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_24_Gaussian_p, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_24_Gaussian_p, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %158:fpr64, debug-location !466; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %161:fpr64, debug-location !466; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %161:fpr64, debug-location !466; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %158:fpr64, debug-location !466; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_24_Gaussian_p, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_24_Gaussian_p, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
SU(1):   $d0 = COPY %158:fpr64, debug-location !466; ep.c:296:9
SU(2):   $d1 = COPY %161:fpr64, debug-location !466; ep.c:296:9

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %158:fpr64 = COPY $d0, debug-location !459; ep.c:295:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !466; ep.c:296:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %158:fpr64 = COPY $d0, debug-location !459; ep.c:295:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%158
    SU(1): Data Latency=0 Reg=%158
  Single Issue       : false;
SU(1):   STRDui %158:fpr64, %stack.12.tt, 0, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%158
  Single Issue       : false;
SU(2):   %159:fpr64 = FMULDrr %158:fpr64, %151:fpr64, debug-location !463; ep.c:296:60
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%158
  Successors:
    SU(4): Data Latency=1 Reg=%159
  Single Issue       : false;
SU(3):   %160:fpr64 = LDRDui %stack.10.tm, 0, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%160
  Single Issue       : false;
SU(4):   %161:fpr64 = FDIVDrr %159:fpr64, %160:fpr64, debug-location !465; ep.c:296:68
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%160
    SU(2): Data Latency=1 Reg=%159
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !466; ep.c:296:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %158:fpr64 = COPY $d0, debug-location !459; ep.c:295:14
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %161:fpr64 = FDIVDrr %159:fpr64, %160:fpr64, debug-location !465; ep.c:296:68
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %159:fpr64 = FMULDrr %158:fpr64, %151:fpr64, debug-location !463; ep.c:296:60
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %158:fpr64, %stack.12.tt, 0, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %160:fpr64 = LDRDui %stack.10.tm, 0, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %158:fpr64 = COPY $d0, debug-location !459; ep.c:295:14
SU(3):   %160:fpr64 = LDRDui %stack.10.tm, 0, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
SU(1):   STRDui %158:fpr64, %stack.12.tt, 0, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
SU(2):   %159:fpr64 = FMULDrr %158:fpr64, %151:fpr64, debug-location !463; ep.c:296:60
SU(4):   %161:fpr64 = FDIVDrr %159:fpr64, %160:fpr64, debug-location !465; ep.c:296:68

********** MI Scheduling **********
main:%bb.51 if.end167
  From: $x0 = MOVaddr target-flags(aarch64-page) @ep__str_23__Total_tim, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_23__Total_tim, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %149:fpr64, debug-location !458; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d1 = COPY %154:fpr64, debug-location !458; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d1 = COPY %154:fpr64, debug-location !458; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %149:fpr64, debug-location !458; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ep__str_23__Total_tim, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ep__str_23__Total_tim, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
SU(1):   $d0 = COPY %149:fpr64, debug-location !458; ep.c:294:9
SU(2):   $d1 = COPY %154:fpr64, debug-location !458; ep.c:294:9

********** MI Scheduling **********
main:%bb.51 if.end167
  From: %149:fpr64 = COPY $d0, debug-location !451; ep.c:293:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !458; ep.c:294:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %149:fpr64 = COPY $d0, debug-location !451; ep.c:293:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%149
    SU(1): Data Latency=0 Reg=%149
  Single Issue       : false;
SU(1):   STRDui %149:fpr64, %stack.12.tt, 0, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%149
  Single Issue       : false;
SU(2):   %150:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=1 Reg=%150
  Single Issue       : false;
SU(3):   %151:fpr64 = LDRDui %150:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%150
  Successors:
    SU(4): Data Latency=4 Reg=%151
  Single Issue       : false;
SU(4):   %152:fpr64 = FMULDrr %149:fpr64, %151:fpr64, debug-location !455; ep.c:294:62
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%151
    SU(0): Data Latency=0 Reg=%149
  Successors:
    SU(6): Data Latency=1 Reg=%152
  Single Issue       : false;
SU(5):   %153:fpr64 = LDRDui %stack.10.tm, 0, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%153
  Single Issue       : false;
SU(6):   %154:fpr64 = FDIVDrr %152:fpr64, %153:fpr64, debug-location !457; ep.c:294:70
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%152
    SU(5): Data Latency=4 Reg=%153
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !458; ep.c:294:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %149:fpr64 = COPY $d0, debug-location !451; ep.c:293:14
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 5 2 1 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %154:fpr64 = FDIVDrr %152:fpr64, %153:fpr64, debug-location !457; ep.c:294:70
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 5 2 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %152:fpr64 = FMULDrr %149:fpr64, %151:fpr64, debug-location !455; ep.c:294:62
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %149:fpr64, %stack.12.tt, 0, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %153:fpr64 = LDRDui %stack.10.tm, 0, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %151:fpr64 = LDRDui %150:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %150:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %149:fpr64 = COPY $d0, debug-location !451; ep.c:293:14
SU(2):   %150:gpr64temp = ADRP target-flags(aarch64-page) %const.6
SU(3):   %151:fpr64 = LDRDui %150:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
SU(5):   %153:fpr64 = LDRDui %stack.10.tm, 0, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
SU(1):   STRDui %149:fpr64, %stack.12.tt, 0, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
SU(4):   %152:fpr64 = FMULDrr %149:fpr64, %151:fpr64, debug-location !455; ep.c:294:62
SU(6):   %154:fpr64 = FDIVDrr %152:fpr64, %153:fpr64, debug-location !457; ep.c:294:70

********** INTERVALS **********
NZCV [1040r,1056r:17)[2048r,2064r:16)[2272r,2304r:15)[3504r,3520r:14)[4032r,4048r:13)[4544r,4560r:12)[4768r,4784r:6)[4848r,4864r:5)[4928r,4944r:4)[6336r,6352r:3)[6624r,6640r:2)[6896r,6928r:1)[7312r,7544r:0)[8016r,8032r:11)[8912r,8920r:10)[8928r,8944r:9)[10336r,10352r:8)[11456r,11472r:7)  0@7312r 1@6896r 2@6624r 3@6336r 4@4928r 5@4848r 6@4768r 7@11456r 8@10336r 9@8928r 10@8912r 11@8016r 12@4544r 13@4032r 14@3504r 15@2272r 16@2048r 17@1040r
WSP [128r,128d:209)[208r,208d:208)[224r,224d:207)[240r,240d:206)[272r,272d:205)[480r,480d:204)[512r,512d:203)[528r,528d:202)[544r,544d:201)[576r,576d:200)[608r,608d:199)[720r,720d:198)[736r,736d:197)[752r,752d:196)[784r,784d:195)[816r,816d:194)[912r,912d:193)[928r,928d:192)[944r,944d:191)[976r,976d:190)[1248r,1248d:189)[1296r,1296d:188)[1312r,1312d:187)[1328r,1328d:186)[1360r,1360d:185)[1376r,1376d:184)[1440r,1440d:183)[1456r,1456d:182)[1472r,1472d:181)[1504r,1504d:180)[1640r,1640d:179)[1712r,1712d:178)[1728r,1728d:177)[1744r,1744d:176)[1776r,1776d:175)[1808r,1808d:174)[1856r,1856d:173)[1872r,1872d:172)[1888r,1888d:171)[1920r,1920d:170)[2352r,2352d:169)[2384r,2384d:168)[2400r,2400d:167)[2496r,2496d:166)[2528r,2528d:165)[2544r,2544d:164)[2576r,2576d:163)[2592r,2592d:162)[2608r,2608d:161)[2640r,2640d:160)[2688r,2688d:159)[2736r,2736d:158)[2752r,2752d:157)[2768r,2768d:156)[2800r,2800d:155)[2816r,2816d:154)[2864r,2864d:153)[2880r,2880d:152)[2896r,2896d:151)[2928r,2928d:150)[2944r,2944d:149)[2992r,2992d:148)[3008r,3008d:147)[3024r,3024d:146)[3056r,3056d:145)[3072r,3072d:144)[3104r,3104d:143)[3120r,3120d:142)[3136r,3136d:141)[3168r,3168d:140)[3216r,3216d:139)[3360r,3360d:138)[3376r,3376d:137)[3392r,3392d:136)[3424r,3424d:135)[3584r,3584d:4)[3632r,3632d:3)[3648r,3648d:2)[3664r,3664d:1)[3696r,3696d:0)[5008r,5008d:49)[5056r,5056d:48)[5072r,5072d:47)[5088r,5088d:46)[5120r,5120d:45)[5264r,5264d:44)[5312r,5312d:43)[5328r,5328d:42)[5344r,5344d:41)[5376r,5376d:40)[5600r,5600d:39)[5632r,5632d:38)[5648r,5648d:37)[5664r,5664d:36)[5696r,5696d:35)[5728r,5728d:34)[5808r,5808d:33)[5824r,5824d:32)[5840r,5840d:31)[5872r,5872d:30)[5952r,5952d:29)[5984r,5984d:28)[6000r,6000d:27)[6016r,6016d:26)[6048r,6048d:25)[6144r,6144d:24)[6176r,6176d:23)[6192r,6192d:22)[6208r,6208d:21)[6240r,6240d:20)[6704r,6704d:14)[6736r,6736d:13)[6752r,6752d:12)[6768r,6768d:11)[6800r,6800d:10)[6976r,6976d:9)[7008r,7008d:8)[7024r,7024d:7)[7120r,7120d:6)[7152r,7152d:5)[7728r,7728d:19)[7760r,7760d:18)[7776r,7776d:17)[7792r,7792d:16)[7824r,7824d:15)[8240r,8240d:134)[8288r,8288d:133)[8304r,8304d:132)[8320r,8320d:131)[8352r,8352d:130)[8368r,8368d:129)[8400r,8400d:128)[8416r,8416d:127)[8432r,8432d:126)[8464r,8464d:125)[9008r,9008d:124)[9120r,9120d:123)[9136r,9136d:122)[9152r,9152d:121)[9184r,9184d:120)[9312r,9312d:119)[9360r,9360d:118)[9376r,9376d:117)[9392r,9392d:116)[9424r,9424d:115)[9456r,9456d:114)[9520r,9520d:113)[9536r,9536d:112)[9552r,9552d:111)[9584r,9584d:110)[9600r,9600d:109)[9680r,9680d:108)[9696r,9696d:107)[9712r,9712d:106)[9744r,9744d:105)[9776r,9776d:104)[9840r,9840d:103)[9856r,9856d:102)[9872r,9872d:101)[9904r,9904d:100)[9952r,9952d:99)[10032r,10032d:98)[10048r,10048d:97)[10064r,10064d:96)[10096r,10096d:95)[10112r,10112d:94)[10160r,10160d:93)[10176r,10176d:92)[10192r,10192d:91)[10224r,10224d:90)[10448r,10448d:54)[10512r,10512d:53)[10528r,10528d:52)[10544r,10544d:51)[10576r,10576d:50)[10736r,10736d:89)[11296r,11296d:88)[11312r,11312d:87)[11328r,11328d:86)[11360r,11360d:85)[11568r,11568d:84)[11616r,11616d:83)[11632r,11632d:82)[11648r,11648d:81)[11680r,11680d:80)[11808r,11808d:79)[11888r,11888d:78)[11904r,11904d:77)[11920r,11920d:76)[11952r,11952d:75)[11968r,11968d:74)[12016r,12016d:73)[12032r,12032d:72)[12048r,12048d:71)[12080r,12080d:70)[12176r,12176d:69)[12256r,12256d:68)[12272r,12272d:67)[12288r,12288d:66)[12320r,12320d:65)[12336r,12336d:64)[12384r,12384d:63)[12400r,12400d:62)[12416r,12416d:61)[12448r,12448d:60)[12544r,12544d:59)[12624r,12624d:58)[12640r,12640d:57)[12656r,12656d:56)[12688r,12688d:55)  0@3696r 1@3664r 2@3648r 3@3632r 4@3584r 5@7152r 6@7120r 7@7024r 8@7008r 9@6976r 10@6800r 11@6768r 12@6752r 13@6736r 14@6704r 15@7824r 16@7792r 17@7776r 18@7760r 19@7728r 20@6240r 21@6208r 22@6192r 23@6176r 24@6144r 25@6048r 26@6016r 27@6000r 28@5984r 29@5952r 30@5872r 31@5840r 32@5824r 33@5808r 34@5728r 35@5696r 36@5664r 37@5648r 38@5632r 39@5600r 40@5376r 41@5344r 42@5328r 43@5312r 44@5264r 45@5120r 46@5088r 47@5072r 48@5056r 49@5008r 50@10576r 51@10544r 52@10528r 53@10512r 54@10448r 55@12688r 56@12656r 57@12640r 58@12624r 59@12544r 60@12448r 61@12416r 62@12400r 63@12384r 64@12336r 65@12320r 66@12288r 67@12272r 68@12256r 69@12176r 70@12080r 71@12048r 72@12032r 73@12016r 74@11968r 75@11952r 76@11920r 77@11904r 78@11888r 79@11808r 80@11680r 81@11648r 82@11632r 83@11616r 84@11568r 85@11360r 86@11328r 87@11312r 88@11296r 89@10736r 90@10224r 91@10192r 92@10176r 93@10160r 94@10112r 95@10096r 96@10064r 97@10048r 98@10032r 99@9952r 100@9904r 101@9872r 102@9856r 103@9840r 104@9776r 105@9744r 106@9712r 107@9696r 108@9680r 109@9600r 110@9584r 111@9552r 112@9536r 113@9520r 114@9456r 115@9424r 116@9392r 117@9376r 118@9360r 119@9312r 120@9184r 121@9152r 122@9136r 123@9120r 124@9008r 125@8464r 126@8432r 127@8416r 128@8400r 129@8368r 130@8352r 131@8320r 132@8304r 133@8288r 134@8240r 135@3424r 136@3392r 137@3376r 138@3360r 139@3216r 140@3168r 141@3136r 142@3120r 143@3104r 144@3072r 145@3056r 146@3024r 147@3008r 148@2992r 149@2944r 150@2928r 151@2896r 152@2880r 153@2864r 154@2816r 155@2800r 156@2768r 157@2752r 158@2736r 159@2688r 160@2640r 161@2608r 162@2592r 163@2576r 164@2544r 165@2528r 166@2496r 167@2400r 168@2384r 169@2352r 170@1920r 171@1888r 172@1872r 173@1856r 174@1808r 175@1776r 176@1744r 177@1728r 178@1712r 179@1640r 180@1504r 181@1472r 182@1456r 183@1440r 184@1376r 185@1360r 186@1328r 187@1312r 188@1296r 189@1248r 190@976r 191@944r 192@928r 193@912r 194@816r 195@784r 196@752r 197@736r 198@720r 199@608r 200@576r 201@544r 202@528r 203@512r 204@480r 205@272r 206@240r 207@224r 208@208r 209@128r
B0 [688r,720r:35)[720r,800r:34)[896r,912r:33)[1680r,1712r:32)[1840r,1856r:31)[1856r,1936r:30)[2368r,2384r:29)[2384r,2416r:28)[2560r,2576r:27)[2576r,2656r:26)[3352r,3360r:25)[3616r,3632r:1)[3632r,3712r:0)[5040r,5056r:10)[5056r,5136r:9)[5296r,5312r:8)[5312r,5392r:7)[5800r,5808r:6)[6720r,6736r:5)[6736r,6852r:4)[6992r,7008r:3)[7008r,7040r:2)[8400r,8480r:24)[9088r,9120r:23)[9120r,9268r:22)[9504r,9520r:21)[9824r,9840r:20)[10000r,10032r:19)[10496r,10512r:11)[11264r,11296r:18)[11616r,11696r:17)[11856r,11888r:16)[12016r,12096r:15)[12224r,12256r:14)[12384r,12464r:13)[12592r,12624r:12)  0@3632r 1@3616r 2@7008r 3@6992r 4@6736r 5@6720r 6@5800r 7@5312r 8@5296r 9@5056r 10@5040r 11@10496r 12@12592r 13@12384r 14@12224r 15@12016r 16@11856r 17@11616r 18@11264r 19@10000r 20@9824r 21@9504r 22@9120r 23@9088r 24@8400r 25@3352r 26@2576r 27@2560r 28@2384r 29@2368r 30@1856r 31@1840r 32@1680r 33@896r 34@720r 35@688r
W0 [176r,208r:16)[496r,512r:35)[864r,912r:29)[1280r,1296r:28)[1408r,1440r:27)[1672r,1712r:15)[1824r,1856r:34)[2720r,2736r:14)[2848r,2864r:3)[2976r,2992r:2)[3088r,3104r:13)[3348r,3360r:12)[3600r,3632r:31)[5024r,5056r:33)[5280r,5312r:32)[5616r,5632r:7)[5796r,5808r:8)[5968r,5984r:6)[6160r,6176r:5)[7744r,7760r:4)[8272r,8288r:11)[8384r,8400r:10)[9344r,9360r:26)[9488r,9520r:25)[9648r,9680r:24)[9808r,9840r:23)[9984r,10032r:22)[10144r,10160r:21)[10464r,10512r:30)[11168r,11296r:20)[11600r,11616r:9)[11840r,11888r:19)[12000r,12016r:1)[12208r,12256r:18)[12368r,12384r:0)[12576r,12624r:17)  0@12368r 1@12000r 2@2976r 3@2848r 4@7744r 5@6160r 6@5968r 7@5616r 8@5796r 9@11600r 10@8384r 11@8272r 12@3348r 13@3088r 14@2720r 15@1672r 16@176r 17@12576r 18@12208r 19@11840r 20@11168r 21@10144r 22@9984r 23@9808r 24@9648r 25@9488r 26@9344r 27@1408r 28@1280r 29@864r 30@10464r 31@3600r 32@5280r 33@5024r 34@1824r 35@496r
%0 [2240r,2512r:0)  0@2240r weight:0.000000e+00
%4 [6864r,7136r:0)  0@6864r weight:0.000000e+00
%9 [48r,96r:0)  0@48r weight:0.000000e+00
%10 [64r,104r:0)  0@64r weight:0.000000e+00
%11 [96r,112r:0)  0@96r weight:0.000000e+00
%14 [288r,320r:0)  0@288r weight:0.000000e+00
%15 [468r,472r:0)  0@468r weight:0.000000e+00
%16 [464r,560r:0)  0@464r weight:0.000000e+00
%19 [624r,664r:0)  0@624r weight:0.000000e+00
%20 [664r,688r:0)  0@664r weight:0.000000e+00
%21 [656r,672r:0)  0@656r weight:0.000000e+00
%22 [672r,704r:0)  0@672r weight:0.000000e+00
%23 [800r,960r:0)  0@800r weight:0.000000e+00
%27 [1032r,1048r:0)  0@1032r weight:0.000000e+00
%28 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%30 [1104r,1120r:0)  0@1104r weight:0.000000e+00
%31 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%32 [1168r,1200r:0)  0@1168r weight:0.000000e+00
%33 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%34 [1200r,1232r:0)  0@1200r weight:0.000000e+00
%40 [1536r,1608r:0)  0@1536r weight:0.000000e+00
%41 [1616r,1632r:0)  0@1616r weight:0.000000e+00
%42 [1624r,1904r:0)  0@1624r weight:0.000000e+00
%43 [1600r,1760r:0)  0@1600r weight:0.000000e+00
%44 [1632r,1760r:0)  0@1632r weight:0.000000e+00
%45 [1792r,1904r:0)  0@1792r weight:0.000000e+00
%46 [1936r,1952r:0)  0@1936r weight:0.000000e+00
%47 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%49 [2224r,2240r:0)  0@2224r weight:0.000000e+00
%51 [2656r,2672r:0)  0@2656r weight:0.000000e+00
%55 [3184r,3440r:0)  0@3184r weight:0.000000e+00
%57 [3248r,3264r:0)  0@3248r weight:0.000000e+00
%58 [3264r,3352r:0)  0@3264r weight:0.000000e+00
%60 [3488r,3504r:0)  0@3488r weight:0.000000e+00
%62 [3824r,3976r:0)  0@3824r weight:0.000000e+00
%63 [3856r,3972r:0)  0@3856r weight:0.000000e+00
%66 [4016r,4032r:0)  0@4016r weight:0.000000e+00
%68 [4224r,4452r:0)  0@4224r weight:0.000000e+00
%69 [4256r,7920B:0)  0@4256r weight:0.000000e+00
%70 [4512r,4544r:0)  0@4512r weight:0.000000e+00
%71 [4528r,4544r:0)  0@4528r weight:0.000000e+00
%74 [8000r,8016r:0)  0@8000r weight:0.000000e+00
%77 [8480r,8496r:0)  0@8480r weight:0.000000e+00
%78 [8528r,8624r:0)  0@8528r weight:0.000000e+00
%79 [8560r,8576r:0)  0@8560r weight:0.000000e+00
%80 [8592r,8608r:0)  0@8592r weight:0.000000e+00
%81 [8672r,8788r:0)  0@8672r weight:0.000000e+00
%82 [8688r,8792r:0)  0@8688r weight:0.000000e+00
%83 [8788r,8792r:0)  0@8788r weight:0.000000e+00
%84 [8792r,8884r:0)  0@8792r weight:0.000000e+00
%85 [8884r,8912r:0)  0@8884r weight:0.000000e+00
%86 [8768r,8868r:0)  0@8768r weight:0.000000e+00
%87 [8784r,8872r:0)  0@8784r weight:0.000000e+00
%88 [8868r,8872r:0)  0@8868r weight:0.000000e+00
%89 [8872r,8888r:0)  0@8872r weight:0.000000e+00
%90 [8888r,8928r:0)  0@8888r weight:0.000000e+00
%91 [8864r,8880r:0)  0@8864r weight:0.000000e+00
%92 [8880r,8928r:0)  0@8880r weight:0.000000e+00
%93 [8920r,8960r:0)  0@8920r weight:0.000000e+00
%94 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%95 [8960r,8976r:0)  0@8960r weight:0.000000e+00
%96 [9024r,9064r:0)  0@9024r weight:0.000000e+00
%97 [9064r,9088r:0)  0@9064r weight:0.000000e+00
%98 [9056r,9072r:0)  0@9056r weight:0.000000e+00
%99 [9072r,9104r:0)  0@9072r weight:0.000000e+00
%100 [9268r,9272r:0)  0@9268r weight:0.000000e+00
%101 [9216r,9272r:0)  0@9216r weight:0.000000e+00
%102 [9272r,9280r:0)  0@9272r weight:0.000000e+00
%103 [9248r,9264r:0)  0@9248r weight:0.000000e+00
%104 [9264r,9280r:0)  0@9264r weight:0.000000e+00
%105 [9280r,9296r:0)  0@9280r weight:0.000000e+00
%108 [9440r,9568r:0)  0@9440r weight:0.000000e+00
%114 [9760r,9888r:0)  0@9760r weight:0.000000e+00
%117 [9920r,10080r:0)  0@9920r weight:0.000000e+00
%118 [9936r,10080r:0)  0@9936r weight:0.000000e+00
%124 [10320r,10336r:0)  0@10320r weight:0.000000e+00
%126 [10672r,11344r:0)  0@10672r weight:0.000000e+00
%127 [10688r,11344r:0)  0@10688r weight:0.000000e+00
%128 [10704r,11344r:0)  0@10704r weight:0.000000e+00
%129 [10720r,11344r:0)  0@10720r weight:0.000000e+00
%130 [10752r,11000r:0)  0@10752r weight:0.000000e+00
%132 [10800r,11064r:0)  0@10800r weight:0.000000e+00
%133 [10832r,11060r:0)  0@10832r weight:0.000000e+00
%134 [10864r,11080r:0)  0@10864r weight:0.000000e+00
%135 [10896r,11076r:0)  0@10896r weight:0.000000e+00
%136 [10928r,11176r:0)  0@10928r weight:0.000000e+00
%137 [10960r,11172r:0)  0@10960r weight:0.000000e+00
%138 [10992r,11192r:0)  0@10992r weight:0.000000e+00
%139 [11024r,11184r:0)  0@11024r weight:0.000000e+00
%140 [11072r,11216r:0)  0@11072r weight:0.000000e+00
%145 [11376r,11392r:0)  0@11376r weight:0.000000e+00
%146 [11440r,11456r:0)  0@11440r weight:0.000000e+00
%147 [11520r,11536r:0)  0@11520r weight:0.000000e+00
%149 [11696r,11936r:0)  0@11696r weight:0.000000e+00
%150 [11728r,11744r:0)  0@11728r weight:0.000000e+00
%151 [11744r,12520r:0)  0@11744r weight:0.000000e+00
%152 [11784r,11792r:0)  0@11784r weight:0.000000e+00
%153 [11776r,11792r:0)  0@11776r weight:0.000000e+00
%154 [11792r,11936r:0)  0@11792r weight:0.000000e+00
%158 [12096r,12304r:0)  0@12096r weight:0.000000e+00
%159 [12152r,12160r:0)  0@12152r weight:0.000000e+00
%160 [12144r,12160r:0)  0@12144r weight:0.000000e+00
%161 [12160r,12304r:0)  0@12160r weight:0.000000e+00
%165 [12464r,12672r:0)  0@12464r weight:0.000000e+00
%166 [12520r,12528r:0)  0@12520r weight:0.000000e+00
%167 [12512r,12528r:0)  0@12512r weight:0.000000e+00
%168 [12528r,12672r:0)  0@12528r weight:0.000000e+00
%172 [10400r,10560r:0)  0@10400r weight:0.000000e+00
%174 [10272r,10656B:0)  0@10272r weight:0.000000e+00
%175 [10432r,10560r:0)  0@10432r weight:0.000000e+00
%178 [10592r,10608r:0)  0@10592r weight:0.000000e+00
%179 [10608r,10624r:0)  0@10608r weight:0.000000e+00
%180 [8104r,8180r:0)  0@8104r weight:0.000000e+00
%181 [8096r,8176r:0)  0@8096r weight:0.000000e+00
%183 [7968r,8224B:0)  0@7968r weight:0.000000e+00
%184 [8128r,8180r:0)  0@8128r weight:0.000000e+00
%185 [8180r,8184r:0)  0@8180r weight:0.000000e+00
%186 [8176r,8192r:0)  0@8176r weight:0.000000e+00
%187 [4608r,4696r:0)  0@4608r weight:0.000000e+00
%188 [4624r,4696r:0)  0@4624r weight:0.000000e+00
%189 [4696r,4712r:0)  0@4696r weight:0.000000e+00
%190 [4468r,7920B:0)  0@4468r weight:0.000000e+00
%191 [4688r,4704r:0)  0@4688r weight:0.000000e+00
%193 [4752r,4768r:0)  0@4752r weight:0.000000e+00
%195 [4832r,4928r:0)  0@4832r weight:0.000000e+00
%197 [4864r,4912r:0)  0@4864r weight:0.000000e+00
%198 [4880r,4936r:0)  0@4880r weight:0.000000e+00
%199 [4912r,4928r:0)  0@4912r weight:0.000000e+00
%201 [4992r,5104r:0)  0@4992r weight:0.000000e+00
%203 [5136r,5152r:0)  0@5136r weight:0.000000e+00
%204 [5184r,5200r:0)  0@5184r weight:0.000000e+00
%205 [5248r,5360r:0)  0@5248r weight:0.000000e+00
%207 [5392r,5460r:0)  0@5392r weight:0.000000e+00
%208 [5424r,5464r:0)  0@5424r weight:0.000000e+00
%209 [5456r,5472r:0)  0@5456r weight:0.000000e+00
%210 [5472r,5488r:0)  0@5472r weight:0.000000e+00
%211 [5536r,5552r:0)  0@5536r weight:0.000000e+00
%213 [4472r,7920B:0)  0@4472r weight:0.000000e+00
%214 [4368r,4384r:0)  0@4368r weight:0.000000e+00
%215 [4384r,7920B:0)  0@4384r weight:0.000000e+00
%218 [5888r,5904r:0)  0@5888r weight:0.000000e+00
%220 [6080r,6096r:0)  0@6080r weight:0.000000e+00
%223 [6320r,6336r:0)  0@6320r weight:0.000000e+00
%225 [7688r,7696r:0)  0@7688r weight:0.000000e+00
%227 [7856r,7872r:0)  0@7856r weight:0.000000e+00
%228 [7872r,7888r:0)  0@7872r weight:0.000000e+00
%230 [6400r,6416r:0)  0@6400r weight:0.000000e+00
%231 [6416r,6496r:0)  0@6416r weight:0.000000e+00
%232 [6432r,6504r:0)  0@6432r weight:0.000000e+00
%233 [6504r,6520r:0)  0@6504r weight:0.000000e+00
%234 [4416r,4432r:0)  0@4416r weight:0.000000e+00
%235 [4432r,7920B:0)  0@4432r weight:0.000000e+00
%236 [6520r,6560r:0)  0@6520r weight:0.000000e+00
%237 [6496r,6512r:0)  0@6496r weight:0.000000e+00
%238 [6512r,6528r:0)  0@6512r weight:0.000000e+00
%239 [6528r,6576r:0)  0@6528r weight:0.000000e+00
%240 [6560r,6592r:0)  0@6560r weight:0.000000e+00
%241 [6576r,6592r:0)  0@6576r weight:0.000000e+00
%242 [6592r,6632r:0)  0@6592r weight:0.000000e+00
%243 [6688r,6784r:0)  0@6688r weight:0.000000e+00
%244 [6852r,6856r:0)  0@6852r weight:0.000000e+00
%245 [4448r,4464r:0)  0@4448r weight:0.000000e+00
%246 [4464r,7920B:0)  0@4464r weight:0.000000e+00
%247 [6856r,6864r:0)  0@6856r weight:0.000000e+00
%248 [6848r,6864r:0)  0@6848r weight:0.000000e+00
%250 [7184r,7240r:0)  0@7184r weight:0.000000e+00
%251 [7240r,7544r:0)  0@7240r weight:0.000000e+00
%252 [7232r,7248r:0)  0@7232r weight:0.000000e+00
%253 [7248r,7600r:0)  0@7248r weight:0.000000e+00
%254 [7280r,7312r:0)  0@7280r weight:0.000000e+00
%255 [7296r,7312r:0)  0@7296r weight:0.000000e+00
%256 [7544r,7552r:0)  0@7544r weight:0.000000e+00
%257 [7552r,7560r:0)  0@7552r weight:0.000000e+00
%259 [7560r,7576r:0)  0@7560r weight:0.000000e+00
%261 [7576r,7624r:0)  0@7576r weight:0.000000e+00
%262 [4480r,7920B:0)  0@4480r weight:0.000000e+00
%263 [7584r,7616r:0)  0@7584r weight:0.000000e+00
%266 [7616r,7624r:0)  0@7616r weight:0.000000e+00
%267 [7472r,7536r:0)  0@7472r weight:0.000000e+00
%268 [7536r,7608r:0)  0@7536r weight:0.000000e+00
%269 [7520r,7600r:0)  0@7520r weight:0.000000e+00
%270 [7600r,7632r:0)  0@7600r weight:0.000000e+00
%271 [7648r,7656r:0)  0@7648r weight:0.000000e+00
%272 [7656r,7664r:0)  0@7656r weight:0.000000e+00
%273 [4096r,4160r:0)  0@4096r weight:0.000000e+00
%275 [3984r,4208B:0)  0@3984r weight:0.000000e+00
%277 [4160r,4176r:0)  0@4160r weight:0.000000e+00
%278 [3568r,3680r:0)  0@3568r weight:0.000000e+00
%280 [3712r,3752r:0)  0@3712r weight:0.000000e+00
%281 [3744r,3760r:0)  0@3744r weight:0.000000e+00
%282 [3760r,3776r:0)  0@3760r weight:0.000000e+00
%283 [2112r,2160r:0)  0@2112r weight:0.000000e+00
%285 [1984r,2208B:0)  0@1984r weight:0.000000e+00
%286 [2000r,2208B:0)  0@2000r weight:0.000000e+00
%287 [2160r,2176r:0)  0@2160r weight:0.000000e+00
%288 [2256r,2336B:0)[2416r,2464B:1)[2464B,2624r:2)  0@2256r 1@2416r 2@2464B-phi weight:0.000000e+00
%289 [6880r,6960B:0)[7040r,7088B:1)[7088B,7480r:2)  0@6880r 1@7040r 2@7088B-phi weight:0.000000e+00
RegMasks: 208r 512r 720r 912r 1296r 1440r 1712r 1856r 2384r 2576r 2736r 2864r 2992r 3104r 3360r 3632r 5056r 5312r 5632r 5808r 5984r 6176r 6736r 7008r 7760r 8288r 8400r 9120r 9360r 9520r 9680r 9840r 10032r 10160r 10512r 11296r 11616r 11888r 12016r 12256r 12384r 12624r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=4, align=4, at location [SP]
  fi#25: size=4, align=4, at location [SP]
  fi#26: size=4, align=4, at location [SP]
  fi#27: size=4, align=4, at location [SP]
  fi#28: size=4, align=4, at location [SP]
  fi#29: size=24, align=16, at location [SP]
  fi#30: size=16, align=16, at location [SP]
  fi#31: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: 1.000000e-08, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
  cp#7: -2.000000e+00, align=8

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

48B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @ep___const_main_dum_, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, debug-location !93; ep.c:82:12
64B	  %10:fpr128 = LDRQui %9:gpr64common, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
96B	  %11:gpr64 = LDRXui %9:gpr64common, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
100B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
104B	  STRQui %10:fpr128, %stack.29.dum, 0, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
112B	  STRXui %11:gpr64, %stack.29.dum, 2, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !106; ep.c:87:15
176B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, debug-location !106; ep.c:87:15
192B	  $x1 = MOVaddr target-flags(aarch64-page) @ep__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, debug-location !106; ep.c:87:15
208B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !106; ep.c:87:15
240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !108; ep.c:87:13
256B	  PCN_STACKMAP 0, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.31.fp, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !108 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.31.fp), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:87:13
272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !108; ep.c:87:13
288B	  %14:gpr64 = COPY killed $x8, debug-location !106; ep.c:87:15
304B	  STRXui %14:gpr64, %stack.31.fp, 0, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
320B	  CBNZX %14:gpr64, %bb.2, debug-location !110; ep.c:87:9
336B	  B %bb.1, debug-location !110; ep.c:87:9

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

384B	  STRWui $wzr, %stack.28.timers_enabled, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
400B	  B %bb.3, debug-location !113; ep.c:89:5

416B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

464B	  %16:gpr64 = LDRXui %stack.31.fp, 0, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
468B	  %15:gpr32 = MOVi32imm 1
472B	  STRWui %15:gpr32, %stack.28.timers_enabled, 0, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
480B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !117; ep.c:92:9
496B	  $x0 = COPY %16:gpr64, debug-location !117; ep.c:92:9
512B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !117; ep.c:92:9
528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !117; ep.c:92:9
544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
560B	  PCN_STACKMAP 1, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %16:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2)
576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

592B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

608B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !119; ep.c:102:30
624B	  %19:gpr64temp = ADRP target-flags(aarch64-page) %const.0
656B	  %21:gpr64temp = ADRP target-flags(aarch64-page) %const.1
664B	  %20:fpr64 = LDRDui %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
672B	  %22:fpr64 = LDRDui %21:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
688B	  $d0 = COPY %20:fpr64, debug-location !119; ep.c:102:30
704B	  $d1 = COPY %22:fpr64, debug-location !119; ep.c:102:30
720B	  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
736B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !119; ep.c:102:30
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !120; ep.c:102:5
768B	  PCN_STACKMAP 2, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !120 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:102:5
784B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
800B	  %23:fpr64 = COPY $d0, debug-location !119; ep.c:102:30
816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !120; ep.c:102:5
864B	  $x0 = ADDXri %stack.30.size, 0, 0, debug-location !120; ep.c:102:5
880B	  $x1 = MOVaddr target-flags(aarch64-page) @ep__str_2__15_0lf_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
896B	  $d0 = COPY %23:fpr64, debug-location !120; ep.c:102:5
912B	  BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
928B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !120; ep.c:102:5
944B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !121; ep.c:103:7
960B	  PCN_STACKMAP 3, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, %23:fpr64, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.26.j, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !121 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:103:7
976B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !121; ep.c:103:7
1024B	  %28:gpr32common = LDRSBWui %stack.30.size, 14, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
1032B	  %27:gpr32 = MOVi32imm 14
1040B	  dead $wzr = SUBSWri %28:gpr32common, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
1048B	  STRWui %27:gpr32, %stack.26.j, 0, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
1056B	  Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9
1072B	  B %bb.4, debug-location !126; ep.c:104:9

1088B	bb.4.if.then6:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1104B	  %30:gpr32common = LDRWui %stack.26.j, 0, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
1120B	  %31:gpr32common = nsw SUBWri %30:gpr32common, 1, 0, debug-location !127; ep.c:105:10
1136B	  STRWui %31:gpr32common, %stack.26.j, 0, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

1152B	bb.5.if.end7:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1168B	  %32:gpr64 = LDRSWui %stack.26.j, 0, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
1184B	  %33:gpr64common = ADDXri %stack.30.size, 0, 0
1200B	  %34:gpr64common = ADDXrr %32:gpr64, %33:gpr64common, debug-location !130; ep.c:106:12
1232B	  STRBBui $wzr, %34:gpr64common, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
1248B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !133; ep.c:107:5
1280B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_3____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_3____NAS_Par, debug-location !133; ep.c:107:5
1296B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !133; ep.c:107:5
1312B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !133; ep.c:107:5
1328B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !134; ep.c:108:61
1344B	  PCN_STACKMAP 4, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !134 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:108:61
1360B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !134; ep.c:108:61
1376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !135; ep.c:108:5
1408B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_4___Number_o, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
1424B	  $x1 = ADDXri %stack.30.size, 0, 0, debug-location !135; ep.c:108:5
1440B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
1456B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !135; ep.c:108:5
1472B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !136; ep.c:110:14
1488B	  PCN_STACKMAP 5, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.30.size, 0, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.30.size, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !136 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:110:14
1504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !136; ep.c:110:14
1520B	  STRWui $wzr, %stack.27.verified, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
1536B	  %40:gpr32 = MOVi32imm 16384
1600B	  %43:fpr64 = LDRDui %stack.29.dum, 1, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
1608B	  STRWui %40:gpr32, %stack.18.np, 0, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
1616B	  %41:gpr64common = ADDXri %stack.29.dum, 0, 0
1624B	  %42:gpr64sp = ORRXri %41:gpr64common, 8000, debug-location !139; ep.c:127:24
1632B	  %44:gpr64sp = nuw ADDXri %41:gpr64common, 16, 0, debug-location !140; ep.c:127:33
1640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; ep.c:127:5
1664B	  $x1 = ADDXri %stack.29.dum, 0, 0, debug-location !141; ep.c:127:5
1672B	  $w0 = COPY $wzr, debug-location !141; ep.c:127:5
1680B	  $d0 = COPY %43:fpr64, debug-location !141; ep.c:127:5
1696B	  $x2 = COPY %44:gpr64sp, debug-location !141; ep.c:127:5
1712B	  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !141; ep.c:127:5
1728B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !141; ep.c:127:5
1744B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !142; ep.c:128:22
1760B	  PCN_STACKMAP 6, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.29.dum, 0, %44:gpr64sp, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %43:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !142 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:22
1776B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !142; ep.c:128:22
1792B	  %45:fpr64 = LDRDui %stack.29.dum, 2, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
1808B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !144; ep.c:128:14
1824B	  $x0 = COPY %42:gpr64sp, debug-location !144; ep.c:128:14
1840B	  $d0 = COPY %45:fpr64, debug-location !144; ep.c:128:14
1856B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
1872B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !144; ep.c:128:14
1888B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !145; ep.c:128:5
1904B	  PCN_STACKMAP 7, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %42:gpr64sp, 0, %stack.29.dum, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %45:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !145 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:128:5
1920B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !145; ep.c:128:5
1936B	  %46:fpr64 = COPY $d0, debug-location !144; ep.c:128:14
1952B	  STRDui %46:fpr64, %stack.29.dum, 0, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
1968B	  STRWui $wzr, %stack.19.i, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
1984B	  %285:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
2000B	  %286:gpr64 = MOVi64imm -3135276447761457362

2016B	bb.6.for.cond:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2032B	  %47:gpr32common = LDRWui %stack.19.i, 0, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
2048B	  dead $wzr = SUBSWri %47:gpr32common, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
2064B	  Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5
2080B	  B %bb.7, debug-location !153; ep.c:129:5

2096B	bb.7.for.body:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

2112B	  %283:gpr64common = LDRSWui %stack.19.i, 0, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
2144B	  STRXroX %286:gpr64, %285:gpr64common, %283:gpr64common, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
2160B	  %287:gpr32common = nsw ADDWri %283.sub_32:gpr64common, 1, 0, debug-location !158; ep.c:129:30
2176B	  STRWui %287:gpr32common, %stack.19.i, 0, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
2192B	  B %bb.6, debug-location !159; ep.c:129:5

2208B	bb.8.for.end:
	; predecessors: %bb.6
	  successors: %bb.10(0x50000000), %bb.9(0x30000000); %bb.10(62.50%), %bb.9(37.50%)

2224B	  %49:gpr64temp = ADRP target-flags(aarch64-page) %const.2
2240B	  %0:fpr64 = LDRDui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
2256B	  %288:fpr64 = FSQRTDr %0:fpr64, debug-location !163; ep.c:132:16
2272B	  FCMPDrr %288:fpr64, %288:fpr64, implicit-def $nzcv, debug-location !164; ep.c:132:12
2304B	  Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12
2320B	  B %bb.9, debug-location !164; ep.c:132:12

2336B	bb.9.call.sqrt:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2352B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
2368B	  $d0 = COPY %0:fpr64, debug-location !164; ep.c:132:12
2384B	  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
2400B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
2416B	  %288:fpr64 = COPY $d0, debug-location !164; ep.c:132:12

2464B	bb.10.for.end.split:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2496B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !164; ep.c:132:12
2512B	  PCN_STACKMAP 8, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %0:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !164 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:12
2528B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
2544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !164; ep.c:132:12
2560B	  $d0 = COPY %288:fpr64, debug-location !164; ep.c:132:12
2576B	  BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
2592B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !164; ep.c:132:12
2608B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !165; ep.c:132:10
2624B	  PCN_STACKMAP 9, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %288:fpr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !165 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:10
2640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !165; ep.c:132:10
2656B	  %51:fpr64 = COPY $d0, debug-location !164; ep.c:132:12
2672B	  STRDui %51:fpr64, %stack.1.Mops, 0, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
2688B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !166; ep.c:134:5
2720B	  $w0 = COPY $wzr, debug-location !166; ep.c:134:5
2736B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
2752B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !166; ep.c:134:5
2768B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !167; ep.c:135:5
2784B	  PCN_STACKMAP 10, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !167 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:135:5
2800B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
2816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; ep.c:135:5
2848B	  $w0 = MOVi32imm 1, debug-location !167; ep.c:135:5
2864B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !167; ep.c:135:5
2880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !167; ep.c:135:5
2896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !168; ep.c:136:5
2912B	  PCN_STACKMAP 11, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !168 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:136:5
2928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
2944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; ep.c:136:5
2976B	  $w0 = MOVi32imm 2, debug-location !168; ep.c:136:5
2992B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !168; ep.c:136:5
3008B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !168; ep.c:136:5
3024B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !169; ep.c:137:5
3040B	  PCN_STACKMAP 12, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !169 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:137:5
3056B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
3072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !169; ep.c:137:5
3088B	  $w0 = COPY $wzr, debug-location !169; ep.c:137:5
3104B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !169; ep.c:137:5
3120B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !169; ep.c:137:5
3136B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !170; ep.c:139:5
3152B	  PCN_STACKMAP 13, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !170 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:139:5
3168B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !170; ep.c:139:5
3184B	  %55:gpr64 = MOVi64imm 4742906807993761792
3200B	  STRXui %55:gpr64, %stack.2.t1, 0, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
3216B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !172; ep.c:142:5
3248B	  %57:gpr64temp = ADRP target-flags(aarch64-page) %const.3
3264B	  %58:fpr64 = LDRDui %57:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
3312B	  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !172; ep.c:142:5
3344B	  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !172; ep.c:142:5
3348B	  $w0 = COPY $wzr, debug-location !172; ep.c:142:5
3352B	  $d0 = COPY %58:fpr64, debug-location !172; ep.c:142:5
3360B	  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !172; ep.c:142:5
3376B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !172; ep.c:142:5
3392B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !173; ep.c:148:8
3408B	  PCN_STACKMAP 14, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !173 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:148:8
3424B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !173; ep.c:148:8
3440B	  STRXui %55:gpr64, %stack.2.t1, 0, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
3456B	  STRWui $wzr, %stack.19.i, 0, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

3472B	bb.11.for.cond26:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

3488B	  %60:gpr32common = LDRWui %stack.19.i, 0, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
3504B	  dead $wzr = SUBSWri %60:gpr32common, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
3520B	  Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5
3536B	  B %bb.12, debug-location !180; ep.c:150:5

3552B	bb.12.for.body29:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

3568B	  %278:fpr64 = LDRDui %stack.2.t1, 0, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
3584B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !183; ep.c:151:14
3600B	  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !183; ep.c:151:14
3616B	  $d0 = COPY %278:fpr64, debug-location !183; ep.c:151:14
3632B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
3648B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !183; ep.c:151:14
3664B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !184; ep.c:151:12
3680B	  PCN_STACKMAP 15, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %278:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !184 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:151:12
3696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; ep.c:151:12
3712B	  %280:fpr64 = COPY $d0, debug-location !183; ep.c:151:14
3744B	  %281:gpr32common = LDRWui %stack.19.i, 0, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
3752B	  STRDui %280:fpr64, %stack.3.t2, 0, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
3760B	  %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0, debug-location !185; ep.c:150:30
3776B	  STRWui %282:gpr32common, %stack.19.i, 0, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
3792B	  B %bb.11, debug-location !186; ep.c:150:5

3808B	bb.13.for.end33:
	; predecessors: %bb.11
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3824B	  %62:fpr64 = LDRDui %stack.2.t1, 0, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
3856B	  %63:gpr64 = MOVi64imm 4733340128880099328
3904B	  STRXui $xzr, %stack.13.gc, 0, debug-location !192 :: (store 8 into %ir.gc); ep.c:156:8
3920B	  STRXui $xzr, %stack.8.sx, 0, debug-location !193 :: (store 8 into %ir.sx); ep.c:157:8
3936B	  STRXui $xzr, %stack.9.sy, 0, debug-location !194 :: (store 8 into %ir.sy); ep.c:158:8
3968B	  STRWui $wzr, %stack.19.i, 0, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
3972B	  STRXui %63:gpr64, %stack.12.tt, 0, debug-location !191 :: (store 8 into %ir.tt); ep.c:155:8
3976B	  STRDui %62:fpr64, %stack.11.an, 0, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
3984B	  %275:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

4000B	bb.14.for.cond34:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

4016B	  %66:gpr32common = LDRWui %stack.19.i, 0, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
4032B	  dead $wzr = SUBSWri %66:gpr32common, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
4048B	  Bcc 12, %bb.16, implicit $nzcv, debug-location !201; ep.c:160:5
4064B	  B %bb.15, debug-location !201; ep.c:160:5

4080B	bb.15.for.body37:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

4096B	  %273:gpr64common = LDRSWui %stack.19.i, 0, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
4144B	  STRXroX $xzr, %275:gpr64common, %273:gpr64common, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
4160B	  %277:gpr32common = nsw ADDWri %273.sub_32:gpr64common, 1, 0, debug-location !206; ep.c:160:26
4176B	  STRWui %277:gpr32common, %stack.19.i, 0, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
4192B	  B %bb.14, debug-location !207; ep.c:160:5

4208B	bb.16.for.end42:
	; predecessors: %bb.14
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

4224B	  %68:gpr32 = MOVi32imm -1
4256B	  %69:gpr32 = MOVi32imm 1
4368B	  %214:gpr64temp = ADRP target-flags(aarch64-page) %const.3
4384B	  %215:fpr64 = LDRDui %214:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
4416B	  %234:gpr64temp = ADRP target-flags(aarch64-page) %const.2
4432B	  %235:fpr64 = LDRDui %234:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
4448B	  %245:gpr64temp = ADRP target-flags(aarch64-page) %const.7
4452B	  STRWui %68:gpr32, %stack.25.k_offset, 0, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
4456B	  STRWui %69:gpr32, %stack.23.k, 0, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
4464B	  %246:fpr64 = LDRDui %245:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
4468B	  %190:gpr64 = MOVi64imm 4733340128880099328
4472B	  %213:gpr64 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
4480B	  %262:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

4496B	bb.17.for.cond43:
	; predecessors: %bb.16, %bb.39
	  successors: %bb.18(0x7c000000), %bb.40(0x04000000); %bb.18(96.88%), %bb.40(3.12%)

4512B	  %70:gpr32 = LDRWui %stack.23.k, 0, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
4528B	  %71:gpr32 = LDRWui %stack.18.np, 0, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
4544B	  dead $wzr = SUBSWrr %70:gpr32, %71:gpr32, implicit-def $nzcv, debug-location !218; ep.c:172:5
4560B	  Bcc 12, %bb.40, implicit $nzcv, debug-location !218; ep.c:172:5
4576B	  B %bb.18, debug-location !218; ep.c:172:5

4592B	bb.18.for.body46:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

4608B	  %187:gpr32 = LDRWui %stack.25.k_offset, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
4624B	  %188:gpr32 = LDRWui %stack.23.k, 0, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
4688B	  %191:fpr64 = LDRDui %stack.11.an, 0, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
4692B	  STRXui %190:gpr64, %stack.2.t1, 0, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
4696B	  %189:gpr32 = nsw ADDWrr %187:gpr32, %188:gpr32, debug-location !222; ep.c:173:23
4704B	  STRDui %191:fpr64, %stack.3.t2, 0, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
4712B	  STRWui %189:gpr32, %stack.21.kk, 0, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
4720B	  STRWui %69:gpr32, %stack.19.i, 0, debug-location !227 :: (store 4 into %ir.i); ep.c:179:16

4736B	bb.19.for.cond48:
	; predecessors: %bb.18, %bb.23
	  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)

4752B	  %193:gpr32common = LDRWui %stack.19.i, 0, debug-location !230 :: (dereferenceable load 4 from %ir.i); ep.c:179:21
4768B	  dead $wzr = SUBSWri %193:gpr32common, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
4784B	  Bcc 12, %bb.24, implicit $nzcv, debug-location !233; ep.c:179:9
4800B	  B %bb.20, debug-location !233; ep.c:179:9

4816B	bb.20.for.body51:
	; predecessors: %bb.19
	  successors: %bb.21(0x40000000), %bb.22(0x40000000); %bb.21(50.00%), %bb.22(50.00%)

4832B	  %195:gpr32common = LDRWui %stack.21.kk, 0, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
4848B	  dead $wzr = SUBSWri %195:gpr32common, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
4864B	  %197:gpr32 = CSINCWr %195:gpr32common, %195:gpr32common, 10, implicit $nzcv, debug-location !236; ep.c:180:21
4880B	  %198:gpr32 = SBFMWri %197:gpr32, 1, 31, debug-location !236; ep.c:180:21
4912B	  %199:gpr32common = ANDWri %197:gpr32, 2014, debug-location !240; ep.c:181:20
4928B	  dead $wzr = SUBSWrr %199:gpr32common, %195:gpr32common, implicit-def $nzcv, debug-location !243; ep.c:181:17
4936B	  STRWui %198:gpr32, %stack.20.ik, 0, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
4944B	  Bcc 0, %bb.22, implicit $nzcv, debug-location !243; ep.c:181:17
4960B	  B %bb.21, debug-location !243; ep.c:181:17

4976B	bb.21.if.then54:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

4992B	  %201:fpr64 = LDRDui %stack.3.t2, 0, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
5008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !245; ep.c:182:22
5024B	  $x0 = ADDXri %stack.2.t1, 0, 0, debug-location !245; ep.c:182:22
5040B	  $d0 = COPY %201:fpr64, debug-location !245; ep.c:182:22
5056B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
5072B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !245; ep.c:182:22
5088B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !246; ep.c:182:20
5104B	  PCN_STACKMAP 16, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %201:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !246 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:182:20
5120B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !246; ep.c:182:20
5136B	  %203:fpr64 = COPY $d0, debug-location !245; ep.c:182:22
5152B	  STRDui %203:fpr64, %stack.4.t3, 0, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

5168B	bb.22.if.end56:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.24(0x04000000), %bb.23(0x7c000000); %bb.24(3.12%), %bb.23(96.88%)

5184B	  %204:gpr32 = LDRWui %stack.20.ik, 0, debug-location !248 :: (dereferenceable load 4 from %ir.ik); ep.c:183:17
5200B	  CBZW %204:gpr32, %bb.24, debug-location !251; ep.c:183:17
5216B	  B %bb.23, debug-location !251; ep.c:183:17

5232B	bb.23.if.end60:
	; predecessors: %bb.22
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

5248B	  %205:fpr64 = LDRDui %stack.3.t2, 0, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
5264B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !253; ep.c:185:18
5280B	  $x0 = ADDXri %stack.3.t2, 0, 0, debug-location !253; ep.c:185:18
5296B	  $d0 = COPY %205:fpr64, debug-location !253; ep.c:185:18
5312B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
5328B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !253; ep.c:185:18
5344B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !254; ep.c:185:16
5360B	  PCN_STACKMAP 17, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %205:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !254 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:185:16
5376B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !254; ep.c:185:16
5392B	  %207:fpr64 = COPY $d0, debug-location !253; ep.c:185:18
5424B	  %208:gpr32 = LDRWui %stack.20.ik, 0, debug-location !255 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
5456B	  %209:gpr32common = LDRWui %stack.19.i, 0, debug-location !257 :: (dereferenceable load 4 from %ir.i); ep.c:179:32
5460B	  STRDui %207:fpr64, %stack.4.t3, 0, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
5464B	  STRWui %208:gpr32, %stack.21.kk, 0, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
5472B	  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !257; ep.c:179:32
5488B	  STRWui %210:gpr32common, %stack.19.i, 0, debug-location !257 :: (store 4 into %ir.i); ep.c:179:32
5504B	  B %bb.19, debug-location !258; ep.c:179:9

5520B	bb.24.for.end64:
	; predecessors: %bb.19, %bb.22
	  successors: %bb.25(0x50000000), %bb.26(0x30000000); %bb.25(62.50%), %bb.26(37.50%)

5536B	  %211:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !261 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
5552B	  CBZW %211:gpr32, %bb.26, debug-location !263; ep.c:192:13
5568B	  B %bb.25, debug-location !263; ep.c:192:13

5584B	bb.25.if.then65:
	; predecessors: %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

5600B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; ep.c:193:13
5616B	  $w0 = MOVi32imm 2, debug-location !264; ep.c:193:13
5632B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !264; ep.c:193:13
5648B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !264; ep.c:193:13
5664B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !264; ep.c:193:13
5680B	  PCN_STACKMAP 18, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !264 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:193:13
5696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !264; ep.c:193:13

5712B	bb.26.if.end66:
	; predecessors: %bb.24, %bb.25
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

5728B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !265; ep.c:194:9
5760B	  $x1 = ADDXri %stack.2.t1, 0, 0, debug-location !265; ep.c:194:9
5792B	  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !265; ep.c:194:9
5796B	  $w0 = MOVi32imm 131072, debug-location !265; ep.c:194:9
5800B	  $d0 = COPY %215:fpr64, debug-location !265; ep.c:194:9
5808B	  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit killed $x1, implicit $d0, implicit killed $x2, implicit-def $sp, debug-location !265; ep.c:194:9
5824B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !265; ep.c:194:9
5840B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !266; ep.c:195:13
5856B	  PCN_STACKMAP 19, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !266 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:195:13
5872B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !266; ep.c:195:13
5888B	  %218:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !266 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
5904B	  CBZW %218:gpr32, %bb.28, debug-location !268; ep.c:195:13
5920B	  B %bb.27, debug-location !268; ep.c:195:13

5936B	bb.27.if.then68:
	; predecessors: %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

5952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !269; ep.c:196:13
5968B	  $w0 = MOVi32imm 2, debug-location !269; ep.c:196:13
5984B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !269; ep.c:196:13
6000B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !269; ep.c:196:13
6016B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !269; ep.c:196:13
6032B	  PCN_STACKMAP 20, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !269 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:196:13
6048B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !269; ep.c:196:13

6064B	bb.28.if.end69:
	; predecessors: %bb.26, %bb.27
	  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

6080B	  %220:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !270 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
6096B	  CBZW %220:gpr32, %bb.30, debug-location !272; ep.c:203:13
6112B	  B %bb.29, debug-location !272; ep.c:203:13

6128B	bb.29.if.then71:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

6144B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !273; ep.c:204:13
6160B	  $w0 = MOVi32imm 1, debug-location !273; ep.c:204:13
6176B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !273; ep.c:204:13
6192B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !273; ep.c:204:13
6208B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !273; ep.c:204:13
6224B	  PCN_STACKMAP 21, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !273 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:204:13
6240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !273; ep.c:204:13

6256B	bb.30.if.end72:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6288B	  STRWui $wzr, %stack.19.i, 0, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16

6304B	bb.31.for.cond73:
	; predecessors: %bb.30, %bb.36
	  successors: %bb.32(0x7c000000), %bb.37(0x04000000); %bb.32(96.88%), %bb.37(3.12%)

6320B	  %223:gpr32common = LDRWui %stack.19.i, 0, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
6336B	  dead $wzr = SUBSWri %223:gpr32common, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
6352B	  Bcc 10, %bb.37, implicit $nzcv, debug-location !280; ep.c:206:9
6368B	  B %bb.32, debug-location !280; ep.c:206:9

6384B	bb.32.for.body76:
	; predecessors: %bb.31
	  successors: %bb.33(0x40000000), %bb.36(0x40000000); %bb.33(50.00%), %bb.36(50.00%)

6400B	  %230:gpr64 = LDRSWui %stack.19.i, 0, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
6416B	  %231:gpr64common = ADDXrs %213:gpr64, %230:gpr64, 4, debug-location !284; ep.c:207:24
6432B	  %232:fpr64 = LDRDui %231:gpr64common, 0, debug-location !284 :: (load 8 from %ir.arrayidx79); ep.c:207:24
6496B	  %237:fpr64 = LDRDui %231:gpr64common, 1, debug-location !291 :: (load 8 from %ir.arrayidx84); ep.c:208:24
6504B	  %233:fpr64 = FADDDrr %232:fpr64, %232:fpr64, debug-location !285; ep.c:207:22
6512B	  %238:fpr64 = FADDDrr %237:fpr64, %237:fpr64, debug-location !292; ep.c:208:22
6520B	  %236:fpr64 = FSUBDrr %233:fpr64, %235:fpr64, debug-location !286; ep.c:207:33
6528B	  %239:fpr64 = FSUBDrr %238:fpr64, %235:fpr64, debug-location !293; ep.c:208:37
6536B	  STRDui %236:fpr64, %stack.6.x1, 0, debug-location !287 :: (store 8 into %ir.x1); ep.c:207:16
6544B	  STRDui %239:fpr64, %stack.7.x2, 0, debug-location !294 :: (store 8 into %ir.x2); ep.c:208:16
6560B	  %240:fpr64 = FMULDrr %236:fpr64, %236:fpr64, debug-location !297; ep.c:209:21
6576B	  %241:fpr64 = FMULDrr %239:fpr64, %239:fpr64, debug-location !300; ep.c:209:31
6592B	  %242:fpr64 = FADDDrr %240:fpr64, %241:fpr64, debug-location !301; ep.c:209:26
6624B	  FCMPDrr %242:fpr64, %235:fpr64, implicit-def $nzcv, debug-location !306; ep.c:210:17
6632B	  STRDui %242:fpr64, %stack.2.t1, 0, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
6640B	  Bcc 8, %bb.36, implicit $nzcv, debug-location !306; ep.c:210:17
6656B	  B %bb.33, debug-location !306; ep.c:210:17

6672B	bb.33.if.then92:
	; predecessors: %bb.32
	  successors: %bb.35(0x50000000), %bb.34(0x30000000); %bb.35(62.50%), %bb.34(37.50%)

6688B	  %243:fpr64 = LDRDui %stack.2.t1, 0, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
6704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !309; ep.c:211:34
6720B	  $d0 = COPY %243:fpr64, debug-location !309; ep.c:211:34
6736B	  BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !309; ep.c:211:34
6752B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !309; ep.c:211:34
6768B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !310; ep.c:211:32
6784B	  PCN_STACKMAP 22, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, %243:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !310 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:32
6800B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !310; ep.c:211:32
6848B	  %248:fpr64 = LDRDui %stack.2.t1, 0, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
6852B	  %244:fpr64 = COPY $d0, debug-location !309; ep.c:211:34
6856B	  %247:fpr64 = FMULDrr %244:fpr64, %246:fpr64, debug-location !310; ep.c:211:32
6864B	  %4:fpr64 = FDIVDrr %247:fpr64, %248:fpr64, debug-location !312; ep.c:211:42
6880B	  %289:fpr64 = FSQRTDr %4:fpr64, debug-location !313; ep.c:211:22
6896B	  FCMPDrr %289:fpr64, %289:fpr64, implicit-def $nzcv, debug-location !314; ep.c:211:20
6928B	  Bcc 7, %bb.35, implicit $nzcv, debug-location !314; ep.c:211:20
6944B	  B %bb.34, debug-location !314; ep.c:211:20

6960B	bb.34.call.sqrt1:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

6976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !314; ep.c:211:20
6992B	  $d0 = COPY %4:fpr64, debug-location !314; ep.c:211:20
7008B	  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !314; ep.c:211:20
7024B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !314; ep.c:211:20
7040B	  %289:fpr64 = COPY $d0, debug-location !314; ep.c:211:20

7088B	bb.35.if.then92.split:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

7120B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !314; ep.c:211:20
7136B	  PCN_STACKMAP 23, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, %4:fpr64, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !314 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:20
7152B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !314; ep.c:211:20
7184B	  %250:fpr64 = LDRDui %stack.6.x1, 0, debug-location !315 :: (dereferenceable load 8 from %ir.x1); ep.c:212:23
7232B	  %252:fpr64 = LDRDui %stack.7.x2, 0, debug-location !319 :: (dereferenceable load 8 from %ir.x2); ep.c:213:23
7240B	  %251:fpr64 = FMULDrr %250:fpr64, %289:fpr64, debug-location !317; ep.c:212:26
7248B	  %253:fpr64 = FMULDrr %252:fpr64, %289:fpr64, debug-location !321; ep.c:213:26
7280B	  %254:fpr64 = FABSDr %251:fpr64, debug-location !323; ep.c:214:21
7296B	  %255:fpr64 = FABSDr %253:fpr64, debug-location !323; ep.c:214:21
7312B	  FCMPDrr %254:fpr64, %255:fpr64, implicit-def $nzcv, debug-location !323; ep.c:214:21
7472B	  %267:fpr64 = LDRDui %stack.8.sx, 0, debug-location !331 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
7480B	  STRDui %289:fpr64, %stack.3.t2, 0, debug-location !314 :: (store 8 into %ir.t2); ep.c:211:20
7520B	  %269:fpr64 = LDRDui %stack.9.sy, 0, debug-location !335 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
7528B	  STRDui %251:fpr64, %stack.4.t3, 0, debug-location !318 :: (store 8 into %ir.t3); ep.c:212:20
7536B	  %268:fpr64 = FADDDrr %267:fpr64, %251:fpr64, debug-location !333; ep.c:216:25
7544B	  %256:fpr64 = FCSELDrrr %251:fpr64, %253:fpr64, 12, implicit $nzcv, debug-location !323; ep.c:214:21
7552B	  %257:fpr64 = FABSDr %256:fpr64, debug-location !323; ep.c:214:21
7560B	  undef %259.sub_32:gpr64 = FCVTZSUWDr %257:fpr64, debug-location !323; ep.c:214:21
7568B	  STRWui %259.sub_32:gpr64, %stack.22.l, 0, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
7576B	  %261:gpr64 = SBFMXri %259:gpr64, 61, 31, debug-location !326; ep.c:215:24
7584B	  %263:fpr64 = LDRDroX %262:gpr64common, %261:gpr64, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
7592B	  STRDui %253:fpr64, %stack.5.t4, 0, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
7600B	  %270:fpr64 = FADDDrr %269:fpr64, %253:fpr64, debug-location !337; ep.c:217:25
7608B	  STRDui %268:fpr64, %stack.8.sx, 0, debug-location !334 :: (store 8 into %ir.sx); ep.c:216:20
7616B	  %266:fpr64 = FADDDrr %263:fpr64, %235:fpr64, debug-location !327; ep.c:215:29
7624B	  STRDroX %266:fpr64, %262:gpr64common, %261:gpr64, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
7632B	  STRDui %270:fpr64, %stack.9.sy, 0, debug-location !338 :: (store 8 into %ir.sy); ep.c:217:20

7640B	bb.36.for.inc110:
	; predecessors: %bb.32, %bb.35
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

7648B	  %271:gpr32common = LDRWui %stack.19.i, 0, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
7656B	  %272:gpr32common = nsw ADDWri %271:gpr32common, 1, 0, debug-location !340; ep.c:206:30
7664B	  STRWui %272:gpr32common, %stack.19.i, 0, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
7672B	  B %bb.31, debug-location !341; ep.c:206:9

7680B	bb.37.for.end112:
	; predecessors: %bb.31
	  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

7688B	  %225:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !344 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
7696B	  CBZW %225:gpr32, %bb.39, debug-location !346; ep.c:221:13
7704B	  B %bb.38, debug-location !346; ep.c:221:13

7712B	bb.38.if.then114:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

7728B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !347; ep.c:222:13
7744B	  $w0 = MOVi32imm 1, debug-location !347; ep.c:222:13
7760B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !347; ep.c:222:13
7776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !347; ep.c:222:13
7792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !347; ep.c:222:13
7808B	  PCN_STACKMAP 24, 0, 0, %stack.1.Mops, 0, 0, %stack.11.an, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.20.ik, 0, 0, %stack.23.k, 0, 0, %stack.25.k_offset, 0, 0, %stack.21.kk, 0, 0, %stack.22.l, 0, 0, %stack.24.nit, 0, 0, %stack.18.np, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.2.t1, 0, 0, %stack.3.t2, 0, 0, %stack.4.t3, 0, 0, %stack.5.t4, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, 0, %stack.6.x1, 0, 0, %stack.7.x2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !347 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:222:13
7824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !347; ep.c:222:13

7840B	bb.39.for.inc116:
	; predecessors: %bb.37, %bb.38
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

7856B	  %227:gpr32common = LDRWui %stack.23.k, 0, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
7872B	  %228:gpr32common = nsw ADDWri %227:gpr32common, 1, 0, debug-location !348; ep.c:172:27
7888B	  STRWui %228:gpr32common, %stack.23.k, 0, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
7904B	  B %bb.17, debug-location !349; ep.c:172:5

7920B	bb.40.for.end118:
	; predecessors: %bb.17
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

7952B	  STRWui $wzr, %stack.19.i, 0, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
7968B	  %183:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

7984B	bb.41.for.cond119:
	; predecessors: %bb.40, %bb.42
	  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

8000B	  %74:gpr32common = LDRWui %stack.19.i, 0, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
8016B	  dead $wzr = SUBSWri %74:gpr32common, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
8032B	  Bcc 12, %bb.43, implicit $nzcv, debug-location !358; ep.c:225:5
8048B	  B %bb.42, debug-location !358; ep.c:225:5

8064B	bb.42.for.body122:
	; predecessors: %bb.41
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

8096B	  %181:gpr64common = LDRSWui %stack.19.i, 0, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
8104B	  %180:fpr64 = LDRDui %stack.13.gc, 0, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
8128B	  %184:fpr64 = LDRDroX %183:gpr64common, %181:gpr64common, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
8176B	  %186:gpr32common = nsw ADDWri %181.sub_32:gpr64common, 1, 0, debug-location !365; ep.c:225:26
8180B	  %185:fpr64 = FADDDrr %180:fpr64, %184:fpr64, debug-location !363; ep.c:226:17
8184B	  STRDui %185:fpr64, %stack.13.gc, 0, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
8192B	  STRWui %186:gpr32common, %stack.19.i, 0, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
8208B	  B %bb.41, debug-location !366; ep.c:225:5

8224B	bb.43.do.end130:
	; predecessors: %bb.41
	  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

8240B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !369; ep.c:231:5
8272B	  $w0 = COPY $wzr, debug-location !369; ep.c:231:5
8288B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !369; ep.c:231:5
8304B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !369; ep.c:231:5
8320B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !370; ep.c:232:10
8336B	  PCN_STACKMAP 25, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !370 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:10
8352B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !370; ep.c:232:10
8368B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !370; ep.c:232:10
8384B	  $w0 = COPY $wzr, debug-location !370; ep.c:232:10
8400B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !370; ep.c:232:10
8416B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !370; ep.c:232:10
8432B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !371; ep.c:232:8
8448B	  PCN_STACKMAP 26, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.16.sx_err, 0, 0, %stack.14.sx_verify_value, 0, 0, %stack.9.sy, 0, 0, %stack.17.sy_err, 0, 0, %stack.15.sy_verify_value, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !371 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:8
8464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !371; ep.c:232:8
8480B	  %77:fpr64 = COPY $d0, debug-location !370; ep.c:232:10
8496B	  STRDui %77:fpr64, %stack.10.tm, 0, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
8512B	  STRWui $wzr, %stack.24.nit, 0, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
8528B	  %78:gpr32 = MOVi32imm 1
8560B	  %79:gpr64 = MOVi64imm 4675776847449726827
8576B	  STRXui %79:gpr64, %stack.14.sx_verify_value, 0, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
8592B	  %80:gpr64 = MOVi64imm -4550329231111044107
8600B	  STRWui %78:gpr32, %stack.27.verified, 0, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
8608B	  STRXui %80:gpr64, %stack.15.sy_verify_value, 0, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
8624B	  CBZW %78:gpr32, %bb.45, debug-location !383; ep.c:268:9
8640B	  B %bb.44, debug-location !383; ep.c:268:9

8656B	bb.44.if.then133:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

8672B	  %81:fpr64 = LDRDui %stack.8.sx, 0, debug-location !384 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
8688B	  %82:fpr64 = LDRDui %stack.14.sx_verify_value, 0, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
8768B	  %86:fpr64 = LDRDui %stack.9.sy, 0, debug-location !392 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
8784B	  %87:fpr64 = LDRDui %stack.15.sy_verify_value, 0, debug-location !393 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
8788B	  %83:fpr64 = FSUBDrr %81:fpr64, %82:fpr64, debug-location !387; ep.c:269:27
8792B	  %84:fpr64 = FDIVDrr %83:fpr64, %82:fpr64, debug-location !389; ep.c:269:46
8864B	  %91:gpr64temp = ADRP target-flags(aarch64-page) %const.4
8868B	  %88:fpr64 = FSUBDrr %86:fpr64, %87:fpr64, debug-location !394; ep.c:270:27
8872B	  %89:fpr64 = FDIVDrr %88:fpr64, %87:fpr64, debug-location !396; ep.c:270:46
8880B	  %92:fpr64 = LDRDui %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
8884B	  %85:fpr64 = FABSDr %84:fpr64, debug-location !390; ep.c:269:18
8888B	  %90:fpr64 = FABSDr %89:fpr64, debug-location !397; ep.c:270:18
8896B	  STRDui %85:fpr64, %stack.16.sx_err, 0, debug-location !391 :: (store 8 into %ir.sx_err); ep.c:269:16
8904B	  STRDui %90:fpr64, %stack.17.sy_err, 0, debug-location !398 :: (store 8 into %ir.sy_err); ep.c:270:16
8912B	  FCMPDrr %85:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !400; ep.c:271:29
8920B	  %93:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
8928B	  FCMPDrr %90:fpr64, %92:fpr64, implicit-def $nzcv, debug-location !401; ep.c:271:41
8944B	  %94:gpr32 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
8960B	  %95:gpr32 = ANDWrr %93:gpr32, %94:gpr32, debug-location !401; ep.c:271:41
8976B	  STRWui %95:gpr32, %stack.27.verified, 0, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18

8992B	bb.45.if.end142:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

9008B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !404; ep.c:274:12
9024B	  %96:gpr64temp = ADRP target-flags(aarch64-page) %const.0
9056B	  %98:gpr64temp = ADRP target-flags(aarch64-page) %const.1
9064B	  %97:fpr64 = LDRDui %96:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
9072B	  %99:fpr64 = LDRDui %98:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
9088B	  $d0 = COPY %97:fpr64, debug-location !404; ep.c:274:12
9104B	  $d1 = COPY %99:fpr64, debug-location !404; ep.c:274:12
9120B	  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
9136B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !404; ep.c:274:12
9152B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !405; ep.c:274:30
9168B	  PCN_STACKMAP 27, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !405 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:274:30
9184B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !405; ep.c:274:30
9216B	  %101:fpr64 = LDRDui %stack.10.tm, 0, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
9248B	  %103:gpr64temp = ADRP target-flags(aarch64-page) %const.5
9264B	  %104:fpr64 = LDRDui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
9268B	  %100:fpr64 = COPY $d0, debug-location !404; ep.c:274:12
9272B	  %102:fpr64 = FDIVDrr %100:fpr64, %101:fpr64, debug-location !406; ep.c:274:28
9280B	  %105:fpr64 = FDIVDrr %102:fpr64, %104:fpr64, debug-location !407; ep.c:274:33
9296B	  STRDui %105:fpr64, %stack.1.Mops, 0, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
9312B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !409; ep.c:276:5
9344B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_5__EP_Benchm, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_5__EP_Benchm, debug-location !409; ep.c:276:5
9360B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !409; ep.c:276:5
9376B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !409; ep.c:276:5
9392B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !410; ep.c:277:35
9408B	  PCN_STACKMAP 28, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !410 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:277:35
9424B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !410; ep.c:277:35
9440B	  %108:fpr64 = LDRDui %stack.10.tm, 0, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
9456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !411; ep.c:277:5
9488B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_6_CPU_Time__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
9504B	  $d0 = COPY %108:fpr64, debug-location !411; ep.c:277:5
9520B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
9536B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !411; ep.c:277:5
9552B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !412; ep.c:278:5
9568B	  PCN_STACKMAP 29, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %108:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !412 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:278:5
9584B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:278:5
9600B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !412; ep.c:278:5
9648B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_7_N___2__5d_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
9664B	  $w1 = MOVi32imm 30, debug-location !412; ep.c:278:5
9680B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
9696B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !412; ep.c:278:5
9712B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !413; ep.c:279:46
9728B	  PCN_STACKMAP 30, 0, 0, %stack.1.Mops, 0, 0, %stack.13.gc, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !413 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:279:46
9744B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !413; ep.c:279:46
9760B	  %114:fpr64 = LDRDui %stack.13.gc, 0, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
9776B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !414; ep.c:279:5
9808B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_8_No__Gaussi, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
9824B	  $d0 = COPY %114:fpr64, debug-location !414; ep.c:279:5
9840B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
9856B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !414; ep.c:279:5
9872B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !415; ep.c:280:42
9888B	  PCN_STACKMAP 31, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.8.sx, 0, 0, %stack.9.sy, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %114:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !415 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:280:42
9904B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !415; ep.c:280:42
9920B	  %117:fpr64 = LDRDui %stack.8.sx, 0, debug-location !415 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
9936B	  %118:fpr64 = LDRDui %stack.9.sy, 0, debug-location !416 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
9952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !417; ep.c:280:5
9984B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_9_Sums____25, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
10000B	  $d0 = COPY %117:fpr64, debug-location !417; ep.c:280:5
10016B	  $d1 = COPY %118:fpr64, debug-location !417; ep.c:280:5
10032B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
10048B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !417; ep.c:280:5
10064B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !418; ep.c:281:5
10080B	  PCN_STACKMAP 32, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %117:fpr64, %118:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !418 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:281:5
10096B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !418; ep.c:281:5
10112B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !418; ep.c:281:5
10144B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_10_Counts____, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
10160B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !418; ep.c:281:5
10176B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !418; ep.c:281:5
10192B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !419; ep.c:282:12
10208B	  PCN_STACKMAP 33, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !419 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:282:12
10224B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !419; ep.c:282:12
10256B	  STRWui $wzr, %stack.19.i, 0, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
10272B	  %174:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q

10304B	bb.46.for.cond152:
	; predecessors: %bb.45, %bb.47
	  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

10320B	  %124:gpr32common = LDRWui %stack.19.i, 0, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
10336B	  dead $wzr = SUBSWri %124:gpr32common, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
10352B	  Bcc 12, %bb.48, implicit $nzcv, debug-location !425; ep.c:282:5
10368B	  B %bb.47, debug-location !425; ep.c:282:5

10384B	bb.47.for.body155:
	; predecessors: %bb.46
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

10400B	  %172:gpr64 = LDRSWui %stack.19.i, 0, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
10432B	  %175:fpr64 = LDRDroX %174:gpr64common, %172:gpr64, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
10448B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !430; ep.c:283:9
10464B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_11__3d_15_0lf, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
10480B	  $w1 = COPY %172.sub_32:gpr64, debug-location !430; ep.c:283:9
10496B	  $d0 = COPY %175:fpr64, debug-location !430; ep.c:283:9
10512B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
10528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !430; ep.c:283:9
10544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !431; ep.c:284:5
10560B	  PCN_STACKMAP 34, 0, 0, %stack.1.Mops, 0, 0, %stack.19.i, 0, 0, %stack.24.nit, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, 0, %stack.27.verified, 0, %172.sub_32:gpr64, %175:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !431 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:284:5
10576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !431; ep.c:284:5
10592B	  %178:gpr32common = LDRWui %stack.19.i, 0, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
10608B	  %179:gpr32common = nsw ADDWri %178:gpr32common, 1, 0, debug-location !432; ep.c:282:26
10624B	  STRWui %179:gpr32common, %stack.19.i, 0, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
10640B	  B %bb.46, debug-location !433; ep.c:282:5

10656B	bb.48.for.end161:
	; predecessors: %bb.46
	  successors: %bb.49(0x50000000), %bb.52(0x30000000); %bb.49(62.50%), %bb.52(37.50%)

10672B	  %126:gpr32 = LDRWui %stack.24.nit, 0, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
10688B	  %127:fpr64 = LDRDui %stack.10.tm, 0, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
10704B	  %128:fpr64 = LDRDui %stack.1.Mops, 0, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
10720B	  %129:gpr32 = LDRWui %stack.27.verified, 0, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
10736B	  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !440; ep.c:286:5
10752B	  %130:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_22_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
10800B	  %132:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_21__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
10832B	  %133:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_20__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
10864B	  %134:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_19__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
10896B	  %135:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_18__lm_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, debug-location !440; ep.c:286:5
10928B	  %136:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_17___CC__, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, debug-location !440; ep.c:286:5
10960B	  %137:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_16_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
10992B	  %138:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_15_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
11000B	  STRXui %130:gpr64, $sp, 10, debug-location !440 :: (store 8 into stack + 80); ep.c:286:5
11024B	  %139:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_14_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
11056B	  STRWui %129:gpr32, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
11060B	  STRXui %133:gpr64, $sp, 8, debug-location !440 :: (store 8 into stack + 64); ep.c:286:5
11064B	  STRXui %132:gpr64, $sp, 9, debug-location !440 :: (store 8 into stack + 72); ep.c:286:5
11072B	  %140:gpr64 = MOVaddr target-flags(aarch64-page) @ep__str_13_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
11076B	  STRXui %135:gpr64, $sp, 6, debug-location !440 :: (store 8 into stack + 48); ep.c:286:5
11080B	  STRXui %134:gpr64, $sp, 7, debug-location !440 :: (store 8 into stack + 56); ep.c:286:5
11168B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_12_EP_, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, debug-location !440; ep.c:286:5
11172B	  STRXui %137:gpr64, $sp, 4, debug-location !440 :: (store 8 into stack + 32); ep.c:286:5
11176B	  STRXui %136:gpr64, $sp, 5, debug-location !440 :: (store 8 into stack + 40); ep.c:286:5
11184B	  STRXui %139:gpr64, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
11192B	  STRXui %138:gpr64, $sp, 3, debug-location !440 :: (store 8 into stack + 24); ep.c:286:5
11200B	  $w1 = MOVi32imm 66, debug-location !440; ep.c:286:5
11208B	  $w2 = MOVi32imm 31, debug-location !440; ep.c:286:5
11216B	  STRXui %140:gpr64, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
11224B	  $w3 = COPY $wzr, debug-location !440; ep.c:286:5
11232B	  $w4 = COPY $wzr, debug-location !440; ep.c:286:5
11248B	  $w5 = COPY %126:gpr32, debug-location !440; ep.c:286:5
11264B	  $d0 = COPY %127:fpr64, debug-location !440; ep.c:286:5
11280B	  $d1 = COPY %128:fpr64, debug-location !440; ep.c:286:5
11296B	  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !440; ep.c:286:5
11312B	  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp, debug-location !440; ep.c:286:5
11328B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !441; ep.c:290:9
11344B	  PCN_STACKMAP 35, 0, 0, %stack.28.timers_enabled, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %126:gpr32, %127:fpr64, %128:fpr64, %129:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !441 :: (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:290:9
11360B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !441; ep.c:290:9
11376B	  %145:gpr32 = LDRWui %stack.28.timers_enabled, 0, debug-location !441 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
11392B	  CBZW %145:gpr32, %bb.52, debug-location !443; ep.c:290:9
11408B	  B %bb.49, debug-location !443; ep.c:290:9

11424B	bb.49.if.then163:
	; predecessors: %bb.48
	  successors: %bb.50(0x40000000), %bb.51(0x40000000); %bb.50(50.00%), %bb.51(50.00%)

11440B	  %146:fpr64 = LDRDui %stack.10.tm, 0, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
11456B	  FCMPDri %146:fpr64, implicit-def $nzcv, debug-location !448; ep.c:291:13
11472B	  Bcc 8, %bb.51, implicit $nzcv, debug-location !448; ep.c:291:13
11488B	  B %bb.50, debug-location !448; ep.c:291:13

11504B	bb.50.if.then166:
	; predecessors: %bb.49
	  successors: %bb.51(0x80000000); %bb.51(100.00%)

11520B	  %147:gpr64 = MOVi64imm 4607182418800017408
11536B	  STRXui %147:gpr64, %stack.10.tm, 0, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16

11552B	bb.51.if.end167:
	; predecessors: %bb.49, %bb.50
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

11568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !451; ep.c:293:14
11600B	  $w0 = COPY $wzr, debug-location !451; ep.c:293:14
11616B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !451; ep.c:293:14
11632B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !451; ep.c:293:14
11648B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !452; ep.c:293:12
11664B	  PCN_STACKMAP 36, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !452 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:293:12
11680B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !452; ep.c:293:12
11696B	  %149:fpr64 = COPY $d0, debug-location !451; ep.c:293:14
11728B	  %150:gpr64temp = ADRP target-flags(aarch64-page) %const.6
11744B	  %151:fpr64 = LDRDui %150:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
11776B	  %153:fpr64 = LDRDui %stack.10.tm, 0, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
11780B	  STRDui %149:fpr64, %stack.12.tt, 0, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
11784B	  %152:fpr64 = FMULDrr %149:fpr64, %151:fpr64, debug-location !455; ep.c:294:62
11792B	  %154:fpr64 = FDIVDrr %152:fpr64, %153:fpr64, debug-location !457; ep.c:294:70
11808B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !458; ep.c:294:9
11840B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_23__Total_tim, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
11856B	  $d0 = COPY %149:fpr64, debug-location !458; ep.c:294:9
11872B	  $d1 = COPY %154:fpr64, debug-location !458; ep.c:294:9
11888B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
11904B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !458; ep.c:294:9
11920B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !459; ep.c:295:14
11936B	  PCN_STACKMAP 37, 0, %154:fpr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %149:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !459 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:14
11952B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !459; ep.c:295:14
11968B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !459; ep.c:295:14
12000B	  $w0 = MOVi32imm 1, debug-location !459; ep.c:295:14
12016B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !459; ep.c:295:14
12032B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !459; ep.c:295:14
12048B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !460; ep.c:295:12
12064B	  PCN_STACKMAP 38, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !460 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:12
12080B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !460; ep.c:295:12
12096B	  %158:fpr64 = COPY $d0, debug-location !459; ep.c:295:14
12144B	  %160:fpr64 = LDRDui %stack.10.tm, 0, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
12148B	  STRDui %158:fpr64, %stack.12.tt, 0, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
12152B	  %159:fpr64 = FMULDrr %158:fpr64, %151:fpr64, debug-location !463; ep.c:296:60
12160B	  %161:fpr64 = FDIVDrr %159:fpr64, %160:fpr64, debug-location !465; ep.c:296:68
12176B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !466; ep.c:296:9
12208B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_24_Gaussian_p, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
12224B	  $d0 = COPY %158:fpr64, debug-location !466; ep.c:296:9
12240B	  $d1 = COPY %161:fpr64, debug-location !466; ep.c:296:9
12256B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
12272B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !466; ep.c:296:9
12288B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !467; ep.c:297:14
12304B	  PCN_STACKMAP 39, 0, %161:fpr64, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, %158:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !467 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:14
12320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !467; ep.c:297:14
12336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !467; ep.c:297:14
12368B	  $w0 = MOVi32imm 2, debug-location !467; ep.c:297:14
12384B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !467; ep.c:297:14
12400B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !467; ep.c:297:14
12416B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !468; ep.c:297:12
12432B	  PCN_STACKMAP 40, 0, 0, %stack.10.tm, 0, 0, %stack.12.tt, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !468 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:12
12448B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !468; ep.c:297:12
12464B	  %165:fpr64 = COPY $d0, debug-location !467; ep.c:297:14
12512B	  %167:fpr64 = LDRDui %stack.10.tm, 0, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
12516B	  STRDui %165:fpr64, %stack.12.tt, 0, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
12520B	  %166:fpr64 = FMULDrr %165:fpr64, %151:fpr64, debug-location !471; ep.c:298:60
12528B	  %168:fpr64 = FDIVDrr %166:fpr64, %167:fpr64, debug-location !473; ep.c:298:68
12544B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !474; ep.c:298:9
12576B	  $x0 = MOVaddr target-flags(aarch64-page) @ep__str_25_Random_num, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
12592B	  $d0 = COPY %165:fpr64, debug-location !474; ep.c:298:9
12608B	  $d1 = COPY %168:fpr64, debug-location !474; ep.c:298:9
12624B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
12640B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !474; ep.c:298:9
12656B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !475; ep.c:299:5
12672B	  PCN_STACKMAP 41, 0, %168:fpr64, %165:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !475; ep.c:299:5
12688B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !475; ep.c:299:5

12704B	bb.52.if.end180:
	; predecessors: %bb.48, %bb.51

12736B	  $w8 = COPY $wzr, debug-location !476; ep.c:301:5
12752B	  RET_ReallyLR implicit killed $w8, debug-location !476; ep.c:301:5

# End machine code for function main.

warning: ep.c:127:5: (x86_64-unknown-linux-gnu) Stack transformation: unhandled register X19 across call to vranlc
Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=8, align=8, at location [SP-88]
  fi#6: size=8, align=8, at location [SP-96]
  fi#7: size=8, align=8, at location [SP-104]
  fi#8: size=8, align=8, at location [SP-112]
  fi#9: size=8, align=8, at location [SP-120]
  fi#10: size=8, align=8, at location [SP-128]
  fi#11: size=8, align=8, at location [SP-136]
  fi#12: size=8, align=8, at location [SP-144]
  fi#13: size=8, align=8, at location [SP-152]
  fi#14: size=8, align=8, at location [SP-160]
  fi#15: size=8, align=8, at location [SP-168]
  fi#16: size=8, align=8, at location [SP-176]
  fi#17: size=8, align=8, at location [SP-184]
  fi#18: size=4, align=4, at location [SP-188]
  fi#19: size=4, align=4, at location [SP-192]
  fi#20: size=4, align=4, at location [SP-196]
  fi#21: size=4, align=4, at location [SP-200]
  fi#22: size=4, align=4, at location [SP-204]
  fi#23: size=4, align=4, at location [SP-208]
  fi#24: size=4, align=4, at location [SP-212]
  fi#25: size=4, align=4, at location [SP-216]
  fi#26: size=4, align=4, at location [SP-220]
  fi#27: size=4, align=4, at location [SP-224]
  fi#28: size=4, align=4, at location [SP-228]
  fi#29: size=24, align=16, at location [SP-256]
  fi#30: size=16, align=16, at location [SP-272]
  fi#31: size=8, align=8, at location [SP-280]
  fi#32: size=8, align=8, at location [SP-288]
  fi#33: size=8, align=8, at location [SP-296]
  fi#34: size=8, align=8, at location [SP-304]
  fi#35: size=8, align=8, at location [SP-312]
  fi#36: dead
  fi#37: dead
  fi#38: dead
  fi#39: dead
  fi#40: dead
  fi#41: dead
  fi#42: dead
  fi#43: dead
  fi#44: dead
  fi#45: dead
  fi#46: dead
  fi#47: dead
  fi#48: dead
  fi#49: dead
  fi#50: dead
  fi#51: dead
  fi#52: dead
  fi#53: dead
  fi#54: dead
  fi#55: dead
  fi#56: dead
  fi#57: dead
  fi#58: dead
  fi#59: size=8, align=8, at location [SP-40]
  fi#60: size=8, align=8, at location [SP-8]
  fi#61: size=8, align=8, at location [SP-16]
  fi#62: size=8, align=8, at location [SP-24]
  fi#63: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: 1.000000e-08, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
  cp#7: -2.000000e+00, align=8

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 400, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 46 :: (store 8 into %stack.63), (store 8 into %stack.62)
  frame-setup STPXi killed $fp, killed $lr, $sp, 48 :: (store 8 into %stack.61), (store 8 into %stack.60)
  $fp = frame-setup ADDXri $sp, 384, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w29, -16, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w19, -24, debug-location !93; ep.c:82:12
  frame-setup CFI_INSTRUCTION offset $w20, -32, debug-location !93; ep.c:82:12
  $x8 = ADRP target-flags(aarch64-page) @ep___const_main_dum_, debug-location !93; ep.c:82:12
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, 0, debug-location !93; ep.c:82:12
  renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  renamable $x8 = LDRXui killed renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  STURWi $wzr, $fp, -28 :: (store 4 into %ir.retval)
  STRQui killed renamable $q0, $sp, 9, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  STRXui killed renamable $x8, $sp, 20, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  $x0 = ADRP target-flags(aarch64-page) @ep__str_timer_flag, debug-location !106; ep.c:87:15
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, 0, debug-location !106; ep.c:87:15
  $x1 = ADRP target-flags(aarch64-page) @ep__str_1_r_, debug-location !106; ep.c:87:15
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, 0, debug-location !106; ep.c:87:15
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
  PCN_STACKMAP 0, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -240, 0, $fp, -264, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -204, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -256, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !108 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.31.fp), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:87:13
  STRXui renamable $x8, $sp, 15, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  CBNZX killed renamable $x8, %bb.2, debug-location !110; ep.c:87:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, $sp, 43, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x19 = LDRXui $sp, 15, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  $w8 = MOVZWi 1, 0
  STRWui killed renamable $w8, $sp, 43, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !117; ep.c:92:9
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !117; ep.c:92:9
  PCN_STACKMAP 1, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -204, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -256, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  PCN_STACKMAP 2, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -256, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -204, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -256, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !120 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:102:5
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = ADDXri $sp, 128, 0, debug-location !120; ep.c:102:5
  $x1 = ADRP target-flags(aarch64-page) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, 0, debug-location !120; ep.c:102:5
  BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
  PCN_STACKMAP 3, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -256, 1, 8, $fp, -272, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -204, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -256, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !121 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.26.j, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:103:7
  renamable $w8 = LDRSBWui $sp, 142, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  $w16 = MOVZWi 14, 0
  dead $wzr = SUBSWri killed renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  STRWui killed renamable $w16, $sp, 45, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9

bb.4.if.then6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $w8 = LDRWui $sp, 45, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  renamable $w8 = nsw SUBWri killed renamable $w8, 1, 0, debug-location !127; ep.c:105:10
  STRWui killed renamable $w8, $sp, 45, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

bb.5.if.end7:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x8 = LDRSWui $sp, 45, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  $x16 = ADDXri $sp, 128, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 0, debug-location !130; ep.c:106:12
  STRBBui $wzr, killed renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  $x0 = ADRP target-flags(aarch64-page) @ep__str_3____NAS_Par, debug-location !133; ep.c:107:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_3____NAS_Par, 0, debug-location !133; ep.c:107:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !133; ep.c:107:5
  PCN_STACKMAP 4, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -256, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !134 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:108:61
  $x0 = ADRP target-flags(aarch64-page) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, 0, debug-location !135; ep.c:108:5
  $x1 = ADDXri $sp, 128, 0, debug-location !135; ep.c:108:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
  PCN_STACKMAP 5, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -256, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -256, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !136 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.30.size, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.30.size, align 16), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:110:14
  STRWui $wzr, $sp, 44, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  $w8 = MOVZWi 16384, 0
  renamable $d0 = LDRDui $sp, 19, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  STURWi killed renamable $w8, $fp, -172, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  $x8 = ADDXri $sp, 144, 0
  renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24
  renamable $x20 = nuw ADDXri killed renamable $x8, 16, 0, debug-location !140; ep.c:127:33
  $x1 = ADDXri $sp, 144, 0, debug-location !141; ep.c:127:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
  $x2 = ORRXrs $xzr, $x20, 0, debug-location !141; ep.c:127:5
  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  PCN_STACKMAP 6, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -240, killed renamable $x20, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !142 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:128:22
  renamable $d0 = LDRDui $sp, 20, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  PCN_STACKMAP 7, 0, 0, $fp, -40, 0, $fp, -120, killed renamable $x19, 0, $fp, -240, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !145 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.29.dum, align 16), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:128:5
  STRDui killed renamable $d0, $sp, 18, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  STURWi $wzr, $fp, -176, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  $x8 = ADRP target-flags(aarch64-page) @x
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  $x16 = MOVZXi 40750, 0
  $x16 = MOVKXi $x16(tied-def 0), 41607, 16
  $x16 = MOVKXi $x16(tied-def 0), 17070, 32
  $x16 = MOVKXi $x16(tied-def 0), 54397, 48

bb.6.for.cond:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)
  liveins: $x8, $x16
  renamable $w17 = LDURWi $fp, -176, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  dead $wzr = SUBSWri killed renamable $w17, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x8, $x16
  renamable $x17 = LDURSWi $fp, -176, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit killed $x17, debug-location !158; ep.c:129:30
  STURWi killed renamable $w17, $fp, -176, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  B %bb.6

bb.8.for.end:
; predecessors: %bb.6
  successors: %bb.10(0x50000000), %bb.9(0x30000000); %bb.10(62.50%), %bb.9(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $d0 = FSQRTDr renamable $d1, debug-location !163; ep.c:132:16
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12

bb.9.call.sqrt:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $d1
  $q0 = ORRv16i8 $q1, $q1, debug-location !164; ep.c:132:12
  STRDui killed renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)

bb.10.for.end.split:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $d0, $d1
  PCN_STACKMAP 8, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, killed renamable $d1, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !164 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:132:12
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  PCN_STACKMAP 9, 0, 0, $fp, -40, 0, $fp, -120, 1, 8, $fp, -272, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !165 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:132:10
  STURDi killed renamable $d0, $fp, -40, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
  PCN_STACKMAP 10, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !167 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:135:5
  $w0 = MOVZWi 1, 0, debug-location !167; ep.c:135:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !167; ep.c:135:5
  PCN_STACKMAP 11, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !168 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:136:5
  $w0 = MOVZWi 2, 0, debug-location !168; ep.c:136:5
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !168; ep.c:136:5
  PCN_STACKMAP 12, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !169 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:137:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !169; ep.c:137:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !169; ep.c:137:5
  PCN_STACKMAP 13, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !170 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:139:5
  $x19 = MOVZXi 58688, 16
  $x19 = MOVKXi $x19(tied-def 0), 12444, 32
  $x19 = MOVKXi $x19(tied-def 0), 16850, 48
  STURXi renamable $x19, $fp, -48, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  $x1 = SUBXri $fp, 48, 0, debug-location !172; ep.c:142:5
  $x2 = ADRP target-flags(aarch64-page) @x, debug-location !172; ep.c:142:5
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !172; ep.c:142:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; ep.c:142:5
  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !172; ep.c:142:5
  PCN_STACKMAP 14, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !173 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:148:8
  STURXi killed renamable $x19, $fp, -48, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  STURWi $wzr, $fp, -176, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

bb.11.for.cond26:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  renamable $w8 = LDURWi $fp, -176, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  dead $wzr = SUBSWri killed renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5

bb.12.for.body29:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  renamable $d0 = LDURDi $fp, -48, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = SUBXri $fp, 48, 0, debug-location !183; ep.c:151:14
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
  PCN_STACKMAP 15, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !184 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:151:12
  renamable $w8 = LDURWi $fp, -176, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  STURDi killed renamable $d0, $fp, -56, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !185; ep.c:150:30
  STURWi killed renamable $w8, $fp, -176, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
  B %bb.11

bb.13.for.end33:
; predecessors: %bb.11
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  renamable $d0 = LDURDi $fp, -48, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  $x8 = MOVZXi 55040, 16
  $x8 = MOVKXi $x8(tied-def 0), 13252, 32
  $x8 = MOVKXi $x8(tied-def 0), 16816, 48
  STPXi $xzr, renamable $x8, $fp, -17, debug-location !192 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
  STPXi $xzr, $xzr, $fp, -13, debug-location !193 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
  STURWi $wzr, $fp, -176, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  STURDi killed renamable $d0, $fp, -120, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  $x8 = ADRP target-flags(aarch64-page) @q
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0

bb.14.for.cond34:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)
  liveins: $x8
  renamable $w16 = LDURWi $fp, -176, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  dead $wzr = SUBSWri killed renamable $w16, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
  Bcc 12, %bb.16, implicit $nzcv, debug-location !201; ep.c:160:5

bb.15.for.body37:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $x8
  renamable $x16 = LDURSWi $fp, -176, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit killed $x16, debug-location !206; ep.c:160:26
  STURWi killed renamable $w16, $fp, -176, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  B %bb.14

bb.16.for.end42:
; predecessors: %bb.14
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  $w8 = MOVNWi 0, 0
  $w17 = MOVZWi 1, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.3
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 11 :: (store 8 into %stack.35)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.2
  renamable $d2 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.7
  STRWui killed renamable $w8, $sp, 46, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  STRWui killed renamable $w17, $sp, 48, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  STPDi renamable $d0, renamable $d2, $sp, 12 :: (store 8 into %stack.34), (store 8 into %stack.33)
  $x19 = ADRP target-flags(aarch64-page) @x
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  $x20 = ADRP target-flags(aarch64-page) @q
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0

bb.17.for.cond43:
; predecessors: %bb.16, %bb.39
  successors: %bb.18(0x7c000000), %bb.40(0x04000000); %bb.18(96.88%), %bb.40(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 48, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  renamable $w16 = LDURWi $fp, -172, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !218; ep.c:172:5
  Bcc 12, %bb.40, implicit $nzcv, debug-location !218; ep.c:172:5

bb.18.for.body46:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 46, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  renamable $w16 = LDRWui $sp, 48, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  renamable $d0 = LDURDi $fp, -120, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  $x17 = MOVZXi 55040, 16, debug-location !224; ep.c:174:12
  $x17 = MOVKXi $x17(tied-def 0), 13252, 32, debug-location !224; ep.c:174:12
  $x17 = MOVKXi $x17(tied-def 0), 16816, 48, debug-location !224; ep.c:174:12
  STURXi killed renamable $x17, $fp, -48, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  $w8 = ADDWrs killed renamable $w8, killed renamable $w16, 0, debug-location !222; ep.c:173:23
  STURDi killed renamable $d0, $fp, -56, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  STURWi killed renamable $w8, $fp, -184, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  $w8 = MOVZWi 1, 0, debug-location !227; ep.c:179:16

bb.19.for.cond48:
; predecessors: %bb.18, %bb.23
  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)
  liveins: $x19, $x20, $w8
  STURWi renamable $w8, $fp, -176, debug-location !DILocation(line: 0, scope: !228) :: (store 4 into %ir.i); ep.c:0
  $w8 = ORRWrs $wzr, killed renamable $w8, 0, debug-location !230; ep.c:179:21
  dead $wzr = SUBSWri killed renamable $w8, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
  Bcc 12, %bb.24, implicit $nzcv, debug-location !233; ep.c:179:9

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.21(0x40000000), %bb.22(0x40000000); %bb.21(50.00%), %bb.22(50.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -184, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
  renamable $w16 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !236; ep.c:180:21
  renamable $w17 = SBFMWri renamable $w16, 1, 31, debug-location !236; ep.c:180:21
  renamable $w16 = ANDWri killed renamable $w16, 2014, debug-location !240; ep.c:181:20
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !243; ep.c:181:17
  STURWi killed renamable $w17, $fp, -180, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  Bcc 0, %bb.22, implicit $nzcv, debug-location !243; ep.c:181:17

bb.21.if.then54:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $x19, $x20
  renamable $d0 = LDURDi $fp, -56, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = SUBXri $fp, 48, 0, debug-location !245; ep.c:182:22
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
  PCN_STACKMAP 16, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !246 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:182:20
  STURDi killed renamable $d0, $fp, -64, debug-location !246 :: (store 8 into %ir.t3); ep.c:182:20

bb.22.if.end56:
; predecessors: %bb.20, %bb.21
  successors: %bb.24(0x04000000), %bb.23(0x7c000000); %bb.24(3.12%), %bb.23(96.88%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -180, debug-location !248 :: (dereferenceable load 4 from %ir.ik); ep.c:183:17
  CBZW killed renamable $w8, %bb.24, debug-location !251; ep.c:183:17

bb.23.if.end60:
; predecessors: %bb.22
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x20
  renamable $d0 = LDURDi $fp, -56, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = SUBXri $fp, 56, 0, debug-location !253; ep.c:185:18
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
  PCN_STACKMAP 17, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !254 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:185:16
  renamable $w8, renamable $w16 = LDPWi $fp, -45, debug-location !255 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
  STURDi killed renamable $d0, $fp, -64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  STURWi killed renamable $w8, $fp, -184, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !257; ep.c:179:32
  B %bb.19

bb.24.for.end64:
; predecessors: %bb.22, %bb.19
  successors: %bb.25(0x50000000), %bb.26(0x30000000); %bb.25(62.50%), %bb.26(37.50%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 43, debug-location !261 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
  CBZW killed renamable $w8, %bb.26, debug-location !263; ep.c:192:13

bb.25.if.then65:
; predecessors: %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 2, 0, debug-location !264; ep.c:193:13
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !264; ep.c:193:13
  PCN_STACKMAP 18, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !264 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:193:13

bb.26.if.end66:
; predecessors: %bb.24, %bb.25
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)
  liveins: $x19, $x20
  $x1 = SUBXri $fp, 48, 0, debug-location !265; ep.c:194:9
  $x2 = ADRP target-flags(aarch64-page) @x, debug-location !265; ep.c:194:9
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !265; ep.c:194:9
  $w0 = MOVZWi 2, 16, debug-location !265; ep.c:194:9
  $d0 = LDRDui $sp, 11 :: (load 8 from %stack.35)
  BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !265; ep.c:194:9
  PCN_STACKMAP 19, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !266 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:195:13
  renamable $w8 = LDRWui $sp, 43, debug-location !266 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
  CBZW killed renamable $w8, %bb.28, debug-location !268; ep.c:195:13

bb.27.if.then68:
; predecessors: %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 2, 0, debug-location !269; ep.c:196:13
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !269; ep.c:196:13
  PCN_STACKMAP 20, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !269 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:196:13

bb.28.if.end69:
; predecessors: %bb.26, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 43, debug-location !270 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
  CBZW killed renamable $w8, %bb.30, debug-location !272; ep.c:203:13

bb.29.if.then71:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 1, 0, debug-location !273; ep.c:204:13
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !273; ep.c:204:13
  PCN_STACKMAP 21, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !273 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:204:13

bb.30.if.end72:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x19, $x20
  STURWi $wzr, $fp, -176, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16
  renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)

bb.31.for.cond73:
; predecessors: %bb.30, %bb.36
  successors: %bb.32(0x7c000000), %bb.37(0x04000000); %bb.32(96.88%), %bb.37(3.12%)
  liveins: $d2, $x19, $x20
  renamable $w8 = LDURWi $fp, -176, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  dead $wzr = SUBSWri killed renamable $w8, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
  Bcc 10, %bb.37, implicit $nzcv, debug-location !280; ep.c:206:9

bb.32.for.body76:
; predecessors: %bb.31
  successors: %bb.33(0x40000000), %bb.36(0x40000000); %bb.33(50.00%), %bb.36(50.00%)
  liveins: $d2, $x19, $x20
  renamable $x8 = LDURSWi $fp, -176, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  renamable $x8 = ADDXrs renamable $x19, killed renamable $x8, 4, debug-location !284; ep.c:207:24
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !284 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
  renamable $d0 = FADDDrr killed renamable $d0, renamable $d0, debug-location !285; ep.c:207:22
  renamable $d1 = FADDDrr killed renamable $d1, renamable $d1, debug-location !292; ep.c:208:22
  renamable $d0 = FSUBDrr killed renamable $d0, renamable $d2, debug-location !286; ep.c:207:33
  renamable $d1 = FSUBDrr killed renamable $d1, renamable $d2, debug-location !293; ep.c:208:37
  STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !287 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !297; ep.c:209:21
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !300; ep.c:209:31
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !301; ep.c:209:26
  FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !306; ep.c:210:17
  STURDi killed renamable $d0, $fp, -48, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  Bcc 8, %bb.36, implicit $nzcv, debug-location !306; ep.c:210:17

bb.33.if.then92:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.34(0x30000000); %bb.35(62.50%), %bb.34(37.50%)
  liveins: $x19, $x20
  renamable $d0 = LDURDi $fp, -48, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !309; ep.c:211:34
  PCN_STACKMAP 22, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !310 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2), (load 8 from %stack.32); ep.c:211:32
  renamable $d1 = LDURDi $fp, -48, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  renamable $d2 = LDRDui $sp, 12 :: (load 8 from %stack.34)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2, debug-location !310; ep.c:211:32
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !312; ep.c:211:42
  renamable $d0 = FSQRTDr renamable $d1, debug-location !313; ep.c:211:22
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !314; ep.c:211:20
  Bcc 7, %bb.35, implicit $nzcv, debug-location !314; ep.c:211:20

bb.34.call.sqrt1:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)
  liveins: $d1, $x19, $x20
  $q0 = ORRv16i8 $q1, $q1, debug-location !314; ep.c:211:20
  STRDui killed renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !314; ep.c:211:20
  renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)

bb.35.if.then92.split:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $d0, $d1, $x19, $x20
  PCN_STACKMAP 23, 0, 0, $fp, -40, 0, $fp, -120, killed renamable $d1, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !314 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:211:20
  renamable $d2, renamable $d1 = LDPDi $fp, -11, debug-location !315 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !317; ep.c:212:26
  renamable $d2 = FMULDrr killed renamable $d2, renamable $d0, debug-location !321; ep.c:213:26
  renamable $d3 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
  renamable $d4 = FABSDr renamable $d2, debug-location !323; ep.c:214:21
  FCMPDrr killed renamable $d3, killed renamable $d4, implicit-def $nzcv, debug-location !323; ep.c:214:21
  STPDi renamable $d1, renamable $d0, $fp, -8, debug-location !314 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
  renamable $d0, renamable $d3 = LDPDi $fp, -13, debug-location !331 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
  renamable $d3 = FADDDrr killed renamable $d3, renamable $d1, debug-location !333; ep.c:216:25
  renamable $d1 = FCSELDrrr killed renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !323; ep.c:214:21
  renamable $d1 = FABSDr killed renamable $d1, debug-location !323; ep.c:214:21
  renamable $w8 = FCVTZSUWDr killed renamable $d1, implicit-def $x8, debug-location !323; ep.c:214:21
  STURWi renamable $w8, $fp, -188, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  renamable $x8 = SBFMXri killed renamable $x8, 61, 31, debug-location !326; ep.c:215:24
  renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  STURDi renamable $d2, $fp, -72, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d2, debug-location !337; ep.c:217:25
  STPDi renamable $d0, renamable $d3, $fp, -13, debug-location !334 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
  renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
  renamable $d1 = FADDDrr killed renamable $d1, renamable $d2, debug-location !327; ep.c:215:29
  STRDroX killed renamable $d1, renamable $x20, killed renamable $x8, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22

bb.36.for.inc110:
; predecessors: %bb.32, %bb.35
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $d2, $x19, $x20
  renamable $w8 = LDURWi $fp, -176, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !340; ep.c:206:30
  STURWi killed renamable $w8, $fp, -176, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
  B %bb.31

bb.37.for.end112:
; predecessors: %bb.31
  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 43, debug-location !344 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
  CBZW killed renamable $w8, %bb.39, debug-location !346; ep.c:221:13

bb.38.if.then114:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 1, 0, debug-location !347; ep.c:222:13
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !347; ep.c:222:13
  PCN_STACKMAP 24, 0, 0, $fp, -40, 0, $fp, -120, 0, $fp, -136, 0, $fp, -176, 0, $fp, -180, 0, $fp, -192, 0, $fp, -200, 0, $fp, -184, 0, $fp, -188, 0, $fp, -196, 0, $fp, -172, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -48, 0, $fp, -56, 0, $fp, -64, 0, $fp, -72, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 0, $fp, -80, 0, $fp, -88, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !347 :: (load 8 from %stack.1.Mops), (load 8 from %stack.11.an), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.20.ik, align 4), (load 8 from %stack.23.k, align 4), (load 8 from %stack.25.k_offset, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.22.l, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.18.np, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.2.t1), (load 8 from %stack.3.t2), (load 8 from %stack.4.t3), (load 8 from %stack.5.t4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.6.x1), (load 8 from %stack.7.x2); ep.c:222:13

bb.39.for.inc116:
; predecessors: %bb.37, %bb.38
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x19, $x20
  renamable $w8 = LDRWui $sp, 48, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !348; ep.c:172:27
  STRWui killed renamable $w8, $sp, 48, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
  B %bb.17

bb.40.for.end118:
; predecessors: %bb.17
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  STURWi $wzr, $fp, -176, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  $x8 = ADRP target-flags(aarch64-page) @q
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0

bb.41.for.cond119:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)
  liveins: $x8
  renamable $w16 = LDURWi $fp, -176, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  dead $wzr = SUBSWri killed renamable $w16, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
  Bcc 12, %bb.43, implicit $nzcv, debug-location !358; ep.c:225:5

bb.42.for.body122:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $x8
  renamable $x16 = LDURSWi $fp, -176, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  renamable $d0 = LDURDi $fp, -136, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  renamable $d1 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit killed $x16, debug-location !365; ep.c:225:26
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !363; ep.c:226:17
  STURDi killed renamable $d0, $fp, -136, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  STURWi killed renamable $w16, $fp, -176, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  B %bb.41

bb.43.do.end130:
; predecessors: %bb.41
  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !369; ep.c:231:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !369; ep.c:231:5
  PCN_STACKMAP 25, 0, 0, $fp, -40, 0, $fp, -136, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !370 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:10
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !370; ep.c:232:10
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !370; ep.c:232:10
  PCN_STACKMAP 26, 0, 0, $fp, -40, 0, $fp, -136, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -160, 0, $fp, -144, 0, $fp, -104, 0, $fp, -168, 0, $fp, -152, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !371 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.16.sx_err), (load 8 from %stack.14.sx_verify_value), (load 8 from %stack.9.sy), (load 8 from %stack.17.sy_err), (load 8 from %stack.15.sy_verify_value), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:232:8
  STURDi killed renamable $d0, $fp, -112, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  STRWui $wzr, $sp, 47, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  $w8 = MOVZWi 1, 0
  $x16 = MOVZXi 40811, 0
  $x16 = MOVKXi $x16(tied-def 0), 63804, 16
  $x16 = MOVKXi $x16(tied-def 0), 45636, 32
  $x16 = MOVKXi $x16(tied-def 0), 16611, 48
  STURXi killed renamable $x16, $fp, -144, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  $x16 = MOVZXi 50165, 0
  $x16 = MOVKXi $x16(tied-def 0), 18572, 16
  $x16 = MOVKXi $x16(tied-def 0), 64428, 32
  $x16 = MOVKXi $x16(tied-def 0), 49369, 48
  STRWui renamable $w8, $sp, 44, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  STURXi killed renamable $x16, $fp, -152, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  CBZW killed renamable $w8, %bb.45, debug-location !383; ep.c:268:9

bb.44.if.then133:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  renamable $d2, renamable $d0 = LDPDi $fp, -13, debug-location !384 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
  renamable $d3, renamable $d1 = LDPDi $fp, -19, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value), (dereferenceable load 8 from %ir.sy_verify_value); ep.c:269:29
  renamable $d0 = FSUBDrr killed renamable $d0, renamable $d1, debug-location !387; ep.c:269:27
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !389; ep.c:269:46
  renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  renamable $d1 = FSUBDrr killed renamable $d2, renamable $d3, debug-location !394; ep.c:270:27
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3, debug-location !396; ep.c:270:46
  renamable $d2 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  renamable $d0 = FABSDr killed renamable $d0, debug-location !390; ep.c:269:18
  renamable $d1 = FABSDr killed renamable $d1, debug-location !397; ep.c:270:18
  STPDi renamable $d1, renamable $d0, $fp, -21, debug-location !391 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
  FCMPDrr killed renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !400; ep.c:271:29
  renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
  FCMPDrr killed renamable $d1, killed renamable $d2, implicit-def $nzcv, debug-location !401; ep.c:271:41
  renamable $w16 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
  $w8 = ANDWrs killed renamable $w8, killed renamable $w16, 0, debug-location !401; ep.c:271:41
  STRWui killed renamable $w8, $sp, 44, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18

bb.45.if.end142:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
  PCN_STACKMAP 27, 0, 0, $fp, -40, 0, $fp, -136, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -104, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !405 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:274:30
  renamable $d1 = LDURDi $fp, -112, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  renamable $x8 = ADRP target-flags(aarch64-page) %const.5
  renamable $d2 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !406; ep.c:274:28
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d2, debug-location !407; ep.c:274:33
  STURDi killed renamable $d0, $fp, -40, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
  $x0 = ADRP target-flags(aarch64-page) @ep__str_5__EP_Benchm, debug-location !409; ep.c:276:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_5__EP_Benchm, 0, debug-location !409; ep.c:276:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !409; ep.c:276:5
  PCN_STACKMAP 28, 0, 0, $fp, -40, 0, $fp, -136, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -104, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !410 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:277:35
  renamable $d0 = LDURDi $fp, -112, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, 0, debug-location !411; ep.c:277:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
  PCN_STACKMAP 29, 0, 0, $fp, -40, 0, $fp, -136, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -104, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !412 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.32); ep.c:278:5
  $x0 = ADRP target-flags(aarch64-page) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, 0, debug-location !412; ep.c:278:5
  $w1 = MOVZWi 30, 0, debug-location !412; ep.c:278:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
  PCN_STACKMAP 30, 0, 0, $fp, -40, 0, $fp, -136, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -104, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !413 :: (load 8 from %stack.1.Mops), (load 8 from %stack.13.gc), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:279:46
  renamable $d0 = LDURDi $fp, -136, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, 0, debug-location !414; ep.c:279:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
  PCN_STACKMAP 31, 0, 0, $fp, -40, 0, $fp, -176, 0, $fp, -196, 0, $fp, -96, 0, $fp, -104, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !415 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.8.sx), (load 8 from %stack.9.sy), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.32); ep.c:280:42
  renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !415 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
  STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, 0, debug-location !417; ep.c:280:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
  PCN_STACKMAP 32, 0, 0, $fp, -40, 0, $fp, -176, 0, $fp, -196, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, 1, 8, $fp, -272, 1, 8, $fp, -280, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !418 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.32), (load 8 from %stack.33); ep.c:281:5
  $x0 = ADRP target-flags(aarch64-page) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_10_Counts____, 0, debug-location !418; ep.c:281:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !418; ep.c:281:5
  PCN_STACKMAP 33, 0, 0, $fp, -40, 0, $fp, -176, 0, $fp, -196, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !419 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4); ep.c:282:12
  STURWi $wzr, $fp, -176, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
  $x20 = ADRP target-flags(aarch64-page) @q
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0

bb.46.for.cond152:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -176, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  dead $wzr = SUBSWri killed renamable $w8, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
  Bcc 12, %bb.48, implicit $nzcv, debug-location !425; ep.c:282:5

bb.47.for.body155:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $x20
  renamable $x19 = LDURSWi $fp, -176, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  renamable $d0 = LDRDroX renamable $x20, renamable $x19, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, 0, debug-location !430; ep.c:283:9
  $w1 = ORRWrs $wzr, $w19, 0, debug-location !430; ep.c:283:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
  PCN_STACKMAP 34, 0, 0, $fp, -40, 0, $fp, -176, 0, $fp, -196, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, 0, $fp, -208, renamable $w19, 1, 8, $fp, -272, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, implicit killed $x19, debug-location !431 :: (load 8 from %stack.1.Mops), (load 8 from %stack.19.i, align 4), (load 8 from %stack.24.nit, align 4), (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.27.verified, align 4), (load 8 from %stack.32); ep.c:284:5
  renamable $w8 = LDURWi $fp, -176, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !432; ep.c:282:26
  STURWi killed renamable $w8, $fp, -176, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
  B %bb.46

bb.48.for.end161:
; predecessors: %bb.46
  successors: %bb.49(0x50000000), %bb.52(0x30000000); %bb.49(62.50%), %bb.52(37.50%)

  renamable $w19 = LDRWui $sp, 47, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  renamable $d0 = LDURDi $fp, -112, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  renamable $d1 = LDURDi $fp, -40, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
  renamable $w20 = LDRWui $sp, 44, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  $x8 = ADRP target-flags(aarch64-page) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, 0, debug-location !440; ep.c:286:5
  $x16 = ADRP target-flags(aarch64-page) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, 0, debug-location !440; ep.c:286:5
  $x17 = ADRP target-flags(aarch64-page) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, 0, debug-location !440; ep.c:286:5
  $x18 = ADRP target-flags(aarch64-page) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, 0, debug-location !440; ep.c:286:5
  $x0 = ADRP target-flags(aarch64-page) @ep__str_18__lm_, debug-location !440; ep.c:286:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, 0, debug-location !440; ep.c:286:5
  $x1 = ADRP target-flags(aarch64-page) @ep__str_17___CC__, debug-location !440; ep.c:286:5
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, 0, debug-location !440; ep.c:286:5
  $x2 = ADRP target-flags(aarch64-page) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, 0, debug-location !440; ep.c:286:5
  $x3 = ADRP target-flags(aarch64-page) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, 0, debug-location !440; ep.c:286:5
  STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !440 :: (store 8 into stack + 80), (store 8 into stack + 72); ep.c:286:5
  $x8 = ADRP target-flags(aarch64-page) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, 0, debug-location !440; ep.c:286:5
  STRWui renamable $w20, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
  STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !440 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
  $x16 = ADRP target-flags(aarch64-page) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, 0, debug-location !440; ep.c:286:5
  STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !440 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
  $x0 = ADRP target-flags(aarch64-page) @ep__str_12_EP_, debug-location !440; ep.c:286:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, 0, debug-location !440; ep.c:286:5
  STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !440 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
  STRXui killed renamable $x8, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
  $w1 = MOVZWi 66, 0, debug-location !440; ep.c:286:5
  $w2 = MOVZWi 31, 0, debug-location !440; ep.c:286:5
  STRXui killed renamable $x16, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
  $w3 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
  $w4 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
  $w5 = ORRWrs $wzr, $w19, 0, debug-location !440; ep.c:286:5
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !440; ep.c:286:5
  PCN_STACKMAP 35, 0, 0, $fp, -212, 0, $fp, -112, 0, $fp, -128, killed renamable $w19, 1, 8, $fp, -272, 1, 8, $fp, -280, killed renamable $w20, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !441 :: (load 8 from %stack.28.timers_enabled, align 4), (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.32), (load 8 from %stack.33); ep.c:290:9
  renamable $w8 = LDRWui $sp, 43, debug-location !441 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
  CBZW killed renamable $w8, %bb.52, debug-location !443; ep.c:290:9

bb.49.if.then163:
; predecessors: %bb.48
  successors: %bb.50(0x40000000), %bb.51(0x40000000); %bb.50(50.00%), %bb.51(50.00%)

  renamable $d0 = LDURDi $fp, -112, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  FCMPDri killed renamable $d0, implicit-def $nzcv, debug-location !448; ep.c:291:13
  Bcc 8, %bb.51, implicit $nzcv, debug-location !448; ep.c:291:13

bb.50.if.then166:
; predecessors: %bb.49
  successors: %bb.51(0x80000000); %bb.51(100.00%)

  $x8 = MOVZXi 16368, 48
  STURXi killed renamable $x8, $fp, -112, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16

bb.51.if.end167:
; predecessors: %bb.49, %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !451; ep.c:293:14
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !451; ep.c:293:14
  PCN_STACKMAP 36, 0, 0, $fp, -112, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !452 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:293:12
  STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.33)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.6
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  renamable $d2 = LDURDi $fp, -112, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  STURDi renamable $d0, $fp, -128, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !455; ep.c:294:62
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !457; ep.c:294:70
  STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.34)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, 0, debug-location !458; ep.c:294:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
  PCN_STACKMAP 37, 0, 1, 8, $fp, -288, 0, $fp, -112, 0, $fp, -128, 1, 8, $fp, -280, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !459 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.33), (load 8 from %stack.34); ep.c:295:14
  $w0 = MOVZWi 1, 0, debug-location !459; ep.c:295:14
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !459; ep.c:295:14
  PCN_STACKMAP 38, 0, 0, $fp, -112, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !460 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:295:12
  renamable $d2 = LDURDi $fp, -112, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  STURDi renamable $d0, $fp, -128, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
  renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !463; ep.c:296:60
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !465; ep.c:296:68
  STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.33), (store 8 into %stack.34)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, 0, debug-location !466; ep.c:296:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
  PCN_STACKMAP 39, 0, 1, 8, $fp, -288, 0, $fp, -112, 0, $fp, -128, 1, 8, $fp, -280, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !467 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt), (load 8 from %stack.33), (load 8 from %stack.34); ep.c:297:14
  $w0 = MOVZWi 2, 0, debug-location !467; ep.c:297:14
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !467; ep.c:297:14
  PCN_STACKMAP 40, 0, 0, $fp, -112, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !468 :: (load 8 from %stack.10.tm), (load 8 from %stack.12.tt); ep.c:297:12
  renamable $d2 = LDURDi $fp, -112, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  STURDi renamable $d0, $fp, -128, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
  renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !471; ep.c:298:60
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !473; ep.c:298:68
  STPDi renamable $d0, renamable $d1, $sp, 13 :: (store 8 into %stack.33), (store 8 into %stack.32)
  $x0 = ADRP target-flags(aarch64-page) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, 0, debug-location !474; ep.c:298:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
  PCN_STACKMAP 41, 0, 1, 8, $fp, -272, 1, 8, $fp, -280, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !475 :: (load 8 from %stack.33), (load 8 from %stack.32); ep.c:299:5

bb.52.if.end180:
; predecessors: %bb.48, %bb.51

  $w8 = ORRWrs $wzr, $wzr, 0, debug-location !476; ep.c:301:5
  $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !476 :: (load 8 from %stack.61), (load 8 from %stack.60); ep.c:301:5
  $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !476 :: (load 8 from %stack.63), (load 8 from %stack.62); ep.c:301:5
  $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !476; ep.c:301:5
  RET undef $lr, implicit $w8, debug-location !476; ep.c:301:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: $x8 = ADRP target-flags(aarch64-page) @ep___const_main_dum_, debug-location !93; ep.c:82:12
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @ep___const_main_dum_, debug-location !93; ep.c:82:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, 0, debug-location !93; ep.c:82:12
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$q0
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = LDRXui renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$x8
SU(4):   STURWi $wzr, $fp, -28 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   STRQui renamable $q0, $sp, 9, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$q0
SU(6):   STRXui renamable $x8, $sp, 20, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$x8
SU(7):   $x0 = ADRP target-flags(aarch64-page) @ep__str_timer_flag, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, 0, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x1 = ADRP target-flags(aarch64-page) @ep__str_1_r_, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
SU(10):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, 0, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @ep___const_main_dum_, debug-location !93; ep.c:82:12
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 4 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, 0, debug-location !93; ep.c:82:12
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 4 7 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 9 4 7 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = LDRXui renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 9 4 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @ep__str_timer_flag, debug-location !106; ep.c:87:15
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 9 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADRP target-flags(aarch64-page) @ep__str_1_r_, debug-location !106; ep.c:87:15
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 8 4 10 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, 0, debug-location !106; ep.c:87:15
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 10 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, 0, debug-location !106; ep.c:87:15
  Ready @7c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STURWi $wzr, $fp, -28 :: (store 4 into %ir.retval)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRQui renamable $q0, $sp, 9, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  Ready @9c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRXui renamable $x8, $sp, 20, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @ep___const_main_dum_, debug-location !93; ep.c:82:12
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep___const_main_dum_, 0, debug-location !93; ep.c:82:12
SU(2):   renamable $q0 = LDRQui renamable $x8, 0, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)`); ep.c:82:12
SU(3):   renamable $x8 = LDRXui renamable $x8, 2, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @ep___const_main_dum_ to i8*)` + 16, align 16); ep.c:82:12
SU(7):   $x0 = ADRP target-flags(aarch64-page) @ep__str_timer_flag, debug-location !106; ep.c:87:15
SU(9):   $x1 = ADRP target-flags(aarch64-page) @ep__str_1_r_, debug-location !106; ep.c:87:15
SU(8):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_timer_flag, 0, debug-location !106; ep.c:87:15
SU(10):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_1_r_, 0, debug-location !106; ep.c:87:15
SU(4):   STURWi $wzr, $fp, -28 :: (store 4 into %ir.retval)
SU(5):   STRQui renamable $q0, $sp, 9, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
SU(6):   STRXui renamable $x8, $sp, 20, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 46 :: (store 8 into %stack.63), (store 8 into %stack.62)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.63), (store 8 into %stack.62)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.61), (store 8 into %stack.60)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 384, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.63), (store 8 into %stack.62)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.61), (store 8 into %stack.60)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 384, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.63), (store 8 into %stack.62)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.61), (store 8 into %stack.60)
SU(2):   $fp = frame-setup ADDXri $sp, 384, 0

Fixup kills for %bb.0
Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 if.else
  From: renamable $x19 = LDRXui $sp, 15, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !117; ep.c:92:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 15, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$x19
SU(1):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 43, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
SU(3):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 15, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 43, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ORRXrs $xzr, $x19, 0, debug-location !117; ep.c:92:9
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x19 = LDRXui $sp, 15, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
SU(1):   $w8 = MOVZWi 1, 0
SU(2):   STRWui renamable $w8, $sp, 43, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
SU(3):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !117; ep.c:92:9

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $w8 = LDRSBWui $sp, 142, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
    To: Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRSBWui $sp, 142, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   $w16 = MOVZWi 14, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(2):   dead $wzr = SUBSWri renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STRWui renamable $w16, $sp, 45, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
ExitSU:   Bcc 1, %bb.5, implicit $nzcv, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRSBWui $sp, 142, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w16 = MOVZWi 14, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w16, $sp, 45, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $w8 = LDRSBWui $sp, 142, debug-location !124 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:9
SU(1):   $w16 = MOVZWi 14, 0
SU(3):   STRWui renamable $w16, $sp, 45, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
SU(2):   dead $wzr = SUBSWri renamable $w8, 46, 0, implicit-def $nzcv, debug-location !126; ep.c:104:9

********** MI Scheduling **********
main:%bb.3 if.end
  From: STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
    To: BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADDXri $sp, 128, 0, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, 0, debug-location !120; ep.c:102:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @sprintf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !120; ep.c:102:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADDXri $sp, 128, 0, debug-location !120; ep.c:102:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, 0, debug-location !120; ep.c:102:5
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(2):   $x1 = ADRP target-flags(aarch64-page) @ep__str_2__15_0lf_, debug-location !120; ep.c:102:5
SU(1):   $x0 = ADDXri $sp, 128, 0, debug-location !120; ep.c:102:5
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_2__15_0lf_, 0, debug-location !120; ep.c:102:5
SU(0):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.0
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x16
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !119; ep.c:102:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then6
  From: renamable $w8 = LDRWui $sp, 45, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 45, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !127; ep.c:105:10
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 45, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 45, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !127; ep.c:105:10
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 45, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8 = LDRWui $sp, 45, debug-location !127 :: (dereferenceable load 4 from %ir.j); ep.c:105:10
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !127; ep.c:105:10
SU(2):   STRWui renamable $w8, $sp, 45, debug-location !127 :: (store 4 into %ir.j); ep.c:105:10

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 if.end7
  From: STRDui killed renamable $d0, $sp, 18, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 18, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi $wzr, $fp, -176, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x8 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x16 = MOVZXi 40750, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   $x16 = MOVKXi $x16(tied-def 0), 41607, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
SU(6):   $x16 = MOVKXi $x16(tied-def 0), 17070, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
SU(7):   $x16 = MOVKXi $x16(tied-def 0), 54397, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x16 = MOVZXi 40750, 0
  Ready @0c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x16 = MOVKXi $x16(tied-def 0), 41607, 16
  Ready @1c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @x
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = MOVKXi $x16(tied-def 0), 17070, 32
  Ready @3c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x16 = MOVKXi $x16(tied-def 0), 54397, 48
  Ready @5c
  TopQ.A TopLatency SU(7) 3c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 18, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi $wzr, $fp, -176, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(4):   $x16 = MOVZXi 40750, 0
SU(5):   $x16 = MOVKXi $x16(tied-def 0), 41607, 16
SU(2):   $x8 = ADRP target-flags(aarch64-page) @x
SU(6):   $x16 = MOVKXi $x16(tied-def 0), 17070, 32
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(7):   $x16 = MOVKXi $x16(tied-def 0), 54397, 48
SU(0):   STRDui renamable $d0, $sp, 18, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
SU(1):   STURWi $wzr, $fp, -176, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12

********** MI Scheduling **********
main:%bb.5 if.end7
  From: renamable $d0 = LDRDui $sp, 20, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 20, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !144; ep.c:128:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 20, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $d0 = LDRDui $sp, 20, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
SU(2):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !144; ep.c:128:14
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

********** MI Scheduling **********
main:%bb.5 if.end7
  From: STRWui $wzr, $sp, 44, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
    To: BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !141; ep.c:127:5
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 44, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 16384, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(2):   renamable $d0 = LDRDui $sp, 19, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d0
SU(3):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(4):   STURWi renamable $w8, $fp, -172, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Anti Latency=0
SU(5):   $x8 = ADDXri $sp, 144, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$x8
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
SU(7):   renamable $x20 = nuw ADDXri renamable $x8, 16, 0, debug-location !140; ep.c:127:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Data Latency=1 Reg=$x20
SU(8):   $x1 = ADDXri $sp, 144, 0, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x2 = ORRXrs $xzr, $x20, 0, debug-location !141; ep.c:127:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !141; ep.c:127:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 16384, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 2 8 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui $sp, 19, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  Ready @1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 9 4 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) STURWi renamable $w8, $fp, -172, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 9 8 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x8 = ADDXri $sp, 144, 0
  Ready @3c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 9 8 7 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x20 = nuw ADDXri renamable $x8, 16, 0, debug-location !140; ep.c:127:33
  Ready @4c
  TopQ.A TopLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 8 6 10 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADDXri $sp, 144, 0, debug-location !141; ep.c:127:5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 3 6 10 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
  Ready @6c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 3 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x2 = ORRXrs $xzr, $x20, 0, debug-location !141; ep.c:127:5
  Ready @7c
  TopQ.A TopLatency SU(10) 3c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 
  TopQ.A RemainingLatency 0 + 8c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui $wzr, $sp, 44, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 4
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @9c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(1):   $w8 = MOVZWi 16384, 0
SU(2):   renamable $d0 = LDRDui $sp, 19, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
SU(4):   STURWi renamable $w8, $fp, -172, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
SU(5):   $x8 = ADDXri $sp, 144, 0
SU(7):   renamable $x20 = nuw ADDXri renamable $x8, 16, 0, debug-location !140; ep.c:127:33
SU(8):   $x1 = ADDXri $sp, 144, 0, debug-location !141; ep.c:127:5
SU(9):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !141; ep.c:127:5
SU(10):   $x2 = ORRXrs $xzr, $x20, 0, debug-location !141; ep.c:127:5
SU(0):   STRWui $wzr, $sp, 44, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
SU(3):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
SU(6):   renamable $x19 = ORRXri renamable $x8, 8000, debug-location !139; ep.c:127:24

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $x0 = ADRP target-flags(aarch64-page) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, 0, debug-location !135; ep.c:108:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADDXri $sp, 128, 0, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def dead $w8, debug-location !135; ep.c:108:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, 0, debug-location !135; ep.c:108:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x1 = ADDXri $sp, 128, 0, debug-location !135; ep.c:108:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ep__str_4___Number_o, debug-location !135; ep.c:108:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_4___Number_o, 0, debug-location !135; ep.c:108:5
SU(2):   $x1 = ADDXri $sp, 128, 0, debug-location !135; ep.c:108:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: renamable $x8 = LDRSWui $sp, 45, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !133; ep.c:107:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 45, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   $x16 = ADDXri $sp, 128, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=$x16
SU(2):   $x8 = ADDXrs renamable $x8, renamable $x16, 0, debug-location !130; ep.c:106:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   STRBBui $wzr, renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
SU(4):   $x0 = ADRP target-flags(aarch64-page) @ep__str_3____NAS_Par, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_3____NAS_Par, 0, debug-location !133; ep.c:107:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !133; ep.c:107:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 45, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x16 = ADDXri $sp, 128, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @ep__str_3____NAS_Par, debug-location !133; ep.c:107:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_3____NAS_Par, 0, debug-location !133; ep.c:107:5
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x8 = ADDXrs renamable $x8, renamable $x16, 0, debug-location !130; ep.c:106:12
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRBBui $wzr, renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x8 = LDRSWui $sp, 45, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
SU(1):   $x16 = ADDXri $sp, 128, 0
SU(4):   $x0 = ADRP target-flags(aarch64-page) @ep__str_3____NAS_Par, debug-location !133; ep.c:107:5
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_3____NAS_Par, 0, debug-location !133; ep.c:107:5
SU(2):   $x8 = ADDXrs renamable $x8, renamable $x16, 0, debug-location !130; ep.c:106:12
SU(3):   STRBBui $wzr, renamable $x8, 1, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 for.cond
  From: renamable $w17 = LDURWi $fp, -176, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
    To: Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDURWi $fp, -176, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w17
SU(1):   dead $wzr = SUBSWri renamable $w17, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.8, implicit $nzcv, debug-location !153; ep.c:129:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w17 = LDURWi $fp, -176, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w17, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $w17 = LDURWi $fp, -176, debug-location !150 :: (dereferenceable load 4 from %ir.i); ep.c:129:17
SU(1):   dead $wzr = SUBSWri renamable $w17, 32, 12, implicit-def $nzcv, debug-location !153; ep.c:129:5

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.body
  From: renamable $x17 = LDURSWi $fp, -176, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
    To: B %bb.6
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURSWi $fp, -176, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w17
    SU(2): Data Latency=0 Reg=$x17
    SU(1): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !158; ep.c:129:30
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
    SU(0): Data Latency=0 Reg=$x17
  Successors:
    SU(3): Data Latency=1 Reg=$w17
SU(3):   STURWi renamable $w17, $fp, -176, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w17
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.6
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x17 = LDURSWi $fp, -176, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !158; ep.c:129:30
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w17, $fp, -176, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x17 = LDURSWi $fp, -176, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
SU(1):   STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
SU(2):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !158; ep.c:129:30
SU(3):   STURWi renamable $w17, $fp, -176, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 for.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.2
    To: Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$d1
SU(2):   renamable $d0 = FSQRTDr renamable $d1, debug-location !163; ep.c:132:16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(3): Data Latency=1 Reg=$d0
SU(3):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.10, implicit $nzcv, debug-location !164; ep.c:132:12
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FSQRTDr renamable $d1, debug-location !163; ep.c:132:16
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(2):   renamable $d0 = FSQRTDr renamable $d1, debug-location !163; ep.c:132:16
SU(3):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !164; ep.c:132:12

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 call.sqrt
  From: $q0 = ORRv16i8 $q1, $q1, debug-location !164; ep.c:132:12
    To: BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !164; ep.c:132:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $q0 = ORRv16i8 $q1, $q1, debug-location !164; ep.c:132:12
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !164; ep.c:132:12
SU(1):   STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 for.end.split
  From: STURXi killed renamable $x19, $fp, -48, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURXi renamable $x19, $fp, -48, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi $wzr, $fp, -176, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi renamable $x19, $fp, -48, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi $wzr, $fp, -176, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   STURXi renamable $x19, $fp, -48, debug-location !173 :: (store 8 into %ir.t1); ep.c:148:8
SU(1):   STURWi $wzr, $fp, -176, debug-location !174 :: (store 4 into %ir.i); ep.c:150:12

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: $x19 = MOVZXi 58688, 16
    To: BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !172; ep.c:142:5
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   $x19 = MOVZXi 58688, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x19
SU(1):   $x19 = MOVKXi $x19(tied-def 0), 12444, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x19
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x19
SU(2):   $x19 = MOVKXi $x19(tied-def 0), 16850, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x19
  Successors:
    SU(3): Data Latency=1 Reg=$x19
SU(3):   STURXi renamable $x19, $fp, -48, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$x19
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(6):   $x1 = SUBXri $fp, 48, 0, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x2
SU(8):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !172; ep.c:142:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !172; ep.c:142:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 6 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  Ready @0c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 6 7 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 6 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x19 = MOVZXi 58688, 16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 9 6 1 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x19 = MOVKXi $x19(tied-def 0), 12444, 32
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 9 6 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x2 = ADRP target-flags(aarch64-page) @x, debug-location !172; ep.c:142:5
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 9 6 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x19 = MOVKXi $x19(tied-def 0), 16850, 48
  Ready @5c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 6 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x1 = SUBXri $fp, 48, 0, debug-location !172; ep.c:142:5
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !172; ep.c:142:5
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; ep.c:142:5
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURXi renamable $x19, $fp, -48, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8
  Ready @9c
  TopQ.A TopLatency SU(3) 3c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
SU(5):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(0):   $x19 = MOVZXi 58688, 16
SU(1):   $x19 = MOVKXi $x19(tied-def 0), 12444, 32
SU(7):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !172; ep.c:142:5
SU(2):   $x19 = MOVKXi $x19(tied-def 0), 16850, 48
SU(6):   $x1 = SUBXri $fp, 48, 0, debug-location !172; ep.c:142:5
SU(8):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !172; ep.c:142:5
SU(9):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; ep.c:142:5
SU(3):   STURXi renamable $x19, $fp, -48, debug-location !171 :: (store 8 into %ir.t1); ep.c:141:8

********** MI Scheduling **********
main:%bb.10 for.end.split
  From: STURDi killed renamable $d0, $fp, -40, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -40, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !166; ep.c:134:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURDi renamable $d0, $fp, -40, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !166; ep.c:134:5
SU(0):   STURDi renamable $d0, $fp, -40, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 for.cond26
  From: renamable $w8 = LDURWi $fp, -176, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
    To: Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv, debug-location !180; ep.c:150:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -176, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !177 :: (dereferenceable load 4 from %ir.i); ep.c:150:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 16, 0, implicit-def $nzcv, debug-location !180; ep.c:150:5

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 for.body29
  From: renamable $w8 = LDURWi $fp, -176, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
    To: B %bb.11
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(1):   STURDi renamable $d0, $fp, -56, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !185; ep.c:150:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   STURWi renamable $w8, $fp, -176, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -176, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -56, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !185; ep.c:150:30
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w8, $fp, -176, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !185 :: (dereferenceable load 4 from %ir.i); ep.c:150:30
SU(1):   STURDi renamable $d0, $fp, -56, debug-location !184 :: (store 8 into %ir.t2); ep.c:151:12
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !185; ep.c:150:30
SU(3):   STURWi renamable $w8, $fp, -176, debug-location !185 :: (store 4 into %ir.i); ep.c:150:30

********** MI Scheduling **********
main:%bb.12 for.body29
  From: renamable $d0 = LDURDi $fp, -48, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -48, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = SUBXri $fp, 48, 0, debug-location !183; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !183; ep.c:151:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -48, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = SUBXri $fp, 48, 0, debug-location !183; ep.c:151:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $d0 = LDURDi $fp, -48, debug-location !181 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
SU(2):   $x0 = SUBXri $fp, 48, 0, debug-location !183; ep.c:151:14
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.end33
  From: renamable $d0 = LDURDi $fp, -48, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
    To: End RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -48, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=$d0
SU(1):   $x8 = MOVZXi 55040, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   $x8 = MOVKXi $x8(tied-def 0), 13252, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   $x8 = MOVKXi $x8(tied-def 0), 16816, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   STPXi $xzr, renamable $x8, $fp, -17, debug-location !192 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Anti Latency=0
SU(5):   STPXi $xzr, $xzr, $fp, -13, debug-location !193 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   STURWi $wzr, $fp, -176, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   STURDi renamable $d0, $fp, -120, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(8):   $x8 = ADRP target-flags(aarch64-page) @q
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x8
SU(9):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = MOVZXi 55040, 16
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -48, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 2 6 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = MOVKXi $x8(tied-def 0), 13252, 32
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 6 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x8 = MOVKXi $x8(tied-def 0), 16816, 48
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) STPXi $xzr, renamable $x8, $fp, -17, debug-location !192 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 8 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x8 = ADRP target-flags(aarch64-page) @q
  Ready @5c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 7 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @6c
  TopQ.A TopLatency SU(9) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STPXi $xzr, $xzr, $fp, -13, debug-location !193 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STURWi $wzr, $fp, -176, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURDi renamable $d0, $fp, -120, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(1):   $x8 = MOVZXi 55040, 16
SU(0):   renamable $d0 = LDURDi $fp, -48, debug-location !189 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
SU(2):   $x8 = MOVKXi $x8(tied-def 0), 13252, 32
SU(3):   $x8 = MOVKXi $x8(tied-def 0), 16816, 48
SU(4):   STPXi $xzr, renamable $x8, $fp, -17, debug-location !192 :: (store 8 into %ir.gc), (store 8 into %ir.tt); ep.c:156:8
SU(8):   $x8 = ADRP target-flags(aarch64-page) @q
SU(9):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(5):   STPXi $xzr, $xzr, $fp, -13, debug-location !193 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:157:8
SU(6):   STURWi $wzr, $fp, -176, debug-location !195 :: (store 4 into %ir.i); ep.c:160:12
SU(7):   STURDi renamable $d0, $fp, -120, debug-location !190 :: (store 8 into %ir.an); ep.c:154:8

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.cond34
  From: renamable $w16 = LDURWi $fp, -176, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
    To: Bcc 12, %bb.16, implicit $nzcv, debug-location !201; ep.c:160:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -176, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.16, implicit $nzcv, debug-location !201; ep.c:160:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -176, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w16 = LDURWi $fp, -176, debug-location !198 :: (dereferenceable load 4 from %ir.i); ep.c:160:17
SU(1):   dead $wzr = SUBSWri renamable $w16, 9, 0, implicit-def $nzcv, debug-location !201; ep.c:160:5

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.body37
  From: renamable $x16 = LDURSWi $fp, -176, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
    To: B %bb.14
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDURSWi $fp, -176, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
    SU(2): Data Latency=0 Reg=$x16
    SU(1): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !206; ep.c:160:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
    SU(0): Data Latency=0 Reg=$x16
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(3):   STURWi renamable $w16, $fp, -176, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x16 = LDURSWi $fp, -176, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !206; ep.c:160:26
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w16, $fp, -176, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $x16 = LDURSWi $fp, -176, debug-location !202 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
SU(1):   STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !205 :: (store 8 into %ir.arrayidx39); ep.c:161:14
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !206; ep.c:160:26
SU(3):   STURWi renamable $w16, $fp, -176, debug-location !206 :: (store 4 into %ir.i); ep.c:160:26

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.end42
  From: $w8 = MOVNWi 0, 0
    To: End RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVNWi 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=$w8
SU(1):   $w17 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=$w17
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(10): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(5): Anti Latency=0
SU(4):   STRDui renamable $d0, $sp, 11 :: (store 8 into %stack.35)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(10): Anti Latency=0
SU(5):   renamable $x16 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
SU(6):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Data Latency=4 Reg=$d2
    SU(7): Anti Latency=0
SU(7):   renamable $x16 = ADRP target-flags(aarch64-page) %const.7
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(10): Data Latency=1 Reg=$x16
SU(8):   STRWui renamable $w8, $sp, 46, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(9):   STRWui renamable $w17, $sp, 48, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w17
SU(10):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=$x16
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(11): Data Latency=4 Reg=$d0
SU(11):   STPDi renamable $d0, renamable $d2, $sp, 12 :: (store 8 into %stack.34), (store 8 into %stack.33)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
SU(12):   $x19 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x19
SU(13):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   $x20 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x20
SU(15):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 12 14 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) %const.3
  Ready @0c
  TopQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 14 12 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
  Cand SU(3) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 1 14 12 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x16 = ADRP target-flags(aarch64-page) %const.2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 1 14 12 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A TopLatency SU(6) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 1 14 12 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x16 = ADRP target-flags(aarch64-page) %const.7
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 14 12 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) STRDui renamable $d0, $sp, 11 :: (store 8 into %stack.35)
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 14 12 10 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
  Cand SU(10) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  Ready @6c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 0 1 14 12 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) $x19 = ADRP target-flags(aarch64-page) @x
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 0 1 14 13 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x20 = ADRP target-flags(aarch64-page) @q
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 0 1 13 15 
  TopQ.A RemainingLatency 0 + 9c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVNWi 0, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 1 13 8 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 9
  Cand SU(15) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w17 = MOVZWi 1, 0
  Ready @10c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 11 13 8 9 
  TopQ.A RemainingLatency 0 + 11c > CritPath 9
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @11c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 11 9 8 
  TopQ.A RemainingLatency 0 + 12c > CritPath 9
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @12c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 11 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 9
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STRWui renamable $w8, $sp, 46, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 14c > CritPath 9
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRWui renamable $w17, $sp, 48, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STPDi renamable $d0, renamable $d2, $sp, 12 :: (store 8 into %stack.34), (store 8 into %stack.33)
  Ready @15c
  TopQ.A TopLatency SU(11) 9c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) %const.3
SU(3):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(5):   renamable $x16 = ADRP target-flags(aarch64-page) %const.2
SU(6):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(7):   renamable $x16 = ADRP target-flags(aarch64-page) %const.7
SU(4):   STRDui renamable $d0, $sp, 11 :: (store 8 into %stack.35)
SU(10):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
SU(12):   $x19 = ADRP target-flags(aarch64-page) @x
SU(14):   $x20 = ADRP target-flags(aarch64-page) @q
SU(0):   $w8 = MOVNWi 0, 0
SU(1):   $w17 = MOVZWi 1, 0
SU(13):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(15):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(8):   STRWui renamable $w8, $sp, 46, debug-location !210 :: (store 4 into %ir.k_offset); ep.c:170:14
SU(9):   STRWui renamable $w17, $sp, 48, debug-location !211 :: (store 4 into %ir.k); ep.c:172:12
SU(11):   STPDi renamable $d0, renamable $d2, $sp, 12 :: (store 8 into %stack.34), (store 8 into %stack.33)

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.cond43
  From: renamable $w8 = LDRWui $sp, 48, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
    To: Bcc 12, %bb.40, implicit $nzcv, debug-location !218; ep.c:172:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 48, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDURWi $fp, -172, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !218; ep.c:172:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.40, implicit $nzcv, debug-location !218; ep.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 48, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -172, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !218; ep.c:172:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w8 = LDRWui $sp, 48, debug-location !214 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
SU(1):   renamable $w16 = LDURWi $fp, -172, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:22
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !218; ep.c:172:5

Fixup kills for %bb.17
********** MI Scheduling **********
main:%bb.18 for.body46
  From: renamable $w8 = LDRWui $sp, 46, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 46, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui $sp, 48, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Data Latency=4 Reg=$w16
SU(2):   renamable $d0 = LDURDi $fp, -120, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=$d0
SU(3):   $x17 = MOVZXi 55040, 16, debug-location !224; ep.c:174:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
SU(4):   $x17 = MOVKXi $x17(tied-def 0), 13252, 32, debug-location !224; ep.c:174:12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   $x17 = MOVKXi $x17(tied-def 0), 16816, 48, debug-location !224; ep.c:174:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    SU(6): Data Latency=1 Reg=$x17
SU(6):   STURXi renamable $x17, $fp, -48, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$x17
SU(7):   $w8 = ADDWrs renamable $w8, renamable $w16, 0, debug-location !222; ep.c:173:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$w8
SU(8):   STURDi renamable $d0, $fp, -56, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(9):   STURWi renamable $w8, $fp, -184, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
  Successors:
    SU(10): Anti Latency=0
SU(10):   $w8 = MOVZWi 1, 0, debug-location !227; ep.c:179:16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui $sp, 46, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w16 = LDRWui $sp, 48, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
  Ready @1c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDURDi $fp, -120, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 8 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x17 = MOVZXi 55040, 16, debug-location !224; ep.c:174:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 8 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x17 = MOVKXi $x17(tied-def 0), 13252, 32, debug-location !224; ep.c:174:12
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w8 = ADDWrs renamable $w8, renamable $w16, 0, debug-location !222; ep.c:173:23
  Ready @5c
  TopQ.A TopLatency SU(7) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x17 = MOVKXi $x17(tied-def 0), 16816, 48, debug-location !224; ep.c:174:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) STURWi renamable $w8, $fp, -184, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
  Ready @7c
  TopQ.A TopLatency SU(9) 5c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $w8 = MOVZWi 1, 0, debug-location !227; ep.c:179:16
  Ready @8c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STURXi renamable $x17, $fp, -48, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STURDi renamable $d0, $fp, -56, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $w8 = LDRWui $sp, 46, debug-location !219 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
SU(1):   renamable $w16 = LDRWui $sp, 48, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:25
SU(2):   renamable $d0 = LDURDi $fp, -120, debug-location !225 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
SU(3):   $x17 = MOVZXi 55040, 16, debug-location !224; ep.c:174:12
SU(4):   $x17 = MOVKXi $x17(tied-def 0), 13252, 32, debug-location !224; ep.c:174:12
SU(7):   $w8 = ADDWrs renamable $w8, renamable $w16, 0, debug-location !222; ep.c:173:23
SU(5):   $x17 = MOVKXi $x17(tied-def 0), 16816, 48, debug-location !224; ep.c:174:12
SU(9):   STURWi renamable $w8, $fp, -184, debug-location !223 :: (store 4 into %ir.kk); ep.c:173:12
SU(10):   $w8 = MOVZWi 1, 0, debug-location !227; ep.c:179:16
SU(6):   STURXi renamable $x17, $fp, -48, debug-location !224 :: (store 8 into %ir.t1); ep.c:174:12
SU(8):   STURDi renamable $d0, $fp, -56, debug-location !226 :: (store 8 into %ir.t2); ep.c:175:12

Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond48
  From: STURWi renamable $w8, $fp, -176, debug-location !DILocation(line: 0, scope: !228) :: (store 4 into %ir.i); ep.c:0
    To: Bcc 12, %bb.24, implicit $nzcv, debug-location !233; ep.c:179:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -176, debug-location !DILocation(line: 0, scope: !228) :: (store 4 into %ir.i); ep.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !230; ep.c:179:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.24, implicit $nzcv, debug-location !233; ep.c:179:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -176, debug-location !DILocation(line: 0, scope: !228) :: (store 4 into %ir.i); ep.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !230; ep.c:179:21
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   STURWi renamable $w8, $fp, -176, debug-location !DILocation(line: 0, scope: !228) :: (store 4 into %ir.i); ep.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !230; ep.c:179:21
SU(2):   dead $wzr = SUBSWri renamable $w8, 100, 0, implicit-def $nzcv, debug-location !233; ep.c:179:9

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body51
  From: renamable $w8 = LDURWi $fp, -184, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
    To: Bcc 0, %bb.22, implicit $nzcv, debug-location !243; ep.c:181:17
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -184, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(5): Out  Latency=1
    SU(2): Data Latency=1 Reg=$nzcv
SU(2):   renamable $w16 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !236; ep.c:180:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$nzcv
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w16
    SU(3): Data Latency=1 Reg=$w16
    SU(5): Anti Latency=0
SU(3):   renamable $w17 = SBFMWri renamable $w16, 1, 31, debug-location !236; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
  Successors:
    SU(6): Data Latency=1 Reg=$w17
    SU(4): Anti Latency=0
SU(4):   renamable $w16 = ANDWri renamable $w16, 2014, debug-location !240; ep.c:181:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w16
  Successors:
    SU(5): Data Latency=1 Reg=$w16
SU(5):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !243; ep.c:181:17
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   STURWi renamable $w17, $fp, -180, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w17
ExitSU:   Bcc 0, %bb.22, implicit $nzcv, debug-location !243; ep.c:181:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -184, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !236; ep.c:180:21
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17 = SBFMWri renamable $w16, 1, 31, debug-location !236; ep.c:180:21
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w16 = ANDWri renamable $w16, 2014, debug-location !240; ep.c:181:20
  Ready @7c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !243; ep.c:181:17
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURWi renamable $w17, $fp, -180, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w8 = LDURWi $fp, -184, debug-location !234 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
SU(1):   dead $wzr = SUBSWri renamable $w8, 0, 0, implicit-def $nzcv, debug-location !236; ep.c:180:21
SU(2):   renamable $w16 = CSINCWr renamable $w8, renamable $w8, 10, implicit $nzcv, debug-location !236; ep.c:180:21
SU(3):   renamable $w17 = SBFMWri renamable $w16, 1, 31, debug-location !236; ep.c:180:21
SU(4):   renamable $w16 = ANDWri renamable $w16, 2014, debug-location !240; ep.c:181:20
SU(5):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !243; ep.c:181:17
SU(6):   STURWi renamable $w17, $fp, -180, debug-location !237 :: (store 4 into %ir.ik); ep.c:180:16

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 if.then54
  From: renamable $d0 = LDURDi $fp, -56, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -56, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = SUBXri $fp, 48, 0, debug-location !245; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !245; ep.c:182:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -56, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = SUBXri $fp, 48, 0, debug-location !245; ep.c:182:22
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $d0 = LDURDi $fp, -56, debug-location !244 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
SU(2):   $x0 = SUBXri $fp, 48, 0, debug-location !245; ep.c:182:22
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.21
Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 if.end60
  From: renamable $w8, renamable $w16 = LDPWi $fp, -45, debug-location !255 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
    To: B %bb.19
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w16 = LDPWi $fp, -45, debug-location !255 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(3): Data Latency=4 Reg=$w16
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURWi renamable $w8, $fp, -184, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0, debug-location !257; ep.c:179:32
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8, renamable $w16 = LDPWi $fp, -45, debug-location !255 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -184, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w16, 1, 0, debug-location !257; ep.c:179:32
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $w8, renamable $w16 = LDPWi $fp, -45, debug-location !255 :: (dereferenceable load 4 from %ir.ik), (dereferenceable load 4 from %ir.i); ep.c:186:18
SU(1):   STURDi renamable $d0, $fp, -64, debug-location !254 :: (store 8 into %ir.t3); ep.c:185:16
SU(2):   STURWi renamable $w8, $fp, -184, debug-location !256 :: (store 4 into %ir.kk); ep.c:186:16
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0, debug-location !257; ep.c:179:32

********** MI Scheduling **********
main:%bb.23 if.end60
  From: renamable $d0 = LDURDi $fp, -56, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -56, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = SUBXri $fp, 56, 0, debug-location !253; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !253; ep.c:185:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -56, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = SUBXri $fp, 56, 0, debug-location !253; ep.c:185:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $d0 = LDURDi $fp, -56, debug-location !252 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
SU(2):   $x0 = SUBXri $fp, 56, 0, debug-location !253; ep.c:185:18
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.23
Fixup kills for %bb.24
Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.end66
  From: $x1 = SUBXri $fp, 48, 0, debug-location !265; ep.c:194:9
    To: BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !265; ep.c:194:9
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $x1 = SUBXri $fp, 48, 0, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x2
SU(2):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !265; ep.c:194:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w0 = MOVZWi 2, 16, debug-location !265; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = LDRDui $sp, 11 :: (load 8 from %stack.35)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @vranlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $d0, implicit $x2, implicit-def $sp, debug-location !265; ep.c:194:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $d0 = LDRDui $sp, 11 :: (load 8 from %stack.35)
  Ready @0c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x2 = ADRP target-flags(aarch64-page) @x, debug-location !265; ep.c:194:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x1 = SUBXri $fp, 48, 0, debug-location !265; ep.c:194:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !265; ep.c:194:9
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = MOVZWi 2, 16, debug-location !265; ep.c:194:9
  Ready @4c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(4):   $d0 = LDRDui $sp, 11 :: (load 8 from %stack.35)
SU(1):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !265; ep.c:194:9
SU(0):   $x1 = SUBXri $fp, 48, 0, debug-location !265; ep.c:194:9
SU(2):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !265; ep.c:194:9
SU(3):   $w0 = MOVZWi 2, 16, debug-location !265; ep.c:194:9

Fixup kills for %bb.26
Fixup kills for %bb.27
Fixup kills for %bb.28
Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 if.end72
  From: STURWi $wzr, $fp, -176, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -176, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
  Ready @0c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -176, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(1):   renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
SU(0):   STURWi $wzr, $fp, -176, debug-location !274 :: (store 4 into %ir.i); ep.c:206:16

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 for.cond73
  From: renamable $w8 = LDURWi $fp, -176, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
    To: Bcc 10, %bb.37, implicit $nzcv, debug-location !280; ep.c:206:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.37, implicit $nzcv, debug-location !280; ep.c:206:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -176, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !277 :: (dereferenceable load 4 from %ir.i); ep.c:206:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 16, 12, implicit-def $nzcv, debug-location !280; ep.c:206:9

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.body76
  From: renamable $x8 = LDURSWi $fp, -176, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
    To: Bcc 8, %bb.36, implicit $nzcv, debug-location !306; ep.c:210:17
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -176, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = ADDXrs renamable $x19, renamable $x8, 4, debug-location !284; ep.c:207:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !284 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
SU(3):   renamable $d0 = FADDDrr renamable $d0, renamable $d0, debug-location !285; ep.c:207:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
SU(4):   renamable $d1 = FADDDrr renamable $d1, renamable $d1, debug-location !292; ep.c:208:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !286; ep.c:207:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(7): Data Latency=1 Reg=$d0
SU(6):   renamable $d1 = FSUBDrr renamable $d1, renamable $d2, debug-location !293; ep.c:208:37
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
    SU(7): Data Latency=1 Reg=$d1
SU(7):   STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !287 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(5): Data Latency=1 Reg=$d0
  Successors:
    SU(9): Anti Latency=0
    SU(8): Anti Latency=0
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !297; ep.c:209:21
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
SU(9):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !300; ep.c:209:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
  Successors:
    SU(10): Data Latency=1 Reg=$d1
SU(10):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !301; ep.c:209:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
  Successors:
    SU(12): Data Latency=1 Reg=$d0
    SU(11): Data Latency=1 Reg=$d0
SU(11):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !306; ep.c:210:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   STURDi renamable $d0, $fp, -48, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
ExitSU:   Bcc 8, %bb.36, implicit $nzcv, debug-location !306; ep.c:210:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -176, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = ADDXrs renamable $x19, renamable $x8, 4, debug-location !284; ep.c:207:24
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !284 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 9c > CritPath 14
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $d0 = FADDDrr renamable $d0, renamable $d0, debug-location !285; ep.c:207:22
  Ready @9c
  TopQ.A TopLatency SU(3) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 10c > CritPath 14
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = FADDDrr renamable $d1, renamable $d1, debug-location !292; ep.c:208:22
  Ready @10c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 14
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !286; ep.c:207:33
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FSUBDrr renamable $d1, renamable $d2, debug-location !293; ep.c:208:37
  Ready @12c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !287 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
  Ready @13c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 14c > CritPath 14
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !297; ep.c:209:21
  Ready @14c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !300; ep.c:209:31
  Ready @15c
  TopQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !301; ep.c:209:26
  Ready @16c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 17c > CritPath 14
  Cand SU(12) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !306; ep.c:210:17
  Ready @17c
  TopQ.A TopLatency SU(11) 13c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STURDi renamable $d0, $fp, -48, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x8 = LDURSWi $fp, -176, debug-location !281 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
SU(1):   renamable $x8 = ADDXrs renamable $x19, renamable $x8, 4, debug-location !284; ep.c:207:24
SU(2):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 0, debug-location !284 :: (load 8 from %ir.arrayidx79), (load 8 from %ir.arrayidx84); ep.c:207:24
SU(3):   renamable $d0 = FADDDrr renamable $d0, renamable $d0, debug-location !285; ep.c:207:22
SU(4):   renamable $d1 = FADDDrr renamable $d1, renamable $d1, debug-location !292; ep.c:208:22
SU(5):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !286; ep.c:207:33
SU(6):   renamable $d1 = FSUBDrr renamable $d1, renamable $d2, debug-location !293; ep.c:208:37
SU(7):   STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !287 :: (store 8 into %ir.x1), (store 8 into %ir.x2); ep.c:207:16
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !297; ep.c:209:21
SU(9):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !300; ep.c:209:31
SU(10):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !301; ep.c:209:26
SU(11):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !306; ep.c:210:17
SU(12):   STURDi renamable $d0, $fp, -48, debug-location !302 :: (store 8 into %ir.t1); ep.c:209:16

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 if.then92
  From: renamable $d1 = LDURDi $fp, -48, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
    To: Bcc 7, %bb.35, implicit $nzcv, debug-location !314; ep.c:211:20
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -48, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui $sp, 12 :: (load 8 from %stack.34)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$d2
SU(2):   renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !310; ep.c:211:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !312; ep.c:211:42
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(4): Data Latency=1 Reg=$d1
    SU(4): Anti Latency=0
SU(4):   renamable $d0 = FSQRTDr renamable $d1, debug-location !313; ep.c:211:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
SU(5):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !314; ep.c:211:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.35, implicit $nzcv, debug-location !314; ep.c:211:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui $sp, 12 :: (load 8 from %stack.34)
  Ready @0c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDURDi $fp, -48, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !310; ep.c:211:32
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !312; ep.c:211:42
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = FSQRTDr renamable $d1, debug-location !313; ep.c:211:22
  Ready @6c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !314; ep.c:211:20
  Ready @7c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(1):   renamable $d2 = LDRDui $sp, 12 :: (load 8 from %stack.34)
SU(0):   renamable $d1 = LDURDi $fp, -48, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:44
SU(2):   renamable $d0 = FMULDrr renamable $d0, renamable $d2, debug-location !310; ep.c:211:32
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !312; ep.c:211:42
SU(4):   renamable $d0 = FSQRTDr renamable $d1, debug-location !313; ep.c:211:22
SU(5):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !314; ep.c:211:20

********** MI Scheduling **********
main:%bb.33 if.then92
  From: renamable $d0 = LDURDi $fp, -48, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
    To: BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !309; ep.c:211:34
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -48, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
ExitSU:   BL @log, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !309; ep.c:211:34
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -48, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $d0 = LDURDi $fp, -48, debug-location !307 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 call.sqrt1
  From: $q0 = ORRv16i8 $q1, $q1, debug-location !314; ep.c:211:20
    To: BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !314; ep.c:211:20
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !314; ep.c:211:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !314; ep.c:211:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $q0 = ORRv16i8 $q1, $q1, debug-location !314; ep.c:211:20
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !314; ep.c:211:20
SU(1):   STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.34
********** MI Scheduling **********
main:%bb.35 if.then92.split
  From: renamable $d2, renamable $d1 = LDPDi $fp, -11, debug-location !315 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
    To: End RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2, renamable $d1 = LDPDi $fp, -11, debug-location !315 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d2
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !317; ep.c:212:26
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
    SU(8): Data Latency=1 Reg=$d1
    SU(6): Data Latency=1 Reg=$d1
    SU(3): Data Latency=1 Reg=$d1
    SU(7): Anti Latency=0
SU(2):   renamable $d2 = FMULDrr renamable $d2, renamable $d0, debug-location !321; ep.c:213:26
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    SU(18): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d2
    SU(15): Data Latency=1 Reg=$d2
    SU(9): Data Latency=1 Reg=$d2
    SU(4): Data Latency=1 Reg=$d2
    SU(7): Anti Latency=0
SU(3):   renamable $d3 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d3
    SU(9): Anti Latency=0
SU(4):   renamable $d4 = FABSDr renamable $d2, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(5): Data Latency=1 Reg=$d4
    SU(18): Anti Latency=0
SU(5):   FCMPDrr renamable $d3, renamable $d4, implicit-def $nzcv, debug-location !323; ep.c:214:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=$d4
    SU(3): Data Latency=1 Reg=$d3
  Successors:
    SU(9): Data Latency=1 Reg=$nzcv
    SU(7): Anti Latency=0
SU(6):   STPDi renamable $d1, renamable $d0, $fp, -8, debug-location !314 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Anti Latency=0
    SU(7): Anti Latency=0
SU(7):   renamable $d0, renamable $d3 = LDPDi $fp, -13, debug-location !331 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(2): Anti Latency=0
    SU(1): Anti Latency=0
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d0
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d3
    SU(17): Ord  Latency=0 Memory
SU(8):   renamable $d3 = FADDDrr renamable $d3, renamable $d1, debug-location !333; ep.c:216:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d3
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(17): Data Latency=1 Reg=$d3
    SU(9): Anti Latency=0
SU(9):   renamable $d1 = FCSELDrrr renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !323; ep.c:214:21
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(8): Anti Latency=0
    SU(6): Anti Latency=0
    SU(5): Data Latency=1 Reg=$nzcv
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=$d2
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d1
    SU(18): Anti Latency=0
SU(10):   renamable $d1 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
  Successors:
    SU(14): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d1
SU(11):   renamable $w8 = FCVTZSUWDr renamable $d1, implicit-def $x8, debug-location !323; ep.c:214:21
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=$d1
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w8
    SU(13): Data Latency=1 Reg=$x8
    SU(14): Anti Latency=0
SU(12):   STURWi renamable $w8, $fp, -188, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(11): Data Latency=1 Reg=$w8
  Successors:
    SU(13): Anti Latency=0
SU(13):   renamable $x8 = SBFMXri renamable $x8, 61, 31, debug-location !326; ep.c:215:24
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
  Successors:
    SU(20): Data Latency=1 Reg=$x8
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=$x8
    SU(11): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$d1
    SU(20): Ord  Latency=0 Memory
SU(15):   STURDi renamable $d2, $fp, -72, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(18): Anti Latency=0
SU(16):   renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !337; ep.c:217:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$d2
  Successors:
    SU(17): Data Latency=1 Reg=$d0
    SU(18): Anti Latency=0
SU(17):   STPDi renamable $d0, renamable $d3, $fp, -13, debug-location !334 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$d0
    SU(8): Data Latency=1 Reg=$d3
    SU(7): Ord  Latency=0 Memory
SU(18):   renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(16): Anti Latency=0
    SU(15): Anti Latency=0
    SU(9): Anti Latency=0
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(19): Data Latency=4 Reg=$d2
SU(19):   renamable $d1 = FADDDrr renamable $d1, renamable $d2, debug-location !327; ep.c:215:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 1
  Predecessors:
    SU(14): Data Latency=4 Reg=$d1
    SU(14): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d2
  Successors:
    SU(20): Data Latency=1 Reg=$d1
SU(20):   STRDroX renamable $d1, renamable $x20, renamable $x8, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$d1
    SU(14): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 19
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d2, renamable $d1 = LDPDi $fp, -11, debug-location !315 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
  Ready @0c
  TopQ.A BotLatency SU(0) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 19
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !317; ep.c:212:26
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 6 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 19
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = FMULDrr renamable $d2, renamable $d0, debug-location !321; ep.c:213:26
  Ready @5c
  TopQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 15 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 19
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 15 
  TopQ.A RemainingLatency 0 + 7c > CritPath 19
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d4 = FABSDr renamable $d2, debug-location !323; ep.c:214:21
  Ready @7c
  TopQ.A BotLatency SU(4) 14c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 19
  Cand SU(15) ORDER                              
  Cand SU(6) TOP-PATH                  13 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) FCMPDrr renamable $d3, renamable $d4, implicit-def $nzcv, debug-location !323; ep.c:214:21
  Ready @8c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 19
  Cand SU(15) ORDER                              
  Cand SU(6) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STPDi renamable $d1, renamable $d0, $fp, -8, debug-location !314 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
  Ready @9c
  TopQ.A BotLatency SU(6) 13c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 19
  Cand SU(15) ORDER                              
  Cand SU(7) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0, renamable $d3 = LDPDi $fp, -13, debug-location !331 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
  Ready @10c
  TopQ.A BotLatency SU(7) 13c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 8 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STURDi renamable $d2, $fp, -72, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 14 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 16 8 
  TopQ.A RemainingLatency 0 + 14c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(8) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d3 = FADDDrr renamable $d3, renamable $d1, debug-location !333; ep.c:216:25
  Ready @14c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 9 
  TopQ.A RemainingLatency 0 + 15c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(9) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d1 = FCSELDrrr renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !323; ep.c:214:21
  Ready @15c
  TopQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 10 
  TopQ.A RemainingLatency 0 + 16c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d1 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
  Ready @16c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 11 
  TopQ.A RemainingLatency 0 + 17c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(11) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $w8 = FCVTZSUWDr renamable $d1, implicit-def $x8, debug-location !323; ep.c:214:21
  Ready @17c
  TopQ.A TopLatency SU(11) 12c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 12 
  TopQ.A RemainingLatency 0 + 18c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(12) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) STURWi renamable $w8, $fp, -188, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
  Ready @18c
  TopQ.A TopLatency SU(12) 13c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 14
  Executed: 19c
  Critical: 14c, 14 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 13 
  TopQ.A RemainingLatency 0 + 19c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(13) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x8 = SBFMXri renamable $x8, 61, 31, debug-location !326; ep.c:215:24
  Ready @19c
  TopQ.A BotLatency SU(13) 6c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 15
  Executed: 20c
  Critical: 15c, 15 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 14 
  TopQ.A RemainingLatency 0 + 20c > CritPath 19
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
  Ready @20c
  TopQ.A TopLatency SU(14) 14c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 16
  Executed: 21c
  Critical: 16c, 16 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !337; ep.c:217:25
  Ready @21c
  TopQ.A BotLatency SU(16) 5c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 17
  Executed: 22c
  Critical: 17c, 17 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 18 
  TopQ.A RemainingLatency 0 + 22c > CritPath 19
  Cand SU(17) ORDER                              
  Cand SU(18) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
  Ready @22c
  TopQ.A BotLatency SU(18) 5c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 18
  Executed: 23c
  Critical: 18c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) STPDi renamable $d0, renamable $d3, $fp, -13, debug-location !334 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 19
  Executed: 24c
  Critical: 19c, 19 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 26 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $d1 = FADDDrr renamable $d1, renamable $d2, debug-location !327; ep.c:215:29
  Ready @26c
  TopQ.A TopLatency SU(19) 18c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 20
  Executed: 27c
  Critical: 20c, 20 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STRDroX renamable $d1, renamable $x20, renamable $x8, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  Ready @27c
  TopQ.A TopLatency SU(20) 19c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 21
  Executed: 28c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $d2, renamable $d1 = LDPDi $fp, -11, debug-location !315 :: (dereferenceable load 8 from %ir.x1), (dereferenceable load 8 from %ir.x2); ep.c:212:23
SU(1):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !317; ep.c:212:26
SU(2):   renamable $d2 = FMULDrr renamable $d2, renamable $d0, debug-location !321; ep.c:213:26
SU(3):   renamable $d3 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
SU(4):   renamable $d4 = FABSDr renamable $d2, debug-location !323; ep.c:214:21
SU(5):   FCMPDrr renamable $d3, renamable $d4, implicit-def $nzcv, debug-location !323; ep.c:214:21
SU(6):   STPDi renamable $d1, renamable $d0, $fp, -8, debug-location !314 :: (store 8 into %ir.t2), (store 8 into %ir.t3); ep.c:211:20
SU(7):   renamable $d0, renamable $d3 = LDPDi $fp, -13, debug-location !331 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:216:22
SU(15):   STURDi renamable $d2, $fp, -72, debug-location !322 :: (store 8 into %ir.t4); ep.c:213:20
SU(8):   renamable $d3 = FADDDrr renamable $d3, renamable $d1, debug-location !333; ep.c:216:25
SU(9):   renamable $d1 = FCSELDrrr renamable $d1, renamable $d2, 12, implicit $nzcv, debug-location !323; ep.c:214:21
SU(10):   renamable $d1 = FABSDr renamable $d1, debug-location !323; ep.c:214:21
SU(11):   renamable $w8 = FCVTZSUWDr renamable $d1, implicit-def $x8, debug-location !323; ep.c:214:21
SU(12):   STURWi renamable $w8, $fp, -188, debug-location !324 :: (store 4 into %ir.l); ep.c:214:19
SU(13):   renamable $x8 = SBFMXri renamable $x8, 61, 31, debug-location !326; ep.c:215:24
SU(14):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 0, debug-location !326 :: (load 8 from %ir.arrayidx103); ep.c:215:24
SU(16):   renamable $d0 = FADDDrr renamable $d0, renamable $d2, debug-location !337; ep.c:217:25
SU(18):   renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.33)
SU(17):   STPDi renamable $d0, renamable $d3, $fp, -13, debug-location !334 :: (store 8 into %ir.sx), (store 8 into %ir.sy); ep.c:216:20
SU(19):   renamable $d1 = FADDDrr renamable $d1, renamable $d2, debug-location !327; ep.c:215:29
SU(20):   STRDroX renamable $d1, renamable $x20, renamable $x8, 0, 0, debug-location !330 :: (store 8 into %ir.arrayidx106); ep.c:215:22

Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 for.inc110
  From: renamable $w8 = LDURWi $fp, -176, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
    To: B %bb.31
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !340; ep.c:206:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -176, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -176, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !340; ep.c:206:30
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -176, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !340 :: (dereferenceable load 4 from %ir.i); ep.c:206:30
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !340; ep.c:206:30
SU(2):   STURWi renamable $w8, $fp, -176, debug-location !340 :: (store 4 into %ir.i); ep.c:206:30

Fixup kills for %bb.36
Fixup kills for %bb.37
Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 for.inc116
  From: renamable $w8 = LDRWui $sp, 48, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
    To: B %bb.17
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 48, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !348; ep.c:172:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 48, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 48, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !348; ep.c:172:27
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 48, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDRWui $sp, 48, debug-location !348 :: (dereferenceable load 4 from %ir.k); ep.c:172:27
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !348; ep.c:172:27
SU(2):   STRWui renamable $w8, $sp, 48, debug-location !348 :: (store 4 into %ir.k); ep.c:172:27

Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 for.end118
  From: STURWi $wzr, $fp, -176, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -176, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @q
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -176, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @q
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(0):   STURWi $wzr, $fp, -176, debug-location !352 :: (store 4 into %ir.i); ep.c:225:12

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 for.cond119
  From: renamable $w16 = LDURWi $fp, -176, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
    To: Bcc 12, %bb.43, implicit $nzcv, debug-location !358; ep.c:225:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -176, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.43, implicit $nzcv, debug-location !358; ep.c:225:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -176, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $w16 = LDURWi $fp, -176, debug-location !355 :: (dereferenceable load 4 from %ir.i); ep.c:225:17
SU(1):   dead $wzr = SUBSWri renamable $w16, 9, 0, implicit-def $nzcv, debug-location !358; ep.c:225:5

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 for.body122
  From: renamable $x16 = LDURSWi $fp, -176, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
    To: B %bb.41
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDURSWi $fp, -176, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w16
    SU(3): Data Latency=0 Reg=$x16
    SU(2): Data Latency=4 Reg=$x16
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDURDi $fp, -136, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $d1 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Anti Latency=0
SU(3):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !365; ep.c:225:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
    SU(0): Data Latency=0 Reg=$x16
  Successors:
    SU(6): Data Latency=1 Reg=$w16
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !363; ep.c:226:17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STURDi renamable $d0, $fp, -136, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(6):   STURWi renamable $w16, $fp, -176, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.41
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x16 = LDURSWi $fp, -176, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDURDi $fp, -136, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !365; ep.c:225:26
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURWi renamable $w16, $fp, -176, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !363; ep.c:226:17
  Ready @8c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURDi renamable $d0, $fp, -136, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $x16 = LDURSWi $fp, -176, debug-location !361 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
SU(1):   renamable $d0 = LDURDi $fp, -136, debug-location !359 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
SU(2):   renamable $d1 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:19
SU(3):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit $x16, debug-location !365; ep.c:225:26
SU(6):   STURWi renamable $w16, $fp, -176, debug-location !365 :: (store 4 into %ir.i); ep.c:225:26
SU(4):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !363; ep.c:226:17
SU(5):   STURDi renamable $d0, $fp, -136, debug-location !364 :: (store 8 into %ir.gc); ep.c:226:12

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 do.end130
  From: STURDi killed renamable $d0, $fp, -112, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
    To: CBZW killed renamable $w8, %bb.45, debug-location !383; ep.c:268:9
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -112, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 47, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(12): Data Latency=1 Reg=$w8
SU(3):   $x16 = MOVZXi 40811, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 63804, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   $x16 = MOVKXi $x16(tied-def 0), 45636, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
SU(6):   $x16 = MOVKXi $x16(tied-def 0), 16611, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
SU(7):   STURXi renamable $x16, $fp, -144, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Anti Latency=0
SU(8):   $x16 = MOVZXi 50165, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x16
SU(9):   $x16 = MOVKXi $x16(tied-def 0), 18572, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x16
SU(10):   $x16 = MOVKXi $x16(tied-def 0), 64428, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
SU(11):   $x16 = MOVKXi $x16(tied-def 0), 49369, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x16
  Successors:
    SU(13): Data Latency=1 Reg=$x16
SU(12):   STRWui renamable $w8, $sp, 44, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
SU(13):   STURXi renamable $x16, $fp, -152, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$x16
ExitSU:   CBZW killed renamable $w8, %bb.45, debug-location !383; ep.c:268:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x16 = MOVZXi 40811, 0
  Ready @0c
  TopQ.A BotLatency SU(3) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x16 = MOVKXi $x16(tied-def 0), 63804, 16
  Ready @1c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x16 = MOVKXi $x16(tied-def 0), 45636, 32
  Ready @2c
  TopQ.A TopLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = MOVKXi $x16(tied-def 0), 16611, 48
  Ready @3c
  TopQ.A TopLatency SU(6) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(7) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) STURXi renamable $x16, $fp, -144, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  Ready @4c
  TopQ.A TopLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(8) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x16 = MOVZXi 50165, 0
  Ready @5c
  TopQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x16 = MOVKXi $x16(tied-def 0), 18572, 16
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(10) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x16 = MOVKXi $x16(tied-def 0), 64428, 32
  Ready @7c
  TopQ.A TopLatency SU(10) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w8 = MOVZWi 1, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 11 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x16 = MOVKXi $x16(tied-def 0), 49369, 48
  Ready @9c
  TopQ.A TopLatency SU(11) 7c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURDi renamable $d0, $fp, -112, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 1 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 8
  Cand SU(13) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRWui $wzr, $sp, 47, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 8
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STRWui renamable $w8, $sp, 44, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STURXi renamable $x16, $fp, -152, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  Ready @13c
  TopQ.A TopLatency SU(13) 8c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(3):   $x16 = MOVZXi 40811, 0
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 63804, 16
SU(5):   $x16 = MOVKXi $x16(tied-def 0), 45636, 32
SU(6):   $x16 = MOVKXi $x16(tied-def 0), 16611, 48
SU(7):   STURXi renamable $x16, $fp, -144, debug-location !374 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
SU(8):   $x16 = MOVZXi 50165, 0
SU(9):   $x16 = MOVKXi $x16(tied-def 0), 18572, 16
SU(10):   $x16 = MOVKXi $x16(tied-def 0), 64428, 32
SU(2):   $w8 = MOVZWi 1, 0
SU(11):   $x16 = MOVKXi $x16(tied-def 0), 49369, 48
SU(0):   STURDi renamable $d0, $fp, -112, debug-location !371 :: (store 8 into %ir.tm); ep.c:232:8
SU(1):   STRWui $wzr, $sp, 47, debug-location !372 :: (store 4 into %ir.nit); ep.c:234:9
SU(12):   STRWui renamable $w8, $sp, 44, debug-location !373 :: (store 4 into %ir.verified); ep.c:235:14
SU(13):   STURXi renamable $x16, $fp, -152, debug-location !380 :: (store 8 into %ir.sy_verify_value); ep.c:250:25

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 if.then133
  From: renamable $d2, renamable $d0 = LDPDi $fp, -13, debug-location !384 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
    To: End RegionInstrs: 17
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2, renamable $d0 = LDPDi $fp, -13, debug-location !384 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d2
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
SU(1):   renamable $d3, renamable $d1 = LDPDi $fp, -19, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value), (dereferenceable load 8 from %ir.sy_verify_value); ep.c:269:29
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(6): Data Latency=4 Reg=$d3
    SU(5): Data Latency=4 Reg=$d3
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Data Latency=4 Reg=$d1
SU(2):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !387; ep.c:269:27
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !389; ep.c:269:46
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(5): Anti Latency=0
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(12): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
SU(5):   renamable $d1 = FSUBDrr renamable $d2, renamable $d3, debug-location !394; ep.c:270:27
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d3
    SU(1): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(7): Anti Latency=0
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3, debug-location !396; ep.c:270:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(1): Data Latency=4 Reg=$d3
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
SU(7):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=1 Reg=$x8
    SU(0): Out  Latency=1
  Successors:
    SU(13): Data Latency=4 Reg=$d2
    SU(11): Data Latency=4 Reg=$d2
    SU(12): Anti Latency=0
SU(8):   renamable $d0 = FABSDr renamable $d0, debug-location !390; ep.c:269:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
  Successors:
    SU(11): Data Latency=1 Reg=$d0
    SU(10): Data Latency=1 Reg=$d0
SU(9):   renamable $d1 = FABSDr renamable $d1, debug-location !397; ep.c:270:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 4
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
  Successors:
    SU(13): Data Latency=1 Reg=$d1
    SU(10): Data Latency=1 Reg=$d1
SU(10):   STPDi renamable $d1, renamable $d0, $fp, -21, debug-location !391 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(8): Data Latency=1 Reg=$d0
SU(11):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !400; ep.c:271:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(7): Data Latency=4 Reg=$d2
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$nzcv
SU(12):   renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(11): Data Latency=1 Reg=$nzcv
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$w8
    SU(13): Anti Latency=0
SU(13):   FCMPDrr renamable $d1, renamable $d2, implicit-def $nzcv, debug-location !401; ep.c:271:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
    SU(7): Data Latency=4 Reg=$d2
  Successors:
    SU(14): Data Latency=1 Reg=$nzcv
SU(14):   renamable $w16 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(13): Data Latency=1 Reg=$nzcv
  Successors:
    SU(15): Data Latency=1 Reg=$w16
SU(15):   $w8 = ANDWrs renamable $w8, renamable $w16, 0, debug-location !401; ep.c:271:41
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(14): Data Latency=1 Reg=$w16
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w8
  Successors:
    SU(16): Data Latency=1 Reg=$w8
SU(16):   STRWui renamable $w8, $sp, 44, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=$w8
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d2, renamable $d0 = LDPDi $fp, -13, debug-location !384 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d3, renamable $d1 = LDPDi $fp, -19, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value), (dereferenceable load 8 from %ir.sy_verify_value); ep.c:269:29
  Ready @1c
  TopQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !387; ep.c:269:27
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !389; ep.c:269:46
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FSUBDrr renamable $d2, renamable $d3, debug-location !394; ep.c:270:27
  Ready @7c
  TopQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @8c
  TopQ.A BotLatency SU(7) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d3, debug-location !396; ep.c:270:46
  Ready @9c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = FABSDr renamable $d0, debug-location !390; ep.c:269:18
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 11 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = FABSDr renamable $d1, debug-location !397; ep.c:270:18
  Ready @11c
  TopQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(10) ORDER                              
  Cand SU(11) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !400; ep.c:271:29
  Ready @12c
  TopQ.A TopLatency SU(11) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(10) ORDER                              
  Cand SU(12) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
  Ready @13c
  TopQ.A TopLatency SU(12) 10c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 13 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(10) ORDER                              
  Cand SU(13) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) FCMPDrr renamable $d1, renamable $d2, implicit-def $nzcv, debug-location !401; ep.c:271:41
  Ready @14c
  TopQ.A BotLatency SU(13) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 14 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(10) ORDER                              
  Cand SU(14) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $w16 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
  Ready @15c
  TopQ.A TopLatency SU(14) 11c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 15 
  TopQ.A RemainingLatency 0 + 16c > CritPath 13
  Cand SU(10) ORDER                              
  Cand SU(15) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $w8 = ANDWrs renamable $w8, renamable $w16, 0, debug-location !401; ep.c:271:41
  Ready @16c
  TopQ.A TopLatency SU(15) 12c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 16 
  TopQ.A RemainingLatency 0 + 17c > CritPath 13
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STPDi renamable $d1, renamable $d0, $fp, -21, debug-location !391 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 16
  Executed: 18c
  Critical: 16c, 16 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) STRWui renamable $w8, $sp, 44, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18
  Ready @18c
  TopQ.A TopLatency SU(16) 13c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 17
  Executed: 19c
  Critical: 17c, 17 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $d2, renamable $d0 = LDPDi $fp, -13, debug-location !384 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:269:24
SU(1):   renamable $d3, renamable $d1 = LDPDi $fp, -19, debug-location !386 :: (dereferenceable load 8 from %ir.sx_verify_value), (dereferenceable load 8 from %ir.sy_verify_value); ep.c:269:29
SU(4):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
SU(2):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !387; ep.c:269:27
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !389; ep.c:269:46
SU(5):   renamable $d1 = FSUBDrr renamable $d2, renamable $d3, debug-location !394; ep.c:270:27
SU(7):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3, debug-location !396; ep.c:270:46
SU(8):   renamable $d0 = FABSDr renamable $d0, debug-location !390; ep.c:269:18
SU(9):   renamable $d1 = FABSDr renamable $d1, debug-location !397; ep.c:270:18
SU(11):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !400; ep.c:271:29
SU(12):   renamable $w8 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !400; ep.c:271:29
SU(13):   FCMPDrr renamable $d1, renamable $d2, implicit-def $nzcv, debug-location !401; ep.c:271:41
SU(14):   renamable $w16 = CSINCWr $wzr, $wzr, 8, implicit $nzcv, debug-location !401; ep.c:271:41
SU(15):   $w8 = ANDWrs renamable $w8, renamable $w16, 0, debug-location !401; ep.c:271:41
SU(10):   STPDi renamable $d1, renamable $d0, $fp, -21, debug-location !391 :: (store 8 into %ir.sx_err), (store 8 into %ir.sy_err); ep.c:269:16
SU(16):   STRWui renamable $w8, $sp, 44, debug-location !402 :: (store 4 into %ir.verified); ep.c:271:18

Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 if.end142
  From: STURWi $wzr, $fp, -176, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -176, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x20 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x20
SU(2):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x20 = ADRP target-flags(aarch64-page) @q
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -176, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(1):   $x20 = ADRP target-flags(aarch64-page) @q
SU(2):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(0):   STURWi $wzr, $fp, -176, debug-location !419 :: (store 4 into %ir.i); ep.c:282:12

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = ADRP target-flags(aarch64-page) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !418; ep.c:281:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_10_Counts____, 0, debug-location !418; ep.c:281:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !418; ep.c:281:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_10_Counts____, 0, debug-location !418; ep.c:281:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ep__str_10_Counts____, debug-location !418; ep.c:281:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_10_Counts____, 0, debug-location !418; ep.c:281:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !415 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !415 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, 0, debug-location !417; ep.c:280:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !417; ep.c:280:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !415 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, 0, debug-location !417; ep.c:280:5
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !415 :: (dereferenceable load 8 from %ir.sx), (dereferenceable load 8 from %ir.sy); ep.c:280:42
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ep__str_9_Sums____25, debug-location !417; ep.c:280:5
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_9_Sums____25, 0, debug-location !417; ep.c:280:5
SU(1):   STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d0 = LDURDi $fp, -136, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, 0, debug-location !414; ep.c:279:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !414; ep.c:279:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -136, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, 0, debug-location !414; ep.c:279:5
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d0 = LDURDi $fp, -136, debug-location !413 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ep__str_8_No__Gaussi, debug-location !414; ep.c:279:5
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_8_No__Gaussi, 0, debug-location !414; ep.c:279:5
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

********** MI Scheduling **********
main:%bb.45 if.end142
  From: $x0 = ADRP target-flags(aarch64-page) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, 0, debug-location !412; ep.c:278:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 30, 0, debug-location !412; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !412; ep.c:278:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, 0, debug-location !412; ep.c:278:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 30, 0, debug-location !412; ep.c:278:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ep__str_7_N___2__5d_, debug-location !412; ep.c:278:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_7_N___2__5d_, 0, debug-location !412; ep.c:278:5
SU(2):   $w1 = MOVZWi 30, 0, debug-location !412; ep.c:278:5

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d0 = LDURDi $fp, -112, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -112, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, 0, debug-location !411; ep.c:277:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !411; ep.c:277:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -112, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, 0, debug-location !411; ep.c:277:5
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d0 = LDURDi $fp, -112, debug-location !410 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
SU(2):   $x0 = ADRP target-flags(aarch64-page) @ep__str_6_CPU_Time__, debug-location !411; ep.c:277:5
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_6_CPU_Time__, 0, debug-location !411; ep.c:277:5
SU(1):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $d1 = LDURDi $fp, -112, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !409; ep.c:276:5
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -112, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=$d1
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$d2
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !406; ep.c:274:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
SU(4):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !407; ep.c:274:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
    SU(2): Data Latency=4 Reg=$d2
  Successors:
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STURDi renamable $d0, $fp, -40, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ep__str_5__EP_Benchm, debug-location !409; ep.c:276:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_5__EP_Benchm, 0, debug-location !409; ep.c:276:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !409; ep.c:276:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -112, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.5
  Ready @1c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @ep__str_5__EP_Benchm, debug-location !409; ep.c:276:5
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(7) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !406; ep.c:274:28
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_5__EP_Benchm, 0, debug-location !409; ep.c:276:5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !407; ep.c:274:33
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURDi renamable $d0, $fp, -40, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $d1 = LDURDi $fp, -112, debug-location !405 :: (dereferenceable load 8 from %ir.tm); ep.c:274:30
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.5
SU(2):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ep__str_5__EP_Benchm, debug-location !409; ep.c:276:5
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !406; ep.c:274:28
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_5__EP_Benchm, 0, debug-location !409; ep.c:276:5
SU(4):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !407; ep.c:274:33
SU(5):   STURDi renamable $d0, $fp, -40, debug-location !408 :: (store 8 into %ir.Mops); ep.c:274:10

********** MI Scheduling **********
main:%bb.45 if.end142
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.0
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x16
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !404; ep.c:274:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)

Fixup kills for %bb.45
********** MI Scheduling **********
main:%bb.46 for.cond152
  From: renamable $w8 = LDURWi $fp, -176, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
    To: Bcc 12, %bb.48, implicit $nzcv, debug-location !425; ep.c:282:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.48, implicit $nzcv, debug-location !425; ep.c:282:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -176, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !422 :: (dereferenceable load 4 from %ir.i); ep.c:282:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 9, 0, implicit-def $nzcv, debug-location !425; ep.c:282:5

Fixup kills for %bb.46
********** MI Scheduling **********
main:%bb.47 for.body155
  From: renamable $w8 = LDURWi $fp, -176, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
    To: B %bb.46
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !432; ep.c:282:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -176, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -176, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !432; ep.c:282:26
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -176, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $w8 = LDURWi $fp, -176, debug-location !432 :: (dereferenceable load 4 from %ir.i); ep.c:282:26
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !432; ep.c:282:26
SU(2):   STURWi renamable $w8, $fp, -176, debug-location !432 :: (store 4 into %ir.i); ep.c:282:26

********** MI Scheduling **********
main:%bb.47 for.body155
  From: renamable $x19 = LDURSWi $fp, -176, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDURSWi $fp, -176, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$w19
    SU(1): Data Latency=4 Reg=$x19
SU(1):   renamable $d0 = LDRDroX renamable $x20, renamable $x19, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, 0, debug-location !430; ep.c:283:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !430; ep.c:283:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !430; ep.c:283:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDURSWi $fp, -176, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, 0, debug-location !430; ep.c:283:9
  Ready @2c
  TopQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDroX renamable $x20, renamable $x19, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w1 = ORRWrs $wzr, $w19, 0, debug-location !430; ep.c:283:9
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)
  Ready @8c
  TopQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $x19 = LDURSWi $fp, -176, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
SU(3):   $x0 = ADRP target-flags(aarch64-page) @ep__str_11__3d_15_0lf, debug-location !430; ep.c:283:9
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_11__3d_15_0lf, 0, debug-location !430; ep.c:283:9
SU(1):   renamable $d0 = LDRDroX renamable $x20, renamable $x19, 0, 1, debug-location !429 :: (load 8 from %ir.arrayidx157); ep.c:283:35
SU(5):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !430; ep.c:283:9
SU(2):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.32)

Fixup kills for %bb.47
********** MI Scheduling **********
main:%bb.48 for.end161
  From: renamable $w19 = LDRWui $sp, 47, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !440; ep.c:286:5
 RegionInstrs: 39
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDRWui $sp, 47, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(38): Data Latency=4 Reg=$w19
SU(1):   renamable $d0 = LDURDi $fp, -112, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d0
SU(2):   renamable $d1 = LDURDi $fp, -40, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d1
SU(3):   STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
SU(4):   renamable $w20 = LDRWui $sp, 44, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(24): Data Latency=4 Reg=$w20
SU(5):   $x8 = ADRP target-flags(aarch64-page) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x8
SU(7):   $x16 = ADRP target-flags(aarch64-page) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
  Successors:
    SU(26): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x16
SU(9):   $x17 = ADRP target-flags(aarch64-page) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x17
SU(10):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x17
  Successors:
    SU(25): Data Latency=1 Reg=$x17
SU(11):   $x18 = ADRP target-flags(aarch64-page) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x18
SU(12):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x18
  Successors:
    SU(25): Data Latency=1 Reg=$x18
SU(13):   $x0 = ADRP target-flags(aarch64-page) @ep__str_18__lm_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x0
SU(14):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x0
  Successors:
    SU(29): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
SU(15):   $x1 = ADRP target-flags(aarch64-page) @ep__str_17___CC__, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x1
SU(16):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x1
  Successors:
    SU(33): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x1
SU(17):   $x2 = ADRP target-flags(aarch64-page) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x2
SU(18):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x2
  Successors:
    SU(34): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x2
SU(19):   $x3 = ADRP target-flags(aarch64-page) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x3
SU(20):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x3
  Successors:
    SU(36): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x3
SU(21):   STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !440 :: (store 8 into stack + 80), (store 8 into stack + 72); ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(8): Data Latency=1 Reg=$x16
    SU(6): Data Latency=1 Reg=$x8
  Successors:
    SU(26): Anti Latency=0
    SU(22): Anti Latency=0
SU(22):   $x8 = ADRP target-flags(aarch64-page) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(21): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x8
SU(23):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x8
  Successors:
    SU(32): Data Latency=1 Reg=$x8
SU(24):   STRWui renamable $w20, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=$w20
SU(25):   STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !440 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$x18
    SU(10): Data Latency=1 Reg=$x17
SU(26):   $x16 = ADRP target-flags(aarch64-page) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(21): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x16
SU(27):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x16
  Successors:
    SU(35): Data Latency=1 Reg=$x16
SU(28):   STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !440 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(16): Data Latency=1 Reg=$x1
    SU(14): Data Latency=1 Reg=$x0
  Successors:
    SU(33): Anti Latency=0
    SU(29): Anti Latency=0
SU(29):   $x0 = ADRP target-flags(aarch64-page) @ep__str_12_EP_, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(28): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x0
SU(30):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(31):   STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !440 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(20): Data Latency=1 Reg=$x3
    SU(18): Data Latency=1 Reg=$x2
  Successors:
    SU(36): Anti Latency=0
    SU(34): Anti Latency=0
SU(32):   STRXui renamable $x8, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(23): Data Latency=1 Reg=$x8
SU(33):   $w1 = MOVZWi 66, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(28): Anti Latency=0
    SU(16): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(34):   $w2 = MOVZWi 31, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(31): Anti Latency=0
    SU(18): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(35):   STRXui renamable $x16, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(27): Data Latency=1 Reg=$x16
SU(36):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(31): Anti Latency=0
    SU(20): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(37):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(38):   $w5 = ORRWrs $wzr, $w19, 0, debug-location !440; ep.c:286:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !440; ep.c:286:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(38): Ord  Latency=1 Artificial
    SU(37): Ord  Latency=1 Artificial
    SU(36): Ord  Latency=1 Artificial
    SU(34): Ord  Latency=1 Artificial
    SU(33): Ord  Latency=1 Artificial
    SU(30): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 7 9 11 13 15 17 19 37 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDRWui $sp, 47, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 37 1 2 4 5 7 9 11 13 15 17 19 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDURDi $fp, -112, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 37 19 2 4 5 7 9 11 13 15 17 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDURDi $fp, -40, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 3 
Queue TopQ.A: 37 19 17 4 5 7 9 11 13 15 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(4) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w20 = LDRWui $sp, 44, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  Ready @3c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 24 3 
Queue TopQ.A: 37 19 17 15 5 7 9 11 13 38 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(15) TOP-PATH                  4 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x8 = ADRP target-flags(aarch64-page) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
  Ready @4c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 24 3 
Queue TopQ.A: 37 19 17 15 38 7 9 11 13 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(15) TOP-PATH                  4 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x16 = ADRP target-flags(aarch64-page) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
  Ready @5c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 24 
Queue TopQ.A: 37 19 17 15 38 6 9 11 13 8 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(15) TOP-PATH                  4 cycles 
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x0 = ADRP target-flags(aarch64-page) @ep__str_18__lm_, debug-location !440; ep.c:286:5
  Ready @6c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 17 15 38 6 9 11 3 8 14 24 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(15) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $x1 = ADRP target-flags(aarch64-page) @ep__str_17___CC__, debug-location !440; ep.c:286:5
  Ready @7c
  TopQ.A BotLatency SU(15) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 17 24 38 6 9 11 3 8 14 16 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, 0, debug-location !440; ep.c:286:5
  Ready @8c
  TopQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 17 24 38 16 9 11 3 8 14 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, 0, debug-location !440; ep.c:286:5
  Ready @9c
  TopQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 17 24 38 16 9 11 3 14 21 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, 0, debug-location !440; ep.c:286:5
  Ready @10c
  TopQ.A BotLatency SU(14) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 17 24 38 16 9 11 3 21 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, 0, debug-location !440; ep.c:286:5
  Ready @11c
  TopQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 17 24 38 21 9 11 3 28 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x2 = ADRP target-flags(aarch64-page) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
  Ready @12c
  TopQ.A BotLatency SU(17) 3c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 19 28 24 38 21 9 11 3 18 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) $x3 = ADRP target-flags(aarch64-page) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
  Ready @13c
  TopQ.A BotLatency SU(19) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 18 28 24 38 21 9 11 3 20 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(18) TOP-PATH                  2 cycles 
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x17 = ADRP target-flags(aarch64-page) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 18 28 24 38 21 20 11 3 10 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(18) TOP-PATH                  2 cycles 
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x18 = ADRP target-flags(aarch64-page) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
  Ready @15c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 18 28 24 38 21 20 10 3 12 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(18) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, 0, debug-location !440; ep.c:286:5
  Ready @16c
  TopQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 28 24 38 21 20 10 3 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
  Cand SU(21) ORDER                              
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, 0, debug-location !440; ep.c:286:5
  Ready @17c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 28 24 38 21 3 10 31 
  TopQ.A RemainingLatency 0 + 18c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !440 :: (store 8 into stack + 80), (store 8 into stack + 72); ep.c:286:5
  Ready @18c
  TopQ.A TopLatency SU(21) 2c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 28 24 38 31 3 10 26 22 
  TopQ.A RemainingLatency 0 + 19c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
  Cand SU(22) ORDER                              
Pick Top ORDER     
Scheduling SU(22) $x8 = ADRP target-flags(aarch64-page) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
  Ready @19c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 28 24 38 31 3 10 26 23 
  TopQ.A RemainingLatency 0 + 20c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) $x16 = ADRP target-flags(aarch64-page) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
  Ready @20c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 28 24 38 31 3 10 23 27 
  TopQ.A RemainingLatency 0 + 21c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !440 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
  Ready @21c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 27 24 38 31 3 10 23 33 29 
  TopQ.A RemainingLatency 0 + 22c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(29) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) $x0 = ADRP target-flags(aarch64-page) @ep__str_12_EP_, debug-location !440; ep.c:286:5
  Ready @22c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 27 24 38 31 3 10 23 33 30 
  TopQ.A RemainingLatency 0 + 23c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, 0, debug-location !440; ep.c:286:5
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 12 27 24 38 31 3 30 23 33 
  TopQ.A RemainingLatency 0 + 24c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, 0, debug-location !440; ep.c:286:5
  Ready @24c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 33 27 24 38 31 3 30 23 25 
  TopQ.A RemainingLatency 0 + 25c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, 0, debug-location !440; ep.c:286:5
  Ready @25c
  TopQ.A TopLatency SU(23) 3c
  TopQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 33 27 24 38 31 3 30 25 32 
  TopQ.A RemainingLatency 0 + 26c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, 0, debug-location !440; ep.c:286:5
  Ready @26c
  TopQ.A BotLatency SU(27) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 33 32 24 38 31 3 30 25 35 
  TopQ.A RemainingLatency 0 + 27c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, 0, debug-location !440; ep.c:286:5
  Ready @27c
  TopQ.A BotLatency SU(30) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 33 32 24 38 31 3 35 25 
  TopQ.A RemainingLatency 0 + 28c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !440 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
  Ready @28c
  TopQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 33 32 24 38 25 3 35 36 34 
  TopQ.A RemainingLatency 0 + 29c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) $w1 = MOVZWi 66, 0, debug-location !440; ep.c:286:5
  Ready @29c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 34 32 24 38 25 3 35 36 
  TopQ.A RemainingLatency 0 + 30c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $w2 = MOVZWi 31, 0, debug-location !440; ep.c:286:5
  Ready @30c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 36 32 24 38 25 3 35 
  TopQ.A RemainingLatency 0 + 31c > CritPath 5
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) $w3 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
  Ready @31c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 37 35 32 24 38 25 3 
  TopQ.A RemainingLatency 0 + 32c > CritPath 5
  Cand SU(37) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(37) $w4 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
  Ready @32c
  TopQ.A BotLatency SU(37) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 35 32 24 38 25 
  TopQ.A RemainingLatency 0 + 33c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(38) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) $w5 = ORRWrs $wzr, $w19, 0, debug-location !440; ep.c:286:5
  Ready @33c
  TopQ.A TopLatency SU(38) 4c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 35 32 24 25 
  TopQ.A RemainingLatency 0 + 34c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 35 32 24 
  TopQ.A RemainingLatency 0 + 35c > CritPath 5
  Cand SU(25) ORDER                              
  Cand SU(24) ORDER                              
Pick Top ORDER     
Scheduling SU(24) STRWui renamable $w20, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 35 32 
  TopQ.A RemainingLatency 0 + 36c > CritPath 5
  Cand SU(25) ORDER                              
Pick Top ORDER     
Scheduling SU(25) STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !440 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 35 
  TopQ.A RemainingLatency 0 + 37c > CritPath 5
  Cand SU(32) ORDER                              
Pick Top ORDER     
Scheduling SU(32) STRXui renamable $x8, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 
Pick Top ONLY1     
Scheduling SU(35) STRXui renamable $x16, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $w19 = LDRWui $sp, 47, debug-location !436 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
SU(1):   renamable $d0 = LDURDi $fp, -112, debug-location !437 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
SU(2):   renamable $d1 = LDURDi $fp, -40, debug-location !438 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
SU(4):   renamable $w20 = LDRWui $sp, 44, debug-location !439 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
SU(5):   $x8 = ADRP target-flags(aarch64-page) @ep__str_22_randdp_, debug-location !440; ep.c:286:5
SU(7):   $x16 = ADRP target-flags(aarch64-page) @ep__str_21__O3__mcmod, debug-location !440; ep.c:286:5
SU(13):   $x0 = ADRP target-flags(aarch64-page) @ep__str_18__lm_, debug-location !440; ep.c:286:5
SU(15):   $x1 = ADRP target-flags(aarch64-page) @ep__str_17___CC__, debug-location !440; ep.c:286:5
SU(6):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_22_randdp_, 0, debug-location !440; ep.c:286:5
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_21__O3__mcmod, 0, debug-location !440; ep.c:286:5
SU(14):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_18__lm_, 0, debug-location !440; ep.c:286:5
SU(16):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_17___CC__, 0, debug-location !440; ep.c:286:5
SU(17):   $x2 = ADRP target-flags(aarch64-page) @ep__str_16_gcc_, debug-location !440; ep.c:286:5
SU(19):   $x3 = ADRP target-flags(aarch64-page) @ep__str_15_03_Nov_201, debug-location !440; ep.c:286:5
SU(9):   $x17 = ADRP target-flags(aarch64-page) @ep__str_20__g__Wall__, debug-location !440; ep.c:286:5
SU(11):   $x18 = ADRP target-flags(aarch64-page) @ep__str_19__I___commo, debug-location !440; ep.c:286:5
SU(18):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_16_gcc_, 0, debug-location !440; ep.c:286:5
SU(20):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_15_03_Nov_201, 0, debug-location !440; ep.c:286:5
SU(21):   STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !440 :: (store 8 into stack + 80), (store 8 into stack + 72); ep.c:286:5
SU(22):   $x8 = ADRP target-flags(aarch64-page) @ep__str_14_3_3_1_, debug-location !440; ep.c:286:5
SU(26):   $x16 = ADRP target-flags(aarch64-page) @ep__str_13_Random_num, debug-location !440; ep.c:286:5
SU(28):   STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !440 :: (store 8 into stack + 48), (store 8 into stack + 40); ep.c:286:5
SU(29):   $x0 = ADRP target-flags(aarch64-page) @ep__str_12_EP_, debug-location !440; ep.c:286:5
SU(10):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_20__g__Wall__, 0, debug-location !440; ep.c:286:5
SU(12):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_19__I___commo, 0, debug-location !440; ep.c:286:5
SU(23):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_14_3_3_1_, 0, debug-location !440; ep.c:286:5
SU(27):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_13_Random_num, 0, debug-location !440; ep.c:286:5
SU(30):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_12_EP_, 0, debug-location !440; ep.c:286:5
SU(31):   STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !440 :: (store 8 into stack + 32), (store 8 into stack + 24); ep.c:286:5
SU(33):   $w1 = MOVZWi 66, 0, debug-location !440; ep.c:286:5
SU(34):   $w2 = MOVZWi 31, 0, debug-location !440; ep.c:286:5
SU(36):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
SU(37):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !440; ep.c:286:5
SU(38):   $w5 = ORRWrs $wzr, $w19, 0, debug-location !440; ep.c:286:5
SU(3):   STPDi renamable $d1, renamable $d0, $sp, 13 :: (store 8 into %stack.32), (store 8 into %stack.33)
SU(24):   STRWui renamable $w20, $sp, 2, debug-location !440 :: (store 4 into stack + 8); ep.c:286:5
SU(25):   STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !440 :: (store 8 into stack + 64), (store 8 into stack + 56); ep.c:286:5
SU(32):   STRXui renamable $x8, $sp, 2, debug-location !440 :: (store 8 into stack + 16); ep.c:286:5
SU(35):   STRXui renamable $x16, $sp, 0, debug-location !440 :: (store 8 into stack); ep.c:286:5

Fixup kills for %bb.48
********** MI Scheduling **********
main:%bb.49 if.then163
  From: renamable $d0 = LDURDi $fp, -112, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
    To: Bcc 8, %bb.51, implicit $nzcv, debug-location !448; ep.c:291:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -112, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !448; ep.c:291:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 8, %bb.51, implicit $nzcv, debug-location !448; ep.c:291:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -112, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !448; ep.c:291:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   renamable $d0 = LDURDi $fp, -112, debug-location !444 :: (dereferenceable load 8 from %ir.tm); ep.c:291:13
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !448; ep.c:291:13

Fixup kills for %bb.49
********** MI Scheduling **********
main:%bb.50 if.then166
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STURXi renamable $x8, $fp, -112, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURXi renamable $x8, $fp, -112, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STURXi renamable $x8, $fp, -112, debug-location !449 :: (store 8 into %ir.tm); ep.c:292:16

Fixup kills for %bb.50
********** MI Scheduling **********
main:%bb.51 if.end167
  From: renamable $d2 = LDURDi $fp, -112, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2 = LDURDi $fp, -112, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$d2
SU(1):   STURDi renamable $d0, $fp, -128, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
    SU(5): Ord  Latency=0 Memory
SU(3):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !471; ep.c:298:60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
SU(4):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !473; ep.c:298:68
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d1
SU(5):   STPDi renamable $d0, renamable $d1, $sp, 13 :: (store 8 into %stack.33), (store 8 into %stack.32)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d1
    SU(2): Ord  Latency=0 Memory
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, 0, debug-location !474; ep.c:298:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !474; ep.c:298:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
  Ready @0c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d2 = LDURDi $fp, -112, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, 0, debug-location !474; ep.c:298:9
  Ready @3c
  TopQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !471; ep.c:298:60
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !473; ep.c:298:68
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURDi renamable $d0, $fp, -128, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STPDi renamable $d0, renamable $d1, $sp, 13 :: (store 8 into %stack.33), (store 8 into %stack.32)
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(2):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
SU(0):   renamable $d2 = LDURDi $fp, -112, debug-location !472 :: (dereferenceable load 8 from %ir.tm); ep.c:298:70
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ep__str_25_Random_num, debug-location !474; ep.c:298:9
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_25_Random_num, 0, debug-location !474; ep.c:298:9
SU(3):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !471; ep.c:298:60
SU(4):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !473; ep.c:298:68
SU(1):   STURDi renamable $d0, $fp, -128, debug-location !468 :: (store 8 into %ir.tt); ep.c:297:12
SU(5):   STPDi renamable $d0, renamable $d1, $sp, 13 :: (store 8 into %stack.33), (store 8 into %stack.32)

********** MI Scheduling **********
main:%bb.51 if.end167
  From: renamable $d2 = LDURDi $fp, -112, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2 = LDURDi $fp, -112, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$d2
SU(1):   STURDi renamable $d0, $fp, -128, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(3):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !463; ep.c:296:60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d1
SU(4):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !465; ep.c:296:68
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d1
SU(5):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.33), (store 8 into %stack.34)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d1
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, 0, debug-location !466; ep.c:296:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !466; ep.c:296:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
  Ready @0c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d2 = LDURDi $fp, -112, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, 0, debug-location !466; ep.c:296:9
  Ready @3c
  TopQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !463; ep.c:296:60
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !465; ep.c:296:68
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURDi renamable $d0, $fp, -128, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.33), (store 8 into %stack.34)
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(2):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.32)
SU(0):   renamable $d2 = LDURDi $fp, -112, debug-location !464 :: (dereferenceable load 8 from %ir.tm); ep.c:296:70
SU(6):   $x0 = ADRP target-flags(aarch64-page) @ep__str_24_Gaussian_p, debug-location !466; ep.c:296:9
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_24_Gaussian_p, 0, debug-location !466; ep.c:296:9
SU(3):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !463; ep.c:296:60
SU(4):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !465; ep.c:296:68
SU(1):   STURDi renamable $d0, $fp, -128, debug-location !460 :: (store 8 into %ir.tt); ep.c:295:12
SU(5):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.33), (store 8 into %stack.34)

********** MI Scheduling **********
main:%bb.51 if.end167
  From: STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.33)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.33)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d1
    SU(3): Data Latency=4 Reg=$d1
SU(3):   STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Anti Latency=0
SU(4):   renamable $d2 = LDURDi $fp, -112, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=$d2
SU(5):   STURDi renamable $d0, $fp, -128, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !455; ep.c:294:62
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
SU(7):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !457; ep.c:294:70
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(8): Data Latency=1 Reg=$d1
SU(8):   STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.34)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
SU(9):   $x0 = ADRP target-flags(aarch64-page) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, 0, debug-location !458; ep.c:294:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !458; ep.c:294:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.6
  Ready @0c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 4 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 9 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = LDURDi $fp, -112, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 9 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADRP target-flags(aarch64-page) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 5 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, 0, debug-location !458; ep.c:294:9
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !455; ep.c:294:62
  Ready @6c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !457; ep.c:294:70
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.33)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURDi renamable $d0, $fp, -128, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.34)
  Ready @10c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.6
SU(2):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
SU(4):   renamable $d2 = LDURDi $fp, -112, debug-location !456 :: (dereferenceable load 8 from %ir.tm); ep.c:294:72
SU(9):   $x0 = ADRP target-flags(aarch64-page) @ep__str_23__Total_tim, debug-location !458; ep.c:294:9
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ep__str_23__Total_tim, 0, debug-location !458; ep.c:294:9
SU(3):   STRDui renamable $d1, $sp, 14 :: (store 8 into %stack.32)
SU(6):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !455; ep.c:294:62
SU(7):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !457; ep.c:294:70
SU(0):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.33)
SU(5):   STURDi renamable $d0, $fp, -128, debug-location !452 :: (store 8 into %ir.tt); ep.c:293:12
SU(8):   STRDui renamable $d1, $sp, 12 :: (store 8 into %stack.34)

Fixup kills for %bb.51
********** MI Scheduling **********
main:%bb.52 if.end180
  From: $w8 = ORRWrs $wzr, $wzr, 0, debug-location !476; ep.c:301:5
    To: $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !476; ep.c:301:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0, debug-location !476; ep.c:301:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !476 :: (load 8 from %stack.61), (load 8 from %stack.60); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !476 :: (load 8 from %stack.63), (load 8 from %stack.62); ep.c:301:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !476; ep.c:301:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !476 :: (load 8 from %stack.61), (load 8 from %stack.60); ep.c:301:5
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !476 :: (load 8 from %stack.63), (load 8 from %stack.62); ep.c:301:5
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = ORRWrs $wzr, $wzr, 0, debug-location !476; ep.c:301:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !476 :: (load 8 from %stack.61), (load 8 from %stack.60); ep.c:301:5
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !476 :: (load 8 from %stack.63), (load 8 from %stack.62); ep.c:301:5
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0, debug-location !476; ep.c:301:5

Fixup kills for %bb.52
