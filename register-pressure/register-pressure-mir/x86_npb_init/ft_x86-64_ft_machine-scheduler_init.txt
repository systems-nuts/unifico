Before MISched:
# Machine code for function appft: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8192, align=16, at location [SP+8]
  fi#17: size=4096, align=16, at location [SP+8]
  fi#18: size=4096, align=16, at location [SP+8]
Function Live Ins: $edi in %0, $rsi in %1, $rdx in %2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $rsi, $rdx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.niter.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.niter.addr)
  MOV64mr %stack.1.total_time.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.total_time.addr)
  MOV64mr %stack.2.verified.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.verified.addr)
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 1, debug-location !89 :: (store 4 into %ir.i); appft.c:61:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags, debug-location !94 :: (dereferenceable load 4 from %ir.i); appft.c:61:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !95; appft.c:61:5
  JMP_1 %bb.2, debug-location !95; appft.c:61:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %167:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !96 :: (dereferenceable load 4 from %ir.i); appft.c:62:21
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !98; appft.c:62:9
  $edi = COPY %167:gr32, debug-location !98; appft.c:62:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !98; appft.c:62:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !98; appft.c:62:9
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !99 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); appft.c:61:27
  JMP_1 %bb.1, debug-location !100; appft.c:61:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !103; appft.c:65:5
  $edi = MOV32ri 2, debug-location !103; appft.c:65:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !103; appft.c:65:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !103; appft.c:65:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !104; appft.c:66:5
  $edi = MOV32ri 512, debug-location !104; appft.c:66:5
  $esi = MOV32ri 256, debug-location !104; appft.c:66:5
  $edx = MOV32ri 256, debug-location !104; appft.c:66:5
  $rcx = MOV32ri64 @xnt, debug-location !104; appft.c:66:5
  CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !104; appft.c:66:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !104; appft.c:66:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; appft.c:68:5
  %9:gr64 = LEA64r %stack.16.exp1, 1, $noreg, 0, $noreg
  $edi = MOV32ri 512, debug-location !106; appft.c:68:5
  $rsi = COPY %9:gr64, debug-location !106; appft.c:68:5
  CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !106; appft.c:68:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; appft.c:68:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !108; appft.c:69:5
  %10:gr64 = LEA64r %stack.17.exp2, 1, $noreg, 0, $noreg
  $edi = MOV32ri 256, debug-location !108; appft.c:69:5
  $rsi = COPY %10:gr64, debug-location !108; appft.c:69:5
  CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !108; appft.c:69:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !108; appft.c:69:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; appft.c:70:5
  %11:gr64 = LEA64r %stack.18.exp3, 1, $noreg, 0, $noreg
  $edi = MOV32ri 256, debug-location !110; appft.c:70:5
  $rsi = COPY %11:gr64, debug-location !110; appft.c:70:5
  CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !110; appft.c:70:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; appft.c:70:5
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !114; appft.c:71:5
  $edi = MOV32ri 1, debug-location !114; appft.c:71:5
  $esi = MOV32ri 512, debug-location !114; appft.c:71:5
  $edx = MOV32ri 256, debug-location !114; appft.c:71:5
  $ecx = MOV32ri 256, debug-location !114; appft.c:71:5
  $r8 = MOV32ri64 @xnt, debug-location !114; appft.c:71:5
  $r9 = MOV32ri64 @y, debug-location !114; appft.c:71:5
  PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
  PUSH64r %10:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
  PUSH64r %9:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
  CALL64pcrel32 @fftXYZ, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !114; appft.c:71:5
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !114; appft.c:71:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !115; appft.c:72:5
  $edi = MOV32ri 2, debug-location !115; appft.c:72:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !115; appft.c:72:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !115; appft.c:72:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !116; appft.c:74:5
  $edi = MOV32ri 1, debug-location !116; appft.c:74:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !116; appft.c:74:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !116; appft.c:74:5
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from @timers_enabled); appft.c:78:9
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !119; appft.c:78:9
  JMP_1 %bb.4, debug-location !119; appft.c:78:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; appft.c:79:9
  $edi = MOV32ri 13, debug-location !120; appft.c:79:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !120; appft.c:79:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; appft.c:79:9

bb.5.if.end:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi %stack.7.n12, 1, $noreg, 0, $noreg, 256, debug-location !121 :: (store 4 into %ir.n12); appft.c:81:9
  MOV32mi %stack.8.n22, 1, $noreg, 0, $noreg, 128, debug-location !122 :: (store 4 into %ir.n22); appft.c:82:9
  MOV32mi %stack.9.n32, 1, $noreg, 0, $noreg, 128, debug-location !123 :: (store 4 into %ir.n32); appft.c:83:9
  %16:gr64 = MOV64ri -4682421225964825446
  MOV64mr %stack.15.ap, 1, $noreg, 0, $noreg, %16:gr64, debug-location !124 :: (store 8 into %ir.ap); appft.c:84:8
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !125 :: (store 4 into %ir.i); appft.c:85:12

bb.6.for.cond8:
; predecessors: %bb.5, %bb.13
  successors: %bb.7(0x7c000000), %bb.14(0x04000000); %bb.7(96.88%), %bb.14(3.12%)

  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 255, implicit-def $eflags, debug-location !130 :: (dereferenceable load 4 from %ir.i); appft.c:85:19
  JCC_1 %bb.14, 15, implicit killed $eflags, debug-location !131; appft.c:85:5
  JMP_1 %bb.7, debug-location !131; appft.c:85:5

bb.7.for.body10:
; predecessors: %bb.6
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  %140:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !132 :: (dereferenceable load 4 from %ir.i); appft.c:86:14
  $eax = COPY %140:gr32, debug-location !136; appft.c:86:21
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax, debug-location !136; appft.c:86:21
  IDIV32m %stack.9.n32, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !136 :: (dereferenceable load 4 from %ir.n32); appft.c:86:21
  %138:gr32 = COPY killed $eax, debug-location !136; appft.c:86:21
  %138:gr32 = SHL32ri %138:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !137; appft.c:86:28
  %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
  MOV32mr %stack.10.ii, 1, $noreg, 0, $noreg, %140:gr32, debug-location !139 :: (store 4 into %ir.ii); appft.c:86:12
  %140:gr32 = nsw IMUL32rr %140:gr32(tied-def 0), %140:gr32, implicit-def dead $eflags, debug-location !142; appft.c:87:18
  MOV32mr %stack.13.ii2, 1, $noreg, 0, $noreg, %140:gr32, debug-location !143 :: (store 4 into %ir.ii2); appft.c:87:13
  MOV32mi %stack.5.k, 1, $noreg, 0, $noreg, 0, debug-location !144 :: (store 4 into %ir.k); appft.c:88:16

bb.8.for.cond12:
; predecessors: %bb.7, %bb.12
  successors: %bb.9(0x7c000000), %bb.13(0x04000000); %bb.9(96.88%), %bb.13(3.12%)

  CMP32mi %stack.5.k, 1, $noreg, 0, $noreg, 255, implicit-def $eflags, debug-location !149 :: (dereferenceable load 4 from %ir.k); appft.c:88:23
  JCC_1 %bb.13, 15, implicit killed $eflags, debug-location !150; appft.c:88:9
  JMP_1 %bb.9, debug-location !150; appft.c:88:9

bb.9.for.body14:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %147:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !151 :: (dereferenceable load 4 from %ir.k); appft.c:89:18
  $eax = COPY %147:gr32, debug-location !155; appft.c:89:25
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax, debug-location !155; appft.c:89:25
  IDIV32m %stack.8.n22, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !155 :: (dereferenceable load 4 from %ir.n22); appft.c:89:25
  %145:gr32 = COPY killed $eax, debug-location !155; appft.c:89:25
  %145:gr32 = SHL32ri %145:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !156; appft.c:89:32
  %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
  MOV32mr %stack.12.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !158 :: (store 4 into %ir.kk); appft.c:89:16
  %147:gr32 = nsw IMUL32rr %147:gr32(tied-def 0), %147:gr32, implicit-def dead $eflags, debug-location !162; appft.c:90:28
  %147:gr32 = nsw ADD32rm %147:gr32(tied-def 0), %stack.13.ii2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !163 :: (dereferenceable load 4 from %ir.ii2); appft.c:90:23
  MOV32mr %stack.14.ik2, 1, $noreg, 0, $noreg, %147:gr32, debug-location !164 :: (store 4 into %ir.ik2); appft.c:90:17
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !165 :: (store 4 into %ir.j); appft.c:91:20

bb.10.for.cond19:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  CMP32mi %stack.4.j, 1, $noreg, 0, $noreg, 511, implicit-def $eflags, debug-location !170 :: (dereferenceable load 4 from %ir.j); appft.c:91:27
  JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !171; appft.c:91:13
  JMP_1 %bb.11, debug-location !171; appft.c:91:13

bb.11.for.body21:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %155:gr32 = MOV32rm %stack.4.j, 1, $noreg, 0, $noreg, debug-location !172 :: (dereferenceable load 4 from %ir.j); appft.c:92:22
  $eax = COPY %155:gr32, debug-location !176; appft.c:92:29
  CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax, debug-location !176; appft.c:92:29
  IDIV32m %stack.7.n12, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !176 :: (dereferenceable load 4 from %ir.n12); appft.c:92:29
  %153:gr32 = COPY killed $eax, debug-location !176; appft.c:92:29
  %153:gr32 = SHL32ri %153:gr32(tied-def 0), 9, implicit-def dead $eflags, debug-location !177; appft.c:92:36
  %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
  MOV32mr %stack.11.jj, 1, $noreg, 0, $noreg, %155:gr32, debug-location !179 :: (store 4 into %ir.jj); appft.c:92:20
  %155:gr32 = nsw IMUL32rr %155:gr32(tied-def 0), %155:gr32, implicit-def dead $eflags, debug-location !183; appft.c:93:57
  %155:gr32 = nsw ADD32rm %155:gr32(tied-def 0), %stack.14.ik2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (dereferenceable load 4 from %ir.ik2); appft.c:93:62
  %158:fr64 = CVTSI2SDrr %155:gr32, debug-location !186; appft.c:93:45
  %158:fr64 = MULSDrm %158:fr64(tied-def 0), %stack.15.ap, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 8 from %ir.ap); appft.c:93:43
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; appft.c:93:36
  $xmm0 = COPY %158:fr64, debug-location !188; appft.c:93:36
  CALL64pcrel32 @exp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !188; appft.c:93:36
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; appft.c:93:36
  %159:fr64 = COPY killed $xmm0, debug-location !188; appft.c:93:36
  %160:gr64 = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.i); appft.c:93:25
  %161:gr64 = IMUL64rri32 %160:gr64, 1050624, implicit-def dead $eflags, debug-location !190; appft.c:93:17
  %162:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.k); appft.c:93:28
  %163:gr64_nosp = COPY %162:gr64_nosp, debug-location !190; appft.c:93:17
  %163:gr64_nosp = SHL64ri %163:gr64_nosp(tied-def 0), 12, implicit-def dead $eflags, debug-location !190; appft.c:93:17
  %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
  %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
  %166:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 4 from %ir.j); appft.c:93:31
  MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
  INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !194 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); appft.c:91:34
  JMP_1 %bb.10, debug-location !195; appft.c:91:13

bb.12.for.end34:
; predecessors: %bb.10
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  INC32m %stack.5.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !198 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); appft.c:88:30
  JMP_1 %bb.8, debug-location !199; appft.c:88:9

bb.13.for.end37:
; predecessors: %bb.8
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !202 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); appft.c:85:26
  JMP_1 %bb.6, debug-location !203; appft.c:85:5

bb.14.for.end40:
; predecessors: %bb.6
  successors: %bb.15(0x50000000), %bb.16(0x30000000); %bb.15(62.50%), %bb.16(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !206 :: (dereferenceable load 4 from @timers_enabled); appft.c:97:9
  JCC_1 %bb.16, 4, implicit killed $eflags, debug-location !208; appft.c:97:9
  JMP_1 %bb.15, debug-location !208; appft.c:97:9

bb.15.if.then42:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !209; appft.c:98:9
  $edi = MOV32ri 13, debug-location !209; appft.c:98:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !209; appft.c:98:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !209; appft.c:98:9

bb.16.if.end43:
; predecessors: %bb.14, %bb.15
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from @timers_enabled); appft.c:100:9
  JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !212; appft.c:100:9
  JMP_1 %bb.17, debug-location !212; appft.c:100:9

bb.17.if.then45:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !213; appft.c:101:9
  $edi = MOV32ri 12, debug-location !213; appft.c:101:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !213; appft.c:101:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !213; appft.c:101:9

bb.18.if.end46:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !214; appft.c:102:5
  $edi = MOV32ri 512, debug-location !214; appft.c:102:5
  $esi = MOV32ri 256, debug-location !214; appft.c:102:5
  $edx = MOV32ri 256, debug-location !214; appft.c:102:5
  $rcx = MOV32ri64 @xnt, debug-location !214; appft.c:102:5
  CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !214; appft.c:102:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !214; appft.c:102:5
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !215 :: (dereferenceable load 4 from @timers_enabled); appft.c:103:9
  JCC_1 %bb.20, 4, implicit killed $eflags, debug-location !217; appft.c:103:9
  JMP_1 %bb.19, debug-location !217; appft.c:103:9

bb.19.if.then48:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !218; appft.c:104:9
  $edi = MOV32ri 12, debug-location !218; appft.c:104:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !218; appft.c:104:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !218; appft.c:104:9

bb.20.if.end49:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !219 :: (dereferenceable load 4 from @timers_enabled); appft.c:105:9
  JCC_1 %bb.22, 4, implicit killed $eflags, debug-location !221; appft.c:105:9
  JMP_1 %bb.21, debug-location !221; appft.c:105:9

bb.21.if.then51:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !222; appft.c:106:9
  $edi = MOV32ri 15, debug-location !222; appft.c:106:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !222; appft.c:106:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !222; appft.c:106:9

bb.22.if.end52:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x50000000), %bb.24(0x30000000); %bb.23(62.50%), %bb.24(37.50%)

  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !226; appft.c:107:5
  $edi = MOV32ri 1, debug-location !226; appft.c:107:5
  $esi = MOV32ri 512, debug-location !226; appft.c:107:5
  $edx = MOV32ri 256, debug-location !226; appft.c:107:5
  $ecx = MOV32ri 256, debug-location !226; appft.c:107:5
  $r8 = MOV32ri64 @xnt, debug-location !226; appft.c:107:5
  $r9 = MOV32ri64 @y, debug-location !226; appft.c:107:5
  PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
  PUSH64r %10:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
  PUSH64r %9:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
  CALL64pcrel32 @fftXYZ, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !226; appft.c:107:5
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !226; appft.c:107:5
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !227 :: (dereferenceable load 4 from @timers_enabled); appft.c:108:9
  JCC_1 %bb.24, 4, implicit killed $eflags, debug-location !229; appft.c:108:9
  JMP_1 %bb.23, debug-location !229; appft.c:108:9

bb.23.if.then57:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !230; appft.c:109:9
  $edi = MOV32ri 15, debug-location !230; appft.c:109:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !230; appft.c:109:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !230; appft.c:109:9

bb.24.if.end58:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  MOV32mi %stack.6.kt, 1, $noreg, 0, $noreg, 1, debug-location !231 :: (store 4 into %ir.kt); appft.c:111:13

bb.25.for.cond59:
; predecessors: %bb.24, %bb.38
  successors: %bb.26(0x7c000000), %bb.39(0x04000000); %bb.26(96.88%), %bb.39(3.12%)

  %36:gr32 = MOV32rm %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kt); appft.c:111:18
  CMP32rm %36:gr32, %stack.0.niter.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !237 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:111:21
  JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !238; appft.c:111:5
  JMP_1 %bb.26, debug-location !238; appft.c:111:5

bb.26.for.body62:
; predecessors: %bb.25
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !239 :: (dereferenceable load 4 from @timers_enabled); appft.c:112:13
  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !242; appft.c:112:13
  JMP_1 %bb.27, debug-location !242; appft.c:112:13

bb.27.if.then64:
; predecessors: %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !243; appft.c:113:13
  $edi = MOV32ri 11, debug-location !243; appft.c:113:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !243; appft.c:113:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !243; appft.c:113:13

bb.28.if.end65:
; predecessors: %bb.26, %bb.27
  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; appft.c:114:9
  $edi = MOV32ri 512, debug-location !244; appft.c:114:9
  $esi = MOV32ri 256, debug-location !244; appft.c:114:9
  $edx = MOV32ri 256, debug-location !244; appft.c:114:9
  $rcx = MOV32ri64 @xnt, debug-location !244; appft.c:114:9
  $r8 = MOV32ri64 @y, debug-location !244; appft.c:114:9
  $r9 = MOV32ri64 @twiddle, debug-location !244; appft.c:114:9
  CALL64pcrel32 @evolve, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !244; appft.c:114:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; appft.c:114:9
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !245 :: (dereferenceable load 4 from @timers_enabled); appft.c:115:13
  JCC_1 %bb.30, 4, implicit killed $eflags, debug-location !247; appft.c:115:13
  JMP_1 %bb.29, debug-location !247; appft.c:115:13

bb.29.if.then67:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !248; appft.c:116:13
  $edi = MOV32ri 11, debug-location !248; appft.c:116:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !248; appft.c:116:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !248; appft.c:116:13

bb.30.if.end68:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x50000000), %bb.32(0x30000000); %bb.31(62.50%), %bb.32(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !249 :: (dereferenceable load 4 from @timers_enabled); appft.c:117:13
  JCC_1 %bb.32, 4, implicit killed $eflags, debug-location !251; appft.c:117:13
  JMP_1 %bb.31, debug-location !251; appft.c:117:13

bb.31.if.then70:
; predecessors: %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; appft.c:118:13
  $edi = MOV32ri 15, debug-location !252; appft.c:118:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !252; appft.c:118:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; appft.c:118:13

bb.32.if.end71:
; predecessors: %bb.30, %bb.31
  successors: %bb.33(0x50000000), %bb.34(0x30000000); %bb.33(62.50%), %bb.34(37.50%)

  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !256; appft.c:119:9
  $edi = MOV32ri -1, debug-location !256; appft.c:119:9
  $esi = MOV32ri 512, debug-location !256; appft.c:119:9
  $edx = MOV32ri 256, debug-location !256; appft.c:119:9
  $ecx = MOV32ri 256, debug-location !256; appft.c:119:9
  $r8 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
  $r9 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
  PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
  PUSH64r %10:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
  PUSH64r %9:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
  CALL64pcrel32 @fftXYZ, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !256; appft.c:119:9
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !256; appft.c:119:9
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !257 :: (dereferenceable load 4 from @timers_enabled); appft.c:120:13
  JCC_1 %bb.34, 4, implicit killed $eflags, debug-location !259; appft.c:120:13
  JMP_1 %bb.33, debug-location !259; appft.c:120:13

bb.33.if.then76:
; predecessors: %bb.32
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !260; appft.c:121:13
  $edi = MOV32ri 15, debug-location !260; appft.c:121:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !260; appft.c:121:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !260; appft.c:121:13

bb.34.if.end77:
; predecessors: %bb.32, %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); appft.c:122:13
  JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !263; appft.c:122:13
  JMP_1 %bb.35, debug-location !263; appft.c:122:13

bb.35.if.then79:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; appft.c:123:13
  $edi = MOV32ri 10, debug-location !264; appft.c:123:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !264; appft.c:123:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; appft.c:123:13

bb.36.if.end80:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

  %128:gr64_with_sub_8bit = MOVSX64rm32 %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 4 from %ir.kt); appft.c:124:33
  %130:gr64 = COPY %128:gr64_with_sub_8bit, debug-location !266; appft.c:124:28
  %130:gr64 = SHL64ri %130:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !266; appft.c:124:28
  %131:gr64 = LEA64r %130:gr64, 1, $noreg, @sums, $noreg, debug-location !266; appft.c:124:28
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; appft.c:124:9
  $rdi = COPY %131:gr64, debug-location !268; appft.c:124:9
  $esi = COPY %128.sub_32bit:gr64_with_sub_8bit, debug-location !268; appft.c:124:9
  $edx = MOV32ri 512, debug-location !268; appft.c:124:9
  $ecx = MOV32ri 256, debug-location !268; appft.c:124:9
  $r8d = MOV32ri 256, debug-location !268; appft.c:124:9
  $r9 = MOV32ri64 @xnt, debug-location !268; appft.c:124:9
  CALL64pcrel32 @CalculateChecksum, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !268; appft.c:124:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; appft.c:124:9
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !269 :: (dereferenceable load 4 from @timers_enabled); appft.c:125:13
  JCC_1 %bb.38, 4, implicit killed $eflags, debug-location !271; appft.c:125:13
  JMP_1 %bb.37, debug-location !271; appft.c:125:13

bb.37.if.then84:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; appft.c:126:13
  $edi = MOV32ri 10, debug-location !272; appft.c:126:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !272; appft.c:126:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; appft.c:126:13

bb.38.if.end85:
; predecessors: %bb.36, %bb.37
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  INC32m %stack.6.kt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !273 :: (store 4 into %ir.kt), (dereferenceable load 4 from %ir.kt); appft.c:111:33
  JMP_1 %bb.25, debug-location !274; appft.c:111:5

bb.39.for.end88:
; predecessors: %bb.25
  successors: %bb.40(0x50000000), %bb.41(0x30000000); %bb.40(62.50%), %bb.41(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !277 :: (dereferenceable load 4 from @timers_enabled); appft.c:133:9
  JCC_1 %bb.41, 4, implicit killed $eflags, debug-location !279; appft.c:133:9
  JMP_1 %bb.40, debug-location !279; appft.c:133:9

bb.40.if.then94:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !280; appft.c:134:9
  $edi = MOV32ri 14, debug-location !280; appft.c:134:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !280; appft.c:134:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !280; appft.c:134:9

bb.41.if.end95:
; predecessors: %bb.39, %bb.40
  successors: %bb.42(0x50000000), %bb.43(0x30000000); %bb.42(62.50%), %bb.43(37.50%)

  %39:gr32 = MOV32rm %stack.0.niter.addr, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:135:24
  %40:gr64 = MOV64rm %stack.2.verified.addr, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 8 from %ir.verified.addr); appft.c:135:37
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !283; appft.c:135:5
  $edi = MOV32ri 512, debug-location !283; appft.c:135:5
  $esi = MOV32ri 256, debug-location !283; appft.c:135:5
  $edx = MOV32ri 256, debug-location !283; appft.c:135:5
  $ecx = COPY %39:gr32, debug-location !283; appft.c:135:5
  $r8 = MOV32ri64 @sums, debug-location !283; appft.c:135:5
  $r9 = COPY %40:gr64, debug-location !283; appft.c:135:5
  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !283; appft.c:135:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !283; appft.c:135:5
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !284 :: (dereferenceable load 4 from @timers_enabled); appft.c:136:9
  JCC_1 %bb.43, 4, implicit killed $eflags, debug-location !286; appft.c:136:9
  JMP_1 %bb.42, debug-location !286; appft.c:136:9

bb.42.if.then97:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !287; appft.c:137:9
  $edi = MOV32ri 14, debug-location !287; appft.c:137:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !287; appft.c:137:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !287; appft.c:137:9

bb.43.if.end98:
; predecessors: %bb.41, %bb.42
  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !288; appft.c:138:5
  $edi = MOV32ri 1, debug-location !288; appft.c:138:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !288; appft.c:138:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !288; appft.c:138:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !289; appft.c:140:19
  $edi = MOV32ri 1, debug-location !289; appft.c:140:19
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !289; appft.c:140:19
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !289; appft.c:140:19
  %46:fr64 = COPY killed $xmm0, debug-location !289; appft.c:140:19
  %47:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !290 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:140:6
  MOVSDmr %47:gr64, 1, $noreg, 0, $noreg, %46:fr64, debug-location !291 :: (store 8 into %ir.51); appft.c:140:17
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from @timers_enabled); appft.c:141:10
  JCC_1 %bb.45, 4, implicit killed $eflags, debug-location !294; appft.c:141:9
  JMP_1 %bb.44, debug-location !294; appft.c:141:9

bb.44.if.end102:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !295; appft.c:144:5
  $rdi = MOV32ri64 @.str, debug-location !295; appft.c:144:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !295; appft.c:144:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !295; appft.c:144:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !295; appft.c:144:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !296; appft.c:145:60
  $edi = MOV32ri 1, debug-location !296; appft.c:145:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !296; appft.c:145:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !296; appft.c:145:60
  %53:fr64 = COPY killed $xmm0, debug-location !296; appft.c:145:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !297; appft.c:145:5
  $rdi = MOV32ri64 @.str.1, debug-location !297; appft.c:145:5
  $rsi = MOV32ri64 @.str.2, debug-location !297; appft.c:145:5
  $xmm0 = COPY %53:fr64, debug-location !297; appft.c:145:5
  $al = MOV8ri 1, debug-location !297; appft.c:145:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !297; appft.c:145:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !297; appft.c:145:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !298; appft.c:146:60
  $edi = MOV32ri 2, debug-location !298; appft.c:146:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !298; appft.c:146:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !298; appft.c:146:60
  %59:fr64 = COPY killed $xmm0, debug-location !298; appft.c:146:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !299; appft.c:146:5
  $rdi = MOV32ri64 @.str.1, debug-location !299; appft.c:146:5
  $rsi = MOV32ri64 @.str.3, debug-location !299; appft.c:146:5
  $xmm0 = COPY %59:fr64, debug-location !299; appft.c:146:5
  $al = MOV8ri 1, debug-location !299; appft.c:146:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !299; appft.c:146:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !299; appft.c:146:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !300; appft.c:147:60
  $edi = MOV32ri 3, debug-location !300; appft.c:147:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !300; appft.c:147:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !300; appft.c:147:60
  %63:fr64 = COPY killed $xmm0, debug-location !300; appft.c:147:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !301; appft.c:147:5
  $rdi = MOV32ri64 @.str.1, debug-location !301; appft.c:147:5
  $rsi = MOV32ri64 @.str.4, debug-location !301; appft.c:147:5
  $xmm0 = COPY %63:fr64, debug-location !301; appft.c:147:5
  $al = MOV8ri 1, debug-location !301; appft.c:147:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !301; appft.c:147:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !301; appft.c:147:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !302; appft.c:148:60
  $edi = MOV32ri 4, debug-location !302; appft.c:148:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !302; appft.c:148:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !302; appft.c:148:60
  %67:fr64 = COPY killed $xmm0, debug-location !302; appft.c:148:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !303; appft.c:148:5
  $rdi = MOV32ri64 @.str.1, debug-location !303; appft.c:148:5
  $rsi = MOV32ri64 @.str.5, debug-location !303; appft.c:148:5
  $xmm0 = COPY %67:fr64, debug-location !303; appft.c:148:5
  $al = MOV8ri 1, debug-location !303; appft.c:148:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !303; appft.c:148:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !303; appft.c:148:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !304; appft.c:149:60
  $edi = MOV32ri 7, debug-location !304; appft.c:149:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !304; appft.c:149:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !304; appft.c:149:60
  %71:fr64 = COPY killed $xmm0, debug-location !304; appft.c:149:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !305; appft.c:149:5
  $rdi = MOV32ri64 @.str.1, debug-location !305; appft.c:149:5
  $rsi = MOV32ri64 @.str.6, debug-location !305; appft.c:149:5
  $xmm0 = COPY %71:fr64, debug-location !305; appft.c:149:5
  $al = MOV8ri 1, debug-location !305; appft.c:149:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !305; appft.c:149:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !305; appft.c:149:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !306; appft.c:150:60
  $edi = MOV32ri 8, debug-location !306; appft.c:150:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !306; appft.c:150:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !306; appft.c:150:60
  %75:fr64 = COPY killed $xmm0, debug-location !306; appft.c:150:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !307; appft.c:150:5
  $rdi = MOV32ri64 @.str.1, debug-location !307; appft.c:150:5
  $rsi = MOV32ri64 @.str.7, debug-location !307; appft.c:150:5
  $xmm0 = COPY %75:fr64, debug-location !307; appft.c:150:5
  $al = MOV8ri 1, debug-location !307; appft.c:150:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !307; appft.c:150:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !307; appft.c:150:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; appft.c:151:60
  $edi = MOV32ri 9, debug-location !308; appft.c:151:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !308; appft.c:151:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; appft.c:151:60
  %79:fr64 = COPY killed $xmm0, debug-location !308; appft.c:151:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !309; appft.c:151:5
  $rdi = MOV32ri64 @.str.1, debug-location !309; appft.c:151:5
  $rsi = MOV32ri64 @.str.8, debug-location !309; appft.c:151:5
  $xmm0 = COPY %79:fr64, debug-location !309; appft.c:151:5
  $al = MOV8ri 1, debug-location !309; appft.c:151:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !309; appft.c:151:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !309; appft.c:151:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !310; appft.c:152:60
  $edi = MOV32ri 10, debug-location !310; appft.c:152:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !310; appft.c:152:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !310; appft.c:152:60
  %83:fr64 = COPY killed $xmm0, debug-location !310; appft.c:152:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !311; appft.c:152:5
  $rdi = MOV32ri64 @.str.1, debug-location !311; appft.c:152:5
  $rsi = MOV32ri64 @.str.9, debug-location !311; appft.c:152:5
  $xmm0 = COPY %83:fr64, debug-location !311; appft.c:152:5
  $al = MOV8ri 1, debug-location !311; appft.c:152:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !311; appft.c:152:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !311; appft.c:152:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !312; appft.c:153:60
  $edi = MOV32ri 11, debug-location !312; appft.c:153:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !312; appft.c:153:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !312; appft.c:153:60
  %87:fr64 = COPY killed $xmm0, debug-location !312; appft.c:153:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; appft.c:153:5
  $rdi = MOV32ri64 @.str.1, debug-location !313; appft.c:153:5
  $rsi = MOV32ri64 @.str.10, debug-location !313; appft.c:153:5
  $xmm0 = COPY %87:fr64, debug-location !313; appft.c:153:5
  $al = MOV8ri 1, debug-location !313; appft.c:153:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !313; appft.c:153:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; appft.c:153:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; appft.c:154:60
  $edi = MOV32ri 12, debug-location !314; appft.c:154:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !314; appft.c:154:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; appft.c:154:60
  %91:fr64 = COPY killed $xmm0, debug-location !314; appft.c:154:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !315; appft.c:154:5
  $rdi = MOV32ri64 @.str.1, debug-location !315; appft.c:154:5
  $rsi = MOV32ri64 @.str.11, debug-location !315; appft.c:154:5
  $xmm0 = COPY %91:fr64, debug-location !315; appft.c:154:5
  $al = MOV8ri 1, debug-location !315; appft.c:154:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !315; appft.c:154:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !315; appft.c:154:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !316; appft.c:155:60
  $edi = MOV32ri 13, debug-location !316; appft.c:155:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !316; appft.c:155:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !316; appft.c:155:60
  %95:fr64 = COPY killed $xmm0, debug-location !316; appft.c:155:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !317; appft.c:155:5
  $rdi = MOV32ri64 @.str.1, debug-location !317; appft.c:155:5
  $rsi = MOV32ri64 @.str.12, debug-location !317; appft.c:155:5
  $xmm0 = COPY %95:fr64, debug-location !317; appft.c:155:5
  $al = MOV8ri 1, debug-location !317; appft.c:155:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !317; appft.c:155:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !317; appft.c:155:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !318; appft.c:156:60
  $edi = MOV32ri 14, debug-location !318; appft.c:156:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !318; appft.c:156:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !318; appft.c:156:60
  %99:fr64 = COPY killed $xmm0, debug-location !318; appft.c:156:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !319; appft.c:156:5
  $rdi = MOV32ri64 @.str.1, debug-location !319; appft.c:156:5
  $rsi = MOV32ri64 @.str.13, debug-location !319; appft.c:156:5
  $xmm0 = COPY %99:fr64, debug-location !319; appft.c:156:5
  $al = MOV8ri 1, debug-location !319; appft.c:156:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !319; appft.c:156:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !319; appft.c:156:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !320; appft.c:157:60
  $edi = MOV32ri 15, debug-location !320; appft.c:157:60
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !320; appft.c:157:60
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !320; appft.c:157:60
  %103:fr64 = COPY killed $xmm0, debug-location !320; appft.c:157:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !321; appft.c:157:5
  $rdi = MOV32ri64 @.str.1, debug-location !321; appft.c:157:5
  $rsi = MOV32ri64 @.str.14, debug-location !321; appft.c:157:5
  $xmm0 = COPY %103:fr64, debug-location !321; appft.c:157:5
  $al = MOV8ri 1, debug-location !321; appft.c:157:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !321; appft.c:157:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !321; appft.c:157:5
  %106:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:158:61
  %107:fr64 = MOVSDrm_alt %106:gr64, 1, $noreg, 0, $noreg, debug-location !323 :: (load 8 from %ir.53); appft.c:158:60
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !324; appft.c:158:5
  $rdi = MOV32ri64 @.str.1, debug-location !324; appft.c:158:5
  $rsi = MOV32ri64 @.str.15, debug-location !324; appft.c:158:5
  $xmm0 = COPY %107:fr64, debug-location !324; appft.c:158:5
  $al = MOV8ri 1, debug-location !324; appft.c:158:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !324; appft.c:158:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !324; appft.c:158:5

bb.45.return:
; predecessors: %bb.43, %bb.44

  RET 0, debug-location !325; appft.c:159:1

# End machine code for function appft.

********** MI Scheduling **********
appft:%bb.0 entry
  From: %2:gr64 = COPY $rdx
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(1):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(2):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   MOV32mr %stack.0.niter.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.niter.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.1.total_time.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.total_time.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   MOV64mr %stack.2.verified.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.verified.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(6):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 1, debug-location !89 :: (store 4 into %ir.i); appft.c:61:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 1, debug-location !89 :: (store 4 into %ir.i); appft.c:61:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.2.verified.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.verified.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) MOV64mr %stack.1.total_time.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.total_time.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.0.niter.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.niter.addr)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %0:gr32 = COPY $edi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %1:gr64 = COPY $rsi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %2:gr64 = COPY $rdx
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %2:gr64 = COPY $rdx
SU(1):   %1:gr64 = COPY $rsi
SU(2):   %0:gr32 = COPY $edi
SU(3):   MOV32mr %stack.0.niter.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.niter.addr)
SU(4):   MOV64mr %stack.1.total_time.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.total_time.addr)
SU(5):   MOV64mr %stack.2.verified.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.verified.addr)
SU(6):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 1, debug-location !89 :: (store 4 into %ir.i); appft.c:61:12

********** MI Scheduling **********
appft:%bb.3 for.end
  From: $edi = MOV32ri 1, debug-location !114; appft.c:71:5
    To: PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 1, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = MOV32ri 512, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 256, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @xnt, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @y, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = MOV32ri 256, debug-location !114; appft.c:71:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 2 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 256, debug-location !114; appft.c:71:5
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 512, debug-location !114; appft.c:71:5
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 1, debug-location !114; appft.c:71:5
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = MOV32ri64 @y, debug-location !114; appft.c:71:5
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @xnt, debug-location !114; appft.c:71:5
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(4):   $r8 = MOV32ri64 @xnt, debug-location !114; appft.c:71:5
SU(5):   $r9 = MOV32ri64 @y, debug-location !114; appft.c:71:5
SU(0):   $edi = MOV32ri 1, debug-location !114; appft.c:71:5
SU(1):   $esi = MOV32ri 512, debug-location !114; appft.c:71:5
SU(2):   $edx = MOV32ri 256, debug-location !114; appft.c:71:5
SU(3):   $ecx = MOV32ri 256, debug-location !114; appft.c:71:5

********** MI Scheduling **********
appft:%bb.3 for.end
  From: %11:gr64 = LEA64r %stack.18.exp3, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !110; appft.c:70:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %11:gr64 = LEA64r %stack.18.exp3, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%11
  Single Issue       : false;
SU(1):   $edi = MOV32ri 256, debug-location !110; appft.c:70:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = COPY %11:gr64, debug-location !110; appft.c:70:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%11
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !110; appft.c:70:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = COPY %11:gr64, debug-location !110; appft.c:70:5
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 256, debug-location !110; appft.c:70:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr64 = LEA64r %stack.18.exp3, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %11:gr64 = LEA64r %stack.18.exp3, 1, $noreg, 0, $noreg
SU(1):   $edi = MOV32ri 256, debug-location !110; appft.c:70:5
SU(2):   $rsi = COPY %11:gr64, debug-location !110; appft.c:70:5

********** MI Scheduling **********
appft:%bb.3 for.end
  From: %10:gr64 = LEA64r %stack.17.exp2, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !108; appft.c:69:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:gr64 = LEA64r %stack.17.exp2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%10
  Single Issue       : false;
SU(1):   $edi = MOV32ri 256, debug-location !108; appft.c:69:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = COPY %10:gr64, debug-location !108; appft.c:69:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%10
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !108; appft.c:69:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = COPY %10:gr64, debug-location !108; appft.c:69:5
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 256, debug-location !108; appft.c:69:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:gr64 = LEA64r %stack.17.exp2, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %10:gr64 = LEA64r %stack.17.exp2, 1, $noreg, 0, $noreg
SU(1):   $edi = MOV32ri 256, debug-location !108; appft.c:69:5
SU(2):   $rsi = COPY %10:gr64, debug-location !108; appft.c:69:5

********** MI Scheduling **********
appft:%bb.3 for.end
  From: %9:gr64 = LEA64r %stack.16.exp1, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !106; appft.c:68:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:gr64 = LEA64r %stack.16.exp1, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(1):   $edi = MOV32ri 512, debug-location !106; appft.c:68:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = COPY %9:gr64, debug-location !106; appft.c:68:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%9
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !106; appft.c:68:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = COPY %9:gr64, debug-location !106; appft.c:68:5
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 512, debug-location !106; appft.c:68:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64 = LEA64r %stack.16.exp1, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %9:gr64 = LEA64r %stack.16.exp1, 1, $noreg, 0, $noreg
SU(1):   $edi = MOV32ri 512, debug-location !106; appft.c:68:5
SU(2):   $rsi = COPY %9:gr64, debug-location !106; appft.c:68:5

********** MI Scheduling **********
appft:%bb.3 for.end
  From: $edi = MOV32ri 512, debug-location !104; appft.c:66:5
    To: CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !104; appft.c:66:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 512, debug-location !104; appft.c:66:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 256, debug-location !104; appft.c:66:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !104; appft.c:66:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @xnt, debug-location !104; appft.c:66:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !104; appft.c:66:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 256, debug-location !104; appft.c:66:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 256, debug-location !104; appft.c:66:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 512, debug-location !104; appft.c:66:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) $rcx = MOV32ri64 @xnt, debug-location !104; appft.c:66:5
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(3):   $rcx = MOV32ri64 @xnt, debug-location !104; appft.c:66:5
SU(0):   $edi = MOV32ri 512, debug-location !104; appft.c:66:5
SU(1):   $esi = MOV32ri 256, debug-location !104; appft.c:66:5
SU(2):   $edx = MOV32ri 256, debug-location !104; appft.c:66:5

********** MI Scheduling **********
appft:%bb.5 if.end
  From: MOV32mi %stack.7.n12, 1, $noreg, 0, $noreg, 256, debug-location !121 :: (store 4 into %ir.n12); appft.c:81:9
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.7.n12, 1, $noreg, 0, $noreg, 256, debug-location !121 :: (store 4 into %ir.n12); appft.c:81:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.8.n22, 1, $noreg, 0, $noreg, 128, debug-location !122 :: (store 4 into %ir.n22); appft.c:82:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.9.n32, 1, $noreg, 0, $noreg, 128, debug-location !123 :: (store 4 into %ir.n32); appft.c:83:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %16:gr64 = MOV64ri -4682421225964825446
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(4):   MOV64mr %stack.15.ap, 1, $noreg, 0, $noreg, %16:gr64, debug-location !124 :: (store 8 into %ir.ap); appft.c:84:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !125 :: (store 4 into %ir.i); appft.c:85:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !125 :: (store 4 into %ir.i); appft.c:85:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.15.ap, 1, $noreg, 0, $noreg, %16:gr64, debug-location !124 :: (store 8 into %ir.ap); appft.c:84:8
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %16:gr64 = MOV64ri -4682421225964825446
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.9.n32, 1, $noreg, 0, $noreg, 128, debug-location !123 :: (store 4 into %ir.n32); appft.c:83:9
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.8.n22, 1, $noreg, 0, $noreg, 128, debug-location !122 :: (store 4 into %ir.n22); appft.c:82:9
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.7.n12, 1, $noreg, 0, $noreg, 256, debug-location !121 :: (store 4 into %ir.n12); appft.c:81:9
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   MOV32mi %stack.7.n12, 1, $noreg, 0, $noreg, 256, debug-location !121 :: (store 4 into %ir.n12); appft.c:81:9
SU(1):   MOV32mi %stack.8.n22, 1, $noreg, 0, $noreg, 128, debug-location !122 :: (store 4 into %ir.n22); appft.c:82:9
SU(2):   MOV32mi %stack.9.n32, 1, $noreg, 0, $noreg, 128, debug-location !123 :: (store 4 into %ir.n32); appft.c:83:9
SU(3):   %16:gr64 = MOV64ri -4682421225964825446
SU(4):   MOV64mr %stack.15.ap, 1, $noreg, 0, $noreg, %16:gr64, debug-location !124 :: (store 8 into %ir.ap); appft.c:84:8
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !125 :: (store 4 into %ir.i); appft.c:85:12

********** MI Scheduling **********
appft:%bb.7 for.body10
  From: %140:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !132 :: (dereferenceable load 4 from %ir.i); appft.c:86:14
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(3).
Max Pressure: GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %140:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !132 :: (dereferenceable load 4 from %ir.i); appft.c:86:14
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=4 Reg=%140
    SU(1): Data Latency=4 Reg=%140
    SU(6): Out  Latency=0
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   $eax = COPY %140:gr32, debug-location !136; appft.c:86:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%140
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=0 Reg=$eax
    SU(6): Anti Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(2):   CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax, debug-location !136; appft.c:86:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=0
    SU(1): Data Latency=0 Reg=$eax
  Successors:
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$eax
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$edx
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   IDIV32m %stack.9.n32, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !136 :: (dereferenceable load 4 from %ir.n32); appft.c:86:21
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$eax
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$edx
    SU(0): Ord  Latency=0 Barrier
  Successors:
    SU(4): Data Latency=4 Reg=$eax
    SU(10): Ord  Latency=0 Barrier
    SU(9): Ord  Latency=0 Barrier
    SU(7): Ord  Latency=0 Barrier
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %138:gr32 = COPY killed $eax, debug-location !136; appft.c:86:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=$eax
  Successors:
    SU(5): Data Latency=0 Reg=%138
    SU(5): Out  Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(5):   %138:gr32 = SHL32ri %138:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !137; appft.c:86:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=0 Reg=%138
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%138
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%138
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%140
    SU(0): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%140
    SU(7): Data Latency=1 Reg=%140
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.10.ii, 1, $noreg, 0, $noreg, %140:gr32, debug-location !139 :: (store 4 into %ir.ii); appft.c:86:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=%140
    SU(3): Ord  Latency=0 Barrier
  Successors:
    SU(8): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %140:gr32 = nsw IMUL32rr %140:gr32(tied-def 0), %140:gr32, implicit-def dead $eflags, debug-location !142; appft.c:87:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Data Latency=1 Reg=%140
    SU(6): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%140
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.13.ii2, 1, $noreg, 0, $noreg, %140:gr32, debug-location !143 :: (store 4 into %ir.ii2); appft.c:87:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%140
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mi %stack.5.k, 1, $noreg, 0, $noreg, 0, debug-location !144 :: (store 4 into %ir.k); appft.c:88:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mi %stack.5.k, 1, $noreg, 0, $noreg, 0, debug-location !144 :: (store 4 into %ir.k); appft.c:88:16
Bottom Pressure:

  Ready @0c
  BotQ.A TopLatency SU(10) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %stack.13.ii2, 1, $noreg, 0, $noreg, %140:gr32, debug-location !143 :: (store 4 into %ir.ii2); appft.c:87:13
Bottom Pressure:
GR16=2
  LiveReg: %140
  UpdateRegP: SU(9) MOV32mr %stack.13.ii2, 1, $noreg, 0, $noreg, %140:gr32, debug-location !143 :: (store 4 into %ir.ii2); appft.c:87:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 12c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %140:gr32 = nsw IMUL32rr %140:gr32(tied-def 0), %140:gr32, implicit-def dead $eflags, debug-location !142; appft.c:87:18
Bottom Pressure:
GR16=2
  LiveReg: %140
  UpdateRegP: SU(7) MOV32mr %stack.10.ii, 1, $noreg, 0, $noreg, %140:gr32, debug-location !139 :: (store 4 into %ir.ii); appft.c:86:12
              to 
  UpdateRegP: SU(8) %140:gr32 = nsw IMUL32rr %140:gr32(tied-def 0), %140:gr32, implicit-def dead $eflags, debug-location !142; appft.c:87:18
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.10.ii, 1, $noreg, 0, $noreg, %140:gr32, debug-location !139 :: (store 4 into %ir.ii); appft.c:86:12
Bottom Pressure:
GR16=2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
Bottom Pressure:
GR16=4
  LiveReg: %140
  UpdateRegP: SU(1) $eax = COPY %140:gr32, debug-location !136; appft.c:86:21
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  UpdateRegP: SU(6) %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
              to 
  LiveReg: %138
  UpdateRegP: SU(6) %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(6) 2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %138:gr32 = SHL32ri %138:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !137; appft.c:86:28
Bottom Pressure:
GR16=4
  LiveReg: %138
  UpdateRegP: SU(5) %138:gr32 = SHL32ri %138:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !137; appft.c:86:28
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %138:gr32 = COPY killed $eax, debug-location !136; appft.c:86:21
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) IDIV32m %stack.9.n32, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !136 :: (dereferenceable load 4 from %ir.n32); appft.c:86:21
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
  Rescheduling physreg copy SU(4):   %138:gr32 = COPY killed $eax, debug-location !136; appft.c:86:21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !136; appft.c:86:21
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $eax = COPY %140:gr32, debug-location !136; appft.c:86:21
Bottom Pressure:
GR16=2
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @8c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %140:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !132 :: (dereferenceable load 4 from %ir.i); appft.c:86:14
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %140:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !132 :: (dereferenceable load 4 from %ir.i); appft.c:86:14
SU(1):   $eax = COPY %140:gr32, debug-location !136; appft.c:86:21
SU(2):   CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !136; appft.c:86:21
SU(3):   IDIV32m %stack.9.n32, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !136 :: (dereferenceable load 4 from %ir.n32); appft.c:86:21
SU(4):   %138:gr32 = COPY $eax, debug-location !136; appft.c:86:21
SU(5):   %138:gr32 = SHL32ri %138:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !137; appft.c:86:28
SU(6):   %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
SU(7):   MOV32mr %stack.10.ii, 1, $noreg, 0, $noreg, %140:gr32, debug-location !139 :: (store 4 into %ir.ii); appft.c:86:12
SU(8):   %140:gr32 = nsw IMUL32rr %140:gr32(tied-def 0), %140:gr32, implicit-def dead $eflags, debug-location !142; appft.c:87:18
SU(9):   MOV32mr %stack.13.ii2, 1, $noreg, 0, $noreg, %140:gr32, debug-location !143 :: (store 4 into %ir.ii2); appft.c:87:13
SU(10):   MOV32mi %stack.5.k, 1, $noreg, 0, $noreg, 0, debug-location !144 :: (store 4 into %ir.k); appft.c:88:16

********** MI Scheduling **********
appft:%bb.9 for.body14
  From: %147:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !151 :: (dereferenceable load 4 from %ir.k); appft.c:89:18
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(3).
Max Pressure: GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %147:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !151 :: (dereferenceable load 4 from %ir.k); appft.c:89:18
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(6): Data Latency=4 Reg=%147
    SU(1): Data Latency=4 Reg=%147
    SU(6): Out  Latency=0
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   $eax = COPY %147:gr32, debug-location !155; appft.c:89:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%147
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=0 Reg=$eax
    SU(6): Anti Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(2):   CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !155; appft.c:89:25
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Out  Latency=0
    SU(1): Data Latency=0 Reg=$eax
  Successors:
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$eax
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$edx
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   IDIV32m %stack.8.n22, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !155 :: (dereferenceable load 4 from %ir.n22); appft.c:89:25
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$eax
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$edx
    SU(0): Ord  Latency=0 Barrier
  Successors:
    SU(4): Data Latency=4 Reg=$eax
    SU(11): Ord  Latency=0 Barrier
    SU(10): Ord  Latency=0 Barrier
    SU(7): Ord  Latency=0 Barrier
    SU(9): Ord  Latency=0 Barrier
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %145:gr32 = COPY $eax, debug-location !155; appft.c:89:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=$eax
  Successors:
    SU(5): Data Latency=0 Reg=%145
    SU(5): Out  Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(5):   %145:gr32 = SHL32ri %145:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !156; appft.c:89:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Data Latency=0 Reg=%145
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%145
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%147
    SU(0): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%147
    SU(7): Data Latency=1 Reg=%147
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.12.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !158 :: (store 4 into %ir.kk); appft.c:89:16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%147
    SU(3): Ord  Latency=0 Barrier
  Successors:
    SU(8): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %147:gr32 = nsw IMUL32rr %147:gr32(tied-def 0), %147:gr32, implicit-def dead $eflags, debug-location !162; appft.c:90:28
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Data Latency=1 Reg=%147
    SU(6): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%147
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %147:gr32 = nsw ADD32rm %147:gr32(tied-def 0), %stack.13.ii2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !163 :: (dereferenceable load 4 from %ir.ii2); appft.c:90:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=%147
    SU(8): Out  Latency=0
    SU(3): Ord  Latency=0 Barrier
  Successors:
    SU(10): Data Latency=4 Reg=%147
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.14.ik2, 1, $noreg, 0, $noreg, %147:gr32, debug-location !164 :: (store 4 into %ir.ik2); appft.c:90:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(9): Data Latency=4 Reg=%147
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !165 :: (store 4 into %ir.j); appft.c:91:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !165 :: (store 4 into %ir.j); appft.c:91:20
Bottom Pressure:

  Ready @0c
  BotQ.A TopLatency SU(11) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOV32mr %stack.14.ik2, 1, $noreg, 0, $noreg, %147:gr32, debug-location !164 :: (store 4 into %ir.ik2); appft.c:90:17
Bottom Pressure:
GR16=2
  LiveReg: %147
  UpdateRegP: SU(10) MOV32mr %stack.14.ik2, 1, $noreg, 0, $noreg, %147:gr32, debug-location !164 :: (store 4 into %ir.ik2); appft.c:90:17
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 16c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %147:gr32 = nsw ADD32rm %147:gr32(tied-def 0), %stack.13.ii2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !163 :: (dereferenceable load 4 from %ir.ii2); appft.c:90:23
Bottom Pressure:
GR16=2
  LiveReg: %147
  UpdateRegP: SU(9) %147:gr32 = nsw ADD32rm %147:gr32(tied-def 0), %stack.13.ii2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !163 :: (dereferenceable load 4 from %ir.ii2); appft.c:90:23
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(9) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %147:gr32 = nsw IMUL32rr %147:gr32(tied-def 0), %147:gr32, implicit-def dead $eflags, debug-location !162; appft.c:90:28
Bottom Pressure:
GR16=2
  LiveReg: %147
  UpdateRegP: SU(7) MOV32mr %stack.12.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !158 :: (store 4 into %ir.kk); appft.c:89:16
              to 
  UpdateRegP: SU(8) %147:gr32 = nsw IMUL32rr %147:gr32(tied-def 0), %147:gr32, implicit-def dead $eflags, debug-location !162; appft.c:90:28
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.12.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !158 :: (store 4 into %ir.kk); appft.c:89:16
Bottom Pressure:
GR16=2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
Bottom Pressure:
GR16=4
  LiveReg: %147
  UpdateRegP: SU(1) $eax = COPY %147:gr32, debug-location !155; appft.c:89:25
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  UpdateRegP: SU(6) %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
              to 
  LiveReg: %145
  UpdateRegP: SU(6) %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %145:gr32 = SHL32ri %145:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !156; appft.c:89:32
Bottom Pressure:
GR16=4
  LiveReg: %145
  UpdateRegP: SU(5) %145:gr32 = SHL32ri %145:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !156; appft.c:89:32
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %145:gr32 = COPY $eax, debug-location !155; appft.c:89:25
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  Ready @7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) IDIV32m %stack.8.n22, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !155 :: (dereferenceable load 4 from %ir.n22); appft.c:89:25
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @11c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
  Rescheduling physreg copy SU(4):   %145:gr32 = COPY $eax, debug-location !155; appft.c:89:25
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !155; appft.c:89:25
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $eax = COPY %147:gr32, debug-location !155; appft.c:89:25
Bottom Pressure:
GR16=2
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %147:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !151 :: (dereferenceable load 4 from %ir.k); appft.c:89:18
Bottom Pressure:

  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %147:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !151 :: (dereferenceable load 4 from %ir.k); appft.c:89:18
SU(1):   $eax = COPY %147:gr32, debug-location !155; appft.c:89:25
SU(2):   CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !155; appft.c:89:25
SU(3):   IDIV32m %stack.8.n22, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !155 :: (dereferenceable load 4 from %ir.n22); appft.c:89:25
SU(4):   %145:gr32 = COPY $eax, debug-location !155; appft.c:89:25
SU(5):   %145:gr32 = SHL32ri %145:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !156; appft.c:89:32
SU(6):   %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
SU(7):   MOV32mr %stack.12.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !158 :: (store 4 into %ir.kk); appft.c:89:16
SU(8):   %147:gr32 = nsw IMUL32rr %147:gr32(tied-def 0), %147:gr32, implicit-def dead $eflags, debug-location !162; appft.c:90:28
SU(9):   %147:gr32 = nsw ADD32rm %147:gr32(tied-def 0), %stack.13.ii2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !163 :: (dereferenceable load 4 from %ir.ii2); appft.c:90:23
SU(10):   MOV32mr %stack.14.ik2, 1, $noreg, 0, $noreg, %147:gr32, debug-location !164 :: (store 4 into %ir.ik2); appft.c:90:17
SU(11):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !165 :: (store 4 into %ir.j); appft.c:91:20

********** MI Scheduling **********
appft:%bb.11 for.body21
  From: %159:fr64 = COPY killed $xmm0, debug-location !188; appft.c:93:36
    To: JMP_1 %bb.10, debug-location !195; appft.c:91:13
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: XMM0 
Live Out: 
Live Thru: 
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:

Excess PSets: 
SU(0):   %159:fr64 = COPY killed $xmm0, debug-location !188; appft.c:93:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%159
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %160:gr64 = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.i); appft.c:93:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%160
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %161:gr64 = IMUL64rri32 %160:gr64, 1050624, implicit-def dead $eflags, debug-location !190; appft.c:93:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%160
  Successors:
    SU(7): Data Latency=1 Reg=%161
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %162:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.k); appft.c:93:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=%162
    SU(4): Data Latency=4 Reg=%162
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %163:gr64_nosp = COPY %162:gr64_nosp, debug-location !190; appft.c:93:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%162
  Successors:
    SU(5): Data Latency=0 Reg=%163
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %163:gr64_nosp = SHL64ri %163:gr64_nosp(tied-def 0), 12, implicit-def dead $eflags, debug-location !190; appft.c:93:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(4): Data Latency=0 Reg=%163
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%163
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%163
    SU(3): Data Latency=4 Reg=%162
  Successors:
    SU(7): Data Latency=1 Reg=%165
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=%165
    SU(6): Out  Latency=0
    SU(2): Data Latency=1 Reg=%161
  Successors:
    SU(9): Data Latency=1 Reg=%165
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %166:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 4 from %ir.j); appft.c:93:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%166
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%165
    SU(8): Data Latency=4 Reg=%166
    SU(0): Data Latency=0 Reg=%159
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(10):   INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !194 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); appft.c:91:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(8): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10, debug-location !195; appft.c:91:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !194 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); appft.c:91:34
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %165
  UpdateRegP: SU(9) MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %166
  UpdateRegP: SU(9) MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
              to FR32 1    FR32X 1
  LiveReg: %159
  UpdateRegP: SU(9) MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 0 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) %166:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 4 from %ir.j); appft.c:93:31
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %165
  UpdateRegP: SU(7) %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
              to 
  LiveReg: %161
  UpdateRegP: SU(7) %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 2 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %163
  UpdateRegP: SU(6) %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
              to 
  LiveReg: %162
  UpdateRegP: SU(4) %163:gr64_nosp = COPY %162:gr64_nosp, debug-location !190; appft.c:93:17
              to GR16 -2
  UpdateRegP: SU(6) %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
              to GR16 -2
  Ready @2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 5 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %163:gr64_nosp = SHL64ri %163:gr64_nosp(tied-def 0), 12, implicit-def dead $eflags, debug-location !190; appft.c:93:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %163
  UpdateRegP: SU(5) %163:gr64_nosp = SHL64ri %163:gr64_nosp(tied-def 0), 12, implicit-def dead $eflags, debug-location !190; appft.c:93:17
              to GR16 -2
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 4 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %163:gr64_nosp = COPY %162:gr64_nosp, debug-location !190; appft.c:93:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %162:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.k); appft.c:93:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) %161:gr64 = IMUL64rri32 %160:gr64, 1050624, implicit-def dead $eflags, debug-location !190; appft.c:93:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %160
  UpdateRegP: SU(2) %161:gr64 = IMUL64rri32 %160:gr64, 1050624, implicit-def dead $eflags, debug-location !190; appft.c:93:17
              to GR16 -2
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) %160:gr64 = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.i); appft.c:93:25
Bottom Pressure:
FR32=1
FR32X=1
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %159:fr64 = COPY killed $xmm0, debug-location !188; appft.c:93:36
Bottom Pressure:
FR32=1
FR32X=1
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %159:fr64 = COPY killed $xmm0, debug-location !188; appft.c:93:36
SU(1):   %160:gr64 = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.i); appft.c:93:25
SU(2):   %161:gr64 = IMUL64rri32 %160:gr64, 1050624, implicit-def dead $eflags, debug-location !190; appft.c:93:17
SU(3):   %162:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.k); appft.c:93:28
SU(4):   %163:gr64_nosp = COPY %162:gr64_nosp, debug-location !190; appft.c:93:17
SU(5):   %163:gr64_nosp = SHL64ri %163:gr64_nosp(tied-def 0), 12, implicit-def dead $eflags, debug-location !190; appft.c:93:17
SU(6):   %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
SU(7):   %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
SU(8):   %166:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 4 from %ir.j); appft.c:93:31
SU(9):   MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
SU(10):   INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !194 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); appft.c:91:34

********** MI Scheduling **********
appft:%bb.11 for.body21
  From: %155:gr32 = MOV32rm %stack.4.j, 1, $noreg, 0, $noreg, debug-location !172 :: (dereferenceable load 4 from %ir.j); appft.c:92:22
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; appft.c:93:36
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(3).
Max Pressure: GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=1
GR16=6
Live In: 
Live Out: %158 
Live Thru: 
  LiveReg: %158
Top Pressure:

Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %155:gr32 = MOV32rm %stack.4.j, 1, $noreg, 0, $noreg, debug-location !172 :: (dereferenceable load 4 from %ir.j); appft.c:92:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(6): Data Latency=4 Reg=%155
    SU(1): Data Latency=4 Reg=%155
    SU(6): Out  Latency=0
    SU(3): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   $eax = COPY %155:gr32, debug-location !176; appft.c:92:29
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Data Latency=4 Reg=%155
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=0 Reg=$eax
    SU(6): Anti Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(2):   CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !176; appft.c:92:29
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Out  Latency=0
    SU(1): Data Latency=0 Reg=$eax
  Successors:
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$eax
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$edx
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   IDIV32m %stack.7.n12, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !176 :: (dereferenceable load 4 from %ir.n12); appft.c:92:29
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$eax
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$edx
    SU(0): Ord  Latency=0 Barrier
  Successors:
    SU(4): Data Latency=4 Reg=$eax
    SU(7): Ord  Latency=0 Barrier
    SU(11): Ord  Latency=0 Barrier
    SU(9): Ord  Latency=0 Barrier
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %153:gr32 = COPY $eax, debug-location !176; appft.c:92:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=$eax
  Successors:
    SU(5): Data Latency=0 Reg=%153
    SU(5): Out  Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(5):   %153:gr32 = SHL32ri %153:gr32(tied-def 0), 9, implicit-def dead $eflags, debug-location !177; appft.c:92:36
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Data Latency=0 Reg=%153
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%153
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 10
  Predecessors:
    SU(5): Data Latency=1 Reg=%153
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%155
    SU(0): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%155
    SU(7): Data Latency=1 Reg=%155
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.11.jj, 1, $noreg, 0, $noreg, %155:gr32, debug-location !179 :: (store 4 into %ir.jj); appft.c:92:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 9
  Predecessors:
    SU(6): Data Latency=1 Reg=%155
    SU(3): Ord  Latency=0 Barrier
  Successors:
    SU(8): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %155:gr32 = nsw IMUL32rr %155:gr32(tied-def 0), %155:gr32, implicit-def dead $eflags, debug-location !183; appft.c:93:57
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 9
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Data Latency=1 Reg=%155
    SU(6): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%155
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %155:gr32 = nsw ADD32rm %155:gr32(tied-def 0), %stack.14.ik2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (dereferenceable load 4 from %ir.ik2); appft.c:93:62
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(8): Data Latency=1 Reg=%155
    SU(8): Out  Latency=0
    SU(3): Ord  Latency=0 Barrier
  Successors:
    SU(10): Data Latency=4 Reg=%155
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %158:fr64 = CVTSI2SDrr %155:gr32, debug-location !186; appft.c:93:45
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 4
  Predecessors:
    SU(9): Data Latency=4 Reg=%155
  Successors:
    SU(11): Data Latency=1 Reg=%158
    SU(11): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(11):   %158:fr64 = MULSDrm %158:fr64(tied-def 0), %stack.15.ap, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 8 from %ir.ap); appft.c:93:43
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%158
    SU(10): Out  Latency=0
    SU(3): Ord  Latency=0 Barrier
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; appft.c:93:36
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %158:fr64 = MULSDrm %158:fr64(tied-def 0), %stack.15.ap, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 8 from %ir.ap); appft.c:93:43
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %158
  UpdateRegP: SU(11) %158:fr64 = MULSDrm %158:fr64(tied-def 0), %stack.15.ap, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 8 from %ir.ap); appft.c:93:43
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A TopLatency SU(11) 17c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %158:fr64 = CVTSI2SDrr %155:gr32, debug-location !186; appft.c:93:45
Bottom Pressure:
GR16=2
  LiveReg: %155
  UpdateRegP: SU(10) %158:fr64 = CVTSI2SDrr %155:gr32, debug-location !186; appft.c:93:45
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(10) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %155:gr32 = nsw ADD32rm %155:gr32(tied-def 0), %stack.14.ik2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (dereferenceable load 4 from %ir.ik2); appft.c:93:62
Bottom Pressure:
GR16=2
  LiveReg: %155
  UpdateRegP: SU(9) %155:gr32 = nsw ADD32rm %155:gr32(tied-def 0), %stack.14.ik2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (dereferenceable load 4 from %ir.ik2); appft.c:93:62
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %155:gr32 = nsw IMUL32rr %155:gr32(tied-def 0), %155:gr32, implicit-def dead $eflags, debug-location !183; appft.c:93:57
Bottom Pressure:
GR16=2
  LiveReg: %155
  UpdateRegP: SU(7) MOV32mr %stack.11.jj, 1, $noreg, 0, $noreg, %155:gr32, debug-location !179 :: (store 4 into %ir.jj); appft.c:92:20
              to 
  UpdateRegP: SU(8) %155:gr32 = nsw IMUL32rr %155:gr32(tied-def 0), %155:gr32, implicit-def dead $eflags, debug-location !183; appft.c:93:57
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(8) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.11.jj, 1, $noreg, 0, $noreg, %155:gr32, debug-location !179 :: (store 4 into %ir.jj); appft.c:92:20
Bottom Pressure:
GR16=2
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
Bottom Pressure:
GR16=4
  LiveReg: %155
  UpdateRegP: SU(1) $eax = COPY %155:gr32, debug-location !176; appft.c:92:29
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  UpdateRegP: SU(6) %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
              to 
  LiveReg: %153
  UpdateRegP: SU(6) %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(6) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %153:gr32 = SHL32ri %153:gr32(tied-def 0), 9, implicit-def dead $eflags, debug-location !177; appft.c:92:36
Bottom Pressure:
GR16=4
  LiveReg: %153
  UpdateRegP: SU(5) %153:gr32 = SHL32ri %153:gr32(tied-def 0), 9, implicit-def dead $eflags, debug-location !177; appft.c:92:36
              to GR16 -2
  Ready @11c
  BotQ.A BotLatency SU(5) 11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %153:gr32 = COPY $eax, debug-location !176; appft.c:92:29
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  Ready @11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) IDIV32m %stack.7.n12, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !176 :: (dereferenceable load 4 from %ir.n12); appft.c:92:29
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @15c
  BotQ.A BotLatency SU(3) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
  Rescheduling physreg copy SU(4):   %153:gr32 = COPY $eax, debug-location !176; appft.c:92:29
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !176; appft.c:92:29
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @16c
  BotQ.A BotLatency SU(2) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $eax = COPY %155:gr32, debug-location !176; appft.c:92:29
Bottom Pressure:
GR16=2
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %155:gr32 = MOV32rm %stack.4.j, 1, $noreg, 0, $noreg, debug-location !172 :: (dereferenceable load 4 from %ir.j); appft.c:92:22
Bottom Pressure:

  Ready @20c
  BotQ.A BotLatency SU(0) 20c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %155:gr32 = MOV32rm %stack.4.j, 1, $noreg, 0, $noreg, debug-location !172 :: (dereferenceable load 4 from %ir.j); appft.c:92:22
SU(1):   $eax = COPY %155:gr32, debug-location !176; appft.c:92:29
SU(2):   CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !176; appft.c:92:29
SU(3):   IDIV32m %stack.7.n12, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !176 :: (dereferenceable load 4 from %ir.n12); appft.c:92:29
SU(4):   %153:gr32 = COPY $eax, debug-location !176; appft.c:92:29
SU(5):   %153:gr32 = SHL32ri %153:gr32(tied-def 0), 9, implicit-def dead $eflags, debug-location !177; appft.c:92:36
SU(6):   %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
SU(7):   MOV32mr %stack.11.jj, 1, $noreg, 0, $noreg, %155:gr32, debug-location !179 :: (store 4 into %ir.jj); appft.c:92:20
SU(8):   %155:gr32 = nsw IMUL32rr %155:gr32(tied-def 0), %155:gr32, implicit-def dead $eflags, debug-location !183; appft.c:93:57
SU(9):   %155:gr32 = nsw ADD32rm %155:gr32(tied-def 0), %stack.14.ik2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (dereferenceable load 4 from %ir.ik2); appft.c:93:62
SU(10):   %158:fr64 = CVTSI2SDrr %155:gr32, debug-location !186; appft.c:93:45
SU(11):   %158:fr64 = MULSDrm %158:fr64(tied-def 0), %stack.15.ap, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 8 from %ir.ap); appft.c:93:43

********** MI Scheduling **********
appft:%bb.18 if.end46
  From: $edi = MOV32ri 512, debug-location !214; appft.c:102:5
    To: CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !214; appft.c:102:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 512, debug-location !214; appft.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 256, debug-location !214; appft.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !214; appft.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @xnt, debug-location !214; appft.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !214; appft.c:102:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 256, debug-location !214; appft.c:102:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 256, debug-location !214; appft.c:102:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 512, debug-location !214; appft.c:102:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) $rcx = MOV32ri64 @xnt, debug-location !214; appft.c:102:5
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(3):   $rcx = MOV32ri64 @xnt, debug-location !214; appft.c:102:5
SU(0):   $edi = MOV32ri 512, debug-location !214; appft.c:102:5
SU(1):   $esi = MOV32ri 256, debug-location !214; appft.c:102:5
SU(2):   $edx = MOV32ri 256, debug-location !214; appft.c:102:5

********** MI Scheduling **********
appft:%bb.22 if.end52
  From: $edi = MOV32ri 1, debug-location !226; appft.c:107:5
    To: PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 1, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = MOV32ri 512, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 256, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @xnt, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @y, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = MOV32ri 256, debug-location !226; appft.c:107:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 2 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 256, debug-location !226; appft.c:107:5
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 512, debug-location !226; appft.c:107:5
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 1, debug-location !226; appft.c:107:5
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = MOV32ri64 @y, debug-location !226; appft.c:107:5
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @xnt, debug-location !226; appft.c:107:5
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(4):   $r8 = MOV32ri64 @xnt, debug-location !226; appft.c:107:5
SU(5):   $r9 = MOV32ri64 @y, debug-location !226; appft.c:107:5
SU(0):   $edi = MOV32ri 1, debug-location !226; appft.c:107:5
SU(1):   $esi = MOV32ri 512, debug-location !226; appft.c:107:5
SU(2):   $edx = MOV32ri 256, debug-location !226; appft.c:107:5
SU(3):   $ecx = MOV32ri 256, debug-location !226; appft.c:107:5

********** MI Scheduling **********
appft:%bb.25 for.cond59
  From: %36:gr32 = MOV32rm %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kt); appft.c:111:18
    To: JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !238; appft.c:111:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %36:gr32 = MOV32rm %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kt); appft.c:111:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(1):   CMP32rm %36:gr32, %stack.0.niter.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !237 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:111:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%36
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !238; appft.c:111:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %36:gr32, %stack.0.niter.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !237 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:111:21
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %36:gr32 = MOV32rm %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kt); appft.c:111:18
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %36:gr32 = MOV32rm %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kt); appft.c:111:18
SU(1):   CMP32rm %36:gr32, %stack.0.niter.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !237 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:111:21

********** MI Scheduling **********
appft:%bb.28 if.end65
  From: $edi = MOV32ri 512, debug-location !244; appft.c:114:9
    To: CALL64pcrel32 @evolve, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !244; appft.c:114:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 512, debug-location !244; appft.c:114:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 256, debug-location !244; appft.c:114:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !244; appft.c:114:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @xnt, debug-location !244; appft.c:114:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @y, debug-location !244; appft.c:114:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @twiddle, debug-location !244; appft.c:114:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @evolve, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !244; appft.c:114:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 256, debug-location !244; appft.c:114:9
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 0 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 256, debug-location !244; appft.c:114:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 0 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 512, debug-location !244; appft.c:114:9
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = MOV32ri64 @twiddle, debug-location !244; appft.c:114:9
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = MOV32ri64 @y, debug-location !244; appft.c:114:9
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) $rcx = MOV32ri64 @xnt, debug-location !244; appft.c:114:9
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(3):   $rcx = MOV32ri64 @xnt, debug-location !244; appft.c:114:9
SU(4):   $r8 = MOV32ri64 @y, debug-location !244; appft.c:114:9
SU(5):   $r9 = MOV32ri64 @twiddle, debug-location !244; appft.c:114:9
SU(0):   $edi = MOV32ri 512, debug-location !244; appft.c:114:9
SU(1):   $esi = MOV32ri 256, debug-location !244; appft.c:114:9
SU(2):   $edx = MOV32ri 256, debug-location !244; appft.c:114:9

********** MI Scheduling **********
appft:%bb.32 if.end71
  From: $edi = MOV32ri -1, debug-location !256; appft.c:119:9
    To: PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri -1, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = MOV32ri 512, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 256, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = MOV32ri 256, debug-location !256; appft.c:119:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 2 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 256, debug-location !256; appft.c:119:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 512, debug-location !256; appft.c:119:9
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri -1, debug-location !256; appft.c:119:9
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(4):   $r8 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
SU(5):   $r9 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
SU(0):   $edi = MOV32ri -1, debug-location !256; appft.c:119:9
SU(1):   $esi = MOV32ri 512, debug-location !256; appft.c:119:9
SU(2):   $edx = MOV32ri 256, debug-location !256; appft.c:119:9
SU(3):   $ecx = MOV32ri 256, debug-location !256; appft.c:119:9

********** MI Scheduling **********
appft:%bb.36 if.end80
  From: $rdi = COPY %131:gr64, debug-location !268; appft.c:124:9
    To: CALL64pcrel32 @CalculateChecksum, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit killed $r8d, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !268; appft.c:124:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %131:gr64, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %128.sub_32bit:gr64_with_sub_8bit, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 512, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 256, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $r8d = MOV32ri 256, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @xnt, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @CalculateChecksum, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit killed $r8d, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !268; appft.c:124:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = MOV32ri 256, debug-location !268; appft.c:124:9
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 3 2 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = MOV32ri 256, debug-location !268; appft.c:124:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 2 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 512, debug-location !268; appft.c:124:9
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %128.sub_32bit:gr64_with_sub_8bit, debug-location !268; appft.c:124:9
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 
  Cand SU(5) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %131:gr64, debug-location !268; appft.c:124:9
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) $r9 = MOV32ri64 @xnt, debug-location !268; appft.c:124:9
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(5):   $r9 = MOV32ri64 @xnt, debug-location !268; appft.c:124:9
SU(0):   $rdi = COPY %131:gr64, debug-location !268; appft.c:124:9
SU(1):   $esi = COPY %128.sub_32bit:gr64_with_sub_8bit, debug-location !268; appft.c:124:9
SU(2):   $edx = MOV32ri 512, debug-location !268; appft.c:124:9
SU(3):   $ecx = MOV32ri 256, debug-location !268; appft.c:124:9
SU(4):   $r8d = MOV32ri 256, debug-location !268; appft.c:124:9

********** MI Scheduling **********
appft:%bb.36 if.end80
  From: %128:gr64_with_sub_8bit = MOVSX64rm32 %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 4 from %ir.kt); appft.c:124:33
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; appft.c:124:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %128:gr64_with_sub_8bit = MOVSX64rm32 %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 4 from %ir.kt); appft.c:124:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(1):   %130:gr64 = COPY %128:gr64_with_sub_8bit, debug-location !266; appft.c:124:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%128
  Successors:
    SU(2): Data Latency=0 Reg=%130
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %130:gr64 = SHL64ri %130:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !266; appft.c:124:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%130
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%130
  Single Issue       : false;
SU(3):   %131:gr64 = LEA64r %130:gr64, 1, $noreg, @sums, $noreg, debug-location !266; appft.c:124:28
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%130
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; appft.c:124:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %131:gr64 = LEA64r %130:gr64, 1, $noreg, @sums, $noreg, debug-location !266; appft.c:124:28
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %130:gr64 = SHL64ri %130:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !266; appft.c:124:28
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %130:gr64 = COPY %128:gr64_with_sub_8bit, debug-location !266; appft.c:124:28
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %128:gr64_with_sub_8bit = MOVSX64rm32 %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 4 from %ir.kt); appft.c:124:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %128:gr64_with_sub_8bit = MOVSX64rm32 %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 4 from %ir.kt); appft.c:124:33
SU(1):   %130:gr64 = COPY %128:gr64_with_sub_8bit, debug-location !266; appft.c:124:28
SU(2):   %130:gr64 = SHL64ri %130:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !266; appft.c:124:28
SU(3):   %131:gr64 = LEA64r %130:gr64, 1, $noreg, @sums, $noreg, debug-location !266; appft.c:124:28

********** MI Scheduling **********
appft:%bb.41 if.end95
  From: $edi = MOV32ri 512, debug-location !283; appft.c:135:5
    To: CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !283; appft.c:135:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 512, debug-location !283; appft.c:135:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 256, debug-location !283; appft.c:135:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 256, debug-location !283; appft.c:135:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %39:gr32, debug-location !283; appft.c:135:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @sums, debug-location !283; appft.c:135:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9 = COPY %40:gr64, debug-location !283; appft.c:135:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !283; appft.c:135:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9 = COPY %40:gr64, debug-location !283; appft.c:135:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %39:gr32, debug-location !283; appft.c:135:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 256, debug-location !283; appft.c:135:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 256, debug-location !283; appft.c:135:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 512, debug-location !283; appft.c:135:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @sums, debug-location !283; appft.c:135:5
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(4):   $r8 = MOV32ri64 @sums, debug-location !283; appft.c:135:5
SU(0):   $edi = MOV32ri 512, debug-location !283; appft.c:135:5
SU(1):   $esi = MOV32ri 256, debug-location !283; appft.c:135:5
SU(2):   $edx = MOV32ri 256, debug-location !283; appft.c:135:5
SU(3):   $ecx = COPY %39:gr32, debug-location !283; appft.c:135:5
SU(5):   $r9 = COPY %40:gr64, debug-location !283; appft.c:135:5

********** MI Scheduling **********
appft:%bb.41 if.end95
  From: %39:gr32 = MOV32rm %stack.0.niter.addr, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:135:24
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !283; appft.c:135:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm %stack.0.niter.addr, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:135:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %40:gr64 = MOV64rm %stack.2.verified.addr, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 8 from %ir.verified.addr); appft.c:135:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !283; appft.c:135:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %40:gr64 = MOV64rm %stack.2.verified.addr, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 8 from %ir.verified.addr); appft.c:135:37
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm %stack.0.niter.addr, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:135:24
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %39:gr32 = MOV32rm %stack.0.niter.addr, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:135:24
SU(1):   %40:gr64 = MOV64rm %stack.2.verified.addr, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 8 from %ir.verified.addr); appft.c:135:37

********** MI Scheduling **********
appft:%bb.43 if.end98
  From: %46:fr64 = COPY killed $xmm0, debug-location !289; appft.c:140:19
    To: JCC_1 %bb.45, 4, implicit killed $eflags, debug-location !294; appft.c:141:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %46:fr64 = COPY killed $xmm0, debug-location !289; appft.c:140:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%46
  Single Issue       : false;
SU(1):   %47:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !290 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:140:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%47
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %47:gr64, 1, $noreg, 0, $noreg, %46:fr64, debug-location !291 :: (store 8 into %ir.51); appft.c:140:17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%47
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=0 Reg=%46
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from @timers_enabled); appft.c:141:10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.45, 4, implicit killed $eflags, debug-location !294; appft.c:141:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from @timers_enabled); appft.c:141:10
  Ready @4c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %47:gr64, 1, $noreg, 0, $noreg, %46:fr64, debug-location !291 :: (store 8 into %ir.51); appft.c:140:17
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %47:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !290 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:140:6
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %46:fr64 = COPY killed $xmm0, debug-location !289; appft.c:140:19
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %46:fr64 = COPY killed $xmm0, debug-location !289; appft.c:140:19
SU(1):   %47:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !290 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:140:6
SU(2):   MOVSDmr %47:gr64, 1, $noreg, 0, $noreg, %46:fr64, debug-location !291 :: (store 8 into %ir.51); appft.c:140:17
SU(3):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from @timers_enabled); appft.c:141:10

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !324; appft.c:158:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !324; appft.c:158:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !324; appft.c:158:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.15, debug-location !324; appft.c:158:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %107:fr64, debug-location !324; appft.c:158:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !324; appft.c:158:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !324; appft.c:158:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !324; appft.c:158:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %107:fr64, debug-location !324; appft.c:158:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.15, debug-location !324; appft.c:158:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !324; appft.c:158:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !324; appft.c:158:5
SU(1):   $rsi = MOV32ri64 @.str.15, debug-location !324; appft.c:158:5
SU(2):   $xmm0 = COPY %107:fr64, debug-location !324; appft.c:158:5
SU(3):   $al = MOV8ri 1, debug-location !324; appft.c:158:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: %106:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:158:61
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !324; appft.c:158:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %106:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:158:61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%106
  Single Issue       : false;
SU(1):   %107:fr64 = MOVSDrm_alt %106:gr64, 1, $noreg, 0, $noreg, debug-location !323 :: (load 8 from %ir.53); appft.c:158:60
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%106
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !324; appft.c:158:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %107:fr64 = MOVSDrm_alt %106:gr64, 1, $noreg, 0, $noreg, debug-location !323 :: (load 8 from %ir.53); appft.c:158:60
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %106:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:158:61
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %106:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:158:61
SU(1):   %107:fr64 = MOVSDrm_alt %106:gr64, 1, $noreg, 0, $noreg, debug-location !323 :: (load 8 from %ir.53); appft.c:158:60

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !321; appft.c:157:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !321; appft.c:157:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !321; appft.c:157:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.14, debug-location !321; appft.c:157:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %103:fr64, debug-location !321; appft.c:157:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !321; appft.c:157:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !321; appft.c:157:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !321; appft.c:157:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %103:fr64, debug-location !321; appft.c:157:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.14, debug-location !321; appft.c:157:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !321; appft.c:157:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !321; appft.c:157:5
SU(1):   $rsi = MOV32ri64 @.str.14, debug-location !321; appft.c:157:5
SU(2):   $xmm0 = COPY %103:fr64, debug-location !321; appft.c:157:5
SU(3):   $al = MOV8ri 1, debug-location !321; appft.c:157:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !319; appft.c:156:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !319; appft.c:156:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !319; appft.c:156:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.13, debug-location !319; appft.c:156:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %99:fr64, debug-location !319; appft.c:156:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !319; appft.c:156:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !319; appft.c:156:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !319; appft.c:156:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %99:fr64, debug-location !319; appft.c:156:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.13, debug-location !319; appft.c:156:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !319; appft.c:156:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !319; appft.c:156:5
SU(1):   $rsi = MOV32ri64 @.str.13, debug-location !319; appft.c:156:5
SU(2):   $xmm0 = COPY %99:fr64, debug-location !319; appft.c:156:5
SU(3):   $al = MOV8ri 1, debug-location !319; appft.c:156:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !317; appft.c:155:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !317; appft.c:155:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !317; appft.c:155:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.12, debug-location !317; appft.c:155:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %95:fr64, debug-location !317; appft.c:155:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !317; appft.c:155:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !317; appft.c:155:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !317; appft.c:155:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %95:fr64, debug-location !317; appft.c:155:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.12, debug-location !317; appft.c:155:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !317; appft.c:155:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !317; appft.c:155:5
SU(1):   $rsi = MOV32ri64 @.str.12, debug-location !317; appft.c:155:5
SU(2):   $xmm0 = COPY %95:fr64, debug-location !317; appft.c:155:5
SU(3):   $al = MOV8ri 1, debug-location !317; appft.c:155:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !315; appft.c:154:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !315; appft.c:154:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !315; appft.c:154:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.11, debug-location !315; appft.c:154:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %91:fr64, debug-location !315; appft.c:154:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !315; appft.c:154:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !315; appft.c:154:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !315; appft.c:154:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %91:fr64, debug-location !315; appft.c:154:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.11, debug-location !315; appft.c:154:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !315; appft.c:154:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !315; appft.c:154:5
SU(1):   $rsi = MOV32ri64 @.str.11, debug-location !315; appft.c:154:5
SU(2):   $xmm0 = COPY %91:fr64, debug-location !315; appft.c:154:5
SU(3):   $al = MOV8ri 1, debug-location !315; appft.c:154:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !313; appft.c:153:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !313; appft.c:153:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !313; appft.c:153:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.10, debug-location !313; appft.c:153:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %87:fr64, debug-location !313; appft.c:153:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !313; appft.c:153:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !313; appft.c:153:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !313; appft.c:153:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %87:fr64, debug-location !313; appft.c:153:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.10, debug-location !313; appft.c:153:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !313; appft.c:153:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !313; appft.c:153:5
SU(1):   $rsi = MOV32ri64 @.str.10, debug-location !313; appft.c:153:5
SU(2):   $xmm0 = COPY %87:fr64, debug-location !313; appft.c:153:5
SU(3):   $al = MOV8ri 1, debug-location !313; appft.c:153:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !311; appft.c:152:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !311; appft.c:152:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !311; appft.c:152:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.9, debug-location !311; appft.c:152:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %83:fr64, debug-location !311; appft.c:152:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !311; appft.c:152:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !311; appft.c:152:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !311; appft.c:152:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %83:fr64, debug-location !311; appft.c:152:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.9, debug-location !311; appft.c:152:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !311; appft.c:152:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !311; appft.c:152:5
SU(1):   $rsi = MOV32ri64 @.str.9, debug-location !311; appft.c:152:5
SU(2):   $xmm0 = COPY %83:fr64, debug-location !311; appft.c:152:5
SU(3):   $al = MOV8ri 1, debug-location !311; appft.c:152:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !309; appft.c:151:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !309; appft.c:151:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !309; appft.c:151:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.8, debug-location !309; appft.c:151:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %79:fr64, debug-location !309; appft.c:151:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !309; appft.c:151:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !309; appft.c:151:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !309; appft.c:151:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %79:fr64, debug-location !309; appft.c:151:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.8, debug-location !309; appft.c:151:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !309; appft.c:151:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !309; appft.c:151:5
SU(1):   $rsi = MOV32ri64 @.str.8, debug-location !309; appft.c:151:5
SU(2):   $xmm0 = COPY %79:fr64, debug-location !309; appft.c:151:5
SU(3):   $al = MOV8ri 1, debug-location !309; appft.c:151:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !307; appft.c:150:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !307; appft.c:150:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !307; appft.c:150:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.7, debug-location !307; appft.c:150:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %75:fr64, debug-location !307; appft.c:150:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !307; appft.c:150:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !307; appft.c:150:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !307; appft.c:150:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %75:fr64, debug-location !307; appft.c:150:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.7, debug-location !307; appft.c:150:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !307; appft.c:150:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !307; appft.c:150:5
SU(1):   $rsi = MOV32ri64 @.str.7, debug-location !307; appft.c:150:5
SU(2):   $xmm0 = COPY %75:fr64, debug-location !307; appft.c:150:5
SU(3):   $al = MOV8ri 1, debug-location !307; appft.c:150:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !305; appft.c:149:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !305; appft.c:149:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !305; appft.c:149:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.6, debug-location !305; appft.c:149:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %71:fr64, debug-location !305; appft.c:149:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !305; appft.c:149:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !305; appft.c:149:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !305; appft.c:149:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %71:fr64, debug-location !305; appft.c:149:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.6, debug-location !305; appft.c:149:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !305; appft.c:149:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !305; appft.c:149:5
SU(1):   $rsi = MOV32ri64 @.str.6, debug-location !305; appft.c:149:5
SU(2):   $xmm0 = COPY %71:fr64, debug-location !305; appft.c:149:5
SU(3):   $al = MOV8ri 1, debug-location !305; appft.c:149:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !303; appft.c:148:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !303; appft.c:148:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !303; appft.c:148:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.5, debug-location !303; appft.c:148:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %67:fr64, debug-location !303; appft.c:148:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !303; appft.c:148:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !303; appft.c:148:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !303; appft.c:148:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %67:fr64, debug-location !303; appft.c:148:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.5, debug-location !303; appft.c:148:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !303; appft.c:148:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !303; appft.c:148:5
SU(1):   $rsi = MOV32ri64 @.str.5, debug-location !303; appft.c:148:5
SU(2):   $xmm0 = COPY %67:fr64, debug-location !303; appft.c:148:5
SU(3):   $al = MOV8ri 1, debug-location !303; appft.c:148:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !301; appft.c:147:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !301; appft.c:147:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !301; appft.c:147:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.4, debug-location !301; appft.c:147:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %63:fr64, debug-location !301; appft.c:147:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !301; appft.c:147:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !301; appft.c:147:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !301; appft.c:147:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %63:fr64, debug-location !301; appft.c:147:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.4, debug-location !301; appft.c:147:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !301; appft.c:147:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !301; appft.c:147:5
SU(1):   $rsi = MOV32ri64 @.str.4, debug-location !301; appft.c:147:5
SU(2):   $xmm0 = COPY %63:fr64, debug-location !301; appft.c:147:5
SU(3):   $al = MOV8ri 1, debug-location !301; appft.c:147:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !299; appft.c:146:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !299; appft.c:146:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !299; appft.c:146:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.3, debug-location !299; appft.c:146:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %59:fr64, debug-location !299; appft.c:146:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !299; appft.c:146:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !299; appft.c:146:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !299; appft.c:146:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %59:fr64, debug-location !299; appft.c:146:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.3, debug-location !299; appft.c:146:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !299; appft.c:146:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !299; appft.c:146:5
SU(1):   $rsi = MOV32ri64 @.str.3, debug-location !299; appft.c:146:5
SU(2):   $xmm0 = COPY %59:fr64, debug-location !299; appft.c:146:5
SU(3):   $al = MOV8ri 1, debug-location !299; appft.c:146:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str.1, debug-location !297; appft.c:145:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !297; appft.c:145:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !297; appft.c:145:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.2, debug-location !297; appft.c:145:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %53:fr64, debug-location !297; appft.c:145:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !297; appft.c:145:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !297; appft.c:145:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !297; appft.c:145:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %53:fr64, debug-location !297; appft.c:145:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.2, debug-location !297; appft.c:145:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !297; appft.c:145:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !297; appft.c:145:5
SU(1):   $rsi = MOV32ri64 @.str.2, debug-location !297; appft.c:145:5
SU(2):   $xmm0 = COPY %53:fr64, debug-location !297; appft.c:145:5
SU(3):   $al = MOV8ri 1, debug-location !297; appft.c:145:5

********** MI Scheduling **********
appft:%bb.44 if.end102
  From: $rdi = MOV32ri64 @.str, debug-location !295; appft.c:144:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !295; appft.c:144:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str, debug-location !295; appft.c:144:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !295; appft.c:144:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !295; appft.c:144:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !295; appft.c:144:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str, debug-location !295; appft.c:144:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str, debug-location !295; appft.c:144:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !295; appft.c:144:5

********** INTERVALS **********
AH [1568r,1584r:9)[1584r,1600r:8)[1600r,1608r:7)[1872r,1888r:6)[1888r,1904r:5)[1904r,1912r:4)[2208r,2224r:3)[2224r,2240r:2)[2240r,2248r:1)[6688r,6688d:0)[6704r,6704d:24)[6960r,6960d:23)[7184r,7184d:22)[7408r,7408d:21)[7632r,7632d:20)[7856r,7856d:19)[8080r,8080d:18)[8304r,8304d:17)[8528r,8528d:16)[8752r,8752d:15)[8976r,8976d:14)[9200r,9200d:13)[9424r,9424d:12)[9648r,9648d:11)[9808r,9808d:10)  0@6688r 1@2240r 2@2224r 3@2208r 4@1904r 5@1888r 6@1872r 7@1600r 8@1584r 9@1568r 10@9808r 11@9648r 12@9424r 13@9200r 14@8976r 15@8752r 16@8528r 17@8304r 18@8080r 19@7856r 20@7632r 21@7408r 22@7184r 23@6960r 24@6704r
AL [1568r,1584r:23)[1584r,1600r:22)[1600r,1608r:21)[1872r,1888r:20)[1888r,1904r:19)[1904r,1912r:18)[2208r,2224r:17)[2224r,2240r:16)[2240r,2248r:15)[6688r,6704r:0)[6704r,6704d:38)[6944r,6960r:14)[6960r,6960d:37)[7168r,7184r:13)[7184r,7184d:36)[7392r,7408r:12)[7408r,7408d:35)[7616r,7632r:11)[7632r,7632d:34)[7840r,7856r:10)[7856r,7856d:33)[8064r,8080r:9)[8080r,8080d:32)[8288r,8304r:8)[8304r,8304d:31)[8512r,8528r:7)[8528r,8528d:30)[8736r,8752r:6)[8752r,8752d:29)[8960r,8976r:5)[8976r,8976d:28)[9184r,9200r:4)[9200r,9200d:27)[9408r,9424r:3)[9424r,9424d:26)[9632r,9648r:2)[9648r,9648d:25)[9792r,9808r:1)[9808r,9808d:24)  0@6688r 1@9792r 2@9632r 3@9408r 4@9184r 5@8960r 6@8736r 7@8512r 8@8288r 9@8064r 10@7840r 11@7616r 12@7392r 13@7168r 14@6944r 15@2240r 16@2224r 17@2208r 18@1904r 19@1888r 20@1872r 21@1600r 22@1584r 23@1568r 24@9808r 25@9648r 26@9424r 27@9200r 28@8976r 29@8752r 30@8528r 31@8304r 32@8080r 33@7856r 34@7632r 35@7408r 36@7184r 37@6960r 38@6704r
CH [528r,560r:5)[1016r,1056r:0)[3280r,3312r:6)[3848r,3888r:1)[4544r,4608r:7)[5032r,5072r:3)[5600r,5616r:2)[6152r,6168r:4)  0@1016r 1@3848r 2@5600r 3@5032r 4@6152r 5@528r 6@3280r 7@4544r
CL [528r,560r:5)[1016r,1056r:0)[3280r,3312r:6)[3848r,3888r:1)[4544r,4608r:7)[5032r,5072r:3)[5600r,5616r:2)[6152r,6168r:4)  0@1016r 1@3848r 2@5600r 3@5032r 4@6152r 5@528r 6@3280r 7@4544r
DH [0B,16r:0)[552r,560r:14)[1008r,1056r:13)[1584r,1600r:6)[1600r,1600d:5)[1888r,1904r:4)[1904r,1904d:3)[2224r,2240r:2)[2240r,2240d:1)[3304r,3312r:12)[3840r,3888r:11)[4600r,4608r:9)[5024r,5072r:8)[5592r,5616r:7)[6144r,6168r:10)  0@0B-phi 1@2240r 2@2224r 3@1904r 4@1888r 5@1600r 6@1584r 7@5592r 8@5024r 9@4600r 10@6144r 11@3840r 12@3304r 13@1008r 14@552r
DIL [0B,48r:0)[240r,256r:1)[368r,384r:43)[536r,560r:42)[608r,640r:41)[704r,736r:40)[800r,832r:39)[996r,1056r:38)[1104r,1120r:37)[1168r,1184r:36)[1312r,1328r:35)[2944r,2960r:34)[3104r,3120r:33)[3288r,3312r:32)[3424r,3440r:31)[3584r,3600r:30)[3828r,3888r:29)[4016r,4032r:28)[4416r,4432r:9)[4584r,4608r:8)[4704r,4720r:7)[4848r,4864r:6)[5012r,5072r:5)[5184r,5200r:4)[5328r,5344r:3)[5576r,5616r:44)[5696r,5712r:2)[5904r,5920r:27)[6132r,6168r:26)[6288r,6304r:25)[6384r,6400r:24)[6448r,6464r:23)[6672r,6704r:59)[6768r,6784r:22)[6896r,6960r:58)[7024r,7040r:21)[7120r,7184r:57)[7248r,7264r:20)[7344r,7408r:56)[7472r,7488r:19)[7568r,7632r:55)[7696r,7712r:18)[7792r,7856r:54)[7920r,7936r:17)[8016r,8080r:53)[8144r,8160r:16)[8240r,8304r:52)[8368r,8384r:15)[8464r,8528r:51)[8592r,8608r:14)[8688r,8752r:50)[8816r,8832r:13)[8912r,8976r:49)[9040r,9056r:12)[9136r,9200r:48)[9264r,9280r:11)[9360r,9424r:47)[9488r,9504r:10)[9584r,9648r:46)[9744r,9808r:45)  0@0B-phi 1@240r 2@5696r 3@5328r 4@5184r 5@5012r 6@4848r 7@4704r 8@4584r 9@4416r 10@9488r 11@9264r 12@9040r 13@8816r 14@8592r 15@8368r 16@8144r 17@7920r 18@7696r 19@7472r 20@7248r 21@7024r 22@6768r 23@6448r 24@6384r 25@6288r 26@6132r 27@5904r 28@4016r 29@3828r 30@3584r 31@3424r 32@3288r 33@3104r 34@2944r 35@1312r 36@1168r 37@1104r 38@996r 39@800r 40@704r 41@608r 42@536r 43@368r 44@5576r 45@9744r 46@9584r 47@9360r 48@9136r 49@8912r 50@8688r 51@8464r 52@8240r 53@8016r 54@7792r 55@7568r 56@7344r 57@7120r 58@6896r 59@6672r
DIH [0B,48r:0)[240r,256r:1)[368r,384r:43)[536r,560r:42)[608r,640r:41)[704r,736r:40)[800r,832r:39)[996r,1056r:38)[1104r,1120r:37)[1168r,1184r:36)[1312r,1328r:35)[2944r,2960r:34)[3104r,3120r:33)[3288r,3312r:32)[3424r,3440r:31)[3584r,3600r:30)[3828r,3888r:29)[4016r,4032r:28)[4416r,4432r:9)[4584r,4608r:8)[4704r,4720r:7)[4848r,4864r:6)[5012r,5072r:5)[5184r,5200r:4)[5328r,5344r:3)[5576r,5616r:44)[5696r,5712r:2)[5904r,5920r:27)[6132r,6168r:26)[6288r,6304r:25)[6384r,6400r:24)[6448r,6464r:23)[6672r,6704r:59)[6768r,6784r:22)[6896r,6960r:58)[7024r,7040r:21)[7120r,7184r:57)[7248r,7264r:20)[7344r,7408r:56)[7472r,7488r:19)[7568r,7632r:55)[7696r,7712r:18)[7792r,7856r:54)[7920r,7936r:17)[8016r,8080r:53)[8144r,8160r:16)[8240r,8304r:52)[8368r,8384r:15)[8464r,8528r:51)[8592r,8608r:14)[8688r,8752r:50)[8816r,8832r:13)[8912r,8976r:49)[9040r,9056r:12)[9136r,9200r:48)[9264r,9280r:11)[9360r,9424r:47)[9488r,9504r:10)[9584r,9648r:46)[9744r,9808r:45)  0@0B-phi 1@240r 2@5696r 3@5328r 4@5184r 5@5012r 6@4848r 7@4704r 8@4584r 9@4416r 10@9488r 11@9264r 12@9040r 13@8816r 14@8592r 15@8368r 16@8144r 17@7920r 18@7696r 19@7472r 20@7248r 21@7024r 22@6768r 23@6448r 24@6384r 25@6288r 26@6132r 27@5904r 28@4016r 29@3828r 30@3584r 31@3424r 32@3288r 33@3104r 34@2944r 35@1312r 36@1168r 37@1104r 38@996r 39@800r 40@704r 41@608r 42@536r 43@368r 44@5576r 45@9744r 46@9584r 47@9360r 48@9136r 49@8912r 50@8688r 51@8464r 52@8240r 53@8016r 54@7792r 55@7568r 56@7344r 57@7120r 58@6896r 59@6672r
DL [0B,16r:0)[552r,560r:14)[1008r,1056r:13)[1584r,1600r:6)[1600r,1600d:5)[1888r,1904r:4)[1904r,1904d:3)[2224r,2240r:2)[2240r,2240d:1)[3304r,3312r:12)[3840r,3888r:11)[4600r,4608r:9)[5024r,5072r:8)[5592r,5616r:7)[6144r,6168r:10)  0@0B-phi 1@2240r 2@2224r 3@1904r 4@1888r 5@1600r 6@1584r 7@5592r 8@5024r 9@4600r 10@6144r 11@3840r 12@3304r 13@1008r 14@552r
HAX [1568r,1584r:9)[1584r,1600r:8)[1600r,1608r:7)[1872r,1888r:6)[1888r,1904r:5)[1904r,1912r:4)[2208r,2224r:3)[2224r,2240r:2)[2240r,2248r:1)[6688r,6688d:0)[6704r,6704d:24)[6960r,6960d:23)[7184r,7184d:22)[7408r,7408d:21)[7632r,7632d:20)[7856r,7856d:19)[8080r,8080d:18)[8304r,8304d:17)[8528r,8528d:16)[8752r,8752d:15)[8976r,8976d:14)[9200r,9200d:13)[9424r,9424d:12)[9648r,9648d:11)[9808r,9808d:10)  0@6688r 1@2240r 2@2224r 3@2208r 4@1904r 5@1888r 6@1872r 7@1600r 8@1584r 9@1568r 10@9808r 11@9648r 12@9424r 13@9200r 14@8976r 15@8752r 16@8528r 17@8304r 18@8080r 19@7856r 20@7632r 21@7408r 22@7184r 23@6960r 24@6704r
HCX [528r,560r:5)[1016r,1056r:0)[3280r,3312r:6)[3848r,3888r:1)[4544r,4608r:7)[5032r,5072r:3)[5600r,5616r:2)[6152r,6168r:4)  0@1016r 1@3848r 2@5600r 3@5032r 4@6152r 5@528r 6@3280r 7@4544r
HDI [0B,48r:0)[240r,256r:1)[368r,384r:43)[536r,560r:42)[608r,640r:41)[704r,736r:40)[800r,832r:39)[996r,1056r:38)[1104r,1120r:37)[1168r,1184r:36)[1312r,1328r:35)[2944r,2960r:34)[3104r,3120r:33)[3288r,3312r:32)[3424r,3440r:31)[3584r,3600r:30)[3828r,3888r:29)[4016r,4032r:28)[4416r,4432r:9)[4584r,4608r:8)[4704r,4720r:7)[4848r,4864r:6)[5012r,5072r:5)[5184r,5200r:4)[5328r,5344r:3)[5576r,5616r:44)[5696r,5712r:2)[5904r,5920r:27)[6132r,6168r:26)[6288r,6304r:25)[6384r,6400r:24)[6448r,6464r:23)[6672r,6704r:59)[6768r,6784r:22)[6896r,6960r:58)[7024r,7040r:21)[7120r,7184r:57)[7248r,7264r:20)[7344r,7408r:56)[7472r,7488r:19)[7568r,7632r:55)[7696r,7712r:18)[7792r,7856r:54)[7920r,7936r:17)[8016r,8080r:53)[8144r,8160r:16)[8240r,8304r:52)[8368r,8384r:15)[8464r,8528r:51)[8592r,8608r:14)[8688r,8752r:50)[8816r,8832r:13)[8912r,8976r:49)[9040r,9056r:12)[9136r,9200r:48)[9264r,9280r:11)[9360r,9424r:47)[9488r,9504r:10)[9584r,9648r:46)[9744r,9808r:45)  0@0B-phi 1@240r 2@5696r 3@5328r 4@5184r 5@5012r 6@4848r 7@4704r 8@4584r 9@4416r 10@9488r 11@9264r 12@9040r 13@8816r 14@8592r 15@8368r 16@8144r 17@7920r 18@7696r 19@7472r 20@7248r 21@7024r 22@6768r 23@6448r 24@6384r 25@6288r 26@6132r 27@5904r 28@4016r 29@3828r 30@3584r 31@3424r 32@3288r 33@3104r 34@2944r 35@1312r 36@1168r 37@1104r 38@996r 39@800r 40@704r 41@608r 42@536r 43@368r 44@5576r 45@9744r 46@9584r 47@9360r 48@9136r 49@8912r 50@8688r 51@8464r 52@8240r 53@8016r 54@7792r 55@7568r 56@7344r 57@7120r 58@6896r 59@6672r
HDX [0B,16r:0)[552r,560r:14)[1008r,1056r:13)[1584r,1600r:6)[1600r,1600d:5)[1888r,1904r:4)[1904r,1904d:3)[2224r,2240r:2)[2240r,2240d:1)[3304r,3312r:12)[3840r,3888r:11)[4600r,4608r:9)[5024r,5072r:8)[5592r,5616r:7)[6144r,6168r:10)  0@0B-phi 1@2240r 2@2224r 3@1904r 4@1888r 5@1600r 6@1584r 7@5592r 8@5024r 9@4600r 10@6144r 11@3840r 12@3304r 13@1008r 14@552r
SIL [0B,32r:0)[544r,560r:8)[624r,640r:25)[720r,736r:24)[816r,832r:23)[1000r,1056r:7)[3296r,3312r:6)[3832r,3888r:5)[4592r,4608r:3)[5016r,5072r:2)[5584r,5616r:1)[6136r,6168r:4)[6912r,6960r:22)[7136r,7184r:21)[7360r,7408r:20)[7584r,7632r:19)[7808r,7856r:18)[8032r,8080r:17)[8256r,8304r:16)[8480r,8528r:15)[8704r,8752r:14)[8928r,8976r:13)[9152r,9200r:12)[9376r,9424r:11)[9600r,9648r:10)[9760r,9808r:9)  0@0B-phi 1@5584r 2@5016r 3@4592r 4@6136r 5@3832r 6@3296r 7@1000r 8@544r 9@9760r 10@9600r 11@9376r 12@9152r 13@8928r 14@8704r 15@8480r 16@8256r 17@8032r 18@7808r 19@7584r 20@7360r 21@7136r 22@6912r 23@816r 24@720r 25@624r
SIH [0B,32r:0)[544r,560r:8)[624r,640r:25)[720r,736r:24)[816r,832r:23)[1000r,1056r:7)[3296r,3312r:6)[3832r,3888r:5)[4592r,4608r:3)[5016r,5072r:2)[5584r,5616r:1)[6136r,6168r:4)[6912r,6960r:22)[7136r,7184r:21)[7360r,7408r:20)[7584r,7632r:19)[7808r,7856r:18)[8032r,8080r:17)[8256r,8304r:16)[8480r,8528r:15)[8704r,8752r:14)[8928r,8976r:13)[9152r,9200r:12)[9376r,9424r:11)[9600r,9648r:10)[9760r,9808r:9)  0@0B-phi 1@5584r 2@5016r 3@4592r 4@6136r 5@3832r 6@3296r 7@1000r 8@544r 9@9760r 10@9600r 11@9376r 12@9152r 13@8928r 14@8704r 15@8480r 16@8256r 17@8032r 18@7808r 19@7584r 20@7360r 21@7136r 22@6912r 23@816r 24@720r 25@624r
HSI [0B,32r:0)[544r,560r:8)[624r,640r:25)[720r,736r:24)[816r,832r:23)[1000r,1056r:7)[3296r,3312r:6)[3832r,3888r:5)[4592r,4608r:3)[5016r,5072r:2)[5584r,5616r:1)[6136r,6168r:4)[6912r,6960r:22)[7136r,7184r:21)[7360r,7408r:20)[7584r,7632r:19)[7808r,7856r:18)[8032r,8080r:17)[8256r,8304r:16)[8480r,8528r:15)[8704r,8752r:14)[8928r,8976r:13)[9152r,9200r:12)[9376r,9424r:11)[9600r,9648r:10)[9760r,9808r:9)  0@0B-phi 1@5584r 2@5016r 3@4592r 4@6136r 5@3832r 6@3296r 7@1000r 8@544r 9@9760r 10@9600r 11@9376r 12@9152r 13@8928r 14@8704r 15@8480r 16@8256r 17@8032r 18@7808r 19@7584r 20@7360r 21@7136r 22@6912r 23@816r 24@720r 25@624r
R8B [976r,1056r:1)[3808r,3888r:3)[4560r,4608r:5)[4992r,5072r:4)[5608r,5616r:0)[6128r,6168r:2)  0@5608r 1@976r 2@6128r 3@3808r 4@4992r 5@4560r
R8BH [976r,1056r:1)[3808r,3888r:3)[4560r,4608r:5)[4992r,5072r:4)[5608r,5616r:0)[6128r,6168r:2)  0@5608r 1@976r 2@6128r 3@3808r 4@4992r 5@4560r
R8WH [976r,1056r:1)[3808r,3888r:3)[4560r,4608r:5)[4992r,5072r:4)[5608r,5616r:0)[6128r,6168r:2)  0@5608r 1@976r 2@6128r 3@3808r 4@4992r 5@4560r
%0 [48r,64r:0)  0@48r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [16r,96r:0)  0@16r weight:0.000000e+00
%9 [592r,5792B:0)  0@592r weight:0.000000e+00
%10 [688r,5792B:0)  0@688r weight:0.000000e+00
%11 [784r,5792B:0)  0@784r weight:0.000000e+00
%16 [1424r,1440r:0)  0@1424r weight:0.000000e+00
%36 [4256r,4272r:0)  0@4256r weight:0.000000e+00
%39 [5968r,6152r:0)  0@5968r weight:0.000000e+00
%40 [5984r,6160r:0)  0@5984r weight:0.000000e+00
%46 [6496r,6528r:0)  0@6496r weight:0.000000e+00
%47 [6512r,6528r:0)  0@6512r weight:0.000000e+00
%53 [6816r,6928r:0)  0@6816r weight:0.000000e+00
%59 [7072r,7152r:0)  0@7072r weight:0.000000e+00
%63 [7296r,7376r:0)  0@7296r weight:0.000000e+00
%67 [7520r,7600r:0)  0@7520r weight:0.000000e+00
%71 [7744r,7824r:0)  0@7744r weight:0.000000e+00
%75 [7968r,8048r:0)  0@7968r weight:0.000000e+00
%79 [8192r,8272r:0)  0@8192r weight:0.000000e+00
%83 [8416r,8496r:0)  0@8416r weight:0.000000e+00
%87 [8640r,8720r:0)  0@8640r weight:0.000000e+00
%91 [8864r,8944r:0)  0@8864r weight:0.000000e+00
%95 [9088r,9168r:0)  0@9088r weight:0.000000e+00
%99 [9312r,9392r:0)  0@9312r weight:0.000000e+00
%103 [9536r,9616r:0)  0@9536r weight:0.000000e+00
%106 [9680r,9696r:0)  0@9680r weight:0.000000e+00
%107 [9696r,9776r:0)  0@9696r weight:0.000000e+00
%128 [5392r,5584r:0)  0@5392r weight:0.000000e+00
%130 [5424r,5440r:0)[5440r,5456r:1)  0@5424r 1@5440r weight:0.000000e+00
%131 [5456r,5576r:0)  0@5456r weight:0.000000e+00
%138 [1608r,1648r:0)[1648r,1680r:1)  0@1608r 1@1648r weight:0.000000e+00
%140 [1552r,1680r:2)[1680r,1728r:0)[1728r,1744r:1)  0@1680r 1@1728r 2@1552r weight:0.000000e+00
%145 [1912r,1952r:0)[1952r,1984r:1)  0@1912r 1@1952r weight:0.000000e+00
%147 [1856r,1984r:2)[1984r,2032r:0)[2032r,2064r:1)[2064r,2080r:3)  0@1984r 1@2032r 2@1856r 3@2064r weight:0.000000e+00
%153 [2248r,2288r:0)[2288r,2320r:1)  0@2248r 1@2288r weight:0.000000e+00
%155 [2192r,2320r:2)[2320r,2368r:0)[2368r,2400r:1)[2400r,2416r:3)  0@2320r 1@2368r 2@2192r 3@2400r weight:0.000000e+00
%158 [2416r,2448r:0)[2448r,2480r:1)  0@2416r 1@2448r weight:0.000000e+00
%159 [2528r,2688r:0)  0@2528r weight:0.000000e+00
%160 [2544r,2560r:0)  0@2544r weight:0.000000e+00
%161 [2560r,2656r:0)  0@2560r weight:0.000000e+00
%162 [2576r,2624r:0)  0@2576r weight:0.000000e+00
%163 [2592r,2608r:0)[2608r,2624r:1)  0@2592r 1@2608r weight:0.000000e+00
%165 [2624r,2656r:0)[2656r,2688r:1)  0@2624r 1@2656r weight:0.000000e+00
%166 [2672r,2688r:0)  0@2672r weight:0.000000e+00
%167 [208r,240r:0)  0@208r weight:0.000000e+00
RegMasks: 256r 384r 560r 640r 736r 832r 1056r 1120r 1184r 1328r 2496r 2960r 3120r 3312r 3440r 3600r 3888r 4032r 4432r 4608r 4720r 4864r 5072r 5200r 5344r 5616r 5712r 5920r 6168r 6304r 6400r 6464r 6704r 6784r 6960r 7040r 7184r 7264r 7408r 7488r 7632r 7712r 7856r 7936r 8080r 8160r 8304r 8384r 8528r 8608r 8752r 8832r 8976r 9056r 9200r 9280r 9424r 9504r 9648r 9808r
********** MACHINEINSTRS **********
# Machine code for function appft: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8192, align=16, at location [SP+8]
  fi#17: size=4096, align=16, at location [SP+8]
  fi#18: size=4096, align=16, at location [SP+8]
Function Live Ins: $edi in %0, $rsi in %1, $rdx in %2

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $rsi, $rdx
16B	  %2:gr64 = COPY $rdx
32B	  %1:gr64 = COPY $rsi
48B	  %0:gr32 = COPY $edi
64B	  MOV32mr %stack.0.niter.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.niter.addr)
80B	  MOV64mr %stack.1.total_time.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.total_time.addr)
96B	  MOV64mr %stack.2.verified.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.verified.addr)
112B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 1, debug-location !89 :: (store 4 into %ir.i); appft.c:61:12

128B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

144B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 15, implicit-def $eflags, debug-location !94 :: (dereferenceable load 4 from %ir.i); appft.c:61:19
160B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !95; appft.c:61:5
176B	  JMP_1 %bb.2, debug-location !95; appft.c:61:5

192B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

208B	  %167:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !96 :: (dereferenceable load 4 from %ir.i); appft.c:62:21
224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !98; appft.c:62:9
240B	  $edi = COPY %167:gr32, debug-location !98; appft.c:62:9
256B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !98; appft.c:62:9
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !98; appft.c:62:9
288B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !99 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); appft.c:61:27
304B	  JMP_1 %bb.1, debug-location !100; appft.c:61:5

320B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !103; appft.c:65:5
368B	  $edi = MOV32ri 2, debug-location !103; appft.c:65:5
384B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !103; appft.c:65:5
400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !103; appft.c:65:5
416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !104; appft.c:66:5
528B	  $rcx = MOV32ri64 @xnt, debug-location !104; appft.c:66:5
536B	  $edi = MOV32ri 512, debug-location !104; appft.c:66:5
544B	  $esi = MOV32ri 256, debug-location !104; appft.c:66:5
552B	  $edx = MOV32ri 256, debug-location !104; appft.c:66:5
560B	  CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !104; appft.c:66:5
568B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !104; appft.c:66:5
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; appft.c:68:5
592B	  %9:gr64 = LEA64r %stack.16.exp1, 1, $noreg, 0, $noreg
608B	  $edi = MOV32ri 512, debug-location !106; appft.c:68:5
624B	  $rsi = COPY %9:gr64, debug-location !106; appft.c:68:5
640B	  CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !106; appft.c:68:5
656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; appft.c:68:5
672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !108; appft.c:69:5
688B	  %10:gr64 = LEA64r %stack.17.exp2, 1, $noreg, 0, $noreg
704B	  $edi = MOV32ri 256, debug-location !108; appft.c:69:5
720B	  $rsi = COPY %10:gr64, debug-location !108; appft.c:69:5
736B	  CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !108; appft.c:69:5
752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !108; appft.c:69:5
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; appft.c:70:5
784B	  %11:gr64 = LEA64r %stack.18.exp3, 1, $noreg, 0, $noreg
800B	  $edi = MOV32ri 256, debug-location !110; appft.c:70:5
816B	  $rsi = COPY %11:gr64, debug-location !110; appft.c:70:5
832B	  CALL64pcrel32 @CompExp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, debug-location !110; appft.c:70:5
848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; appft.c:70:5
864B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !114; appft.c:71:5
976B	  $r8 = MOV32ri64 @xnt, debug-location !114; appft.c:71:5
992B	  $r9 = MOV32ri64 @y, debug-location !114; appft.c:71:5
996B	  $edi = MOV32ri 1, debug-location !114; appft.c:71:5
1000B	  $esi = MOV32ri 512, debug-location !114; appft.c:71:5
1008B	  $edx = MOV32ri 256, debug-location !114; appft.c:71:5
1016B	  $ecx = MOV32ri 256, debug-location !114; appft.c:71:5
1024B	  PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
1032B	  PUSH64r %10:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
1040B	  PUSH64r %9:gr64, implicit-def $rsp, implicit $rsp, debug-location !114; appft.c:71:5
1056B	  CALL64pcrel32 @fftXYZ, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !114; appft.c:71:5
1072B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !114; appft.c:71:5
1088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !115; appft.c:72:5
1104B	  $edi = MOV32ri 2, debug-location !115; appft.c:72:5
1120B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !115; appft.c:72:5
1136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !115; appft.c:72:5
1152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !116; appft.c:74:5
1168B	  $edi = MOV32ri 1, debug-location !116; appft.c:74:5
1184B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !116; appft.c:74:5
1200B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !116; appft.c:74:5
1216B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from @timers_enabled); appft.c:78:9
1232B	  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !119; appft.c:78:9
1248B	  JMP_1 %bb.4, debug-location !119; appft.c:78:9

1264B	bb.4.if.then:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; appft.c:79:9
1312B	  $edi = MOV32ri 13, debug-location !120; appft.c:79:9
1328B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !120; appft.c:79:9
1344B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; appft.c:79:9

1360B	bb.5.if.end:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1376B	  MOV32mi %stack.7.n12, 1, $noreg, 0, $noreg, 256, debug-location !121 :: (store 4 into %ir.n12); appft.c:81:9
1392B	  MOV32mi %stack.8.n22, 1, $noreg, 0, $noreg, 128, debug-location !122 :: (store 4 into %ir.n22); appft.c:82:9
1408B	  MOV32mi %stack.9.n32, 1, $noreg, 0, $noreg, 128, debug-location !123 :: (store 4 into %ir.n32); appft.c:83:9
1424B	  %16:gr64 = MOV64ri -4682421225964825446
1440B	  MOV64mr %stack.15.ap, 1, $noreg, 0, $noreg, %16:gr64, debug-location !124 :: (store 8 into %ir.ap); appft.c:84:8
1456B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !125 :: (store 4 into %ir.i); appft.c:85:12

1472B	bb.6.for.cond8:
	; predecessors: %bb.5, %bb.13
	  successors: %bb.7(0x7c000000), %bb.14(0x04000000); %bb.7(96.88%), %bb.14(3.12%)

1488B	  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 255, implicit-def $eflags, debug-location !130 :: (dereferenceable load 4 from %ir.i); appft.c:85:19
1504B	  JCC_1 %bb.14, 15, implicit killed $eflags, debug-location !131; appft.c:85:5
1520B	  JMP_1 %bb.7, debug-location !131; appft.c:85:5

1536B	bb.7.for.body10:
	; predecessors: %bb.6
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1552B	  %140:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !132 :: (dereferenceable load 4 from %ir.i); appft.c:86:14
1568B	  $eax = COPY %140:gr32, debug-location !136; appft.c:86:21
1584B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !136; appft.c:86:21
1600B	  IDIV32m %stack.9.n32, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !136 :: (dereferenceable load 4 from %ir.n32); appft.c:86:21
1608B	  %138:gr32 = COPY $eax, debug-location !136; appft.c:86:21
1648B	  %138:gr32 = SHL32ri %138:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !137; appft.c:86:28
1680B	  %140:gr32 = nsw SUB32rr %140:gr32(tied-def 0), %138:gr32, implicit-def dead $eflags, debug-location !138; appft.c:86:16
1696B	  MOV32mr %stack.10.ii, 1, $noreg, 0, $noreg, %140:gr32, debug-location !139 :: (store 4 into %ir.ii); appft.c:86:12
1728B	  %140:gr32 = nsw IMUL32rr %140:gr32(tied-def 0), %140:gr32, implicit-def dead $eflags, debug-location !142; appft.c:87:18
1744B	  MOV32mr %stack.13.ii2, 1, $noreg, 0, $noreg, %140:gr32, debug-location !143 :: (store 4 into %ir.ii2); appft.c:87:13
1760B	  MOV32mi %stack.5.k, 1, $noreg, 0, $noreg, 0, debug-location !144 :: (store 4 into %ir.k); appft.c:88:16

1776B	bb.8.for.cond12:
	; predecessors: %bb.7, %bb.12
	  successors: %bb.9(0x7c000000), %bb.13(0x04000000); %bb.9(96.88%), %bb.13(3.12%)

1792B	  CMP32mi %stack.5.k, 1, $noreg, 0, $noreg, 255, implicit-def $eflags, debug-location !149 :: (dereferenceable load 4 from %ir.k); appft.c:88:23
1808B	  JCC_1 %bb.13, 15, implicit killed $eflags, debug-location !150; appft.c:88:9
1824B	  JMP_1 %bb.9, debug-location !150; appft.c:88:9

1840B	bb.9.for.body14:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1856B	  %147:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !151 :: (dereferenceable load 4 from %ir.k); appft.c:89:18
1872B	  $eax = COPY %147:gr32, debug-location !155; appft.c:89:25
1888B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !155; appft.c:89:25
1904B	  IDIV32m %stack.8.n22, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !155 :: (dereferenceable load 4 from %ir.n22); appft.c:89:25
1912B	  %145:gr32 = COPY $eax, debug-location !155; appft.c:89:25
1952B	  %145:gr32 = SHL32ri %145:gr32(tied-def 0), 8, implicit-def dead $eflags, debug-location !156; appft.c:89:32
1984B	  %147:gr32 = nsw SUB32rr %147:gr32(tied-def 0), %145:gr32, implicit-def dead $eflags, debug-location !157; appft.c:89:20
2000B	  MOV32mr %stack.12.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !158 :: (store 4 into %ir.kk); appft.c:89:16
2032B	  %147:gr32 = nsw IMUL32rr %147:gr32(tied-def 0), %147:gr32, implicit-def dead $eflags, debug-location !162; appft.c:90:28
2064B	  %147:gr32 = nsw ADD32rm %147:gr32(tied-def 0), %stack.13.ii2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !163 :: (dereferenceable load 4 from %ir.ii2); appft.c:90:23
2080B	  MOV32mr %stack.14.ik2, 1, $noreg, 0, $noreg, %147:gr32, debug-location !164 :: (store 4 into %ir.ik2); appft.c:90:17
2096B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !165 :: (store 4 into %ir.j); appft.c:91:20

2112B	bb.10.for.cond19:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

2128B	  CMP32mi %stack.4.j, 1, $noreg, 0, $noreg, 511, implicit-def $eflags, debug-location !170 :: (dereferenceable load 4 from %ir.j); appft.c:91:27
2144B	  JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !171; appft.c:91:13
2160B	  JMP_1 %bb.11, debug-location !171; appft.c:91:13

2176B	bb.11.for.body21:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2192B	  %155:gr32 = MOV32rm %stack.4.j, 1, $noreg, 0, $noreg, debug-location !172 :: (dereferenceable load 4 from %ir.j); appft.c:92:22
2208B	  $eax = COPY %155:gr32, debug-location !176; appft.c:92:29
2224B	  CDQ implicit-def $eax, implicit-def $edx, implicit $eax, debug-location !176; appft.c:92:29
2240B	  IDIV32m %stack.7.n12, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !176 :: (dereferenceable load 4 from %ir.n12); appft.c:92:29
2248B	  %153:gr32 = COPY $eax, debug-location !176; appft.c:92:29
2288B	  %153:gr32 = SHL32ri %153:gr32(tied-def 0), 9, implicit-def dead $eflags, debug-location !177; appft.c:92:36
2320B	  %155:gr32 = nsw SUB32rr %155:gr32(tied-def 0), %153:gr32, implicit-def dead $eflags, debug-location !178; appft.c:92:24
2336B	  MOV32mr %stack.11.jj, 1, $noreg, 0, $noreg, %155:gr32, debug-location !179 :: (store 4 into %ir.jj); appft.c:92:20
2368B	  %155:gr32 = nsw IMUL32rr %155:gr32(tied-def 0), %155:gr32, implicit-def dead $eflags, debug-location !183; appft.c:93:57
2400B	  %155:gr32 = nsw ADD32rm %155:gr32(tied-def 0), %stack.14.ik2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !185 :: (dereferenceable load 4 from %ir.ik2); appft.c:93:62
2416B	  %158:fr64 = CVTSI2SDrr %155:gr32, debug-location !186; appft.c:93:45
2448B	  %158:fr64 = MULSDrm %158:fr64(tied-def 0), %stack.15.ap, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 8 from %ir.ap); appft.c:93:43
2464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; appft.c:93:36
2480B	  $xmm0 = COPY %158:fr64, debug-location !188; appft.c:93:36
2496B	  CALL64pcrel32 @exp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !188; appft.c:93:36
2512B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !188; appft.c:93:36
2528B	  %159:fr64 = COPY killed $xmm0, debug-location !188; appft.c:93:36
2544B	  %160:gr64 = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.i); appft.c:93:25
2560B	  %161:gr64 = IMUL64rri32 %160:gr64, 1050624, implicit-def dead $eflags, debug-location !190; appft.c:93:17
2576B	  %162:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.k); appft.c:93:28
2592B	  %163:gr64_nosp = COPY %162:gr64_nosp, debug-location !190; appft.c:93:17
2608B	  %163:gr64_nosp = SHL64ri %163:gr64_nosp(tied-def 0), 12, implicit-def dead $eflags, debug-location !190; appft.c:93:17
2624B	  %165:gr64 = LEA64r %163:gr64_nosp, 8, %162:gr64_nosp, 0, $noreg, debug-location !190; appft.c:93:17
2656B	  %165:gr64 = ADD64rr %165:gr64(tied-def 0), %161:gr64, implicit-def dead $eflags, debug-location !190; appft.c:93:17
2672B	  %166:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 4 from %ir.j); appft.c:93:31
2688B	  MOVSDmr %165:gr64, 8, %166:gr64_nosp, @twiddle, $noreg, %159:fr64, debug-location !193 :: (store 8 into %ir.arrayidx31); appft.c:93:34
2704B	  INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !194 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); appft.c:91:34
2720B	  JMP_1 %bb.10, debug-location !195; appft.c:91:13

2736B	bb.12.for.end34:
	; predecessors: %bb.10
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

2752B	  INC32m %stack.5.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !198 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); appft.c:88:30
2768B	  JMP_1 %bb.8, debug-location !199; appft.c:88:9

2784B	bb.13.for.end37:
	; predecessors: %bb.8
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

2800B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !202 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); appft.c:85:26
2816B	  JMP_1 %bb.6, debug-location !203; appft.c:85:5

2832B	bb.14.for.end40:
	; predecessors: %bb.6
	  successors: %bb.15(0x50000000), %bb.16(0x30000000); %bb.15(62.50%), %bb.16(37.50%)

2848B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !206 :: (dereferenceable load 4 from @timers_enabled); appft.c:97:9
2864B	  JCC_1 %bb.16, 4, implicit killed $eflags, debug-location !208; appft.c:97:9
2880B	  JMP_1 %bb.15, debug-location !208; appft.c:97:9

2896B	bb.15.if.then42:
	; predecessors: %bb.14
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !209; appft.c:98:9
2944B	  $edi = MOV32ri 13, debug-location !209; appft.c:98:9
2960B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !209; appft.c:98:9
2976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !209; appft.c:98:9

2992B	bb.16.if.end43:
	; predecessors: %bb.14, %bb.15
	  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

3008B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from @timers_enabled); appft.c:100:9
3024B	  JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !212; appft.c:100:9
3040B	  JMP_1 %bb.17, debug-location !212; appft.c:100:9

3056B	bb.17.if.then45:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !213; appft.c:101:9
3104B	  $edi = MOV32ri 12, debug-location !213; appft.c:101:9
3120B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !213; appft.c:101:9
3136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !213; appft.c:101:9

3152B	bb.18.if.end46:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

3168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !214; appft.c:102:5
3280B	  $rcx = MOV32ri64 @xnt, debug-location !214; appft.c:102:5
3288B	  $edi = MOV32ri 512, debug-location !214; appft.c:102:5
3296B	  $esi = MOV32ri 256, debug-location !214; appft.c:102:5
3304B	  $edx = MOV32ri 256, debug-location !214; appft.c:102:5
3312B	  CALL64pcrel32 @compute_initial_conditions, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !214; appft.c:102:5
3320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !214; appft.c:102:5
3328B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !215 :: (dereferenceable load 4 from @timers_enabled); appft.c:103:9
3344B	  JCC_1 %bb.20, 4, implicit killed $eflags, debug-location !217; appft.c:103:9
3360B	  JMP_1 %bb.19, debug-location !217; appft.c:103:9

3376B	bb.19.if.then48:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !218; appft.c:104:9
3424B	  $edi = MOV32ri 12, debug-location !218; appft.c:104:9
3440B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !218; appft.c:104:9
3456B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !218; appft.c:104:9

3472B	bb.20.if.end49:
	; predecessors: %bb.18, %bb.19
	  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

3488B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !219 :: (dereferenceable load 4 from @timers_enabled); appft.c:105:9
3504B	  JCC_1 %bb.22, 4, implicit killed $eflags, debug-location !221; appft.c:105:9
3520B	  JMP_1 %bb.21, debug-location !221; appft.c:105:9

3536B	bb.21.if.then51:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

3552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !222; appft.c:106:9
3584B	  $edi = MOV32ri 15, debug-location !222; appft.c:106:9
3600B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !222; appft.c:106:9
3616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !222; appft.c:106:9

3632B	bb.22.if.end52:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.23(0x50000000), %bb.24(0x30000000); %bb.23(62.50%), %bb.24(37.50%)

3648B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !226; appft.c:107:5
3808B	  $r8 = MOV32ri64 @xnt, debug-location !226; appft.c:107:5
3824B	  $r9 = MOV32ri64 @y, debug-location !226; appft.c:107:5
3828B	  $edi = MOV32ri 1, debug-location !226; appft.c:107:5
3832B	  $esi = MOV32ri 512, debug-location !226; appft.c:107:5
3840B	  $edx = MOV32ri 256, debug-location !226; appft.c:107:5
3848B	  $ecx = MOV32ri 256, debug-location !226; appft.c:107:5
3856B	  PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
3864B	  PUSH64r %10:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
3872B	  PUSH64r %9:gr64, implicit-def $rsp, implicit $rsp, debug-location !226; appft.c:107:5
3888B	  CALL64pcrel32 @fftXYZ, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !226; appft.c:107:5
3904B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !226; appft.c:107:5
3920B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !227 :: (dereferenceable load 4 from @timers_enabled); appft.c:108:9
3936B	  JCC_1 %bb.24, 4, implicit killed $eflags, debug-location !229; appft.c:108:9
3952B	  JMP_1 %bb.23, debug-location !229; appft.c:108:9

3968B	bb.23.if.then57:
	; predecessors: %bb.22
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3984B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !230; appft.c:109:9
4016B	  $edi = MOV32ri 15, debug-location !230; appft.c:109:9
4032B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !230; appft.c:109:9
4048B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !230; appft.c:109:9

4064B	bb.24.if.end58:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4080B	  MOV32mi %stack.6.kt, 1, $noreg, 0, $noreg, 1, debug-location !231 :: (store 4 into %ir.kt); appft.c:111:13

4240B	bb.25.for.cond59:
	; predecessors: %bb.24, %bb.38
	  successors: %bb.26(0x7c000000), %bb.39(0x04000000); %bb.26(96.88%), %bb.39(3.12%)

4256B	  %36:gr32 = MOV32rm %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 4 from %ir.kt); appft.c:111:18
4272B	  CMP32rm %36:gr32, %stack.0.niter.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !237 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:111:21
4288B	  JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !238; appft.c:111:5
4304B	  JMP_1 %bb.26, debug-location !238; appft.c:111:5

4320B	bb.26.for.body62:
	; predecessors: %bb.25
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

4336B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !239 :: (dereferenceable load 4 from @timers_enabled); appft.c:112:13
4352B	  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !242; appft.c:112:13
4368B	  JMP_1 %bb.27, debug-location !242; appft.c:112:13

4384B	bb.27.if.then64:
	; predecessors: %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !243; appft.c:113:13
4416B	  $edi = MOV32ri 11, debug-location !243; appft.c:113:13
4432B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !243; appft.c:113:13
4448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !243; appft.c:113:13

4464B	bb.28.if.end65:
	; predecessors: %bb.26, %bb.27
	  successors: %bb.29(0x50000000), %bb.30(0x30000000); %bb.29(62.50%), %bb.30(37.50%)

4480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; appft.c:114:9
4544B	  $rcx = MOV32ri64 @xnt, debug-location !244; appft.c:114:9
4560B	  $r8 = MOV32ri64 @y, debug-location !244; appft.c:114:9
4576B	  $r9 = MOV32ri64 @twiddle, debug-location !244; appft.c:114:9
4584B	  $edi = MOV32ri 512, debug-location !244; appft.c:114:9
4592B	  $esi = MOV32ri 256, debug-location !244; appft.c:114:9
4600B	  $edx = MOV32ri 256, debug-location !244; appft.c:114:9
4608B	  CALL64pcrel32 @evolve, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !244; appft.c:114:9
4616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; appft.c:114:9
4624B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !245 :: (dereferenceable load 4 from @timers_enabled); appft.c:115:13
4640B	  JCC_1 %bb.30, 4, implicit killed $eflags, debug-location !247; appft.c:115:13
4656B	  JMP_1 %bb.29, debug-location !247; appft.c:115:13

4672B	bb.29.if.then67:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !248; appft.c:116:13
4704B	  $edi = MOV32ri 11, debug-location !248; appft.c:116:13
4720B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !248; appft.c:116:13
4736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !248; appft.c:116:13

4752B	bb.30.if.end68:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x50000000), %bb.32(0x30000000); %bb.31(62.50%), %bb.32(37.50%)

4768B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !249 :: (dereferenceable load 4 from @timers_enabled); appft.c:117:13
4784B	  JCC_1 %bb.32, 4, implicit killed $eflags, debug-location !251; appft.c:117:13
4800B	  JMP_1 %bb.31, debug-location !251; appft.c:117:13

4816B	bb.31.if.then70:
	; predecessors: %bb.30
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

4832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; appft.c:118:13
4848B	  $edi = MOV32ri 15, debug-location !252; appft.c:118:13
4864B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !252; appft.c:118:13
4880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; appft.c:118:13

4896B	bb.32.if.end71:
	; predecessors: %bb.30, %bb.31
	  successors: %bb.33(0x50000000), %bb.34(0x30000000); %bb.33(62.50%), %bb.34(37.50%)

4912B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !256; appft.c:119:9
4992B	  $r8 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
5008B	  $r9 = MOV32ri64 @xnt, debug-location !256; appft.c:119:9
5012B	  $edi = MOV32ri -1, debug-location !256; appft.c:119:9
5016B	  $esi = MOV32ri 512, debug-location !256; appft.c:119:9
5024B	  $edx = MOV32ri 256, debug-location !256; appft.c:119:9
5032B	  $ecx = MOV32ri 256, debug-location !256; appft.c:119:9
5040B	  PUSH64r %11:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
5048B	  PUSH64r %10:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
5056B	  PUSH64r %9:gr64, implicit-def $rsp, implicit $rsp, debug-location !256; appft.c:119:9
5072B	  CALL64pcrel32 @fftXYZ, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !256; appft.c:119:9
5088B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !256; appft.c:119:9
5104B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !257 :: (dereferenceable load 4 from @timers_enabled); appft.c:120:13
5120B	  JCC_1 %bb.34, 4, implicit killed $eflags, debug-location !259; appft.c:120:13
5136B	  JMP_1 %bb.33, debug-location !259; appft.c:120:13

5152B	bb.33.if.then76:
	; predecessors: %bb.32
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

5168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !260; appft.c:121:13
5184B	  $edi = MOV32ri 15, debug-location !260; appft.c:121:13
5200B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !260; appft.c:121:13
5216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !260; appft.c:121:13

5232B	bb.34.if.end77:
	; predecessors: %bb.32, %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

5248B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); appft.c:122:13
5264B	  JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !263; appft.c:122:13
5280B	  JMP_1 %bb.35, debug-location !263; appft.c:122:13

5296B	bb.35.if.then79:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

5312B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; appft.c:123:13
5328B	  $edi = MOV32ri 10, debug-location !264; appft.c:123:13
5344B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !264; appft.c:123:13
5360B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; appft.c:123:13

5376B	bb.36.if.end80:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

5392B	  %128:gr64_with_sub_8bit = MOVSX64rm32 %stack.6.kt, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 4 from %ir.kt); appft.c:124:33
5424B	  %130:gr64 = COPY %128:gr64_with_sub_8bit, debug-location !266; appft.c:124:28
5440B	  %130:gr64 = SHL64ri %130:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !266; appft.c:124:28
5456B	  %131:gr64 = LEA64r %130:gr64, 1, $noreg, @sums, $noreg, debug-location !266; appft.c:124:28
5472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; appft.c:124:9
5568B	  $r9 = MOV32ri64 @xnt, debug-location !268; appft.c:124:9
5576B	  $rdi = COPY %131:gr64, debug-location !268; appft.c:124:9
5584B	  $esi = COPY %128.sub_32bit:gr64_with_sub_8bit, debug-location !268; appft.c:124:9
5592B	  $edx = MOV32ri 512, debug-location !268; appft.c:124:9
5600B	  $ecx = MOV32ri 256, debug-location !268; appft.c:124:9
5608B	  $r8d = MOV32ri 256, debug-location !268; appft.c:124:9
5616B	  CALL64pcrel32 @CalculateChecksum, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !268; appft.c:124:9
5624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; appft.c:124:9
5632B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !269 :: (dereferenceable load 4 from @timers_enabled); appft.c:125:13
5640B	  JCC_1 %bb.38, 4, implicit killed $eflags, debug-location !271; appft.c:125:13
5648B	  JMP_1 %bb.37, debug-location !271; appft.c:125:13

5664B	bb.37.if.then84:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

5680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; appft.c:126:13
5696B	  $edi = MOV32ri 10, debug-location !272; appft.c:126:13
5712B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !272; appft.c:126:13
5728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; appft.c:126:13

5744B	bb.38.if.end85:
	; predecessors: %bb.36, %bb.37
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

5760B	  INC32m %stack.6.kt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !273 :: (store 4 into %ir.kt), (dereferenceable load 4 from %ir.kt); appft.c:111:33
5776B	  JMP_1 %bb.25, debug-location !274; appft.c:111:5

5792B	bb.39.for.end88:
	; predecessors: %bb.25
	  successors: %bb.40(0x50000000), %bb.41(0x30000000); %bb.40(62.50%), %bb.41(37.50%)

5808B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !277 :: (dereferenceable load 4 from @timers_enabled); appft.c:133:9
5824B	  JCC_1 %bb.41, 4, implicit killed $eflags, debug-location !279; appft.c:133:9
5840B	  JMP_1 %bb.40, debug-location !279; appft.c:133:9

5856B	bb.40.if.then94:
	; predecessors: %bb.39
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

5872B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !280; appft.c:134:9
5904B	  $edi = MOV32ri 14, debug-location !280; appft.c:134:9
5920B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !280; appft.c:134:9
5936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !280; appft.c:134:9

5952B	bb.41.if.end95:
	; predecessors: %bb.39, %bb.40
	  successors: %bb.42(0x50000000), %bb.43(0x30000000); %bb.42(62.50%), %bb.43(37.50%)

5968B	  %39:gr32 = MOV32rm %stack.0.niter.addr, 1, $noreg, 0, $noreg, debug-location !281 :: (dereferenceable load 4 from %ir.niter.addr); appft.c:135:24
5984B	  %40:gr64 = MOV64rm %stack.2.verified.addr, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 8 from %ir.verified.addr); appft.c:135:37
6000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !283; appft.c:135:5
6128B	  $r8 = MOV32ri64 @sums, debug-location !283; appft.c:135:5
6132B	  $edi = MOV32ri 512, debug-location !283; appft.c:135:5
6136B	  $esi = MOV32ri 256, debug-location !283; appft.c:135:5
6144B	  $edx = MOV32ri 256, debug-location !283; appft.c:135:5
6152B	  $ecx = COPY %39:gr32, debug-location !283; appft.c:135:5
6160B	  $r9 = COPY %40:gr64, debug-location !283; appft.c:135:5
6168B	  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !283; appft.c:135:5
6176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !283; appft.c:135:5
6192B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !284 :: (dereferenceable load 4 from @timers_enabled); appft.c:136:9
6208B	  JCC_1 %bb.43, 4, implicit killed $eflags, debug-location !286; appft.c:136:9
6224B	  JMP_1 %bb.42, debug-location !286; appft.c:136:9

6240B	bb.42.if.then97:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

6256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !287; appft.c:137:9
6288B	  $edi = MOV32ri 14, debug-location !287; appft.c:137:9
6304B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !287; appft.c:137:9
6320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !287; appft.c:137:9

6336B	bb.43.if.end98:
	; predecessors: %bb.41, %bb.42
	  successors: %bb.44(0x50000000), %bb.45(0x30000000); %bb.44(62.50%), %bb.45(37.50%)

6352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !288; appft.c:138:5
6384B	  $edi = MOV32ri 1, debug-location !288; appft.c:138:5
6400B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !288; appft.c:138:5
6416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !288; appft.c:138:5
6432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !289; appft.c:140:19
6448B	  $edi = MOV32ri 1, debug-location !289; appft.c:140:19
6464B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !289; appft.c:140:19
6480B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !289; appft.c:140:19
6496B	  %46:fr64 = COPY killed $xmm0, debug-location !289; appft.c:140:19
6512B	  %47:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !290 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:140:6
6528B	  MOVSDmr %47:gr64, 1, $noreg, 0, $noreg, %46:fr64, debug-location !291 :: (store 8 into %ir.51); appft.c:140:17
6544B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from @timers_enabled); appft.c:141:10
6560B	  JCC_1 %bb.45, 4, implicit killed $eflags, debug-location !294; appft.c:141:9
6576B	  JMP_1 %bb.44, debug-location !294; appft.c:141:9

6592B	bb.44.if.end102:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

6608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !295; appft.c:144:5
6672B	  $rdi = MOV32ri64 @.str, debug-location !295; appft.c:144:5
6688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !295; appft.c:144:5
6704B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !295; appft.c:144:5
6720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !295; appft.c:144:5
6736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !296; appft.c:145:60
6768B	  $edi = MOV32ri 1, debug-location !296; appft.c:145:60
6784B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !296; appft.c:145:60
6800B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !296; appft.c:145:60
6816B	  %53:fr64 = COPY killed $xmm0, debug-location !296; appft.c:145:60
6832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !297; appft.c:145:5
6896B	  $rdi = MOV32ri64 @.str.1, debug-location !297; appft.c:145:5
6912B	  $rsi = MOV32ri64 @.str.2, debug-location !297; appft.c:145:5
6928B	  $xmm0 = COPY %53:fr64, debug-location !297; appft.c:145:5
6944B	  $al = MOV8ri 1, debug-location !297; appft.c:145:5
6960B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !297; appft.c:145:5
6976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !297; appft.c:145:5
6992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !298; appft.c:146:60
7024B	  $edi = MOV32ri 2, debug-location !298; appft.c:146:60
7040B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !298; appft.c:146:60
7056B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !298; appft.c:146:60
7072B	  %59:fr64 = COPY killed $xmm0, debug-location !298; appft.c:146:60
7088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !299; appft.c:146:5
7120B	  $rdi = MOV32ri64 @.str.1, debug-location !299; appft.c:146:5
7136B	  $rsi = MOV32ri64 @.str.3, debug-location !299; appft.c:146:5
7152B	  $xmm0 = COPY %59:fr64, debug-location !299; appft.c:146:5
7168B	  $al = MOV8ri 1, debug-location !299; appft.c:146:5
7184B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !299; appft.c:146:5
7200B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !299; appft.c:146:5
7216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !300; appft.c:147:60
7248B	  $edi = MOV32ri 3, debug-location !300; appft.c:147:60
7264B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !300; appft.c:147:60
7280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !300; appft.c:147:60
7296B	  %63:fr64 = COPY killed $xmm0, debug-location !300; appft.c:147:60
7312B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !301; appft.c:147:5
7344B	  $rdi = MOV32ri64 @.str.1, debug-location !301; appft.c:147:5
7360B	  $rsi = MOV32ri64 @.str.4, debug-location !301; appft.c:147:5
7376B	  $xmm0 = COPY %63:fr64, debug-location !301; appft.c:147:5
7392B	  $al = MOV8ri 1, debug-location !301; appft.c:147:5
7408B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !301; appft.c:147:5
7424B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !301; appft.c:147:5
7440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !302; appft.c:148:60
7472B	  $edi = MOV32ri 4, debug-location !302; appft.c:148:60
7488B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !302; appft.c:148:60
7504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !302; appft.c:148:60
7520B	  %67:fr64 = COPY killed $xmm0, debug-location !302; appft.c:148:60
7536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !303; appft.c:148:5
7568B	  $rdi = MOV32ri64 @.str.1, debug-location !303; appft.c:148:5
7584B	  $rsi = MOV32ri64 @.str.5, debug-location !303; appft.c:148:5
7600B	  $xmm0 = COPY %67:fr64, debug-location !303; appft.c:148:5
7616B	  $al = MOV8ri 1, debug-location !303; appft.c:148:5
7632B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !303; appft.c:148:5
7648B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !303; appft.c:148:5
7664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !304; appft.c:149:60
7696B	  $edi = MOV32ri 7, debug-location !304; appft.c:149:60
7712B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !304; appft.c:149:60
7728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !304; appft.c:149:60
7744B	  %71:fr64 = COPY killed $xmm0, debug-location !304; appft.c:149:60
7760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !305; appft.c:149:5
7792B	  $rdi = MOV32ri64 @.str.1, debug-location !305; appft.c:149:5
7808B	  $rsi = MOV32ri64 @.str.6, debug-location !305; appft.c:149:5
7824B	  $xmm0 = COPY %71:fr64, debug-location !305; appft.c:149:5
7840B	  $al = MOV8ri 1, debug-location !305; appft.c:149:5
7856B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !305; appft.c:149:5
7872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !305; appft.c:149:5
7888B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !306; appft.c:150:60
7920B	  $edi = MOV32ri 8, debug-location !306; appft.c:150:60
7936B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !306; appft.c:150:60
7952B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !306; appft.c:150:60
7968B	  %75:fr64 = COPY killed $xmm0, debug-location !306; appft.c:150:60
7984B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !307; appft.c:150:5
8016B	  $rdi = MOV32ri64 @.str.1, debug-location !307; appft.c:150:5
8032B	  $rsi = MOV32ri64 @.str.7, debug-location !307; appft.c:150:5
8048B	  $xmm0 = COPY %75:fr64, debug-location !307; appft.c:150:5
8064B	  $al = MOV8ri 1, debug-location !307; appft.c:150:5
8080B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !307; appft.c:150:5
8096B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !307; appft.c:150:5
8112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; appft.c:151:60
8144B	  $edi = MOV32ri 9, debug-location !308; appft.c:151:60
8160B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !308; appft.c:151:60
8176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; appft.c:151:60
8192B	  %79:fr64 = COPY killed $xmm0, debug-location !308; appft.c:151:60
8208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !309; appft.c:151:5
8240B	  $rdi = MOV32ri64 @.str.1, debug-location !309; appft.c:151:5
8256B	  $rsi = MOV32ri64 @.str.8, debug-location !309; appft.c:151:5
8272B	  $xmm0 = COPY %79:fr64, debug-location !309; appft.c:151:5
8288B	  $al = MOV8ri 1, debug-location !309; appft.c:151:5
8304B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !309; appft.c:151:5
8320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !309; appft.c:151:5
8336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !310; appft.c:152:60
8368B	  $edi = MOV32ri 10, debug-location !310; appft.c:152:60
8384B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !310; appft.c:152:60
8400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !310; appft.c:152:60
8416B	  %83:fr64 = COPY killed $xmm0, debug-location !310; appft.c:152:60
8432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !311; appft.c:152:5
8464B	  $rdi = MOV32ri64 @.str.1, debug-location !311; appft.c:152:5
8480B	  $rsi = MOV32ri64 @.str.9, debug-location !311; appft.c:152:5
8496B	  $xmm0 = COPY %83:fr64, debug-location !311; appft.c:152:5
8512B	  $al = MOV8ri 1, debug-location !311; appft.c:152:5
8528B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !311; appft.c:152:5
8544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !311; appft.c:152:5
8560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !312; appft.c:153:60
8592B	  $edi = MOV32ri 11, debug-location !312; appft.c:153:60
8608B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !312; appft.c:153:60
8624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !312; appft.c:153:60
8640B	  %87:fr64 = COPY killed $xmm0, debug-location !312; appft.c:153:60
8656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; appft.c:153:5
8688B	  $rdi = MOV32ri64 @.str.1, debug-location !313; appft.c:153:5
8704B	  $rsi = MOV32ri64 @.str.10, debug-location !313; appft.c:153:5
8720B	  $xmm0 = COPY %87:fr64, debug-location !313; appft.c:153:5
8736B	  $al = MOV8ri 1, debug-location !313; appft.c:153:5
8752B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !313; appft.c:153:5
8768B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; appft.c:153:5
8784B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; appft.c:154:60
8816B	  $edi = MOV32ri 12, debug-location !314; appft.c:154:60
8832B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !314; appft.c:154:60
8848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !314; appft.c:154:60
8864B	  %91:fr64 = COPY killed $xmm0, debug-location !314; appft.c:154:60
8880B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !315; appft.c:154:5
8912B	  $rdi = MOV32ri64 @.str.1, debug-location !315; appft.c:154:5
8928B	  $rsi = MOV32ri64 @.str.11, debug-location !315; appft.c:154:5
8944B	  $xmm0 = COPY %91:fr64, debug-location !315; appft.c:154:5
8960B	  $al = MOV8ri 1, debug-location !315; appft.c:154:5
8976B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !315; appft.c:154:5
8992B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !315; appft.c:154:5
9008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !316; appft.c:155:60
9040B	  $edi = MOV32ri 13, debug-location !316; appft.c:155:60
9056B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !316; appft.c:155:60
9072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !316; appft.c:155:60
9088B	  %95:fr64 = COPY killed $xmm0, debug-location !316; appft.c:155:60
9104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !317; appft.c:155:5
9136B	  $rdi = MOV32ri64 @.str.1, debug-location !317; appft.c:155:5
9152B	  $rsi = MOV32ri64 @.str.12, debug-location !317; appft.c:155:5
9168B	  $xmm0 = COPY %95:fr64, debug-location !317; appft.c:155:5
9184B	  $al = MOV8ri 1, debug-location !317; appft.c:155:5
9200B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !317; appft.c:155:5
9216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !317; appft.c:155:5
9232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !318; appft.c:156:60
9264B	  $edi = MOV32ri 14, debug-location !318; appft.c:156:60
9280B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !318; appft.c:156:60
9296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !318; appft.c:156:60
9312B	  %99:fr64 = COPY killed $xmm0, debug-location !318; appft.c:156:60
9328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !319; appft.c:156:5
9360B	  $rdi = MOV32ri64 @.str.1, debug-location !319; appft.c:156:5
9376B	  $rsi = MOV32ri64 @.str.13, debug-location !319; appft.c:156:5
9392B	  $xmm0 = COPY %99:fr64, debug-location !319; appft.c:156:5
9408B	  $al = MOV8ri 1, debug-location !319; appft.c:156:5
9424B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !319; appft.c:156:5
9440B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !319; appft.c:156:5
9456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !320; appft.c:157:60
9488B	  $edi = MOV32ri 15, debug-location !320; appft.c:157:60
9504B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !320; appft.c:157:60
9520B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !320; appft.c:157:60
9536B	  %103:fr64 = COPY killed $xmm0, debug-location !320; appft.c:157:60
9552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !321; appft.c:157:5
9584B	  $rdi = MOV32ri64 @.str.1, debug-location !321; appft.c:157:5
9600B	  $rsi = MOV32ri64 @.str.14, debug-location !321; appft.c:157:5
9616B	  $xmm0 = COPY %103:fr64, debug-location !321; appft.c:157:5
9632B	  $al = MOV8ri 1, debug-location !321; appft.c:157:5
9648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !321; appft.c:157:5
9664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !321; appft.c:157:5
9680B	  %106:gr64 = MOV64rm %stack.1.total_time.addr, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.total_time.addr); appft.c:158:61
9696B	  %107:fr64 = MOVSDrm_alt %106:gr64, 1, $noreg, 0, $noreg, debug-location !323 :: (load 8 from %ir.53); appft.c:158:60
9712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !324; appft.c:158:5
9744B	  $rdi = MOV32ri64 @.str.1, debug-location !324; appft.c:158:5
9760B	  $rsi = MOV32ri64 @.str.15, debug-location !324; appft.c:158:5
9776B	  $xmm0 = COPY %107:fr64, debug-location !324; appft.c:158:5
9792B	  $al = MOV8ri 1, debug-location !324; appft.c:158:5
9808B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !324; appft.c:158:5
9824B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !324; appft.c:158:5

9840B	bb.45.return:
	; predecessors: %bb.43, %bb.44

9856B	  RET 0, debug-location !325; appft.c:159:1

# End machine code for function appft.


Before MISched:
# Machine code for function fftXYZ: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %2, $esi in %3, $edx in %4, $ecx in %5, $r8 in %6, $r9 in %7

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $esi, $edx, $ecx, $r8, $r9
  %7:gr64 = COPY $r9
  %6:gr64 = COPY $r8
  %5:gr32 = COPY $ecx
  %4:gr32 = COPY $edx
  undef %1.sub_32bit:gr64_with_sub_8bit = COPY $esi
  %2:gr32 = COPY $edi
  MOV32mr %stack.0.sign.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.sign.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  MOV64mr %stack.4.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
  MOV64mr %stack.5.xout.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.xout.addr)
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !88 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:151:9
  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !90; fft3d.c:151:9
  JMP_1 %bb.1, debug-location !90; fft3d.c:151:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !91; fft3d.c:152:9
  $edi = MOV32ri 3, debug-location !91; fft3d.c:152:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !91; fft3d.c:152:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !91; fft3d.c:152:9

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
  %1.sub_32bit:gr64_with_sub_8bit = nsw INC32r %1.sub_32bit:gr64_with_sub_8bit(tied-def 0), implicit-def dead $eflags, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
  $eax = MOV32ri 8192, debug-location !93; fft3d.c:154:26
  $edx = MOV32r0 implicit-def dead $eflags, debug-location !93; fft3d.c:154:26
  IDIV32m %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !93 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:154:26
  %13:gr32 = COPY killed $eax, debug-location !93; fft3d.c:154:26
  MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %13:gr32, debug-location !94 :: (store 4 into @fftblock); fft3d.c:154:14
  CMP32ri8 %13:gr32, 32, implicit-def $eflags, debug-location !97; fft3d.c:155:18
  JCC_1 %bb.4, 12, implicit killed $eflags, debug-location !98; fft3d.c:155:9
  JMP_1 %bb.3, debug-location !98; fft3d.c:155:9

bb.3.if.then3:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi $rip, 1, $noreg, @fftblock, $noreg, 32, debug-location !99 :: (store 4 into @fftblock); fft3d.c:156:18

bb.4.if.end4:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  %16:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !101 :: (dereferenceable load 4 from @fftblock); fft3d.c:157:12
  %16:gr32 = nsw INC32r %16:gr32(tied-def 0), implicit-def dead $eflags, debug-location !102; fft3d.c:157:21
  MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %16:gr32, debug-location !103 :: (store 4 into %ir.blkp); fft3d.c:157:10
  %17:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !104 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:158:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !105; fft3d.c:158:11
  $edi = COPY %17:gr32, debug-location !105; fft3d.c:158:11
  CALL64pcrel32 @ilog2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !105; fft3d.c:158:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !105; fft3d.c:158:11
  %18:gr32 = COPY killed $eax, debug-location !105; fft3d.c:158:11
  MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %18:gr32, debug-location !106 :: (store 4 into %ir.log); fft3d.c:158:9
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !107 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:159:9
  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !109; fft3d.c:159:9
  JMP_1 %bb.5, debug-location !109; fft3d.c:159:9

bb.5.if.then7:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; fft3d.c:160:9
  $edi = MOV32ri 7, debug-location !110; fft3d.c:160:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !110; fft3d.c:160:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; fft3d.c:160:9

bb.6.if.end8:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.k); fft3d.c:161:12
  %221:gr64_with_sub_8bit = nuw IMUL64rr %221:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

bb.7.for.cond:
; predecessors: %bb.6, %bb.25
  successors: %bb.8(0x7c000000), %bb.26(0x04000000); %bb.8(96.88%), %bb.26(3.12%)

  %20:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !114 :: (dereferenceable load 4 from %ir.k); fft3d.c:161:17
  CMP32rm %20:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:161:19
  JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !118; fft3d.c:161:5
  JMP_1 %bb.8, debug-location !118; fft3d.c:161:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  MOV32mi %stack.13.bls, 1, $noreg, 0, $noreg, 0, debug-location !119 :: (store 4 into %ir.bls); fft3d.c:162:18

bb.9.for.cond10:
; predecessors: %bb.8, %bb.24
  successors: %bb.10(0x7c000000), %bb.25(0x04000000); %bb.10(96.88%), %bb.25(3.12%)

  %157:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !123 :: (dereferenceable load 4 from %ir.bls); fft3d.c:162:23
  CMP32rm %157:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !126 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:162:27
  JCC_1 %bb.25, 13, implicit killed $eflags, debug-location !127; fft3d.c:162:9
  JMP_1 %bb.10, debug-location !127; fft3d.c:162:9

bb.10.for.body12:
; predecessors: %bb.9
  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

  undef %163.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !128 :: (dereferenceable load 4 from %ir.bls); fft3d.c:163:19
  undef %161.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !130 :: (dereferenceable load 4 from @fftblock); fft3d.c:163:25
  %165:gr32 = LEA64_32r %163:gr64_with_sub_8bit, 1, %161:gr64_nosp, -1, $noreg, debug-location !132; fft3d.c:163:34
  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %165:gr32, debug-location !133 :: (store 4 into %ir.ble); fft3d.c:163:17
  CMP32rm %165:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:164:21
  JCC_1 %bb.12, 14, implicit killed $eflags, debug-location !138; fft3d.c:164:17
  JMP_1 %bb.11, debug-location !138; fft3d.c:164:17

bb.11.if.then15:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %168:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:165:23
  %168:gr32 = DEC32r %168:gr32(tied-def 0), implicit-def dead $eflags, debug-location !140; fft3d.c:165:26
  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %168:gr32, debug-location !141 :: (store 4 into %ir.ble); fft3d.c:165:21

bb.12.if.end17:
; predecessors: %bb.10, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %172:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !143 :: (dereferenceable load 4 from %ir.ble); fft3d.c:166:19
  %170:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !144 :: (dereferenceable load 4 from %ir.bls); fft3d.c:166:25
  %172:gr32 = nsw SUB32rr %172:gr32(tied-def 0), %170:gr32, implicit-def dead $eflags, debug-location !145; fft3d.c:166:23
  %172:gr32 = nsw INC32r %172:gr32(tied-def 0), implicit-def dead $eflags, debug-location !146; fft3d.c:166:29
  MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %172:gr32, debug-location !147 :: (store 4 into %ir.len); fft3d.c:166:17
  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %170:gr32, debug-location !150 :: (store 4 into %ir.j); fft3d.c:167:20

bb.13.for.cond20:
; predecessors: %bb.12, %bb.17
  successors: %bb.14(0x7c000000), %bb.18(0x04000000); %bb.14(96.88%), %bb.18(3.12%)

  %173:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !152 :: (dereferenceable load 4 from %ir.j); fft3d.c:167:27
  CMP32rm %173:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !155 :: (dereferenceable load 4 from %ir.ble); fft3d.c:167:29
  JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !156; fft3d.c:167:13
  JMP_1 %bb.14, debug-location !156; fft3d.c:167:13

bb.14.for.body22:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !157 :: (store 4 into %ir.i); fft3d.c:168:24

bb.15.for.cond23:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %209:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 4 from %ir.i); fft3d.c:168:29
  CMP32rm %209:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !164 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:168:31
  JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !165; fft3d.c:168:17
  JMP_1 %bb.16, debug-location !165; fft3d.c:168:17

bb.16.for.body25:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %226:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 4 from %ir.j); fft3d.c:169:27
  %232:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
  %213:gr32 = COPY %226.sub_32bit:gr64_nosp, debug-location !169; fft3d.c:169:29
  %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
  %234:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !171 :: (dereferenceable load 4 from %ir.i); fft3d.c:169:44
  %217:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
  %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
  %219:gr64 = MOVSX64rr32 %217:gr32, debug-location !174; fft3d.c:169:21
  %219:gr64 = SHL64ri %219:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !174; fft3d.c:169:21
  %223:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !176 :: (dereferenceable load 4 from %ir.k); fft3d.c:169:51
  %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  %223:gr64 = SHL64ri %223:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  %223:gr64 = ADD64rm %223:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !175 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:169:49
  %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  %226:gr64_nosp = SHL64ri %226:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  %228:gr64 = COPY %234:gr64_nosp, debug-location !175; fft3d.c:169:49
  %228:gr64 = SHL64ri %228:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
  %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
  MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
  MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
  %231:gr32 = LEA64_32r %234:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !179; fft3d.c:168:38
  MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !179 :: (store 4 into %ir.i); fft3d.c:168:38
  JMP_1 %bb.15, debug-location !180; fft3d.c:168:17

bb.17.for.end:
; predecessors: %bb.15
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !183 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:167:38
  JMP_1 %bb.13, debug-location !184; fft3d.c:167:13

bb.18.for.end37:
; predecessors: %bb.13
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %175:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:172:26
  %176:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 4 from %ir.log); fft3d.c:172:32
  %177:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.len); fft3d.c:172:37
  %178:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !190 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:172:42
  %179:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:172:46
  %180:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 8 from %ir.exp1.addr, align 16); fft3d.c:172:59
  ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; fft3d.c:172:13
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %180:gr64, debug-location !193 :: (store 8 into stack); fft3d.c:172:13
  $edi = COPY %175:gr32, debug-location !193; fft3d.c:172:13
  $esi = COPY %176:gr32, debug-location !193; fft3d.c:172:13
  $edx = COPY %177:gr32, debug-location !193; fft3d.c:172:13
  $ecx = COPY %178:gr32, debug-location !193; fft3d.c:172:13
  $r8d = COPY %179:gr32, debug-location !193; fft3d.c:172:13
  $r9 = MOV32ri64 @plane, debug-location !193; fft3d.c:172:13
  CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !193; fft3d.c:172:13
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; fft3d.c:172:13
  %183:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !194 :: (dereferenceable load 4 from %ir.bls); fft3d.c:173:22
  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %183:gr32, debug-location !196 :: (store 4 into %ir.j); fft3d.c:173:20

bb.19.for.cond38:
; predecessors: %bb.18, %bb.23
  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)

  %184:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !198 :: (dereferenceable load 4 from %ir.j); fft3d.c:173:27
  CMP32rm %184:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !201 :: (dereferenceable load 4 from %ir.ble); fft3d.c:173:29
  JCC_1 %bb.24, 15, implicit killed $eflags, debug-location !202; fft3d.c:173:13
  JMP_1 %bb.20, debug-location !202; fft3d.c:173:13

bb.20.for.body40:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !203 :: (store 4 into %ir.i); fft3d.c:174:24

bb.21.for.cond41:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %187:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !207 :: (dereferenceable load 4 from %ir.i); fft3d.c:174:29
  CMP32rm %187:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:174:31
  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !211; fft3d.c:174:17
  JMP_1 %bb.22, debug-location !211; fft3d.c:174:17

bb.22.for.body43:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %192:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); fft3d.c:175:23
  %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  %192:gr64 = SHL64ri %192:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  %192:gr64 = ADD64rm %192:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !212 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:175:21
  %194:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !215 :: (dereferenceable load 4 from %ir.j); fft3d.c:175:26
  %197:gr64_nosp = COPY %194:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
  %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  %197:gr64_nosp = SHL64ri %197:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  %199:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !216 :: (dereferenceable load 4 from %ir.i); fft3d.c:175:29
  %201:gr64 = COPY %199:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
  %201:gr64 = SHL64ri %201:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  %235:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
  %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
  %204:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
  %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
  %206:gr64 = MOVSX64rr32 %204:gr32, debug-location !224; fft3d.c:175:34
  %206:gr64 = SHL64ri %206:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !224; fft3d.c:175:34
  %207:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane, $noreg, debug-location !224 :: (load 8 from %ir.76); fft3d.c:175:34
  MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
  %208:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !224 :: (load 8 from %ir.76 + 8); fft3d.c:175:34
  MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !225 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:174:38
  JMP_1 %bb.21, debug-location !226; fft3d.c:174:17

bb.23.for.end57:
; predecessors: %bb.21
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !229 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:173:38
  JMP_1 %bb.19, debug-location !230; fft3d.c:173:13

bb.24.for.end60:
; predecessors: %bb.19
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %186:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !233 :: (dereferenceable load 4 from @fftblock); fft3d.c:162:40
  ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %186:gr32, implicit-def dead $eflags, debug-location !234 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:162:37
  JMP_1 %bb.9, debug-location !235; fft3d.c:162:9

bb.25.for.end63:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.11.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !238 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:161:26
  JMP_1 %bb.7, debug-location !239; fft3d.c:161:5

bb.26.for.end66:
; predecessors: %bb.7
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !242 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:180:9
  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !244; fft3d.c:180:9
  JMP_1 %bb.27, debug-location !244; fft3d.c:180:9

bb.27.if.then68:
; predecessors: %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !245; fft3d.c:181:9
  $edi = MOV32ri 7, debug-location !245; fft3d.c:181:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !245; fft3d.c:181:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !245; fft3d.c:181:9

bb.28.if.end69:
; predecessors: %bb.26, %bb.27
  successors: %bb.29(0x40000000), %bb.30(0x40000000); %bb.29(50.00%), %bb.30(50.00%)

  $eax = MOV32ri 8192, debug-location !247; fft3d.c:183:26
  $edx = MOV32r0 implicit-def dead $eflags, debug-location !247; fft3d.c:183:26
  IDIV32m %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !247 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:183:26
  %25:gr32 = COPY killed $eax, debug-location !247; fft3d.c:183:26
  MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %25:gr32, debug-location !248 :: (store 4 into @fftblock); fft3d.c:183:14
  CMP32ri8 %25:gr32, 32, implicit-def $eflags, debug-location !251; fft3d.c:184:18
  JCC_1 %bb.30, 12, implicit killed $eflags, debug-location !252; fft3d.c:184:9
  JMP_1 %bb.29, debug-location !252; fft3d.c:184:9

bb.29.if.then72:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  MOV32mi $rip, 1, $noreg, @fftblock, $noreg, 32, debug-location !253 :: (store 4 into @fftblock); fft3d.c:185:18

bb.30.if.end73:
; predecessors: %bb.28, %bb.29
  successors: %bb.31(0x50000000), %bb.32(0x30000000); %bb.31(62.50%), %bb.32(37.50%)

  %28:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !255 :: (dereferenceable load 4 from @fftblock); fft3d.c:186:12
  %28:gr32 = nsw INC32r %28:gr32(tied-def 0), implicit-def dead $eflags, debug-location !256; fft3d.c:186:21
  MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %28:gr32, debug-location !257 :: (store 4 into %ir.blkp); fft3d.c:186:10
  %29:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !258 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:187:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; fft3d.c:187:11
  $edi = COPY %29:gr32, debug-location !259; fft3d.c:187:11
  CALL64pcrel32 @ilog2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !259; fft3d.c:187:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; fft3d.c:187:11
  %30:gr32 = COPY killed $eax, debug-location !259; fft3d.c:187:11
  MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %30:gr32, debug-location !260 :: (store 4 into %ir.log); fft3d.c:187:9
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:188:9
  JCC_1 %bb.32, 4, implicit killed $eflags, debug-location !263; fft3d.c:188:9
  JMP_1 %bb.31, debug-location !263; fft3d.c:188:9

bb.31.if.then77:
; predecessors: %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; fft3d.c:189:9
  $edi = MOV32ri 8, debug-location !264; fft3d.c:189:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !264; fft3d.c:189:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; fft3d.c:189:9

bb.32.if.end78:
; predecessors: %bb.30, %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !265 :: (store 4 into %ir.k); fft3d.c:190:12

bb.33.for.cond79:
; predecessors: %bb.32, %bb.39
  successors: %bb.34(0x7c000000), %bb.40(0x04000000); %bb.34(96.88%), %bb.40(3.12%)

  %32:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); fft3d.c:190:17
  CMP32rm %32:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !271 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:190:19
  JCC_1 %bb.40, 13, implicit killed $eflags, debug-location !272; fft3d.c:190:5
  JMP_1 %bb.34, debug-location !272; fft3d.c:190:5

bb.34.for.body81:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  MOV32mi %stack.13.bls, 1, $noreg, 0, $noreg, 0, debug-location !273 :: (store 4 into %ir.bls); fft3d.c:191:18

bb.35.for.cond82:
; predecessors: %bb.34, %bb.38
  successors: %bb.36(0x7c000000), %bb.39(0x04000000); %bb.36(96.88%), %bb.39(3.12%)

  %126:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !277 :: (dereferenceable load 4 from %ir.bls); fft3d.c:191:23
  CMP32rm %126:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !280 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:191:27
  JCC_1 %bb.39, 13, implicit killed $eflags, debug-location !281; fft3d.c:191:9
  JMP_1 %bb.36, debug-location !281; fft3d.c:191:9

bb.36.for.body84:
; predecessors: %bb.35
  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 4 from %ir.bls); fft3d.c:192:19
  undef %130.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !284 :: (dereferenceable load 4 from @fftblock); fft3d.c:192:25
  %134:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %130:gr64_nosp, -1, $noreg, debug-location !286; fft3d.c:192:34
  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %134:gr32, debug-location !287 :: (store 4 into %ir.ble); fft3d.c:192:17
  CMP32rm %134:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:193:21
  JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !292; fft3d.c:193:17
  JMP_1 %bb.37, debug-location !292; fft3d.c:193:17

bb.37.if.then88:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  %137:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !293 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:194:23
  %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags, debug-location !294; fft3d.c:194:26
  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %137:gr32, debug-location !295 :: (store 4 into %ir.ble); fft3d.c:194:21

bb.38.if.end90:
; predecessors: %bb.36, %bb.37
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %140:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !297 :: (dereferenceable load 4 from %ir.ble); fft3d.c:195:19
  %140:gr32 = nsw SUB32rm %140:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !299 :: (dereferenceable load 4 from %ir.bls); fft3d.c:195:23
  %140:gr32 = nsw INC32r %140:gr32(tied-def 0), implicit-def dead $eflags, debug-location !300; fft3d.c:195:29
  MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %140:gr32, debug-location !301 :: (store 4 into %ir.len); fft3d.c:195:17
  %141:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !302 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:196:26
  %142:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !303 :: (dereferenceable load 4 from %ir.log); fft3d.c:196:32
  %143:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !305 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:196:42
  %145:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:196:46
  %145:gr32 = nsw INC32r %145:gr32(tied-def 0), implicit-def dead $eflags, debug-location !307; fft3d.c:196:49
  %149:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !309 :: (dereferenceable load 4 from %ir.k); fft3d.c:196:57
  %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  %149:gr64 = SHL64ri %149:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !308 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:196:55
  %153:gr64 = MOVSX64rm32 %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.bls); fft3d.c:196:63
  %153:gr64 = SHL64ri %153:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  %154:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.exp2.addr); fft3d.c:196:69
  ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; fft3d.c:196:13
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %154:gr64, debug-location !313 :: (store 8 into stack); fft3d.c:196:13
  $edi = COPY %141:gr32, debug-location !313; fft3d.c:196:13
  $esi = COPY %142:gr32, debug-location !313; fft3d.c:196:13
  $edx = COPY %140:gr32, debug-location !313; fft3d.c:196:13
  $ecx = COPY %143:gr32, debug-location !313; fft3d.c:196:13
  $r8d = COPY %145:gr32, debug-location !313; fft3d.c:196:13
  $r9 = COPY %153:gr64, debug-location !313; fft3d.c:196:13
  CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !313; fft3d.c:196:13
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; fft3d.c:196:13
  %156:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !314 :: (dereferenceable load 4 from @fftblock); fft3d.c:191:40
  ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %156:gr32, implicit-def dead $eflags, debug-location !315 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:191:37
  JMP_1 %bb.35, debug-location !316; fft3d.c:191:9

bb.39.for.end101:
; predecessors: %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  INC32m %stack.11.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !319 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:190:26
  JMP_1 %bb.33, debug-location !320; fft3d.c:190:5

bb.40.for.end104:
; predecessors: %bb.33
  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !323 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:199:9
  JCC_1 %bb.42, 4, implicit killed $eflags, debug-location !325; fft3d.c:199:9
  JMP_1 %bb.41, debug-location !325; fft3d.c:199:9

bb.41.if.then106:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !326; fft3d.c:200:9
  $edi = MOV32ri 8, debug-location !326; fft3d.c:200:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !326; fft3d.c:200:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !326; fft3d.c:200:9

bb.42.if.end107:
; predecessors: %bb.40, %bb.41
  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

  $eax = MOV32ri 8192, debug-location !328; fft3d.c:202:26
  $edx = MOV32r0 implicit-def dead $eflags, debug-location !328; fft3d.c:202:26
  IDIV32m %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !328 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:202:26
  %37:gr32 = COPY killed $eax, debug-location !328; fft3d.c:202:26
  MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %37:gr32, debug-location !329 :: (store 4 into @fftblock); fft3d.c:202:14
  CMP32ri8 %37:gr32, 32, implicit-def $eflags, debug-location !332; fft3d.c:203:18
  JCC_1 %bb.44, 12, implicit killed $eflags, debug-location !333; fft3d.c:203:9
  JMP_1 %bb.43, debug-location !333; fft3d.c:203:9

bb.43.if.then110:
; predecessors: %bb.42
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  MOV32mi $rip, 1, $noreg, @fftblock, $noreg, 32, debug-location !334 :: (store 4 into @fftblock); fft3d.c:204:18

bb.44.if.end111:
; predecessors: %bb.42, %bb.43
  successors: %bb.45(0x50000000), %bb.46(0x30000000); %bb.45(62.50%), %bb.46(37.50%)

  %40:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !336 :: (dereferenceable load 4 from @fftblock); fft3d.c:205:12
  %40:gr32 = nsw INC32r %40:gr32(tied-def 0), implicit-def dead $eflags, debug-location !337; fft3d.c:205:21
  MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %40:gr32, debug-location !338 :: (store 4 into %ir.blkp); fft3d.c:205:10
  %41:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !339 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:206:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !340; fft3d.c:206:11
  $edi = COPY %41:gr32, debug-location !340; fft3d.c:206:11
  CALL64pcrel32 @ilog2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !340; fft3d.c:206:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !340; fft3d.c:206:11
  %42:gr32 = COPY killed $eax, debug-location !340; fft3d.c:206:11
  MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %42:gr32, debug-location !341 :: (store 4 into %ir.log); fft3d.c:206:9
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:207:9
  JCC_1 %bb.46, 4, implicit killed $eflags, debug-location !344; fft3d.c:207:9
  JMP_1 %bb.45, debug-location !344; fft3d.c:207:9

bb.45.if.then115:
; predecessors: %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !345; fft3d.c:208:9
  $edi = MOV32ri 9, debug-location !345; fft3d.c:208:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !345; fft3d.c:208:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !345; fft3d.c:208:9

bb.46.if.end116:
; predecessors: %bb.44, %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !346 :: (store 4 into %ir.k); fft3d.c:209:12

bb.47.for.cond117:
; predecessors: %bb.46, %bb.65
  successors: %bb.48(0x7c000000), %bb.66(0x04000000); %bb.48(96.88%), %bb.66(3.12%)

  %44:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !349 :: (dereferenceable load 4 from %ir.k); fft3d.c:209:17
  CMP32rm %44:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !352 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:209:19
  JCC_1 %bb.66, 13, implicit killed $eflags, debug-location !353; fft3d.c:209:5
  JMP_1 %bb.48, debug-location !353; fft3d.c:209:5

bb.48.for.body119:
; predecessors: %bb.47
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  MOV32mi %stack.13.bls, 1, $noreg, 0, $noreg, 0, debug-location !354 :: (store 4 into %ir.bls); fft3d.c:210:18

bb.49.for.cond120:
; predecessors: %bb.48, %bb.64
  successors: %bb.50(0x7c000000), %bb.65(0x04000000); %bb.50(96.88%), %bb.65(3.12%)

  %48:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 4 from %ir.bls); fft3d.c:210:23
  CMP32rm %48:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !361 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:210:27
  JCC_1 %bb.65, 13, implicit killed $eflags, debug-location !362; fft3d.c:210:9
  JMP_1 %bb.50, debug-location !362; fft3d.c:210:9

bb.50.for.body122:
; predecessors: %bb.49
  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

  undef %54.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !363 :: (dereferenceable load 4 from %ir.bls); fft3d.c:211:19
  undef %52.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !365 :: (dereferenceable load 4 from @fftblock); fft3d.c:211:25
  %56:gr32 = LEA64_32r %54:gr64_with_sub_8bit, 1, %52:gr64_nosp, -1, $noreg, debug-location !367; fft3d.c:211:34
  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %56:gr32, debug-location !368 :: (store 4 into %ir.ble); fft3d.c:211:17
  CMP32rm %56:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !372 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:212:21
  JCC_1 %bb.52, 14, implicit killed $eflags, debug-location !373; fft3d.c:212:17
  JMP_1 %bb.51, debug-location !373; fft3d.c:212:17

bb.51.if.then126:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %59:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !374 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:213:23
  %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !375; fft3d.c:213:26
  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %59:gr32, debug-location !376 :: (store 4 into %ir.ble); fft3d.c:213:21

bb.52.if.end128:
; predecessors: %bb.50, %bb.51
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  %62:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !378 :: (dereferenceable load 4 from %ir.ble); fft3d.c:214:19
  %62:gr32 = nsw SUB32rm %62:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !380 :: (dereferenceable load 4 from %ir.bls); fft3d.c:214:23
  %62:gr32 = nsw INC32r %62:gr32(tied-def 0), implicit-def dead $eflags, debug-location !381; fft3d.c:214:29
  MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %62:gr32, debug-location !382 :: (store 4 into %ir.len); fft3d.c:214:17
  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); fft3d.c:215:20

bb.53.for.cond131:
; predecessors: %bb.52, %bb.57
  successors: %bb.54(0x7c000000), %bb.58(0x04000000); %bb.54(96.88%), %bb.58(3.12%)

  %63:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 4 from %ir.i); fft3d.c:215:25
  CMP32rm %63:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !389 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:215:27
  JCC_1 %bb.58, 13, implicit killed $eflags, debug-location !390; fft3d.c:215:13
  JMP_1 %bb.54, debug-location !390; fft3d.c:215:13

bb.54.for.body133:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  %102:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 4 from %ir.bls); fft3d.c:216:26
  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %102:gr32, debug-location !394 :: (store 4 into %ir.j); fft3d.c:216:24

bb.55.for.cond134:
; predecessors: %bb.54, %bb.56
  successors: %bb.56(0x7c000000), %bb.57(0x04000000); %bb.56(96.88%), %bb.57(3.12%)

  %103:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !396 :: (dereferenceable load 4 from %ir.j); fft3d.c:216:31
  CMP32rm %103:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !399 :: (dereferenceable load 4 from %ir.ble); fft3d.c:216:33
  JCC_1 %bb.57, 15, implicit killed $eflags, debug-location !400; fft3d.c:216:17
  JMP_1 %bb.56, debug-location !400; fft3d.c:216:17

bb.56.for.body136:
; predecessors: %bb.55
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  %239:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !401 :: (dereferenceable load 4 from %ir.j); fft3d.c:217:27
  %107:gr32 = COPY %239.sub_32bit:gr64_nosp, debug-location !404; fft3d.c:217:29
  %107:gr32 = nsw SUB32rm %107:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from %ir.bls); fft3d.c:217:29
  %116:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 4 from %ir.i); fft3d.c:217:44
  %111:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
  %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
  %113:gr64 = MOVSX64rr32 %111:gr32, debug-location !409; fft3d.c:217:21
  %113:gr64 = SHL64ri %113:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !409; fft3d.c:217:21
  %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  %116:gr64_with_sub_8bit = SHL64ri %116:gr64_with_sub_8bit(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  %116:gr64_with_sub_8bit = ADD64rm %116:gr64_with_sub_8bit(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !410 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:217:49
  %120:gr64_nosp = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 4 from %ir.k); fft3d.c:217:54
  %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  %120:gr64_nosp = SHL64ri %120:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  %122:gr64 = COPY %239:gr64_nosp, debug-location !410; fft3d.c:217:49
  %122:gr64 = SHL64ri %122:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
  %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
  MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
  MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
  %125:gr32 = LEA64_32r %239:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !414; fft3d.c:216:42
  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !414 :: (store 4 into %ir.j); fft3d.c:216:42
  JMP_1 %bb.55, debug-location !415; fft3d.c:216:17

bb.57.for.end150:
; predecessors: %bb.55
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !418 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:215:34
  JMP_1 %bb.53, debug-location !419; fft3d.c:215:13

bb.58.for.end153:
; predecessors: %bb.53
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  %65:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:220:26
  %66:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 4 from %ir.log); fft3d.c:220:32
  %67:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !424 :: (dereferenceable load 4 from %ir.len); fft3d.c:220:37
  %68:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !425 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:220:42
  %69:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:220:46
  %70:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !427 :: (dereferenceable load 8 from %ir.exp3.addr, align 16); fft3d.c:220:59
  ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !428; fft3d.c:220:13
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %70:gr64, debug-location !428 :: (store 8 into stack); fft3d.c:220:13
  $edi = COPY %65:gr32, debug-location !428; fft3d.c:220:13
  $esi = COPY %66:gr32, debug-location !428; fft3d.c:220:13
  $edx = COPY %67:gr32, debug-location !428; fft3d.c:220:13
  $ecx = COPY %68:gr32, debug-location !428; fft3d.c:220:13
  $r8d = COPY %69:gr32, debug-location !428; fft3d.c:220:13
  $r9 = MOV32ri64 @plane, debug-location !428; fft3d.c:220:13
  CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !428; fft3d.c:220:13
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !428; fft3d.c:220:13
  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !429 :: (store 4 into %ir.i); fft3d.c:221:20

bb.59.for.cond154:
; predecessors: %bb.58, %bb.63
  successors: %bb.60(0x7c000000), %bb.64(0x04000000); %bb.60(96.88%), %bb.64(3.12%)

  %75:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:221:30
  %75:gr32 = DEC32r %75:gr32(tied-def 0), implicit-def dead $eflags, debug-location !435; fft3d.c:221:33
  CMP32mr %stack.9.i, 1, $noreg, 0, $noreg, %75:gr32, implicit-def $eflags, debug-location !436 :: (dereferenceable load 4 from %ir.i); fft3d.c:221:27
  JCC_1 %bb.64, 15, implicit killed $eflags, debug-location !437; fft3d.c:221:13
  JMP_1 %bb.60, debug-location !437; fft3d.c:221:13

bb.60.for.body157:
; predecessors: %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %78:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 4 from %ir.bls); fft3d.c:222:26
  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %78:gr32, debug-location !441 :: (store 4 into %ir.j); fft3d.c:222:24

bb.61.for.cond158:
; predecessors: %bb.60, %bb.62
  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

  %79:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.j); fft3d.c:222:31
  CMP32rm %79:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !446 :: (dereferenceable load 4 from %ir.ble); fft3d.c:222:33
  JCC_1 %bb.63, 15, implicit killed $eflags, debug-location !447; fft3d.c:222:17
  JMP_1 %bb.62, debug-location !447; fft3d.c:222:17

bb.62.for.body160:
; predecessors: %bb.61
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %81:gr64 = MOV64rm %stack.5.xout.addr, 1, $noreg, 0, $noreg, debug-location !448 :: (dereferenceable load 8 from %ir.xout.addr); fft3d.c:223:21
  %82:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !450 :: (dereferenceable load 4 from %ir.j); fft3d.c:223:26
  %85:gr64 = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !451 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:223:31
  %85:gr64 = nsw INC64r %85:gr64(tied-def 0), implicit-def dead $eflags, debug-location !452; fft3d.c:223:34
  %86:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !453 :: (dereferenceable load 4 from %ir.k); fft3d.c:223:42
  %91:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !454 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:223:46
  %88:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !455 :: (dereferenceable load 4 from %ir.i); fft3d.c:223:51
  %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
  %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
  %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
  %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
  %91:gr64_nosp = SHL64ri %91:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !448; fft3d.c:223:21
  %240:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
  %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
  %97:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
  %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
  %99:gr64 = MOVSX64rr32 %97:gr32, debug-location !467; fft3d.c:224:25
  %99:gr64 = SHL64ri %99:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !467; fft3d.c:224:25
  %100:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane, $noreg, debug-location !467 :: (load 8 from %ir.174); fft3d.c:224:25
  MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
  %101:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !467 :: (load 8 from %ir.174 + 8); fft3d.c:224:25
  MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
  INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !468 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:222:42
  JMP_1 %bb.61, debug-location !469; fft3d.c:222:17

bb.63.for.end175:
; predecessors: %bb.61
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !472 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:221:39
  JMP_1 %bb.59, debug-location !473; fft3d.c:221:13

bb.64.for.end178:
; predecessors: %bb.59
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %77:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !476 :: (dereferenceable load 4 from @fftblock); fft3d.c:210:40
  ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %77:gr32, implicit-def dead $eflags, debug-location !477 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:210:37
  JMP_1 %bb.49, debug-location !478; fft3d.c:210:9

bb.65.for.end181:
; predecessors: %bb.49
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  INC32m %stack.11.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !481 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:209:26
  JMP_1 %bb.47, debug-location !482; fft3d.c:209:5

bb.66.for.end184:
; predecessors: %bb.47
  successors: %bb.67(0x50000000), %bb.68(0x30000000); %bb.67(62.50%), %bb.68(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !485 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:229:9
  JCC_1 %bb.68, 4, implicit killed $eflags, debug-location !487; fft3d.c:229:9
  JMP_1 %bb.67, debug-location !487; fft3d.c:229:9

bb.67.if.then186:
; predecessors: %bb.66
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !488; fft3d.c:230:9
  $edi = MOV32ri 9, debug-location !488; fft3d.c:230:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !488; fft3d.c:230:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !488; fft3d.c:230:9

bb.68.if.end187:
; predecessors: %bb.66, %bb.67
  successors: %bb.69(0x50000000), %bb.70(0x30000000); %bb.69(62.50%), %bb.70(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !489 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:231:9
  JCC_1 %bb.70, 4, implicit killed $eflags, debug-location !491; fft3d.c:231:9
  JMP_1 %bb.69, debug-location !491; fft3d.c:231:9

bb.69.if.then189:
; predecessors: %bb.68
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !492; fft3d.c:232:9
  $edi = MOV32ri 3, debug-location !492; fft3d.c:232:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !492; fft3d.c:232:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !492; fft3d.c:232:9

bb.70.if.end190:
; predecessors: %bb.68, %bb.69

  RET 0, debug-location !493; fft3d.c:233:1

# End machine code for function fftXYZ.

********** MI Scheduling **********
fftXYZ:%bb.0 entry
  From: %7:gr64 = COPY $r9
    To: JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !90; fft3d.c:151:9
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %4 %1 
Live Thru: 
  LiveReg: %4
  UpdateRegP: SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
              to 
  LiveReg: %1
  UpdateRegP: SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.n1.addr)
              to 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %7:gr64 = COPY $r9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%7
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %6:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%6
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %5:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %4:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%4
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   undef %1.sub_32bit:gr64_with_sub_8bit = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %2:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%2
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV32mr %stack.0.sign.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.sign.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.5.xout.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.xout.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !88 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:151:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !90; fft3d.c:151:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !88 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:151:9
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(12) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.5.xout.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.xout.addr)
Bottom Pressure:
GR16=6
  LiveReg: %7
  UpdateRegP: SU(11) MOV64mr %stack.5.xout.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.xout.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 9 8 7 0 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
Bottom Pressure:
GR16=8
  LiveReg: %6
  UpdateRegP: SU(10) MOV64mr %stack.4.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 9 8 7 1 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=10
  LiveReg: %5
  UpdateRegP: SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 8 7 2 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 7 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 3 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.0.sign.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.sign.addr)
Bottom Pressure:
GR16=12
  LiveReg: %2
  UpdateRegP: SU(6) MOV32mr %stack.0.sign.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.sign.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %2:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %1.sub_32bit:gr64_with_sub_8bit = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %4:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %5:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %6:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %7:gr64 = COPY $r9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:gr64 = COPY $r9
SU(1):   %6:gr64 = COPY $r8
SU(2):   %5:gr32 = COPY $ecx
SU(3):   %4:gr32 = COPY $edx
SU(4):   undef %1.sub_32bit:gr64_with_sub_8bit = COPY $esi
SU(5):   %2:gr32 = COPY $edi
SU(6):   MOV32mr %stack.0.sign.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.sign.addr)
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.n1.addr)
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
SU(10):   MOV64mr %stack.4.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
SU(11):   MOV64mr %stack.5.xout.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.xout.addr)
SU(12):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !88 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:151:9

********** MI Scheduling **********
fftXYZ:%bb.2 if.end
  From: undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
    To: JCC_1 %bb.4, 12, implicit killed $eflags, debug-location !98; fft3d.c:155:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(4).
Max Pressure: GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=8
Live In: %1 %4 
Live Out: %1 %221 
Live Thru: GR16=2
  LiveReg: %1
  LiveReg: %221
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %1.sub_32bit:gr64_with_sub_8bit = nsw INC32r %1.sub_32bit:gr64_with_sub_8bit(tied-def 0), implicit-def dead $eflags, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   $eax = MOV32ri 8192, debug-location !93; fft3d.c:154:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=0
    SU(4): Data Latency=1 Reg=$eax
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   $edx = MOV32r0 implicit-def dead $eflags, debug-location !93; fft3d.c:154:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Out  Latency=0
    SU(4): Data Latency=1 Reg=$edx
    SU(7): Out  Latency=0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(4):   IDIV32m %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !93 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:154:26
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=0
    SU(3): Data Latency=1 Reg=$edx
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$eax
  Successors:
    SU(5): Data Latency=4 Reg=$eax
    SU(7): Out  Latency=0
    SU(6): Ord  Latency=0 Barrier
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(5):   %13:gr32 = COPY killed $eax, debug-location !93; fft3d.c:154:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$eax
  Successors:
    SU(7): Data Latency=0 Reg=%13
    SU(6): Data Latency=0 Reg=%13
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(6):   MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %13:gr32, debug-location !94 :: (store 4 into @fftblock); fft3d.c:154:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%13
    SU(4): Ord  Latency=0 Barrier
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   CMP32ri8 %13:gr32, 32, implicit-def $eflags, debug-location !97; fft3d.c:155:18
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=0 Reg=%13
    SU(4): Out  Latency=0
    SU(3): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.4, 12, implicit killed $eflags, debug-location !98; fft3d.c:155:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) CMP32ri8 %13:gr32, 32, implicit-def $eflags, debug-location !97; fft3d.c:155:18
Bottom Pressure:
GR16=6
  LiveReg: %13
  UpdateRegP: SU(6) MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %13:gr32, debug-location !94 :: (store 4 into @fftblock); fft3d.c:154:14
              to 
  UpdateRegP: SU(7) CMP32ri8 %13:gr32, 32, implicit-def $eflags, debug-location !97; fft3d.c:155:18
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 5c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %13:gr32, debug-location !94 :: (store 4 into @fftblock); fft3d.c:154:14
Bottom Pressure:
GR16=6
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 5 
  Cand SU(1) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) %13:gr32 = COPY killed $eax, debug-location !93; fft3d.c:154:26
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=6
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) IDIV32m %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit $edx, debug-location !93 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:154:26
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=4
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=4
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=8
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
  Rescheduling physreg copy SU(5):   %13:gr32 = COPY killed $eax, debug-location !93; fft3d.c:154:26
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $edx = MOV32r0 implicit-def dead $eflags, debug-location !93; fft3d.c:154:26
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=6
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $eax = MOV32ri 8192, debug-location !93; fft3d.c:154:26
Bottom Pressure:
GR16=4
  GR8_NOREX: 4 <= 6(+ 0 livethru)
  Ready @6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %1.sub_32bit:gr64_with_sub_8bit = nsw INC32r %1.sub_32bit:gr64_with_sub_8bit(tied-def 0), implicit-def dead $eflags, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
Bottom Pressure:
GR16=4
  LiveReg: %1
  UpdateRegP: SU(1) %1.sub_32bit:gr64_with_sub_8bit = nsw INC32r %1.sub_32bit:gr64_with_sub_8bit(tied-def 0), implicit-def dead $eflags, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
Bottom Pressure:
GR16=4
  LiveReg: %4
  UpdateRegP: SU(0) undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
SU(1):   %1.sub_32bit:gr64_with_sub_8bit = nsw INC32r %1.sub_32bit:gr64_with_sub_8bit(tied-def 0), implicit-def dead $eflags, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
SU(2):   $eax = MOV32ri 8192, debug-location !93; fft3d.c:154:26
SU(3):   $edx = MOV32r0 implicit-def dead $eflags, debug-location !93; fft3d.c:154:26
SU(4):   IDIV32m %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !93 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:154:26
SU(5):   %13:gr32 = COPY $eax, debug-location !93; fft3d.c:154:26
SU(6):   MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %13:gr32, debug-location !94 :: (store 4 into @fftblock); fft3d.c:154:14
SU(7):   CMP32ri8 %13:gr32, 32, implicit-def $eflags, debug-location !97; fft3d.c:155:18

********** MI Scheduling **********
fftXYZ:%bb.4 if.end4
  From: %18:gr32 = COPY $eax, debug-location !105; fft3d.c:158:11
    To: JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !109; fft3d.c:159:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr32 = COPY $eax, debug-location !105; fft3d.c:158:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%18
  Single Issue       : false;
SU(1):   MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %18:gr32, debug-location !106 :: (store 4 into %ir.log); fft3d.c:158:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%18
  Single Issue       : false;
SU(2):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !107 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:159:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !109; fft3d.c:159:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !107 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:159:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %18:gr32, debug-location !106 :: (store 4 into %ir.log); fft3d.c:158:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr32 = COPY $eax, debug-location !105; fft3d.c:158:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %18:gr32 = COPY $eax, debug-location !105; fft3d.c:158:11
SU(1):   MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %18:gr32, debug-location !106 :: (store 4 into %ir.log); fft3d.c:158:9
SU(2):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !107 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:159:9

********** MI Scheduling **********
fftXYZ:%bb.4 if.end4
  From: %16:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !101 :: (dereferenceable load 4 from @fftblock); fft3d.c:157:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !105; fft3d.c:158:11
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %16:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !101 :: (dereferenceable load 4 from @fftblock); fft3d.c:157:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%16
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %16:gr32 = nsw INC32r %16:gr32(tied-def 0), implicit-def dead $eflags, debug-location !102; fft3d.c:157:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(2):   MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %16:gr32, debug-location !103 :: (store 4 into %ir.blkp); fft3d.c:157:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(3):   %17:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !104 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:158:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !105; fft3d.c:158:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %17:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !104 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:158:17
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %16:gr32, debug-location !103 :: (store 4 into %ir.blkp); fft3d.c:157:10
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %16:gr32 = nsw INC32r %16:gr32(tied-def 0), implicit-def dead $eflags, debug-location !102; fft3d.c:157:21
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !101 :: (dereferenceable load 4 from @fftblock); fft3d.c:157:12
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %16:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !101 :: (dereferenceable load 4 from @fftblock); fft3d.c:157:12
SU(1):   %16:gr32 = nsw INC32r %16:gr32(tied-def 0), implicit-def dead $eflags, debug-location !102; fft3d.c:157:21
SU(2):   MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %16:gr32, debug-location !103 :: (store 4 into %ir.blkp); fft3d.c:157:10
SU(3):   %17:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !104 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:158:17

********** MI Scheduling **********
fftXYZ:%bb.6 if.end8
  From: MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.k); fft3d.c:161:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.k); fft3d.c:161:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %221:gr64_with_sub_8bit = nuw IMUL64rr %221:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %221:gr64_with_sub_8bit = nuw IMUL64rr %221:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.k); fft3d.c:161:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.k); fft3d.c:161:12
SU(1):   %221:gr64_with_sub_8bit = nuw IMUL64rr %221:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

********** MI Scheduling **********
fftXYZ:%bb.7 for.cond
  From: %20:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !114 :: (dereferenceable load 4 from %ir.k); fft3d.c:161:17
    To: JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !118; fft3d.c:161:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %20:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !114 :: (dereferenceable load 4 from %ir.k); fft3d.c:161:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(1):   CMP32rm %20:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:161:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !118; fft3d.c:161:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %20:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:161:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !114 :: (dereferenceable load 4 from %ir.k); fft3d.c:161:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %20:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !114 :: (dereferenceable load 4 from %ir.k); fft3d.c:161:17
SU(1):   CMP32rm %20:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:161:19

********** MI Scheduling **********
fftXYZ:%bb.9 for.cond10
  From: %157:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !123 :: (dereferenceable load 4 from %ir.bls); fft3d.c:162:23
    To: JCC_1 %bb.25, 13, implicit killed $eflags, debug-location !127; fft3d.c:162:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %157:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !123 :: (dereferenceable load 4 from %ir.bls); fft3d.c:162:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%157
  Single Issue       : false;
SU(1):   CMP32rm %157:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !126 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:162:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.25, 13, implicit killed $eflags, debug-location !127; fft3d.c:162:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %157:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !126 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:162:27
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %157:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !123 :: (dereferenceable load 4 from %ir.bls); fft3d.c:162:23
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %157:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !123 :: (dereferenceable load 4 from %ir.bls); fft3d.c:162:23
SU(1):   CMP32rm %157:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !126 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:162:27

********** MI Scheduling **********
fftXYZ:%bb.10 for.body12
  From: undef %163.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !128 :: (dereferenceable load 4 from %ir.bls); fft3d.c:163:19
    To: JCC_1 %bb.12, 14, implicit killed $eflags, debug-location !138; fft3d.c:164:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %163.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !128 :: (dereferenceable load 4 from %ir.bls); fft3d.c:163:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%163
  Single Issue       : false;
SU(1):   undef %161.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !130 :: (dereferenceable load 4 from @fftblock); fft3d.c:163:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%161
  Single Issue       : false;
SU(2):   %165:gr32 = LEA64_32r %163:gr64_with_sub_8bit, 1, %161:gr64_nosp, -1, $noreg, debug-location !132; fft3d.c:163:34
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%161
    SU(0): Data Latency=4 Reg=%163
  Successors:
    SU(4): Data Latency=1 Reg=%165
    SU(3): Data Latency=1 Reg=%165
  Single Issue       : false;
SU(3):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %165:gr32, debug-location !133 :: (store 4 into %ir.ble); fft3d.c:163:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%165
  Single Issue       : false;
SU(4):   CMP32rm %165:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:164:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%165
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 14, implicit killed $eflags, debug-location !138; fft3d.c:164:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) CMP32rm %165:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:164:21
  Ready @4c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %165:gr32, debug-location !133 :: (store 4 into %ir.ble); fft3d.c:163:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %165:gr32 = LEA64_32r %163:gr64_with_sub_8bit, 1, %161:gr64_nosp, -1, $noreg, debug-location !132; fft3d.c:163:34
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %161.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !130 :: (dereferenceable load 4 from @fftblock); fft3d.c:163:25
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %163.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !128 :: (dereferenceable load 4 from %ir.bls); fft3d.c:163:19
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   undef %163.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !128 :: (dereferenceable load 4 from %ir.bls); fft3d.c:163:19
SU(1):   undef %161.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !130 :: (dereferenceable load 4 from @fftblock); fft3d.c:163:25
SU(2):   %165:gr32 = LEA64_32r %163:gr64_with_sub_8bit, 1, %161:gr64_nosp, -1, $noreg, debug-location !132; fft3d.c:163:34
SU(3):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %165:gr32, debug-location !133 :: (store 4 into %ir.ble); fft3d.c:163:17
SU(4):   CMP32rm %165:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:164:21

********** MI Scheduling **********
fftXYZ:%bb.11 if.then15
  From: %168:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:165:23
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %168:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:165:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%168
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %168:gr32 = DEC32r %168:gr32(tied-def 0), implicit-def dead $eflags, debug-location !140; fft3d.c:165:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%168
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%168
  Single Issue       : false;
SU(2):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %168:gr32, debug-location !141 :: (store 4 into %ir.ble); fft3d.c:165:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%168
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %168:gr32, debug-location !141 :: (store 4 into %ir.ble); fft3d.c:165:21
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %168:gr32 = DEC32r %168:gr32(tied-def 0), implicit-def dead $eflags, debug-location !140; fft3d.c:165:26
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %168:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:165:23
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %168:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:165:23
SU(1):   %168:gr32 = DEC32r %168:gr32(tied-def 0), implicit-def dead $eflags, debug-location !140; fft3d.c:165:26
SU(2):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %168:gr32, debug-location !141 :: (store 4 into %ir.ble); fft3d.c:165:21

********** MI Scheduling **********
fftXYZ:%bb.12 if.end17
  From: %172:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !143 :: (dereferenceable load 4 from %ir.ble); fft3d.c:166:19
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %172:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !143 :: (dereferenceable load 4 from %ir.ble); fft3d.c:166:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%172
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(1):   %170:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !144 :: (dereferenceable load 4 from %ir.bls); fft3d.c:166:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=4 Reg=%170
    SU(2): Data Latency=4 Reg=%170
  Single Issue       : false;
SU(2):   %172:gr32 = nsw SUB32rr %172:gr32(tied-def 0), %170:gr32, implicit-def dead $eflags, debug-location !145; fft3d.c:166:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%170
    SU(0): Data Latency=4 Reg=%172
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%172
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %172:gr32 = nsw INC32r %172:gr32(tied-def 0), implicit-def dead $eflags, debug-location !146; fft3d.c:166:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%172
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%172
  Single Issue       : false;
SU(4):   MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %172:gr32, debug-location !147 :: (store 4 into %ir.len); fft3d.c:166:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%172
  Single Issue       : false;
SU(5):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %170:gr32, debug-location !150 :: (store 4 into %ir.j); fft3d.c:167:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%170
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %170:gr32, debug-location !150 :: (store 4 into %ir.j); fft3d.c:167:20
  Ready @0c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %172:gr32, debug-location !147 :: (store 4 into %ir.len); fft3d.c:166:17
  Ready @0c
  BotQ.A TopLatency SU(4) 6c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %172:gr32 = nsw INC32r %172:gr32(tied-def 0), implicit-def dead $eflags, debug-location !146; fft3d.c:166:29
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %172:gr32 = nsw SUB32rr %172:gr32(tied-def 0), %170:gr32, implicit-def dead $eflags, debug-location !145; fft3d.c:166:23
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %170:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !144 :: (dereferenceable load 4 from %ir.bls); fft3d.c:166:25
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %172:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !143 :: (dereferenceable load 4 from %ir.ble); fft3d.c:166:19
  Ready @6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %172:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !143 :: (dereferenceable load 4 from %ir.ble); fft3d.c:166:19
SU(1):   %170:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !144 :: (dereferenceable load 4 from %ir.bls); fft3d.c:166:25
SU(2):   %172:gr32 = nsw SUB32rr %172:gr32(tied-def 0), %170:gr32, implicit-def dead $eflags, debug-location !145; fft3d.c:166:23
SU(3):   %172:gr32 = nsw INC32r %172:gr32(tied-def 0), implicit-def dead $eflags, debug-location !146; fft3d.c:166:29
SU(4):   MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %172:gr32, debug-location !147 :: (store 4 into %ir.len); fft3d.c:166:17
SU(5):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %170:gr32, debug-location !150 :: (store 4 into %ir.j); fft3d.c:167:20

********** MI Scheduling **********
fftXYZ:%bb.13 for.cond20
  From: %173:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !152 :: (dereferenceable load 4 from %ir.j); fft3d.c:167:27
    To: JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !156; fft3d.c:167:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %173:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !152 :: (dereferenceable load 4 from %ir.j); fft3d.c:167:27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(1):   CMP32rm %173:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !155 :: (dereferenceable load 4 from %ir.ble); fft3d.c:167:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%173
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !156; fft3d.c:167:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %173:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !155 :: (dereferenceable load 4 from %ir.ble); fft3d.c:167:29
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %173:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !152 :: (dereferenceable load 4 from %ir.j); fft3d.c:167:27
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %173:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !152 :: (dereferenceable load 4 from %ir.j); fft3d.c:167:27
SU(1):   CMP32rm %173:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !155 :: (dereferenceable load 4 from %ir.ble); fft3d.c:167:29

********** MI Scheduling **********
fftXYZ:%bb.15 for.cond23
  From: %209:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 4 from %ir.i); fft3d.c:168:29
    To: JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !165; fft3d.c:168:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %209:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 4 from %ir.i); fft3d.c:168:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%209
  Single Issue       : false;
SU(1):   CMP32rm %209:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !164 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:168:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%209
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !165; fft3d.c:168:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %209:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !164 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:168:31
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %209:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 4 from %ir.i); fft3d.c:168:29
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %209:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 4 from %ir.i); fft3d.c:168:29
SU(1):   CMP32rm %209:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !164 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:168:31

********** MI Scheduling **********
fftXYZ:%bb.16 for.body25
  From: %226:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 4 from %ir.j); fft3d.c:169:27
    To: JMP_1 %bb.15, debug-location !180; fft3d.c:168:17
 RegionInstrs: 25
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=14
Live In: %1 %221 
Live Out: %1 %221 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(14) %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to 
  LiveReg: %221
  UpdateRegP: SU(11) %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
Constraining copy SU(17)
  Local use SU(23) -> SU(17)
  Local use SU(6) -> SU(17)
SU(0):   %226:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 4 from %ir.j); fft3d.c:169:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(14): Data Latency=4 Reg=%226
    SU(2): Data Latency=4 Reg=%226
    SU(14): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %232:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%232
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %213:gr32 = COPY %226.sub_32bit:gr64_nosp, debug-location !169; fft3d.c:169:29
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%226
  Successors:
    SU(3): Data Latency=0 Reg=%213
    SU(3): Out  Latency=0
    SU(14): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=0 Reg=%213
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%232
  Successors:
    SU(7): Data Latency=1 Reg=%213
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %234:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !171 :: (dereferenceable load 4 from %ir.i); fft3d.c:169:44
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(23): Data Latency=4 Reg=%234
    SU(17): Data Latency=4 Reg=%234
    SU(6): Data Latency=4 Reg=%234
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %217:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(6): Data Latency=4 Reg=%217
    SU(6): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
  # preds left       : 3
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=%217
    SU(5): Out  Latency=0
    SU(4): Data Latency=4 Reg=%234
  Successors:
    SU(7): Data Latency=1 Reg=%217
    SU(7): Out  Latency=0
    SU(17): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%217
    SU(6): Out  Latency=0
    SU(3): Data Latency=1 Reg=%213
  Successors:
    SU(8): Data Latency=1 Reg=%217
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %219:gr64 = MOVSX64rr32 %217:gr32, debug-location !174; fft3d.c:169:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=%217
  Successors:
    SU(9): Data Latency=1 Reg=%219
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %219:gr64 = SHL64ri %219:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !174; fft3d.c:169:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%219
    SU(8): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%219
    SU(21): Data Latency=1 Reg=%219
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %223:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !176 :: (dereferenceable load 4 from %ir.k); fft3d.c:169:51
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=4 Reg=%223
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(10): Data Latency=4 Reg=%223
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%223
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %223:gr64 = SHL64ri %223:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(11): Data Latency=1 Reg=%223
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%223
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %223:gr64 = ADD64rm %223:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !175 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:169:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(12): Data Latency=1 Reg=%223
    SU(12): Out  Latency=0
  Successors:
    SU(16): Data Latency=4 Reg=%223
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Data Latency=4 Reg=%226
    SU(0): Out  Latency=0
  Successors:
    SU(15): Data Latency=1 Reg=%226
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %226:gr64_nosp = SHL64ri %226:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=%226
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%226
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(13): Data Latency=4 Reg=%223
    SU(15): Out  Latency=0
    SU(15): Data Latency=1 Reg=%226
  Successors:
    SU(20): Data Latency=1 Reg=%226
    SU(19): Data Latency=1 Reg=%226
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %228:gr64 = COPY %234:gr64_nosp, debug-location !175; fft3d.c:169:49
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%234
    SU(23): Ord  Latency=0 Weak
    SU(6): Ord  Latency=0 Weak
  Successors:
    SU(18): Data Latency=0 Reg=%228
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %228:gr64 = SHL64ri %228:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(17): Data Latency=0 Reg=%228
    SU(17): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%228
    SU(19): Data Latency=1 Reg=%228
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(16): Data Latency=1 Reg=%226
    SU(18): Data Latency=1 Reg=%228
  Successors:
    SU(21): Data Latency=4 Reg=%229
    SU(24): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(16): Data Latency=1 Reg=%226
    SU(18): Data Latency=1 Reg=%228
  Successors:
    SU(22): Data Latency=4 Reg=%230
    SU(24): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(20): Ord  Latency=0 Memory
    SU(19): Data Latency=4 Reg=%229
    SU(19): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=%219
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(22):   MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(20): Data Latency=4 Reg=%230
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=%219
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(23):   %231:gr32 = LEA64_32r %234:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !179; fft3d.c:168:38
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%234
  Successors:
    SU(24): Data Latency=1 Reg=%231
    SU(17): Ord  Latency=0 Weak
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !179 :: (store 4 into %ir.i); fft3d.c:168:38
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(23): Data Latency=1 Reg=%231
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !180; fft3d.c:168:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 22 21 
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !179 :: (store 4 into %ir.i); fft3d.c:168:38
Bottom Pressure:
GR16=6
  LiveReg: %231
  UpdateRegP: SU(24) MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !179 :: (store 4 into %ir.i); fft3d.c:168:38
              to 
  Ready @0c
  BotQ.A TopLatency SU(24) 11c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 22 23 
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot WEAK      
Scheduling SU(22) MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
Bottom Pressure:
GR16=10
  LiveReg: %219
  UpdateRegP: SU(21) MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
              to GR16 2
  UpdateRegP: SU(22) MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
              to GR16 2
  LiveReg: %230
  UpdateRegP: SU(22) MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 15c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 23 
  Cand SU(21) ORDER                              
Pick Bot WEAK      
Scheduling SU(21) MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %229
  UpdateRegP: SU(21) MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 20 19 9 
  Cand SU(23) ORDER                              
  Cand SU(20) WEAK                               
Pick Bot WEAK      
Scheduling SU(20) %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
Bottom Pressure:
GR16=14
  LiveReg: %228
  UpdateRegP: SU(19) %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
              to 
  UpdateRegP: SU(20) %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
              to 
  LiveReg: %226
  UpdateRegP: SU(19) %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
              to GR16 -2
  UpdateRegP: SU(20) %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(20) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 9 19 
  Cand SU(23) ORDER                              
  Cand SU(9) WEAK                               
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
Bottom Pressure:
GR16=12
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 9 16 18 
  Cand SU(23) ORDER                              
  Cand SU(9) WEAK                               
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %228:gr64 = SHL64ri %228:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %228
  UpdateRegP: SU(18) %228:gr64 = SHL64ri %228:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(18) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 9 16 17 
  Cand SU(23) ORDER                              
  Cand SU(9) WEAK                               
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %228:gr64 = COPY %234:gr64_nosp, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %234
  UpdateRegP: SU(6) %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
              to 
  UpdateRegP: SU(17) %228:gr64 = COPY %234:gr64_nosp, debug-location !175; fft3d.c:169:49
              to GR16 -2
  UpdateRegP: SU(23) %231:gr32 = LEA64_32r %234:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !179; fft3d.c:168:38
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 9 16 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %231:gr32 = LEA64_32r %234:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !179; fft3d.c:168:38
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 9 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %226
  UpdateRegP: SU(16) %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to 
  LiveReg: %223
  UpdateRegP: SU(16) %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to GR16 -2
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 13 15 
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %226:gr64_nosp = SHL64ri %226:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %226
  UpdateRegP: SU(15) %226:gr64_nosp = SHL64ri %226:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(15) 6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 13 14 
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %226
  UpdateRegP: SU(2) %213:gr32 = COPY %226.sub_32bit:gr64_nosp, debug-location !169; fft3d.c:169:29
              to GR16 -2
  UpdateRegP: SU(14) %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(14) 7c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 13 
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %223:gr64 = ADD64rm %223:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !175 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %223
  UpdateRegP: SU(13) %223:gr64 = ADD64rm %223:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !175 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:169:49
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(13) 9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 12 
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %223:gr64 = SHL64ri %223:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %223
  UpdateRegP: SU(12) %223:gr64 = SHL64ri %223:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(12) 10c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
Bottom Pressure:
GR16=12
  LiveReg: %223
  UpdateRegP: SU(11) %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
              to GR16 -2
  Ready @11c
  BotQ.A BotLatency SU(11) 11c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %223:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !176 :: (dereferenceable load 4 from %ir.k); fft3d.c:169:51
Bottom Pressure:
GR16=10
  Ready @15c
  BotQ.A BotLatency SU(10) 15c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %219:gr64 = SHL64ri %219:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !174; fft3d.c:169:21
Bottom Pressure:
GR16=10
  LiveReg: %219
  UpdateRegP: SU(9) %219:gr64 = SHL64ri %219:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !174; fft3d.c:169:21
              to GR16 -2
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %219:gr64 = MOVSX64rr32 %217:gr32, debug-location !174; fft3d.c:169:21
Bottom Pressure:
GR16=10
  LiveReg: %217
  UpdateRegP: SU(8) %219:gr64 = MOVSX64rr32 %217:gr32, debug-location !174; fft3d.c:169:21
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
Bottom Pressure:
GR16=12
  LiveReg: %217
  UpdateRegP: SU(7) %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
              to 
  LiveReg: %213
  UpdateRegP: SU(7) %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
              to GR16 -2
  Ready @5c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
Bottom Pressure:
GR16=12
  LiveReg: %217
  UpdateRegP: SU(6) %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
              to GR16 -2
  Ready @6c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %217:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
Bottom Pressure:
GR16=10
  Ready @10c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %234:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !171 :: (dereferenceable load 4 from %ir.i); fft3d.c:169:44
Bottom Pressure:
GR16=8
  Ready @10c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
Bottom Pressure:
GR16=10
  LiveReg: %213
  UpdateRegP: SU(3) %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
              to 
  LiveReg: %232
  UpdateRegP: SU(3) %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
              to GR16 -2
  Ready @6c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %213:gr32 = COPY %226.sub_32bit:gr64_nosp, debug-location !169; fft3d.c:169:29
Bottom Pressure:
GR16=8
  Ready @7c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %232:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
Bottom Pressure:
GR16=6
  Ready @10c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %226:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 4 from %ir.j); fft3d.c:169:27
Bottom Pressure:
GR16=4
  Ready @11c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %226:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 4 from %ir.j); fft3d.c:169:27
SU(1):   %232:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
SU(2):   %213:gr32 = COPY %226.sub_32bit:gr64_nosp, debug-location !169; fft3d.c:169:29
SU(3):   %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
SU(4):   %234:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !171 :: (dereferenceable load 4 from %ir.i); fft3d.c:169:44
SU(5):   %217:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
SU(6):   %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
SU(7):   %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
SU(8):   %219:gr64 = MOVSX64rr32 %217:gr32, debug-location !174; fft3d.c:169:21
SU(9):   %219:gr64 = SHL64ri %219:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !174; fft3d.c:169:21
SU(10):   %223:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !176 :: (dereferenceable load 4 from %ir.k); fft3d.c:169:51
SU(11):   %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
SU(12):   %223:gr64 = SHL64ri %223:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
SU(13):   %223:gr64 = ADD64rm %223:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !175 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:169:49
SU(14):   %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
SU(15):   %226:gr64_nosp = SHL64ri %226:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
SU(16):   %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
SU(23):   %231:gr32 = LEA64_32r %234:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !179; fft3d.c:168:38
SU(17):   %228:gr64 = COPY %234:gr64_nosp, debug-location !175; fft3d.c:169:49
SU(18):   %228:gr64 = SHL64ri %228:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
SU(19):   %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
SU(20):   %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
SU(21):   MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
SU(22):   MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
SU(24):   MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !179 :: (store 4 into %ir.i); fft3d.c:168:38

********** MI Scheduling **********
fftXYZ:%bb.18 for.end37
  From: %183:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !194 :: (dereferenceable load 4 from %ir.bls); fft3d.c:173:22
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %183:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !194 :: (dereferenceable load 4 from %ir.bls); fft3d.c:173:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(1):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %183:gr32, debug-location !196 :: (store 4 into %ir.j); fft3d.c:173:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%183
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %183:gr32, debug-location !196 :: (store 4 into %ir.j); fft3d.c:173:20
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %183:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !194 :: (dereferenceable load 4 from %ir.bls); fft3d.c:173:22
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %183:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !194 :: (dereferenceable load 4 from %ir.bls); fft3d.c:173:22
SU(1):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %183:gr32, debug-location !196 :: (store 4 into %ir.j); fft3d.c:173:20

********** MI Scheduling **********
fftXYZ:%bb.18 for.end37
  From: MOV64mr $rsp, 1, $noreg, 0, $noreg, %180:gr64, debug-location !193 :: (store 8 into stack); fft3d.c:172:13
    To: CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !193; fft3d.c:172:13
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %180:gr64, debug-location !193 :: (store 8 into stack); fft3d.c:172:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = COPY %175:gr32, debug-location !193; fft3d.c:172:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $esi = COPY %176:gr32, debug-location !193; fft3d.c:172:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $edx = COPY %177:gr32, debug-location !193; fft3d.c:172:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $ecx = COPY %178:gr32, debug-location !193; fft3d.c:172:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $r8d = COPY %179:gr32, debug-location !193; fft3d.c:172:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $r9 = MOV32ri64 @plane, debug-location !193; fft3d.c:172:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !193; fft3d.c:172:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $r8d = COPY %179:gr32, debug-location !193; fft3d.c:172:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $ecx = COPY %178:gr32, debug-location !193; fft3d.c:172:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $edx = COPY %177:gr32, debug-location !193; fft3d.c:172:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 2 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $esi = COPY %176:gr32, debug-location !193; fft3d.c:172:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = COPY %175:gr32, debug-location !193; fft3d.c:172:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) $r9 = MOV32ri64 @plane, debug-location !193; fft3d.c:172:13
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr $rsp, 1, $noreg, 0, $noreg, %180:gr64, debug-location !193 :: (store 8 into stack); fft3d.c:172:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %180:gr64, debug-location !193 :: (store 8 into stack); fft3d.c:172:13
SU(6):   $r9 = MOV32ri64 @plane, debug-location !193; fft3d.c:172:13
SU(1):   $edi = COPY %175:gr32, debug-location !193; fft3d.c:172:13
SU(2):   $esi = COPY %176:gr32, debug-location !193; fft3d.c:172:13
SU(3):   $edx = COPY %177:gr32, debug-location !193; fft3d.c:172:13
SU(4):   $ecx = COPY %178:gr32, debug-location !193; fft3d.c:172:13
SU(5):   $r8d = COPY %179:gr32, debug-location !193; fft3d.c:172:13

********** MI Scheduling **********
fftXYZ:%bb.18 for.end37
  From: %175:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:172:26
    To: ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; fft3d.c:172:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %175:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:172:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %176:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 4 from %ir.log); fft3d.c:172:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %177:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.len); fft3d.c:172:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %178:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !190 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:172:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %179:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:172:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %180:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 8 from %ir.exp1.addr, align 16); fft3d.c:172:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; fft3d.c:172:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %180:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 8 from %ir.exp1.addr, align 16); fft3d.c:172:59
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %179:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:172:46
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %178:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !190 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:172:42
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %177:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.len); fft3d.c:172:37
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %176:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 4 from %ir.log); fft3d.c:172:32
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %175:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:172:26
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %175:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:172:26
SU(1):   %176:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 4 from %ir.log); fft3d.c:172:32
SU(2):   %177:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.len); fft3d.c:172:37
SU(3):   %178:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !190 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:172:42
SU(4):   %179:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:172:46
SU(5):   %180:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 8 from %ir.exp1.addr, align 16); fft3d.c:172:59

********** MI Scheduling **********
fftXYZ:%bb.19 for.cond38
  From: %184:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !198 :: (dereferenceable load 4 from %ir.j); fft3d.c:173:27
    To: JCC_1 %bb.24, 15, implicit $eflags, debug-location !202; fft3d.c:173:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %184:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !198 :: (dereferenceable load 4 from %ir.j); fft3d.c:173:27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%184
  Single Issue       : false;
SU(1):   CMP32rm %184:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !201 :: (dereferenceable load 4 from %ir.ble); fft3d.c:173:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%184
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.24, 15, implicit $eflags, debug-location !202; fft3d.c:173:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %184:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !201 :: (dereferenceable load 4 from %ir.ble); fft3d.c:173:29
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %184:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !198 :: (dereferenceable load 4 from %ir.j); fft3d.c:173:27
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %184:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !198 :: (dereferenceable load 4 from %ir.j); fft3d.c:173:27
SU(1):   CMP32rm %184:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !201 :: (dereferenceable load 4 from %ir.ble); fft3d.c:173:29

********** MI Scheduling **********
fftXYZ:%bb.21 for.cond41
  From: %187:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !207 :: (dereferenceable load 4 from %ir.i); fft3d.c:174:29
    To: JCC_1 %bb.23, 13, implicit $eflags, debug-location !211; fft3d.c:174:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %187:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !207 :: (dereferenceable load 4 from %ir.i); fft3d.c:174:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(1):   CMP32rm %187:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:174:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%187
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 13, implicit $eflags, debug-location !211; fft3d.c:174:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %187:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:174:31
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %187:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !207 :: (dereferenceable load 4 from %ir.i); fft3d.c:174:29
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %187:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !207 :: (dereferenceable load 4 from %ir.i); fft3d.c:174:29
SU(1):   CMP32rm %187:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:174:31

********** MI Scheduling **********
fftXYZ:%bb.22 for.body43
  From: %192:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); fft3d.c:175:23
    To: JMP_1 %bb.21, debug-location !226; fft3d.c:174:17
 RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=14
Live In: %1 %221 
Live Out: %1 %221 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(6) %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to 
  LiveReg: %221
  UpdateRegP: SU(1) %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
Constraining copy SU(10)
  Local use SU(15) -> SU(10)
SU(0):   %192:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); fft3d.c:175:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(1): Data Latency=4 Reg=%192
    SU(1): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(0): Data Latency=4 Reg=%192
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%192
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %192:gr64 = SHL64ri %192:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=%192
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%192
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %192:gr64 = ADD64rm %192:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !212 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:175:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(2): Data Latency=1 Reg=%192
    SU(2): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%192
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %194:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !215 :: (dereferenceable load 4 from %ir.j); fft3d.c:175:26
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(13): Data Latency=4 Reg=%194
    SU(5): Data Latency=4 Reg=%194
    SU(13): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %197:gr64_nosp = COPY %194:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(4): Data Latency=4 Reg=%194
  Successors:
    SU(6): Data Latency=0 Reg=%197
    SU(6): Out  Latency=0
    SU(13): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(5): Data Latency=0 Reg=%197
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%197
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %197:gr64_nosp = SHL64ri %197:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(6): Data Latency=1 Reg=%197
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%197
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%192
    SU(7): Out  Latency=0
    SU(7): Data Latency=1 Reg=%197
  Successors:
    SU(22): Data Latency=1 Reg=%197
    SU(20): Data Latency=1 Reg=%197
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %199:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !216 :: (dereferenceable load 4 from %ir.i); fft3d.c:175:29
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(15): Data Latency=4 Reg=%199
    SU(10): Data Latency=4 Reg=%199
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %201:gr64 = COPY %199:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(9): Data Latency=4 Reg=%199
    SU(15): Ord  Latency=0 Weak
  Successors:
    SU(11): Data Latency=0 Reg=%201
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %201:gr64 = SHL64ri %201:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(10): Data Latency=0 Reg=%201
    SU(10): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%201
    SU(20): Data Latency=1 Reg=%201
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %235:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(13): Data Latency=4 Reg=%235
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(12): Data Latency=4 Reg=%235
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%194
    SU(4): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%194
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %204:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(15): Data Latency=4 Reg=%204
    SU(15): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
  # preds left       : 3
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(14): Data Latency=4 Reg=%204
    SU(14): Out  Latency=0
    SU(9): Data Latency=4 Reg=%199
  Successors:
    SU(16): Data Latency=1 Reg=%204
    SU(16): Out  Latency=0
    SU(10): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(15): Data Latency=1 Reg=%204
    SU(15): Out  Latency=0
    SU(13): Data Latency=1 Reg=%194
  Successors:
    SU(17): Data Latency=1 Reg=%204
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %206:gr64 = MOVSX64rr32 %204:gr32, debug-location !224; fft3d.c:175:34
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(16): Data Latency=1 Reg=%204
  Successors:
    SU(18): Data Latency=1 Reg=%206
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %206:gr64 = SHL64ri %206:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !224; fft3d.c:175:34
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(17): Data Latency=1 Reg=%206
    SU(17): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%206
    SU(19): Data Latency=1 Reg=%206
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %207:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane, $noreg, debug-location !224 :: (load 8 from %ir.76); fft3d.c:175:34
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(18): Data Latency=1 Reg=%206
  Successors:
    SU(20): Data Latency=4 Reg=%207
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(8): Data Latency=1 Reg=%197
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%201
    SU(9): Ord  Latency=0 Memory
    SU(19): Data Latency=4 Reg=%207
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(21):   %208:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !224 :: (load 8 from %ir.76 + 8); fft3d.c:175:34
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(20): Ord  Latency=1 Memory
    SU(18): Data Latency=1 Reg=%206
  Successors:
    SU(22): Data Latency=4 Reg=%208
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
  # preds left       : 11
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(21): Data Latency=4 Reg=%208
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%201
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%197
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(23):   INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !225 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:174:38
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !226; fft3d.c:174:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(23): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !225 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:174:38
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(23) 17c
  BotQ.A BotLatency SU(23) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Scheduling SU(22) MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
Bottom Pressure:
GR16=10
  LiveReg: %201
  UpdateRegP: SU(20) MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
              to GR16 4
  UpdateRegP: SU(22) MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
              to GR16 4
  LiveReg: %197
  UpdateRegP: SU(20) MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
              to GR16 2
  UpdateRegP: SU(22) MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
              to GR16 2
  LiveReg: %208
  UpdateRegP: SU(22) MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) %208:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !224 :: (load 8 from %ir.76 + 8); fft3d.c:175:34
Bottom Pressure:
GR16=10
  LiveReg: %206
  UpdateRegP: SU(19) %207:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane, $noreg, debug-location !224 :: (load 8 from %ir.76); fft3d.c:175:34
              to GR16 -2
  UpdateRegP: SU(21) %208:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !224 :: (load 8 from %ir.76 + 8); fft3d.c:175:34
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(21) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
Bottom Pressure:
GR16=12
  LiveReg: %207
  UpdateRegP: SU(20) MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
              to 
  Ready @8c
  BotQ.A BotLatency SU(20) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 19 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %207:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane, $noreg, debug-location !224 :: (load 8 from %ir.76); fft3d.c:175:34
Bottom Pressure:
GR16=10
  Ready @12c
  BotQ.A BotLatency SU(19) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 18 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %206:gr64 = SHL64ri %206:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !224; fft3d.c:175:34
Bottom Pressure:
GR16=10
  LiveReg: %206
  UpdateRegP: SU(18) %206:gr64 = SHL64ri %206:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !224; fft3d.c:175:34
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(18) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 17 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %206:gr64 = MOVSX64rr32 %204:gr32, debug-location !224; fft3d.c:175:34
Bottom Pressure:
GR16=10
  LiveReg: %204
  UpdateRegP: SU(17) %206:gr64 = MOVSX64rr32 %204:gr32, debug-location !224; fft3d.c:175:34
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(17) 14c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 16 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
Bottom Pressure:
GR16=12
  LiveReg: %204
  UpdateRegP: SU(16) %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
              to 
  LiveReg: %194
  UpdateRegP: SU(16) %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(16) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 15 13 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
Bottom Pressure:
GR16=14
  LiveReg: %194
  UpdateRegP: SU(5) %197:gr64_nosp = COPY %194:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
              to GR16 -2
  UpdateRegP: SU(13) %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
              to 
  LiveReg: %235
  UpdateRegP: SU(13) %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(13) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 15 12 
  Cand SU(8) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %235:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
Bottom Pressure:
GR16=12
  Ready @20c
  BotQ.A BotLatency SU(12) 20c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 15 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot WEAK      
Scheduling SU(11) %201:gr64 = SHL64ri %201:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=12
  LiveReg: %201
  UpdateRegP: SU(11) %201:gr64 = SHL64ri %201:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 15 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %201:gr64 = COPY %199:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=12
  LiveReg: %199
  UpdateRegP: SU(10) %201:gr64 = COPY %199:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
              to GR16 -2
  UpdateRegP: SU(15) %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
              to 
  Ready @9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 15 
  Cand SU(8) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
Bottom Pressure:
GR16=12
  LiveReg: %204
  UpdateRegP: SU(15) %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
              to GR16 -2
  Ready @16c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 14 9 
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %204:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
Bottom Pressure:
GR16=10
  Ready @20c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %199:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !216 :: (dereferenceable load 4 from %ir.i); fft3d.c:175:29
Bottom Pressure:
GR16=8
  Ready @20c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=10
  LiveReg: %197
  UpdateRegP: SU(8) %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to 
  LiveReg: %192
  UpdateRegP: SU(8) %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to GR16 -2
  Ready @9c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %197:gr64_nosp = SHL64ri %197:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=10
  LiveReg: %197
  UpdateRegP: SU(7) %197:gr64_nosp = SHL64ri %197:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to GR16 -2
  Ready @10c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=10
  LiveReg: %197
  UpdateRegP: SU(6) %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to GR16 -2
  Ready @11c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %197:gr64_nosp = COPY %194:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=8
  Ready @16c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %194:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !215 :: (dereferenceable load 4 from %ir.j); fft3d.c:175:26
Bottom Pressure:
GR16=6
  Ready @20c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %192:gr64 = ADD64rm %192:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !212 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:175:21
Bottom Pressure:
GR16=6
  LiveReg: %192
  UpdateRegP: SU(3) %192:gr64 = ADD64rm %192:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !212 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:175:21
              to GR16 -2
  Ready @13c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %192:gr64 = SHL64ri %192:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=6
  LiveReg: %192
  UpdateRegP: SU(2) %192:gr64 = SHL64ri %192:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to GR16 -2
  Ready @14c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
Bottom Pressure:
GR16=6
  LiveReg: %192
  UpdateRegP: SU(1) %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
              to GR16 -2
  Ready @15c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %192:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); fft3d.c:175:23
Bottom Pressure:
GR16=4
  Ready @19c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %192:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); fft3d.c:175:23
SU(1):   %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
SU(2):   %192:gr64 = SHL64ri %192:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
SU(3):   %192:gr64 = ADD64rm %192:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !212 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:175:21
SU(4):   %194:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !215 :: (dereferenceable load 4 from %ir.j); fft3d.c:175:26
SU(5):   %197:gr64_nosp = COPY %194:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
SU(6):   %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
SU(7):   %197:gr64_nosp = SHL64ri %197:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
SU(8):   %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
SU(9):   %199:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !216 :: (dereferenceable load 4 from %ir.i); fft3d.c:175:29
SU(14):   %204:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
SU(15):   %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
SU(10):   %201:gr64 = COPY %199:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
SU(11):   %201:gr64 = SHL64ri %201:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
SU(12):   %235:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
SU(13):   %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
SU(16):   %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
SU(17):   %206:gr64 = MOVSX64rr32 %204:gr32, debug-location !224; fft3d.c:175:34
SU(18):   %206:gr64 = SHL64ri %206:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !224; fft3d.c:175:34
SU(19):   %207:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane, $noreg, debug-location !224 :: (load 8 from %ir.76); fft3d.c:175:34
SU(20):   MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
SU(21):   %208:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !224 :: (load 8 from %ir.76 + 8); fft3d.c:175:34
SU(22):   MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
SU(23):   INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !225 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:174:38

********** MI Scheduling **********
fftXYZ:%bb.24 for.end60
  From: %186:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !233 :: (dereferenceable load 4 from @fftblock); fft3d.c:162:40
    To: JMP_1 %bb.9, debug-location !235; fft3d.c:162:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %186:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !233 :: (dereferenceable load 4 from @fftblock); fft3d.c:162:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(1):   ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %186:gr32, implicit-def dead $eflags, debug-location !234 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:162:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%186
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.9, debug-location !235; fft3d.c:162:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %186:gr32, implicit-def dead $eflags, debug-location !234 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:162:37
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %186:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !233 :: (dereferenceable load 4 from @fftblock); fft3d.c:162:40
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %186:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !233 :: (dereferenceable load 4 from @fftblock); fft3d.c:162:40
SU(1):   ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %186:gr32, implicit-def dead $eflags, debug-location !234 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:162:37

********** MI Scheduling **********
fftXYZ:%bb.28 if.end69
  From: $eax = MOV32ri 8192, debug-location !247; fft3d.c:183:26
    To: JCC_1 %bb.30, 12, implicit $eflags, debug-location !252; fft3d.c:184:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(2).
SU(0):   $eax = MOV32ri 8192, debug-location !247; fft3d.c:183:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$eax
  Single Issue       : false;
SU(1):   $edx = MOV32r0 implicit-def dead $eflags, debug-location !247; fft3d.c:183:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$edx
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(2):   IDIV32m %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !247 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:183:26
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=0
    SU(1): Data Latency=1 Reg=$edx
    SU(0): Out  Latency=0
    SU(0): Data Latency=1 Reg=$eax
  Successors:
    SU(3): Data Latency=4 Reg=$eax
    SU(5): Out  Latency=0
    SU(4): Ord  Latency=0 Barrier
  Single Issue       : false;
SU(3):   %25:gr32 = COPY $eax, debug-location !247; fft3d.c:183:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$eax
  Successors:
    SU(5): Data Latency=0 Reg=%25
    SU(4): Data Latency=0 Reg=%25
  Single Issue       : false;
SU(4):   MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %25:gr32, debug-location !248 :: (store 4 into @fftblock); fft3d.c:183:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%25
    SU(2): Ord  Latency=0 Barrier
  Single Issue       : false;
SU(5):   CMP32ri8 %25:gr32, 32, implicit-def $eflags, debug-location !251; fft3d.c:184:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=0 Reg=%25
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.30, 12, implicit $eflags, debug-location !252; fft3d.c:184:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) CMP32ri8 %25:gr32, 32, implicit-def $eflags, debug-location !251; fft3d.c:184:18
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %25:gr32, debug-location !248 :: (store 4 into @fftblock); fft3d.c:183:14
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %25:gr32 = COPY $eax, debug-location !247; fft3d.c:183:26
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) IDIV32m %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !247 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:183:26
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
  Rescheduling physreg copy SU(3):   %25:gr32 = COPY $eax, debug-location !247; fft3d.c:183:26
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edx = MOV32r0 implicit-def dead $eflags, debug-location !247; fft3d.c:183:26
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $eax = MOV32ri 8192, debug-location !247; fft3d.c:183:26
  Ready @6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   $eax = MOV32ri 8192, debug-location !247; fft3d.c:183:26
SU(1):   $edx = MOV32r0 implicit-def dead $eflags, debug-location !247; fft3d.c:183:26
SU(2):   IDIV32m %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !247 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:183:26
SU(3):   %25:gr32 = COPY $eax, debug-location !247; fft3d.c:183:26
SU(4):   MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %25:gr32, debug-location !248 :: (store 4 into @fftblock); fft3d.c:183:14
SU(5):   CMP32ri8 %25:gr32, 32, implicit-def $eflags, debug-location !251; fft3d.c:184:18

********** MI Scheduling **********
fftXYZ:%bb.30 if.end73
  From: %30:gr32 = COPY $eax, debug-location !259; fft3d.c:187:11
    To: JCC_1 %bb.32, 4, implicit $eflags, debug-location !263; fft3d.c:188:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %30:gr32 = COPY $eax, debug-location !259; fft3d.c:187:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%30
  Single Issue       : false;
SU(1):   MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %30:gr32, debug-location !260 :: (store 4 into %ir.log); fft3d.c:187:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%30
  Single Issue       : false;
SU(2):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:188:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.32, 4, implicit $eflags, debug-location !263; fft3d.c:188:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:188:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %30:gr32, debug-location !260 :: (store 4 into %ir.log); fft3d.c:187:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %30:gr32 = COPY $eax, debug-location !259; fft3d.c:187:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %30:gr32 = COPY $eax, debug-location !259; fft3d.c:187:11
SU(1):   MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %30:gr32, debug-location !260 :: (store 4 into %ir.log); fft3d.c:187:9
SU(2):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:188:9

********** MI Scheduling **********
fftXYZ:%bb.30 if.end73
  From: %28:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !255 :: (dereferenceable load 4 from @fftblock); fft3d.c:186:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; fft3d.c:187:11
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %28:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !255 :: (dereferenceable load 4 from @fftblock); fft3d.c:186:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%28
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %28:gr32 = nsw INC32r %28:gr32(tied-def 0), implicit-def dead $eflags, debug-location !256; fft3d.c:186:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%28
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(2):   MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %28:gr32, debug-location !257 :: (store 4 into %ir.blkp); fft3d.c:186:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(3):   %29:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !258 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:187:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; fft3d.c:187:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %29:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !258 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:187:17
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %28:gr32, debug-location !257 :: (store 4 into %ir.blkp); fft3d.c:186:10
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %28:gr32 = nsw INC32r %28:gr32(tied-def 0), implicit-def dead $eflags, debug-location !256; fft3d.c:186:21
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %28:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !255 :: (dereferenceable load 4 from @fftblock); fft3d.c:186:12
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %28:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !255 :: (dereferenceable load 4 from @fftblock); fft3d.c:186:12
SU(1):   %28:gr32 = nsw INC32r %28:gr32(tied-def 0), implicit-def dead $eflags, debug-location !256; fft3d.c:186:21
SU(2):   MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %28:gr32, debug-location !257 :: (store 4 into %ir.blkp); fft3d.c:186:10
SU(3):   %29:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !258 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:187:17

********** MI Scheduling **********
fftXYZ:%bb.33 for.cond79
  From: %32:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); fft3d.c:190:17
    To: JCC_1 %bb.40, 13, implicit $eflags, debug-location !272; fft3d.c:190:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %32:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); fft3d.c:190:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%32
  Single Issue       : false;
SU(1):   CMP32rm %32:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !271 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:190:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.40, 13, implicit $eflags, debug-location !272; fft3d.c:190:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %32:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !271 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:190:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); fft3d.c:190:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %32:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); fft3d.c:190:17
SU(1):   CMP32rm %32:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !271 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:190:19

********** MI Scheduling **********
fftXYZ:%bb.35 for.cond82
  From: %126:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !277 :: (dereferenceable load 4 from %ir.bls); fft3d.c:191:23
    To: JCC_1 %bb.39, 13, implicit $eflags, debug-location !281; fft3d.c:191:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %126:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !277 :: (dereferenceable load 4 from %ir.bls); fft3d.c:191:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(1):   CMP32rm %126:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !280 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:191:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 13, implicit $eflags, debug-location !281; fft3d.c:191:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %126:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !280 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:191:27
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %126:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !277 :: (dereferenceable load 4 from %ir.bls); fft3d.c:191:23
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %126:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !277 :: (dereferenceable load 4 from %ir.bls); fft3d.c:191:23
SU(1):   CMP32rm %126:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !280 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:191:27

********** MI Scheduling **********
fftXYZ:%bb.36 for.body84
  From: undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 4 from %ir.bls); fft3d.c:192:19
    To: JCC_1 %bb.38, 14, implicit $eflags, debug-location !292; fft3d.c:193:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 4 from %ir.bls); fft3d.c:192:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(1):   undef %130.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !284 :: (dereferenceable load 4 from @fftblock); fft3d.c:192:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%130
  Single Issue       : false;
SU(2):   %134:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %130:gr64_nosp, -1, $noreg, debug-location !286; fft3d.c:192:34
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%130
    SU(0): Data Latency=4 Reg=%132
  Successors:
    SU(4): Data Latency=1 Reg=%134
    SU(3): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(3):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %134:gr32, debug-location !287 :: (store 4 into %ir.ble); fft3d.c:192:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(4):   CMP32rm %134:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:193:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%134
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 14, implicit $eflags, debug-location !292; fft3d.c:193:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) CMP32rm %134:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:193:21
  Ready @4c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %134:gr32, debug-location !287 :: (store 4 into %ir.ble); fft3d.c:192:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %134:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %130:gr64_nosp, -1, $noreg, debug-location !286; fft3d.c:192:34
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %130.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !284 :: (dereferenceable load 4 from @fftblock); fft3d.c:192:25
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 4 from %ir.bls); fft3d.c:192:19
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 4 from %ir.bls); fft3d.c:192:19
SU(1):   undef %130.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !284 :: (dereferenceable load 4 from @fftblock); fft3d.c:192:25
SU(2):   %134:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %130:gr64_nosp, -1, $noreg, debug-location !286; fft3d.c:192:34
SU(3):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %134:gr32, debug-location !287 :: (store 4 into %ir.ble); fft3d.c:192:17
SU(4):   CMP32rm %134:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:193:21

********** MI Scheduling **********
fftXYZ:%bb.37 if.then88
  From: %137:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !293 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:194:23
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %137:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !293 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:194:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%137
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags, debug-location !294; fft3d.c:194:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%137
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%137
  Single Issue       : false;
SU(2):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %137:gr32, debug-location !295 :: (store 4 into %ir.ble); fft3d.c:194:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%137
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %137:gr32, debug-location !295 :: (store 4 into %ir.ble); fft3d.c:194:21
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags, debug-location !294; fft3d.c:194:26
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %137:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !293 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:194:23
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %137:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !293 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:194:23
SU(1):   %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags, debug-location !294; fft3d.c:194:26
SU(2):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %137:gr32, debug-location !295 :: (store 4 into %ir.ble); fft3d.c:194:21

********** MI Scheduling **********
fftXYZ:%bb.38 if.end90
  From: %156:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !314 :: (dereferenceable load 4 from @fftblock); fft3d.c:191:40
    To: JMP_1 %bb.35, debug-location !316; fft3d.c:191:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %156:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !314 :: (dereferenceable load 4 from @fftblock); fft3d.c:191:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%156
  Single Issue       : false;
SU(1):   ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %156:gr32, implicit-def dead $eflags, debug-location !315 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:191:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%156
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.35, debug-location !316; fft3d.c:191:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %156:gr32, implicit-def dead $eflags, debug-location !315 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:191:37
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %156:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !314 :: (dereferenceable load 4 from @fftblock); fft3d.c:191:40
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %156:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !314 :: (dereferenceable load 4 from @fftblock); fft3d.c:191:40
SU(1):   ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %156:gr32, implicit-def dead $eflags, debug-location !315 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:191:37

********** MI Scheduling **********
fftXYZ:%bb.38 if.end90
  From: MOV64mr $rsp, 1, $noreg, 0, $noreg, %154:gr64, debug-location !313 :: (store 8 into stack); fft3d.c:196:13
    To: CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !313; fft3d.c:196:13
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %154:gr64, debug-location !313 :: (store 8 into stack); fft3d.c:196:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = COPY %141:gr32, debug-location !313; fft3d.c:196:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $esi = COPY %142:gr32, debug-location !313; fft3d.c:196:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $edx = COPY %140:gr32, debug-location !313; fft3d.c:196:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $ecx = COPY %143:gr32, debug-location !313; fft3d.c:196:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $r8d = COPY %145:gr32, debug-location !313; fft3d.c:196:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $r9 = COPY %153:gr64, debug-location !313; fft3d.c:196:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !313; fft3d.c:196:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $r9 = COPY %153:gr64, debug-location !313; fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r8d = COPY %145:gr32, debug-location !313; fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $ecx = COPY %143:gr32, debug-location !313; fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $edx = COPY %140:gr32, debug-location !313; fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $esi = COPY %142:gr32, debug-location !313; fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = COPY %141:gr32, debug-location !313; fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr $rsp, 1, $noreg, 0, $noreg, %154:gr64, debug-location !313 :: (store 8 into stack); fft3d.c:196:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %154:gr64, debug-location !313 :: (store 8 into stack); fft3d.c:196:13
SU(1):   $edi = COPY %141:gr32, debug-location !313; fft3d.c:196:13
SU(2):   $esi = COPY %142:gr32, debug-location !313; fft3d.c:196:13
SU(3):   $edx = COPY %140:gr32, debug-location !313; fft3d.c:196:13
SU(4):   $ecx = COPY %143:gr32, debug-location !313; fft3d.c:196:13
SU(5):   $r8d = COPY %145:gr32, debug-location !313; fft3d.c:196:13
SU(6):   $r9 = COPY %153:gr64, debug-location !313; fft3d.c:196:13

********** MI Scheduling **********
fftXYZ:%bb.38 if.end90
  From: %140:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !297 :: (dereferenceable load 4 from %ir.ble); fft3d.c:195:19
    To: ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; fft3d.c:196:13
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=16
Live In: %221 
Live Out: %154 %153 %221 %145 %143 %142 %141 %140 
Live Thru: GR16=2
  LiveReg: %154
  LiveReg: %153
  LiveReg: %221
  UpdateRegP: SU(10) %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
              to 
  LiveReg: %145
  LiveReg: %143
  LiveReg: %142
  LiveReg: %141
  LiveReg: %140
  UpdateRegP: SU(3) MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %140:gr32, debug-location !301 :: (store 4 into %ir.len); fft3d.c:195:17
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=16
Excess PSets: 
SU(0):   %140:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !297 :: (dereferenceable load 4 from %ir.ble); fft3d.c:195:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%140
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %140:gr32 = nsw SUB32rm %140:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !299 :: (dereferenceable load 4 from %ir.bls); fft3d.c:195:23
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%140
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%140
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %140:gr32 = nsw INC32r %140:gr32(tied-def 0), implicit-def dead $eflags, debug-location !300; fft3d.c:195:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%140
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%140
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %140:gr32, debug-location !301 :: (store 4 into %ir.len); fft3d.c:195:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%140
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %141:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !302 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:196:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %142:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !303 :: (dereferenceable load 4 from %ir.log); fft3d.c:196:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %143:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !305 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:196:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %145:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:196:46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%145
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %145:gr32 = nsw INC32r %145:gr32(tied-def 0), implicit-def dead $eflags, debug-location !307; fft3d.c:196:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%145
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %149:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !309 :: (dereferenceable load 4 from %ir.k); fft3d.c:196:57
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(10): Data Latency=4 Reg=%149
    SU(10): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(9): Data Latency=4 Reg=%149
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%149
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %149:gr64 = SHL64ri %149:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(10): Data Latency=1 Reg=%149
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%149
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !308 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:196:55
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(11): Data Latency=1 Reg=%149
    SU(11): Out  Latency=0
  Successors:
    SU(15): Data Latency=4 Reg=%149
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %153:gr64 = MOVSX64rm32 %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.bls); fft3d.c:196:63
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(14): Data Latency=4 Reg=%153
    SU(14): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %153:gr64 = SHL64ri %153:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(13): Data Latency=4 Reg=%153
    SU(13): Out  Latency=0
  Successors:
    SU(15): Data Latency=1 Reg=%153
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=%149
    SU(14): Out  Latency=0
    SU(14): Data Latency=1 Reg=%153
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %154:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.exp2.addr); fft3d.c:196:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; fft3d.c:196:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(16): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 8 3 16 6 5 4 
  Cand SU(15) ORDER                              
  Cand SU(8) REG-MAX                            
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %154:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.exp2.addr); fft3d.c:196:69
Bottom Pressure:
GR16=14
  Ready @3c
  BotQ.A BotLatency SU(16) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 8 3 4 6 5 
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
Bottom Pressure:
GR16=16
  LiveReg: %153
  UpdateRegP: SU(15) %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
              to 
  LiveReg: %149
  UpdateRegP: SU(15) %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
              to GR16 -2
  Ready @0c
  BotQ.A TopLatency SU(15) 10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 12 14 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %153:gr64 = SHL64ri %153:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
Bottom Pressure:
GR16=16
  LiveReg: %153
  UpdateRegP: SU(14) %153:gr64 = SHL64ri %153:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
              to GR16 -2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 12 13 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %153:gr64 = MOVSX64rm32 %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.bls); fft3d.c:196:63
Bottom Pressure:
GR16=14
  Ready @5c
  BotQ.A BotLatency SU(13) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 12 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !308 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:196:55
Bottom Pressure:
GR16=14
  LiveReg: %149
  UpdateRegP: SU(12) %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !308 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:196:55
              to GR16 -2
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 11 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %149:gr64 = SHL64ri %149:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
Bottom Pressure:
GR16=14
  LiveReg: %149
  UpdateRegP: SU(11) %149:gr64 = SHL64ri %149:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 10 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
Bottom Pressure:
GR16=14
  LiveReg: %149
  UpdateRegP: SU(10) %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(10) 6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 9 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %149:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !309 :: (dereferenceable load 4 from %ir.k); fft3d.c:196:57
Bottom Pressure:
GR16=12
  Ready @10c
  BotQ.A BotLatency SU(9) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 3 4 6 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %145:gr32 = nsw INC32r %145:gr32(tied-def 0), implicit-def dead $eflags, debug-location !307; fft3d.c:196:49
Bottom Pressure:
GR16=12
  LiveReg: %145
  UpdateRegP: SU(8) %145:gr32 = nsw INC32r %145:gr32(tied-def 0), implicit-def dead $eflags, debug-location !307; fft3d.c:196:49
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 3 4 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %145:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:196:46
Bottom Pressure:
GR16=10
  Ready @6c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 3 4 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %143:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !305 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:196:42
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %142:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !303 :: (dereferenceable load 4 from %ir.log); fft3d.c:196:32
Bottom Pressure:
GR16=6
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %141:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !302 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:196:26
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %140:gr32, debug-location !301 :: (store 4 into %ir.len); fft3d.c:195:17
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(3) 9c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %140:gr32 = nsw INC32r %140:gr32(tied-def 0), implicit-def dead $eflags, debug-location !300; fft3d.c:195:29
Bottom Pressure:
GR16=4
  LiveReg: %140
  UpdateRegP: SU(2) %140:gr32 = nsw INC32r %140:gr32(tied-def 0), implicit-def dead $eflags, debug-location !300; fft3d.c:195:29
              to GR16 -2
  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %140:gr32 = nsw SUB32rm %140:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !299 :: (dereferenceable load 4 from %ir.bls); fft3d.c:195:23
Bottom Pressure:
GR16=4
  LiveReg: %140
  UpdateRegP: SU(1) %140:gr32 = nsw SUB32rm %140:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !299 :: (dereferenceable load 4 from %ir.bls); fft3d.c:195:23
              to GR16 -2
  Ready @8c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %140:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !297 :: (dereferenceable load 4 from %ir.ble); fft3d.c:195:19
Bottom Pressure:
GR16=2
  Ready @12c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %140:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !297 :: (dereferenceable load 4 from %ir.ble); fft3d.c:195:19
SU(1):   %140:gr32 = nsw SUB32rm %140:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !299 :: (dereferenceable load 4 from %ir.bls); fft3d.c:195:23
SU(2):   %140:gr32 = nsw INC32r %140:gr32(tied-def 0), implicit-def dead $eflags, debug-location !300; fft3d.c:195:29
SU(3):   MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %140:gr32, debug-location !301 :: (store 4 into %ir.len); fft3d.c:195:17
SU(4):   %141:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !302 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:196:26
SU(5):   %142:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !303 :: (dereferenceable load 4 from %ir.log); fft3d.c:196:32
SU(6):   %143:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !305 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:196:42
SU(7):   %145:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:196:46
SU(8):   %145:gr32 = nsw INC32r %145:gr32(tied-def 0), implicit-def dead $eflags, debug-location !307; fft3d.c:196:49
SU(9):   %149:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !309 :: (dereferenceable load 4 from %ir.k); fft3d.c:196:57
SU(10):   %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
SU(11):   %149:gr64 = SHL64ri %149:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
SU(12):   %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !308 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:196:55
SU(13):   %153:gr64 = MOVSX64rm32 %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.bls); fft3d.c:196:63
SU(14):   %153:gr64 = SHL64ri %153:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
SU(15):   %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
SU(16):   %154:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.exp2.addr); fft3d.c:196:69

********** MI Scheduling **********
fftXYZ:%bb.42 if.end107
  From: $eax = MOV32ri 8192, debug-location !328; fft3d.c:202:26
    To: JCC_1 %bb.44, 12, implicit $eflags, debug-location !333; fft3d.c:203:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(2).
SU(0):   $eax = MOV32ri 8192, debug-location !328; fft3d.c:202:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$eax
  Single Issue       : false;
SU(1):   $edx = MOV32r0 implicit-def dead $eflags, debug-location !328; fft3d.c:202:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=0
    SU(2): Data Latency=1 Reg=$edx
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(2):   IDIV32m %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !328 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:202:26
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=0
    SU(1): Data Latency=1 Reg=$edx
    SU(0): Out  Latency=0
    SU(0): Data Latency=1 Reg=$eax
  Successors:
    SU(3): Data Latency=4 Reg=$eax
    SU(5): Out  Latency=0
    SU(4): Ord  Latency=0 Barrier
  Single Issue       : false;
SU(3):   %37:gr32 = COPY $eax, debug-location !328; fft3d.c:202:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$eax
  Successors:
    SU(5): Data Latency=0 Reg=%37
    SU(4): Data Latency=0 Reg=%37
  Single Issue       : false;
SU(4):   MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %37:gr32, debug-location !329 :: (store 4 into @fftblock); fft3d.c:202:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%37
    SU(2): Ord  Latency=0 Barrier
  Single Issue       : false;
SU(5):   CMP32ri8 %37:gr32, 32, implicit-def $eflags, debug-location !332; fft3d.c:203:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=0 Reg=%37
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.44, 12, implicit $eflags, debug-location !333; fft3d.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) CMP32ri8 %37:gr32, 32, implicit-def $eflags, debug-location !332; fft3d.c:203:18
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %37:gr32, debug-location !329 :: (store 4 into @fftblock); fft3d.c:202:14
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %37:gr32 = COPY $eax, debug-location !328; fft3d.c:202:26
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) IDIV32m %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !328 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:202:26
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
  Rescheduling physreg copy SU(3):   %37:gr32 = COPY $eax, debug-location !328; fft3d.c:202:26
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edx = MOV32r0 implicit-def dead $eflags, debug-location !328; fft3d.c:202:26
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $eax = MOV32ri 8192, debug-location !328; fft3d.c:202:26
  Ready @6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $eax = MOV32ri 8192, debug-location !328; fft3d.c:202:26
SU(1):   $edx = MOV32r0 implicit-def dead $eflags, debug-location !328; fft3d.c:202:26
SU(2):   IDIV32m %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !328 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:202:26
SU(3):   %37:gr32 = COPY $eax, debug-location !328; fft3d.c:202:26
SU(4):   MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %37:gr32, debug-location !329 :: (store 4 into @fftblock); fft3d.c:202:14
SU(5):   CMP32ri8 %37:gr32, 32, implicit-def $eflags, debug-location !332; fft3d.c:203:18

********** MI Scheduling **********
fftXYZ:%bb.44 if.end111
  From: %42:gr32 = COPY $eax, debug-location !340; fft3d.c:206:11
    To: JCC_1 %bb.46, 4, implicit $eflags, debug-location !344; fft3d.c:207:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %42:gr32 = COPY $eax, debug-location !340; fft3d.c:206:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(1):   MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %42:gr32, debug-location !341 :: (store 4 into %ir.log); fft3d.c:206:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(2):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:207:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.46, 4, implicit $eflags, debug-location !344; fft3d.c:207:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:207:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %42:gr32, debug-location !341 :: (store 4 into %ir.log); fft3d.c:206:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %42:gr32 = COPY $eax, debug-location !340; fft3d.c:206:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %42:gr32 = COPY $eax, debug-location !340; fft3d.c:206:11
SU(1):   MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %42:gr32, debug-location !341 :: (store 4 into %ir.log); fft3d.c:206:9
SU(2):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:207:9

********** MI Scheduling **********
fftXYZ:%bb.44 if.end111
  From: %40:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !336 :: (dereferenceable load 4 from @fftblock); fft3d.c:205:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !340; fft3d.c:206:11
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %40:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !336 :: (dereferenceable load 4 from @fftblock); fft3d.c:205:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%40
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %40:gr32 = nsw INC32r %40:gr32(tied-def 0), implicit-def dead $eflags, debug-location !337; fft3d.c:205:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%40
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(2):   MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %40:gr32, debug-location !338 :: (store 4 into %ir.blkp); fft3d.c:205:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(3):   %41:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !339 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:206:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !340; fft3d.c:206:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %41:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !339 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:206:17
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %40:gr32, debug-location !338 :: (store 4 into %ir.blkp); fft3d.c:205:10
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %40:gr32 = nsw INC32r %40:gr32(tied-def 0), implicit-def dead $eflags, debug-location !337; fft3d.c:205:21
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %40:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !336 :: (dereferenceable load 4 from @fftblock); fft3d.c:205:12
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %40:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !336 :: (dereferenceable load 4 from @fftblock); fft3d.c:205:12
SU(1):   %40:gr32 = nsw INC32r %40:gr32(tied-def 0), implicit-def dead $eflags, debug-location !337; fft3d.c:205:21
SU(2):   MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %40:gr32, debug-location !338 :: (store 4 into %ir.blkp); fft3d.c:205:10
SU(3):   %41:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !339 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:206:17

********** MI Scheduling **********
fftXYZ:%bb.47 for.cond117
  From: %44:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !349 :: (dereferenceable load 4 from %ir.k); fft3d.c:209:17
    To: JCC_1 %bb.66, 13, implicit $eflags, debug-location !353; fft3d.c:209:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %44:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !349 :: (dereferenceable load 4 from %ir.k); fft3d.c:209:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(1):   CMP32rm %44:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !352 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:209:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%44
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.66, 13, implicit $eflags, debug-location !353; fft3d.c:209:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %44:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !352 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:209:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %44:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !349 :: (dereferenceable load 4 from %ir.k); fft3d.c:209:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %44:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !349 :: (dereferenceable load 4 from %ir.k); fft3d.c:209:17
SU(1):   CMP32rm %44:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !352 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:209:19

********** MI Scheduling **********
fftXYZ:%bb.49 for.cond120
  From: %48:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 4 from %ir.bls); fft3d.c:210:23
    To: JCC_1 %bb.65, 13, implicit $eflags, debug-location !362; fft3d.c:210:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %48:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 4 from %ir.bls); fft3d.c:210:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(1):   CMP32rm %48:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !361 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:210:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%48
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.65, 13, implicit $eflags, debug-location !362; fft3d.c:210:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %48:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !361 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:210:27
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %48:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 4 from %ir.bls); fft3d.c:210:23
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %48:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 4 from %ir.bls); fft3d.c:210:23
SU(1):   CMP32rm %48:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !361 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:210:27

********** MI Scheduling **********
fftXYZ:%bb.50 for.body122
  From: undef %54.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !363 :: (dereferenceable load 4 from %ir.bls); fft3d.c:211:19
    To: JCC_1 %bb.52, 14, implicit $eflags, debug-location !373; fft3d.c:212:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %54.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !363 :: (dereferenceable load 4 from %ir.bls); fft3d.c:211:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(1):   undef %52.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !365 :: (dereferenceable load 4 from @fftblock); fft3d.c:211:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%52
  Single Issue       : false;
SU(2):   %56:gr32 = LEA64_32r %54:gr64_with_sub_8bit, 1, %52:gr64_nosp, -1, $noreg, debug-location !367; fft3d.c:211:34
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%52
    SU(0): Data Latency=4 Reg=%54
  Successors:
    SU(4): Data Latency=1 Reg=%56
    SU(3): Data Latency=1 Reg=%56
  Single Issue       : false;
SU(3):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %56:gr32, debug-location !368 :: (store 4 into %ir.ble); fft3d.c:211:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%56
  Single Issue       : false;
SU(4):   CMP32rm %56:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !372 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:212:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%56
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.52, 14, implicit $eflags, debug-location !373; fft3d.c:212:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) CMP32rm %56:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !372 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:212:21
  Ready @4c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %56:gr32, debug-location !368 :: (store 4 into %ir.ble); fft3d.c:211:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %56:gr32 = LEA64_32r %54:gr64_with_sub_8bit, 1, %52:gr64_nosp, -1, $noreg, debug-location !367; fft3d.c:211:34
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %52.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !365 :: (dereferenceable load 4 from @fftblock); fft3d.c:211:25
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %54.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !363 :: (dereferenceable load 4 from %ir.bls); fft3d.c:211:19
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   undef %54.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !363 :: (dereferenceable load 4 from %ir.bls); fft3d.c:211:19
SU(1):   undef %52.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !365 :: (dereferenceable load 4 from @fftblock); fft3d.c:211:25
SU(2):   %56:gr32 = LEA64_32r %54:gr64_with_sub_8bit, 1, %52:gr64_nosp, -1, $noreg, debug-location !367; fft3d.c:211:34
SU(3):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %56:gr32, debug-location !368 :: (store 4 into %ir.ble); fft3d.c:211:17
SU(4):   CMP32rm %56:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !372 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:212:21

********** MI Scheduling **********
fftXYZ:%bb.51 if.then126
  From: %59:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !374 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:213:23
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %59:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !374 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:213:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%59
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !375; fft3d.c:213:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%59
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%59
  Single Issue       : false;
SU(2):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %59:gr32, debug-location !376 :: (store 4 into %ir.ble); fft3d.c:213:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%59
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %59:gr32, debug-location !376 :: (store 4 into %ir.ble); fft3d.c:213:21
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !375; fft3d.c:213:26
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %59:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !374 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:213:23
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %59:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !374 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:213:23
SU(1):   %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !375; fft3d.c:213:26
SU(2):   MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %59:gr32, debug-location !376 :: (store 4 into %ir.ble); fft3d.c:213:21

********** MI Scheduling **********
fftXYZ:%bb.52 if.end128
  From: %62:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !378 :: (dereferenceable load 4 from %ir.ble); fft3d.c:214:19
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %62:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !378 :: (dereferenceable load 4 from %ir.ble); fft3d.c:214:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%62
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %62:gr32 = nsw SUB32rm %62:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !380 :: (dereferenceable load 4 from %ir.bls); fft3d.c:214:23
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%62
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%62
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %62:gr32 = nsw INC32r %62:gr32(tied-def 0), implicit-def dead $eflags, debug-location !381; fft3d.c:214:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%62
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%62
  Single Issue       : false;
SU(3):   MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %62:gr32, debug-location !382 :: (store 4 into %ir.len); fft3d.c:214:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%62
  Single Issue       : false;
SU(4):   MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); fft3d.c:215:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); fft3d.c:215:20
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %62:gr32, debug-location !382 :: (store 4 into %ir.len); fft3d.c:214:17
  Ready @0c
  BotQ.A TopLatency SU(3) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %62:gr32 = nsw INC32r %62:gr32(tied-def 0), implicit-def dead $eflags, debug-location !381; fft3d.c:214:29
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %62:gr32 = nsw SUB32rm %62:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !380 :: (dereferenceable load 4 from %ir.bls); fft3d.c:214:23
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %62:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !378 :: (dereferenceable load 4 from %ir.ble); fft3d.c:214:19
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %62:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !378 :: (dereferenceable load 4 from %ir.ble); fft3d.c:214:19
SU(1):   %62:gr32 = nsw SUB32rm %62:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !380 :: (dereferenceable load 4 from %ir.bls); fft3d.c:214:23
SU(2):   %62:gr32 = nsw INC32r %62:gr32(tied-def 0), implicit-def dead $eflags, debug-location !381; fft3d.c:214:29
SU(3):   MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %62:gr32, debug-location !382 :: (store 4 into %ir.len); fft3d.c:214:17
SU(4):   MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); fft3d.c:215:20

********** MI Scheduling **********
fftXYZ:%bb.53 for.cond131
  From: %63:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 4 from %ir.i); fft3d.c:215:25
    To: JCC_1 %bb.58, 13, implicit $eflags, debug-location !390; fft3d.c:215:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %63:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 4 from %ir.i); fft3d.c:215:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%63
  Single Issue       : false;
SU(1):   CMP32rm %63:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !389 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:215:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%63
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.58, 13, implicit $eflags, debug-location !390; fft3d.c:215:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %63:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !389 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:215:27
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %63:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 4 from %ir.i); fft3d.c:215:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %63:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 4 from %ir.i); fft3d.c:215:25
SU(1):   CMP32rm %63:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !389 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:215:27

********** MI Scheduling **********
fftXYZ:%bb.54 for.body133
  From: %102:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 4 from %ir.bls); fft3d.c:216:26
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %102:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 4 from %ir.bls); fft3d.c:216:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %102:gr32, debug-location !394 :: (store 4 into %ir.j); fft3d.c:216:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %102:gr32, debug-location !394 :: (store 4 into %ir.j); fft3d.c:216:24
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %102:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 4 from %ir.bls); fft3d.c:216:26
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %102:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 4 from %ir.bls); fft3d.c:216:26
SU(1):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %102:gr32, debug-location !394 :: (store 4 into %ir.j); fft3d.c:216:24

********** MI Scheduling **********
fftXYZ:%bb.55 for.cond134
  From: %103:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !396 :: (dereferenceable load 4 from %ir.j); fft3d.c:216:31
    To: JCC_1 %bb.57, 15, implicit $eflags, debug-location !400; fft3d.c:216:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %103:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !396 :: (dereferenceable load 4 from %ir.j); fft3d.c:216:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(1):   CMP32rm %103:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !399 :: (dereferenceable load 4 from %ir.ble); fft3d.c:216:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%103
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.57, 15, implicit $eflags, debug-location !400; fft3d.c:216:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %103:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !399 :: (dereferenceable load 4 from %ir.ble); fft3d.c:216:33
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %103:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !396 :: (dereferenceable load 4 from %ir.j); fft3d.c:216:31
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %103:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !396 :: (dereferenceable load 4 from %ir.j); fft3d.c:216:31
SU(1):   CMP32rm %103:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !399 :: (dereferenceable load 4 from %ir.ble); fft3d.c:216:33

********** MI Scheduling **********
fftXYZ:%bb.56 for.body136
  From: %239:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !401 :: (dereferenceable load 4 from %ir.j); fft3d.c:217:27
    To: JMP_1 %bb.55, debug-location !415; fft3d.c:216:17
 RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=14
Live In: %1 %221 
Live Out: %1 %221 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(13) %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to 
  LiveReg: %221
  UpdateRegP: SU(9) %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
Constraining copy SU(1)
  Local use SU(22) -> SU(1)
  Local use SU(16) -> SU(1)
SU(0):   %239:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !401 :: (dereferenceable load 4 from %ir.j); fft3d.c:217:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(22): Data Latency=4 Reg=%239
    SU(16): Data Latency=4 Reg=%239
    SU(1): Data Latency=4 Reg=%239
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %107:gr32 = COPY %239.sub_32bit:gr64_nosp, debug-location !404; fft3d.c:217:29
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%239
    SU(22): Ord  Latency=0 Weak
    SU(16): Ord  Latency=0 Weak
  Successors:
    SU(2): Data Latency=0 Reg=%107
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %107:gr32 = nsw SUB32rm %107:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from %ir.bls); fft3d.c:217:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=0 Reg=%107
    SU(1): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%107
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %116:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 4 from %ir.i); fft3d.c:217:44
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(9): Data Latency=4 Reg=%116
    SU(5): Data Latency=4 Reg=%116
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %111:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(5): Data Latency=4 Reg=%111
    SU(5): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(4): Data Latency=4 Reg=%111
    SU(4): Out  Latency=0
    SU(3): Data Latency=4 Reg=%116
  Successors:
    SU(6): Data Latency=1 Reg=%111
    SU(6): Out  Latency=0
    SU(9): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%111
    SU(5): Out  Latency=0
    SU(2): Data Latency=4 Reg=%107
  Successors:
    SU(7): Data Latency=1 Reg=%111
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %113:gr64 = MOVSX64rr32 %111:gr32, debug-location !409; fft3d.c:217:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%111
  Successors:
    SU(8): Data Latency=1 Reg=%113
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %113:gr64 = SHL64ri %113:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !409; fft3d.c:217:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%113
    SU(7): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%113
    SU(20): Data Latency=1 Reg=%113
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Data Latency=4 Reg=%116
    SU(3): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%116
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %116:gr64_with_sub_8bit = SHL64ri %116:gr64_with_sub_8bit(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=%116
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%116
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %116:gr64_with_sub_8bit = ADD64rm %116:gr64_with_sub_8bit(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !410 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:217:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%116
    SU(10): Out  Latency=0
  Successors:
    SU(15): Data Latency=4 Reg=%116
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %120:gr64_nosp = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 4 from %ir.k); fft3d.c:217:54
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(13): Data Latency=4 Reg=%120
    SU(13): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(12): Data Latency=4 Reg=%120
    SU(12): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%120
    SU(14): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %120:gr64_nosp = SHL64ri %120:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=%120
    SU(13): Out  Latency=0
  Successors:
    SU(15): Data Latency=1 Reg=%120
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(11): Data Latency=4 Reg=%116
    SU(14): Out  Latency=0
    SU(14): Data Latency=1 Reg=%120
  Successors:
    SU(19): Data Latency=1 Reg=%120
    SU(18): Data Latency=1 Reg=%120
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %122:gr64 = COPY %239:gr64_nosp, debug-location !410; fft3d.c:217:49
  # preds left       : 1
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%239
  Successors:
    SU(17): Data Latency=0 Reg=%122
    SU(17): Out  Latency=0
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %122:gr64 = SHL64ri %122:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(16): Data Latency=0 Reg=%122
    SU(16): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%122
    SU(18): Data Latency=1 Reg=%122
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(15): Data Latency=1 Reg=%120
    SU(17): Data Latency=1 Reg=%122
  Successors:
    SU(20): Data Latency=4 Reg=%123
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(15): Data Latency=1 Reg=%120
    SU(17): Data Latency=1 Reg=%122
  Successors:
    SU(21): Data Latency=4 Reg=%124
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(19): Ord  Latency=0 Memory
    SU(18): Data Latency=4 Reg=%123
    SU(18): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%113
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(21):   MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(19): Data Latency=4 Reg=%124
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%113
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(22):   %125:gr32 = LEA64_32r %239:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !414; fft3d.c:216:42
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%239
  Successors:
    SU(23): Data Latency=1 Reg=%125
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !414 :: (store 4 into %ir.j); fft3d.c:216:42
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=%125
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.55, debug-location !415; fft3d.c:216:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 21 20 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !414 :: (store 4 into %ir.j); fft3d.c:216:42
Bottom Pressure:
GR16=6
  LiveReg: %125
  UpdateRegP: SU(23) MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !414 :: (store 4 into %ir.j); fft3d.c:216:42
              to 
  Ready @0c
  BotQ.A TopLatency SU(23) 11c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 21 22 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot WEAK      
Scheduling SU(21) MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
Bottom Pressure:
GR16=10
  LiveReg: %113
  UpdateRegP: SU(20) MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
              to GR16 2
  UpdateRegP: SU(21) MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
              to GR16 2
  LiveReg: %124
  UpdateRegP: SU(21) MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(21) 15c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 22 
  Cand SU(20) ORDER                              
Pick Bot WEAK      
Scheduling SU(20) MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
Bottom Pressure:
GR16=12
  LiveReg: %123
  UpdateRegP: SU(20) MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 19 18 8 
  Cand SU(22) ORDER                              
  Cand SU(19) WEAK                               
Pick Bot WEAK      
Scheduling SU(19) %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
Bottom Pressure:
GR16=14
  LiveReg: %122
  UpdateRegP: SU(18) %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
              to 
  UpdateRegP: SU(19) %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
              to 
  LiveReg: %120
  UpdateRegP: SU(18) %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
              to GR16 -2
  UpdateRegP: SU(19) %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(19) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 18 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
Bottom Pressure:
GR16=12
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 15 17 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %122:gr64 = SHL64ri %122:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=12
  LiveReg: %122
  UpdateRegP: SU(17) %122:gr64 = SHL64ri %122:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(17) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 15 16 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(15) ORDER                              
Pick Bot WEAK      
Scheduling SU(15) %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=14
  LiveReg: %120
  UpdateRegP: SU(15) %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to 
  LiveReg: %116
  UpdateRegP: SU(15) %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 11 14 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(11) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %120:gr64_nosp = SHL64ri %120:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=14
  LiveReg: %120
  UpdateRegP: SU(14) %120:gr64_nosp = SHL64ri %120:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 11 13 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=14
  LiveReg: %120
  UpdateRegP: SU(13) %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(13) 7c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 11 12 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %120:gr64_nosp = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 4 from %ir.k); fft3d.c:217:54
Bottom Pressure:
GR16=12
  Ready @11c
  BotQ.A BotLatency SU(12) 11c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 11 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %116:gr64_with_sub_8bit = ADD64rm %116:gr64_with_sub_8bit(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !410 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:217:49
Bottom Pressure:
GR16=12
  LiveReg: %116
  UpdateRegP: SU(11) %116:gr64_with_sub_8bit = ADD64rm %116:gr64_with_sub_8bit(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !410 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:217:49
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 10 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %116:gr64_with_sub_8bit = SHL64ri %116:gr64_with_sub_8bit(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=12
  LiveReg: %116
  UpdateRegP: SU(10) %116:gr64_with_sub_8bit = SHL64ri %116:gr64_with_sub_8bit(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to GR16 -2
  Ready @10c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 9 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=12
  LiveReg: %116
  UpdateRegP: SU(5) %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
              to 
  UpdateRegP: SU(9) %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
              to GR16 -2
  Ready @11c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 8 16 
  Cand SU(22) ORDER                              
  Cand SU(8) WEAK                               
Pick Bot WEAK      
Scheduling SU(8) %113:gr64 = SHL64ri %113:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !409; fft3d.c:217:21
Bottom Pressure:
GR16=12
  LiveReg: %113
  UpdateRegP: SU(8) %113:gr64 = SHL64ri %113:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !409; fft3d.c:217:21
              to GR16 -2
  Ready @3c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 7 
  Cand SU(22) ORDER                              
  Cand SU(7) WEAK                               
Pick Bot WEAK      
Scheduling SU(7) %113:gr64 = MOVSX64rr32 %111:gr32, debug-location !409; fft3d.c:217:21
Bottom Pressure:
GR16=12
  LiveReg: %111
  UpdateRegP: SU(7) %113:gr64 = MOVSX64rr32 %111:gr32, debug-location !409; fft3d.c:217:21
              to GR16 -2
  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 6 
  Cand SU(22) ORDER                              
  Cand SU(6) WEAK                               
Pick Bot WEAK      
Scheduling SU(6) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
Bottom Pressure:
GR16=14
  LiveReg: %111
  UpdateRegP: SU(6) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
              to 
  LiveReg: %107
  UpdateRegP: SU(6) %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
              to GR16 -2
  Ready @5c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 5 2 
  Cand SU(22) ORDER                              
  Cand SU(5) WEAK                               
Pick Bot WEAK      
Scheduling SU(5) %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
Bottom Pressure:
GR16=14
  LiveReg: %111
  UpdateRegP: SU(5) %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
              to GR16 -2
  Ready @11c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 2 4 3 
  Cand SU(22) ORDER                              
  Cand SU(2) WEAK                               
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %111:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
Bottom Pressure:
GR16=12
  Ready @15c
  BotQ.A BotLatency SU(4) 15c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 2 3 
  Cand SU(22) ORDER                              
  Cand SU(2) WEAK                               
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %116:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 4 from %ir.i); fft3d.c:217:44
Bottom Pressure:
GR16=10
  Ready @15c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 2 
  Cand SU(22) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %107:gr32 = nsw SUB32rm %107:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from %ir.bls); fft3d.c:217:29
Bottom Pressure:
GR16=10
  LiveReg: %107
  UpdateRegP: SU(2) %107:gr32 = nsw SUB32rm %107:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from %ir.bls); fft3d.c:217:29
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 1 
  Cand SU(22) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(1) %107:gr32 = COPY %239.sub_32bit:gr64_nosp, debug-location !404; fft3d.c:217:29
Bottom Pressure:
GR16=10
  LiveReg: %239
  UpdateRegP: SU(1) %107:gr32 = COPY %239.sub_32bit:gr64_nosp, debug-location !404; fft3d.c:217:29
              to GR16 -2
  UpdateRegP: SU(16) %122:gr64 = COPY %239:gr64_nosp, debug-location !410; fft3d.c:217:49
              to GR16 -2
  UpdateRegP: SU(22) %125:gr32 = LEA64_32r %239:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !414; fft3d.c:216:42
              to GR16 -2
  Ready @9c
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %125:gr32 = LEA64_32r %239:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !414; fft3d.c:216:42
Bottom Pressure:
GR16=8
  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %122:gr64 = COPY %239:gr64_nosp, debug-location !410; fft3d.c:217:49
Bottom Pressure:
GR16=6
  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %239:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !401 :: (dereferenceable load 4 from %ir.j); fft3d.c:217:27
Bottom Pressure:
GR16=4
  Ready @13c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %239:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !401 :: (dereferenceable load 4 from %ir.j); fft3d.c:217:27
SU(16):   %122:gr64 = COPY %239:gr64_nosp, debug-location !410; fft3d.c:217:49
SU(22):   %125:gr32 = LEA64_32r %239:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !414; fft3d.c:216:42
SU(1):   %107:gr32 = COPY %239.sub_32bit:gr64_nosp, debug-location !404; fft3d.c:217:29
SU(2):   %107:gr32 = nsw SUB32rm %107:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from %ir.bls); fft3d.c:217:29
SU(3):   %116:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 4 from %ir.i); fft3d.c:217:44
SU(4):   %111:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
SU(5):   %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
SU(6):   %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
SU(7):   %113:gr64 = MOVSX64rr32 %111:gr32, debug-location !409; fft3d.c:217:21
SU(8):   %113:gr64 = SHL64ri %113:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !409; fft3d.c:217:21
SU(9):   %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
SU(10):   %116:gr64_with_sub_8bit = SHL64ri %116:gr64_with_sub_8bit(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
SU(11):   %116:gr64_with_sub_8bit = ADD64rm %116:gr64_with_sub_8bit(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !410 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:217:49
SU(12):   %120:gr64_nosp = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 4 from %ir.k); fft3d.c:217:54
SU(13):   %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
SU(14):   %120:gr64_nosp = SHL64ri %120:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
SU(15):   %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
SU(17):   %122:gr64 = SHL64ri %122:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
SU(18):   %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
SU(19):   %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
SU(20):   MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
SU(21):   MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
SU(23):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !414 :: (store 4 into %ir.j); fft3d.c:216:42

********** MI Scheduling **********
fftXYZ:%bb.58 for.end153
  From: MOV64mr $rsp, 1, $noreg, 0, $noreg, %70:gr64, debug-location !428 :: (store 8 into stack); fft3d.c:220:13
    To: CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !428; fft3d.c:220:13
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %70:gr64, debug-location !428 :: (store 8 into stack); fft3d.c:220:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = COPY %65:gr32, debug-location !428; fft3d.c:220:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $esi = COPY %66:gr32, debug-location !428; fft3d.c:220:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $edx = COPY %67:gr32, debug-location !428; fft3d.c:220:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $ecx = COPY %68:gr32, debug-location !428; fft3d.c:220:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $r8d = COPY %69:gr32, debug-location !428; fft3d.c:220:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $r9 = MOV32ri64 @plane, debug-location !428; fft3d.c:220:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !428; fft3d.c:220:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $r8d = COPY %69:gr32, debug-location !428; fft3d.c:220:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $ecx = COPY %68:gr32, debug-location !428; fft3d.c:220:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $edx = COPY %67:gr32, debug-location !428; fft3d.c:220:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 2 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $esi = COPY %66:gr32, debug-location !428; fft3d.c:220:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 1 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = COPY %65:gr32, debug-location !428; fft3d.c:220:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) $r9 = MOV32ri64 @plane, debug-location !428; fft3d.c:220:13
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr $rsp, 1, $noreg, 0, $noreg, %70:gr64, debug-location !428 :: (store 8 into stack); fft3d.c:220:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %70:gr64, debug-location !428 :: (store 8 into stack); fft3d.c:220:13
SU(6):   $r9 = MOV32ri64 @plane, debug-location !428; fft3d.c:220:13
SU(1):   $edi = COPY %65:gr32, debug-location !428; fft3d.c:220:13
SU(2):   $esi = COPY %66:gr32, debug-location !428; fft3d.c:220:13
SU(3):   $edx = COPY %67:gr32, debug-location !428; fft3d.c:220:13
SU(4):   $ecx = COPY %68:gr32, debug-location !428; fft3d.c:220:13
SU(5):   $r8d = COPY %69:gr32, debug-location !428; fft3d.c:220:13

********** MI Scheduling **********
fftXYZ:%bb.58 for.end153
  From: %65:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:220:26
    To: ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !428; fft3d.c:220:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %65:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:220:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %66:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 4 from %ir.log); fft3d.c:220:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %67:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !424 :: (dereferenceable load 4 from %ir.len); fft3d.c:220:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %68:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !425 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:220:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %69:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:220:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %70:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !427 :: (dereferenceable load 8 from %ir.exp3.addr, align 16); fft3d.c:220:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !428; fft3d.c:220:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %70:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !427 :: (dereferenceable load 8 from %ir.exp3.addr, align 16); fft3d.c:220:59
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %69:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:220:46
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %68:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !425 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:220:42
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %67:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !424 :: (dereferenceable load 4 from %ir.len); fft3d.c:220:37
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %66:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 4 from %ir.log); fft3d.c:220:32
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %65:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:220:26
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %65:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:220:26
SU(1):   %66:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 4 from %ir.log); fft3d.c:220:32
SU(2):   %67:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !424 :: (dereferenceable load 4 from %ir.len); fft3d.c:220:37
SU(3):   %68:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !425 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:220:42
SU(4):   %69:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:220:46
SU(5):   %70:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !427 :: (dereferenceable load 8 from %ir.exp3.addr, align 16); fft3d.c:220:59

********** MI Scheduling **********
fftXYZ:%bb.59 for.cond154
  From: %75:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:221:30
    To: JCC_1 %bb.64, 15, implicit $eflags, debug-location !437; fft3d.c:221:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %75:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:221:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%75
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %75:gr32 = DEC32r %75:gr32(tied-def 0), implicit-def dead $eflags, debug-location !435; fft3d.c:221:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%75
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%75
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.9.i, 1, $noreg, 0, $noreg, %75:gr32, implicit-def $eflags, debug-location !436 :: (dereferenceable load 4 from %ir.i); fft3d.c:221:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%75
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.64, 15, implicit $eflags, debug-location !437; fft3d.c:221:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.9.i, 1, $noreg, 0, $noreg, %75:gr32, implicit-def $eflags, debug-location !436 :: (dereferenceable load 4 from %ir.i); fft3d.c:221:27
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %75:gr32 = DEC32r %75:gr32(tied-def 0), implicit-def dead $eflags, debug-location !435; fft3d.c:221:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:221:30
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %75:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:221:30
SU(1):   %75:gr32 = DEC32r %75:gr32(tied-def 0), implicit-def dead $eflags, debug-location !435; fft3d.c:221:33
SU(2):   CMP32mr %stack.9.i, 1, $noreg, 0, $noreg, %75:gr32, implicit-def $eflags, debug-location !436 :: (dereferenceable load 4 from %ir.i); fft3d.c:221:27

********** MI Scheduling **********
fftXYZ:%bb.60 for.body157
  From: %78:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 4 from %ir.bls); fft3d.c:222:26
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %78:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 4 from %ir.bls); fft3d.c:222:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%78
  Single Issue       : false;
SU(1):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %78:gr32, debug-location !441 :: (store 4 into %ir.j); fft3d.c:222:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%78
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %78:gr32, debug-location !441 :: (store 4 into %ir.j); fft3d.c:222:24
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %78:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 4 from %ir.bls); fft3d.c:222:26
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %78:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 4 from %ir.bls); fft3d.c:222:26
SU(1):   MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %78:gr32, debug-location !441 :: (store 4 into %ir.j); fft3d.c:222:24

********** MI Scheduling **********
fftXYZ:%bb.61 for.cond158
  From: %79:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.j); fft3d.c:222:31
    To: JCC_1 %bb.63, 15, implicit $eflags, debug-location !447; fft3d.c:222:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %79:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.j); fft3d.c:222:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%79
  Single Issue       : false;
SU(1):   CMP32rm %79:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !446 :: (dereferenceable load 4 from %ir.ble); fft3d.c:222:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%79
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 15, implicit $eflags, debug-location !447; fft3d.c:222:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %79:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !446 :: (dereferenceable load 4 from %ir.ble); fft3d.c:222:33
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %79:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.j); fft3d.c:222:31
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %79:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.j); fft3d.c:222:31
SU(1):   CMP32rm %79:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !446 :: (dereferenceable load 4 from %ir.ble); fft3d.c:222:33

********** MI Scheduling **********
fftXYZ:%bb.62 for.body160
  From: %81:gr64 = MOV64rm %stack.5.xout.addr, 1, $noreg, 0, $noreg, debug-location !448 :: (dereferenceable load 8 from %ir.xout.addr); fft3d.c:223:21
    To: JMP_1 %bb.61, debug-location !469; fft3d.c:222:17
 RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=12
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %81:gr64 = MOV64rm %stack.5.xout.addr, 1, $noreg, 0, $noreg, debug-location !448 :: (dereferenceable load 8 from %ir.xout.addr); fft3d.c:223:21
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(22): Data Latency=4 Reg=%81
    SU(20): Data Latency=4 Reg=%81
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %82:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !450 :: (dereferenceable load 4 from %ir.j); fft3d.c:223:26
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(13): Data Latency=4 Reg=%82
    SU(10): Data Latency=4 Reg=%82
    SU(13): Out  Latency=0
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %85:gr64 = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !451 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:223:31
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(3): Data Latency=4 Reg=%85
    SU(3): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %85:gr64 = nsw INC64r %85:gr64(tied-def 0), implicit-def dead $eflags, debug-location !452; fft3d.c:223:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(2): Data Latency=4 Reg=%85
    SU(2): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%85
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %86:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !453 :: (dereferenceable load 4 from %ir.k); fft3d.c:223:42
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(8): Data Latency=4 Reg=%86
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %91:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !454 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:223:46
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(7): Data Latency=4 Reg=%91
    SU(7): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %88:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !455 :: (dereferenceable load 4 from %ir.i); fft3d.c:223:51
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(15): Data Latency=4 Reg=%88
    SU(7): Data Latency=4 Reg=%88
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(6): Data Latency=4 Reg=%88
    SU(5): Data Latency=4 Reg=%91
    SU(5): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%91
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 18
  Predecessors:
    SU(7): Data Latency=1 Reg=%91
    SU(7): Out  Latency=0
    SU(4): Data Latency=4 Reg=%86
  Successors:
    SU(9): Data Latency=1 Reg=%91
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 17
  Predecessors:
    SU(8): Data Latency=1 Reg=%91
    SU(8): Out  Latency=0
    SU(3): Data Latency=1 Reg=%85
  Successors:
    SU(10): Data Latency=1 Reg=%91
    SU(10): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(9): Data Latency=1 Reg=%91
    SU(9): Out  Latency=0
    SU(1): Data Latency=4 Reg=%82
  Successors:
    SU(11): Data Latency=1 Reg=%91
    SU(11): Out  Latency=0
    SU(13): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %91:gr64_nosp = SHL64ri %91:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !448; fft3d.c:223:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%91
    SU(10): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%91
    SU(20): Data Latency=1 Reg=%91
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %240:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(13): Data Latency=4 Reg=%240
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(12): Data Latency=4 Reg=%240
    SU(10): Anti Latency=0
    SU(1): Data Latency=4 Reg=%82
    SU(1): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%82
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %97:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(15): Data Latency=4 Reg=%97
    SU(15): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(14): Data Latency=4 Reg=%97
    SU(14): Out  Latency=0
    SU(6): Data Latency=4 Reg=%88
  Successors:
    SU(16): Data Latency=1 Reg=%97
    SU(16): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1 Reg=%82
    SU(15): Out  Latency=0
    SU(15): Data Latency=1 Reg=%97
  Successors:
    SU(17): Data Latency=1 Reg=%97
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %99:gr64 = MOVSX64rr32 %97:gr32, debug-location !467; fft3d.c:224:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(16): Data Latency=1 Reg=%97
  Successors:
    SU(18): Data Latency=1 Reg=%99
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %99:gr64 = SHL64ri %99:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !467; fft3d.c:224:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 13
  Predecessors:
    SU(17): Data Latency=1 Reg=%99
    SU(17): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%99
    SU(19): Data Latency=1 Reg=%99
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %100:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane, $noreg, debug-location !467 :: (load 8 from %ir.174); fft3d.c:224:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 12
  Predecessors:
    SU(18): Data Latency=1 Reg=%99
  Successors:
    SU(20): Data Latency=4 Reg=%100
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 8
  Predecessors:
    SU(19): Data Latency=4 Reg=%100
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%91
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%81
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(21):   %101:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !467 :: (load 8 from %ir.174 + 8); fft3d.c:224:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 7
  Predecessors:
    SU(20): Ord  Latency=1 Memory
    SU(18): Data Latency=1 Reg=%99
  Successors:
    SU(22): Data Latency=4 Reg=%101
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
  # preds left       : 13
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 3
  Predecessors:
    SU(21): Data Latency=4 Reg=%101
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%91
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%81
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(23):   INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !468 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:222:42
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 3
  Predecessors:
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.61, debug-location !469; fft3d.c:222:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(23): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 23
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !468 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:222:42
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(23) 20c
  BotQ.A BotLatency SU(23) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Scheduling SU(22) MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
Bottom Pressure:
GR16=6
  LiveReg: %81
  UpdateRegP: SU(20) MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
              to GR16 4
  UpdateRegP: SU(22) MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
              to GR16 4
  LiveReg: %91
  UpdateRegP: SU(20) MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
              to GR16 2
  UpdateRegP: SU(22) MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
              to GR16 2
  LiveReg: %101
  UpdateRegP: SU(22) MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) %101:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !467 :: (load 8 from %ir.174 + 8); fft3d.c:224:25
Bottom Pressure:
GR16=6
  LiveReg: %99
  UpdateRegP: SU(19) %100:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane, $noreg, debug-location !467 :: (load 8 from %ir.174); fft3d.c:224:25
              to GR16 -2
  UpdateRegP: SU(21) %101:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !467 :: (load 8 from %ir.174 + 8); fft3d.c:224:25
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(21) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
Bottom Pressure:
GR16=8
  LiveReg: %100
  UpdateRegP: SU(20) MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
              to 
  Ready @8c
  BotQ.A BotLatency SU(20) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 11 0 
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %100:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane, $noreg, debug-location !467 :: (load 8 from %ir.174); fft3d.c:224:25
Bottom Pressure:
GR16=6
  Ready @12c
  BotQ.A BotLatency SU(19) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 18 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %99:gr64 = SHL64ri %99:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !467; fft3d.c:224:25
Bottom Pressure:
GR16=6
  LiveReg: %99
  UpdateRegP: SU(18) %99:gr64 = SHL64ri %99:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !467; fft3d.c:224:25
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(18) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 17 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %99:gr64 = MOVSX64rr32 %97:gr32, debug-location !467; fft3d.c:224:25
Bottom Pressure:
GR16=6
  LiveReg: %97
  UpdateRegP: SU(17) %99:gr64 = MOVSX64rr32 %97:gr32, debug-location !467; fft3d.c:224:25
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(17) 14c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 16 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
Bottom Pressure:
GR16=8
  LiveReg: %97
  UpdateRegP: SU(16) %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
              to 
  LiveReg: %82
  UpdateRegP: SU(16) %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(16) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 13 15 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
Bottom Pressure:
GR16=10
  LiveReg: %97
  UpdateRegP: SU(15) %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
              to 
  LiveReg: %88
  UpdateRegP: SU(7) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
              to 
  UpdateRegP: SU(15) %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(15) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 13 14 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %97:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
Bottom Pressure:
GR16=8
  Ready @20c
  BotQ.A BotLatency SU(14) 20c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 13 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
Bottom Pressure:
GR16=10
  LiveReg: %82
  UpdateRegP: SU(10) %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
              to 
  UpdateRegP: SU(13) %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
              to 
  LiveReg: %240
  UpdateRegP: SU(13) %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
              to GR16 -2
  Ready @16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 12 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %240:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
Bottom Pressure:
GR16=8
  Ready @20c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 11 
  Cand SU(0) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %91:gr64_nosp = SHL64ri %91:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !448; fft3d.c:223:21
Bottom Pressure:
GR16=8
  LiveReg: %91
  UpdateRegP: SU(11) %91:gr64_nosp = SHL64ri %91:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !448; fft3d.c:223:21
              to GR16 -2
  Ready @9c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 10 
  Cand SU(0) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
Bottom Pressure:
GR16=8
  LiveReg: %91
  UpdateRegP: SU(10) %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
              to GR16 -2
  Ready @16c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 9 1 
  Cand SU(0) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
Bottom Pressure:
GR16=10
  LiveReg: %91
  UpdateRegP: SU(9) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
              to 
  LiveReg: %85
  UpdateRegP: SU(9) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
              to GR16 -2
  Ready @17c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 8 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
Bottom Pressure:
GR16=12
  LiveReg: %91
  UpdateRegP: SU(8) %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
              to 
  LiveReg: %86
  UpdateRegP: SU(8) %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
              to GR16 -2
  Ready @18c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 7 4 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
Bottom Pressure:
GR16=12
  LiveReg: %91
  UpdateRegP: SU(7) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
              to GR16 -2
  Ready @19c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 6 5 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %88:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !455 :: (dereferenceable load 4 from %ir.i); fft3d.c:223:51
Bottom Pressure:
GR16=10
  Ready @23c
  BotQ.A BotLatency SU(6) 23c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 5 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %91:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !454 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:223:46
Bottom Pressure:
GR16=8
  Ready @23c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %86:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !453 :: (dereferenceable load 4 from %ir.k); fft3d.c:223:42
Bottom Pressure:
GR16=6
  Ready @22c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %85:gr64 = nsw INC64r %85:gr64(tied-def 0), implicit-def dead $eflags, debug-location !452; fft3d.c:223:34
Bottom Pressure:
GR16=6
  LiveReg: %85
  UpdateRegP: SU(3) %85:gr64 = nsw INC64r %85:gr64(tied-def 0), implicit-def dead $eflags, debug-location !452; fft3d.c:223:34
              to GR16 -2
  Ready @18c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %85:gr64 = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !451 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:223:31
Bottom Pressure:
GR16=4
  Ready @22c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %82:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !450 :: (dereferenceable load 4 from %ir.j); fft3d.c:223:26
Bottom Pressure:
GR16=2
  Ready @20c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %81:gr64 = MOV64rm %stack.5.xout.addr, 1, $noreg, 0, $noreg, debug-location !448 :: (dereferenceable load 8 from %ir.xout.addr); fft3d.c:223:21
Bottom Pressure:

  Ready @12c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %81:gr64 = MOV64rm %stack.5.xout.addr, 1, $noreg, 0, $noreg, debug-location !448 :: (dereferenceable load 8 from %ir.xout.addr); fft3d.c:223:21
SU(1):   %82:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !450 :: (dereferenceable load 4 from %ir.j); fft3d.c:223:26
SU(2):   %85:gr64 = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !451 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:223:31
SU(3):   %85:gr64 = nsw INC64r %85:gr64(tied-def 0), implicit-def dead $eflags, debug-location !452; fft3d.c:223:34
SU(4):   %86:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !453 :: (dereferenceable load 4 from %ir.k); fft3d.c:223:42
SU(5):   %91:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !454 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:223:46
SU(6):   %88:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !455 :: (dereferenceable load 4 from %ir.i); fft3d.c:223:51
SU(7):   %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
SU(8):   %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
SU(9):   %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
SU(10):   %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
SU(11):   %91:gr64_nosp = SHL64ri %91:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !448; fft3d.c:223:21
SU(12):   %240:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
SU(13):   %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
SU(14):   %97:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
SU(15):   %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
SU(16):   %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
SU(17):   %99:gr64 = MOVSX64rr32 %97:gr32, debug-location !467; fft3d.c:224:25
SU(18):   %99:gr64 = SHL64ri %99:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !467; fft3d.c:224:25
SU(19):   %100:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane, $noreg, debug-location !467 :: (load 8 from %ir.174); fft3d.c:224:25
SU(20):   MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
SU(21):   %101:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !467 :: (load 8 from %ir.174 + 8); fft3d.c:224:25
SU(22):   MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
SU(23):   INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !468 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:222:42

********** MI Scheduling **********
fftXYZ:%bb.64 for.end178
  From: %77:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !476 :: (dereferenceable load 4 from @fftblock); fft3d.c:210:40
    To: JMP_1 %bb.49, debug-location !478; fft3d.c:210:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %77:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !476 :: (dereferenceable load 4 from @fftblock); fft3d.c:210:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%77
  Single Issue       : false;
SU(1):   ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %77:gr32, implicit-def dead $eflags, debug-location !477 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:210:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%77
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.49, debug-location !478; fft3d.c:210:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %77:gr32, implicit-def dead $eflags, debug-location !477 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:210:37
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %77:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !476 :: (dereferenceable load 4 from @fftblock); fft3d.c:210:40
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %77:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !476 :: (dereferenceable load 4 from @fftblock); fft3d.c:210:40
SU(1):   ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %77:gr32, implicit-def dead $eflags, debug-location !477 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:210:37

********** INTERVALS **********
AH [448r,480r:2)[480r,488r:8)[768r,800r:7)[3968r,4000r:1)[4000r,4008r:6)[4256r,4288r:5)[5824r,5856r:0)[5856r,5864r:4)[6112r,6144r:3)  0@5824r 1@3968r 2@448r 3@6112r 4@5856r 5@4256r 6@4000r 7@768r 8@480r
AL [448r,480r:2)[480r,488r:8)[768r,800r:7)[3968r,4000r:1)[4000r,4008r:6)[4256r,4288r:5)[5824r,5856r:0)[5856r,5864r:4)[6112r,6144r:3)  0@5824r 1@3968r 2@448r 3@6112r 4@5856r 5@4256r 6@4000r 7@768r 8@480r
CH [0B,48r:0)[2768r,2784r:1)[5440r,5488r:2)[8064r,8080r:3)  0@0B-phi 1@2768r 2@5440r 3@8064r
CL [0B,48r:0)[2768r,2784r:1)[5440r,5488r:2)[8064r,8080r:3)  0@0B-phi 1@2768r 2@5440r 3@8064r
DH [0B,64r:0)[464r,480r:9)[480r,480d:8)[2760r,2784r:1)[3984r,4000r:7)[4000r,4000d:6)[5424r,5488r:2)[5840r,5856r:5)[5856r,5856d:4)[8056r,8080r:3)  0@0B-phi 1@2760r 2@5424r 3@8056r 4@5856r 5@5840r 6@4000r 7@3984r 8@480r 9@464r
DIL [0B,96r:0)[304r,320r:14)[752r,768r:13)[928r,944r:12)[2744r,2784r:1)[3872r,3888r:11)[4240r,4256r:10)[4416r,4432r:9)[5392r,5488r:2)[5728r,5744r:8)[6096r,6112r:7)[6272r,6288r:6)[8040r,8080r:3)[9216r,9232r:5)[9376r,9392r:4)  0@0B-phi 1@2744r 2@5392r 3@8040r 4@9376r 5@9216r 6@6272r 7@6096r 8@5728r 9@4416r 10@4240r 11@3872r 12@928r 13@752r 14@304r
DIH [0B,96r:0)[304r,320r:14)[752r,768r:13)[928r,944r:12)[2744r,2784r:1)[3872r,3888r:11)[4240r,4256r:10)[4416r,4432r:9)[5392r,5488r:2)[5728r,5744r:8)[6096r,6112r:7)[6272r,6288r:6)[8040r,8080r:3)[9216r,9232r:5)[9376r,9392r:4)  0@0B-phi 1@2744r 2@5392r 3@8040r 4@9376r 5@9216r 6@6272r 7@6096r 8@5728r 9@4416r 10@4240r 11@3872r 12@928r 13@752r 14@304r
DL [0B,64r:0)[464r,480r:9)[480r,480d:8)[2760r,2784r:1)[3984r,4000r:7)[4000r,4000d:6)[5424r,5488r:2)[5840r,5856r:5)[5856r,5856d:4)[8056r,8080r:3)  0@0B-phi 1@2760r 2@5424r 3@8056r 4@5856r 5@5840r 6@4000r 7@3984r 8@480r 9@464r
HAX [448r,480r:2)[480r,488r:8)[768r,800r:7)[3968r,4000r:1)[4000r,4008r:6)[4256r,4288r:5)[5824r,5856r:0)[5856r,5864r:4)[6112r,6144r:3)  0@5824r 1@3968r 2@448r 3@6112r 4@5856r 5@4256r 6@4000r 7@768r 8@480r
HCX [0B,48r:0)[2768r,2784r:1)[5440r,5488r:2)[8064r,8080r:3)  0@0B-phi 1@2768r 2@5440r 3@8064r
HDI [0B,96r:0)[304r,320r:14)[752r,768r:13)[928r,944r:12)[2744r,2784r:1)[3872r,3888r:11)[4240r,4256r:10)[4416r,4432r:9)[5392r,5488r:2)[5728r,5744r:8)[6096r,6112r:7)[6272r,6288r:6)[8040r,8080r:3)[9216r,9232r:5)[9376r,9392r:4)  0@0B-phi 1@2744r 2@5392r 3@8040r 4@9376r 5@9216r 6@6272r 7@6096r 8@5728r 9@4416r 10@4240r 11@3872r 12@928r 13@752r 14@304r
HDX [0B,64r:0)[464r,480r:9)[480r,480d:8)[2760r,2784r:1)[3984r,4000r:7)[4000r,4000d:6)[5424r,5488r:2)[5840r,5856r:5)[5856r,5856d:4)[8056r,8080r:3)  0@0B-phi 1@2760r 2@5424r 3@8056r 4@5856r 5@5840r 6@4000r 7@3984r 8@480r 9@464r
EFLAGS [208r,224r:136)[272r,272d:135)[336r,336d:134)[400r,400d:137)[464r,464d:2)[480r,480d:133)[528r,544r:132)[688r,688d:131)[736r,736d:130)[784r,784d:129)[832r,848r:128)[896r,896d:127)[960r,960d:126)[1024r,1024d:18)[1088r,1104r:125)[1200r,1216r:45)[1360r,1376r:43)[1456r,1456d:42)[1552r,1552d:41)[1584r,1584d:40)[1664r,1680r:39)[1776r,1792r:22)[1904r,1904d:9)[1984r,1984d:8)[2016r,2016d:20)[2064r,2064d:19)[2112r,2112d:17)[2144r,2144d:16)[2176r,2176d:15)[2208r,2208d:14)[2240r,2240d:13)[2272r,2272d:12)[2408r,2408d:11)[2472r,2472d:21)[2608r,2608d:38)[2792r,2792d:37)[2848r,2864r:36)[2960r,2976r:34)[3056r,3056d:32)[3088r,3088d:31)[3120r,3120d:30)[3184r,3184d:29)[3216r,3216d:28)[3248r,3248d:27)[3408r,3408d:6)[3416r,3416d:26)[3432r,3432d:7)[3448r,3448d:25)[3488r,3488d:24)[3568r,3568d:23)[3616r,3616d:33)[3680r,3680d:35)[3728r,3728d:44)[3776r,3792r:124)[3840r,3840d:123)[3904r,3904d:122)[3984r,3984d:1)[4000r,4000d:121)[4048r,4064r:120)[4176r,4176d:119)[4224r,4224d:118)[4272r,4272d:117)[4320r,4336r:116)[4384r,4384d:115)[4448r,4448d:114)[4528r,4544r:113)[4640r,4656r:60)[4800r,4816r:58)[4896r,4896d:57)[4976r,4976d:56)[5008r,5008d:55)[5120r,5120d:54)[5168r,5168d:53)[5200r,5200d:52)[5232r,5232d:51)[5280r,5280d:50)[5312r,5312d:49)[5344r,5344d:48)[5504r,5504d:47)[5536r,5536d:46)[5584r,5584d:59)[5632r,5648r:112)[5696r,5696d:111)[5760r,5760d:110)[5840r,5840d:0)[5856r,5856d:109)[5904r,5920r:108)[6032r,6032d:107)[6080r,6080d:106)[6128r,6128d:105)[6176r,6192r:104)[6240r,6240d:103)[6304r,6304d:102)[6400r,6416r:101)[6512r,6528r:94)[6672r,6688r:92)[6768r,6768d:91)[6848r,6848d:90)[6880r,6880d:89)[6960r,6976r:88)[7088r,7104r:72)[7704r,7704d:70)[7728r,7728d:5)[7736r,7736d:69)[7752r,7752d:68)[7760r,7760d:67)[7768r,7768d:66)[7776r,7776d:65)[7792r,7792d:64)[7800r,7800d:63)[7808r,7808d:62)[7816r,7816d:61)[7880r,7880d:71)[7952r,7952d:87)[8088r,8088d:86)[8144r,8144d:85)[8160r,8176r:10)[8288r,8304r:83)[8432r,8432d:81)[8528r,8528d:80)[8560r,8560d:79)[8592r,8592d:78)[8624r,8624d:77)[8656r,8656d:76)[8704r,8704d:4)[8752r,8752d:3)[8784r,8784d:75)[8832r,8832d:74)[8912r,8912d:73)[8960r,8960d:82)[9024r,9024d:84)[9072r,9072d:93)[9120r,9136r:100)[9184r,9184d:99)[9248r,9248d:98)[9280r,9296r:97)[9344r,9344d:96)[9408r,9408d:95)  0@5840r 1@3984r 2@464r 3@8752r 4@8704r 5@7728r 6@3408r 7@3432r 8@1984r 9@1904r 10@8160r 11@2408r 12@2272r 13@2240r 14@2208r 15@2176r 16@2144r 17@2112r 18@1024r 19@2064r 20@2016r 21@2472r 22@1776r 23@3568r 24@3488r 25@3448r 26@3416r 27@3248r 28@3216r 29@3184r 30@3120r 31@3088r 32@3056r 33@3616r 34@2960r 35@3680r 36@2848r 37@2792r 38@2608r 39@1664r 40@1584r 41@1552r 42@1456r 43@1360r 44@3728r 45@1200r 46@5536r 47@5504r 48@5344r 49@5312r 50@5280r 51@5232r 52@5200r 53@5168r 54@5120r 55@5008r 56@4976r 57@4896r 58@4800r 59@5584r 60@4640r 61@7816r 62@7808r 63@7800r 64@7792r 65@7776r 66@7768r 67@7760r 68@7752r 69@7736r 70@7704r 71@7880r 72@7088r 73@8912r 74@8832r 75@8784r 76@8656r 77@8624r 78@8592r 79@8560r 80@8528r 81@8432r 82@8960r 83@8288r 84@9024r 85@8144r 86@8088r 87@7952r 88@6960r 89@6880r 90@6848r 91@6768r 92@6672r 93@9072r 94@6512r 95@9408r 96@9344r 97@9280r 98@9248r 99@9184r 100@9120r 101@6400r 102@6304r 103@6240r 104@6176r 105@6128r 106@6080r 107@6032r 108@5904r 109@5856r 110@5760r 111@5696r 112@5632r 113@4528r 114@4448r 115@4384r 116@4320r 117@4272r 118@4224r 119@4176r 120@4048r 121@4000r 122@3904r 123@3840r 124@3776r 125@1088r 126@960r 127@896r 128@832r 129@784r 130@736r 131@688r 132@528r 133@480r 134@336r 135@272r 136@208r 137@400r
SIL [0B,80r:0)[2752r,2784r:1)[5408r,5488r:2)[8048r,8080r:3)  0@0B-phi 1@2752r 2@5408r 3@8048r
SIH [0B,80r:0)[2752r,2784r:1)[5408r,5488r:2)[8048r,8080r:3)  0@0B-phi 1@2752r 2@5408r 3@8048r
HSI [0B,80r:0)[2752r,2784r:1)[5408r,5488r:2)[8048r,8080r:3)  0@0B-phi 1@2752r 2@5408r 3@8048r
SPL [272r,272d:41)[320r,320d:40)[336r,336d:39)[736r,736d:38)[768r,768d:37)[784r,784d:36)[896r,896d:35)[944r,944d:34)[960r,960d:33)[2608r,2608d:2)[2784r,2784d:1)[2792r,2792d:0)[3840r,3840d:32)[3888r,3888d:31)[3904r,3904d:30)[4224r,4224d:29)[4256r,4256d:28)[4272r,4272d:27)[4384r,4384d:26)[4432r,4432d:25)[4448r,4448d:24)[5344r,5344d:5)[5488r,5488d:4)[5504r,5504d:3)[5696r,5696d:23)[5744r,5744d:22)[5760r,5760d:21)[6080r,6080d:20)[6112r,6112d:19)[6128r,6128d:18)[6240r,6240d:17)[6288r,6288d:16)[6304r,6304d:15)[7952r,7952d:8)[8080r,8080d:7)[8088r,8088d:6)[9184r,9184d:14)[9232r,9232d:13)[9248r,9248d:12)[9344r,9344d:11)[9392r,9392d:10)[9408r,9408d:9)  0@2792r 1@2784r 2@2608r 3@5504r 4@5488r 5@5344r 6@8088r 7@8080r 8@7952r 9@9408r 10@9392r 11@9344r 12@9248r 13@9232r 14@9184r 15@6304r 16@6288r 17@6240r 18@6128r 19@6112r 20@6080r 21@5760r 22@5744r 23@5696r 24@4448r 25@4432r 26@4384r 27@4272r 28@4256r 29@4224r 30@3904r 31@3888r 32@3840r 33@960r 34@944r 35@896r 36@784r 37@768r 38@736r 39@336r 40@320r 41@272r
SPH [272r,272d:41)[320r,320d:40)[336r,336d:39)[736r,736d:38)[768r,768d:37)[784r,784d:36)[896r,896d:35)[944r,944d:34)[960r,960d:33)[2608r,2608d:2)[2784r,2784d:1)[2792r,2792d:0)[3840r,3840d:32)[3888r,3888d:31)[3904r,3904d:30)[4224r,4224d:29)[4256r,4256d:28)[4272r,4272d:27)[4384r,4384d:26)[4432r,4432d:25)[4448r,4448d:24)[5344r,5344d:5)[5488r,5488d:4)[5504r,5504d:3)[5696r,5696d:23)[5744r,5744d:22)[5760r,5760d:21)[6080r,6080d:20)[6112r,6112d:19)[6128r,6128d:18)[6240r,6240d:17)[6288r,6288d:16)[6304r,6304d:15)[7952r,7952d:8)[8080r,8080d:7)[8088r,8088d:6)[9184r,9184d:14)[9232r,9232d:13)[9248r,9248d:12)[9344r,9344d:11)[9392r,9392d:10)[9408r,9408d:9)  0@2792r 1@2784r 2@2608r 3@5504r 4@5488r 5@5344r 6@8088r 7@8080r 8@7952r 9@9408r 10@9392r 11@9344r 12@9248r 13@9232r 14@9184r 15@6304r 16@6288r 17@6240r 18@6128r 19@6112r 20@6080r 21@5760r 22@5744r 23@5696r 24@4448r 25@4432r 26@4384r 27@4272r 28@4256r 29@4224r 30@3904r 31@3888r 32@3840r 33@960r 34@944r 35@896r 36@784r 37@768r 38@736r 39@336r 40@320r 41@272r
HSP [272r,272d:41)[320r,320d:40)[336r,336d:39)[736r,736d:38)[768r,768d:37)[784r,784d:36)[896r,896d:35)[944r,944d:34)[960r,960d:33)[2608r,2608d:2)[2784r,2784d:1)[2792r,2792d:0)[3840r,3840d:32)[3888r,3888d:31)[3904r,3904d:30)[4224r,4224d:29)[4256r,4256d:28)[4272r,4272d:27)[4384r,4384d:26)[4432r,4432d:25)[4448r,4448d:24)[5344r,5344d:5)[5488r,5488d:4)[5504r,5504d:3)[5696r,5696d:23)[5744r,5744d:22)[5760r,5760d:21)[6080r,6080d:20)[6112r,6112d:19)[6128r,6128d:18)[6240r,6240d:17)[6288r,6288d:16)[6304r,6304d:15)[7952r,7952d:8)[8080r,8080d:7)[8088r,8088d:6)[9184r,9184d:14)[9232r,9232d:13)[9248r,9248d:12)[9344r,9344d:11)[9392r,9392d:10)[9408r,9408d:9)  0@2792r 1@2784r 2@2608r 3@5504r 4@5488r 5@5344r 6@8088r 7@8080r 8@7952r 9@9408r 10@9392r 11@9344r 12@9248r 13@9232r 14@9184r 15@6304r 16@6288r 17@6240r 18@6128r 19@6112r 20@6080r 21@5760r 22@5744r 23@5696r 24@4448r 25@4432r 26@4384r 27@4272r 28@4256r 29@4224r 30@3904r 31@3888r 32@3840r 33@960r 34@944r 35@896r 36@784r 37@768r 38@736r 39@336r 40@320r 41@272r
R8B [0B,32r:0)[2776r,2784r:1)[5456r,5488r:2)[8072r,8080r:3)  0@0B-phi 1@2776r 2@5456r 3@8072r
R8BH [0B,32r:0)[2776r,2784r:1)[5456r,5488r:2)[8072r,8080r:3)  0@0B-phi 1@2776r 2@5456r 3@8072r
R8WH [0B,32r:0)[2776r,2784r:1)[5456r,5488r:2)[8072r,8080r:3)  0@0B-phi 1@2776r 2@5456r 3@8072r
R9B [0B,16r:0)[2736r,2784r:1)[5472r,5488r:2)[8032r,8080r:3)  0@0B-phi 1@2736r 2@5472r 3@8032r
R9BH [0B,16r:0)[2736r,2784r:1)[5472r,5488r:2)[8032r,8080r:3)  0@0B-phi 1@2736r 2@5472r 3@8032r
R9WH [0B,16r:0)[2736r,2784r:1)[5472r,5488r:2)[8032r,8080r:3)  0@0B-phi 1@2736r 2@5472r 3@8032r
%1 [80r,400r:1)[400r,9104B:0)  0@400r 1@80r weight:0.000000e+00
%2 [96r,112r:0)  0@96r weight:0.000000e+00
%4 [64r,368r:0)  0@64r weight:0.000000e+00
%5 [48r,160r:0)  0@48r weight:0.000000e+00
%6 [32r,176r:0)  0@32r weight:0.000000e+00
%7 [16r,192r:0)  0@16r weight:0.000000e+00
%13 [488r,528r:0)  0@488r weight:0.000000e+00
%16 [656r,688r:0)[688r,704r:1)  0@656r 1@688r weight:0.000000e+00
%17 [720r,752r:0)  0@720r weight:0.000000e+00
%18 [800r,816r:0)  0@800r weight:0.000000e+00
%20 [1072r,1088r:0)  0@1072r weight:0.000000e+00
%25 [4008r,4048r:0)  0@4008r weight:0.000000e+00
%28 [4144r,4176r:0)[4176r,4192r:1)  0@4144r 1@4176r weight:0.000000e+00
%29 [4208r,4240r:0)  0@4208r weight:0.000000e+00
%30 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%32 [4512r,4528r:0)  0@4512r weight:0.000000e+00
%37 [5864r,5904r:0)  0@5864r weight:0.000000e+00
%40 [6000r,6032r:0)[6032r,6048r:1)  0@6000r 1@6032r weight:0.000000e+00
%41 [6064r,6096r:0)  0@6064r weight:0.000000e+00
%42 [6144r,6160r:0)  0@6144r weight:0.000000e+00
%44 [6384r,6400r:0)  0@6384r weight:0.000000e+00
%48 [6496r,6512r:0)  0@6496r weight:0.000000e+00
%52 [6592r,6640r:0)  0@6592r weight:0.000000e+00
%54 [6576r,6640r:0)  0@6576r weight:0.000000e+00
%56 [6640r,6672r:0)  0@6640r weight:0.000000e+00
%59 [6736r,6768r:0)[6768r,6784r:1)  0@6736r 1@6768r weight:0.000000e+00
%62 [6816r,6848r:2)[6848r,6880r:0)[6880r,6896r:1)  0@6848r 1@6880r 2@6816r weight:0.000000e+00
%63 [6944r,6960r:0)  0@6944r weight:0.000000e+00
%65 [7904r,8040r:0)  0@7904r weight:0.000000e+00
%66 [7912r,8048r:0)  0@7912r weight:0.000000e+00
%67 [7920r,8056r:0)  0@7920r weight:0.000000e+00
%68 [7928r,8064r:0)  0@7928r weight:0.000000e+00
%69 [7936r,8072r:0)  0@7936r weight:0.000000e+00
%70 [7944r,7968r:0)  0@7944r weight:0.000000e+00
%75 [8112r,8144r:0)[8144r,8160r:1)  0@8112r 1@8144r weight:0.000000e+00
%77 [9008r,9024r:0)  0@9008r weight:0.000000e+00
%78 [8224r,8240r:0)  0@8224r weight:0.000000e+00
%79 [8272r,8288r:0)  0@8272r weight:0.000000e+00
%81 [8352r,8896r:0)  0@8352r weight:0.000000e+00
%82 [8368r,8704r:0)[8704r,8784r:1)  0@8368r 1@8704r weight:0.000000e+00
%85 [8400r,8432r:0)[8432r,8592r:1)  0@8400r 1@8432r weight:0.000000e+00
%86 [8448r,8560r:0)  0@8448r weight:0.000000e+00
%88 [8480r,8752r:0)  0@8480r weight:0.000000e+00
%91 [8464r,8528r:2)[8528r,8560r:0)[8560r,8592r:1)[8592r,8624r:3)[8624r,8656r:4)[8656r,8896r:5)  0@8528r 1@8560r 2@8464r 3@8592r 4@8624r 5@8656r weight:0.000000e+00
%97 [8720r,8752r:2)[8752r,8784r:0)[8784r,8800r:1)  0@8752r 1@8784r 2@8720r weight:0.000000e+00
%99 [8800r,8832r:0)[8832r,8880r:1)  0@8800r 1@8832r weight:0.000000e+00
%100 [8848r,8864r:0)  0@8848r weight:0.000000e+00
%101 [8880r,8896r:0)  0@8880r weight:0.000000e+00
%102 [7024r,7040r:0)  0@7024r weight:0.000000e+00
%103 [7072r,7088r:0)  0@7072r weight:0.000000e+00
%107 [7700r,7704r:0)[7704r,7736r:1)  0@7700r 1@7704r weight:0.000000e+00
%111 [7720r,7728r:2)[7728r,7736r:0)[7736r,7744r:1)  0@7728r 1@7736r 2@7720r weight:0.000000e+00
%113 [7744r,7752r:0)[7752r,7848r:1)  0@7744r 1@7752r weight:0.000000e+00
%116 [7712r,7760r:2)[7760r,7768r:0)[7768r,7776r:1)[7776r,7808r:3)  0@7760r 1@7768r 2@7712r 3@7776r weight:0.000000e+00
%120 [7784r,7792r:2)[7792r,7800r:0)[7800r,7808r:1)[7808r,7832r:3)  0@7792r 1@7800r 2@7784r 3@7808r weight:0.000000e+00
%122 [7584r,7816r:0)[7816r,7832r:1)  0@7584r 1@7816r weight:0.000000e+00
%123 [7824r,7840r:0)  0@7824r weight:0.000000e+00
%124 [7832r,7848r:0)  0@7832r weight:0.000000e+00
%125 [7696r,7856r:0)  0@7696r weight:0.000000e+00
%126 [4624r,4640r:0)  0@4624r weight:0.000000e+00
%130 [4720r,4768r:0)  0@4720r weight:0.000000e+00
%132 [4704r,4768r:0)  0@4704r weight:0.000000e+00
%134 [4768r,4800r:0)  0@4768r weight:0.000000e+00
%137 [4864r,4896r:0)[4896r,4912r:1)  0@4864r 1@4896r weight:0.000000e+00
%140 [4944r,4976r:2)[4976r,5008r:0)[5008r,5424r:1)  0@4976r 1@5008r 2@4944r weight:0.000000e+00
%141 [5040r,5392r:0)  0@5040r weight:0.000000e+00
%142 [5056r,5408r:0)  0@5056r weight:0.000000e+00
%143 [5072r,5440r:0)  0@5072r weight:0.000000e+00
%145 [5088r,5120r:0)[5120r,5456r:1)  0@5088r 1@5120r weight:0.000000e+00
%149 [5136r,5168r:2)[5168r,5200r:0)[5200r,5232r:1)[5232r,5312r:3)  0@5168r 1@5200r 2@5136r 3@5232r weight:0.000000e+00
%153 [5248r,5280r:2)[5280r,5312r:0)[5312r,5472r:1)  0@5280r 1@5312r 2@5248r weight:0.000000e+00
%154 [5328r,5376r:0)  0@5328r weight:0.000000e+00
%156 [5520r,5536r:0)  0@5520r weight:0.000000e+00
%157 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%161 [1280r,1328r:0)  0@1280r weight:0.000000e+00
%163 [1264r,1328r:0)  0@1264r weight:0.000000e+00
%165 [1328r,1360r:0)  0@1328r weight:0.000000e+00
%168 [1424r,1456r:0)[1456r,1472r:1)  0@1424r 1@1456r weight:0.000000e+00
%170 [1520r,1616r:0)  0@1520r weight:0.000000e+00
%172 [1504r,1552r:2)[1552r,1584r:0)[1584r,1600r:1)  0@1552r 1@1584r 2@1504r weight:0.000000e+00
%173 [1648r,1664r:0)  0@1648r weight:0.000000e+00
%175 [2512r,2744r:0)  0@2512r weight:0.000000e+00
%176 [2528r,2752r:0)  0@2528r weight:0.000000e+00
%177 [2544r,2760r:0)  0@2544r weight:0.000000e+00
%178 [2560r,2768r:0)  0@2560r weight:0.000000e+00
%179 [2576r,2776r:0)  0@2576r weight:0.000000e+00
%180 [2592r,2640r:0)  0@2592r weight:0.000000e+00
%183 [2800r,2808r:0)  0@2800r weight:0.000000e+00
%184 [2832r,2848r:0)  0@2832r weight:0.000000e+00
%186 [3664r,3680r:0)  0@3664r weight:0.000000e+00
%187 [2944r,2960r:0)  0@2944r weight:0.000000e+00
%192 [3024r,3056r:2)[3056r,3088r:0)[3088r,3120r:1)[3120r,3248r:3)  0@3056r 1@3088r 2@3024r 3@3120r weight:0.000000e+00
%194 [3136r,3432r:0)[3432r,3448r:1)  0@3136r 1@3432r weight:0.000000e+00
%197 [3168r,3184r:2)[3184r,3216r:0)[3216r,3248r:1)[3248r,3552r:3)  0@3184r 1@3216r 2@3168r 3@3248r weight:0.000000e+00
%199 [3264r,3412r:0)  0@3264r weight:0.000000e+00
%201 [3412r,3416r:0)[3416r,3552r:1)  0@3412r 1@3416r weight:0.000000e+00
%204 [3376r,3408r:2)[3408r,3448r:0)[3448r,3456r:1)  0@3408r 1@3448r 2@3376r weight:0.000000e+00
%206 [3456r,3488r:0)[3488r,3536r:1)  0@3456r 1@3488r weight:0.000000e+00
%207 [3504r,3520r:0)  0@3504r weight:0.000000e+00
%208 [3536r,3552r:0)  0@3536r weight:0.000000e+00
%209 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%213 [1888r,1904r:0)[1904r,2016r:1)  0@1888r 1@1904r weight:0.000000e+00
%217 [1952r,1984r:2)[1984r,2016r:0)[2016r,2032r:1)  0@1984r 1@2016r 2@1952r weight:0.000000e+00
%219 [2032r,2064r:0)[2064r,2440r:1)  0@2032r 1@2064r weight:0.000000e+00
%221 [368r,1024r:0)[1024r,9104B:1)  0@368r 1@1024r weight:0.000000e+00
%223 [2080r,2112r:2)[2112r,2144r:0)[2144r,2176r:1)[2176r,2272r:3)  0@2112r 1@2144r 2@2080r 3@2176r weight:0.000000e+00
%226 [1840r,2208r:2)[2208r,2240r:0)[2240r,2272r:1)[2272r,2424r:3)  0@2208r 1@2240r 2@1840r 3@2272r weight:0.000000e+00
%228 [2404r,2408r:0)[2408r,2424r:1)  0@2404r 1@2408r weight:0.000000e+00
%229 [2416r,2432r:0)  0@2416r weight:0.000000e+00
%230 [2424r,2440r:0)  0@2424r weight:0.000000e+00
%231 [2400r,2448r:0)  0@2400r weight:0.000000e+00
%232 [1872r,1904r:0)  0@1872r weight:0.000000e+00
%234 [1920r,2404r:0)  0@1920r weight:0.000000e+00
%235 [3424r,3432r:0)  0@3424r weight:0.000000e+00
%239 [7152r,7700r:0)  0@7152r weight:0.000000e+00
%240 [8672r,8704r:0)  0@8672r weight:0.000000e+00
RegMasks: 320r 768r 944r 2784r 3888r 4256r 4432r 5488r 5744r 6112r 6288r 8080r 9232r 9392r
********** MACHINEINSTRS **********
# Machine code for function fftXYZ: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %2, $esi in %3, $edx in %4, $ecx in %5, $r8 in %6, $r9 in %7

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $esi, $edx, $ecx, $r8, $r9
16B	  %7:gr64 = COPY $r9
32B	  %6:gr64 = COPY $r8
48B	  %5:gr32 = COPY $ecx
64B	  %4:gr32 = COPY $edx
80B	  undef %1.sub_32bit:gr64_with_sub_8bit = COPY $esi
96B	  %2:gr32 = COPY $edi
112B	  MOV32mr %stack.0.sign.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.sign.addr)
128B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.n1.addr)
144B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
160B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
176B	  MOV64mr %stack.4.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
192B	  MOV64mr %stack.5.xout.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.xout.addr)
208B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !88 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:151:9
224B	  JCC_1 %bb.2, 4, implicit $eflags, debug-location !90; fft3d.c:151:9
240B	  JMP_1 %bb.1, debug-location !90; fft3d.c:151:9

256B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !91; fft3d.c:152:9
304B	  $edi = MOV32ri 3, debug-location !91; fft3d.c:152:9
320B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !91; fft3d.c:152:9
336B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !91; fft3d.c:152:9

352B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

368B	  undef %221.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
400B	  %1.sub_32bit:gr64_with_sub_8bit = nsw INC32r %1.sub_32bit:gr64_with_sub_8bit(tied-def 0), implicit-def dead $eflags, debug-location !DILocation(line: 0, scope: !34); fft3d.c:0
448B	  $eax = MOV32ri 8192, debug-location !93; fft3d.c:154:26
464B	  $edx = MOV32r0 implicit-def dead $eflags, debug-location !93; fft3d.c:154:26
480B	  IDIV32m %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !93 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:154:26
488B	  %13:gr32 = COPY $eax, debug-location !93; fft3d.c:154:26
512B	  MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %13:gr32, debug-location !94 :: (store 4 into @fftblock); fft3d.c:154:14
528B	  CMP32ri8 %13:gr32, 32, implicit-def $eflags, debug-location !97; fft3d.c:155:18
544B	  JCC_1 %bb.4, 12, implicit $eflags, debug-location !98; fft3d.c:155:9
560B	  JMP_1 %bb.3, debug-location !98; fft3d.c:155:9

576B	bb.3.if.then3:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

592B	  MOV32mi $rip, 1, $noreg, @fftblock, $noreg, 32, debug-location !99 :: (store 4 into @fftblock); fft3d.c:156:18

608B	bb.4.if.end4:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

656B	  %16:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !101 :: (dereferenceable load 4 from @fftblock); fft3d.c:157:12
688B	  %16:gr32 = nsw INC32r %16:gr32(tied-def 0), implicit-def dead $eflags, debug-location !102; fft3d.c:157:21
704B	  MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %16:gr32, debug-location !103 :: (store 4 into %ir.blkp); fft3d.c:157:10
720B	  %17:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !104 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:158:17
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !105; fft3d.c:158:11
752B	  $edi = COPY %17:gr32, debug-location !105; fft3d.c:158:11
768B	  CALL64pcrel32 @ilog2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !105; fft3d.c:158:11
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !105; fft3d.c:158:11
800B	  %18:gr32 = COPY $eax, debug-location !105; fft3d.c:158:11
816B	  MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %18:gr32, debug-location !106 :: (store 4 into %ir.log); fft3d.c:158:9
832B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !107 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:159:9
848B	  JCC_1 %bb.6, 4, implicit $eflags, debug-location !109; fft3d.c:159:9
864B	  JMP_1 %bb.5, debug-location !109; fft3d.c:159:9

880B	bb.5.if.then7:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; fft3d.c:160:9
928B	  $edi = MOV32ri 7, debug-location !110; fft3d.c:160:9
944B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !110; fft3d.c:160:9
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !110; fft3d.c:160:9

976B	bb.6.if.end8:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

992B	  MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.k); fft3d.c:161:12
1024B	  %221:gr64_with_sub_8bit = nuw IMUL64rr %221:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

1056B	bb.7.for.cond:
	; predecessors: %bb.6, %bb.25
	  successors: %bb.8(0x7c000000), %bb.26(0x04000000); %bb.8(96.88%), %bb.26(3.12%)

1072B	  %20:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !114 :: (dereferenceable load 4 from %ir.k); fft3d.c:161:17
1088B	  CMP32rm %20:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !117 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:161:19
1104B	  JCC_1 %bb.26, 13, implicit $eflags, debug-location !118; fft3d.c:161:5
1120B	  JMP_1 %bb.8, debug-location !118; fft3d.c:161:5

1136B	bb.8.for.body:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1152B	  MOV32mi %stack.13.bls, 1, $noreg, 0, $noreg, 0, debug-location !119 :: (store 4 into %ir.bls); fft3d.c:162:18

1168B	bb.9.for.cond10:
	; predecessors: %bb.8, %bb.24
	  successors: %bb.10(0x7c000000), %bb.25(0x04000000); %bb.10(96.88%), %bb.25(3.12%)

1184B	  %157:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !123 :: (dereferenceable load 4 from %ir.bls); fft3d.c:162:23
1200B	  CMP32rm %157:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !126 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:162:27
1216B	  JCC_1 %bb.25, 13, implicit $eflags, debug-location !127; fft3d.c:162:9
1232B	  JMP_1 %bb.10, debug-location !127; fft3d.c:162:9

1248B	bb.10.for.body12:
	; predecessors: %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

1264B	  undef %163.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !128 :: (dereferenceable load 4 from %ir.bls); fft3d.c:163:19
1280B	  undef %161.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !130 :: (dereferenceable load 4 from @fftblock); fft3d.c:163:25
1328B	  %165:gr32 = LEA64_32r %163:gr64_with_sub_8bit, 1, %161:gr64_nosp, -1, $noreg, debug-location !132; fft3d.c:163:34
1344B	  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %165:gr32, debug-location !133 :: (store 4 into %ir.ble); fft3d.c:163:17
1360B	  CMP32rm %165:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:164:21
1376B	  JCC_1 %bb.12, 14, implicit $eflags, debug-location !138; fft3d.c:164:17
1392B	  JMP_1 %bb.11, debug-location !138; fft3d.c:164:17

1408B	bb.11.if.then15:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

1424B	  %168:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:165:23
1456B	  %168:gr32 = DEC32r %168:gr32(tied-def 0), implicit-def dead $eflags, debug-location !140; fft3d.c:165:26
1472B	  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %168:gr32, debug-location !141 :: (store 4 into %ir.ble); fft3d.c:165:21

1488B	bb.12.if.end17:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1504B	  %172:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !143 :: (dereferenceable load 4 from %ir.ble); fft3d.c:166:19
1520B	  %170:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !144 :: (dereferenceable load 4 from %ir.bls); fft3d.c:166:25
1552B	  %172:gr32 = nsw SUB32rr %172:gr32(tied-def 0), %170:gr32, implicit-def dead $eflags, debug-location !145; fft3d.c:166:23
1584B	  %172:gr32 = nsw INC32r %172:gr32(tied-def 0), implicit-def dead $eflags, debug-location !146; fft3d.c:166:29
1600B	  MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %172:gr32, debug-location !147 :: (store 4 into %ir.len); fft3d.c:166:17
1616B	  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %170:gr32, debug-location !150 :: (store 4 into %ir.j); fft3d.c:167:20

1632B	bb.13.for.cond20:
	; predecessors: %bb.12, %bb.17
	  successors: %bb.14(0x7c000000), %bb.18(0x04000000); %bb.14(96.88%), %bb.18(3.12%)

1648B	  %173:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !152 :: (dereferenceable load 4 from %ir.j); fft3d.c:167:27
1664B	  CMP32rm %173:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !155 :: (dereferenceable load 4 from %ir.ble); fft3d.c:167:29
1680B	  JCC_1 %bb.18, 15, implicit $eflags, debug-location !156; fft3d.c:167:13
1696B	  JMP_1 %bb.14, debug-location !156; fft3d.c:167:13

1712B	bb.14.for.body22:
	; predecessors: %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

1728B	  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !157 :: (store 4 into %ir.i); fft3d.c:168:24

1744B	bb.15.for.cond23:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

1760B	  %209:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 4 from %ir.i); fft3d.c:168:29
1776B	  CMP32rm %209:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !164 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:168:31
1792B	  JCC_1 %bb.17, 13, implicit $eflags, debug-location !165; fft3d.c:168:17
1808B	  JMP_1 %bb.16, debug-location !165; fft3d.c:168:17

1824B	bb.16.for.body25:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

1840B	  %226:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !166 :: (dereferenceable load 4 from %ir.j); fft3d.c:169:27
1872B	  %232:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
1888B	  %213:gr32 = COPY %226.sub_32bit:gr64_nosp, debug-location !169; fft3d.c:169:29
1904B	  %213:gr32 = SUB32rr %213:gr32(tied-def 0), %232:gr32, implicit-def dead $eflags, debug-location !169; fft3d.c:169:29
1920B	  %234:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !171 :: (dereferenceable load 4 from %ir.i); fft3d.c:169:44
1952B	  %217:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
1984B	  %217:gr32 = IMUL32rr %217:gr32(tied-def 0), %234.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !172; fft3d.c:169:42
2016B	  %217:gr32 = nsw ADD32rr %217:gr32(tied-def 0), %213:gr32, implicit-def dead $eflags, debug-location !173; fft3d.c:169:35
2032B	  %219:gr64 = MOVSX64rr32 %217:gr32, debug-location !174; fft3d.c:169:21
2064B	  %219:gr64 = SHL64ri %219:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !174; fft3d.c:169:21
2080B	  %223:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !176 :: (dereferenceable load 4 from %ir.k); fft3d.c:169:51
2112B	  %223:gr64 = nsw IMUL64rr %223:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
2144B	  %223:gr64 = SHL64ri %223:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
2176B	  %223:gr64 = ADD64rm %223:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !175 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:169:49
2208B	  %226:gr64_nosp = nsw IMUL64rr %226:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
2240B	  %226:gr64_nosp = SHL64ri %226:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
2272B	  %226:gr64_nosp = ADD64rr %226:gr64_nosp(tied-def 0), %223:gr64, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
2400B	  %231:gr32 = LEA64_32r %234:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !179; fft3d.c:168:38
2404B	  %228:gr64 = COPY %234:gr64_nosp, debug-location !175; fft3d.c:169:49
2408B	  %228:gr64 = SHL64ri %228:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !175; fft3d.c:169:49
2416B	  %229:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 0, $noreg, debug-location !175 :: (load 8 from %ir.50); fft3d.c:169:49
2424B	  %230:gr64 = MOV64rm %228:gr64, 1, %226:gr64_nosp, 8, $noreg, debug-location !175 :: (load 8 from %ir.50 + 8); fft3d.c:169:49
2432B	  MOV64mr %219:gr64, 1, $noreg, @plane, $noreg, %229:gr64, debug-location !175 :: (store 8 into %ir.49); fft3d.c:169:49
2440B	  MOV64mr %219:gr64, 1, $noreg, @plane + 8, $noreg, %230:gr64, debug-location !175 :: (store 8 into %ir.49 + 8); fft3d.c:169:49
2448B	  MOV32mr %stack.9.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !179 :: (store 4 into %ir.i); fft3d.c:168:38
2456B	  JMP_1 %bb.15, debug-location !180; fft3d.c:168:17

2464B	bb.17.for.end:
	; predecessors: %bb.15
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2472B	  INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !183 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:167:38
2480B	  JMP_1 %bb.13, debug-location !184; fft3d.c:167:13

2496B	bb.18.for.end37:
	; predecessors: %bb.13
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2512B	  %175:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !187 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:172:26
2528B	  %176:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 4 from %ir.log); fft3d.c:172:32
2544B	  %177:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !189 :: (dereferenceable load 4 from %ir.len); fft3d.c:172:37
2560B	  %178:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !190 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:172:42
2576B	  %179:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !191 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:172:46
2592B	  %180:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !192 :: (dereferenceable load 8 from %ir.exp1.addr, align 16); fft3d.c:172:59
2608B	  ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; fft3d.c:172:13
2640B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %180:gr64, debug-location !193 :: (store 8 into stack); fft3d.c:172:13
2736B	  $r9 = MOV32ri64 @plane, debug-location !193; fft3d.c:172:13
2744B	  $edi = COPY %175:gr32, debug-location !193; fft3d.c:172:13
2752B	  $esi = COPY %176:gr32, debug-location !193; fft3d.c:172:13
2760B	  $edx = COPY %177:gr32, debug-location !193; fft3d.c:172:13
2768B	  $ecx = COPY %178:gr32, debug-location !193; fft3d.c:172:13
2776B	  $r8d = COPY %179:gr32, debug-location !193; fft3d.c:172:13
2784B	  CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !193; fft3d.c:172:13
2792B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !193; fft3d.c:172:13
2800B	  %183:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !194 :: (dereferenceable load 4 from %ir.bls); fft3d.c:173:22
2808B	  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %183:gr32, debug-location !196 :: (store 4 into %ir.j); fft3d.c:173:20

2816B	bb.19.for.cond38:
	; predecessors: %bb.18, %bb.23
	  successors: %bb.20(0x7c000000), %bb.24(0x04000000); %bb.20(96.88%), %bb.24(3.12%)

2832B	  %184:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !198 :: (dereferenceable load 4 from %ir.j); fft3d.c:173:27
2848B	  CMP32rm %184:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !201 :: (dereferenceable load 4 from %ir.ble); fft3d.c:173:29
2864B	  JCC_1 %bb.24, 15, implicit $eflags, debug-location !202; fft3d.c:173:13
2880B	  JMP_1 %bb.20, debug-location !202; fft3d.c:173:13

2896B	bb.20.for.body40:
	; predecessors: %bb.19
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

2912B	  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !203 :: (store 4 into %ir.i); fft3d.c:174:24

2928B	bb.21.for.cond41:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

2944B	  %187:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !207 :: (dereferenceable load 4 from %ir.i); fft3d.c:174:29
2960B	  CMP32rm %187:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !210 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:174:31
2976B	  JCC_1 %bb.23, 13, implicit $eflags, debug-location !211; fft3d.c:174:17
2992B	  JMP_1 %bb.22, debug-location !211; fft3d.c:174:17

3008B	bb.22.for.body43:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3024B	  %192:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !214 :: (dereferenceable load 4 from %ir.k); fft3d.c:175:23
3056B	  %192:gr64 = nsw IMUL64rr %192:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
3088B	  %192:gr64 = SHL64ri %192:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
3120B	  %192:gr64 = ADD64rm %192:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !212 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:175:21
3136B	  %194:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !215 :: (dereferenceable load 4 from %ir.j); fft3d.c:175:26
3168B	  %197:gr64_nosp = COPY %194:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
3184B	  %197:gr64_nosp = nsw IMUL64rr %197:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
3216B	  %197:gr64_nosp = SHL64ri %197:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
3248B	  %197:gr64_nosp = ADD64rr %197:gr64_nosp(tied-def 0), %192:gr64, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
3264B	  %199:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !216 :: (dereferenceable load 4 from %ir.i); fft3d.c:175:29
3376B	  %204:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
3408B	  %204:gr32 = IMUL32rr %204:gr32(tied-def 0), %199.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !222; fft3d.c:175:55
3412B	  %201:gr64 = COPY %199:gr64_with_sub_8bit, debug-location !212; fft3d.c:175:21
3416B	  %201:gr64 = SHL64ri %201:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !212; fft3d.c:175:21
3424B	  %235:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
3432B	  %194.sub_32bit:gr64_with_sub_8bit = SUB32rr %194.sub_32bit:gr64_with_sub_8bit(tied-def 0), %235:gr32, implicit-def dead $eflags, debug-location !219; fft3d.c:175:42
3448B	  %204:gr32 = nsw ADD32rr %204:gr32(tied-def 0), %194.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !223; fft3d.c:175:48
3456B	  %206:gr64 = MOVSX64rr32 %204:gr32, debug-location !224; fft3d.c:175:34
3488B	  %206:gr64 = SHL64ri %206:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !224; fft3d.c:175:34
3504B	  %207:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane, $noreg, debug-location !224 :: (load 8 from %ir.76); fft3d.c:175:34
3520B	  MOV64mr %201:gr64, 1, %197:gr64_nosp, 0, $noreg, %207:gr64, debug-location !224 :: (store 8 into %ir.75); fft3d.c:175:34
3536B	  %208:gr64 = MOV64rm %206:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !224 :: (load 8 from %ir.76 + 8); fft3d.c:175:34
3552B	  MOV64mr %201:gr64, 1, %197:gr64_nosp, 8, $noreg, %208:gr64, debug-location !224 :: (store 8 into %ir.75 + 8); fft3d.c:175:34
3568B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !225 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:174:38
3584B	  JMP_1 %bb.21, debug-location !226; fft3d.c:174:17

3600B	bb.23.for.end57:
	; predecessors: %bb.21
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

3616B	  INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !229 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:173:38
3632B	  JMP_1 %bb.19, debug-location !230; fft3d.c:173:13

3648B	bb.24.for.end60:
	; predecessors: %bb.19
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

3664B	  %186:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !233 :: (dereferenceable load 4 from @fftblock); fft3d.c:162:40
3680B	  ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %186:gr32, implicit-def dead $eflags, debug-location !234 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:162:37
3696B	  JMP_1 %bb.9, debug-location !235; fft3d.c:162:9

3712B	bb.25.for.end63:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

3728B	  INC32m %stack.11.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !238 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:161:26
3744B	  JMP_1 %bb.7, debug-location !239; fft3d.c:161:5

3760B	bb.26.for.end66:
	; predecessors: %bb.7
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

3776B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !242 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:180:9
3792B	  JCC_1 %bb.28, 4, implicit $eflags, debug-location !244; fft3d.c:180:9
3808B	  JMP_1 %bb.27, debug-location !244; fft3d.c:180:9

3824B	bb.27.if.then68:
	; predecessors: %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

3840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !245; fft3d.c:181:9
3872B	  $edi = MOV32ri 7, debug-location !245; fft3d.c:181:9
3888B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !245; fft3d.c:181:9
3904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !245; fft3d.c:181:9

3920B	bb.28.if.end69:
	; predecessors: %bb.26, %bb.27
	  successors: %bb.29(0x40000000), %bb.30(0x40000000); %bb.29(50.00%), %bb.30(50.00%)

3968B	  $eax = MOV32ri 8192, debug-location !247; fft3d.c:183:26
3984B	  $edx = MOV32r0 implicit-def dead $eflags, debug-location !247; fft3d.c:183:26
4000B	  IDIV32m %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !247 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:183:26
4008B	  %25:gr32 = COPY $eax, debug-location !247; fft3d.c:183:26
4032B	  MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %25:gr32, debug-location !248 :: (store 4 into @fftblock); fft3d.c:183:14
4048B	  CMP32ri8 %25:gr32, 32, implicit-def $eflags, debug-location !251; fft3d.c:184:18
4064B	  JCC_1 %bb.30, 12, implicit $eflags, debug-location !252; fft3d.c:184:9
4080B	  JMP_1 %bb.29, debug-location !252; fft3d.c:184:9

4096B	bb.29.if.then72:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4112B	  MOV32mi $rip, 1, $noreg, @fftblock, $noreg, 32, debug-location !253 :: (store 4 into @fftblock); fft3d.c:185:18

4128B	bb.30.if.end73:
	; predecessors: %bb.28, %bb.29
	  successors: %bb.31(0x50000000), %bb.32(0x30000000); %bb.31(62.50%), %bb.32(37.50%)

4144B	  %28:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !255 :: (dereferenceable load 4 from @fftblock); fft3d.c:186:12
4176B	  %28:gr32 = nsw INC32r %28:gr32(tied-def 0), implicit-def dead $eflags, debug-location !256; fft3d.c:186:21
4192B	  MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %28:gr32, debug-location !257 :: (store 4 into %ir.blkp); fft3d.c:186:10
4208B	  %29:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !258 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:187:17
4224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; fft3d.c:187:11
4240B	  $edi = COPY %29:gr32, debug-location !259; fft3d.c:187:11
4256B	  CALL64pcrel32 @ilog2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !259; fft3d.c:187:11
4272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; fft3d.c:187:11
4288B	  %30:gr32 = COPY $eax, debug-location !259; fft3d.c:187:11
4304B	  MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %30:gr32, debug-location !260 :: (store 4 into %ir.log); fft3d.c:187:9
4320B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !261 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:188:9
4336B	  JCC_1 %bb.32, 4, implicit $eflags, debug-location !263; fft3d.c:188:9
4352B	  JMP_1 %bb.31, debug-location !263; fft3d.c:188:9

4368B	bb.31.if.then77:
	; predecessors: %bb.30
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

4384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; fft3d.c:189:9
4416B	  $edi = MOV32ri 8, debug-location !264; fft3d.c:189:9
4432B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !264; fft3d.c:189:9
4448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; fft3d.c:189:9

4464B	bb.32.if.end78:
	; predecessors: %bb.30, %bb.31
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

4480B	  MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !265 :: (store 4 into %ir.k); fft3d.c:190:12

4496B	bb.33.for.cond79:
	; predecessors: %bb.32, %bb.39
	  successors: %bb.34(0x7c000000), %bb.40(0x04000000); %bb.34(96.88%), %bb.40(3.12%)

4512B	  %32:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); fft3d.c:190:17
4528B	  CMP32rm %32:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !271 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:190:19
4544B	  JCC_1 %bb.40, 13, implicit $eflags, debug-location !272; fft3d.c:190:5
4560B	  JMP_1 %bb.34, debug-location !272; fft3d.c:190:5

4576B	bb.34.for.body81:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

4592B	  MOV32mi %stack.13.bls, 1, $noreg, 0, $noreg, 0, debug-location !273 :: (store 4 into %ir.bls); fft3d.c:191:18

4608B	bb.35.for.cond82:
	; predecessors: %bb.34, %bb.38
	  successors: %bb.36(0x7c000000), %bb.39(0x04000000); %bb.36(96.88%), %bb.39(3.12%)

4624B	  %126:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !277 :: (dereferenceable load 4 from %ir.bls); fft3d.c:191:23
4640B	  CMP32rm %126:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !280 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:191:27
4656B	  JCC_1 %bb.39, 13, implicit $eflags, debug-location !281; fft3d.c:191:9
4672B	  JMP_1 %bb.36, debug-location !281; fft3d.c:191:9

4688B	bb.36.for.body84:
	; predecessors: %bb.35
	  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

4704B	  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !282 :: (dereferenceable load 4 from %ir.bls); fft3d.c:192:19
4720B	  undef %130.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !284 :: (dereferenceable load 4 from @fftblock); fft3d.c:192:25
4768B	  %134:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %130:gr64_nosp, -1, $noreg, debug-location !286; fft3d.c:192:34
4784B	  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %134:gr32, debug-location !287 :: (store 4 into %ir.ble); fft3d.c:192:17
4800B	  CMP32rm %134:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !291 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:193:21
4816B	  JCC_1 %bb.38, 14, implicit $eflags, debug-location !292; fft3d.c:193:17
4832B	  JMP_1 %bb.37, debug-location !292; fft3d.c:193:17

4848B	bb.37.if.then88:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

4864B	  %137:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !293 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:194:23
4896B	  %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags, debug-location !294; fft3d.c:194:26
4912B	  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %137:gr32, debug-location !295 :: (store 4 into %ir.ble); fft3d.c:194:21

4928B	bb.38.if.end90:
	; predecessors: %bb.36, %bb.37
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

4944B	  %140:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !297 :: (dereferenceable load 4 from %ir.ble); fft3d.c:195:19
4976B	  %140:gr32 = nsw SUB32rm %140:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !299 :: (dereferenceable load 4 from %ir.bls); fft3d.c:195:23
5008B	  %140:gr32 = nsw INC32r %140:gr32(tied-def 0), implicit-def dead $eflags, debug-location !300; fft3d.c:195:29
5024B	  MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %140:gr32, debug-location !301 :: (store 4 into %ir.len); fft3d.c:195:17
5040B	  %141:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !302 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:196:26
5056B	  %142:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !303 :: (dereferenceable load 4 from %ir.log); fft3d.c:196:32
5072B	  %143:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !305 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:196:42
5088B	  %145:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:196:46
5120B	  %145:gr32 = nsw INC32r %145:gr32(tied-def 0), implicit-def dead $eflags, debug-location !307; fft3d.c:196:49
5136B	  %149:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !309 :: (dereferenceable load 4 from %ir.k); fft3d.c:196:57
5168B	  %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
5200B	  %149:gr64 = SHL64ri %149:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
5232B	  %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !308 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:196:55
5248B	  %153:gr64 = MOVSX64rm32 %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !310 :: (dereferenceable load 4 from %ir.bls); fft3d.c:196:63
5280B	  %153:gr64 = SHL64ri %153:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
5312B	  %153:gr64 = ADD64rr %153:gr64(tied-def 0), %149:gr64, implicit-def dead $eflags, debug-location !308; fft3d.c:196:55
5328B	  %154:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !312 :: (dereferenceable load 8 from %ir.exp2.addr); fft3d.c:196:69
5344B	  ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; fft3d.c:196:13
5376B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %154:gr64, debug-location !313 :: (store 8 into stack); fft3d.c:196:13
5392B	  $edi = COPY %141:gr32, debug-location !313; fft3d.c:196:13
5408B	  $esi = COPY %142:gr32, debug-location !313; fft3d.c:196:13
5424B	  $edx = COPY %140:gr32, debug-location !313; fft3d.c:196:13
5440B	  $ecx = COPY %143:gr32, debug-location !313; fft3d.c:196:13
5456B	  $r8d = COPY %145:gr32, debug-location !313; fft3d.c:196:13
5472B	  $r9 = COPY %153:gr64, debug-location !313; fft3d.c:196:13
5488B	  CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !313; fft3d.c:196:13
5504B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; fft3d.c:196:13
5520B	  %156:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !314 :: (dereferenceable load 4 from @fftblock); fft3d.c:191:40
5536B	  ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %156:gr32, implicit-def dead $eflags, debug-location !315 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:191:37
5552B	  JMP_1 %bb.35, debug-location !316; fft3d.c:191:9

5568B	bb.39.for.end101:
	; predecessors: %bb.35
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

5584B	  INC32m %stack.11.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !319 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:190:26
5600B	  JMP_1 %bb.33, debug-location !320; fft3d.c:190:5

5616B	bb.40.for.end104:
	; predecessors: %bb.33
	  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)

5632B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !323 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:199:9
5648B	  JCC_1 %bb.42, 4, implicit $eflags, debug-location !325; fft3d.c:199:9
5664B	  JMP_1 %bb.41, debug-location !325; fft3d.c:199:9

5680B	bb.41.if.then106:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

5696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !326; fft3d.c:200:9
5728B	  $edi = MOV32ri 8, debug-location !326; fft3d.c:200:9
5744B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !326; fft3d.c:200:9
5760B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !326; fft3d.c:200:9

5776B	bb.42.if.end107:
	; predecessors: %bb.40, %bb.41
	  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

5824B	  $eax = MOV32ri 8192, debug-location !328; fft3d.c:202:26
5840B	  $edx = MOV32r0 implicit-def dead $eflags, debug-location !328; fft3d.c:202:26
5856B	  IDIV32m %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx, debug-location !328 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:202:26
5864B	  %37:gr32 = COPY $eax, debug-location !328; fft3d.c:202:26
5888B	  MOV32mr $rip, 1, $noreg, @fftblock, $noreg, %37:gr32, debug-location !329 :: (store 4 into @fftblock); fft3d.c:202:14
5904B	  CMP32ri8 %37:gr32, 32, implicit-def $eflags, debug-location !332; fft3d.c:203:18
5920B	  JCC_1 %bb.44, 12, implicit $eflags, debug-location !333; fft3d.c:203:9
5936B	  JMP_1 %bb.43, debug-location !333; fft3d.c:203:9

5952B	bb.43.if.then110:
	; predecessors: %bb.42
	  successors: %bb.44(0x80000000); %bb.44(100.00%)

5968B	  MOV32mi $rip, 1, $noreg, @fftblock, $noreg, 32, debug-location !334 :: (store 4 into @fftblock); fft3d.c:204:18

5984B	bb.44.if.end111:
	; predecessors: %bb.42, %bb.43
	  successors: %bb.45(0x50000000), %bb.46(0x30000000); %bb.45(62.50%), %bb.46(37.50%)

6000B	  %40:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !336 :: (dereferenceable load 4 from @fftblock); fft3d.c:205:12
6032B	  %40:gr32 = nsw INC32r %40:gr32(tied-def 0), implicit-def dead $eflags, debug-location !337; fft3d.c:205:21
6048B	  MOV32mr %stack.16.blkp, 1, $noreg, 0, $noreg, %40:gr32, debug-location !338 :: (store 4 into %ir.blkp); fft3d.c:205:10
6064B	  %41:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !339 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:206:17
6080B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !340; fft3d.c:206:11
6096B	  $edi = COPY %41:gr32, debug-location !340; fft3d.c:206:11
6112B	  CALL64pcrel32 @ilog2, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !340; fft3d.c:206:11
6128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !340; fft3d.c:206:11
6144B	  %42:gr32 = COPY $eax, debug-location !340; fft3d.c:206:11
6160B	  MOV32mr %stack.12.log, 1, $noreg, 0, $noreg, %42:gr32, debug-location !341 :: (store 4 into %ir.log); fft3d.c:206:9
6176B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !342 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:207:9
6192B	  JCC_1 %bb.46, 4, implicit $eflags, debug-location !344; fft3d.c:207:9
6208B	  JMP_1 %bb.45, debug-location !344; fft3d.c:207:9

6224B	bb.45.if.then115:
	; predecessors: %bb.44
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

6240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !345; fft3d.c:208:9
6272B	  $edi = MOV32ri 9, debug-location !345; fft3d.c:208:9
6288B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !345; fft3d.c:208:9
6304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !345; fft3d.c:208:9

6320B	bb.46.if.end116:
	; predecessors: %bb.44, %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

6336B	  MOV32mi %stack.11.k, 1, $noreg, 0, $noreg, 0, debug-location !346 :: (store 4 into %ir.k); fft3d.c:209:12

6368B	bb.47.for.cond117:
	; predecessors: %bb.46, %bb.65
	  successors: %bb.48(0x7c000000), %bb.66(0x04000000); %bb.48(96.88%), %bb.66(3.12%)

6384B	  %44:gr32 = MOV32rm %stack.11.k, 1, $noreg, 0, $noreg, debug-location !349 :: (dereferenceable load 4 from %ir.k); fft3d.c:209:17
6400B	  CMP32rm %44:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !352 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:209:19
6416B	  JCC_1 %bb.66, 13, implicit $eflags, debug-location !353; fft3d.c:209:5
6432B	  JMP_1 %bb.48, debug-location !353; fft3d.c:209:5

6448B	bb.48.for.body119:
	; predecessors: %bb.47
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

6464B	  MOV32mi %stack.13.bls, 1, $noreg, 0, $noreg, 0, debug-location !354 :: (store 4 into %ir.bls); fft3d.c:210:18

6480B	bb.49.for.cond120:
	; predecessors: %bb.48, %bb.64
	  successors: %bb.50(0x7c000000), %bb.65(0x04000000); %bb.50(96.88%), %bb.65(3.12%)

6496B	  %48:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 4 from %ir.bls); fft3d.c:210:23
6512B	  CMP32rm %48:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !361 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:210:27
6528B	  JCC_1 %bb.65, 13, implicit $eflags, debug-location !362; fft3d.c:210:9
6544B	  JMP_1 %bb.50, debug-location !362; fft3d.c:210:9

6560B	bb.50.for.body122:
	; predecessors: %bb.49
	  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

6576B	  undef %54.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !363 :: (dereferenceable load 4 from %ir.bls); fft3d.c:211:19
6592B	  undef %52.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !365 :: (dereferenceable load 4 from @fftblock); fft3d.c:211:25
6640B	  %56:gr32 = LEA64_32r %54:gr64_with_sub_8bit, 1, %52:gr64_nosp, -1, $noreg, debug-location !367; fft3d.c:211:34
6656B	  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %56:gr32, debug-location !368 :: (store 4 into %ir.ble); fft3d.c:211:17
6672B	  CMP32rm %56:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !372 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:212:21
6688B	  JCC_1 %bb.52, 14, implicit $eflags, debug-location !373; fft3d.c:212:17
6704B	  JMP_1 %bb.51, debug-location !373; fft3d.c:212:17

6720B	bb.51.if.then126:
	; predecessors: %bb.50
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

6736B	  %59:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !374 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:213:23
6768B	  %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags, debug-location !375; fft3d.c:213:26
6784B	  MOV32mr %stack.14.ble, 1, $noreg, 0, $noreg, %59:gr32, debug-location !376 :: (store 4 into %ir.ble); fft3d.c:213:21

6800B	bb.52.if.end128:
	; predecessors: %bb.50, %bb.51
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

6816B	  %62:gr32 = MOV32rm %stack.14.ble, 1, $noreg, 0, $noreg, debug-location !378 :: (dereferenceable load 4 from %ir.ble); fft3d.c:214:19
6848B	  %62:gr32 = nsw SUB32rm %62:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !380 :: (dereferenceable load 4 from %ir.bls); fft3d.c:214:23
6880B	  %62:gr32 = nsw INC32r %62:gr32(tied-def 0), implicit-def dead $eflags, debug-location !381; fft3d.c:214:29
6896B	  MOV32mr %stack.15.len, 1, $noreg, 0, $noreg, %62:gr32, debug-location !382 :: (store 4 into %ir.len); fft3d.c:214:17
6912B	  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); fft3d.c:215:20

6928B	bb.53.for.cond131:
	; predecessors: %bb.52, %bb.57
	  successors: %bb.54(0x7c000000), %bb.58(0x04000000); %bb.54(96.88%), %bb.58(3.12%)

6944B	  %63:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg, debug-location !386 :: (dereferenceable load 4 from %ir.i); fft3d.c:215:25
6960B	  CMP32rm %63:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !389 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:215:27
6976B	  JCC_1 %bb.58, 13, implicit $eflags, debug-location !390; fft3d.c:215:13
6992B	  JMP_1 %bb.54, debug-location !390; fft3d.c:215:13

7008B	bb.54.for.body133:
	; predecessors: %bb.53
	  successors: %bb.55(0x80000000); %bb.55(100.00%)

7024B	  %102:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 4 from %ir.bls); fft3d.c:216:26
7040B	  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %102:gr32, debug-location !394 :: (store 4 into %ir.j); fft3d.c:216:24

7056B	bb.55.for.cond134:
	; predecessors: %bb.54, %bb.56
	  successors: %bb.56(0x7c000000), %bb.57(0x04000000); %bb.56(96.88%), %bb.57(3.12%)

7072B	  %103:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !396 :: (dereferenceable load 4 from %ir.j); fft3d.c:216:31
7088B	  CMP32rm %103:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !399 :: (dereferenceable load 4 from %ir.ble); fft3d.c:216:33
7104B	  JCC_1 %bb.57, 15, implicit $eflags, debug-location !400; fft3d.c:216:17
7120B	  JMP_1 %bb.56, debug-location !400; fft3d.c:216:17

7136B	bb.56.for.body136:
	; predecessors: %bb.55
	  successors: %bb.55(0x80000000); %bb.55(100.00%)

7152B	  %239:gr64_nosp = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !401 :: (dereferenceable load 4 from %ir.j); fft3d.c:217:27
7584B	  %122:gr64 = COPY %239:gr64_nosp, debug-location !410; fft3d.c:217:49
7696B	  %125:gr32 = LEA64_32r %239:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !414; fft3d.c:216:42
7700B	  %107:gr32 = COPY %239.sub_32bit:gr64_nosp, debug-location !404; fft3d.c:217:29
7704B	  %107:gr32 = nsw SUB32rm %107:gr32(tied-def 0), %stack.13.bls, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from %ir.bls); fft3d.c:217:29
7712B	  %116:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 4 from %ir.i); fft3d.c:217:44
7720B	  %111:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
7728B	  %111:gr32 = IMUL32rr %111:gr32(tied-def 0), %116.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !407; fft3d.c:217:42
7736B	  %111:gr32 = nsw ADD32rr %111:gr32(tied-def 0), %107:gr32, implicit-def dead $eflags, debug-location !408; fft3d.c:217:35
7744B	  %113:gr64 = MOVSX64rr32 %111:gr32, debug-location !409; fft3d.c:217:21
7752B	  %113:gr64 = SHL64ri %113:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !409; fft3d.c:217:21
7760B	  %116:gr64_with_sub_8bit = nsw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %221:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
7768B	  %116:gr64_with_sub_8bit = SHL64ri %116:gr64_with_sub_8bit(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
7776B	  %116:gr64_with_sub_8bit = ADD64rm %116:gr64_with_sub_8bit(tied-def 0), %stack.4.x.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !410 :: (dereferenceable load 8 from %ir.x.addr); fft3d.c:217:49
7784B	  %120:gr64_nosp = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 4 from %ir.k); fft3d.c:217:54
7792B	  %120:gr64_nosp = nsw IMUL64rr %120:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
7800B	  %120:gr64_nosp = SHL64ri %120:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
7808B	  %120:gr64_nosp = ADD64rr %120:gr64_nosp(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
7816B	  %122:gr64 = SHL64ri %122:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !410; fft3d.c:217:49
7824B	  %123:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 0, $noreg, debug-location !410 :: (load 8 from %ir.149); fft3d.c:217:49
7832B	  %124:gr64 = MOV64rm %122:gr64, 1, %120:gr64_nosp, 8, $noreg, debug-location !410 :: (load 8 from %ir.149 + 8); fft3d.c:217:49
7840B	  MOV64mr %113:gr64, 1, $noreg, @plane, $noreg, %123:gr64, debug-location !410 :: (store 8 into %ir.148); fft3d.c:217:49
7848B	  MOV64mr %113:gr64, 1, $noreg, @plane + 8, $noreg, %124:gr64, debug-location !410 :: (store 8 into %ir.148 + 8); fft3d.c:217:49
7856B	  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !414 :: (store 4 into %ir.j); fft3d.c:216:42
7864B	  JMP_1 %bb.55, debug-location !415; fft3d.c:216:17

7872B	bb.57.for.end150:
	; predecessors: %bb.55
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

7880B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !418 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:215:34
7888B	  JMP_1 %bb.53, debug-location !419; fft3d.c:215:13

7896B	bb.58.for.end153:
	; predecessors: %bb.53
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

7904B	  %65:gr32 = MOV32rm %stack.0.sign.addr, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.sign.addr); fft3d.c:220:26
7912B	  %66:gr32 = MOV32rm %stack.12.log, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 4 from %ir.log); fft3d.c:220:32
7920B	  %67:gr32 = MOV32rm %stack.15.len, 1, $noreg, 0, $noreg, debug-location !424 :: (dereferenceable load 4 from %ir.len); fft3d.c:220:37
7928B	  %68:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !425 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:220:42
7936B	  %69:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg, debug-location !426 :: (dereferenceable load 4 from %ir.blkp); fft3d.c:220:46
7944B	  %70:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !427 :: (dereferenceable load 8 from %ir.exp3.addr, align 16); fft3d.c:220:59
7952B	  ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !428; fft3d.c:220:13
7968B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %70:gr64, debug-location !428 :: (store 8 into stack); fft3d.c:220:13
8032B	  $r9 = MOV32ri64 @plane, debug-location !428; fft3d.c:220:13
8040B	  $edi = COPY %65:gr32, debug-location !428; fft3d.c:220:13
8048B	  $esi = COPY %66:gr32, debug-location !428; fft3d.c:220:13
8056B	  $edx = COPY %67:gr32, debug-location !428; fft3d.c:220:13
8064B	  $ecx = COPY %68:gr32, debug-location !428; fft3d.c:220:13
8072B	  $r8d = COPY %69:gr32, debug-location !428; fft3d.c:220:13
8080B	  CALL64pcrel32 @Swarztrauber, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp, debug-location !428; fft3d.c:220:13
8088B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !428; fft3d.c:220:13
8096B	  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 0, debug-location !429 :: (store 4 into %ir.i); fft3d.c:221:20

8104B	bb.59.for.cond154:
	; predecessors: %bb.58, %bb.63
	  successors: %bb.60(0x7c000000), %bb.64(0x04000000); %bb.60(96.88%), %bb.64(3.12%)

8112B	  %75:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 4 from %ir.n3.addr); fft3d.c:221:30
8144B	  %75:gr32 = DEC32r %75:gr32(tied-def 0), implicit-def dead $eflags, debug-location !435; fft3d.c:221:33
8160B	  CMP32mr %stack.9.i, 1, $noreg, 0, $noreg, %75:gr32, implicit-def $eflags, debug-location !436 :: (dereferenceable load 4 from %ir.i); fft3d.c:221:27
8176B	  JCC_1 %bb.64, 15, implicit $eflags, debug-location !437; fft3d.c:221:13
8192B	  JMP_1 %bb.60, debug-location !437; fft3d.c:221:13

8208B	bb.60.for.body157:
	; predecessors: %bb.59
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

8224B	  %78:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 4 from %ir.bls); fft3d.c:222:26
8240B	  MOV32mr %stack.10.j, 1, $noreg, 0, $noreg, %78:gr32, debug-location !441 :: (store 4 into %ir.j); fft3d.c:222:24

8256B	bb.61.for.cond158:
	; predecessors: %bb.60, %bb.62
	  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

8272B	  %79:gr32 = MOV32rm %stack.10.j, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.j); fft3d.c:222:31
8288B	  CMP32rm %79:gr32, %stack.14.ble, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !446 :: (dereferenceable load 4 from %ir.ble); fft3d.c:222:33
8304B	  JCC_1 %bb.63, 15, implicit $eflags, debug-location !447; fft3d.c:222:17
8320B	  JMP_1 %bb.62, debug-location !447; fft3d.c:222:17

8336B	bb.62.for.body160:
	; predecessors: %bb.61
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

8352B	  %81:gr64 = MOV64rm %stack.5.xout.addr, 1, $noreg, 0, $noreg, debug-location !448 :: (dereferenceable load 8 from %ir.xout.addr); fft3d.c:223:21
8368B	  %82:gr64_with_sub_8bit = MOVSX64rm32 %stack.10.j, 1, $noreg, 0, $noreg, debug-location !450 :: (dereferenceable load 4 from %ir.j); fft3d.c:223:26
8400B	  %85:gr64 = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg, debug-location !451 :: (dereferenceable load 4 from %ir.n1.addr); fft3d.c:223:31
8432B	  %85:gr64 = nsw INC64r %85:gr64(tied-def 0), implicit-def dead $eflags, debug-location !452; fft3d.c:223:34
8448B	  %86:gr64 = MOVSX64rm32 %stack.11.k, 1, $noreg, 0, $noreg, debug-location !453 :: (dereferenceable load 4 from %ir.k); fft3d.c:223:42
8464B	  %91:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg, debug-location !454 :: (dereferenceable load 4 from %ir.n2.addr); fft3d.c:223:46
8480B	  %88:gr64_with_sub_8bit = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg, debug-location !455 :: (dereferenceable load 4 from %ir.i); fft3d.c:223:51
8528B	  %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %88:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !456; fft3d.c:223:49
8560B	  %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %86:gr64, implicit-def dead $eflags, debug-location !457; fft3d.c:223:44
8592B	  %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %85:gr64, implicit-def dead $eflags, debug-location !458; fft3d.c:223:39
8624B	  %91:gr64_nosp = nsw ADD64rr %91:gr64_nosp(tied-def 0), %82:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !459; fft3d.c:223:28
8656B	  %91:gr64_nosp = SHL64ri %91:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !448; fft3d.c:223:21
8672B	  %240:gr32 = MOV32rm %stack.13.bls, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.bls)
8704B	  %82.sub_32bit:gr64_with_sub_8bit = SUB32rr %82.sub_32bit:gr64_with_sub_8bit(tied-def 0), %240:gr32, implicit-def dead $eflags, debug-location !462; fft3d.c:224:33
8720B	  %97:gr32 = MOV32rm %stack.16.blkp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.blkp)
8752B	  %97:gr32 = IMUL32rr %97:gr32(tied-def 0), %88.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !465; fft3d.c:224:46
8784B	  %97:gr32 = nsw ADD32rr %97:gr32(tied-def 0), %82.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !466; fft3d.c:224:39
8800B	  %99:gr64 = MOVSX64rr32 %97:gr32, debug-location !467; fft3d.c:224:25
8832B	  %99:gr64 = SHL64ri %99:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !467; fft3d.c:224:25
8848B	  %100:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane, $noreg, debug-location !467 :: (load 8 from %ir.174); fft3d.c:224:25
8864B	  MOV64mr %81:gr64, 1, %91:gr64_nosp, 0, $noreg, %100:gr64, debug-location !467 :: (store 8 into %ir.173); fft3d.c:224:25
8880B	  %101:gr64 = MOV64rm %99:gr64, 1, $noreg, @plane + 8, $noreg, debug-location !467 :: (load 8 from %ir.174 + 8); fft3d.c:224:25
8896B	  MOV64mr %81:gr64, 1, %91:gr64_nosp, 8, $noreg, %101:gr64, debug-location !467 :: (store 8 into %ir.173 + 8); fft3d.c:224:25
8912B	  INC32m %stack.10.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !468 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:222:42
8928B	  JMP_1 %bb.61, debug-location !469; fft3d.c:222:17

8944B	bb.63.for.end175:
	; predecessors: %bb.61
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

8960B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !472 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:221:39
8976B	  JMP_1 %bb.59, debug-location !473; fft3d.c:221:13

8992B	bb.64.for.end178:
	; predecessors: %bb.59
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

9008B	  %77:gr32 = MOV32rm $rip, 1, $noreg, @fftblock, $noreg, debug-location !476 :: (dereferenceable load 4 from @fftblock); fft3d.c:210:40
9024B	  ADD32mr %stack.13.bls, 1, $noreg, 0, $noreg, %77:gr32, implicit-def dead $eflags, debug-location !477 :: (store 4 into %ir.bls), (dereferenceable load 4 from %ir.bls); fft3d.c:210:37
9040B	  JMP_1 %bb.49, debug-location !478; fft3d.c:210:9

9056B	bb.65.for.end181:
	; predecessors: %bb.49
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

9072B	  INC32m %stack.11.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !481 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:209:26
9088B	  JMP_1 %bb.47, debug-location !482; fft3d.c:209:5

9104B	bb.66.for.end184:
	; predecessors: %bb.47
	  successors: %bb.67(0x50000000), %bb.68(0x30000000); %bb.67(62.50%), %bb.68(37.50%)

9120B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !485 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:229:9
9136B	  JCC_1 %bb.68, 4, implicit $eflags, debug-location !487; fft3d.c:229:9
9152B	  JMP_1 %bb.67, debug-location !487; fft3d.c:229:9

9168B	bb.67.if.then186:
	; predecessors: %bb.66
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

9184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !488; fft3d.c:230:9
9216B	  $edi = MOV32ri 9, debug-location !488; fft3d.c:230:9
9232B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !488; fft3d.c:230:9
9248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !488; fft3d.c:230:9

9264B	bb.68.if.end187:
	; predecessors: %bb.66, %bb.67
	  successors: %bb.69(0x50000000), %bb.70(0x30000000); %bb.69(62.50%), %bb.70(37.50%)

9280B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !489 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:231:9
9296B	  JCC_1 %bb.70, 4, implicit $eflags, debug-location !491; fft3d.c:231:9
9312B	  JMP_1 %bb.69, debug-location !491; fft3d.c:231:9

9328B	bb.69.if.then189:
	; predecessors: %bb.68
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

9344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !492; fft3d.c:232:9
9376B	  $edi = MOV32ri 3, debug-location !492; fft3d.c:232:9
9392B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !492; fft3d.c:232:9
9408B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !492; fft3d.c:232:9

9424B	bb.70.if.end190:
	; predecessors: %bb.68, %bb.69

9440B	  RET 0, debug-location !493; fft3d.c:233:1

# End machine code for function fftXYZ.

Before MISched:
# Machine code for function Swarztrauber: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=16, align=8, at location [SP+8]
  fi#12: size=16, align=8, at location [SP+8]
  fi#13: size=16, align=8, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=16, align=8, at location [SP+8]
  fi#25: size=16, align=8, at location [SP+8]
  fi#26: size=16, align=8, at location [SP+8]
  fi#27: size=16, align=8, at location [SP+8]
  fi#28: size=16, align=8, at location [SP+8]
  fi#29: size=16, align=8, at location [SP+8]
  fi#30: size=16, align=8, at location [SP+8]
  fi#31: size=16, align=8, at location [SP+8]
  fi#32: size=16, align=8, at location [SP+8]
  fi#33: size=16, align=8, at location [SP+8]
  fi#34: size=16, align=8, at location [SP+8]
  fi#35: size=16, align=8, at location [SP+8]
  fi#36: size=16, align=8, at location [SP+8]
  fi#37: size=16, align=8, at location [SP+8]
Constant Pool:
  cp#0: <double -0.000000e+00, double -0.000000e+00>, align=16
Function Live Ins: $edi in %1, $esi in %2, $edx in %3, $ecx in %4, $r8d in %5, $r9 in %6

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $esi, $edx, $ecx, $r8d, $r9
  %6:gr64 = COPY $r9
  %5:gr32 = COPY $r8d
  %4:gr32 = COPY $ecx
  %3:gr32 = COPY $edx
  %2:gr32 = COPY $esi
  %1:gr32 = COPY $edi
  MOV32mr %stack.0.is.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.is.addr)
  MOV32mr %stack.1.m.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.m.addr)
  MOV32mr %stack.2.vlen.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.vlen.addr)
  MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.4.xd1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.xd1.addr)
  MOV64mr %stack.5.ox.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ox.addr)
  undef %0.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32, debug-location !513; fft3d.c:60:18
  MOV64mr %stack.7.x, 1, $noreg, 0, $noreg, %6:gr64, debug-location !516 :: (store 8 into %ir.x); fft3d.c:60:15
  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:66:9
  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !554; fft3d.c:66:9
  JMP_1 %bb.1, debug-location !554; fft3d.c:66:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !555; fft3d.c:67:9
  $edi = MOV32ri 4, debug-location !555; fft3d.c:67:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !555; fft3d.c:67:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !555; fft3d.c:67:9

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %9:gr32 = MOV32rm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !556 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:71:10
  %11:gr32 = COPY %9:gr32, debug-location !557; fft3d.c:71:12
  %11:gr32 = SHR32ri %11:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
  %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
  %11:gr32 = SAR32r1 %11:gr32(tied-def 0), implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
  MOV32mr %stack.15.n1, 1, $noreg, 0, $noreg, %11:gr32, debug-location !558 :: (store 4 into %ir.n1); fft3d.c:71:8
  MOV32mi %stack.17.lj, 1, $noreg, 0, $noreg, 1, debug-location !559 :: (store 4 into %ir.lj); fft3d.c:72:8
  %13:gr8 = MOV8rm %stack.1.m.addr, 1, $noreg, 0, $noreg, debug-location !560 :: (dereferenceable load 1 from %ir.m.addr, align 4); fft3d.c:73:15
  %15:gr32 = MOV32ri 1
  $cl = COPY %13:gr8, debug-location !561; fft3d.c:73:12
  %15:gr32 = SHL32rCL %15:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !561; fft3d.c:73:12
  MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %15:gr32, debug-location !562 :: (store 4 into %ir.li); fft3d.c:73:8
  MOV32mi %stack.10.l, 1, $noreg, 0, $noreg, 1, debug-location !563 :: (store 4 into %ir.l); fft3d.c:74:12
  %229:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)

bb.3.for.cond:
; predecessors: %bb.2, %bb.35
  successors: %bb.4(0x7c000000), %bb.36(0x04000000); %bb.4(96.88%), %bb.36(3.12%)

  %16:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !566 :: (dereferenceable load 4 from %ir.l); fft3d.c:74:17
  CMP32rm %16:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:74:19
  JCC_1 %bb.36, 15, implicit killed $eflags, debug-location !570; fft3d.c:74:5
  JMP_1 %bb.4, debug-location !570; fft3d.c:74:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %20:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.lj); fft3d.c:75:14
  MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %20:gr32, debug-location !573 :: (store 4 into %ir.lk); fft3d.c:75:12
  %20:gr32 = ADD32rr %20:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags, debug-location !575; fft3d.c:76:16
  MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %20:gr32, debug-location !576 :: (store 4 into %ir.lj); fft3d.c:76:12
  %21:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !577 :: (dereferenceable load 4 from %ir.li); fft3d.c:77:14
  %23:gr32 = COPY %21:gr32, debug-location !578; fft3d.c:77:17
  %23:gr32 = SHR32ri %23:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
  %23:gr32 = SAR32r1 %23:gr32(tied-def 0), implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
  MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %23:gr32, debug-location !579 :: (store 4 into %ir.li); fft3d.c:77:12
  MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %23:gr32, debug-location !581 :: (store 4 into %ir.ku); fft3d.c:78:12
  MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !582 :: (store 4 into %ir.i); fft3d.c:80:16

bb.5.for.cond2:
; predecessors: %bb.4, %bb.15
  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)

  %27:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !587 :: (dereferenceable load 4 from %ir.li); fft3d.c:80:26
  %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags, debug-location !588; fft3d.c:80:29
  CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !589 :: (dereferenceable load 4 from %ir.i); fft3d.c:80:23
  JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !590; fft3d.c:80:9
  JMP_1 %bb.6, debug-location !590; fft3d.c:80:9

bb.6.for.body4:
; predecessors: %bb.5
  successors: %bb.7(0x40000000), %bb.8(0x40000000); %bb.7(50.00%), %bb.8(50.00%)

  %146:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !591 :: (dereferenceable load 4 from %ir.i); fft3d.c:81:19
  %142:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !593 :: (dereferenceable load 4 from %ir.lk); fft3d.c:81:23
  %144:gr32 = COPY %146:gr32, debug-location !594; fft3d.c:81:21
  %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
  MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %144:gr32, debug-location !595 :: (store 4 into %ir.i11); fft3d.c:81:17
  %144:gr32 = nsw ADD32rm %144:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !598 :: (dereferenceable load 4 from %ir.n1); fft3d.c:82:23
  MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %144:gr32, debug-location !599 :: (store 4 into %ir.i12); fft3d.c:82:17
  %146:gr32 = nsw IMUL32rm %146:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !602 :: (dereferenceable load 4 from %ir.lj); fft3d.c:83:21
  MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %146:gr32, debug-location !603 :: (store 4 into %ir.i21); fft3d.c:83:17
  %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
  MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %146:gr32, debug-location !607 :: (store 4 into %ir.i22); fft3d.c:84:17
  CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !610 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:86:20
  JCC_1 %bb.8, 14, implicit killed $eflags, debug-location !611; fft3d.c:86:17
  JMP_1 %bb.7, debug-location !611; fft3d.c:86:17

bb.7.if.then9:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %157:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !612 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:87:22
  %158:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !614 :: (dereferenceable load 4 from %ir.ku); fft3d.c:87:31
  %161:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !615 :: (dereferenceable load 4 from %ir.i); fft3d.c:87:36
  %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
  %161:gr64_nosp = SHL64ri %161:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !612; fft3d.c:87:22
  %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
  %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %162:gr64, debug-location !612 :: (store 8 into %ir.31); fft3d.c:87:22
  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %163:gr64, debug-location !612 :: (store 8 into %ir.31 + 8); fft3d.c:87:22
  JMP_1 %bb.9, debug-location !617; fft3d.c:88:13

bb.8.if.else:
; predecessors: %bb.6
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %147:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:90:22
  %148:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.ku); fft3d.c:90:22
  %151:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.i); fft3d.c:90:22
  %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
  %151:gr64_nosp = SHL64ri %151:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
  %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
  MOVSDmr %stack.24..compoundliteral, 1, $noreg, 0, $noreg, %152:fr64, debug-location !618 :: (store 8 into %ir.real1); fft3d.c:90:22
  %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
  %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
  MOVLPDmr %stack.24..compoundliteral, 1, $noreg, 8, $noreg, %154:vr128, debug-location !618 :: (store 8 into %ir.imag); fft3d.c:90:22
  %155:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42); fft3d.c:90:22
  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %155:gr64, debug-location !618 :: (store 8 into %ir.41); fft3d.c:90:22
  %156:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 8, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42 + 8); fft3d.c:90:22
  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %156:gr64, debug-location !618 :: (store 8 into %ir.41 + 8); fft3d.c:90:22

bb.9.if.end20:
; predecessors: %bb.8, %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi %stack.14.k, 1, $noreg, 0, $noreg, 0, debug-location !620 :: (store 4 into %ir.k); fft3d.c:92:20

bb.10.for.cond21:
; predecessors: %bb.9, %bb.14
  successors: %bb.11(0x7c000000), %bb.15(0x04000000); %bb.11(96.88%), %bb.15(3.12%)

  %166:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !625 :: (dereferenceable load 4 from %ir.lk); fft3d.c:92:30
  %166:gr32 = DEC32r %166:gr32(tied-def 0), implicit-def dead $eflags, debug-location !626; fft3d.c:92:33
  CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %166:gr32, implicit-def $eflags, debug-location !627 :: (dereferenceable load 4 from %ir.k); fft3d.c:92:27
  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !628; fft3d.c:92:13
  JMP_1 %bb.11, debug-location !628; fft3d.c:92:13

bb.11.for.body24:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !629 :: (store 4 into %ir.j); fft3d.c:93:24

bb.12.for.cond25:
; predecessors: %bb.11, %bb.13
  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

  %168:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !633 :: (dereferenceable load 4 from %ir.j); fft3d.c:93:29
  CMP32rm %168:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !636 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:93:31
  JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !637; fft3d.c:93:17
  JMP_1 %bb.13, debug-location !637; fft3d.c:93:17

bb.13.for.body27:
; predecessors: %bb.12
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %170:gr64 = MOV64rm %stack.7.x, 1, $noreg, 0, $noreg, debug-location !638 :: (dereferenceable load 8 from %ir.x); fft3d.c:94:27
  %174:gr64_nosp = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.i11); fft3d.c:94:29
  %172:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.k); fft3d.c:94:35
  %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
  %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
  %174:gr64_nosp = SHL64ri %174:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
  %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
  %178:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.j); fft3d.c:94:38
  %178:gr64_nosp = SHL64ri %178:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
  %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
  MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %180:gr64, debug-location !638 :: (store 8 into %ir.52 + 8); fft3d.c:94:27
  MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %179:gr64, debug-location !638 :: (store 8 into %ir.52); fft3d.c:94:27
  %183:gr64_nosp = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !645 :: (dereferenceable load 4 from %ir.i12); fft3d.c:95:29
  %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
  %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  %183:gr64_nosp = SHL64ri %183:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
  %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
  MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %186:gr64, debug-location !644 :: (store 8 into %ir.59); fft3d.c:95:27
  MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %187:gr64, debug-location !644 :: (store 8 into %ir.59 + 8); fft3d.c:95:27
  %189:gr64 = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !649 :: (dereferenceable load 4 from %ir.i21); fft3d.c:96:25
  %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
  %190:gr64 = IMUL64rri32 %189:gr64, 528, implicit-def dead $eflags, debug-location !651; fft3d.c:96:21
  %192:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real459); fft3d.c:96:39
  %192:fr64 = ADDSDrm %192:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real4610); fft3d.c:96:39
  MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, %192:fr64, debug-location !654 :: (store 8 into %ir.real448); fft3d.c:96:39
  %194:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag49); fft3d.c:96:39
  %194:fr64 = ADDSDrm %194:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag50); fft3d.c:96:39
  MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, %194:fr64, debug-location !654 :: (store 8 into %ir.imag48); fft3d.c:96:39
  %195:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69); fft3d.c:96:39
  MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
  %196:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69 + 8); fft3d.c:96:39
  MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
  %197:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !655 :: (dereferenceable load 4 from %ir.i22); fft3d.c:97:25
  %199:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.k); fft3d.c:97:31
  %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
  %200:gr64 = IMUL64rri32 %199:gr64, 528, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
  %202:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !659 :: (dereferenceable load 4 from %ir.j); fft3d.c:97:34
  %202:gr64_nosp = SHL64ri %202:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
  %204:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6215); fft3d.c:97:39
  %204:fr64 = SUBSDrm %204:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6316); fft3d.c:97:39
  %214:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real5913)
  %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
  MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 0, $noreg, %204:fr64, debug-location !660 :: (store 8 into %ir.real6114); fft3d.c:97:39
  %207:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag66); fft3d.c:97:39
  %207:fr64 = SUBSDrm %207:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag67); fft3d.c:97:39
  MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 8, $noreg, %207:fr64, debug-location !660 :: (store 8 into %ir.imag65); fft3d.c:97:39
  %208:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag71); fft3d.c:97:39
  %210:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7419); fft3d.c:97:39
  %210:fr64 = SUBSDrm %210:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7520); fft3d.c:97:39
  MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 0, $noreg, %210:fr64, debug-location !660 :: (store 8 into %ir.real7318); fft3d.c:97:39
  %213:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag78); fft3d.c:97:39
  %213:fr64 = SUBSDrm %213:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag79); fft3d.c:97:39
  MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 8, $noreg, %213:fr64, debug-location !660 :: (store 8 into %ir.imag77); fft3d.c:97:39
  %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
  %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
  MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, %214:fr64, debug-location !660 :: (store 8 into %ir.real5812); fft3d.c:97:39
  %215:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8521); fft3d.c:97:39
  %217:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8823); fft3d.c:97:39
  %217:fr64 = SUBSDrm %217:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8924); fft3d.c:97:39
  MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 0, $noreg, %217:fr64, debug-location !660 :: (store 8 into %ir.real8722); fft3d.c:97:39
  %220:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag92); fft3d.c:97:39
  %220:fr64 = SUBSDrm %220:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag93); fft3d.c:97:39
  MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 8, $noreg, %220:fr64, debug-location !660 :: (store 8 into %ir.imag91); fft3d.c:97:39
  %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
  %222:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10026); fft3d.c:97:39
  %222:fr64 = SUBSDrm %222:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10127); fft3d.c:97:39
  %226:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag97)
  %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
  %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
  MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 0, $noreg, %222:fr64, debug-location !660 :: (store 8 into %ir.real9925); fft3d.c:97:39
  %225:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag104); fft3d.c:97:39
  %225:fr64 = SUBSDrm %225:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag105); fft3d.c:97:39
  MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 8, $noreg, %225:fr64, debug-location !660 :: (store 8 into %ir.imag103); fft3d.c:97:39
  MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, %226:fr64, debug-location !660 :: (store 8 into %ir.imag84); fft3d.c:97:39
  %227:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98); fft3d.c:97:39
  MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
  %228:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98 + 8); fft3d.c:97:39
  MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !661 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:93:40
  JMP_1 %bb.12, debug-location !662; fft3d.c:93:17

bb.14.for.end:
; predecessors: %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  INC32m %stack.14.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !665 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:92:39
  JMP_1 %bb.10, debug-location !666; fft3d.c:92:13

bb.15.for.end112:
; predecessors: %bb.10
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  INC32m %stack.8.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !669 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:80:35
  JMP_1 %bb.5, debug-location !670; fft3d.c:80:9

bb.16.for.end115:
; predecessors: %bb.5
  successors: %bb.17(0x40000000), %bb.23(0x40000000); %bb.17(50.00%), %bb.23(50.00%)

  %29:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 4 from %ir.l); fft3d.c:102:13
  CMP32rm %29:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !676 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:102:15
  JCC_1 %bb.23, 5, implicit killed $eflags, debug-location !677; fft3d.c:102:13
  JMP_1 %bb.17, debug-location !677; fft3d.c:102:13

bb.17.if.then117:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  MOV32mi %stack.14.k, 1, $noreg, 0, $noreg, 0, debug-location !678 :: (store 4 into %ir.k); fft3d.c:103:20

bb.18.for.cond118:
; predecessors: %bb.17, %bb.22
  successors: %bb.19(0x7c000000), %bb.35(0x04000000); %bb.19(96.88%), %bb.35(3.12%)

  %128:gr32 = MOV32rm %stack.14.k, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.k); fft3d.c:103:25
  CMP32rm %128:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:103:27
  JCC_1 %bb.35, 13, implicit killed $eflags, debug-location !686; fft3d.c:103:13
  JMP_1 %bb.19, debug-location !686; fft3d.c:103:13

bb.19.for.body120:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !687 :: (store 4 into %ir.j); fft3d.c:104:24

bb.20.for.cond121:
; predecessors: %bb.19, %bb.21
  successors: %bb.21(0x7c000000), %bb.22(0x04000000); %bb.21(96.88%), %bb.22(3.12%)

  %130:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !691 :: (dereferenceable load 4 from %ir.j); fft3d.c:104:29
  CMP32rm %130:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:104:31
  JCC_1 %bb.22, 13, implicit killed $eflags, debug-location !695; fft3d.c:104:17
  JMP_1 %bb.21, debug-location !695; fft3d.c:104:17

bb.21.for.body123:
; predecessors: %bb.20
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %132:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.k); fft3d.c:105:23
  %134:gr64_nosp = COPY %132:gr64, debug-location !696; fft3d.c:105:21
  %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
  %134:gr64_nosp = SHL64ri %134:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
  %134:gr64_nosp = ADD64rm %134:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !696 :: (dereferenceable load 8 from %ir.x); fft3d.c:105:21
  %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !699 :: (dereferenceable load 4 from %ir.j); fft3d.c:105:26
  %137:gr64_nosp = SHL64ri %137:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
  %138:gr64 = IMUL64rri32 %132:gr64, 528, implicit-def dead $eflags, debug-location !701; fft3d.c:105:31
  %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
  MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
  %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
  MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !703 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:104:40
  JMP_1 %bb.20, debug-location !704; fft3d.c:104:17

bb.22.for.end134:
; predecessors: %bb.20
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  INC32m %stack.14.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !707 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:103:33
  JMP_1 %bb.18, debug-location !708; fft3d.c:103:13

bb.23.if.else138:
; predecessors: %bb.16
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %32:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 4 from %ir.lj); fft3d.c:110:18
  MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %32:gr32, debug-location !713 :: (store 4 into %ir.lk); fft3d.c:110:16
  %32:gr32 = ADD32rr %32:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags, debug-location !715; fft3d.c:111:20
  MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %32:gr32, debug-location !716 :: (store 4 into %ir.lj); fft3d.c:111:16
  %33:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.li); fft3d.c:112:18
  %35:gr32 = COPY %33:gr32, debug-location !718; fft3d.c:112:21
  %35:gr32 = SHR32ri %35:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
  %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
  %35:gr32 = SAR32r1 %35:gr32(tied-def 0), implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
  MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %35:gr32, debug-location !719 :: (store 4 into %ir.li); fft3d.c:112:16
  MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %35:gr32, debug-location !721 :: (store 4 into %ir.ku); fft3d.c:113:16
  MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !722 :: (store 4 into %ir.i); fft3d.c:115:20

bb.24.for.cond141:
; predecessors: %bb.23, %bb.34
  successors: %bb.25(0x7c000000), %bb.35(0x04000000); %bb.25(96.88%), %bb.35(3.12%)

  %39:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !727 :: (dereferenceable load 4 from %ir.li); fft3d.c:115:30
  %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags, debug-location !728; fft3d.c:115:33
  CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags, debug-location !729 :: (dereferenceable load 4 from %ir.i); fft3d.c:115:27
  JCC_1 %bb.35, 15, implicit killed $eflags, debug-location !730; fft3d.c:115:13
  JMP_1 %bb.25, debug-location !730; fft3d.c:115:13

bb.25.for.body144:
; predecessors: %bb.24
  successors: %bb.26(0x40000000), %bb.27(0x40000000); %bb.26(50.00%), %bb.27(50.00%)

  %46:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !731 :: (dereferenceable load 4 from %ir.i); fft3d.c:116:23
  %42:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !733 :: (dereferenceable load 4 from %ir.lk); fft3d.c:116:27
  %44:gr32 = COPY %46:gr32, debug-location !734; fft3d.c:116:25
  %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
  MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %44:gr32, debug-location !735 :: (store 4 into %ir.i11); fft3d.c:116:21
  %44:gr32 = nsw ADD32rm %44:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !738 :: (dereferenceable load 4 from %ir.n1); fft3d.c:117:27
  MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %44:gr32, debug-location !739 :: (store 4 into %ir.i12); fft3d.c:117:21
  %46:gr32 = nsw IMUL32rm %46:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !742 :: (dereferenceable load 4 from %ir.lj); fft3d.c:118:25
  MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %46:gr32, debug-location !743 :: (store 4 into %ir.i21); fft3d.c:118:21
  %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
  MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %46:gr32, debug-location !747 :: (store 4 into %ir.i22); fft3d.c:119:21
  CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !750 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:121:24
  JCC_1 %bb.27, 14, implicit killed $eflags, debug-location !751; fft3d.c:121:21
  JMP_1 %bb.26, debug-location !751; fft3d.c:121:21

bb.26.if.then150:
; predecessors: %bb.25
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  %57:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:122:26
  %58:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !754 :: (dereferenceable load 4 from %ir.ku); fft3d.c:122:35
  %61:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !755 :: (dereferenceable load 4 from %ir.i); fft3d.c:122:40
  %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
  %61:gr64_nosp = SHL64ri %61:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !752; fft3d.c:122:26
  %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
  %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %62:gr64, debug-location !752 :: (store 8 into %ir.136); fft3d.c:122:26
  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %63:gr64, debug-location !752 :: (store 8 into %ir.136 + 8); fft3d.c:122:26
  JMP_1 %bb.28, debug-location !757; fft3d.c:123:17

bb.27.if.else154:
; predecessors: %bb.25
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  %47:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:125:26
  %48:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.ku); fft3d.c:125:26
  %51:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.i); fft3d.c:125:26
  %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
  %51:gr64_nosp = SHL64ri %51:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
  %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
  MOVSDmr %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, %52:fr64, debug-location !758 :: (store 8 into %ir.real15630); fft3d.c:125:26
  %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
  %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
  MOVLPDmr %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, %54:vr128, debug-location !758 :: (store 8 into %ir.imag161); fft3d.c:125:26
  %55:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147); fft3d.c:125:26
  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %55:gr64, debug-location !758 :: (store 8 into %ir.146); fft3d.c:125:26
  %56:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147 + 8); fft3d.c:125:26
  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %56:gr64, debug-location !758 :: (store 8 into %ir.146 + 8); fft3d.c:125:26

bb.28.if.end167:
; predecessors: %bb.27, %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  MOV32mi %stack.14.k, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 4 into %ir.k); fft3d.c:127:24

bb.29.for.cond168:
; predecessors: %bb.28, %bb.33
  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)

  %66:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !765 :: (dereferenceable load 4 from %ir.lk); fft3d.c:127:34
  %66:gr32 = DEC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !766; fft3d.c:127:37
  CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !767 :: (dereferenceable load 4 from %ir.k); fft3d.c:127:31
  JCC_1 %bb.34, 15, implicit killed $eflags, debug-location !768; fft3d.c:127:17
  JMP_1 %bb.30, debug-location !768; fft3d.c:127:17

bb.30.for.body171:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !769 :: (store 4 into %ir.j); fft3d.c:128:28

bb.31.for.cond172:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %68:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 4 from %ir.j); fft3d.c:128:33
  CMP32rm %68:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !776 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:128:35
  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !777; fft3d.c:128:21
  JMP_1 %bb.32, debug-location !777; fft3d.c:128:21

bb.32.for.body174:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %72:gr64 = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.i11); fft3d.c:129:35
  %71:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 4 from %ir.k); fft3d.c:129:41
  %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
  %73:gr64 = IMUL64rri32 %72:gr64, 528, implicit-def dead $eflags, debug-location !781; fft3d.c:129:31
  %75:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); fft3d.c:129:44
  %75:gr64_nosp = SHL64ri %75:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
  %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
  MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %76:gr64, debug-location !781 :: (store 8 into %ir.155 + 8); fft3d.c:129:31
  %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
  MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %77:gr64, debug-location !781 :: (store 8 into %ir.155); fft3d.c:129:31
  %79:gr64 = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 4 from %ir.i12); fft3d.c:130:35
  %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
  %80:gr64 = IMUL64rri32 %79:gr64, 528, implicit-def dead $eflags, debug-location !786; fft3d.c:130:31
  %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
  MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %81:gr64, debug-location !786 :: (store 8 into %ir.160); fft3d.c:130:31
  %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
  MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %82:gr64, debug-location !786 :: (store 8 into %ir.160 + 8); fft3d.c:130:31
  %85:gr64_nosp = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !790 :: (dereferenceable load 4 from %ir.i21); fft3d.c:131:27
  %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
  %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
  %85:gr64_nosp = SHL64ri %85:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
  %85:gr64_nosp = ADD64rm %85:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !789 :: (dereferenceable load 8 from %ir.x); fft3d.c:131:25
  %89:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19238); fft3d.c:131:41
  %89:fr64 = ADDSDrm %89:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19339); fft3d.c:131:41
  MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, %89:fr64, debug-location !794 :: (store 8 into %ir.real19137); fft3d.c:131:41
  %91:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag196); fft3d.c:131:41
  %91:fr64 = ADDSDrm %91:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag197); fft3d.c:131:41
  MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, %91:fr64, debug-location !794 :: (store 8 into %ir.imag195); fft3d.c:131:41
  %92:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172); fft3d.c:131:41
  MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
  %93:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172 + 8); fft3d.c:131:41
  MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
  %94:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !796 :: (dereferenceable load 4 from %ir.i22); fft3d.c:132:27
  %97:gr64_nosp = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !797 :: (dereferenceable load 4 from %ir.k); fft3d.c:132:33
  %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
  %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
  %97:gr64_nosp = SHL64ri %97:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
  %97:gr64_nosp = ADD64rm %97:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !795 :: (dereferenceable load 8 from %ir.x); fft3d.c:132:25
  %101:gr64 = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !799 :: (dereferenceable load 4 from %ir.j); fft3d.c:132:36
  %101:gr64 = SHL64ri %101:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
  %103:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real20944); fft3d.c:132:41
  %103:fr64 = SUBSDrm %103:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real21045); fft3d.c:132:41
  %113:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real20642)
  %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
  MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 0, $noreg, %103:fr64, debug-location !800 :: (store 8 into %ir.real20843); fft3d.c:132:41
  %106:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag213); fft3d.c:132:41
  %106:fr64 = SUBSDrm %106:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag214); fft3d.c:132:41
  MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 8, $noreg, %106:fr64, debug-location !800 :: (store 8 into %ir.imag212); fft3d.c:132:41
  %107:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag218); fft3d.c:132:41
  %109:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22148); fft3d.c:132:41
  %109:fr64 = SUBSDrm %109:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22249); fft3d.c:132:41
  MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 0, $noreg, %109:fr64, debug-location !800 :: (store 8 into %ir.real22047); fft3d.c:132:41
  %112:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag225); fft3d.c:132:41
  %112:fr64 = SUBSDrm %112:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag226); fft3d.c:132:41
  MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 8, $noreg, %112:fr64, debug-location !800 :: (store 8 into %ir.imag224); fft3d.c:132:41
  %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
  %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
  MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, %113:fr64, debug-location !800 :: (store 8 into %ir.real20541); fft3d.c:132:41
  %114:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23250); fft3d.c:132:41
  %116:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23552); fft3d.c:132:41
  %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23653); fft3d.c:132:41
  MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 0, $noreg, %116:fr64, debug-location !800 :: (store 8 into %ir.real23451); fft3d.c:132:41
  %119:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag239); fft3d.c:132:41
  %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag240); fft3d.c:132:41
  MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 8, $noreg, %119:fr64, debug-location !800 :: (store 8 into %ir.imag238); fft3d.c:132:41
  %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
  %121:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24755); fft3d.c:132:41
  %121:fr64 = SUBSDrm %121:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24856); fft3d.c:132:41
  %125:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag244)
  %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
  %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
  MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 0, $noreg, %121:fr64, debug-location !800 :: (store 8 into %ir.real24654); fft3d.c:132:41
  %124:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag251); fft3d.c:132:41
  %124:fr64 = SUBSDrm %124:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag252); fft3d.c:132:41
  MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 8, $noreg, %124:fr64, debug-location !800 :: (store 8 into %ir.imag250); fft3d.c:132:41
  MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, %125:fr64, debug-location !800 :: (store 8 into %ir.imag231); fft3d.c:132:41
  %126:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203); fft3d.c:132:41
  MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
  %127:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203 + 8); fft3d.c:132:41
  MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !801 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:128:44
  JMP_1 %bb.31, debug-location !802; fft3d.c:128:21

bb.33.for.end259:
; predecessors: %bb.31
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  INC32m %stack.14.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !805 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:127:43
  JMP_1 %bb.29, debug-location !806; fft3d.c:127:17

bb.34.for.end262:
; predecessors: %bb.29
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  INC32m %stack.8.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !809 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:115:39
  JMP_1 %bb.24, debug-location !810; fft3d.c:115:13

bb.35.if.end266:
; predecessors: %bb.24, %bb.18
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  ADD32mi8 %stack.10.l, 1, $noreg, 0, $noreg, 2, implicit-def dead $eflags, debug-location !813 :: (store 4 into %ir.l), (dereferenceable load 4 from %ir.l); fft3d.c:74:27
  JMP_1 %bb.3, debug-location !814; fft3d.c:74:5

bb.36.for.end269:
; predecessors: %bb.3
  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !817 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:138:9
  JCC_1 %bb.38, 4, implicit killed $eflags, debug-location !819; fft3d.c:138:9
  JMP_1 %bb.37, debug-location !819; fft3d.c:138:9

bb.37.if.then271:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !820; fft3d.c:139:9
  $edi = MOV32ri 4, debug-location !820; fft3d.c:139:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !820; fft3d.c:139:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !820; fft3d.c:139:9

bb.38.if.end272:
; predecessors: %bb.36, %bb.37

  RET 0, debug-location !821; fft3d.c:140:1

# End machine code for function Swarztrauber.

********** MI Scheduling **********
Swarztrauber:%bb.0 entry
  From: %6:gr64 = COPY $r9
    To: JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !554; fft3d.c:66:9
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %0 
Live Thru: 
  LiveReg: %0
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %6:gr64 = COPY $r9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%6
    SU(11): Data Latency=0 Reg=%6
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %5:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%5
    SU(10): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %4:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%4
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %3:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%3
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %2:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%2
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %1:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV32mr %stack.0.is.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.is.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.m.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.m.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.vlen.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.vlen.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.xd1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.xd1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.5.ox.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ox.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   undef %0.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32, debug-location !513; fft3d.c:60:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV64mr %stack.7.x, 1, $noreg, 0, $noreg, %6:gr64, debug-location !516 :: (store 8 into %ir.x); fft3d.c:60:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:66:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !554; fft3d.c:66:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:66:9
Bottom Pressure:
GR16=2
  Ready @4c
  BotQ.A BotLatency SU(14) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.7.x, 1, $noreg, 0, $noreg, %6:gr64, debug-location !516 :: (store 8 into %ir.x); fft3d.c:60:15
Bottom Pressure:
GR16=4
  LiveReg: %6
  UpdateRegP: SU(11) MOV64mr %stack.5.ox.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ox.addr)
              to 
  UpdateRegP: SU(13) MOV64mr %stack.7.x, 1, $noreg, 0, $noreg, %6:gr64, debug-location !516 :: (store 8 into %ir.x); fft3d.c:60:15
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %0.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32, debug-location !513; fft3d.c:60:18
Bottom Pressure:
GR16=4
  LiveReg: %5
  UpdateRegP: SU(10) MOV32mr %stack.4.xd1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.xd1.addr)
              to 
  UpdateRegP: SU(12) undef %0.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32, debug-location !513; fft3d.c:60:18
              to GR16 -2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.5.ox.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ox.addr)
Bottom Pressure:
GR16=4
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 10 9 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.xd1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.xd1.addr)
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 0 9 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GR16=6
  LiveReg: %4
  UpdateRegP: SU(9) MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 0 1 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.vlen.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.vlen.addr)
Bottom Pressure:
GR16=8
  LiveReg: %3
  UpdateRegP: SU(8) MOV32mr %stack.2.vlen.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.vlen.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 0 1 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.m.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.m.addr)
Bottom Pressure:
GR16=10
  LiveReg: %2
  UpdateRegP: SU(7) MOV32mr %stack.1.m.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.m.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 0 1 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.0.is.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.is.addr)
Bottom Pressure:
GR16=12
  LiveReg: %1
  UpdateRegP: SU(6) MOV32mr %stack.0.is.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.is.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 1 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %1:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %2:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 0 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %3:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %4:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %5:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %6:gr64 = COPY $r9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %6:gr64 = COPY $r9
SU(1):   %5:gr32 = COPY $r8d
SU(2):   %4:gr32 = COPY $ecx
SU(3):   %3:gr32 = COPY $edx
SU(4):   %2:gr32 = COPY $esi
SU(5):   %1:gr32 = COPY $edi
SU(6):   MOV32mr %stack.0.is.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.is.addr)
SU(7):   MOV32mr %stack.1.m.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.m.addr)
SU(8):   MOV32mr %stack.2.vlen.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.vlen.addr)
SU(9):   MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n.addr)
SU(10):   MOV32mr %stack.4.xd1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.xd1.addr)
SU(11):   MOV64mr %stack.5.ox.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ox.addr)
SU(12):   undef %0.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32, debug-location !513; fft3d.c:60:18
SU(13):   MOV64mr %stack.7.x, 1, $noreg, 0, $noreg, %6:gr64, debug-location !516 :: (store 8 into %ir.x); fft3d.c:60:15
SU(14):   CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:66:9

********** MI Scheduling **********
Swarztrauber:%bb.2 if.end
  From: %9:gr32 = MOV32rm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !556 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:71:10
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
FR32=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=4
Live In: 
Live Out: %229 
Live Thru: 
  LiveReg: %229
Top Pressure:

Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %9:gr32 = MOV32rm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !556 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:71:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%9
    SU(1): Data Latency=4 Reg=%9
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %11:gr32 = COPY %9:gr32, debug-location !557; fft3d.c:71:12
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%9
  Successors:
    SU(2): Data Latency=0 Reg=%11
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %11:gr32 = SHR32ri %11:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=0 Reg=%11
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%11
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%11
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%9
  Successors:
    SU(4): Data Latency=1 Reg=%11
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %11:gr32 = SAR32r1 %11:gr32(tied-def 0), implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%11
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%11
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr %stack.15.n1, 1, $noreg, 0, $noreg, %11:gr32, debug-location !558 :: (store 4 into %ir.n1); fft3d.c:71:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%11
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mi %stack.17.lj, 1, $noreg, 0, $noreg, 1, debug-location !559 :: (store 4 into %ir.lj); fft3d.c:72:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %13:gr8 = MOV8rm %stack.1.m.addr, 1, $noreg, 0, $noreg, debug-location !560 :: (dereferenceable load 1 from %ir.m.addr, align 4); fft3d.c:73:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%13
  Pressure Diff      : GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(8):   %15:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Data Latency=1 Reg=%15
    SU(10): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   $cl = COPY %13:gr8, debug-location !561; fft3d.c:73:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%13
  Successors:
    SU(10): Data Latency=0 Reg=$cl
  Pressure Diff      : GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR64_TC+GR64_TCW64 -1    GR64_TC -1    GR8+GR64_TC 1    GR16 1
  Single Issue       : false;
SU(10):   %15:gr32 = SHL32rCL %15:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !561; fft3d.c:73:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(9): Data Latency=0 Reg=$cl
    SU(8): Data Latency=1 Reg=%15
    SU(8): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%15
  Pressure Diff      : GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1
  Single Issue       : false;
SU(11):   MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %15:gr32, debug-location !562 :: (store 4 into %ir.li); fft3d.c:73:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%15
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   MOV32mi %stack.10.l, 1, $noreg, 0, $noreg, 1, debug-location !563 :: (store 4 into %ir.l); fft3d.c:74:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %229:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 6 5 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %229:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(13) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 6 5 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mi %stack.10.l, 1, $noreg, 0, $noreg, 1, debug-location !563 :: (store 4 into %ir.l); fft3d.c:74:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 6 
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %15:gr32, debug-location !562 :: (store 4 into %ir.li); fft3d.c:73:8
Bottom Pressure:
GR16=2
  LiveReg: %15
  UpdateRegP: SU(11) MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %15:gr32, debug-location !562 :: (store 4 into %ir.li); fft3d.c:73:8
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 10 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %15:gr32 = SHL32rCL %15:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !561; fft3d.c:73:12
Bottom Pressure:
GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=3
  LiveReg: %15
  UpdateRegP: SU(10) %15:gr32 = SHL32rCL %15:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !561; fft3d.c:73:12
              to GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 9 8 
  Cand SU(5) ORDER                              
  Cand SU(6) REG-MAX                            
  Cand SU(9) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(9) $cl = COPY %13:gr8, debug-location !561; fft3d.c:73:12
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=3
  LiveReg: %13
  UpdateRegP: SU(9) $cl = COPY %13:gr8, debug-location !561; fft3d.c:73:12
              to GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 8 7 
  Cand SU(5) ORDER                              
  Cand SU(6) REG-MAX                            
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %15:gr32 = MOV32ri 1
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=1
  Ready @2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %13:gr8 = MOV8rm %stack.1.m.addr, 1, $noreg, 0, $noreg, debug-location !560 :: (dereferenceable load 1 from %ir.m.addr, align 4); fft3d.c:73:15
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(7) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mi %stack.17.lj, 1, $noreg, 0, $noreg, 1, debug-location !559 :: (store 4 into %ir.lj); fft3d.c:72:8
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.15.n1, 1, $noreg, 0, $noreg, %11:gr32, debug-location !558 :: (store 4 into %ir.n1); fft3d.c:71:8
Bottom Pressure:
GR16=2
  LiveReg: %11
  UpdateRegP: SU(5) MOV32mr %stack.15.n1, 1, $noreg, 0, $noreg, %11:gr32, debug-location !558 :: (store 4 into %ir.n1); fft3d.c:71:8
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %11:gr32 = SAR32r1 %11:gr32(tied-def 0), implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
Bottom Pressure:
GR16=2
  LiveReg: %11
  UpdateRegP: SU(4) %11:gr32 = SAR32r1 %11:gr32(tied-def 0), implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
Bottom Pressure:
GR16=4
  LiveReg: %11
  UpdateRegP: SU(3) %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
              to 
  LiveReg: %9
  UpdateRegP: SU(1) %11:gr32 = COPY %9:gr32, debug-location !557; fft3d.c:71:12
              to GR16 -2
  UpdateRegP: SU(3) %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
              to GR16 -2
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %11:gr32 = SHR32ri %11:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
Bottom Pressure:
GR16=4
  LiveReg: %11
  UpdateRegP: SU(2) %11:gr32 = SHR32ri %11:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
              to GR16 -2
  Ready @4c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %11:gr32 = COPY %9:gr32, debug-location !557; fft3d.c:71:12
Bottom Pressure:
GR16=2
  Ready @4c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = MOV32rm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !556 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:71:10
Bottom Pressure:

  Ready @8c
  BotQ.A BotLatency SU(0) 7c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %9:gr32 = MOV32rm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !556 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:71:10
SU(1):   %11:gr32 = COPY %9:gr32, debug-location !557; fft3d.c:71:12
SU(2):   %11:gr32 = SHR32ri %11:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
SU(3):   %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
SU(4):   %11:gr32 = SAR32r1 %11:gr32(tied-def 0), implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
SU(5):   MOV32mr %stack.15.n1, 1, $noreg, 0, $noreg, %11:gr32, debug-location !558 :: (store 4 into %ir.n1); fft3d.c:71:8
SU(6):   MOV32mi %stack.17.lj, 1, $noreg, 0, $noreg, 1, debug-location !559 :: (store 4 into %ir.lj); fft3d.c:72:8
SU(7):   %13:gr8 = MOV8rm %stack.1.m.addr, 1, $noreg, 0, $noreg, debug-location !560 :: (dereferenceable load 1 from %ir.m.addr, align 4); fft3d.c:73:15
SU(8):   %15:gr32 = MOV32ri 1
SU(9):   $cl = COPY %13:gr8, debug-location !561; fft3d.c:73:12
SU(10):   %15:gr32 = SHL32rCL %15:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !561; fft3d.c:73:12
SU(11):   MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %15:gr32, debug-location !562 :: (store 4 into %ir.li); fft3d.c:73:8
SU(12):   MOV32mi %stack.10.l, 1, $noreg, 0, $noreg, 1, debug-location !563 :: (store 4 into %ir.l); fft3d.c:74:12
SU(13):   %229:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)

********** MI Scheduling **********
Swarztrauber:%bb.3 for.cond
  From: %16:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !566 :: (dereferenceable load 4 from %ir.l); fft3d.c:74:17
    To: JCC_1 %bb.36, 15, implicit killed $eflags, debug-location !570; fft3d.c:74:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %16:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !566 :: (dereferenceable load 4 from %ir.l); fft3d.c:74:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%16
  Single Issue       : false;
SU(1):   CMP32rm %16:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:74:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 15, implicit killed $eflags, debug-location !570; fft3d.c:74:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %16:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:74:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !566 :: (dereferenceable load 4 from %ir.l); fft3d.c:74:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %16:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !566 :: (dereferenceable load 4 from %ir.l); fft3d.c:74:17
SU(1):   CMP32rm %16:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:74:19

********** MI Scheduling **********
Swarztrauber:%bb.4 for.body
  From: %20:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.lj); fft3d.c:75:14
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %20:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.lj); fft3d.c:75:14
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%20
    SU(1): Data Latency=4 Reg=%20
    SU(2): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %20:gr32, debug-location !573 :: (store 4 into %ir.lk); fft3d.c:75:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%20
  Successors:
    SU(2): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %20:gr32 = ADD32rr %20:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags, debug-location !575; fft3d.c:76:16
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%20
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%20
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %20:gr32, debug-location !576 :: (store 4 into %ir.lj); fft3d.c:76:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%20
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %21:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !577 :: (dereferenceable load 4 from %ir.li); fft3d.c:77:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(7): Data Latency=4 Reg=%21
    SU(5): Data Latency=4 Reg=%21
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %23:gr32 = COPY %21:gr32, debug-location !578; fft3d.c:77:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%21
  Successors:
    SU(6): Data Latency=0 Reg=%23
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %23:gr32 = SHR32ri %23:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(5): Data Latency=0 Reg=%23
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%23
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%23
    SU(6): Out  Latency=0
    SU(4): Data Latency=4 Reg=%21
  Successors:
    SU(8): Data Latency=1 Reg=%23
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %23:gr32 = SAR32r1 %23:gr32(tied-def 0), implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%23
    SU(7): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%23
    SU(9): Data Latency=1 Reg=%23
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %23:gr32, debug-location !579 :: (store 4 into %ir.li); fft3d.c:77:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%23
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %23:gr32, debug-location !581 :: (store 4 into %ir.ku); fft3d.c:78:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%23
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !582 :: (store 4 into %ir.i); fft3d.c:80:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 3 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !582 :: (store 4 into %ir.i); fft3d.c:80:16
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 10 9 
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %23:gr32, debug-location !581 :: (store 4 into %ir.ku); fft3d.c:78:12
Bottom Pressure:
GR16=2
  LiveReg: %23
  UpdateRegP: SU(9) MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %23:gr32, debug-location !579 :: (store 4 into %ir.li); fft3d.c:77:12
              to 
  UpdateRegP: SU(10) MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %23:gr32, debug-location !581 :: (store 4 into %ir.ku); fft3d.c:78:12
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 9 
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %23:gr32, debug-location !579 :: (store 4 into %ir.li); fft3d.c:77:12
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 8 
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %23:gr32 = SAR32r1 %23:gr32(tied-def 0), implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
Bottom Pressure:
GR16=2
  LiveReg: %23
  UpdateRegP: SU(8) %23:gr32 = SAR32r1 %23:gr32(tied-def 0), implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
Bottom Pressure:
GR16=4
  LiveReg: %23
  UpdateRegP: SU(7) %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
              to 
  LiveReg: %21
  UpdateRegP: SU(5) %23:gr32 = COPY %21:gr32, debug-location !578; fft3d.c:77:17
              to GR16 -2
  UpdateRegP: SU(7) %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %23:gr32 = SHR32ri %23:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
Bottom Pressure:
GR16=4
  LiveReg: %23
  UpdateRegP: SU(6) %23:gr32 = SHR32ri %23:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(5) %23:gr32 = COPY %21:gr32, debug-location !578; fft3d.c:77:17
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %21:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !577 :: (dereferenceable load 4 from %ir.li); fft3d.c:77:14
Bottom Pressure:

  Ready @7c
  BotQ.A BotLatency SU(4) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %20:gr32, debug-location !576 :: (store 4 into %ir.lj); fft3d.c:76:12
Bottom Pressure:
GR16=2
  LiveReg: %20
  UpdateRegP: SU(3) MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %20:gr32, debug-location !576 :: (store 4 into %ir.lj); fft3d.c:76:12
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %20:gr32 = ADD32rr %20:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags, debug-location !575; fft3d.c:76:16
Bottom Pressure:
GR16=2
  LiveReg: %20
  UpdateRegP: SU(1) MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %20:gr32, debug-location !573 :: (store 4 into %ir.lk); fft3d.c:75:12
              to 
  UpdateRegP: SU(2) %20:gr32 = ADD32rr %20:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags, debug-location !575; fft3d.c:76:16
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %20:gr32, debug-location !573 :: (store 4 into %ir.lk); fft3d.c:75:12
Bottom Pressure:
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.lj); fft3d.c:75:14
Bottom Pressure:

  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %20:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.lj); fft3d.c:75:14
SU(1):   MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %20:gr32, debug-location !573 :: (store 4 into %ir.lk); fft3d.c:75:12
SU(2):   %20:gr32 = ADD32rr %20:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags, debug-location !575; fft3d.c:76:16
SU(3):   MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %20:gr32, debug-location !576 :: (store 4 into %ir.lj); fft3d.c:76:12
SU(4):   %21:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !577 :: (dereferenceable load 4 from %ir.li); fft3d.c:77:14
SU(5):   %23:gr32 = COPY %21:gr32, debug-location !578; fft3d.c:77:17
SU(6):   %23:gr32 = SHR32ri %23:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
SU(7):   %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
SU(8):   %23:gr32 = SAR32r1 %23:gr32(tied-def 0), implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
SU(9):   MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %23:gr32, debug-location !579 :: (store 4 into %ir.li); fft3d.c:77:12
SU(10):   MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %23:gr32, debug-location !581 :: (store 4 into %ir.ku); fft3d.c:78:12
SU(11):   MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !582 :: (store 4 into %ir.i); fft3d.c:80:16

********** MI Scheduling **********
Swarztrauber:%bb.5 for.cond2
  From: %27:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !587 :: (dereferenceable load 4 from %ir.li); fft3d.c:80:26
    To: JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !590; fft3d.c:80:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %27:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !587 :: (dereferenceable load 4 from %ir.li); fft3d.c:80:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%27
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags, debug-location !588; fft3d.c:80:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%27
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%27
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !589 :: (dereferenceable load 4 from %ir.i); fft3d.c:80:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%27
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !590; fft3d.c:80:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !589 :: (dereferenceable load 4 from %ir.i); fft3d.c:80:23
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags, debug-location !588; fft3d.c:80:29
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %27:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !587 :: (dereferenceable load 4 from %ir.li); fft3d.c:80:26
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %27:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !587 :: (dereferenceable load 4 from %ir.li); fft3d.c:80:26
SU(1):   %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags, debug-location !588; fft3d.c:80:29
SU(2):   CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !589 :: (dereferenceable load 4 from %ir.i); fft3d.c:80:23

********** MI Scheduling **********
Swarztrauber:%bb.6 for.body4
  From: %146:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !591 :: (dereferenceable load 4 from %ir.i); fft3d.c:81:19
    To: JCC_1 %bb.8, 14, implicit killed $eflags, debug-location !611; fft3d.c:86:17
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %146:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !591 :: (dereferenceable load 4 from %ir.i); fft3d.c:81:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%146
    SU(2): Data Latency=4 Reg=%146
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %142:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !593 :: (dereferenceable load 4 from %ir.lk); fft3d.c:81:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(9): Data Latency=4 Reg=%142
    SU(3): Data Latency=4 Reg=%142
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %144:gr32 = COPY %146:gr32, debug-location !594; fft3d.c:81:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(3): Data Latency=0 Reg=%144
    SU(3): Out  Latency=0
    SU(7): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%144
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%142
  Successors:
    SU(5): Data Latency=1 Reg=%144
    SU(4): Data Latency=1 Reg=%144
    SU(5): Out  Latency=0
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %144:gr32, debug-location !595 :: (store 4 into %ir.i11); fft3d.c:81:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%144
  Successors:
    SU(5): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %144:gr32 = nsw ADD32rm %144:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !598 :: (dereferenceable load 4 from %ir.n1); fft3d.c:82:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=1 Reg=%144
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%144
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %144:gr32, debug-location !599 :: (store 4 into %ir.i12); fft3d.c:82:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%144
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %146:gr32 = nsw IMUL32rm %146:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !602 :: (dereferenceable load 4 from %ir.lj); fft3d.c:83:21
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Data Latency=4 Reg=%146
    SU(0): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%146
    SU(8): Data Latency=4 Reg=%146
    SU(9): Out  Latency=0
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %146:gr32, debug-location !603 :: (store 4 into %ir.i21); fft3d.c:83:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(7): Data Latency=4 Reg=%146
  Successors:
    SU(9): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Data Latency=4 Reg=%146
    SU(7): Out  Latency=0
    SU(1): Data Latency=4 Reg=%142
  Successors:
    SU(10): Data Latency=1 Reg=%146
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %146:gr32, debug-location !607 :: (store 4 into %ir.i22); fft3d.c:84:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%146
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !610 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:86:20
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(9): Out  Latency=0
    SU(7): Out  Latency=0
    SU(5): Out  Latency=0
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 14, implicit killed $eflags, debug-location !611; fft3d.c:86:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !610 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:86:20
Bottom Pressure:

  Ready @4c
  BotQ.A TopLatency SU(11) 8c
  BotQ.A BotLatency SU(11) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %146:gr32, debug-location !607 :: (store 4 into %ir.i22); fft3d.c:84:17
Bottom Pressure:
GR16=2
  LiveReg: %146
  UpdateRegP: SU(10) MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %146:gr32, debug-location !607 :: (store 4 into %ir.i22); fft3d.c:84:17
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
Bottom Pressure:
GR16=4
  LiveReg: %146
  UpdateRegP: SU(8) MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %146:gr32, debug-location !603 :: (store 4 into %ir.i21); fft3d.c:83:17
              to 
  UpdateRegP: SU(9) %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
              to 
  LiveReg: %142
  UpdateRegP: SU(3) %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
              to 
  UpdateRegP: SU(9) %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
              to GR16 -2
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %146:gr32, debug-location !603 :: (store 4 into %ir.i21); fft3d.c:83:17
Bottom Pressure:
GR16=4
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %146:gr32 = nsw IMUL32rm %146:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !602 :: (dereferenceable load 4 from %ir.lj); fft3d.c:83:21
Bottom Pressure:
GR16=4
  LiveReg: %146
  UpdateRegP: SU(2) %144:gr32 = COPY %146:gr32, debug-location !594; fft3d.c:81:21
              to GR16 -2
  UpdateRegP: SU(7) %146:gr32 = nsw IMUL32rm %146:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !602 :: (dereferenceable load 4 from %ir.lj); fft3d.c:83:21
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(7) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %144:gr32, debug-location !599 :: (store 4 into %ir.i12); fft3d.c:82:17
Bottom Pressure:
GR16=6
  LiveReg: %144
  UpdateRegP: SU(6) MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %144:gr32, debug-location !599 :: (store 4 into %ir.i12); fft3d.c:82:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %144:gr32 = nsw ADD32rm %144:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !598 :: (dereferenceable load 4 from %ir.n1); fft3d.c:82:23
Bottom Pressure:
GR16=6
  LiveReg: %144
  UpdateRegP: SU(4) MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %144:gr32, debug-location !595 :: (store 4 into %ir.i11); fft3d.c:81:17
              to 
  UpdateRegP: SU(5) %144:gr32 = nsw ADD32rm %144:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !598 :: (dereferenceable load 4 from %ir.n1); fft3d.c:82:23
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %144:gr32, debug-location !595 :: (store 4 into %ir.i11); fft3d.c:81:17
Bottom Pressure:
GR16=6
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
Bottom Pressure:
GR16=6
  LiveReg: %144
  UpdateRegP: SU(3) %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
              to GR16 -2
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %144:gr32 = COPY %146:gr32, debug-location !594; fft3d.c:81:21
Bottom Pressure:
GR16=4
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %142:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !593 :: (dereferenceable load 4 from %ir.lk); fft3d.c:81:23
Bottom Pressure:
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %146:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !591 :: (dereferenceable load 4 from %ir.i); fft3d.c:81:19
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %146:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !591 :: (dereferenceable load 4 from %ir.i); fft3d.c:81:19
SU(1):   %142:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !593 :: (dereferenceable load 4 from %ir.lk); fft3d.c:81:23
SU(2):   %144:gr32 = COPY %146:gr32, debug-location !594; fft3d.c:81:21
SU(3):   %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
SU(4):   MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %144:gr32, debug-location !595 :: (store 4 into %ir.i11); fft3d.c:81:17
SU(5):   %144:gr32 = nsw ADD32rm %144:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !598 :: (dereferenceable load 4 from %ir.n1); fft3d.c:82:23
SU(6):   MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %144:gr32, debug-location !599 :: (store 4 into %ir.i12); fft3d.c:82:17
SU(7):   %146:gr32 = nsw IMUL32rm %146:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !602 :: (dereferenceable load 4 from %ir.lj); fft3d.c:83:21
SU(8):   MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %146:gr32, debug-location !603 :: (store 4 into %ir.i21); fft3d.c:83:17
SU(9):   %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
SU(10):   MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %146:gr32, debug-location !607 :: (store 4 into %ir.i22); fft3d.c:84:17
SU(11):   CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !610 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:86:20

********** MI Scheduling **********
Swarztrauber:%bb.7 if.then9
  From: %157:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !612 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:87:22
    To: JMP_1 %bb.9, debug-location !617; fft3d.c:88:13
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %157:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !612 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:87:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(6): Data Latency=4 Reg=%157
    SU(5): Data Latency=4 Reg=%157
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %158:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !614 :: (dereferenceable load 4 from %ir.ku); fft3d.c:87:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%158
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %161:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !615 :: (dereferenceable load 4 from %ir.i); fft3d.c:87:36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%161
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%161
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%158
  Successors:
    SU(4): Data Latency=1 Reg=%161
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %161:gr64_nosp = SHL64ri %161:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !612; fft3d.c:87:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%161
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%161
    SU(5): Data Latency=1 Reg=%161
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%161
    SU(0): Data Latency=4 Reg=%157
  Successors:
    SU(7): Data Latency=4 Reg=%162
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%161
    SU(0): Data Latency=4 Reg=%157
  Successors:
    SU(8): Data Latency=4 Reg=%163
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %162:gr64, debug-location !612 :: (store 8 into %ir.31); fft3d.c:87:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%162
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %163:gr64, debug-location !612 :: (store 8 into %ir.31 + 8); fft3d.c:87:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%163
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.9, debug-location !617; fft3d.c:88:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %163:gr64, debug-location !612 :: (store 8 into %ir.31 + 8); fft3d.c:87:22
Bottom Pressure:
GR16=2
  LiveReg: %163
  UpdateRegP: SU(8) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %163:gr64, debug-location !612 :: (store 8 into %ir.31 + 8); fft3d.c:87:22
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 10c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %162:gr64, debug-location !612 :: (store 8 into %ir.31); fft3d.c:87:22
Bottom Pressure:
GR16=4
  LiveReg: %162
  UpdateRegP: SU(7) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %162:gr64, debug-location !612 :: (store 8 into %ir.31); fft3d.c:87:22
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
Bottom Pressure:
GR16=6
  LiveReg: %157
  UpdateRegP: SU(5) %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
              to 
  UpdateRegP: SU(6) %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
              to 
  LiveReg: %161
  UpdateRegP: SU(5) %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
              to GR16 -2
  UpdateRegP: SU(6) %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
Bottom Pressure:
GR16=4
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %161:gr64_nosp = SHL64ri %161:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !612; fft3d.c:87:22
Bottom Pressure:
GR16=4
  LiveReg: %161
  UpdateRegP: SU(4) %161:gr64_nosp = SHL64ri %161:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !612; fft3d.c:87:22
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
Bottom Pressure:
GR16=6
  LiveReg: %161
  UpdateRegP: SU(3) %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
              to 
  LiveReg: %158
  UpdateRegP: SU(3) %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %161:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !615 :: (dereferenceable load 4 from %ir.i); fft3d.c:87:36
Bottom Pressure:
GR16=4
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %158:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !614 :: (dereferenceable load 4 from %ir.ku); fft3d.c:87:31
Bottom Pressure:
GR16=2
  Ready @10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %157:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !612 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:87:22
Bottom Pressure:

  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %157:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !612 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:87:22
SU(1):   %158:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !614 :: (dereferenceable load 4 from %ir.ku); fft3d.c:87:31
SU(2):   %161:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !615 :: (dereferenceable load 4 from %ir.i); fft3d.c:87:36
SU(3):   %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
SU(4):   %161:gr64_nosp = SHL64ri %161:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !612; fft3d.c:87:22
SU(5):   %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
SU(6):   %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
SU(7):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %162:gr64, debug-location !612 :: (store 8 into %ir.31); fft3d.c:87:22
SU(8):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %163:gr64, debug-location !612 :: (store 8 into %ir.31 + 8); fft3d.c:87:22

********** MI Scheduling **********
Swarztrauber:%bb.8 if.else
  From: %147:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:90:22
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %229 
Live Out: %229 
Live Thru: FR32=1
FR32X=1
  LiveReg: %229
  UpdateRegP: SU(8) %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
              to 
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %147:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:90:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(7): Data Latency=4 Reg=%147
    SU(5): Data Latency=4 Reg=%147
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %148:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.ku); fft3d.c:90:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(3): Data Latency=4 Reg=%148
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %151:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.i); fft3d.c:90:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(3): Data Latency=4 Reg=%151
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(2): Data Latency=4 Reg=%151
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%148
  Successors:
    SU(4): Data Latency=1 Reg=%151
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %151:gr64_nosp = SHL64ri %151:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(3): Data Latency=1 Reg=%151
    SU(3): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%151
    SU(5): Data Latency=1 Reg=%151
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(4): Data Latency=1 Reg=%151
    SU(0): Data Latency=4 Reg=%147
  Successors:
    SU(6): Data Latency=4 Reg=%152
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(6):   MOVSDmr %stack.24..compoundliteral, 1, $noreg, 0, $noreg, %152:fr64, debug-location !618 :: (store 8 into %ir.real1); fft3d.c:90:22
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(5): Data Latency=4 Reg=%152
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 10
  Predecessors:
    SU(6): Ord  Latency=1 Memory
    SU(4): Data Latency=1 Reg=%151
    SU(0): Data Latency=4 Reg=%147
  Successors:
    SU(8): Data Latency=4 Reg=%154
    SU(8): Out  Latency=0
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(8):   %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%154
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%154
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOVLPDmr %stack.24..compoundliteral, 1, $noreg, 8, $noreg, %154:vr128, debug-location !618 :: (store 8 into %ir.imag); fft3d.c:90:22
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%154
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %155:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42); fft3d.c:90:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 4
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%155
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %155:gr64, debug-location !618 :: (store 8 into %ir.41); fft3d.c:90:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%155
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %156:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 8, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42 + 8); fft3d.c:90:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 4
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%156
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %156:gr64, debug-location !618 :: (store 8 into %ir.41 + 8); fft3d.c:90:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=%156
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %156:gr64, debug-location !618 :: (store 8 into %ir.41 + 8); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %156
  UpdateRegP: SU(13) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %156:gr64, debug-location !618 :: (store 8 into %ir.41 + 8); fft3d.c:90:22
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 21c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %156:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 8, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42 + 8); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
  Ready @4c
  BotQ.A BotLatency SU(12) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %155:gr64, debug-location !618 :: (store 8 into %ir.41); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %155
  UpdateRegP: SU(11) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %155:gr64, debug-location !618 :: (store 8 into %ir.41); fft3d.c:90:22
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %155:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOVLPDmr %stack.24..compoundliteral, 1, $noreg, 8, $noreg, %154:vr128, debug-location !618 :: (store 8 into %ir.imag); fft3d.c:90:22
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %154
  UpdateRegP: SU(9) MOVLPDmr %stack.24..compoundliteral, 1, $noreg, 8, $noreg, %154:vr128, debug-location !618 :: (store 8 into %ir.imag); fft3d.c:90:22
              to 
  Ready @5c
  BotQ.A BotLatency SU(9) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %154
  UpdateRegP: SU(8) %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
              to FR32 -1    FR32X -1
  Ready @6c
  BotQ.A BotLatency SU(8) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %147
  UpdateRegP: SU(5) %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(7) %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %151
  UpdateRegP: SU(5) %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
              to FR32 -1    FR32X -1
  UpdateRegP: SU(7) %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(7) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %stack.24..compoundliteral, 1, $noreg, 0, $noreg, %152:fr64, debug-location !618 :: (store 8 into %ir.real1); fft3d.c:90:22
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %152
  UpdateRegP: SU(6) MOVSDmr %stack.24..compoundliteral, 1, $noreg, 0, $noreg, %152:fr64, debug-location !618 :: (store 8 into %ir.real1); fft3d.c:90:22
              to 
  Ready @11c
  BotQ.A BotLatency SU(6) 11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(5) 15c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %151:gr64_nosp = SHL64ri %151:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %151
  UpdateRegP: SU(4) %151:gr64_nosp = SHL64ri %151:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %151
  UpdateRegP: SU(3) %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
              to 
  LiveReg: %148
  UpdateRegP: SU(3) %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(3) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %151:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.i); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @21c
  BotQ.A BotLatency SU(2) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %148:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.ku); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %147:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:90:22
Bottom Pressure:
FR32=1
FR32X=1
  Ready @19c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %147:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:90:22
SU(1):   %148:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.ku); fft3d.c:90:22
SU(2):   %151:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.i); fft3d.c:90:22
SU(3):   %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
SU(4):   %151:gr64_nosp = SHL64ri %151:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
SU(5):   %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
SU(6):   MOVSDmr %stack.24..compoundliteral, 1, $noreg, 0, $noreg, %152:fr64, debug-location !618 :: (store 8 into %ir.real1); fft3d.c:90:22
SU(7):   %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
SU(8):   %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
SU(9):   MOVLPDmr %stack.24..compoundliteral, 1, $noreg, 8, $noreg, %154:vr128, debug-location !618 :: (store 8 into %ir.imag); fft3d.c:90:22
SU(10):   %155:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42); fft3d.c:90:22
SU(11):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %155:gr64, debug-location !618 :: (store 8 into %ir.41); fft3d.c:90:22
SU(12):   %156:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 8, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42 + 8); fft3d.c:90:22
SU(13):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %156:gr64, debug-location !618 :: (store 8 into %ir.41 + 8); fft3d.c:90:22

********** MI Scheduling **********
Swarztrauber:%bb.10 for.cond21
  From: %166:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !625 :: (dereferenceable load 4 from %ir.lk); fft3d.c:92:30
    To: JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !628; fft3d.c:92:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %166:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !625 :: (dereferenceable load 4 from %ir.lk); fft3d.c:92:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%166
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %166:gr32 = DEC32r %166:gr32(tied-def 0), implicit-def dead $eflags, debug-location !626; fft3d.c:92:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%166
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%166
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %166:gr32, implicit-def $eflags, debug-location !627 :: (dereferenceable load 4 from %ir.k); fft3d.c:92:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%166
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !628; fft3d.c:92:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %166:gr32, implicit-def $eflags, debug-location !627 :: (dereferenceable load 4 from %ir.k); fft3d.c:92:27
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %166:gr32 = DEC32r %166:gr32(tied-def 0), implicit-def dead $eflags, debug-location !626; fft3d.c:92:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %166:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !625 :: (dereferenceable load 4 from %ir.lk); fft3d.c:92:30
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %166:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !625 :: (dereferenceable load 4 from %ir.lk); fft3d.c:92:30
SU(1):   %166:gr32 = DEC32r %166:gr32(tied-def 0), implicit-def dead $eflags, debug-location !626; fft3d.c:92:33
SU(2):   CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %166:gr32, implicit-def $eflags, debug-location !627 :: (dereferenceable load 4 from %ir.k); fft3d.c:92:27

********** MI Scheduling **********
Swarztrauber:%bb.12 for.cond25
  From: %168:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !633 :: (dereferenceable load 4 from %ir.j); fft3d.c:93:29
    To: JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !637; fft3d.c:93:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %168:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !633 :: (dereferenceable load 4 from %ir.j); fft3d.c:93:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%168
  Single Issue       : false;
SU(1):   CMP32rm %168:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !636 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:93:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%168
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !637; fft3d.c:93:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %168:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !636 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:93:31
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %168:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !633 :: (dereferenceable load 4 from %ir.j); fft3d.c:93:29
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %168:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !633 :: (dereferenceable load 4 from %ir.j); fft3d.c:93:29
SU(1):   CMP32rm %168:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !636 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:93:31

********** MI Scheduling **********
Swarztrauber:%bb.13 for.body27
  From: %170:gr64 = MOV64rm %stack.7.x, 1, $noreg, 0, $noreg, debug-location !638 :: (dereferenceable load 8 from %ir.x); fft3d.c:94:27
    To: JMP_1 %bb.12, debug-location !662; fft3d.c:93:17
 RegionInstrs: 82
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=12
Live In: %0 
Live Out: %0 
Live Thru: GR16=2
  LiveReg: %0
  UpdateRegP: SU(4) %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
              to 
  UpdateRegP: SU(15) %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %170:gr64 = MOV64rm %stack.7.x, 1, $noreg, 0, $noreg, debug-location !638 :: (dereferenceable load 8 from %ir.x); fft3d.c:94:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(17): Data Latency=4 Reg=%170
    SU(6): Data Latency=4 Reg=%170
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %174:gr64_nosp = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.i11); fft3d.c:94:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(3): Data Latency=4 Reg=%174
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %172:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.k); fft3d.c:94:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(23): Data Latency=4 Reg=%172
    SU(14): Data Latency=4 Reg=%172
    SU(3): Data Latency=4 Reg=%172
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(2): Data Latency=4 Reg=%172
    SU(1): Data Latency=4 Reg=%174
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%174
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(3): Data Latency=1 Reg=%174
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%174
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %174:gr64_nosp = SHL64ri %174:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 23
  Predecessors:
    SU(4): Data Latency=1 Reg=%174
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%174
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(5): Data Latency=1 Reg=%174
    SU(5): Out  Latency=0
    SU(0): Data Latency=4 Reg=%170
  Successors:
    SU(10): Data Latency=1 Reg=%174
    SU(9): Data Latency=1 Reg=%174
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %178:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.j); fft3d.c:94:38
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(8): Data Latency=4 Reg=%178
    SU(8): Out  Latency=0
    SU(81): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %178:gr64_nosp = SHL64ri %178:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(7): Data Latency=4 Reg=%178
    SU(7): Out  Latency=0
  Successors:
    SU(34): Data Latency=1 Reg=%178
    SU(32): Data Latency=1 Reg=%178
    SU(19): Data Latency=1 Reg=%178
    SU(18): Data Latency=1 Reg=%178
    SU(10): Data Latency=1 Reg=%178
    SU(9): Data Latency=1 Reg=%178
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
  # preds left       : 2
  # succs left       : 22
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 21
  Predecessors:
    SU(6): Data Latency=1 Reg=%174
    SU(8): Data Latency=1 Reg=%178
  Successors:
    SU(12): Data Latency=4 Reg=%179
    SU(81): Ord  Latency=0 Memory
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(76): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(72): Ord  Latency=0 Memory
    SU(65): Ord  Latency=0 Memory
    SU(62): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
  # preds left       : 2
  # succs left       : 22
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 21
  Predecessors:
    SU(6): Data Latency=1 Reg=%174
    SU(8): Data Latency=1 Reg=%178
  Successors:
    SU(11): Data Latency=4 Reg=%180
    SU(81): Ord  Latency=0 Memory
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(76): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(72): Ord  Latency=0 Memory
    SU(65): Ord  Latency=0 Memory
    SU(62): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %180:gr64, debug-location !638 :: (store 8 into %ir.52 + 8); fft3d.c:94:27
  # preds left       : 3
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(10): Data Latency=4 Reg=%180
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(73): Ord  Latency=1 Memory
    SU(67): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %179:gr64, debug-location !638 :: (store 8 into %ir.52); fft3d.c:94:27
  # preds left       : 3
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%179
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(73): Ord  Latency=1 Memory
    SU(67): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %183:gr64_nosp = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !645 :: (dereferenceable load 4 from %ir.i12); fft3d.c:95:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(14): Data Latency=4 Reg=%183
    SU(14): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 20
  Predecessors:
    SU(13): Data Latency=4 Reg=%183
    SU(13): Out  Latency=0
    SU(2): Data Latency=4 Reg=%172
  Successors:
    SU(15): Data Latency=1 Reg=%183
    SU(15): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 19
  Predecessors:
    SU(14): Data Latency=1 Reg=%183
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%183
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %183:gr64_nosp = SHL64ri %183:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 18
  Predecessors:
    SU(15): Data Latency=1 Reg=%183
    SU(15): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%183
    SU(17): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 17
  Predecessors:
    SU(16): Data Latency=1 Reg=%183
    SU(16): Out  Latency=0
    SU(0): Data Latency=4 Reg=%170
  Successors:
    SU(19): Data Latency=1 Reg=%183
    SU(18): Data Latency=1 Reg=%183
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
  # preds left       : 4
  # succs left       : 20
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 16
  Predecessors:
    SU(17): Data Latency=1 Reg=%183
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(8): Data Latency=1 Reg=%178
  Successors:
    SU(20): Data Latency=4 Reg=%186
    SU(81): Ord  Latency=0 Memory
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(76): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(72): Ord  Latency=0 Memory
    SU(65): Ord  Latency=0 Memory
    SU(62): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
  # preds left       : 4
  # succs left       : 20
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 16
  Predecessors:
    SU(17): Data Latency=1 Reg=%183
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(8): Data Latency=1 Reg=%178
  Successors:
    SU(21): Data Latency=4 Reg=%187
    SU(81): Ord  Latency=0 Memory
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(76): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(72): Ord  Latency=0 Memory
    SU(65): Ord  Latency=0 Memory
    SU(62): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %186:gr64, debug-location !644 :: (store 8 into %ir.59); fft3d.c:95:27
  # preds left       : 5
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(19): Ord  Latency=0 Memory
    SU(18): Data Latency=4 Reg=%186
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(74): Ord  Latency=1 Memory
    SU(68): Ord  Latency=1 Memory
    SU(64): Ord  Latency=1 Memory
    SU(61): Ord  Latency=1 Memory
    SU(54): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(47): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %187:gr64, debug-location !644 :: (store 8 into %ir.59 + 8); fft3d.c:95:27
  # preds left       : 5
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(19): Data Latency=4 Reg=%187
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(74): Ord  Latency=1 Memory
    SU(68): Ord  Latency=1 Memory
    SU(64): Ord  Latency=1 Memory
    SU(61): Ord  Latency=1 Memory
    SU(54): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(47): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %189:gr64 = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !649 :: (dereferenceable load 4 from %ir.i21); fft3d.c:96:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(23): Data Latency=4 Reg=%189
    SU(23): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(22): Data Latency=4 Reg=%189
    SU(22): Out  Latency=0
    SU(2): Data Latency=4 Reg=%172
  Successors:
    SU(24): Data Latency=1 Reg=%189
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %190:gr64 = IMUL64rri32 %189:gr64, 528, implicit-def dead $eflags, debug-location !651; fft3d.c:96:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(23): Data Latency=1 Reg=%189
  Successors:
    SU(34): Data Latency=1 Reg=%190
    SU(32): Data Latency=1 Reg=%190
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %192:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real459); fft3d.c:96:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 13
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(26): Data Latency=4 Reg=%192
    SU(26): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(26):   %192:fr64 = ADDSDrm %192:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real4610); fft3d.c:96:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(25): Data Latency=4 Reg=%192
    SU(25): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%192
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, %192:fr64, debug-location !654 :: (store 8 into %ir.real448); fft3d.c:96:39
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 5
  Predecessors:
    SU(26): Data Latency=4 Reg=%192
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(30): Ord  Latency=0 Memory
    SU(33): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(28):   %194:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag49); fft3d.c:96:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 13
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%194
    SU(29): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(29):   %194:fr64 = ADDSDrm %194:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag50); fft3d.c:96:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(28): Data Latency=4 Reg=%194
    SU(28): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(30): Data Latency=4 Reg=%194
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, %194:fr64, debug-location !654 :: (store 8 into %ir.imag48); fft3d.c:96:39
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 5
  Predecessors:
    SU(29): Data Latency=4 Reg=%194
    SU(27): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(33): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(31):   %195:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69); fft3d.c:96:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 4
  Predecessors:
    SU(30): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
  Successors:
    SU(32): Data Latency=4 Reg=%195
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(32):   MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(31): Data Latency=4 Reg=%195
    SU(24): Data Latency=1 Reg=%190
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%178
  Successors:
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(33):   %196:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69 + 8); fft3d.c:96:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 4
  Predecessors:
    SU(30): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
  Successors:
    SU(34): Data Latency=4 Reg=%196
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(34):   MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(33): Data Latency=4 Reg=%196
    SU(24): Data Latency=1 Reg=%190
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%178
  Successors:
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(35):   %197:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !655 :: (dereferenceable load 4 from %ir.i22); fft3d.c:97:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(37): Data Latency=4 Reg=%197
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(36):   %199:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.k); fft3d.c:97:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(37): Data Latency=4 Reg=%199
    SU(37): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(37):   %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(36): Data Latency=4 Reg=%199
    SU(36): Out  Latency=0
    SU(35): Data Latency=4 Reg=%197
  Successors:
    SU(38): Data Latency=1 Reg=%199
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(38):   %200:gr64 = IMUL64rri32 %199:gr64, 528, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(37): Data Latency=1 Reg=%199
  Successors:
    SU(80): Data Latency=1 Reg=%200
    SU(78): Data Latency=1 Reg=%200
  Pressure Diff      : 
  Single Issue       : false;
SU(39):   %202:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !659 :: (dereferenceable load 4 from %ir.j); fft3d.c:97:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(40): Data Latency=4 Reg=%202
    SU(40): Out  Latency=0
    SU(81): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(40):   %202:gr64_nosp = SHL64ri %202:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(39): Data Latency=4 Reg=%202
    SU(39): Out  Latency=0
  Successors:
    SU(80): Data Latency=1 Reg=%202
    SU(78): Data Latency=1 Reg=%202
  Pressure Diff      : 
  Single Issue       : false;
SU(41):   %204:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6215); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 15
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(42): Data Latency=4 Reg=%204
    SU(42): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(42):   %204:fr64 = SUBSDrm %204:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6316); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 11
  Predecessors:
    SU(41): Data Latency=4 Reg=%204
    SU(41): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(45): Data Latency=4 Reg=%204
    SU(44): Data Latency=4 Reg=%204
  Pressure Diff      : 
  Single Issue       : false;
SU(43):   %214:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real5913)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(44): Data Latency=4 Reg=%214
    SU(44): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(44):   %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(42): Data Latency=4 Reg=%204
    SU(43): Out  Latency=0
    SU(43): Data Latency=4 Reg=%214
  Successors:
    SU(57): Data Latency=1 Reg=%214
    SU(57): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(45):   MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 0, $noreg, %204:fr64, debug-location !660 :: (store 8 into %ir.real6114); fft3d.c:97:39
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(42): Data Latency=4 Reg=%204
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(48): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(46):   %207:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag66); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(47): Data Latency=4 Reg=%207
    SU(47): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(47):   %207:fr64 = SUBSDrm %207:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag67); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 4
  Predecessors:
    SU(46): Data Latency=4 Reg=%207
    SU(46): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(48): Data Latency=4 Reg=%207
  Pressure Diff      : 
  Single Issue       : false;
SU(48):   MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 8, $noreg, %207:fr64, debug-location !660 :: (store 8 into %ir.imag65); fft3d.c:97:39
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(47): Data Latency=4 Reg=%207
    SU(45): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(49):   %208:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag71); fft3d.c:97:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(56): Data Latency=4 Reg=%208
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(50):   %210:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7419); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 15
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(51): Data Latency=4 Reg=%210
    SU(51): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(51):   %210:fr64 = SUBSDrm %210:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7520); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 11
  Predecessors:
    SU(50): Data Latency=4 Reg=%210
    SU(50): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(52): Data Latency=4 Reg=%210
  Pressure Diff      : 
  Single Issue       : false;
SU(52):   MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 0, $noreg, %210:fr64, debug-location !660 :: (store 8 into %ir.real7318); fft3d.c:97:39
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(51): Data Latency=4 Reg=%210
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(53):   %213:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag78); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 15
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(54): Data Latency=4 Reg=%213
    SU(54): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(54):   %213:fr64 = SUBSDrm %213:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag79); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 11
  Predecessors:
    SU(53): Data Latency=4 Reg=%213
    SU(53): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(56): Data Latency=4 Reg=%213
    SU(55): Data Latency=4 Reg=%213
    SU(56): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(55):   MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 8, $noreg, %213:fr64, debug-location !660 :: (store 8 into %ir.imag77); fft3d.c:97:39
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(54): Data Latency=4 Reg=%213
    SU(52): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(56): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(56):   %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(55): Anti Latency=0
    SU(54): Data Latency=4 Reg=%213
    SU(54): Out  Latency=0
    SU(49): Data Latency=4 Reg=%208
  Successors:
    SU(57): Data Latency=1 Reg=%213
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(57):   %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 6
  Predecessors:
    SU(56): Data Latency=1 Reg=%213
    SU(44): Data Latency=1 Reg=%214
    SU(44): Out  Latency=0
  Successors:
    SU(58): Data Latency=1 Reg=%214
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(58):   MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, %214:fr64, debug-location !660 :: (store 8 into %ir.real5812); fft3d.c:97:39
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 5
  Predecessors:
    SU(57): Data Latency=1 Reg=%214
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(76): Ord  Latency=0 Memory
    SU(79): Ord  Latency=1 Memory
    SU(77): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(59):   %215:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8521); fft3d.c:97:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(66): Data Latency=4 Reg=%215
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(60):   %217:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8823); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 15
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(61): Data Latency=4 Reg=%217
    SU(61): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(61):   %217:fr64 = SUBSDrm %217:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8924); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 11
  Predecessors:
    SU(60): Data Latency=4 Reg=%217
    SU(60): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(62): Data Latency=4 Reg=%217
  Pressure Diff      : 
  Single Issue       : false;
SU(62):   MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 0, $noreg, %217:fr64, debug-location !660 :: (store 8 into %ir.real8722); fft3d.c:97:39
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(61): Data Latency=4 Reg=%217
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(65): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(63):   %220:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag92); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 15
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(64): Data Latency=4 Reg=%220
    SU(64): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(64):   %220:fr64 = SUBSDrm %220:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag93); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 11
  Predecessors:
    SU(63): Data Latency=4 Reg=%220
    SU(63): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(66): Data Latency=4 Reg=%220
    SU(65): Data Latency=4 Reg=%220
    SU(66): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(65):   MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 8, $noreg, %220:fr64, debug-location !660 :: (store 8 into %ir.imag91); fft3d.c:97:39
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(64): Data Latency=4 Reg=%220
    SU(62): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(66): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(66):   %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(65): Anti Latency=0
    SU(64): Data Latency=4 Reg=%220
    SU(64): Out  Latency=0
    SU(59): Data Latency=4 Reg=%215
  Successors:
    SU(71): Data Latency=1 Reg=%220
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(67):   %222:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10026); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 15
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(68): Data Latency=4 Reg=%222
    SU(68): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(68):   %222:fr64 = SUBSDrm %222:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10127); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 11
  Predecessors:
    SU(67): Data Latency=4 Reg=%222
    SU(67): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(72): Data Latency=4 Reg=%222
    SU(70): Data Latency=4 Reg=%222
  Pressure Diff      : 
  Single Issue       : false;
SU(69):   %226:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag97)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(70): Data Latency=4 Reg=%226
    SU(70): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(70):   %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(68): Data Latency=4 Reg=%222
    SU(69): Out  Latency=0
    SU(69): Data Latency=4 Reg=%226
  Successors:
    SU(71): Data Latency=1 Reg=%226
    SU(71): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(71):   %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 6
  Predecessors:
    SU(70): Data Latency=1 Reg=%226
    SU(70): Out  Latency=0
    SU(66): Data Latency=1 Reg=%220
  Successors:
    SU(76): Data Latency=1 Reg=%226
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(72):   MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 0, $noreg, %222:fr64, debug-location !660 :: (store 8 into %ir.real9925); fft3d.c:97:39
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(68): Data Latency=4 Reg=%222
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(75): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(73):   %225:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag104); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(74): Data Latency=4 Reg=%225
    SU(74): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(74):   %225:fr64 = SUBSDrm %225:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag105); fft3d.c:97:39
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 4
  Predecessors:
    SU(73): Data Latency=4 Reg=%225
    SU(73): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(75): Data Latency=4 Reg=%225
  Pressure Diff      : 
  Single Issue       : false;
SU(75):   MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 8, $noreg, %225:fr64, debug-location !660 :: (store 8 into %ir.imag103); fft3d.c:97:39
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(74): Data Latency=4 Reg=%225
    SU(72): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(76):   MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, %226:fr64, debug-location !660 :: (store 8 into %ir.imag84); fft3d.c:97:39
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 5
  Predecessors:
    SU(71): Data Latency=1 Reg=%226
    SU(58): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(79): Ord  Latency=1 Memory
    SU(77): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(77):   %227:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
    SU(76): Ord  Latency=1 Memory
    SU(58): Ord  Latency=1 Memory
  Successors:
    SU(78): Data Latency=4 Reg=%227
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(78):   MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
  # preds left       : 9
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(77): Data Latency=4 Reg=%227
    SU(40): Data Latency=1 Reg=%202
    SU(38): Data Latency=1 Reg=%200
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(79):   %228:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98 + 8); fft3d.c:97:39
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 4
  Predecessors:
    SU(76): Ord  Latency=1 Memory
    SU(58): Ord  Latency=1 Memory
  Successors:
    SU(80): Data Latency=4 Reg=%228
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(80):   MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
  # preds left       : 9
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(79): Data Latency=4 Reg=%228
    SU(40): Data Latency=1 Reg=%202
    SU(38): Data Latency=1 Reg=%200
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(81):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !661 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:93:40
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(39): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.12, debug-location !662; fft3d.c:93:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(81): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 29
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 80 78 75 48 81 
  Cand SU(80) ORDER                              
  Cand SU(81) ORDER                              
Pick Bot ORDER     
Scheduling SU(81) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !661 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:93:40
Bottom Pressure:
GR16=2
  Ready @3c
  BotQ.A TopLatency SU(81) 13c
  BotQ.A BotLatency SU(81) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 80 78 75 48 
  Cand SU(80) ORDER                              
Pick Bot ORDER     
Scheduling SU(80) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
Bottom Pressure:
GR16=8
  LiveReg: %200
  UpdateRegP: SU(78) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
              to GR16 4
  UpdateRegP: SU(80) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
              to GR16 4
  LiveReg: %202
  UpdateRegP: SU(78) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
              to GR16 2
  UpdateRegP: SU(80) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
              to GR16 2
  LiveReg: %228
  UpdateRegP: SU(80) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
              to 
  Ready @0c
  BotQ.A TopLatency SU(80) 29c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 78 75 79 
  Cand SU(48) ORDER                              
  Cand SU(78) ORDER                              
  Cand SU(79) ORDER                              
Pick Bot ORDER     
Scheduling SU(79) %228:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98 + 8); fft3d.c:97:39
Bottom Pressure:
GR16=6
  Ready @4c
  BotQ.A BotLatency SU(79) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 78 75 
  Cand SU(48) ORDER                              
  Cand SU(78) ORDER                              
Pick Bot ORDER     
Scheduling SU(78) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
Bottom Pressure:
GR16=8
  LiveReg: %227
  UpdateRegP: SU(78) MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 75 77 40 38 34 32 
  Cand SU(48) ORDER                              
  Cand SU(75) ORDER                              
  Cand SU(77) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(77) %227:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98); fft3d.c:97:39
Bottom Pressure:
GR16=6
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 75 32 40 38 34 76 
  Cand SU(48) ORDER                              
  Cand SU(75) ORDER                              
  Cand SU(76) ORDER                              
Pick Bot ORDER     
Scheduling SU(76) MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, %226:fr64, debug-location !660 :: (store 8 into %ir.imag84); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %226
  UpdateRegP: SU(76) MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, %226:fr64, debug-location !660 :: (store 8 into %ir.imag84); fft3d.c:97:39
              to 
  Ready @5c
  BotQ.A BotLatency SU(76) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 75 32 40 38 34 71 58 
  Cand SU(48) ORDER                              
  Cand SU(75) ORDER                              
Pick Bot ORDER     
Scheduling SU(75) MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 8, $noreg, %225:fr64, debug-location !660 :: (store 8 into %ir.imag103); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %225
  UpdateRegP: SU(75) MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 8, $noreg, %225:fr64, debug-location !660 :: (store 8 into %ir.imag103); fft3d.c:97:39
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 71 74 72 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(71) ORDER                              
  Cand SU(74) ORDER                              
Pick Bot ORDER     
Scheduling SU(74) %225:fr64 = SUBSDrm %225:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag105); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %225
  UpdateRegP: SU(74) %225:fr64 = SUBSDrm %225:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag105); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 71 72 73 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(71) ORDER                              
  Cand SU(72) ORDER                              
  Cand SU(73) ORDER                              
Pick Bot ORDER     
Scheduling SU(73) %225:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag104); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @9c
  BotQ.A BotLatency SU(73) 8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 71 72 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(71) ORDER                              
  Cand SU(72) ORDER                              
Pick Bot ORDER     
Scheduling SU(72) MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 0, $noreg, %222:fr64, debug-location !660 :: (store 8 into %ir.real9925); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %222
  UpdateRegP: SU(70) %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
              to 
  UpdateRegP: SU(72) MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 0, $noreg, %222:fr64, debug-location !660 :: (store 8 into %ir.real9925); fft3d.c:97:39
              to 
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 71 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(71) ORDER                              
Pick Bot ORDER     
Scheduling SU(71) %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %226
  UpdateRegP: SU(71) %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
              to 
  LiveReg: %220
  UpdateRegP: SU(71) %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 70 66 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(32) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(70) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(70) %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %226
  UpdateRegP: SU(70) %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 66 68 69 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(32) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(68) ORDER                              
  Cand SU(69) ORDER                              
Pick Bot ORDER     
Scheduling SU(69) %226:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag97)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @11c
  BotQ.A BotLatency SU(69) 11c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 66 68 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(66) ORDER                              
  Cand SU(68) ORDER                              
Pick Bot ORDER     
Scheduling SU(68) %222:fr64 = SUBSDrm %222:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10127); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %222
  UpdateRegP: SU(68) %222:fr64 = SUBSDrm %222:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10127); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 66 67 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(66) ORDER                              
  Cand SU(67) ORDER                              
Pick Bot ORDER     
Scheduling SU(67) %222:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10026); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @15c
  BotQ.A BotLatency SU(67) 15c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 66 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(66) ORDER                              
Pick Bot ORDER     
Scheduling SU(66) %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %220
  UpdateRegP: SU(65) MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 8, $noreg, %220:fr64, debug-location !660 :: (store 8 into %ir.imag91); fft3d.c:97:39
              to 
  UpdateRegP: SU(66) %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
              to 
  LiveReg: %215
  UpdateRegP: SU(66) %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 65 59 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(65) ORDER                              
Pick Bot ORDER     
Scheduling SU(65) MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 8, $noreg, %220:fr64, debug-location !660 :: (store 8 into %ir.imag91); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @7c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 59 64 62 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
  Cand SU(64) ORDER                              
Pick Bot ORDER     
Scheduling SU(64) %220:fr64 = SUBSDrm %220:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag93); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %220
  UpdateRegP: SU(64) %220:fr64 = SUBSDrm %220:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag93); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 59 62 63 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
  Cand SU(62) ORDER                              
  Cand SU(63) ORDER                              
Pick Bot ORDER     
Scheduling SU(63) %220:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag92); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @15c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 59 62 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
  Cand SU(62) ORDER                              
Pick Bot ORDER     
Scheduling SU(62) MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 0, $noreg, %217:fr64, debug-location !660 :: (store 8 into %ir.real8722); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %217
  UpdateRegP: SU(62) MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 0, $noreg, %217:fr64, debug-location !660 :: (store 8 into %ir.real8722); fft3d.c:97:39
              to 
  Ready @7c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 59 61 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
  Cand SU(61) ORDER                              
Pick Bot ORDER     
Scheduling SU(61) %217:fr64 = SUBSDrm %217:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8924); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %217
  UpdateRegP: SU(61) %217:fr64 = SUBSDrm %217:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8924); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 59 60 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
  Cand SU(60) ORDER                              
Pick Bot ORDER     
Scheduling SU(60) %217:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8823); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @15c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 59 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
Pick Bot ORDER     
Scheduling SU(59) %215:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8521); fft3d.c:97:39
Bottom Pressure:
GR16=6
  Ready @11c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 58 32 40 38 34 
  Cand SU(48) ORDER                              
  Cand SU(58) ORDER                              
Pick Bot ORDER     
Scheduling SU(58) MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, %214:fr64, debug-location !660 :: (store 8 into %ir.real5812); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %214
  UpdateRegP: SU(58) MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, %214:fr64, debug-location !660 :: (store 8 into %ir.real5812); fft3d.c:97:39
              to 
  Ready @5c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 57 
  Cand SU(48) ORDER                              
  Cand SU(57) ORDER                              
Pick Bot ORDER     
Scheduling SU(57) %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %214
  UpdateRegP: SU(57) %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
              to 
  LiveReg: %213
  UpdateRegP: SU(57) %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @6c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 56 44 
  Cand SU(48) ORDER                              
  Cand SU(56) ORDER                              
Pick Bot ORDER     
Scheduling SU(56) %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %213
  UpdateRegP: SU(55) MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 8, $noreg, %213:fr64, debug-location !660 :: (store 8 into %ir.imag77); fft3d.c:97:39
              to 
  UpdateRegP: SU(56) %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
              to 
  LiveReg: %208
  UpdateRegP: SU(56) %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @7c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 55 49 
  Cand SU(48) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(55) ORDER                              
Pick Bot ORDER     
Scheduling SU(55) MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 8, $noreg, %213:fr64, debug-location !660 :: (store 8 into %ir.imag77); fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  Ready @7c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 49 54 52 
  Cand SU(48) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(54) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(54) %213:fr64 = SUBSDrm %213:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag79); fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %213
  UpdateRegP: SU(54) %213:fr64 = SUBSDrm %213:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag79); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @11c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 49 52 53 
  Cand SU(48) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(53) ORDER                              
Pick Bot ORDER     
Scheduling SU(53) %213:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag78); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @15c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 49 52 
  Cand SU(48) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(52) ORDER                              
Pick Bot ORDER     
Scheduling SU(52) MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 0, $noreg, %210:fr64, debug-location !660 :: (store 8 into %ir.real7318); fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %210
  UpdateRegP: SU(52) MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 0, $noreg, %210:fr64, debug-location !660 :: (store 8 into %ir.real7318); fft3d.c:97:39
              to 
  Ready @7c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 49 51 
  Cand SU(48) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) %210:fr64 = SUBSDrm %210:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7520); fft3d.c:97:39
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %210
  UpdateRegP: SU(51) %210:fr64 = SUBSDrm %210:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7520); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 49 50 
  Cand SU(48) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(40) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(50) ORDER                              
Pick Bot ORDER     
Scheduling SU(50) %210:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7419); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @15c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 49 
  Cand SU(48) ORDER                              
  Cand SU(49) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) %208:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag71); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @11c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 34 32 40 38 44 
  Cand SU(48) ORDER                              
Pick Bot ORDER     
Scheduling SU(48) MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 8, $noreg, %207:fr64, debug-location !660 :: (store 8 into %ir.imag65); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %207
  UpdateRegP: SU(48) MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 8, $noreg, %207:fr64, debug-location !660 :: (store 8 into %ir.imag65); fft3d.c:97:39
              to 
  Ready @8c
  BotQ.A TopLatency SU(48) 22c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 34 32 40 38 47 45 
  Cand SU(44) ORDER                              
  Cand SU(47) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) %207:fr64 = SUBSDrm %207:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag67); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %207
  UpdateRegP: SU(47) %207:fr64 = SUBSDrm %207:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag67); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 34 32 40 38 45 46 
  Cand SU(44) ORDER                              
  Cand SU(45) ORDER                              
  Cand SU(46) ORDER                              
Pick Bot ORDER     
Scheduling SU(46) %207:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag66); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @16c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 34 32 40 38 45 
  Cand SU(44) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 0, $noreg, %204:fr64, debug-location !660 :: (store 8 into %ir.real6114); fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %204
  UpdateRegP: SU(44) %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
              to 
  UpdateRegP: SU(45) MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 0, $noreg, %204:fr64, debug-location !660 :: (store 8 into %ir.real6114); fft3d.c:97:39
              to 
  Ready @9c
  BotQ.A TopLatency SU(45) 22c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 34 32 40 38 
  Cand SU(44) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %214
  UpdateRegP: SU(44) %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @9c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 34 32 40 42 43 
  Cand SU(38) ORDER                              
  Cand SU(40) ORDER                              
  Cand SU(42) ORDER                              
  Cand SU(43) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %214:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real5913)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @13c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 34 32 40 42 
  Cand SU(38) ORDER                              
  Cand SU(40) ORDER                              
  Cand SU(42) ORDER                              
Pick Bot ORDER     
Scheduling SU(42) %204:fr64 = SUBSDrm %204:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6316); fft3d.c:97:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %204
  UpdateRegP: SU(42) %204:fr64 = SUBSDrm %204:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6316); fft3d.c:97:39
              to FR32 -1    FR32X -1
  Ready @13c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 34 32 40 41 
  Cand SU(38) ORDER                              
  Cand SU(40) ORDER                              
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %204:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6215); fft3d.c:97:39
Bottom Pressure:
GR16=6
  Ready @17c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 34 32 40 
  Cand SU(38) ORDER                              
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %202:gr64_nosp = SHL64ri %202:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
Bottom Pressure:
GR16=6
  LiveReg: %202
  UpdateRegP: SU(40) %202:gr64_nosp = SHL64ri %202:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
              to GR16 -2
  Ready @10c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 34 32 39 
  Cand SU(38) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %202:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !659 :: (dereferenceable load 4 from %ir.j); fft3d.c:97:34
Bottom Pressure:
GR16=4
  Ready @14c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 34 32 
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %200:gr64 = IMUL64rri32 %199:gr64, 528, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
Bottom Pressure:
GR16=4
  LiveReg: %199
  UpdateRegP: SU(38) %200:gr64 = IMUL64rri32 %199:gr64, 528, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
              to GR16 -2
  Ready @10c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 34 37 
  Cand SU(32) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
Bottom Pressure:
GR16=6
  LiveReg: %199
  UpdateRegP: SU(37) %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
              to 
  LiveReg: %197
  UpdateRegP: SU(37) %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
              to GR16 -2
  Ready @11c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 34 36 35 
  Cand SU(32) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %199:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.k); fft3d.c:97:31
Bottom Pressure:
GR16=4
  Ready @15c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 34 35 
  Cand SU(32) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) %197:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !655 :: (dereferenceable load 4 from %ir.i22); fft3d.c:97:25
Bottom Pressure:
GR16=2
  Ready @15c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 34 
  Cand SU(32) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
Bottom Pressure:
GR16=8
  LiveReg: %190
  UpdateRegP: SU(32) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
              to GR16 4
  UpdateRegP: SU(34) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
              to GR16 4
  LiveReg: %178
  UpdateRegP: SU(9) %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
              to 
  UpdateRegP: SU(10) %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
              to 
  UpdateRegP: SU(18) %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
              to 
  UpdateRegP: SU(19) %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
              to 
  UpdateRegP: SU(32) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
              to GR16 2
  UpdateRegP: SU(34) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
              to GR16 2
  LiveReg: %196
  UpdateRegP: SU(34) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
              to 
  Ready @11c
  BotQ.A TopLatency SU(34) 27c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 33 
  Cand SU(32) ORDER                              
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %196:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69 + 8); fft3d.c:96:39
Bottom Pressure:
GR16=6
  Ready @15c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
Bottom Pressure:
GR16=8
  LiveReg: %195
  UpdateRegP: SU(32) MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
              to 
  Ready @12c
  BotQ.A TopLatency SU(32) 27c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 24 
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %195:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69); fft3d.c:96:39
Bottom Pressure:
GR16=6
  Ready @16c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 30 
  Cand SU(24) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, %194:fr64, debug-location !654 :: (store 8 into %ir.imag48); fft3d.c:96:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %194
  UpdateRegP: SU(30) MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, %194:fr64, debug-location !654 :: (store 8 into %ir.imag48); fft3d.c:96:39
              to 
  Ready @17c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 29 27 
  Cand SU(24) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %194:fr64 = ADDSDrm %194:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag50); fft3d.c:96:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %194
  UpdateRegP: SU(29) %194:fr64 = ADDSDrm %194:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag50); fft3d.c:96:39
              to FR32 -1    FR32X -1
  Ready @21c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 27 28 
  Cand SU(24) ORDER                              
  Cand SU(27) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %194:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag49); fft3d.c:96:39
Bottom Pressure:
GR16=6
  Ready @25c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 27 
  Cand SU(24) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, %192:fr64, debug-location !654 :: (store 8 into %ir.real448); fft3d.c:96:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %192
  UpdateRegP: SU(27) MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, %192:fr64, debug-location !654 :: (store 8 into %ir.real448); fft3d.c:96:39
              to 
  Ready @17c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 26 
  Cand SU(24) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %192:fr64 = ADDSDrm %192:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real4610); fft3d.c:96:39
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %192
  UpdateRegP: SU(26) %192:fr64 = ADDSDrm %192:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real4610); fft3d.c:96:39
              to FR32 -1    FR32X -1
  Ready @21c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 25 21 20 
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %192:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real459); fft3d.c:96:39
Bottom Pressure:
GR16=6
  Ready @25c
BotQ.A @14c
  Retired: 57
  Executed: 14c
  Critical: 14c, 57 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 20 21 
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %190:gr64 = IMUL64rri32 %189:gr64, 528, implicit-def dead $eflags, debug-location !651; fft3d.c:96:21
Bottom Pressure:
GR16=6
  LiveReg: %189
  UpdateRegP: SU(24) %190:gr64 = IMUL64rri32 %189:gr64, 528, implicit-def dead $eflags, debug-location !651; fft3d.c:96:21
              to GR16 -2
  Ready @14c
BotQ.A @14c
  Retired: 58
  Executed: 14c
  Critical: 14c, 58 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 23 
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
Bottom Pressure:
GR16=8
  LiveReg: %189
  UpdateRegP: SU(23) %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
              to 
  LiveReg: %172
  UpdateRegP: SU(3) %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
              to 
  UpdateRegP: SU(14) %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
              to 
  UpdateRegP: SU(23) %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
              to GR16 -2
  Ready @15c
BotQ.A @14c
  Retired: 59
  Executed: 14c
  Critical: 14c, 59 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 22 
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %189:gr64 = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !649 :: (dereferenceable load 4 from %ir.i21); fft3d.c:96:25
Bottom Pressure:
GR16=6
  Ready @19c
  *** Max MOps 4 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 60
  Executed: 15c
  Critical: 15c, 60 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %187:gr64, debug-location !644 :: (store 8 into %ir.59 + 8); fft3d.c:95:27
Bottom Pressure:
GR16=8
  LiveReg: %187
  UpdateRegP: SU(21) MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %187:gr64, debug-location !644 :: (store 8 into %ir.59 + 8); fft3d.c:95:27
              to 
  Ready @22c
BotQ.A @15c
  Retired: 61
  Executed: 15c
  Critical: 15c, 61 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %186:gr64, debug-location !644 :: (store 8 into %ir.59); fft3d.c:95:27
Bottom Pressure:
GR16=10
  LiveReg: %186
  UpdateRegP: SU(20) MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %186:gr64, debug-location !644 :: (store 8 into %ir.59); fft3d.c:95:27
              to 
  Ready @22c
BotQ.A @15c
  Retired: 62
  Executed: 15c
  Critical: 15c, 62 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 18 
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
Bottom Pressure:
GR16=10
  LiveReg: %183
  UpdateRegP: SU(18) %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
              to GR16 -2
  UpdateRegP: SU(19) %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(19) 16c
BotQ.A @15c
  Retired: 63
  Executed: 15c
  Critical: 15c, 63 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
Bottom Pressure:
GR16=8
  Ready @26c
  *** Max MOps 4 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 64
  Executed: 16c
  Critical: 16c, 64 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 12 11 
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
Bottom Pressure:
GR16=10
  LiveReg: %183
  UpdateRegP: SU(17) %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
              to 
  LiveReg: %170
  UpdateRegP: SU(6) %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
              to 
  UpdateRegP: SU(17) %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(17) 17c
BotQ.A @16c
  Retired: 65
  Executed: 16c
  Critical: 16c, 65 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 16 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %183:gr64_nosp = SHL64ri %183:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
Bottom Pressure:
GR16=10
  LiveReg: %183
  UpdateRegP: SU(16) %183:gr64_nosp = SHL64ri %183:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(16) 18c
BotQ.A @16c
  Retired: 66
  Executed: 16c
  Critical: 16c, 66 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 15 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
Bottom Pressure:
GR16=10
  LiveReg: %183
  UpdateRegP: SU(15) %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
              to GR16 -2
  Ready @29c
  BotQ.A BotLatency SU(15) 19c
BotQ.A @16c
  Retired: 67
  Executed: 16c
  Critical: 16c, 67 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 14 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
Bottom Pressure:
GR16=10
  LiveReg: %183
  UpdateRegP: SU(14) %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(14) 20c
  *** Max MOps 4 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 68
  Executed: 17c
  Critical: 17c, 68 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 13 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %183:gr64_nosp = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !645 :: (dereferenceable load 4 from %ir.i12); fft3d.c:95:29
Bottom Pressure:
GR16=8
  Ready @34c
  BotQ.A BotLatency SU(13) 24c
BotQ.A @17c
  Retired: 69
  Executed: 17c
  Critical: 17c, 69 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %179:gr64, debug-location !638 :: (store 8 into %ir.52); fft3d.c:94:27
Bottom Pressure:
GR16=10
  LiveReg: %179
  UpdateRegP: SU(12) MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %179:gr64, debug-location !638 :: (store 8 into %ir.52); fft3d.c:94:27
              to 
  Ready @27c
BotQ.A @17c
  Retired: 70
  Executed: 17c
  Critical: 17c, 70 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %180:gr64, debug-location !638 :: (store 8 into %ir.52 + 8); fft3d.c:94:27
Bottom Pressure:
GR16=12
  LiveReg: %180
  UpdateRegP: SU(11) MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %180:gr64, debug-location !638 :: (store 8 into %ir.52 + 8); fft3d.c:94:27
              to 
  Ready @27c
BotQ.A @17c
  Retired: 71
  Executed: 17c
  Critical: 17c, 71 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
Bottom Pressure:
GR16=12
  LiveReg: %174
  UpdateRegP: SU(9) %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
              to GR16 -2
  UpdateRegP: SU(10) %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
              to GR16 -2
  Ready @31c
  *** Max MOps 4 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 72
  Executed: 18c
  Critical: 18c, 72 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
Bottom Pressure:
GR16=10
  Ready @31c
BotQ.A @18c
  Retired: 73
  Executed: 18c
  Critical: 18c, 73 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %178:gr64_nosp = SHL64ri %178:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
Bottom Pressure:
GR16=10
  LiveReg: %178
  UpdateRegP: SU(8) %178:gr64_nosp = SHL64ri %178:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
              to GR16 -2
  Ready @32c
BotQ.A @18c
  Retired: 74
  Executed: 18c
  Critical: 18c, 74 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %178:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.j); fft3d.c:94:38
Bottom Pressure:
GR16=8
  Ready @36c
  BotQ.A BotLatency SU(7) 26c
BotQ.A @18c
  Retired: 75
  Executed: 18c
  Critical: 18c, 75 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
Bottom Pressure:
GR16=8
  LiveReg: %174
  UpdateRegP: SU(6) %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
              to GR16 -2
  Ready @32c
  *** Max MOps 4 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 76
  Executed: 19c
  Critical: 19c, 76 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %174:gr64_nosp = SHL64ri %174:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
Bottom Pressure:
GR16=8
  LiveReg: %174
  UpdateRegP: SU(5) %174:gr64_nosp = SHL64ri %174:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
              to GR16 -2
  Ready @33c
BotQ.A @19c
  Retired: 77
  Executed: 19c
  Critical: 19c, 77 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
Bottom Pressure:
GR16=8
  LiveReg: %174
  UpdateRegP: SU(4) %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
              to GR16 -2
  Ready @34c
BotQ.A @19c
  Retired: 78
  Executed: 19c
  Critical: 19c, 78 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
Bottom Pressure:
GR16=8
  LiveReg: %174
  UpdateRegP: SU(3) %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
              to GR16 -2
  Ready @35c
BotQ.A @19c
  Retired: 79
  Executed: 19c
  Critical: 19c, 79 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %172:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.k); fft3d.c:94:35
Bottom Pressure:
GR16=6
  Ready @39c
  BotQ.A BotLatency SU(2) 29c
  *** Max MOps 4 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 80
  Executed: 20c
  Critical: 20c, 80 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %174:gr64_nosp = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.i11); fft3d.c:94:29
Bottom Pressure:
GR16=4
  Ready @39c
BotQ.A @20c
  Retired: 81
  Executed: 20c
  Critical: 20c, 81 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %170:gr64 = MOV64rm %stack.7.x, 1, $noreg, 0, $noreg, debug-location !638 :: (dereferenceable load 8 from %ir.x); fft3d.c:94:27
Bottom Pressure:
GR16=2
  Ready @36c
BotQ.A @20c
  Retired: 82
  Executed: 20c
  Critical: 20c, 82 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %170:gr64 = MOV64rm %stack.7.x, 1, $noreg, 0, $noreg, debug-location !638 :: (dereferenceable load 8 from %ir.x); fft3d.c:94:27
SU(1):   %174:gr64_nosp = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.i11); fft3d.c:94:29
SU(2):   %172:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.k); fft3d.c:94:35
SU(3):   %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
SU(4):   %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
SU(5):   %174:gr64_nosp = SHL64ri %174:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
SU(6):   %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
SU(7):   %178:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.j); fft3d.c:94:38
SU(8):   %178:gr64_nosp = SHL64ri %178:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
SU(9):   %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
SU(10):   %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
SU(11):   MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %180:gr64, debug-location !638 :: (store 8 into %ir.52 + 8); fft3d.c:94:27
SU(12):   MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %179:gr64, debug-location !638 :: (store 8 into %ir.52); fft3d.c:94:27
SU(13):   %183:gr64_nosp = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !645 :: (dereferenceable load 4 from %ir.i12); fft3d.c:95:29
SU(14):   %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
SU(15):   %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
SU(16):   %183:gr64_nosp = SHL64ri %183:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
SU(17):   %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
SU(18):   %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
SU(19):   %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
SU(20):   MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %186:gr64, debug-location !644 :: (store 8 into %ir.59); fft3d.c:95:27
SU(21):   MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %187:gr64, debug-location !644 :: (store 8 into %ir.59 + 8); fft3d.c:95:27
SU(22):   %189:gr64 = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !649 :: (dereferenceable load 4 from %ir.i21); fft3d.c:96:25
SU(23):   %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
SU(24):   %190:gr64 = IMUL64rri32 %189:gr64, 528, implicit-def dead $eflags, debug-location !651; fft3d.c:96:21
SU(25):   %192:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real459); fft3d.c:96:39
SU(26):   %192:fr64 = ADDSDrm %192:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real4610); fft3d.c:96:39
SU(27):   MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, %192:fr64, debug-location !654 :: (store 8 into %ir.real448); fft3d.c:96:39
SU(28):   %194:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag49); fft3d.c:96:39
SU(29):   %194:fr64 = ADDSDrm %194:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag50); fft3d.c:96:39
SU(30):   MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, %194:fr64, debug-location !654 :: (store 8 into %ir.imag48); fft3d.c:96:39
SU(31):   %195:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69); fft3d.c:96:39
SU(32):   MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
SU(33):   %196:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69 + 8); fft3d.c:96:39
SU(34):   MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
SU(35):   %197:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !655 :: (dereferenceable load 4 from %ir.i22); fft3d.c:97:25
SU(36):   %199:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.k); fft3d.c:97:31
SU(37):   %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
SU(38):   %200:gr64 = IMUL64rri32 %199:gr64, 528, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
SU(39):   %202:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !659 :: (dereferenceable load 4 from %ir.j); fft3d.c:97:34
SU(40):   %202:gr64_nosp = SHL64ri %202:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
SU(41):   %204:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6215); fft3d.c:97:39
SU(42):   %204:fr64 = SUBSDrm %204:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6316); fft3d.c:97:39
SU(43):   %214:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real5913)
SU(44):   %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
SU(45):   MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 0, $noreg, %204:fr64, debug-location !660 :: (store 8 into %ir.real6114); fft3d.c:97:39
SU(46):   %207:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag66); fft3d.c:97:39
SU(47):   %207:fr64 = SUBSDrm %207:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag67); fft3d.c:97:39
SU(48):   MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 8, $noreg, %207:fr64, debug-location !660 :: (store 8 into %ir.imag65); fft3d.c:97:39
SU(49):   %208:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag71); fft3d.c:97:39
SU(50):   %210:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7419); fft3d.c:97:39
SU(51):   %210:fr64 = SUBSDrm %210:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7520); fft3d.c:97:39
SU(52):   MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 0, $noreg, %210:fr64, debug-location !660 :: (store 8 into %ir.real7318); fft3d.c:97:39
SU(53):   %213:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag78); fft3d.c:97:39
SU(54):   %213:fr64 = SUBSDrm %213:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag79); fft3d.c:97:39
SU(55):   MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 8, $noreg, %213:fr64, debug-location !660 :: (store 8 into %ir.imag77); fft3d.c:97:39
SU(56):   %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
SU(57):   %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
SU(58):   MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, %214:fr64, debug-location !660 :: (store 8 into %ir.real5812); fft3d.c:97:39
SU(59):   %215:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8521); fft3d.c:97:39
SU(60):   %217:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8823); fft3d.c:97:39
SU(61):   %217:fr64 = SUBSDrm %217:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8924); fft3d.c:97:39
SU(62):   MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 0, $noreg, %217:fr64, debug-location !660 :: (store 8 into %ir.real8722); fft3d.c:97:39
SU(63):   %220:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag92); fft3d.c:97:39
SU(64):   %220:fr64 = SUBSDrm %220:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag93); fft3d.c:97:39
SU(65):   MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 8, $noreg, %220:fr64, debug-location !660 :: (store 8 into %ir.imag91); fft3d.c:97:39
SU(66):   %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
SU(67):   %222:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10026); fft3d.c:97:39
SU(68):   %222:fr64 = SUBSDrm %222:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10127); fft3d.c:97:39
SU(69):   %226:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag97)
SU(70):   %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
SU(71):   %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
SU(72):   MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 0, $noreg, %222:fr64, debug-location !660 :: (store 8 into %ir.real9925); fft3d.c:97:39
SU(73):   %225:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag104); fft3d.c:97:39
SU(74):   %225:fr64 = SUBSDrm %225:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag105); fft3d.c:97:39
SU(75):   MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 8, $noreg, %225:fr64, debug-location !660 :: (store 8 into %ir.imag103); fft3d.c:97:39
SU(76):   MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, %226:fr64, debug-location !660 :: (store 8 into %ir.imag84); fft3d.c:97:39
SU(77):   %227:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98); fft3d.c:97:39
SU(78):   MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
SU(79):   %228:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98 + 8); fft3d.c:97:39
SU(80):   MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
SU(81):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !661 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:93:40

********** MI Scheduling **********
Swarztrauber:%bb.16 for.end115
  From: %29:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 4 from %ir.l); fft3d.c:102:13
    To: JCC_1 %bb.23, 5, implicit killed $eflags, debug-location !677; fft3d.c:102:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 4 from %ir.l); fft3d.c:102:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(1):   CMP32rm %29:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !676 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:102:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 5, implicit killed $eflags, debug-location !677; fft3d.c:102:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %29:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !676 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:102:15
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 4 from %ir.l); fft3d.c:102:13
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %29:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 4 from %ir.l); fft3d.c:102:13
SU(1):   CMP32rm %29:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !676 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:102:15

********** MI Scheduling **********
Swarztrauber:%bb.18 for.cond118
  From: %128:gr32 = MOV32rm %stack.14.k, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.k); fft3d.c:103:25
    To: JCC_1 %bb.35, 13, implicit killed $eflags, debug-location !686; fft3d.c:103:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %128:gr32 = MOV32rm %stack.14.k, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.k); fft3d.c:103:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(1):   CMP32rm %128:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:103:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%128
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.35, 13, implicit killed $eflags, debug-location !686; fft3d.c:103:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %128:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:103:27
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %128:gr32 = MOV32rm %stack.14.k, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.k); fft3d.c:103:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %128:gr32 = MOV32rm %stack.14.k, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.k); fft3d.c:103:25
SU(1):   CMP32rm %128:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:103:27

********** MI Scheduling **********
Swarztrauber:%bb.20 for.cond121
  From: %130:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !691 :: (dereferenceable load 4 from %ir.j); fft3d.c:104:29
    To: JCC_1 %bb.22, 13, implicit killed $eflags, debug-location !695; fft3d.c:104:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %130:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !691 :: (dereferenceable load 4 from %ir.j); fft3d.c:104:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%130
  Single Issue       : false;
SU(1):   CMP32rm %130:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:104:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%130
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.22, 13, implicit killed $eflags, debug-location !695; fft3d.c:104:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %130:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:104:31
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %130:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !691 :: (dereferenceable load 4 from %ir.j); fft3d.c:104:29
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %130:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !691 :: (dereferenceable load 4 from %ir.j); fft3d.c:104:29
SU(1):   CMP32rm %130:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:104:31

********** MI Scheduling **********
Swarztrauber:%bb.21 for.body123
  From: %132:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.k); fft3d.c:105:23
    To: JMP_1 %bb.20, debug-location !704; fft3d.c:104:17
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=10
Live In: %0 
Live Out: %0 
Live Thru: GR16=2
  LiveReg: %0
  UpdateRegP: SU(2) %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
Constraining copy SU(1)
  Local use SU(7) -> SU(1)
SU(0):   %132:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.k); fft3d.c:105:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(7): Data Latency=4 Reg=%132
    SU(1): Data Latency=4 Reg=%132
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %134:gr64_nosp = COPY %132:gr64, debug-location !696; fft3d.c:105:21
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%132
    SU(7): Ord  Latency=0 Weak
  Successors:
    SU(2): Data Latency=0 Reg=%134
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=0 Reg=%134
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%134
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %134:gr64_nosp = SHL64ri %134:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(2): Data Latency=1 Reg=%134
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%134
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %134:gr64_nosp = ADD64rm %134:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !696 :: (dereferenceable load 8 from %ir.x); fft3d.c:105:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 12
  Predecessors:
    SU(3): Data Latency=1 Reg=%134
    SU(3): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%134
    SU(9): Data Latency=4 Reg=%134
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !699 :: (dereferenceable load 4 from %ir.j); fft3d.c:105:26
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(6): Data Latency=4 Reg=%137
    SU(6): Out  Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %137:gr64_nosp = SHL64ri %137:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(5): Data Latency=4 Reg=%137
    SU(5): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%137
    SU(10): Data Latency=1 Reg=%137
    SU(9): Data Latency=1 Reg=%137
    SU(8): Data Latency=1 Reg=%137
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %138:gr64 = IMUL64rri32 %132:gr64, 528, implicit-def dead $eflags, debug-location !701; fft3d.c:105:31
  # preds left       : 1
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%132
  Successors:
    SU(10): Data Latency=1 Reg=%138
    SU(8): Data Latency=1 Reg=%138
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(7): Data Latency=1 Reg=%138
    SU(6): Data Latency=1 Reg=%137
  Successors:
    SU(9): Data Latency=4 Reg=%139
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 8
  Predecessors:
    SU(4): Data Latency=4 Reg=%134
    SU(8): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%137
    SU(5): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%139
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(10):   %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 7
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(7): Data Latency=1 Reg=%138
    SU(6): Data Latency=1 Reg=%137
  Successors:
    SU(11): Data Latency=4 Reg=%140
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%140
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%137
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%134
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(12):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !703 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:104:40
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.20, debug-location !704; fft3d.c:104:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !703 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:104:40
Bottom Pressure:
GR16=2
  Ready @3c
  BotQ.A TopLatency SU(12) 15c
  BotQ.A BotLatency SU(12) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
Bottom Pressure:
GR16=8
  LiveReg: %137
  UpdateRegP: SU(8) %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
              to 
  UpdateRegP: SU(9) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
              to GR16 4
  UpdateRegP: SU(10) %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
              to 
  UpdateRegP: SU(11) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
              to GR16 4
  LiveReg: %134
  UpdateRegP: SU(9) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
              to GR16 2
  UpdateRegP: SU(11) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
              to GR16 2
  LiveReg: %140
  UpdateRegP: SU(11) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
Bottom Pressure:
GR16=8
  LiveReg: %138
  UpdateRegP: SU(8) %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
              to GR16 -2
  UpdateRegP: SU(10) %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(10) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
Bottom Pressure:
GR16=10
  LiveReg: %139
  UpdateRegP: SU(9) MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
              to 
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
Bottom Pressure:
GR16=8
  Ready @12c
  BotQ.A BotLatency SU(8) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %137:gr64_nosp = SHL64ri %137:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
Bottom Pressure:
GR16=8
  LiveReg: %137
  UpdateRegP: SU(6) %137:gr64_nosp = SHL64ri %137:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(6) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !699 :: (dereferenceable load 4 from %ir.j); fft3d.c:105:26
Bottom Pressure:
GR16=6
  Ready @17c
  BotQ.A BotLatency SU(5) 17c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
  Cand SU(4) ORDER                              
Pick Bot WEAK      
Scheduling SU(4) %134:gr64_nosp = ADD64rm %134:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !696 :: (dereferenceable load 8 from %ir.x); fft3d.c:105:21
Bottom Pressure:
GR16=6
  LiveReg: %134
  UpdateRegP: SU(4) %134:gr64_nosp = ADD64rm %134:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !696 :: (dereferenceable load 8 from %ir.x); fft3d.c:105:21
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 
  Cand SU(7) ORDER                              
  Cand SU(3) WEAK                               
Pick Bot WEAK      
Scheduling SU(3) %134:gr64_nosp = SHL64ri %134:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
Bottom Pressure:
GR16=6
  LiveReg: %134
  UpdateRegP: SU(3) %134:gr64_nosp = SHL64ri %134:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
              to GR16 -2
  Ready @13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
  Cand SU(7) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
Bottom Pressure:
GR16=6
  LiveReg: %134
  UpdateRegP: SU(2) %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
              to GR16 -2
  Ready @14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
  Cand SU(7) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(1) %134:gr64_nosp = COPY %132:gr64, debug-location !696; fft3d.c:105:21
Bottom Pressure:
GR16=6
  LiveReg: %132
  UpdateRegP: SU(1) %134:gr64_nosp = COPY %132:gr64, debug-location !696; fft3d.c:105:21
              to GR16 -2
  UpdateRegP: SU(7) %138:gr64 = IMUL64rri32 %132:gr64, 528, implicit-def dead $eflags, debug-location !701; fft3d.c:105:31
              to GR16 -2
  Ready @14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %138:gr64 = IMUL64rri32 %132:gr64, 528, implicit-def dead $eflags, debug-location !701; fft3d.c:105:31
Bottom Pressure:
GR16=4
  Ready @13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %132:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.k); fft3d.c:105:23
Bottom Pressure:
GR16=2
  Ready @18c
  BotQ.A BotLatency SU(0) 18c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %132:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.k); fft3d.c:105:23
SU(7):   %138:gr64 = IMUL64rri32 %132:gr64, 528, implicit-def dead $eflags, debug-location !701; fft3d.c:105:31
SU(1):   %134:gr64_nosp = COPY %132:gr64, debug-location !696; fft3d.c:105:21
SU(2):   %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
SU(3):   %134:gr64_nosp = SHL64ri %134:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
SU(4):   %134:gr64_nosp = ADD64rm %134:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !696 :: (dereferenceable load 8 from %ir.x); fft3d.c:105:21
SU(5):   %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !699 :: (dereferenceable load 4 from %ir.j); fft3d.c:105:26
SU(6):   %137:gr64_nosp = SHL64ri %137:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
SU(8):   %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
SU(9):   MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
SU(10):   %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
SU(11):   MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
SU(12):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !703 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:104:40

********** MI Scheduling **********
Swarztrauber:%bb.23 if.else138
  From: %32:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 4 from %ir.lj); fft3d.c:110:18
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %32:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 4 from %ir.lj); fft3d.c:110:18
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%32
    SU(1): Data Latency=4 Reg=%32
    SU(2): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %32:gr32, debug-location !713 :: (store 4 into %ir.lk); fft3d.c:110:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
  Successors:
    SU(2): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %32:gr32 = ADD32rr %32:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags, debug-location !715; fft3d.c:111:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%32
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%32
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %32:gr32, debug-location !716 :: (store 4 into %ir.lj); fft3d.c:111:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%32
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %33:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.li); fft3d.c:112:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(7): Data Latency=4 Reg=%33
    SU(5): Data Latency=4 Reg=%33
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %35:gr32 = COPY %33:gr32, debug-location !718; fft3d.c:112:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%33
  Successors:
    SU(6): Data Latency=0 Reg=%35
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %35:gr32 = SHR32ri %35:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(5): Data Latency=0 Reg=%35
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%35
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%35
    SU(6): Out  Latency=0
    SU(4): Data Latency=4 Reg=%33
  Successors:
    SU(8): Data Latency=1 Reg=%35
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %35:gr32 = SAR32r1 %35:gr32(tied-def 0), implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%35
    SU(7): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%35
    SU(9): Data Latency=1 Reg=%35
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %35:gr32, debug-location !719 :: (store 4 into %ir.li); fft3d.c:112:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%35
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %35:gr32, debug-location !721 :: (store 4 into %ir.ku); fft3d.c:113:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%35
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !722 :: (store 4 into %ir.i); fft3d.c:115:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 3 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !722 :: (store 4 into %ir.i); fft3d.c:115:20
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 10 9 
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %35:gr32, debug-location !721 :: (store 4 into %ir.ku); fft3d.c:113:16
Bottom Pressure:
GR16=2
  LiveReg: %35
  UpdateRegP: SU(9) MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %35:gr32, debug-location !719 :: (store 4 into %ir.li); fft3d.c:112:16
              to 
  UpdateRegP: SU(10) MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %35:gr32, debug-location !721 :: (store 4 into %ir.ku); fft3d.c:113:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 9 
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %35:gr32, debug-location !719 :: (store 4 into %ir.li); fft3d.c:112:16
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 8 
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %35:gr32 = SAR32r1 %35:gr32(tied-def 0), implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
Bottom Pressure:
GR16=2
  LiveReg: %35
  UpdateRegP: SU(8) %35:gr32 = SAR32r1 %35:gr32(tied-def 0), implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
Bottom Pressure:
GR16=4
  LiveReg: %35
  UpdateRegP: SU(7) %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
              to 
  LiveReg: %33
  UpdateRegP: SU(5) %35:gr32 = COPY %33:gr32, debug-location !718; fft3d.c:112:21
              to GR16 -2
  UpdateRegP: SU(7) %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %35:gr32 = SHR32ri %35:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
Bottom Pressure:
GR16=4
  LiveReg: %35
  UpdateRegP: SU(6) %35:gr32 = SHR32ri %35:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(5) %35:gr32 = COPY %33:gr32, debug-location !718; fft3d.c:112:21
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %33:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.li); fft3d.c:112:18
Bottom Pressure:

  Ready @7c
  BotQ.A BotLatency SU(4) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %32:gr32, debug-location !716 :: (store 4 into %ir.lj); fft3d.c:111:16
Bottom Pressure:
GR16=2
  LiveReg: %32
  UpdateRegP: SU(3) MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %32:gr32, debug-location !716 :: (store 4 into %ir.lj); fft3d.c:111:16
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %32:gr32 = ADD32rr %32:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags, debug-location !715; fft3d.c:111:20
Bottom Pressure:
GR16=2
  LiveReg: %32
  UpdateRegP: SU(1) MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %32:gr32, debug-location !713 :: (store 4 into %ir.lk); fft3d.c:110:16
              to 
  UpdateRegP: SU(2) %32:gr32 = ADD32rr %32:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags, debug-location !715; fft3d.c:111:20
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %32:gr32, debug-location !713 :: (store 4 into %ir.lk); fft3d.c:110:16
Bottom Pressure:
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 4 from %ir.lj); fft3d.c:110:18
Bottom Pressure:

  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %32:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 4 from %ir.lj); fft3d.c:110:18
SU(1):   MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %32:gr32, debug-location !713 :: (store 4 into %ir.lk); fft3d.c:110:16
SU(2):   %32:gr32 = ADD32rr %32:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags, debug-location !715; fft3d.c:111:20
SU(3):   MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %32:gr32, debug-location !716 :: (store 4 into %ir.lj); fft3d.c:111:16
SU(4):   %33:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.li); fft3d.c:112:18
SU(5):   %35:gr32 = COPY %33:gr32, debug-location !718; fft3d.c:112:21
SU(6):   %35:gr32 = SHR32ri %35:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
SU(7):   %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
SU(8):   %35:gr32 = SAR32r1 %35:gr32(tied-def 0), implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
SU(9):   MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %35:gr32, debug-location !719 :: (store 4 into %ir.li); fft3d.c:112:16
SU(10):   MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %35:gr32, debug-location !721 :: (store 4 into %ir.ku); fft3d.c:113:16
SU(11):   MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !722 :: (store 4 into %ir.i); fft3d.c:115:20

********** MI Scheduling **********
Swarztrauber:%bb.24 for.cond141
  From: %39:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !727 :: (dereferenceable load 4 from %ir.li); fft3d.c:115:30
    To: JCC_1 %bb.35, 15, implicit $eflags, debug-location !730; fft3d.c:115:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !727 :: (dereferenceable load 4 from %ir.li); fft3d.c:115:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%39
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags, debug-location !728; fft3d.c:115:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%39
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags, debug-location !729 :: (dereferenceable load 4 from %ir.i); fft3d.c:115:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%39
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.35, 15, implicit $eflags, debug-location !730; fft3d.c:115:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags, debug-location !729 :: (dereferenceable load 4 from %ir.i); fft3d.c:115:27
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags, debug-location !728; fft3d.c:115:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !727 :: (dereferenceable load 4 from %ir.li); fft3d.c:115:30
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %39:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !727 :: (dereferenceable load 4 from %ir.li); fft3d.c:115:30
SU(1):   %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags, debug-location !728; fft3d.c:115:33
SU(2):   CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags, debug-location !729 :: (dereferenceable load 4 from %ir.i); fft3d.c:115:27

********** MI Scheduling **********
Swarztrauber:%bb.25 for.body144
  From: %46:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !731 :: (dereferenceable load 4 from %ir.i); fft3d.c:116:23
    To: JCC_1 %bb.27, 14, implicit $eflags, debug-location !751; fft3d.c:121:21
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %46:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !731 :: (dereferenceable load 4 from %ir.i); fft3d.c:116:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%46
    SU(2): Data Latency=4 Reg=%46
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %42:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !733 :: (dereferenceable load 4 from %ir.lk); fft3d.c:116:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(9): Data Latency=4 Reg=%42
    SU(3): Data Latency=4 Reg=%42
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %44:gr32 = COPY %46:gr32, debug-location !734; fft3d.c:116:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%46
  Successors:
    SU(3): Data Latency=0 Reg=%44
    SU(3): Out  Latency=0
    SU(7): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%44
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%42
  Successors:
    SU(5): Data Latency=1 Reg=%44
    SU(4): Data Latency=1 Reg=%44
    SU(5): Out  Latency=0
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %44:gr32, debug-location !735 :: (store 4 into %ir.i11); fft3d.c:116:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%44
  Successors:
    SU(5): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %44:gr32 = nsw ADD32rm %44:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !738 :: (dereferenceable load 4 from %ir.n1); fft3d.c:117:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=1 Reg=%44
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%44
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %44:gr32, debug-location !739 :: (store 4 into %ir.i12); fft3d.c:117:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%44
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %46:gr32 = nsw IMUL32rm %46:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !742 :: (dereferenceable load 4 from %ir.lj); fft3d.c:118:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Data Latency=4 Reg=%46
    SU(0): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%46
    SU(8): Data Latency=4 Reg=%46
    SU(9): Out  Latency=0
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %46:gr32, debug-location !743 :: (store 4 into %ir.i21); fft3d.c:118:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(7): Data Latency=4 Reg=%46
  Successors:
    SU(9): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Data Latency=4 Reg=%46
    SU(7): Out  Latency=0
    SU(1): Data Latency=4 Reg=%42
  Successors:
    SU(10): Data Latency=1 Reg=%46
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %46:gr32, debug-location !747 :: (store 4 into %ir.i22); fft3d.c:119:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%46
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !750 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:121:24
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(9): Out  Latency=0
    SU(7): Out  Latency=0
    SU(5): Out  Latency=0
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 14, implicit $eflags, debug-location !751; fft3d.c:121:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !750 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:121:24
Bottom Pressure:

  Ready @4c
  BotQ.A TopLatency SU(11) 8c
  BotQ.A BotLatency SU(11) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 6 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %46:gr32, debug-location !747 :: (store 4 into %ir.i22); fft3d.c:119:21
Bottom Pressure:
GR16=2
  LiveReg: %46
  UpdateRegP: SU(10) MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %46:gr32, debug-location !747 :: (store 4 into %ir.i22); fft3d.c:119:21
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
Bottom Pressure:
GR16=4
  LiveReg: %46
  UpdateRegP: SU(8) MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %46:gr32, debug-location !743 :: (store 4 into %ir.i21); fft3d.c:118:21
              to 
  UpdateRegP: SU(9) %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
              to 
  LiveReg: %42
  UpdateRegP: SU(3) %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
              to 
  UpdateRegP: SU(9) %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
              to GR16 -2
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %46:gr32, debug-location !743 :: (store 4 into %ir.i21); fft3d.c:118:21
Bottom Pressure:
GR16=4
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %46:gr32 = nsw IMUL32rm %46:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !742 :: (dereferenceable load 4 from %ir.lj); fft3d.c:118:25
Bottom Pressure:
GR16=4
  LiveReg: %46
  UpdateRegP: SU(2) %44:gr32 = COPY %46:gr32, debug-location !734; fft3d.c:116:25
              to GR16 -2
  UpdateRegP: SU(7) %46:gr32 = nsw IMUL32rm %46:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !742 :: (dereferenceable load 4 from %ir.lj); fft3d.c:118:25
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(7) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %44:gr32, debug-location !739 :: (store 4 into %ir.i12); fft3d.c:117:21
Bottom Pressure:
GR16=6
  LiveReg: %44
  UpdateRegP: SU(6) MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %44:gr32, debug-location !739 :: (store 4 into %ir.i12); fft3d.c:117:21
              to 
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %44:gr32 = nsw ADD32rm %44:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !738 :: (dereferenceable load 4 from %ir.n1); fft3d.c:117:27
Bottom Pressure:
GR16=6
  LiveReg: %44
  UpdateRegP: SU(4) MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %44:gr32, debug-location !735 :: (store 4 into %ir.i11); fft3d.c:116:21
              to 
  UpdateRegP: SU(5) %44:gr32 = nsw ADD32rm %44:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !738 :: (dereferenceable load 4 from %ir.n1); fft3d.c:117:27
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %44:gr32, debug-location !735 :: (store 4 into %ir.i11); fft3d.c:116:21
Bottom Pressure:
GR16=6
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
Bottom Pressure:
GR16=6
  LiveReg: %44
  UpdateRegP: SU(3) %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
              to GR16 -2
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %44:gr32 = COPY %46:gr32, debug-location !734; fft3d.c:116:25
Bottom Pressure:
GR16=4
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %42:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !733 :: (dereferenceable load 4 from %ir.lk); fft3d.c:116:27
Bottom Pressure:
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %46:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !731 :: (dereferenceable load 4 from %ir.i); fft3d.c:116:23
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %46:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !731 :: (dereferenceable load 4 from %ir.i); fft3d.c:116:23
SU(1):   %42:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !733 :: (dereferenceable load 4 from %ir.lk); fft3d.c:116:27
SU(2):   %44:gr32 = COPY %46:gr32, debug-location !734; fft3d.c:116:25
SU(3):   %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
SU(4):   MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %44:gr32, debug-location !735 :: (store 4 into %ir.i11); fft3d.c:116:21
SU(5):   %44:gr32 = nsw ADD32rm %44:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !738 :: (dereferenceable load 4 from %ir.n1); fft3d.c:117:27
SU(6):   MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %44:gr32, debug-location !739 :: (store 4 into %ir.i12); fft3d.c:117:21
SU(7):   %46:gr32 = nsw IMUL32rm %46:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !742 :: (dereferenceable load 4 from %ir.lj); fft3d.c:118:25
SU(8):   MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %46:gr32, debug-location !743 :: (store 4 into %ir.i21); fft3d.c:118:21
SU(9):   %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
SU(10):   MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %46:gr32, debug-location !747 :: (store 4 into %ir.i22); fft3d.c:119:21
SU(11):   CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !750 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:121:24

********** MI Scheduling **********
Swarztrauber:%bb.26 if.then150
  From: %57:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:122:26
    To: JMP_1 %bb.28, debug-location !757; fft3d.c:123:17
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %57:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:122:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(6): Data Latency=4 Reg=%57
    SU(5): Data Latency=4 Reg=%57
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %58:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !754 :: (dereferenceable load 4 from %ir.ku); fft3d.c:122:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%58
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %61:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !755 :: (dereferenceable load 4 from %ir.i); fft3d.c:122:40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%61
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%61
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%58
  Successors:
    SU(4): Data Latency=1 Reg=%61
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %61:gr64_nosp = SHL64ri %61:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !752; fft3d.c:122:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%61
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%61
    SU(5): Data Latency=1 Reg=%61
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%61
    SU(0): Data Latency=4 Reg=%57
  Successors:
    SU(7): Data Latency=4 Reg=%62
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%61
    SU(0): Data Latency=4 Reg=%57
  Successors:
    SU(8): Data Latency=4 Reg=%63
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %62:gr64, debug-location !752 :: (store 8 into %ir.136); fft3d.c:122:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%62
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %63:gr64, debug-location !752 :: (store 8 into %ir.136 + 8); fft3d.c:122:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%63
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.28, debug-location !757; fft3d.c:123:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %63:gr64, debug-location !752 :: (store 8 into %ir.136 + 8); fft3d.c:122:26
Bottom Pressure:
GR16=2
  LiveReg: %63
  UpdateRegP: SU(8) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %63:gr64, debug-location !752 :: (store 8 into %ir.136 + 8); fft3d.c:122:26
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 10c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %62:gr64, debug-location !752 :: (store 8 into %ir.136); fft3d.c:122:26
Bottom Pressure:
GR16=4
  LiveReg: %62
  UpdateRegP: SU(7) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %62:gr64, debug-location !752 :: (store 8 into %ir.136); fft3d.c:122:26
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
Bottom Pressure:
GR16=6
  LiveReg: %57
  UpdateRegP: SU(5) %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
              to 
  UpdateRegP: SU(6) %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
              to 
  LiveReg: %61
  UpdateRegP: SU(5) %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
              to GR16 -2
  UpdateRegP: SU(6) %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
Bottom Pressure:
GR16=4
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %61:gr64_nosp = SHL64ri %61:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !752; fft3d.c:122:26
Bottom Pressure:
GR16=4
  LiveReg: %61
  UpdateRegP: SU(4) %61:gr64_nosp = SHL64ri %61:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !752; fft3d.c:122:26
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
Bottom Pressure:
GR16=6
  LiveReg: %61
  UpdateRegP: SU(3) %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
              to 
  LiveReg: %58
  UpdateRegP: SU(3) %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %61:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !755 :: (dereferenceable load 4 from %ir.i); fft3d.c:122:40
Bottom Pressure:
GR16=4
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %58:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !754 :: (dereferenceable load 4 from %ir.ku); fft3d.c:122:35
Bottom Pressure:
GR16=2
  Ready @10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %57:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:122:26
Bottom Pressure:

  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %57:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:122:26
SU(1):   %58:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !754 :: (dereferenceable load 4 from %ir.ku); fft3d.c:122:35
SU(2):   %61:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !755 :: (dereferenceable load 4 from %ir.i); fft3d.c:122:40
SU(3):   %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
SU(4):   %61:gr64_nosp = SHL64ri %61:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !752; fft3d.c:122:26
SU(5):   %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
SU(6):   %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
SU(7):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %62:gr64, debug-location !752 :: (store 8 into %ir.136); fft3d.c:122:26
SU(8):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %63:gr64, debug-location !752 :: (store 8 into %ir.136 + 8); fft3d.c:122:26

********** MI Scheduling **********
Swarztrauber:%bb.27 if.else154
  From: %47:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:125:26
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %229 
Live Out: %229 
Live Thru: FR32=1
FR32X=1
  LiveReg: %229
  UpdateRegP: SU(8) %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
              to 
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %47:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:125:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(7): Data Latency=4 Reg=%47
    SU(5): Data Latency=4 Reg=%47
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %48:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.ku); fft3d.c:125:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(3): Data Latency=4 Reg=%48
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %51:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.i); fft3d.c:125:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(3): Data Latency=4 Reg=%51
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(2): Data Latency=4 Reg=%51
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%48
  Successors:
    SU(4): Data Latency=1 Reg=%51
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %51:gr64_nosp = SHL64ri %51:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(3): Data Latency=1 Reg=%51
    SU(3): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%51
    SU(5): Data Latency=1 Reg=%51
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(4): Data Latency=1 Reg=%51
    SU(0): Data Latency=4 Reg=%47
  Successors:
    SU(6): Data Latency=4 Reg=%52
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(6):   MOVSDmr %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, %52:fr64, debug-location !758 :: (store 8 into %ir.real15630); fft3d.c:125:26
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(5): Data Latency=4 Reg=%52
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 10
  Predecessors:
    SU(6): Ord  Latency=1 Memory
    SU(4): Data Latency=1 Reg=%51
    SU(0): Data Latency=4 Reg=%47
  Successors:
    SU(8): Data Latency=4 Reg=%54
    SU(8): Out  Latency=0
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(8):   %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%54
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%54
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOVLPDmr %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, %54:vr128, debug-location !758 :: (store 8 into %ir.imag161); fft3d.c:125:26
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%54
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %55:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147); fft3d.c:125:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 4
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%55
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %55:gr64, debug-location !758 :: (store 8 into %ir.146); fft3d.c:125:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%55
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %56:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147 + 8); fft3d.c:125:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 4
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%56
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %56:gr64, debug-location !758 :: (store 8 into %ir.146 + 8); fft3d.c:125:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=%56
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %56:gr64, debug-location !758 :: (store 8 into %ir.146 + 8); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %56
  UpdateRegP: SU(13) MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %56:gr64, debug-location !758 :: (store 8 into %ir.146 + 8); fft3d.c:125:26
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 21c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %56:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147 + 8); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
  Ready @4c
  BotQ.A BotLatency SU(12) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %55:gr64, debug-location !758 :: (store 8 into %ir.146); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %55
  UpdateRegP: SU(11) MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %55:gr64, debug-location !758 :: (store 8 into %ir.146); fft3d.c:125:26
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %55:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOVLPDmr %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, %54:vr128, debug-location !758 :: (store 8 into %ir.imag161); fft3d.c:125:26
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %54
  UpdateRegP: SU(9) MOVLPDmr %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, %54:vr128, debug-location !758 :: (store 8 into %ir.imag161); fft3d.c:125:26
              to 
  Ready @5c
  BotQ.A BotLatency SU(9) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %54
  UpdateRegP: SU(8) %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
              to FR32 -1    FR32X -1
  Ready @6c
  BotQ.A BotLatency SU(8) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %47
  UpdateRegP: SU(5) %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(7) %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %51
  UpdateRegP: SU(5) %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
              to FR32 -1    FR32X -1
  UpdateRegP: SU(7) %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(7) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, %52:fr64, debug-location !758 :: (store 8 into %ir.real15630); fft3d.c:125:26
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %52
  UpdateRegP: SU(6) MOVSDmr %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, %52:fr64, debug-location !758 :: (store 8 into %ir.real15630); fft3d.c:125:26
              to 
  Ready @11c
  BotQ.A BotLatency SU(6) 11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(5) 15c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %51:gr64_nosp = SHL64ri %51:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %51
  UpdateRegP: SU(4) %51:gr64_nosp = SHL64ri %51:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %51
  UpdateRegP: SU(3) %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
              to 
  LiveReg: %48
  UpdateRegP: SU(3) %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(3) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %51:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.i); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @21c
  BotQ.A BotLatency SU(2) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %48:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.ku); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:125:26
Bottom Pressure:
FR32=1
FR32X=1
  Ready @19c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %47:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:125:26
SU(1):   %48:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.ku); fft3d.c:125:26
SU(2):   %51:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.i); fft3d.c:125:26
SU(3):   %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
SU(4):   %51:gr64_nosp = SHL64ri %51:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
SU(5):   %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
SU(6):   MOVSDmr %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, %52:fr64, debug-location !758 :: (store 8 into %ir.real15630); fft3d.c:125:26
SU(7):   %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
SU(8):   %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
SU(9):   MOVLPDmr %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, %54:vr128, debug-location !758 :: (store 8 into %ir.imag161); fft3d.c:125:26
SU(10):   %55:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147); fft3d.c:125:26
SU(11):   MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %55:gr64, debug-location !758 :: (store 8 into %ir.146); fft3d.c:125:26
SU(12):   %56:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147 + 8); fft3d.c:125:26
SU(13):   MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %56:gr64, debug-location !758 :: (store 8 into %ir.146 + 8); fft3d.c:125:26

********** MI Scheduling **********
Swarztrauber:%bb.29 for.cond168
  From: %66:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !765 :: (dereferenceable load 4 from %ir.lk); fft3d.c:127:34
    To: JCC_1 %bb.34, 15, implicit $eflags, debug-location !768; fft3d.c:127:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !765 :: (dereferenceable load 4 from %ir.lk); fft3d.c:127:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%66
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %66:gr32 = DEC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !766; fft3d.c:127:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%66
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !767 :: (dereferenceable load 4 from %ir.k); fft3d.c:127:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%66
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.34, 15, implicit $eflags, debug-location !768; fft3d.c:127:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !767 :: (dereferenceable load 4 from %ir.k); fft3d.c:127:31
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %66:gr32 = DEC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !766; fft3d.c:127:37
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !765 :: (dereferenceable load 4 from %ir.lk); fft3d.c:127:34
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %66:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !765 :: (dereferenceable load 4 from %ir.lk); fft3d.c:127:34
SU(1):   %66:gr32 = DEC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !766; fft3d.c:127:37
SU(2):   CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !767 :: (dereferenceable load 4 from %ir.k); fft3d.c:127:31

********** MI Scheduling **********
Swarztrauber:%bb.31 for.cond172
  From: %68:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 4 from %ir.j); fft3d.c:128:33
    To: JCC_1 %bb.33, 13, implicit $eflags, debug-location !777; fft3d.c:128:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %68:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 4 from %ir.j); fft3d.c:128:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(1):   CMP32rm %68:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !776 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:128:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.33, 13, implicit $eflags, debug-location !777; fft3d.c:128:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %68:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !776 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:128:35
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %68:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 4 from %ir.j); fft3d.c:128:33
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %68:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 4 from %ir.j); fft3d.c:128:33
SU(1):   CMP32rm %68:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !776 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:128:35

********** MI Scheduling **********
Swarztrauber:%bb.32 for.body174
  From: %72:gr64 = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.i11); fft3d.c:129:35
    To: JMP_1 %bb.31, debug-location !802; fft3d.c:128:21
 RegionInstrs: 81
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=10
Live In: %0 
Live Out: %0 
Live Thru: GR16=2
  LiveReg: %0
  UpdateRegP: SU(19) %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
              to 
  UpdateRegP: SU(35) %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
              to 
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %72:gr64 = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.i11); fft3d.c:129:35
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 53
  Successors:
    SU(2): Data Latency=4 Reg=%72
    SU(2): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %71:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 4 from %ir.k); fft3d.c:129:41
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 53
  Successors:
    SU(18): Data Latency=4 Reg=%71
    SU(11): Data Latency=4 Reg=%71
    SU(2): Data Latency=4 Reg=%71
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 49
  Predecessors:
    SU(1): Data Latency=4 Reg=%71
    SU(0): Data Latency=4 Reg=%72
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%72
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %73:gr64 = IMUL64rri32 %72:gr64, 528, implicit-def dead $eflags, debug-location !781; fft3d.c:129:31
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 48
  Predecessors:
    SU(2): Data Latency=1 Reg=%72
  Successors:
    SU(8): Data Latency=1 Reg=%73
    SU(6): Data Latency=1 Reg=%73
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %75:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); fft3d.c:129:44
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 52
  Successors:
    SU(5): Data Latency=4 Reg=%75
    SU(5): Out  Latency=0
    SU(80): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %75:gr64_nosp = SHL64ri %75:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 48
  Predecessors:
    SU(4): Data Latency=4 Reg=%75
    SU(4): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%75
    SU(29): Data Latency=1 Reg=%75
    SU(15): Data Latency=1 Reg=%75
    SU(13): Data Latency=1 Reg=%75
    SU(8): Data Latency=1 Reg=%75
    SU(6): Data Latency=1 Reg=%75
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 47
  Predecessors:
    SU(3): Data Latency=1 Reg=%73
    SU(5): Data Latency=1 Reg=%75
  Successors:
    SU(7): Data Latency=4 Reg=%76
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %76:gr64, debug-location !781 :: (store 8 into %ir.155 + 8); fft3d.c:129:31
  # preds left       : 1
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 43
  Predecessors:
    SU(6): Data Latency=4 Reg=%76
  Successors:
    SU(72): Ord  Latency=1 Memory
    SU(66): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=1 Memory
    SU(52): Ord  Latency=1 Memory
    SU(49): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 47
  Predecessors:
    SU(3): Data Latency=1 Reg=%73
    SU(5): Data Latency=1 Reg=%75
  Successors:
    SU(9): Data Latency=4 Reg=%77
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %77:gr64, debug-location !781 :: (store 8 into %ir.155); fft3d.c:129:31
  # preds left       : 1
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 43
  Predecessors:
    SU(8): Data Latency=4 Reg=%77
  Successors:
    SU(72): Ord  Latency=1 Memory
    SU(66): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=1 Memory
    SU(52): Ord  Latency=1 Memory
    SU(49): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %79:gr64 = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 4 from %ir.i12); fft3d.c:130:35
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 49
  Successors:
    SU(11): Data Latency=4 Reg=%79
    SU(11): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 45
  Predecessors:
    SU(10): Data Latency=4 Reg=%79
    SU(10): Out  Latency=0
    SU(1): Data Latency=4 Reg=%71
  Successors:
    SU(12): Data Latency=1 Reg=%79
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %80:gr64 = IMUL64rri32 %79:gr64, 528, implicit-def dead $eflags, debug-location !786; fft3d.c:130:31
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 44
  Predecessors:
    SU(11): Data Latency=1 Reg=%79
  Successors:
    SU(15): Data Latency=1 Reg=%80
    SU(13): Data Latency=1 Reg=%80
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 43
  Predecessors:
    SU(12): Data Latency=1 Reg=%80
    SU(5): Data Latency=1 Reg=%75
  Successors:
    SU(14): Data Latency=4 Reg=%81
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %81:gr64, debug-location !786 :: (store 8 into %ir.160); fft3d.c:130:31
  # preds left       : 1
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 39
  Predecessors:
    SU(13): Data Latency=4 Reg=%81
  Successors:
    SU(73): Ord  Latency=1 Memory
    SU(67): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 43
  Predecessors:
    SU(12): Data Latency=1 Reg=%80
    SU(5): Data Latency=1 Reg=%75
  Successors:
    SU(16): Data Latency=4 Reg=%82
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %82:gr64, debug-location !786 :: (store 8 into %ir.160 + 8); fft3d.c:130:31
  # preds left       : 1
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 39
  Predecessors:
    SU(15): Data Latency=4 Reg=%82
  Successors:
    SU(73): Ord  Latency=1 Memory
    SU(67): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %85:gr64_nosp = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !790 :: (dereferenceable load 4 from %ir.i21); fft3d.c:131:27
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 40
  Successors:
    SU(18): Data Latency=4 Reg=%85
    SU(18): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(17): Data Latency=4 Reg=%85
    SU(17): Out  Latency=0
    SU(1): Data Latency=4 Reg=%71
  Successors:
    SU(19): Data Latency=1 Reg=%85
    SU(19): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 35
  Predecessors:
    SU(18): Data Latency=1 Reg=%85
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%85
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %85:gr64_nosp = SHL64ri %85:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 34
  Predecessors:
    SU(19): Data Latency=1 Reg=%85
    SU(19): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%85
    SU(21): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %85:gr64_nosp = ADD64rm %85:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !789 :: (dereferenceable load 8 from %ir.x); fft3d.c:131:25
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 33
  Predecessors:
    SU(20): Data Latency=1 Reg=%85
    SU(20): Out  Latency=0
  Successors:
    SU(31): Data Latency=4 Reg=%85
    SU(29): Data Latency=4 Reg=%85
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %89:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19238); fft3d.c:131:41
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 42
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(23): Data Latency=4 Reg=%89
    SU(23): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(23):   %89:fr64 = ADDSDrm %89:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19339); fft3d.c:131:41
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 38
  Predecessors:
    SU(22): Data Latency=4 Reg=%89
    SU(22): Out  Latency=0
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%89
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, %89:fr64, debug-location !794 :: (store 8 into %ir.real19137); fft3d.c:131:41
  # preds left       : 1
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 34
  Predecessors:
    SU(23): Data Latency=4 Reg=%89
  Successors:
    SU(27): Ord  Latency=0 Memory
    SU(30): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(25):   %91:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag196); fft3d.c:131:41
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 42
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(26): Data Latency=4 Reg=%91
    SU(26): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(26):   %91:fr64 = ADDSDrm %91:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag197); fft3d.c:131:41
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 38
  Predecessors:
    SU(25): Data Latency=4 Reg=%91
    SU(25): Out  Latency=0
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%91
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, %91:fr64, debug-location !794 :: (store 8 into %ir.imag195); fft3d.c:131:41
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 34
  Predecessors:
    SU(26): Data Latency=4 Reg=%91
    SU(24): Ord  Latency=0 Memory
  Successors:
    SU(30): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(28):   %92:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172); fft3d.c:131:41
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 33
  Predecessors:
    SU(27): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%92
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(29):   MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
  # preds left       : 24
  # succs left       : 40
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 29
  Predecessors:
    SU(28): Data Latency=4 Reg=%92
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Data Latency=4 Reg=%85
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%75
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(80): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(74): Ord  Latency=0 Memory
    SU(71): Ord  Latency=0 Memory
    SU(64): Ord  Latency=0 Memory
    SU(61): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(78): Ord  Latency=1 Memory
    SU(76): Ord  Latency=1 Memory
    SU(73): Ord  Latency=1 Memory
    SU(67): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(72): Ord  Latency=1 Memory
    SU(66): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=1 Memory
    SU(52): Ord  Latency=1 Memory
    SU(49): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(68): Ord  Latency=1 Memory
    SU(58): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(30):   %93:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172 + 8); fft3d.c:131:41
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 28
  Predecessors:
    SU(29): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
  Successors:
    SU(31): Data Latency=4 Reg=%93
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(31):   MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
  # preds left       : 25
  # succs left       : 39
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 24
  Predecessors:
    SU(30): Data Latency=4 Reg=%93
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Data Latency=4 Reg=%85
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%75
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(80): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(74): Ord  Latency=0 Memory
    SU(71): Ord  Latency=0 Memory
    SU(64): Ord  Latency=0 Memory
    SU(61): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(78): Ord  Latency=1 Memory
    SU(76): Ord  Latency=1 Memory
    SU(73): Ord  Latency=1 Memory
    SU(67): Ord  Latency=1 Memory
    SU(63): Ord  Latency=1 Memory
    SU(60): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(72): Ord  Latency=1 Memory
    SU(66): Ord  Latency=1 Memory
    SU(62): Ord  Latency=1 Memory
    SU(59): Ord  Latency=1 Memory
    SU(52): Ord  Latency=1 Memory
    SU(49): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(68): Ord  Latency=1 Memory
    SU(58): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(32):   %94:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !796 :: (dereferenceable load 4 from %ir.i22); fft3d.c:132:27
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 19
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(34): Data Latency=4 Reg=%94
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(33):   %97:gr64_nosp = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !797 :: (dereferenceable load 4 from %ir.k); fft3d.c:132:33
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 19
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(34): Data Latency=4 Reg=%97
    SU(34): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(34):   %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 15
  Predecessors:
    SU(33): Data Latency=4 Reg=%97
    SU(33): Out  Latency=0
    SU(32): Data Latency=4 Reg=%94
  Successors:
    SU(35): Data Latency=1 Reg=%97
    SU(35): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(35):   %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 14
  Predecessors:
    SU(34): Data Latency=1 Reg=%97
    SU(34): Out  Latency=0
  Successors:
    SU(36): Data Latency=1 Reg=%97
    SU(36): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(36):   %97:gr64_nosp = SHL64ri %97:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 13
  Predecessors:
    SU(35): Data Latency=1 Reg=%97
    SU(35): Out  Latency=0
  Successors:
    SU(37): Data Latency=1 Reg=%97
    SU(37): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %97:gr64_nosp = ADD64rm %97:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !795 :: (dereferenceable load 8 from %ir.x); fft3d.c:132:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 37
  Height             : 12
  Predecessors:
    SU(36): Data Latency=1 Reg=%97
    SU(36): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(79): Data Latency=4 Reg=%97
    SU(77): Data Latency=4 Reg=%97
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(38):   %101:gr64 = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !799 :: (dereferenceable load 4 from %ir.j); fft3d.c:132:36
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 13
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(39): Data Latency=4 Reg=%101
    SU(39): Out  Latency=0
    SU(80): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(39):   %101:gr64 = SHL64ri %101:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 9
  Predecessors:
    SU(38): Data Latency=4 Reg=%101
    SU(38): Out  Latency=0
  Successors:
    SU(79): Data Latency=1 Reg=%101
    SU(77): Data Latency=1 Reg=%101
  Pressure Diff      : 
  Single Issue       : false;
SU(40):   %103:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real20944); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 23
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%103
    SU(41): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(41):   %103:fr64 = SUBSDrm %103:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real21045); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 19
  Predecessors:
    SU(40): Data Latency=4 Reg=%103
    SU(40): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(44): Data Latency=4 Reg=%103
    SU(43): Data Latency=4 Reg=%103
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   %113:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real20642)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 19
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(43): Data Latency=4 Reg=%113
    SU(43): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(43):   %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(41): Data Latency=4 Reg=%103
    SU(42): Out  Latency=0
    SU(42): Data Latency=4 Reg=%113
  Successors:
    SU(56): Data Latency=1 Reg=%113
    SU(56): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(44):   MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 0, $noreg, %103:fr64, debug-location !800 :: (store 8 into %ir.real20843); fft3d.c:132:41
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 8
  Predecessors:
    SU(41): Data Latency=4 Reg=%103
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(47): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(45):   %106:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag213); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 16
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(46): Data Latency=4 Reg=%106
    SU(46): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(46):   %106:fr64 = SUBSDrm %106:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag214); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 12
  Predecessors:
    SU(45): Data Latency=4 Reg=%106
    SU(45): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(47): Data Latency=4 Reg=%106
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(47):   MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 8, $noreg, %106:fr64, debug-location !800 :: (store 8 into %ir.imag212); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 8
  Predecessors:
    SU(46): Data Latency=4 Reg=%106
    SU(44): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(48):   %107:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag218); fft3d.c:132:41
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 19
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%107
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(49):   %109:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22148); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 23
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(50): Data Latency=4 Reg=%109
    SU(50): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(50):   %109:fr64 = SUBSDrm %109:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22249); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 19
  Predecessors:
    SU(49): Data Latency=4 Reg=%109
    SU(49): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(51): Data Latency=4 Reg=%109
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(51):   MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 0, $noreg, %109:fr64, debug-location !800 :: (store 8 into %ir.real22047); fft3d.c:132:41
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(50): Data Latency=4 Reg=%109
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(54): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(52):   %112:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag225); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 23
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(53): Data Latency=4 Reg=%112
    SU(53): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(53):   %112:fr64 = SUBSDrm %112:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag226); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 19
  Predecessors:
    SU(52): Data Latency=4 Reg=%112
    SU(52): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%112
    SU(54): Data Latency=4 Reg=%112
    SU(55): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(54):   MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 8, $noreg, %112:fr64, debug-location !800 :: (store 8 into %ir.imag224); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(53): Data Latency=4 Reg=%112
    SU(51): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(55): Anti Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(55):   %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(54): Anti Latency=0
    SU(53): Data Latency=4 Reg=%112
    SU(53): Out  Latency=0
    SU(48): Data Latency=4 Reg=%107
  Successors:
    SU(56): Data Latency=1 Reg=%112
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(56):   %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 14
  Predecessors:
    SU(55): Data Latency=1 Reg=%112
    SU(43): Data Latency=1 Reg=%113
    SU(43): Out  Latency=0
  Successors:
    SU(57): Data Latency=1 Reg=%113
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(57):   MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, %113:fr64, debug-location !800 :: (store 8 into %ir.real20541); fft3d.c:132:41
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 13
  Predecessors:
    SU(56): Data Latency=1 Reg=%113
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(75): Ord  Latency=0 Memory
    SU(78): Ord  Latency=1 Memory
    SU(76): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(58):   %114:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23250); fft3d.c:132:41
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 19
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(65): Data Latency=4 Reg=%114
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(59):   %116:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23552); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 23
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(60): Data Latency=4 Reg=%116
    SU(60): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(60):   %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23653); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 19
  Predecessors:
    SU(59): Data Latency=4 Reg=%116
    SU(59): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(61): Data Latency=4 Reg=%116
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(61):   MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 0, $noreg, %116:fr64, debug-location !800 :: (store 8 into %ir.real23451); fft3d.c:132:41
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(60): Data Latency=4 Reg=%116
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(64): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(62):   %119:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag239); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 23
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(63): Data Latency=4 Reg=%119
    SU(63): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(63):   %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag240); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 19
  Predecessors:
    SU(62): Data Latency=4 Reg=%119
    SU(62): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(65): Data Latency=4 Reg=%119
    SU(64): Data Latency=4 Reg=%119
    SU(65): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(64):   MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 8, $noreg, %119:fr64, debug-location !800 :: (store 8 into %ir.imag238); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(63): Data Latency=4 Reg=%119
    SU(61): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(65): Anti Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(65):   %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(64): Anti Latency=0
    SU(63): Data Latency=4 Reg=%119
    SU(63): Out  Latency=0
    SU(58): Data Latency=4 Reg=%114
  Successors:
    SU(70): Data Latency=1 Reg=%119
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(66):   %121:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24755); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 23
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(67): Data Latency=4 Reg=%121
    SU(67): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(67):   %121:fr64 = SUBSDrm %121:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24856); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 19
  Predecessors:
    SU(66): Data Latency=4 Reg=%121
    SU(66): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(71): Data Latency=4 Reg=%121
    SU(69): Data Latency=4 Reg=%121
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(68):   %125:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag244)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 19
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(69): Data Latency=4 Reg=%125
    SU(69): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(69):   %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 15
  Predecessors:
    SU(67): Data Latency=4 Reg=%121
    SU(68): Out  Latency=0
    SU(68): Data Latency=4 Reg=%125
  Successors:
    SU(70): Data Latency=1 Reg=%125
    SU(70): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(70):   %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 14
  Predecessors:
    SU(69): Data Latency=1 Reg=%125
    SU(69): Out  Latency=0
    SU(65): Data Latency=1 Reg=%119
  Successors:
    SU(75): Data Latency=1 Reg=%125
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(71):   MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 0, $noreg, %121:fr64, debug-location !800 :: (store 8 into %ir.real24654); fft3d.c:132:41
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 8
  Predecessors:
    SU(67): Data Latency=4 Reg=%121
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(74): Ord  Latency=0 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(72):   %124:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag251); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 16
  Predecessors:
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(73): Data Latency=4 Reg=%124
    SU(73): Out  Latency=0
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(73):   %124:fr64 = SUBSDrm %124:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag252); fft3d.c:132:41
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 12
  Predecessors:
    SU(72): Data Latency=4 Reg=%124
    SU(72): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(74): Data Latency=4 Reg=%124
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(74):   MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 8, $noreg, %124:fr64, debug-location !800 :: (store 8 into %ir.imag250); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 8
  Predecessors:
    SU(73): Data Latency=4 Reg=%124
    SU(71): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(75):   MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, %125:fr64, debug-location !800 :: (store 8 into %ir.imag231); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 13
  Predecessors:
    SU(70): Data Latency=1 Reg=%125
    SU(57): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Successors:
    SU(78): Ord  Latency=1 Memory
    SU(76): Ord  Latency=1 Memory
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(76):   %126:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203); fft3d.c:132:41
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 41
  Height             : 12
  Predecessors:
    SU(75): Ord  Latency=1 Memory
    SU(57): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(77): Data Latency=4 Reg=%126
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(77):   MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
  # preds left       : 62
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 8
  Predecessors:
    SU(76): Data Latency=4 Reg=%126
    SU(76): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(74): Ord  Latency=0 Memory
    SU(73): Ord  Latency=0 Memory
    SU(72): Ord  Latency=0 Memory
    SU(71): Ord  Latency=0 Memory
    SU(68): Ord  Latency=0 Memory
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(64): Ord  Latency=0 Memory
    SU(63): Ord  Latency=0 Memory
    SU(62): Ord  Latency=0 Memory
    SU(61): Ord  Latency=0 Memory
    SU(60): Ord  Latency=0 Memory
    SU(59): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(53): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Data Latency=1 Reg=%101
    SU(38): Ord  Latency=0 Memory
    SU(37): Data Latency=4 Reg=%97
    SU(37): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(80): Ord  Latency=0 Memory
    SU(78): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(78):   %127:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203 + 8); fft3d.c:132:41
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 46
  Height             : 7
  Predecessors:
    SU(77): Ord  Latency=1 Memory
    SU(75): Ord  Latency=1 Memory
    SU(57): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
  Successors:
    SU(79): Data Latency=4 Reg=%127
    SU(79): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(79):   MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
  # preds left       : 63
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 50
  Height             : 3
  Predecessors:
    SU(78): Data Latency=4 Reg=%127
    SU(78): Ord  Latency=0 Memory
    SU(76): Ord  Latency=0 Memory
    SU(75): Ord  Latency=0 Memory
    SU(74): Ord  Latency=0 Memory
    SU(73): Ord  Latency=0 Memory
    SU(72): Ord  Latency=0 Memory
    SU(71): Ord  Latency=0 Memory
    SU(68): Ord  Latency=0 Memory
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(64): Ord  Latency=0 Memory
    SU(63): Ord  Latency=0 Memory
    SU(62): Ord  Latency=0 Memory
    SU(61): Ord  Latency=0 Memory
    SU(60): Ord  Latency=0 Memory
    SU(59): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(57): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(53): Ord  Latency=0 Memory
    SU(52): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Data Latency=1 Reg=%101
    SU(38): Ord  Latency=0 Memory
    SU(37): Data Latency=4 Reg=%97
    SU(37): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(80): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(80):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !801 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:128:44
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 50
  Height             : 3
  Predecessors:
    SU(79): Ord  Latency=0 Memory
    SU(77): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.31, debug-location !802; fft3d.c:128:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 53
  Height             : 0
  Predecessors:
    SU(80): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 53
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 80 
Scheduling SU(80) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !801 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:128:44
Bottom Pressure:
GR16=2
  Ready @3c
  BotQ.A TopLatency SU(80) 50c
  BotQ.A BotLatency SU(80) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 79 
Scheduling SU(79) MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
Bottom Pressure:
GR16=8
  LiveReg: %101
  UpdateRegP: SU(77) MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
              to GR16 4
  UpdateRegP: SU(79) MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
              to GR16 4
  LiveReg: %97
  UpdateRegP: SU(77) MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
              to GR16 2
  UpdateRegP: SU(79) MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
              to GR16 2
  LiveReg: %127
  UpdateRegP: SU(79) MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 78 
Scheduling SU(78) %127:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203 + 8); fft3d.c:132:41
Bottom Pressure:
GR16=6
  Ready @7c
  BotQ.A BotLatency SU(78) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 77 
Scheduling SU(77) MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
Bottom Pressure:
GR16=8
  LiveReg: %126
  UpdateRegP: SU(77) MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
              to 
  Ready @8c
  BotQ.A BotLatency SU(77) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 76 74 47 39 37 
  Cand SU(76) ORDER                              
Pick Bot ORDER     
Scheduling SU(76) %126:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203); fft3d.c:132:41
Bottom Pressure:
GR16=6
  Ready @12c
  BotQ.A BotLatency SU(76) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 74 47 39 75 
  Cand SU(37) ORDER                              
  Cand SU(74) ORDER                              
  Cand SU(75) ORDER                              
Pick Bot ORDER     
Scheduling SU(75) MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, %125:fr64, debug-location !800 :: (store 8 into %ir.imag231); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %125
  UpdateRegP: SU(75) MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, %125:fr64, debug-location !800 :: (store 8 into %ir.imag231); fft3d.c:132:41
              to 
  Ready @13c
  BotQ.A BotLatency SU(75) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 74 47 39 70 57 
  Cand SU(37) ORDER                              
  Cand SU(74) ORDER                              
Pick Bot ORDER     
Scheduling SU(74) MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 8, $noreg, %124:fr64, debug-location !800 :: (store 8 into %ir.imag250); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %124
  UpdateRegP: SU(74) MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 8, $noreg, %124:fr64, debug-location !800 :: (store 8 into %ir.imag250); fft3d.c:132:41
              to 
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 70 73 71 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(70) ORDER                              
  Cand SU(73) ORDER                              
Pick Bot ORDER     
Scheduling SU(73) %124:fr64 = SUBSDrm %124:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag252); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %124
  UpdateRegP: SU(73) %124:fr64 = SUBSDrm %124:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag252); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 70 71 72 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(70) ORDER                              
  Cand SU(71) ORDER                              
  Cand SU(72) ORDER                              
Pick Bot ORDER     
Scheduling SU(72) %124:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag251); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @16c
  BotQ.A BotLatency SU(72) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 70 71 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(70) ORDER                              
  Cand SU(71) ORDER                              
Pick Bot ORDER     
Scheduling SU(71) MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 0, $noreg, %121:fr64, debug-location !800 :: (store 8 into %ir.real24654); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %121
  UpdateRegP: SU(69) %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
              to 
  UpdateRegP: SU(71) MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 0, $noreg, %121:fr64, debug-location !800 :: (store 8 into %ir.real24654); fft3d.c:132:41
              to 
  Ready @8c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 70 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(70) ORDER                              
Pick Bot ORDER     
Scheduling SU(70) %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %125
  UpdateRegP: SU(70) %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
              to 
  LiveReg: %119
  UpdateRegP: SU(70) %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @14c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 69 65 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(69) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(69) %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %125
  UpdateRegP: SU(69) %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @15c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 65 67 68 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(67) ORDER                              
  Cand SU(68) ORDER                              
Pick Bot ORDER     
Scheduling SU(68) %125:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag244)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @19c
  BotQ.A BotLatency SU(68) 19c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 65 67 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(65) ORDER                              
  Cand SU(67) ORDER                              
Pick Bot ORDER     
Scheduling SU(67) %121:fr64 = SUBSDrm %121:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24856); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %121
  UpdateRegP: SU(67) %121:fr64 = SUBSDrm %121:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24856); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @19c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 65 66 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(65) ORDER                              
  Cand SU(66) ORDER                              
Pick Bot ORDER     
Scheduling SU(66) %121:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24755); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @23c
  BotQ.A BotLatency SU(66) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 65 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(65) ORDER                              
Pick Bot ORDER     
Scheduling SU(65) %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %119
  UpdateRegP: SU(64) MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 8, $noreg, %119:fr64, debug-location !800 :: (store 8 into %ir.imag238); fft3d.c:132:41
              to 
  UpdateRegP: SU(65) %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
              to 
  LiveReg: %114
  UpdateRegP: SU(65) %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @15c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 64 58 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(64) ORDER                              
Pick Bot ORDER     
Scheduling SU(64) MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 8, $noreg, %119:fr64, debug-location !800 :: (store 8 into %ir.imag238); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @15c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 58 63 61 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(63) ORDER                              
Pick Bot ORDER     
Scheduling SU(63) %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag240); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %119
  UpdateRegP: SU(63) %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag240); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @19c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 58 61 62 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(61) ORDER                              
  Cand SU(62) ORDER                              
Pick Bot ORDER     
Scheduling SU(62) %119:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag239); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @23c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 58 61 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(61) ORDER                              
Pick Bot ORDER     
Scheduling SU(61) MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 0, $noreg, %116:fr64, debug-location !800 :: (store 8 into %ir.real23451); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %116
  UpdateRegP: SU(61) MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 0, $noreg, %116:fr64, debug-location !800 :: (store 8 into %ir.real23451); fft3d.c:132:41
              to 
  Ready @15c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 58 60 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(60) ORDER                              
Pick Bot ORDER     
Scheduling SU(60) %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23653); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %116
  UpdateRegP: SU(60) %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23653); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @19c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 58 59 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
  Cand SU(59) ORDER                              
Pick Bot ORDER     
Scheduling SU(59) %116:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23552); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @23c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 58 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
Pick Bot ORDER     
Scheduling SU(58) %114:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23250); fft3d.c:132:41
Bottom Pressure:
GR16=6
  Ready @19c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 57 47 39 
  Cand SU(37) ORDER                              
  Cand SU(57) ORDER                              
Pick Bot ORDER     
Scheduling SU(57) MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, %113:fr64, debug-location !800 :: (store 8 into %ir.real20541); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %113
  UpdateRegP: SU(57) MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, %113:fr64, debug-location !800 :: (store 8 into %ir.real20541); fft3d.c:132:41
              to 
  Ready @13c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 56 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(47) ORDER                              
  Cand SU(56) ORDER                              
Pick Bot ORDER     
Scheduling SU(56) %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %113
  UpdateRegP: SU(56) %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
              to 
  LiveReg: %112
  UpdateRegP: SU(56) %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @14c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 55 43 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(47) ORDER                              
  Cand SU(55) ORDER                              
Pick Bot ORDER     
Scheduling SU(55) %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %112
  UpdateRegP: SU(54) MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 8, $noreg, %112:fr64, debug-location !800 :: (store 8 into %ir.imag224); fft3d.c:132:41
              to 
  UpdateRegP: SU(55) %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
              to 
  LiveReg: %107
  UpdateRegP: SU(55) %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @15c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 54 48 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(54) ORDER                              
Pick Bot ORDER     
Scheduling SU(54) MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 8, $noreg, %112:fr64, debug-location !800 :: (store 8 into %ir.imag224); fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  Ready @15c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 48 53 51 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(53) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(53) %112:fr64 = SUBSDrm %112:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag226); fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %112
  UpdateRegP: SU(53) %112:fr64 = SUBSDrm %112:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag226); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @19c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 48 51 52 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(52) ORDER                              
Pick Bot ORDER     
Scheduling SU(52) %112:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag225); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @23c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 48 51 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(47) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 0, $noreg, %109:fr64, debug-location !800 :: (store 8 into %ir.real22047); fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %109
  UpdateRegP: SU(51) MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 0, $noreg, %109:fr64, debug-location !800 :: (store 8 into %ir.real22047); fft3d.c:132:41
              to 
  Ready @15c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 48 50 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(50) ORDER                              
Pick Bot ORDER     
Scheduling SU(50) %109:fr64 = SUBSDrm %109:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22249); fft3d.c:132:41
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %109
  UpdateRegP: SU(50) %109:fr64 = SUBSDrm %109:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22249); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @19c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 48 49 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(49) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) %109:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22148); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @23c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 48 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(47) ORDER                              
  Cand SU(48) ORDER                              
Pick Bot ORDER     
Scheduling SU(48) %107:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag218); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @19c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 47 43 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(47) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 8, $noreg, %106:fr64, debug-location !800 :: (store 8 into %ir.imag212); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %106
  UpdateRegP: SU(47) MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 8, $noreg, %106:fr64, debug-location !800 :: (store 8 into %ir.imag212); fft3d.c:132:41
              to 
  Ready @8c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 43 46 44 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(46) ORDER                              
Pick Bot ORDER     
Scheduling SU(46) %106:fr64 = SUBSDrm %106:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag214); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %106
  UpdateRegP: SU(46) %106:fr64 = SUBSDrm %106:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag214); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 43 44 45 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(44) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) %106:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag213); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @16c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 43 44 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(43) ORDER                              
  Cand SU(44) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 0, $noreg, %103:fr64, debug-location !800 :: (store 8 into %ir.real20843); fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %103
  UpdateRegP: SU(43) %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
              to 
  UpdateRegP: SU(44) MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 0, $noreg, %103:fr64, debug-location !800 :: (store 8 into %ir.real20843); fft3d.c:132:41
              to 
  Ready @9c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 43 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(43) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %113
  UpdateRegP: SU(43) %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @15c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 41 42 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(42) ORDER                              
Pick Bot ORDER     
Scheduling SU(42) %113:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real20642)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @19c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 41 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %103:fr64 = SUBSDrm %103:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real21045); fft3d.c:132:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %103
  UpdateRegP: SU(41) %103:fr64 = SUBSDrm %103:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real21045); fft3d.c:132:41
              to FR32 -1    FR32X -1
  Ready @19c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 40 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %103:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real20944); fft3d.c:132:41
Bottom Pressure:
GR16=6
  Ready @23c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 39 
  Cand SU(37) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %101:gr64 = SHL64ri %101:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
Bottom Pressure:
GR16=6
  LiveReg: %101
  UpdateRegP: SU(39) %101:gr64 = SHL64ri %101:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
              to GR16 -2
  Ready @10c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 38 
  Cand SU(37) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %101:gr64 = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !799 :: (dereferenceable load 4 from %ir.j); fft3d.c:132:36
Bottom Pressure:
GR16=4
  Ready @14c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 
Scheduling SU(37) %97:gr64_nosp = ADD64rm %97:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !795 :: (dereferenceable load 8 from %ir.x); fft3d.c:132:25
Bottom Pressure:
GR16=4
  LiveReg: %97
  UpdateRegP: SU(37) %97:gr64_nosp = ADD64rm %97:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !795 :: (dereferenceable load 8 from %ir.x); fft3d.c:132:25
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 
Scheduling SU(36) %97:gr64_nosp = SHL64ri %97:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
Bottom Pressure:
GR16=4
  LiveReg: %97
  UpdateRegP: SU(36) %97:gr64_nosp = SHL64ri %97:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
              to GR16 -2
  Ready @13c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
Bottom Pressure:
GR16=4
  LiveReg: %97
  UpdateRegP: SU(35) %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
              to GR16 -2
  Ready @14c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
Bottom Pressure:
GR16=6
  LiveReg: %97
  UpdateRegP: SU(34) %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
              to 
  LiveReg: %94
  UpdateRegP: SU(34) %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
              to GR16 -2
  Ready @15c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 32 
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %97:gr64_nosp = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !797 :: (dereferenceable load 4 from %ir.k); fft3d.c:132:33
Bottom Pressure:
GR16=4
  Ready @19c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) %94:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !796 :: (dereferenceable load 4 from %ir.i22); fft3d.c:132:27
Bottom Pressure:
GR16=2
  Ready @19c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
Bottom Pressure:
GR16=8
  LiveReg: %75
  UpdateRegP: SU(6) %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
              to 
  UpdateRegP: SU(8) %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
              to 
  UpdateRegP: SU(13) %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
              to 
  UpdateRegP: SU(15) %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
              to 
  UpdateRegP: SU(29) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
              to GR16 4
  UpdateRegP: SU(31) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
              to GR16 4
  LiveReg: %85
  UpdateRegP: SU(29) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
              to GR16 2
  UpdateRegP: SU(31) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
              to GR16 2
  LiveReg: %93
  UpdateRegP: SU(31) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
              to 
  Ready @24c
  BotQ.A BotLatency SU(31) 24c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %93:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172 + 8); fft3d.c:131:41
Bottom Pressure:
GR16=6
  Ready @28c
  BotQ.A BotLatency SU(30) 28c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 
Scheduling SU(29) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
Bottom Pressure:
GR16=8
  LiveReg: %92
  UpdateRegP: SU(29) MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
              to 
  Ready @29c
  BotQ.A BotLatency SU(29) 29c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %92:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172); fft3d.c:131:41
Bottom Pressure:
GR16=6
  Ready @33c
  BotQ.A BotLatency SU(28) 33c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 27 
  Cand SU(21) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, %91:fr64, debug-location !794 :: (store 8 into %ir.imag195); fft3d.c:131:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %91
  UpdateRegP: SU(27) MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, %91:fr64, debug-location !794 :: (store 8 into %ir.imag195); fft3d.c:131:41
              to 
  Ready @34c
  BotQ.A BotLatency SU(27) 34c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 26 24 
  Cand SU(21) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %91:fr64 = ADDSDrm %91:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag197); fft3d.c:131:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %91
  UpdateRegP: SU(26) %91:fr64 = ADDSDrm %91:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag197); fft3d.c:131:41
              to FR32 -1    FR32X -1
  Ready @38c
  BotQ.A BotLatency SU(26) 38c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 24 25 
  Cand SU(21) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %91:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag196); fft3d.c:131:41
Bottom Pressure:
GR16=6
  Ready @42c
  BotQ.A BotLatency SU(25) 42c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 24 
  Cand SU(21) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, %89:fr64, debug-location !794 :: (store 8 into %ir.real19137); fft3d.c:131:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %89
  UpdateRegP: SU(24) MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, %89:fr64, debug-location !794 :: (store 8 into %ir.real19137); fft3d.c:131:41
              to 
  Ready @34c
BotQ.A @14c
  Retired: 57
  Executed: 14c
  Critical: 14c, 57 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 23 
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %89:fr64 = ADDSDrm %89:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19339); fft3d.c:131:41
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %89
  UpdateRegP: SU(23) %89:fr64 = ADDSDrm %89:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19339); fft3d.c:131:41
              to FR32 -1    FR32X -1
  Ready @38c
BotQ.A @14c
  Retired: 58
  Executed: 14c
  Critical: 14c, 58 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 22 16 14 
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %89:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19238); fft3d.c:131:41
Bottom Pressure:
GR16=6
  Ready @42c
BotQ.A @14c
  Retired: 59
  Executed: 14c
  Critical: 14c, 59 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 14 16 9 7 
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %85:gr64_nosp = ADD64rm %85:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !789 :: (dereferenceable load 8 from %ir.x); fft3d.c:131:25
Bottom Pressure:
GR16=6
  LiveReg: %85
  UpdateRegP: SU(21) %85:gr64_nosp = ADD64rm %85:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !789 :: (dereferenceable load 8 from %ir.x); fft3d.c:131:25
              to GR16 -2
  Ready @33c
  *** Max MOps 4 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 60
  Executed: 15c
  Critical: 15c, 60 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 16 9 20 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %85:gr64_nosp = SHL64ri %85:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
Bottom Pressure:
GR16=6
  LiveReg: %85
  UpdateRegP: SU(20) %85:gr64_nosp = SHL64ri %85:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
              to GR16 -2
  Ready @34c
BotQ.A @15c
  Retired: 61
  Executed: 15c
  Critical: 15c, 61 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 16 9 19 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
Bottom Pressure:
GR16=6
  LiveReg: %85
  UpdateRegP: SU(19) %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
              to GR16 -2
  Ready @35c
BotQ.A @15c
  Retired: 62
  Executed: 15c
  Critical: 15c, 62 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 16 9 18 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
Bottom Pressure:
GR16=8
  LiveReg: %85
  UpdateRegP: SU(18) %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
              to 
  LiveReg: %71
  UpdateRegP: SU(2) %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
              to 
  UpdateRegP: SU(11) %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
              to 
  UpdateRegP: SU(18) %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
              to GR16 -2
  Ready @36c
BotQ.A @15c
  Retired: 63
  Executed: 15c
  Critical: 15c, 63 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 16 9 17 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %85:gr64_nosp = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !790 :: (dereferenceable load 4 from %ir.i21); fft3d.c:131:27
Bottom Pressure:
GR16=6
  Ready @40c
  *** Max MOps 4 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 64
  Executed: 16c
  Critical: 16c, 64 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 16 9 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %82:gr64, debug-location !786 :: (store 8 into %ir.160 + 8); fft3d.c:130:31
Bottom Pressure:
GR16=8
  LiveReg: %82
  UpdateRegP: SU(16) MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %82:gr64, debug-location !786 :: (store 8 into %ir.160 + 8); fft3d.c:130:31
              to 
  Ready @39c
BotQ.A @16c
  Retired: 65
  Executed: 16c
  Critical: 16c, 65 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 9 15 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
Bottom Pressure:
GR16=8
  LiveReg: %80
  UpdateRegP: SU(13) %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
              to GR16 -2
  UpdateRegP: SU(15) %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
              to GR16 -2
  Ready @43c
  BotQ.A BotLatency SU(15) 43c
BotQ.A @16c
  Retired: 66
  Executed: 16c
  Critical: 16c, 66 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 14 9 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %81:gr64, debug-location !786 :: (store 8 into %ir.160); fft3d.c:130:31
Bottom Pressure:
GR16=10
  LiveReg: %81
  UpdateRegP: SU(14) MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %81:gr64, debug-location !786 :: (store 8 into %ir.160); fft3d.c:130:31
              to 
  Ready @39c
BotQ.A @16c
  Retired: 67
  Executed: 16c
  Critical: 16c, 67 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 13 
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(13) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(13) %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
Bottom Pressure:
GR16=8
  Ready @43c
  *** Max MOps 4 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 68
  Executed: 17c
  Critical: 17c, 68 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 12 
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %80:gr64 = IMUL64rri32 %79:gr64, 528, implicit-def dead $eflags, debug-location !786; fft3d.c:130:31
Bottom Pressure:
GR16=8
  LiveReg: %79
  UpdateRegP: SU(12) %80:gr64 = IMUL64rri32 %79:gr64, 528, implicit-def dead $eflags, debug-location !786; fft3d.c:130:31
              to GR16 -2
  Ready @44c
  BotQ.A BotLatency SU(12) 44c
BotQ.A @17c
  Retired: 69
  Executed: 17c
  Critical: 17c, 69 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 11 
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
Bottom Pressure:
GR16=8
  LiveReg: %79
  UpdateRegP: SU(11) %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
              to GR16 -2
  Ready @45c
  BotQ.A BotLatency SU(11) 45c
BotQ.A @17c
  Retired: 70
  Executed: 17c
  Critical: 17c, 70 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 10 
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %79:gr64 = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 4 from %ir.i12); fft3d.c:130:35
Bottom Pressure:
GR16=6
  Ready @49c
  BotQ.A BotLatency SU(10) 49c
BotQ.A @17c
  Retired: 71
  Executed: 17c
  Critical: 17c, 71 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %77:gr64, debug-location !781 :: (store 8 into %ir.155); fft3d.c:129:31
Bottom Pressure:
GR16=8
  LiveReg: %77
  UpdateRegP: SU(9) MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %77:gr64, debug-location !781 :: (store 8 into %ir.155); fft3d.c:129:31
              to 
  Ready @43c
  *** Max MOps 4 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 72
  Executed: 18c
  Critical: 18c, 72 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
Bottom Pressure:
GR16=8
  LiveReg: %73
  UpdateRegP: SU(6) %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
              to GR16 -2
  UpdateRegP: SU(8) %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
              to GR16 -2
  Ready @47c
BotQ.A @18c
  Retired: 73
  Executed: 18c
  Critical: 18c, 73 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %76:gr64, debug-location !781 :: (store 8 into %ir.155 + 8); fft3d.c:129:31
Bottom Pressure:
GR16=10
  LiveReg: %76
  UpdateRegP: SU(7) MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %76:gr64, debug-location !781 :: (store 8 into %ir.155 + 8); fft3d.c:129:31
              to 
  Ready @43c
BotQ.A @18c
  Retired: 74
  Executed: 18c
  Critical: 18c, 74 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
Bottom Pressure:
GR16=8
  Ready @47c
BotQ.A @18c
  Retired: 75
  Executed: 18c
  Critical: 18c, 75 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %75:gr64_nosp = SHL64ri %75:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
Bottom Pressure:
GR16=8
  LiveReg: %75
  UpdateRegP: SU(5) %75:gr64_nosp = SHL64ri %75:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
              to GR16 -2
  Ready @48c
  *** Max MOps 4 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 76
  Executed: 19c
  Critical: 19c, 76 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %75:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); fft3d.c:129:44
Bottom Pressure:
GR16=6
  Ready @52c
  BotQ.A BotLatency SU(4) 52c
BotQ.A @19c
  Retired: 77
  Executed: 19c
  Critical: 19c, 77 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %73:gr64 = IMUL64rri32 %72:gr64, 528, implicit-def dead $eflags, debug-location !781; fft3d.c:129:31
Bottom Pressure:
GR16=6
  LiveReg: %72
  UpdateRegP: SU(3) %73:gr64 = IMUL64rri32 %72:gr64, 528, implicit-def dead $eflags, debug-location !781; fft3d.c:129:31
              to GR16 -2
  Ready @48c
BotQ.A @19c
  Retired: 78
  Executed: 19c
  Critical: 19c, 78 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
Bottom Pressure:
GR16=6
  LiveReg: %72
  UpdateRegP: SU(2) %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
              to GR16 -2
  Ready @49c
BotQ.A @19c
  Retired: 79
  Executed: 19c
  Critical: 19c, 79 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %71:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 4 from %ir.k); fft3d.c:129:41
Bottom Pressure:
GR16=4
  Ready @53c
  BotQ.A BotLatency SU(1) 53c
  *** Max MOps 4 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 80
  Executed: 20c
  Critical: 20c, 80 MOps
  ExpectedLatency: 53c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %72:gr64 = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.i11); fft3d.c:129:35
Bottom Pressure:
GR16=2
  Ready @53c
BotQ.A @20c
  Retired: 81
  Executed: 20c
  Critical: 20c, 81 MOps
  ExpectedLatency: 53c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %72:gr64 = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.i11); fft3d.c:129:35
SU(1):   %71:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 4 from %ir.k); fft3d.c:129:41
SU(2):   %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
SU(3):   %73:gr64 = IMUL64rri32 %72:gr64, 528, implicit-def dead $eflags, debug-location !781; fft3d.c:129:31
SU(4):   %75:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); fft3d.c:129:44
SU(5):   %75:gr64_nosp = SHL64ri %75:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
SU(6):   %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
SU(7):   MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %76:gr64, debug-location !781 :: (store 8 into %ir.155 + 8); fft3d.c:129:31
SU(8):   %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
SU(9):   MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %77:gr64, debug-location !781 :: (store 8 into %ir.155); fft3d.c:129:31
SU(10):   %79:gr64 = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 4 from %ir.i12); fft3d.c:130:35
SU(11):   %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
SU(12):   %80:gr64 = IMUL64rri32 %79:gr64, 528, implicit-def dead $eflags, debug-location !786; fft3d.c:130:31
SU(13):   %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
SU(14):   MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %81:gr64, debug-location !786 :: (store 8 into %ir.160); fft3d.c:130:31
SU(15):   %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
SU(16):   MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %82:gr64, debug-location !786 :: (store 8 into %ir.160 + 8); fft3d.c:130:31
SU(17):   %85:gr64_nosp = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !790 :: (dereferenceable load 4 from %ir.i21); fft3d.c:131:27
SU(18):   %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
SU(19):   %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
SU(20):   %85:gr64_nosp = SHL64ri %85:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
SU(21):   %85:gr64_nosp = ADD64rm %85:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !789 :: (dereferenceable load 8 from %ir.x); fft3d.c:131:25
SU(22):   %89:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19238); fft3d.c:131:41
SU(23):   %89:fr64 = ADDSDrm %89:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19339); fft3d.c:131:41
SU(24):   MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, %89:fr64, debug-location !794 :: (store 8 into %ir.real19137); fft3d.c:131:41
SU(25):   %91:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag196); fft3d.c:131:41
SU(26):   %91:fr64 = ADDSDrm %91:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag197); fft3d.c:131:41
SU(27):   MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, %91:fr64, debug-location !794 :: (store 8 into %ir.imag195); fft3d.c:131:41
SU(28):   %92:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172); fft3d.c:131:41
SU(29):   MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
SU(30):   %93:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172 + 8); fft3d.c:131:41
SU(31):   MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
SU(32):   %94:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !796 :: (dereferenceable load 4 from %ir.i22); fft3d.c:132:27
SU(33):   %97:gr64_nosp = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !797 :: (dereferenceable load 4 from %ir.k); fft3d.c:132:33
SU(34):   %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
SU(35):   %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
SU(36):   %97:gr64_nosp = SHL64ri %97:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
SU(37):   %97:gr64_nosp = ADD64rm %97:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !795 :: (dereferenceable load 8 from %ir.x); fft3d.c:132:25
SU(38):   %101:gr64 = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !799 :: (dereferenceable load 4 from %ir.j); fft3d.c:132:36
SU(39):   %101:gr64 = SHL64ri %101:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
SU(40):   %103:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real20944); fft3d.c:132:41
SU(41):   %103:fr64 = SUBSDrm %103:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real21045); fft3d.c:132:41
SU(42):   %113:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real20642)
SU(43):   %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
SU(44):   MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 0, $noreg, %103:fr64, debug-location !800 :: (store 8 into %ir.real20843); fft3d.c:132:41
SU(45):   %106:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag213); fft3d.c:132:41
SU(46):   %106:fr64 = SUBSDrm %106:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag214); fft3d.c:132:41
SU(47):   MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 8, $noreg, %106:fr64, debug-location !800 :: (store 8 into %ir.imag212); fft3d.c:132:41
SU(48):   %107:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag218); fft3d.c:132:41
SU(49):   %109:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22148); fft3d.c:132:41
SU(50):   %109:fr64 = SUBSDrm %109:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22249); fft3d.c:132:41
SU(51):   MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 0, $noreg, %109:fr64, debug-location !800 :: (store 8 into %ir.real22047); fft3d.c:132:41
SU(52):   %112:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag225); fft3d.c:132:41
SU(53):   %112:fr64 = SUBSDrm %112:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag226); fft3d.c:132:41
SU(54):   MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 8, $noreg, %112:fr64, debug-location !800 :: (store 8 into %ir.imag224); fft3d.c:132:41
SU(55):   %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
SU(56):   %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
SU(57):   MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, %113:fr64, debug-location !800 :: (store 8 into %ir.real20541); fft3d.c:132:41
SU(58):   %114:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23250); fft3d.c:132:41
SU(59):   %116:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23552); fft3d.c:132:41
SU(60):   %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23653); fft3d.c:132:41
SU(61):   MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 0, $noreg, %116:fr64, debug-location !800 :: (store 8 into %ir.real23451); fft3d.c:132:41
SU(62):   %119:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag239); fft3d.c:132:41
SU(63):   %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag240); fft3d.c:132:41
SU(64):   MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 8, $noreg, %119:fr64, debug-location !800 :: (store 8 into %ir.imag238); fft3d.c:132:41
SU(65):   %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
SU(66):   %121:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24755); fft3d.c:132:41
SU(67):   %121:fr64 = SUBSDrm %121:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24856); fft3d.c:132:41
SU(68):   %125:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag244)
SU(69):   %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
SU(70):   %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
SU(71):   MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 0, $noreg, %121:fr64, debug-location !800 :: (store 8 into %ir.real24654); fft3d.c:132:41
SU(72):   %124:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag251); fft3d.c:132:41
SU(73):   %124:fr64 = SUBSDrm %124:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag252); fft3d.c:132:41
SU(74):   MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 8, $noreg, %124:fr64, debug-location !800 :: (store 8 into %ir.imag250); fft3d.c:132:41
SU(75):   MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, %125:fr64, debug-location !800 :: (store 8 into %ir.imag231); fft3d.c:132:41
SU(76):   %126:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203); fft3d.c:132:41
SU(77):   MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
SU(78):   %127:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203 + 8); fft3d.c:132:41
SU(79):   MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
SU(80):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !801 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:128:44

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)[592r,624r:1)  0@0B-phi 1@592r
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)[336r,352r:2)[8144r,8160r:1)  0@0B-phi 1@8144r 2@336r
DIH [0B,96r:0)[336r,352r:2)[8144r,8160r:1)  0@0B-phi 1@8144r 2@336r
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)[336r,352r:2)[8144r,8160r:1)  0@0B-phi 1@8144r 2@336r
HDX [0B,64r:0)  0@0B-phi
EFLAGS [240r,256r:91)[304r,304d:90)[368r,368d:89)[448r,448d:88)[480r,480d:87)[512r,512d:86)[624r,624d:85)[720r,736r:84)[832r,832d:80)[896r,896d:79)[928r,928d:78)[960r,960d:77)[1072r,1072d:76)[1088r,1104r:3)[1200r,1200d:31)[1248r,1248d:30)[1296r,1296d:29)[1344r,1344d:28)[1376r,1392r:27)[1504r,1504d:24)[1536r,1536d:23)[1712r,1712d:26)[1744r,1744d:25)[2000r,2000d:22)[2016r,2032r:2)[2128r,2144r:20)[2256r,2256d:18)[2288r,2288d:17)[2320r,2320d:16)[2352r,2352d:15)[2400r,2400d:14)[2512r,2512d:13)[2544r,2544d:12)[2576r,2576d:11)[2608r,2608d:10)[2720r,2720d:9)[2736r,2736d:8)[2992r,2992d:7)[3008r,3008d:6)[3056r,3056d:5)[3936r,3936d:4)[3984r,3984d:19)[4032r,4032d:21)[4096r,4112r:75)[4208r,4224r:41)[4320r,4336r:39)[4544r,4544d:33)[4552r,4552d:37)[4560r,4560d:36)[4568r,4568d:35)[4584r,4584d:34)[4624r,4624d:32)[4672r,4672d:38)[4768r,4768d:74)[4832r,4832d:73)[4864r,4864d:72)[4896r,4896d:71)[5008r,5008d:70)[5024r,5040r:1)[5136r,5136d:69)[5184r,5184d:68)[5232r,5232d:67)[5280r,5280d:66)[5312r,5328r:65)[5440r,5440d:62)[5472r,5472d:61)[5648r,5648d:64)[5680r,5680d:63)[5936r,5936d:60)[5952r,5968r:0)[6064r,6080r:58)[6176r,6176d:56)[6192r,6192d:55)[6240r,6240d:54)[6352r,6352d:53)[6368r,6368d:52)[6480r,6480d:51)[6512r,6512d:50)[6544r,6544d:49)[6576r,6576d:48)[6832r,6832d:47)[6864r,6864d:46)[6896r,6896d:45)[6928r,6928d:44)[6976r,6976d:43)[7856r,7856d:42)[7904r,7904d:57)[7952r,7952d:59)[8000r,8000d:40)[8048r,8064r:83)[8112r,8112d:82)[8176r,8176d:81)  0@5952r 1@5024r 2@2016r 3@1088r 4@3936r 5@3056r 6@3008r 7@2992r 8@2736r 9@2720r 10@2608r 11@2576r 12@2544r 13@2512r 14@2400r 15@2352r 16@2320r 17@2288r 18@2256r 19@3984r 20@2128r 21@4032r 22@2000r 23@1536r 24@1504r 25@1744r 26@1712r 27@1376r 28@1344r 29@1296r 30@1248r 31@1200r 32@4624r 33@4544r 34@4584r 35@4568r 36@4560r 37@4552r 38@4672r 39@4320r 40@8000r 41@4208r 42@7856r 43@6976r 44@6928r 45@6896r 46@6864r 47@6832r 48@6576r 49@6544r 50@6512r 51@6480r 52@6368r 53@6352r 54@6240r 55@6192r 56@6176r 57@7904r 58@6064r 59@7952r 60@5936r 61@5472r 62@5440r 63@5680r 64@5648r 65@5312r 66@5280r 67@5232r 68@5184r 69@5136r 70@5008r 71@4896r 72@4864r 73@4832r 74@4768r 75@4096r 76@1072r 77@960r 78@928r 79@896r 80@832r 81@8176r 82@8112r 83@8048r 84@720r 85@624r 86@512r 87@480r 88@448r 89@368r 90@304r 91@240r
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
R9B [0B,16r:0)  0@0B-phi
R9BH [0B,16r:0)  0@0B-phi
R9WH [0B,16r:0)  0@0B-phi
%0 [208r,8032B:0)  0@208r weight:0.000000e+00
%1 [96r,112r:0)  0@96r weight:0.000000e+00
%2 [80r,128r:0)  0@80r weight:0.000000e+00
%3 [64r,144r:0)  0@64r weight:0.000000e+00
%4 [48r,160r:0)  0@48r weight:0.000000e+00
%5 [32r,208r:0)  0@32r weight:0.000000e+00
%6 [16r,224r:0)  0@16r weight:0.000000e+00
%9 [416r,480r:0)  0@416r weight:0.000000e+00
%11 [432r,448r:2)[448r,480r:0)[480r,512r:1)[512r,528r:3)  0@448r 1@480r 2@432r 3@512r weight:0.000000e+00
%13 [560r,592r:0)  0@560r weight:0.000000e+00
%15 [576r,624r:0)[624r,640r:1)  0@576r 1@624r weight:0.000000e+00
%16 [704r,720r:0)  0@704r weight:0.000000e+00
%20 [784r,832r:0)[832r,848r:1)  0@784r 1@832r weight:0.000000e+00
%21 [864r,928r:0)  0@864r weight:0.000000e+00
%23 [880r,896r:2)[896r,928r:0)[928r,960r:1)[960r,992r:3)  0@896r 1@928r 2@880r 3@960r weight:0.000000e+00
%27 [1040r,1072r:0)[1072r,1088r:1)  0@1040r 1@1072r weight:0.000000e+00
%29 [4080r,4096r:0)  0@4080r weight:0.000000e+00
%32 [4720r,4768r:0)[4768r,4784r:1)  0@4720r 1@4768r weight:0.000000e+00
%33 [4800r,4864r:0)  0@4800r weight:0.000000e+00
%35 [4816r,4832r:2)[4832r,4864r:0)[4864r,4896r:1)[4896r,4928r:3)  0@4832r 1@4864r 2@4816r 3@4896r weight:0.000000e+00
%39 [4976r,5008r:0)[5008r,5024r:1)  0@4976r 1@5008r weight:0.000000e+00
%42 [5104r,5280r:0)  0@5104r weight:0.000000e+00
%44 [5120r,5136r:2)[5136r,5184r:0)[5184r,5200r:1)  0@5136r 1@5184r 2@5120r weight:0.000000e+00
%46 [5088r,5232r:2)[5232r,5280r:0)[5280r,5296r:1)  0@5232r 1@5280r 2@5088r weight:0.000000e+00
%47 [5584r,5728r:0)  0@5584r weight:0.000000e+00
%48 [5600r,5648r:0)  0@5600r weight:0.000000e+00
%51 [5616r,5648r:2)[5648r,5680r:0)[5680r,5728r:1)  0@5648r 1@5680r 2@5616r weight:0.000000e+00
%52 [5696r,5712r:0)  0@5696r weight:0.000000e+00
%54 [5728r,5760r:0)[5760r,5776r:1)  0@5728r 1@5760r weight:0.000000e+00
%55 [5792r,5808r:0)  0@5792r weight:0.000000e+00
%56 [5824r,5840r:0)  0@5824r weight:0.000000e+00
%57 [5376r,5504r:0)  0@5376r weight:0.000000e+00
%58 [5392r,5440r:0)  0@5392r weight:0.000000e+00
%61 [5408r,5440r:2)[5440r,5472r:0)[5472r,5504r:1)  0@5440r 1@5472r 2@5408r weight:0.000000e+00
%62 [5488r,5520r:0)  0@5488r weight:0.000000e+00
%63 [5504r,5536r:0)  0@5504r weight:0.000000e+00
%66 [5904r,5936r:0)[5936r,5952r:1)  0@5904r 1@5936r weight:0.000000e+00
%68 [6048r,6064r:0)  0@6048r weight:0.000000e+00
%71 [6144r,6480r:0)  0@6144r weight:0.000000e+00
%72 [6128r,6176r:0)[6176r,6192r:1)  0@6128r 1@6176r weight:0.000000e+00
%73 [6192r,6288r:0)  0@6192r weight:0.000000e+00
%75 [6208r,6240r:0)[6240r,6768r:1)  0@6208r 1@6240r weight:0.000000e+00
%76 [6256r,6272r:0)  0@6256r weight:0.000000e+00
%77 [6288r,6304r:0)  0@6288r weight:0.000000e+00
%79 [6320r,6352r:0)[6352r,6368r:1)  0@6320r 1@6352r weight:0.000000e+00
%80 [6368r,6416r:0)  0@6368r weight:0.000000e+00
%81 [6384r,6400r:0)  0@6384r weight:0.000000e+00
%82 [6416r,6432r:0)  0@6416r weight:0.000000e+00
%85 [6448r,6480r:2)[6480r,6512r:0)[6512r,6544r:1)[6544r,6576r:3)[6576r,6768r:4)  0@6480r 1@6512r 2@6448r 3@6544r 4@6576r weight:0.000000e+00
%89 [6592r,6624r:0)[6624r,6640r:1)  0@6592r 1@6624r weight:0.000000e+00
%91 [6656r,6688r:0)[6688r,6704r:1)  0@6656r 1@6688r weight:0.000000e+00
%92 [6720r,6736r:0)  0@6720r weight:0.000000e+00
%93 [6752r,6768r:0)  0@6752r weight:0.000000e+00
%94 [6784r,6832r:0)  0@6784r weight:0.000000e+00
%97 [6800r,6832r:2)[6832r,6864r:0)[6864r,6896r:1)[6896r,6928r:3)[6928r,7840r:4)  0@6832r 1@6864r 2@6800r 3@6896r 4@6928r weight:0.000000e+00
%101 [6944r,6976r:0)[6976r,7840r:1)  0@6944r 1@6976r weight:0.000000e+00
%103 [6992r,7024r:0)[7024r,7088r:1)  0@6992r 1@7024r weight:0.000000e+00
%106 [7104r,7136r:0)[7136r,7152r:1)  0@7104r 1@7136r weight:0.000000e+00
%107 [7168r,7328r:0)  0@7168r weight:0.000000e+00
%109 [7184r,7216r:0)[7216r,7232r:1)  0@7184r 1@7216r weight:0.000000e+00
%112 [7248r,7280r:2)[7280r,7328r:0)[7328r,7360r:1)  0@7280r 1@7328r 2@7248r weight:0.000000e+00
%113 [7040r,7072r:2)[7072r,7360r:0)[7360r,7376r:1)  0@7072r 1@7360r 2@7040r weight:0.000000e+00
%114 [7392r,7552r:0)  0@7392r weight:0.000000e+00
%116 [7408r,7440r:0)[7440r,7456r:1)  0@7408r 1@7440r weight:0.000000e+00
%119 [7472r,7504r:2)[7504r,7552r:0)[7552r,7680r:1)  0@7504r 1@7552r 2@7472r weight:0.000000e+00
%121 [7568r,7600r:0)[7600r,7696r:1)  0@7568r 1@7600r weight:0.000000e+00
%124 [7712r,7744r:0)[7744r,7760r:1)  0@7712r 1@7744r weight:0.000000e+00
%125 [7616r,7648r:2)[7648r,7680r:0)[7680r,7776r:1)  0@7648r 1@7680r 2@7616r weight:0.000000e+00
%126 [7792r,7808r:0)  0@7792r weight:0.000000e+00
%127 [7824r,7840r:0)  0@7824r weight:0.000000e+00
%128 [4192r,4208r:0)  0@4192r weight:0.000000e+00
%130 [4304r,4320r:0)  0@4304r weight:0.000000e+00
%132 [4384r,4548r:0)  0@4384r weight:0.000000e+00
%134 [4548r,4552r:2)[4552r,4560r:0)[4560r,4568r:1)[4568r,4616r:3)  0@4552r 1@4560r 2@4548r 3@4568r weight:0.000000e+00
%137 [4576r,4584r:0)[4584r,4616r:1)  0@4576r 1@4584r weight:0.000000e+00
%138 [4544r,4608r:0)  0@4544r weight:0.000000e+00
%139 [4592r,4600r:0)  0@4592r weight:0.000000e+00
%140 [4608r,4616r:0)  0@4608r weight:0.000000e+00
%142 [1168r,1344r:0)  0@1168r weight:0.000000e+00
%144 [1184r,1200r:2)[1200r,1248r:0)[1248r,1264r:1)  0@1200r 1@1248r 2@1184r weight:0.000000e+00
%146 [1152r,1296r:2)[1296r,1344r:0)[1344r,1360r:1)  0@1296r 1@1344r 2@1152r weight:0.000000e+00
%147 [1648r,1792r:0)  0@1648r weight:0.000000e+00
%148 [1664r,1712r:0)  0@1664r weight:0.000000e+00
%151 [1680r,1712r:2)[1712r,1744r:0)[1744r,1792r:1)  0@1712r 1@1744r 2@1680r weight:0.000000e+00
%152 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%154 [1792r,1824r:0)[1824r,1840r:1)  0@1792r 1@1824r weight:0.000000e+00
%155 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%156 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%157 [1440r,1568r:0)  0@1440r weight:0.000000e+00
%158 [1456r,1504r:0)  0@1456r weight:0.000000e+00
%161 [1472r,1504r:2)[1504r,1536r:0)[1536r,1568r:1)  0@1504r 1@1536r 2@1472r weight:0.000000e+00
%162 [1552r,1584r:0)  0@1552r weight:0.000000e+00
%163 [1568r,1600r:0)  0@1568r weight:0.000000e+00
%166 [1968r,2000r:0)[2000r,2016r:1)  0@1968r 1@2000r weight:0.000000e+00
%168 [2112r,2128r:0)  0@2112r weight:0.000000e+00
%170 [2192r,2608r:0)  0@2192r weight:0.000000e+00
%172 [2224r,2720r:0)  0@2224r weight:0.000000e+00
%174 [2208r,2256r:2)[2256r,2288r:0)[2288r,2320r:1)[2320r,2352r:3)[2352r,2432r:4)  0@2256r 1@2288r 2@2208r 3@2320r 4@2352r weight:0.000000e+00
%178 [2368r,2400r:0)[2400r,2928r:1)  0@2368r 1@2400r weight:0.000000e+00
%179 [2416r,2464r:0)  0@2416r weight:0.000000e+00
%180 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%183 [2480r,2512r:2)[2512r,2544r:0)[2544r,2576r:1)[2576r,2608r:3)[2608r,2640r:4)  0@2512r 1@2544r 2@2480r 3@2576r 4@2608r weight:0.000000e+00
%186 [2624r,2656r:0)  0@2624r weight:0.000000e+00
%187 [2640r,2672r:0)  0@2640r weight:0.000000e+00
%189 [2688r,2720r:0)[2720r,2736r:1)  0@2688r 1@2720r weight:0.000000e+00
%190 [2736r,2928r:0)  0@2736r weight:0.000000e+00
%192 [2752r,2784r:0)[2784r,2800r:1)  0@2752r 1@2784r weight:0.000000e+00
%194 [2816r,2848r:0)[2848r,2864r:1)  0@2816r 1@2848r weight:0.000000e+00
%195 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%196 [2912r,2928r:0)  0@2912r weight:0.000000e+00
%197 [2944r,2992r:0)  0@2944r weight:0.000000e+00
%199 [2960r,2992r:0)[2992r,3008r:1)  0@2960r 1@2992r weight:0.000000e+00
%200 [3008r,3920r:0)  0@3008r weight:0.000000e+00
%202 [3024r,3056r:0)[3056r,3920r:1)  0@3024r 1@3056r weight:0.000000e+00
%204 [3072r,3104r:0)[3104r,3168r:1)  0@3072r 1@3104r weight:0.000000e+00
%207 [3184r,3216r:0)[3216r,3232r:1)  0@3184r 1@3216r weight:0.000000e+00
%208 [3248r,3408r:0)  0@3248r weight:0.000000e+00
%210 [3264r,3296r:0)[3296r,3312r:1)  0@3264r 1@3296r weight:0.000000e+00
%213 [3328r,3360r:2)[3360r,3408r:0)[3408r,3440r:1)  0@3360r 1@3408r 2@3328r weight:0.000000e+00
%214 [3120r,3152r:2)[3152r,3440r:0)[3440r,3456r:1)  0@3152r 1@3440r 2@3120r weight:0.000000e+00
%215 [3472r,3632r:0)  0@3472r weight:0.000000e+00
%217 [3488r,3520r:0)[3520r,3536r:1)  0@3488r 1@3520r weight:0.000000e+00
%220 [3552r,3584r:2)[3584r,3632r:0)[3632r,3760r:1)  0@3584r 1@3632r 2@3552r weight:0.000000e+00
%222 [3648r,3680r:0)[3680r,3776r:1)  0@3648r 1@3680r weight:0.000000e+00
%225 [3792r,3824r:0)[3824r,3840r:1)  0@3792r 1@3824r weight:0.000000e+00
%226 [3696r,3728r:2)[3728r,3760r:0)[3760r,3856r:1)  0@3728r 1@3760r 2@3696r weight:0.000000e+00
%227 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%228 [3904r,3920r:0)  0@3904r weight:0.000000e+00
%229 [672r,8032B:0)  0@672r weight:0.000000e+00
RegMasks: 352r 8160r
********** MACHINEINSTRS **********
# Machine code for function Swarztrauber: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=16, align=8, at location [SP+8]
  fi#12: size=16, align=8, at location [SP+8]
  fi#13: size=16, align=8, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=16, align=8, at location [SP+8]
  fi#25: size=16, align=8, at location [SP+8]
  fi#26: size=16, align=8, at location [SP+8]
  fi#27: size=16, align=8, at location [SP+8]
  fi#28: size=16, align=8, at location [SP+8]
  fi#29: size=16, align=8, at location [SP+8]
  fi#30: size=16, align=8, at location [SP+8]
  fi#31: size=16, align=8, at location [SP+8]
  fi#32: size=16, align=8, at location [SP+8]
  fi#33: size=16, align=8, at location [SP+8]
  fi#34: size=16, align=8, at location [SP+8]
  fi#35: size=16, align=8, at location [SP+8]
  fi#36: size=16, align=8, at location [SP+8]
  fi#37: size=16, align=8, at location [SP+8]
Constant Pool:
  cp#0: <double -0.000000e+00, double -0.000000e+00>, align=16
Function Live Ins: $edi in %1, $esi in %2, $edx in %3, $ecx in %4, $r8d in %5, $r9 in %6

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $esi, $edx, $ecx, $r8d, $r9
16B	  %6:gr64 = COPY $r9
32B	  %5:gr32 = COPY $r8d
48B	  %4:gr32 = COPY $ecx
64B	  %3:gr32 = COPY $edx
80B	  %2:gr32 = COPY $esi
96B	  %1:gr32 = COPY $edi
112B	  MOV32mr %stack.0.is.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.is.addr)
128B	  MOV32mr %stack.1.m.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.m.addr)
144B	  MOV32mr %stack.2.vlen.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.vlen.addr)
160B	  MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n.addr)
176B	  MOV32mr %stack.4.xd1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.xd1.addr)
192B	  MOV64mr %stack.5.ox.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ox.addr)
208B	  undef %0.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32, debug-location !513; fft3d.c:60:18
224B	  MOV64mr %stack.7.x, 1, $noreg, 0, $noreg, %6:gr64, debug-location !516 :: (store 8 into %ir.x); fft3d.c:60:15
240B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !552 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:66:9
256B	  JCC_1 %bb.2, 4, implicit $eflags, debug-location !554; fft3d.c:66:9
272B	  JMP_1 %bb.1, debug-location !554; fft3d.c:66:9

288B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !555; fft3d.c:67:9
336B	  $edi = MOV32ri 4, debug-location !555; fft3d.c:67:9
352B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !555; fft3d.c:67:9
368B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !555; fft3d.c:67:9

384B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

416B	  %9:gr32 = MOV32rm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !556 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:71:10
432B	  %11:gr32 = COPY %9:gr32, debug-location !557; fft3d.c:71:12
448B	  %11:gr32 = SHR32ri %11:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
480B	  %11:gr32 = ADD32rr %11:gr32(tied-def 0), %9:gr32, implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
512B	  %11:gr32 = SAR32r1 %11:gr32(tied-def 0), implicit-def dead $eflags, debug-location !557; fft3d.c:71:12
528B	  MOV32mr %stack.15.n1, 1, $noreg, 0, $noreg, %11:gr32, debug-location !558 :: (store 4 into %ir.n1); fft3d.c:71:8
544B	  MOV32mi %stack.17.lj, 1, $noreg, 0, $noreg, 1, debug-location !559 :: (store 4 into %ir.lj); fft3d.c:72:8
560B	  %13:gr8 = MOV8rm %stack.1.m.addr, 1, $noreg, 0, $noreg, debug-location !560 :: (dereferenceable load 1 from %ir.m.addr, align 4); fft3d.c:73:15
576B	  %15:gr32 = MOV32ri 1
592B	  $cl = COPY %13:gr8, debug-location !561; fft3d.c:73:12
624B	  %15:gr32 = SHL32rCL %15:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !561; fft3d.c:73:12
640B	  MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %15:gr32, debug-location !562 :: (store 4 into %ir.li); fft3d.c:73:8
656B	  MOV32mi %stack.10.l, 1, $noreg, 0, $noreg, 1, debug-location !563 :: (store 4 into %ir.l); fft3d.c:74:12
672B	  %229:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)

688B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.35
	  successors: %bb.4(0x7c000000), %bb.36(0x04000000); %bb.4(96.88%), %bb.36(3.12%)

704B	  %16:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !566 :: (dereferenceable load 4 from %ir.l); fft3d.c:74:17
720B	  CMP32rm %16:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:74:19
736B	  JCC_1 %bb.36, 15, implicit $eflags, debug-location !570; fft3d.c:74:5
752B	  JMP_1 %bb.4, debug-location !570; fft3d.c:74:5

768B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

784B	  %20:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.lj); fft3d.c:75:14
800B	  MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %20:gr32, debug-location !573 :: (store 4 into %ir.lk); fft3d.c:75:12
832B	  %20:gr32 = ADD32rr %20:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags, debug-location !575; fft3d.c:76:16
848B	  MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %20:gr32, debug-location !576 :: (store 4 into %ir.lj); fft3d.c:76:12
864B	  %21:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !577 :: (dereferenceable load 4 from %ir.li); fft3d.c:77:14
880B	  %23:gr32 = COPY %21:gr32, debug-location !578; fft3d.c:77:17
896B	  %23:gr32 = SHR32ri %23:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
928B	  %23:gr32 = ADD32rr %23:gr32(tied-def 0), %21:gr32, implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
960B	  %23:gr32 = SAR32r1 %23:gr32(tied-def 0), implicit-def dead $eflags, debug-location !578; fft3d.c:77:17
976B	  MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %23:gr32, debug-location !579 :: (store 4 into %ir.li); fft3d.c:77:12
992B	  MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %23:gr32, debug-location !581 :: (store 4 into %ir.ku); fft3d.c:78:12
1008B	  MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !582 :: (store 4 into %ir.i); fft3d.c:80:16

1024B	bb.5.for.cond2:
	; predecessors: %bb.4, %bb.15
	  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)

1040B	  %27:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !587 :: (dereferenceable load 4 from %ir.li); fft3d.c:80:26
1072B	  %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags, debug-location !588; fft3d.c:80:29
1088B	  CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !589 :: (dereferenceable load 4 from %ir.i); fft3d.c:80:23
1104B	  JCC_1 %bb.16, 15, implicit $eflags, debug-location !590; fft3d.c:80:9
1120B	  JMP_1 %bb.6, debug-location !590; fft3d.c:80:9

1136B	bb.6.for.body4:
	; predecessors: %bb.5
	  successors: %bb.7(0x40000000), %bb.8(0x40000000); %bb.7(50.00%), %bb.8(50.00%)

1152B	  %146:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !591 :: (dereferenceable load 4 from %ir.i); fft3d.c:81:19
1168B	  %142:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !593 :: (dereferenceable load 4 from %ir.lk); fft3d.c:81:23
1184B	  %144:gr32 = COPY %146:gr32, debug-location !594; fft3d.c:81:21
1200B	  %144:gr32 = nsw IMUL32rr %144:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !594; fft3d.c:81:21
1216B	  MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %144:gr32, debug-location !595 :: (store 4 into %ir.i11); fft3d.c:81:17
1248B	  %144:gr32 = nsw ADD32rm %144:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !598 :: (dereferenceable load 4 from %ir.n1); fft3d.c:82:23
1264B	  MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %144:gr32, debug-location !599 :: (store 4 into %ir.i12); fft3d.c:82:17
1296B	  %146:gr32 = nsw IMUL32rm %146:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !602 :: (dereferenceable load 4 from %ir.lj); fft3d.c:83:21
1312B	  MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %146:gr32, debug-location !603 :: (store 4 into %ir.i21); fft3d.c:83:17
1344B	  %146:gr32 = nsw ADD32rr %146:gr32(tied-def 0), %142:gr32, implicit-def dead $eflags, debug-location !606; fft3d.c:84:23
1360B	  MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %146:gr32, debug-location !607 :: (store 4 into %ir.i22); fft3d.c:84:17
1376B	  CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !610 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:86:20
1392B	  JCC_1 %bb.8, 14, implicit $eflags, debug-location !611; fft3d.c:86:17
1408B	  JMP_1 %bb.7, debug-location !611; fft3d.c:86:17

1424B	bb.7.if.then9:
	; predecessors: %bb.6
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1440B	  %157:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !612 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:87:22
1456B	  %158:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !614 :: (dereferenceable load 4 from %ir.ku); fft3d.c:87:31
1472B	  %161:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !615 :: (dereferenceable load 4 from %ir.i); fft3d.c:87:36
1504B	  %161:gr64_nosp = nsw ADD64rr %161:gr64_nosp(tied-def 0), %158:gr64, implicit-def dead $eflags, debug-location !616; fft3d.c:87:34
1536B	  %161:gr64_nosp = SHL64ri %161:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !612; fft3d.c:87:22
1552B	  %162:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 0, $noreg, debug-location !612 :: (load 8 from %ir.32); fft3d.c:87:22
1568B	  %163:gr64 = MOV64rm %157:gr64, 1, %161:gr64_nosp, 8, $noreg, debug-location !612 :: (load 8 from %ir.32 + 8); fft3d.c:87:22
1584B	  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %162:gr64, debug-location !612 :: (store 8 into %ir.31); fft3d.c:87:22
1600B	  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %163:gr64, debug-location !612 :: (store 8 into %ir.31 + 8); fft3d.c:87:22
1616B	  JMP_1 %bb.9, debug-location !617; fft3d.c:88:13

1632B	bb.8.if.else:
	; predecessors: %bb.6
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1648B	  %147:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:90:22
1664B	  %148:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.ku); fft3d.c:90:22
1680B	  %151:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 4 from %ir.i); fft3d.c:90:22
1712B	  %151:gr64_nosp = nsw ADD64rr %151:gr64_nosp(tied-def 0), %148:gr64, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
1744B	  %151:gr64_nosp = SHL64ri %151:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !618; fft3d.c:90:22
1760B	  %152:fr64 = MOVSDrm_alt %147:gr64, 1, %151:gr64_nosp, 0, $noreg, debug-location !618 :: (load 8 from %ir.real143); fft3d.c:90:22
1776B	  MOVSDmr %stack.24..compoundliteral, 1, $noreg, 0, $noreg, %152:fr64, debug-location !618 :: (store 8 into %ir.real1); fft3d.c:90:22
1792B	  %154:vr128 = MOVSDrm %147:gr64, 1, %151:gr64_nosp, 8, $noreg, debug-location !618 :: (load 8 from %ir.imag18); fft3d.c:90:22
1824B	  %154:vr128 = PXORrr %154:vr128(tied-def 0), %229:vr128, debug-location !618; fft3d.c:90:22
1840B	  MOVLPDmr %stack.24..compoundliteral, 1, $noreg, 8, $noreg, %154:vr128, debug-location !618 :: (store 8 into %ir.imag); fft3d.c:90:22
1856B	  %155:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 0, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42); fft3d.c:90:22
1872B	  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %155:gr64, debug-location !618 :: (store 8 into %ir.41); fft3d.c:90:22
1888B	  %156:gr64 = MOV64rm %stack.24..compoundliteral, 1, $noreg, 8, $noreg, debug-location !618 :: (dereferenceable load 8 from %ir.42 + 8); fft3d.c:90:22
1904B	  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %156:gr64, debug-location !618 :: (store 8 into %ir.41 + 8); fft3d.c:90:22

1920B	bb.9.if.end20:
	; predecessors: %bb.8, %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1936B	  MOV32mi %stack.14.k, 1, $noreg, 0, $noreg, 0, debug-location !620 :: (store 4 into %ir.k); fft3d.c:92:20

1952B	bb.10.for.cond21:
	; predecessors: %bb.9, %bb.14
	  successors: %bb.11(0x7c000000), %bb.15(0x04000000); %bb.11(96.88%), %bb.15(3.12%)

1968B	  %166:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !625 :: (dereferenceable load 4 from %ir.lk); fft3d.c:92:30
2000B	  %166:gr32 = DEC32r %166:gr32(tied-def 0), implicit-def dead $eflags, debug-location !626; fft3d.c:92:33
2016B	  CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %166:gr32, implicit-def $eflags, debug-location !627 :: (dereferenceable load 4 from %ir.k); fft3d.c:92:27
2032B	  JCC_1 %bb.15, 15, implicit $eflags, debug-location !628; fft3d.c:92:13
2048B	  JMP_1 %bb.11, debug-location !628; fft3d.c:92:13

2064B	bb.11.for.body24:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2080B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !629 :: (store 4 into %ir.j); fft3d.c:93:24

2096B	bb.12.for.cond25:
	; predecessors: %bb.11, %bb.13
	  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

2112B	  %168:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !633 :: (dereferenceable load 4 from %ir.j); fft3d.c:93:29
2128B	  CMP32rm %168:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !636 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:93:31
2144B	  JCC_1 %bb.14, 13, implicit $eflags, debug-location !637; fft3d.c:93:17
2160B	  JMP_1 %bb.13, debug-location !637; fft3d.c:93:17

2176B	bb.13.for.body27:
	; predecessors: %bb.12
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2192B	  %170:gr64 = MOV64rm %stack.7.x, 1, $noreg, 0, $noreg, debug-location !638 :: (dereferenceable load 8 from %ir.x); fft3d.c:94:27
2208B	  %174:gr64_nosp = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.i11); fft3d.c:94:29
2224B	  %172:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.k); fft3d.c:94:35
2256B	  %174:gr64_nosp = nsw ADD64rr %174:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !642; fft3d.c:94:33
2288B	  %174:gr64_nosp = nsw IMUL64rr %174:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
2320B	  %174:gr64_nosp = SHL64ri %174:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
2352B	  %174:gr64_nosp = ADD64rr %174:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !638; fft3d.c:94:27
2368B	  %178:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !643 :: (dereferenceable load 4 from %ir.j); fft3d.c:94:38
2400B	  %178:gr64_nosp = SHL64ri %178:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
2416B	  %179:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 0, $noreg, debug-location !638 :: (load 8 from %ir.53); fft3d.c:94:27
2432B	  %180:gr64 = MOV64rm %178:gr64_nosp, 1, %174:gr64_nosp, 8, $noreg, debug-location !638 :: (load 8 from %ir.53 + 8); fft3d.c:94:27
2448B	  MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %180:gr64, debug-location !638 :: (store 8 into %ir.52 + 8); fft3d.c:94:27
2464B	  MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %179:gr64, debug-location !638 :: (store 8 into %ir.52); fft3d.c:94:27
2480B	  %183:gr64_nosp = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !645 :: (dereferenceable load 4 from %ir.i12); fft3d.c:95:29
2512B	  %183:gr64_nosp = nsw ADD64rr %183:gr64_nosp(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !647; fft3d.c:95:33
2544B	  %183:gr64_nosp = nsw IMUL64rr %183:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
2576B	  %183:gr64_nosp = SHL64ri %183:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
2608B	  %183:gr64_nosp = ADD64rr %183:gr64_nosp(tied-def 0), %170:gr64, implicit-def dead $eflags, debug-location !644; fft3d.c:95:27
2624B	  %186:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 0, $noreg, debug-location !644 :: (load 8 from %ir.60); fft3d.c:95:27
2640B	  %187:gr64 = MOV64rm %178:gr64_nosp, 1, %183:gr64_nosp, 8, $noreg, debug-location !644 :: (load 8 from %ir.60 + 8); fft3d.c:95:27
2656B	  MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %186:gr64, debug-location !644 :: (store 8 into %ir.59); fft3d.c:95:27
2672B	  MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %187:gr64, debug-location !644 :: (store 8 into %ir.59 + 8); fft3d.c:95:27
2688B	  %189:gr64 = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !649 :: (dereferenceable load 4 from %ir.i21); fft3d.c:96:25
2720B	  %189:gr64 = nsw ADD64rr %189:gr64(tied-def 0), %172:gr64, implicit-def dead $eflags, debug-location !652; fft3d.c:96:29
2736B	  %190:gr64 = IMUL64rri32 %189:gr64, 528, implicit-def dead $eflags, debug-location !651; fft3d.c:96:21
2752B	  %192:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real459); fft3d.c:96:39
2784B	  %192:fr64 = ADDSDrm %192:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.real4610); fft3d.c:96:39
2800B	  MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, %192:fr64, debug-location !654 :: (store 8 into %ir.real448); fft3d.c:96:39
2816B	  %194:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag49); fft3d.c:96:39
2848B	  %194:fr64 = ADDSDrm %194:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.imag50); fft3d.c:96:39
2864B	  MOVSDmr %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, %194:fr64, debug-location !654 :: (store 8 into %ir.imag48); fft3d.c:96:39
2880B	  %195:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 0, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69); fft3d.c:96:39
2896B	  MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr, $noreg, %195:gr64, debug-location !654 :: (store 8 into %ir.68); fft3d.c:96:39
2912B	  %196:gr64 = MOV64rm %stack.25..compoundliteral43, 1, $noreg, 8, $noreg, debug-location !654 :: (dereferenceable load 8 from %ir.69 + 8); fft3d.c:96:39
2928B	  MOV64mr %190:gr64, 1, %178:gr64_nosp, @scr + 8, $noreg, %196:gr64, debug-location !654 :: (store 8 into %ir.68 + 8); fft3d.c:96:39
2944B	  %197:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !655 :: (dereferenceable load 4 from %ir.i22); fft3d.c:97:25
2960B	  %199:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !656 :: (dereferenceable load 4 from %ir.k); fft3d.c:97:31
2992B	  %199:gr64 = nsw ADD64rr %199:gr64(tied-def 0), %197:gr64, implicit-def dead $eflags, debug-location !658; fft3d.c:97:29
3008B	  %200:gr64 = IMUL64rri32 %199:gr64, 528, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
3024B	  %202:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !659 :: (dereferenceable load 4 from %ir.j); fft3d.c:97:34
3056B	  %202:gr64_nosp = SHL64ri %202:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !657; fft3d.c:97:21
3072B	  %204:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6215); fft3d.c:97:39
3104B	  %204:fr64 = SUBSDrm %204:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real6316); fft3d.c:97:39
3120B	  %214:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real5913)
3152B	  %214:fr64 = MULSDrr %214:fr64(tied-def 0), %204:fr64, debug-location !660; fft3d.c:97:39
3168B	  MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 0, $noreg, %204:fr64, debug-location !660 :: (store 8 into %ir.real6114); fft3d.c:97:39
3184B	  %207:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag66); fft3d.c:97:39
3216B	  %207:fr64 = SUBSDrm %207:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag67); fft3d.c:97:39
3232B	  MOVSDmr %stack.27..compoundliteral60, 1, $noreg, 8, $noreg, %207:fr64, debug-location !660 :: (store 8 into %ir.imag65); fft3d.c:97:39
3248B	  %208:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag71); fft3d.c:97:39
3264B	  %210:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7419); fft3d.c:97:39
3296B	  %210:fr64 = SUBSDrm %210:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real7520); fft3d.c:97:39
3312B	  MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 0, $noreg, %210:fr64, debug-location !660 :: (store 8 into %ir.real7318); fft3d.c:97:39
3328B	  %213:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag78); fft3d.c:97:39
3360B	  %213:fr64 = SUBSDrm %213:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag79); fft3d.c:97:39
3376B	  MOVSDmr %stack.28..compoundliteral72, 1, $noreg, 8, $noreg, %213:fr64, debug-location !660 :: (store 8 into %ir.imag77); fft3d.c:97:39
3408B	  %213:fr64 = MULSDrr %213:fr64(tied-def 0), %208:fr64, debug-location !660; fft3d.c:97:39
3440B	  %214:fr64 = SUBSDrr %214:fr64(tied-def 0), %213:fr64, debug-location !660; fft3d.c:97:39
3456B	  MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, %214:fr64, debug-location !660 :: (store 8 into %ir.real5812); fft3d.c:97:39
3472B	  %215:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8521); fft3d.c:97:39
3488B	  %217:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8823); fft3d.c:97:39
3520B	  %217:fr64 = SUBSDrm %217:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real8924); fft3d.c:97:39
3536B	  MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 0, $noreg, %217:fr64, debug-location !660 :: (store 8 into %ir.real8722); fft3d.c:97:39
3552B	  %220:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag92); fft3d.c:97:39
3584B	  %220:fr64 = SUBSDrm %220:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag93); fft3d.c:97:39
3600B	  MOVSDmr %stack.29..compoundliteral86, 1, $noreg, 8, $noreg, %220:fr64, debug-location !660 :: (store 8 into %ir.imag91); fft3d.c:97:39
3632B	  %220:fr64 = MULSDrr %220:fr64(tied-def 0), %215:fr64, debug-location !660; fft3d.c:97:39
3648B	  %222:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10026); fft3d.c:97:39
3680B	  %222:fr64 = SUBSDrm %222:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.real10127); fft3d.c:97:39
3696B	  %226:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag97)
3728B	  %226:fr64 = MULSDrr %226:fr64(tied-def 0), %222:fr64, debug-location !660; fft3d.c:97:39
3760B	  %226:fr64 = ADDSDrr %226:fr64(tied-def 0), %220:fr64, debug-location !660; fft3d.c:97:39
3776B	  MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 0, $noreg, %222:fr64, debug-location !660 :: (store 8 into %ir.real9925); fft3d.c:97:39
3792B	  %225:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag104); fft3d.c:97:39
3824B	  %225:fr64 = SUBSDrm %225:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.imag105); fft3d.c:97:39
3840B	  MOVSDmr %stack.30..compoundliteral98, 1, $noreg, 8, $noreg, %225:fr64, debug-location !660 :: (store 8 into %ir.imag103); fft3d.c:97:39
3856B	  MOVSDmr %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, %226:fr64, debug-location !660 :: (store 8 into %ir.imag84); fft3d.c:97:39
3872B	  %227:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98); fft3d.c:97:39
3888B	  MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr, $noreg, %227:gr64, debug-location !660 :: (store 8 into %ir.97); fft3d.c:97:39
3904B	  %228:gr64 = MOV64rm %stack.26..compoundliteral57, 1, $noreg, 8, $noreg, debug-location !660 :: (dereferenceable load 8 from %ir.98 + 8); fft3d.c:97:39
3920B	  MOV64mr %200:gr64, 1, %202:gr64_nosp, @scr + 8, $noreg, %228:gr64, debug-location !660 :: (store 8 into %ir.97 + 8); fft3d.c:97:39
3936B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !661 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:93:40
3952B	  JMP_1 %bb.12, debug-location !662; fft3d.c:93:17

3968B	bb.14.for.end:
	; predecessors: %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

3984B	  INC32m %stack.14.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !665 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:92:39
4000B	  JMP_1 %bb.10, debug-location !666; fft3d.c:92:13

4016B	bb.15.for.end112:
	; predecessors: %bb.10
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

4032B	  INC32m %stack.8.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !669 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:80:35
4048B	  JMP_1 %bb.5, debug-location !670; fft3d.c:80:9

4064B	bb.16.for.end115:
	; predecessors: %bb.5
	  successors: %bb.17(0x40000000), %bb.23(0x40000000); %bb.17(50.00%), %bb.23(50.00%)

4080B	  %29:gr32 = MOV32rm %stack.10.l, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 4 from %ir.l); fft3d.c:102:13
4096B	  CMP32rm %29:gr32, %stack.1.m.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !676 :: (dereferenceable load 4 from %ir.m.addr); fft3d.c:102:15
4112B	  JCC_1 %bb.23, 5, implicit $eflags, debug-location !677; fft3d.c:102:13
4128B	  JMP_1 %bb.17, debug-location !677; fft3d.c:102:13

4144B	bb.17.if.then117:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4160B	  MOV32mi %stack.14.k, 1, $noreg, 0, $noreg, 0, debug-location !678 :: (store 4 into %ir.k); fft3d.c:103:20

4176B	bb.18.for.cond118:
	; predecessors: %bb.17, %bb.22
	  successors: %bb.19(0x7c000000), %bb.35(0x04000000); %bb.19(96.88%), %bb.35(3.12%)

4192B	  %128:gr32 = MOV32rm %stack.14.k, 1, $noreg, 0, $noreg, debug-location !682 :: (dereferenceable load 4 from %ir.k); fft3d.c:103:25
4208B	  CMP32rm %128:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !685 :: (dereferenceable load 4 from %ir.n.addr); fft3d.c:103:27
4224B	  JCC_1 %bb.35, 13, implicit $eflags, debug-location !686; fft3d.c:103:13
4240B	  JMP_1 %bb.19, debug-location !686; fft3d.c:103:13

4256B	bb.19.for.body120:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

4272B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !687 :: (store 4 into %ir.j); fft3d.c:104:24

4288B	bb.20.for.cond121:
	; predecessors: %bb.19, %bb.21
	  successors: %bb.21(0x7c000000), %bb.22(0x04000000); %bb.21(96.88%), %bb.22(3.12%)

4304B	  %130:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !691 :: (dereferenceable load 4 from %ir.j); fft3d.c:104:29
4320B	  CMP32rm %130:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:104:31
4336B	  JCC_1 %bb.22, 13, implicit $eflags, debug-location !695; fft3d.c:104:17
4352B	  JMP_1 %bb.21, debug-location !695; fft3d.c:104:17

4368B	bb.21.for.body123:
	; predecessors: %bb.20
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

4384B	  %132:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !698 :: (dereferenceable load 4 from %ir.k); fft3d.c:105:23
4544B	  %138:gr64 = IMUL64rri32 %132:gr64, 528, implicit-def dead $eflags, debug-location !701; fft3d.c:105:31
4548B	  %134:gr64_nosp = COPY %132:gr64, debug-location !696; fft3d.c:105:21
4552B	  %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
4560B	  %134:gr64_nosp = SHL64ri %134:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
4568B	  %134:gr64_nosp = ADD64rm %134:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !696 :: (dereferenceable load 8 from %ir.x); fft3d.c:105:21
4576B	  %137:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !699 :: (dereferenceable load 4 from %ir.j); fft3d.c:105:26
4584B	  %137:gr64_nosp = SHL64ri %137:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !696; fft3d.c:105:21
4592B	  %139:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr, $noreg, debug-location !701 :: (load 8 from %ir.115); fft3d.c:105:31
4600B	  MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 0, $noreg, %139:gr64, debug-location !701 :: (store 8 into %ir.114); fft3d.c:105:31
4608B	  %140:gr64 = MOV64rm %138:gr64, 1, %137:gr64_nosp, @scr + 8, $noreg, debug-location !701 :: (load 8 from %ir.115 + 8); fft3d.c:105:31
4616B	  MOV64mr %137:gr64_nosp, 1, %134:gr64_nosp, 8, $noreg, %140:gr64, debug-location !701 :: (store 8 into %ir.114 + 8); fft3d.c:105:31
4624B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !703 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:104:40
4640B	  JMP_1 %bb.20, debug-location !704; fft3d.c:104:17

4656B	bb.22.for.end134:
	; predecessors: %bb.20
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4672B	  INC32m %stack.14.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !707 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:103:33
4688B	  JMP_1 %bb.18, debug-location !708; fft3d.c:103:13

4704B	bb.23.if.else138:
	; predecessors: %bb.16
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

4720B	  %32:gr32 = MOV32rm %stack.17.lj, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 4 from %ir.lj); fft3d.c:110:18
4736B	  MOV32mr %stack.18.lk, 1, $noreg, 0, $noreg, %32:gr32, debug-location !713 :: (store 4 into %ir.lk); fft3d.c:110:16
4768B	  %32:gr32 = ADD32rr %32:gr32(tied-def 0), %32:gr32, implicit-def dead $eflags, debug-location !715; fft3d.c:111:20
4784B	  MOV32mr %stack.17.lj, 1, $noreg, 0, $noreg, %32:gr32, debug-location !716 :: (store 4 into %ir.lj); fft3d.c:111:16
4800B	  %33:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !717 :: (dereferenceable load 4 from %ir.li); fft3d.c:112:18
4816B	  %35:gr32 = COPY %33:gr32, debug-location !718; fft3d.c:112:21
4832B	  %35:gr32 = SHR32ri %35:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
4864B	  %35:gr32 = ADD32rr %35:gr32(tied-def 0), %33:gr32, implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
4896B	  %35:gr32 = SAR32r1 %35:gr32(tied-def 0), implicit-def dead $eflags, debug-location !718; fft3d.c:112:21
4912B	  MOV32mr %stack.16.li, 1, $noreg, 0, $noreg, %35:gr32, debug-location !719 :: (store 4 into %ir.li); fft3d.c:112:16
4928B	  MOV32mr %stack.19.ku, 1, $noreg, 0, $noreg, %35:gr32, debug-location !721 :: (store 4 into %ir.ku); fft3d.c:113:16
4944B	  MOV32mi %stack.8.i, 1, $noreg, 0, $noreg, 0, debug-location !722 :: (store 4 into %ir.i); fft3d.c:115:20

4960B	bb.24.for.cond141:
	; predecessors: %bb.23, %bb.34
	  successors: %bb.25(0x7c000000), %bb.35(0x04000000); %bb.25(96.88%), %bb.35(3.12%)

4976B	  %39:gr32 = MOV32rm %stack.16.li, 1, $noreg, 0, $noreg, debug-location !727 :: (dereferenceable load 4 from %ir.li); fft3d.c:115:30
5008B	  %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags, debug-location !728; fft3d.c:115:33
5024B	  CMP32mr %stack.8.i, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags, debug-location !729 :: (dereferenceable load 4 from %ir.i); fft3d.c:115:27
5040B	  JCC_1 %bb.35, 15, implicit $eflags, debug-location !730; fft3d.c:115:13
5056B	  JMP_1 %bb.25, debug-location !730; fft3d.c:115:13

5072B	bb.25.for.body144:
	; predecessors: %bb.24
	  successors: %bb.26(0x40000000), %bb.27(0x40000000); %bb.26(50.00%), %bb.27(50.00%)

5088B	  %46:gr32 = MOV32rm %stack.8.i, 1, $noreg, 0, $noreg, debug-location !731 :: (dereferenceable load 4 from %ir.i); fft3d.c:116:23
5104B	  %42:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !733 :: (dereferenceable load 4 from %ir.lk); fft3d.c:116:27
5120B	  %44:gr32 = COPY %46:gr32, debug-location !734; fft3d.c:116:25
5136B	  %44:gr32 = nsw IMUL32rr %44:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !734; fft3d.c:116:25
5152B	  MOV32mr %stack.20.i11, 1, $noreg, 0, $noreg, %44:gr32, debug-location !735 :: (store 4 into %ir.i11); fft3d.c:116:21
5184B	  %44:gr32 = nsw ADD32rm %44:gr32(tied-def 0), %stack.15.n1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !738 :: (dereferenceable load 4 from %ir.n1); fft3d.c:117:27
5200B	  MOV32mr %stack.21.i12, 1, $noreg, 0, $noreg, %44:gr32, debug-location !739 :: (store 4 into %ir.i12); fft3d.c:117:21
5232B	  %46:gr32 = nsw IMUL32rm %46:gr32(tied-def 0), %stack.17.lj, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !742 :: (dereferenceable load 4 from %ir.lj); fft3d.c:118:25
5248B	  MOV32mr %stack.22.i21, 1, $noreg, 0, $noreg, %46:gr32, debug-location !743 :: (store 4 into %ir.i21); fft3d.c:118:21
5280B	  %46:gr32 = nsw ADD32rr %46:gr32(tied-def 0), %42:gr32, implicit-def dead $eflags, debug-location !746; fft3d.c:119:27
5296B	  MOV32mr %stack.23.i22, 1, $noreg, 0, $noreg, %46:gr32, debug-location !747 :: (store 4 into %ir.i22); fft3d.c:119:21
5312B	  CMP32mi8 %stack.0.is.addr, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !750 :: (dereferenceable load 4 from %ir.is.addr); fft3d.c:121:24
5328B	  JCC_1 %bb.27, 14, implicit $eflags, debug-location !751; fft3d.c:121:21
5344B	  JMP_1 %bb.26, debug-location !751; fft3d.c:121:21

5360B	bb.26.if.then150:
	; predecessors: %bb.25
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

5376B	  %57:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:122:26
5392B	  %58:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !754 :: (dereferenceable load 4 from %ir.ku); fft3d.c:122:35
5408B	  %61:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !755 :: (dereferenceable load 4 from %ir.i); fft3d.c:122:40
5440B	  %61:gr64_nosp = nsw ADD64rr %61:gr64_nosp(tied-def 0), %58:gr64, implicit-def dead $eflags, debug-location !756; fft3d.c:122:38
5472B	  %61:gr64_nosp = SHL64ri %61:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !752; fft3d.c:122:26
5488B	  %62:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 0, $noreg, debug-location !752 :: (load 8 from %ir.137); fft3d.c:122:26
5504B	  %63:gr64 = MOV64rm %57:gr64, 1, %61:gr64_nosp, 8, $noreg, debug-location !752 :: (load 8 from %ir.137 + 8); fft3d.c:122:26
5520B	  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %62:gr64, debug-location !752 :: (store 8 into %ir.136); fft3d.c:122:26
5536B	  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %63:gr64, debug-location !752 :: (store 8 into %ir.136 + 8); fft3d.c:122:26
5552B	  JMP_1 %bb.28, debug-location !757; fft3d.c:123:17

5568B	bb.27.if.else154:
	; predecessors: %bb.25
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

5584B	  %47:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.exponent.addr, align 16); fft3d.c:125:26
5600B	  %48:gr64 = MOVSX64rm32 %stack.19.ku, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.ku); fft3d.c:125:26
5616B	  %51:gr64_nosp = MOVSX64rm32 %stack.8.i, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 4 from %ir.i); fft3d.c:125:26
5648B	  %51:gr64_nosp = nsw ADD64rr %51:gr64_nosp(tied-def 0), %48:gr64, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
5680B	  %51:gr64_nosp = SHL64ri %51:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !758; fft3d.c:125:26
5696B	  %52:fr64 = MOVSDrm_alt %47:gr64, 1, %51:gr64_nosp, 0, $noreg, debug-location !758 :: (load 8 from %ir.real16032); fft3d.c:125:26
5712B	  MOVSDmr %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, %52:fr64, debug-location !758 :: (store 8 into %ir.real15630); fft3d.c:125:26
5728B	  %54:vr128 = MOVSDrm %47:gr64, 1, %51:gr64_nosp, 8, $noreg, debug-location !758 :: (load 8 from %ir.imag165); fft3d.c:125:26
5760B	  %54:vr128 = PXORrr %54:vr128(tied-def 0), %229:vr128, debug-location !758; fft3d.c:125:26
5776B	  MOVLPDmr %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, %54:vr128, debug-location !758 :: (store 8 into %ir.imag161); fft3d.c:125:26
5792B	  %55:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 0, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147); fft3d.c:125:26
5808B	  MOV64mr %stack.11.u1, 1, $noreg, 0, $noreg, %55:gr64, debug-location !758 :: (store 8 into %ir.146); fft3d.c:125:26
5824B	  %56:gr64 = MOV64rm %stack.31..compoundliteral155, 1, $noreg, 8, $noreg, debug-location !758 :: (dereferenceable load 8 from %ir.147 + 8); fft3d.c:125:26
5840B	  MOV64mr %stack.11.u1, 1, $noreg, 8, $noreg, %56:gr64, debug-location !758 :: (store 8 into %ir.146 + 8); fft3d.c:125:26

5856B	bb.28.if.end167:
	; predecessors: %bb.27, %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

5872B	  MOV32mi %stack.14.k, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 4 into %ir.k); fft3d.c:127:24

5888B	bb.29.for.cond168:
	; predecessors: %bb.28, %bb.33
	  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)

5904B	  %66:gr32 = MOV32rm %stack.18.lk, 1, $noreg, 0, $noreg, debug-location !765 :: (dereferenceable load 4 from %ir.lk); fft3d.c:127:34
5936B	  %66:gr32 = DEC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !766; fft3d.c:127:37
5952B	  CMP32mr %stack.14.k, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !767 :: (dereferenceable load 4 from %ir.k); fft3d.c:127:31
5968B	  JCC_1 %bb.34, 15, implicit $eflags, debug-location !768; fft3d.c:127:17
5984B	  JMP_1 %bb.30, debug-location !768; fft3d.c:127:17

6000B	bb.30.for.body171:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6016B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !769 :: (store 4 into %ir.j); fft3d.c:128:28

6032B	bb.31.for.cond172:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

6048B	  %68:gr32 = MOV32rm %stack.9.j, 1, $noreg, 0, $noreg, debug-location !773 :: (dereferenceable load 4 from %ir.j); fft3d.c:128:33
6064B	  CMP32rm %68:gr32, %stack.2.vlen.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !776 :: (dereferenceable load 4 from %ir.vlen.addr); fft3d.c:128:35
6080B	  JCC_1 %bb.33, 13, implicit $eflags, debug-location !777; fft3d.c:128:21
6096B	  JMP_1 %bb.32, debug-location !777; fft3d.c:128:21

6112B	bb.32.for.body174:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6128B	  %72:gr64 = MOVSX64rm32 %stack.20.i11, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.i11); fft3d.c:129:35
6144B	  %71:gr64 = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !780 :: (dereferenceable load 4 from %ir.k); fft3d.c:129:41
6176B	  %72:gr64 = nsw ADD64rr %72:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !782; fft3d.c:129:39
6192B	  %73:gr64 = IMUL64rri32 %72:gr64, 528, implicit-def dead $eflags, debug-location !781; fft3d.c:129:31
6208B	  %75:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); fft3d.c:129:44
6240B	  %75:gr64_nosp = SHL64ri %75:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
6256B	  %76:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !781 :: (load 8 from %ir.156 + 8); fft3d.c:129:31
6272B	  MOV64mr %stack.12.x11, 1, $noreg, 8, $noreg, %76:gr64, debug-location !781 :: (store 8 into %ir.155 + 8); fft3d.c:129:31
6288B	  %77:gr64 = MOV64rm %73:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !781 :: (load 8 from %ir.156); fft3d.c:129:31
6304B	  MOV64mr %stack.12.x11, 1, $noreg, 0, $noreg, %77:gr64, debug-location !781 :: (store 8 into %ir.155); fft3d.c:129:31
6320B	  %79:gr64 = MOVSX64rm32 %stack.21.i12, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 4 from %ir.i12); fft3d.c:130:35
6352B	  %79:gr64 = nsw ADD64rr %79:gr64(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !787; fft3d.c:130:39
6368B	  %80:gr64 = IMUL64rri32 %79:gr64, 528, implicit-def dead $eflags, debug-location !786; fft3d.c:130:31
6384B	  %81:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr, $noreg, debug-location !786 :: (load 8 from %ir.161); fft3d.c:130:31
6400B	  MOV64mr %stack.13.x21, 1, $noreg, 0, $noreg, %81:gr64, debug-location !786 :: (store 8 into %ir.160); fft3d.c:130:31
6416B	  %82:gr64 = MOV64rm %80:gr64, 1, %75:gr64_nosp, @scr + 8, $noreg, debug-location !786 :: (load 8 from %ir.161 + 8); fft3d.c:130:31
6432B	  MOV64mr %stack.13.x21, 1, $noreg, 8, $noreg, %82:gr64, debug-location !786 :: (store 8 into %ir.160 + 8); fft3d.c:130:31
6448B	  %85:gr64_nosp = MOVSX64rm32 %stack.22.i21, 1, $noreg, 0, $noreg, debug-location !790 :: (dereferenceable load 4 from %ir.i21); fft3d.c:131:27
6480B	  %85:gr64_nosp = nsw ADD64rr %85:gr64_nosp(tied-def 0), %71:gr64, implicit-def dead $eflags, debug-location !792; fft3d.c:131:31
6512B	  %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
6544B	  %85:gr64_nosp = SHL64ri %85:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !789; fft3d.c:131:25
6576B	  %85:gr64_nosp = ADD64rm %85:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !789 :: (dereferenceable load 8 from %ir.x); fft3d.c:131:25
6592B	  %89:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19238); fft3d.c:131:41
6624B	  %89:fr64 = ADDSDrm %89:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.real19339); fft3d.c:131:41
6640B	  MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, %89:fr64, debug-location !794 :: (store 8 into %ir.real19137); fft3d.c:131:41
6656B	  %91:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag196); fft3d.c:131:41
6688B	  %91:fr64 = ADDSDrm %91:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.imag197); fft3d.c:131:41
6704B	  MOVSDmr %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, %91:fr64, debug-location !794 :: (store 8 into %ir.imag195); fft3d.c:131:41
6720B	  %92:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 0, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172); fft3d.c:131:41
6736B	  MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 0, $noreg, %92:gr64, debug-location !794 :: (store 8 into %ir.171); fft3d.c:131:41
6752B	  %93:gr64 = MOV64rm %stack.32..compoundliteral190, 1, $noreg, 8, $noreg, debug-location !794 :: (dereferenceable load 8 from %ir.172 + 8); fft3d.c:131:41
6768B	  MOV64mr %75:gr64_nosp, 1, %85:gr64_nosp, 8, $noreg, %93:gr64, debug-location !794 :: (store 8 into %ir.171 + 8); fft3d.c:131:41
6784B	  %94:gr64 = MOVSX64rm32 %stack.23.i22, 1, $noreg, 0, $noreg, debug-location !796 :: (dereferenceable load 4 from %ir.i22); fft3d.c:132:27
6800B	  %97:gr64_nosp = MOVSX64rm32 %stack.14.k, 1, $noreg, 0, $noreg, debug-location !797 :: (dereferenceable load 4 from %ir.k); fft3d.c:132:33
6832B	  %97:gr64_nosp = nsw ADD64rr %97:gr64_nosp(tied-def 0), %94:gr64, implicit-def dead $eflags, debug-location !798; fft3d.c:132:31
6864B	  %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %0:gr64_with_sub_8bit, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
6896B	  %97:gr64_nosp = SHL64ri %97:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
6928B	  %97:gr64_nosp = ADD64rm %97:gr64_nosp(tied-def 0), %stack.7.x, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !795 :: (dereferenceable load 8 from %ir.x); fft3d.c:132:25
6944B	  %101:gr64 = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !799 :: (dereferenceable load 4 from %ir.j); fft3d.c:132:36
6976B	  %101:gr64 = SHL64ri %101:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !795; fft3d.c:132:25
6992B	  %103:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real20944); fft3d.c:132:41
7024B	  %103:fr64 = SUBSDrm %103:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real21045); fft3d.c:132:41
7040B	  %113:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.real20642)
7072B	  %113:fr64 = MULSDrr %113:fr64(tied-def 0), %103:fr64, debug-location !800; fft3d.c:132:41
7088B	  MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 0, $noreg, %103:fr64, debug-location !800 :: (store 8 into %ir.real20843); fft3d.c:132:41
7104B	  %106:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag213); fft3d.c:132:41
7136B	  %106:fr64 = SUBSDrm %106:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag214); fft3d.c:132:41
7152B	  MOVSDmr %stack.34..compoundliteral207, 1, $noreg, 8, $noreg, %106:fr64, debug-location !800 :: (store 8 into %ir.imag212); fft3d.c:132:41
7168B	  %107:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag218); fft3d.c:132:41
7184B	  %109:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22148); fft3d.c:132:41
7216B	  %109:fr64 = SUBSDrm %109:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real22249); fft3d.c:132:41
7232B	  MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 0, $noreg, %109:fr64, debug-location !800 :: (store 8 into %ir.real22047); fft3d.c:132:41
7248B	  %112:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag225); fft3d.c:132:41
7280B	  %112:fr64 = SUBSDrm %112:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag226); fft3d.c:132:41
7296B	  MOVSDmr %stack.35..compoundliteral219, 1, $noreg, 8, $noreg, %112:fr64, debug-location !800 :: (store 8 into %ir.imag224); fft3d.c:132:41
7328B	  %112:fr64 = MULSDrr %112:fr64(tied-def 0), %107:fr64, debug-location !800; fft3d.c:132:41
7360B	  %113:fr64 = SUBSDrr %113:fr64(tied-def 0), %112:fr64, debug-location !800; fft3d.c:132:41
7376B	  MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, %113:fr64, debug-location !800 :: (store 8 into %ir.real20541); fft3d.c:132:41
7392B	  %114:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23250); fft3d.c:132:41
7408B	  %116:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23552); fft3d.c:132:41
7440B	  %116:fr64 = SUBSDrm %116:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real23653); fft3d.c:132:41
7456B	  MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 0, $noreg, %116:fr64, debug-location !800 :: (store 8 into %ir.real23451); fft3d.c:132:41
7472B	  %119:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag239); fft3d.c:132:41
7504B	  %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag240); fft3d.c:132:41
7520B	  MOVSDmr %stack.36..compoundliteral233, 1, $noreg, 8, $noreg, %119:fr64, debug-location !800 :: (store 8 into %ir.imag238); fft3d.c:132:41
7552B	  %119:fr64 = MULSDrr %119:fr64(tied-def 0), %114:fr64, debug-location !800; fft3d.c:132:41
7568B	  %121:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24755); fft3d.c:132:41
7600B	  %121:fr64 = SUBSDrm %121:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.real24856); fft3d.c:132:41
7616B	  %125:fr64 = MOVSDrm_alt %stack.11.u1, 1, $noreg, 8, $noreg :: (dereferenceable load 8 from %ir.imag244)
7648B	  %125:fr64 = MULSDrr %125:fr64(tied-def 0), %121:fr64, debug-location !800; fft3d.c:132:41
7680B	  %125:fr64 = ADDSDrr %125:fr64(tied-def 0), %119:fr64, debug-location !800; fft3d.c:132:41
7696B	  MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 0, $noreg, %121:fr64, debug-location !800 :: (store 8 into %ir.real24654); fft3d.c:132:41
7712B	  %124:fr64 = MOVSDrm_alt %stack.12.x11, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag251); fft3d.c:132:41
7744B	  %124:fr64 = SUBSDrm %124:fr64(tied-def 0), %stack.13.x21, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.imag252); fft3d.c:132:41
7760B	  MOVSDmr %stack.37..compoundliteral245, 1, $noreg, 8, $noreg, %124:fr64, debug-location !800 :: (store 8 into %ir.imag250); fft3d.c:132:41
7776B	  MOVSDmr %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, %125:fr64, debug-location !800 :: (store 8 into %ir.imag231); fft3d.c:132:41
7792B	  %126:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 0, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203); fft3d.c:132:41
7808B	  MOV64mr %101:gr64, 1, %97:gr64_nosp, 0, $noreg, %126:gr64, debug-location !800 :: (store 8 into %ir.202); fft3d.c:132:41
7824B	  %127:gr64 = MOV64rm %stack.33..compoundliteral204, 1, $noreg, 8, $noreg, debug-location !800 :: (dereferenceable load 8 from %ir.203 + 8); fft3d.c:132:41
7840B	  MOV64mr %101:gr64, 1, %97:gr64_nosp, 8, $noreg, %127:gr64, debug-location !800 :: (store 8 into %ir.202 + 8); fft3d.c:132:41
7856B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !801 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); fft3d.c:128:44
7872B	  JMP_1 %bb.31, debug-location !802; fft3d.c:128:21

7888B	bb.33.for.end259:
	; predecessors: %bb.31
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

7904B	  INC32m %stack.14.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !805 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); fft3d.c:127:43
7920B	  JMP_1 %bb.29, debug-location !806; fft3d.c:127:17

7936B	bb.34.for.end262:
	; predecessors: %bb.29
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

7952B	  INC32m %stack.8.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !809 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); fft3d.c:115:39
7968B	  JMP_1 %bb.24, debug-location !810; fft3d.c:115:13

7984B	bb.35.if.end266:
	; predecessors: %bb.24, %bb.18
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

8000B	  ADD32mi8 %stack.10.l, 1, $noreg, 0, $noreg, 2, implicit-def dead $eflags, debug-location !813 :: (store 4 into %ir.l), (dereferenceable load 4 from %ir.l); fft3d.c:74:27
8016B	  JMP_1 %bb.3, debug-location !814; fft3d.c:74:5

8032B	bb.36.for.end269:
	; predecessors: %bb.3
	  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

8048B	  CMP32mi8 $rip, 1, $noreg, @timers_enabled, $noreg, 0, implicit-def $eflags, debug-location !817 :: (dereferenceable load 4 from @timers_enabled); fft3d.c:138:9
8064B	  JCC_1 %bb.38, 4, implicit $eflags, debug-location !819; fft3d.c:138:9
8080B	  JMP_1 %bb.37, debug-location !819; fft3d.c:138:9

8096B	bb.37.if.then271:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

8112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !820; fft3d.c:139:9
8144B	  $edi = MOV32ri 4, debug-location !820; fft3d.c:139:9
8160B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !820; fft3d.c:139:9
8176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !820; fft3d.c:139:9

8192B	bb.38.if.end272:
	; predecessors: %bb.36, %bb.37

8208B	  RET 0, debug-location !821; fft3d.c:140:1

# End machine code for function Swarztrauber.

