Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=32, align=16, at location [SP+8]
  fi#7: size=32, align=16, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=8, align=8, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=80, align=16, at location [SP+8]
  fi#23: size=8, align=8, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
  fi#25: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#1: 5.800000e+01, align=8
  cp#2: 0x3EB0C6F7A0B5ED8D, align=8
  cp#3: 1.000000e+02, align=8

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.3, 15, implicit killed $eflags
  JMP_1 %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %416:gr32 = MOV32rm %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %416:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32r0 implicit-def dead $eflags
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = COPY killed $rax
  MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.fp)
  TEST64rr %5:gr64, %5:gr64, implicit-def $eflags
  JCC_1 %bb.5, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 0, $noreg, @.str.2 :: (store 8 into %ir.arrayidx1, align 16)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 8, $noreg, @.str.3 :: (store 8 into %ir.arrayidx2)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 16, $noreg, @.str.4 :: (store 8 into %ir.arrayidx3, align 16)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 24, $noreg, @.str.5 :: (store 8 into %ir.arrayidx4)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 32, $noreg, @.str.6 :: (store 8 into %ir.arrayidx5, align 16)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx6, align 16)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx7)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx8, align 16)
  MOV64mi32 %stack.22.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx9)
  %6:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %6:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.6

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x50000000), %bb.17(0x30000000); %bb.7(62.50%), %bb.17(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.11
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.12
  $rsi = MOV32ri64 @.str.1
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr64 = COPY killed $rax
  MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %14:gr64 :: (store 8 into %ir.fp)
  TEST64rr %14:gr64, %14:gr64, implicit-def $eflags
  JCC_1 %bb.17, 4, implicit killed $eflags
  JMP_1 %bb.7

bb.7.if.then14:
; predecessors: %bb.6
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %28:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %28:gr64
  $rsi = MOV32ri64 @.str.14
  $rdx = MOV32ri64 @lt
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = COPY killed $eax
  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.result)

bb.8.while.cond:
; predecessors: %bb.7, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %32:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %33:gr32 = COPY killed $eax
  CMP32ri8 %33:gr32, 10, implicit-def $eflags
  JCC_1 %bb.8, 5, implicit killed $eflags
  JMP_1 %bb.9

bb.9.while.end:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %35:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  %36:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %37:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nx, $noreg
  %38:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @ny, $noreg
  %39:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nz, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %35:gr64
  $rsi = MOV32ri64 @.str.15
  $rdx = COPY %37:gr64
  $rcx = COPY %38:gr64
  $r8 = COPY %39:gr64
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %43:gr32 = COPY killed $eax
  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %43:gr32 :: (store 4 into %ir.result)

bb.10.while.cond25:
; predecessors: %bb.9, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

  %44:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %44:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr32 = COPY killed $eax
  CMP32ri8 %45:gr32, 10, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit killed $eflags
  JMP_1 %bb.11

bb.11.while.end29:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %47:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %51:gr64 = LEA64r %stack.16.nit, 1, $noreg, 0, $noreg
  $rdi = COPY %47:gr64
  $rsi = MOV32ri64 @.str.16
  $rdx = COPY %51:gr64
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %52:gr32 = COPY killed $eax
  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %52:gr32 :: (store 4 into %ir.result)

bb.12.while.cond31:
; predecessors: %bb.11, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %53:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %53:gr64
  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %54:gr32 = COPY killed $eax
  CMP32ri8 %54:gr32, 10, implicit-def $eflags
  JCC_1 %bb.12, 5, implicit killed $eflags
  JMP_1 %bb.13

bb.13.while.end35:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

bb.14.for.cond36:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 7, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.16, 15, implicit killed $eflags
  JMP_1 %bb.15

bb.15.for.body38:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %409:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  %410:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %411:gr64 = LEA64r $noreg, 4, %410:gr64_nosp, @debug_vec, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %409:gr64
  $rsi = MOV32ri64 @.str.16
  $rdx = COPY %411:gr64
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %415:gr32 = COPY killed $eax
  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %415:gr32 :: (store 4 into %ir.result)
  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.14

bb.16.for.end44:
; predecessors: %bb.14
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %58:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %58:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.20

bb.17.if.else46:
; predecessors: %bb.6
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.17
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi $rip, 1, $noreg, @lt, $noreg, 8 :: (store 4 into @lt)
  MOV32mi %stack.16.nit, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.nit)
  MOV32mi $rip, 1, $noreg, @nx + 32, $noreg, 256 :: (store 4 into %ir.arrayidx49, align 16)
  MOV32mi $rip, 1, $noreg, @ny + 32, $noreg, 256 :: (store 4 into %ir.arrayidx51, align 16)
  MOV32mi $rip, 1, $noreg, @nz + 32, $noreg, 256 :: (store 4 into %ir.arrayidx53, align 16)
  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

bb.18.for.cond54:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 7, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.20, 15, implicit killed $eflags
  JMP_1 %bb.19

bb.19.for.body56:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %465:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOV32mi $noreg, 4, %465:gr64_nosp, @debug_vec, $noreg, 0 :: (store 4 into %ir.arrayidx58)
  %23:gr32 = LEA64_32r %465:gr64_nosp, 1, $noreg, 1, $noreg
  MOV32mr %stack.21.i, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.i)
  JMP_1 %bb.18

bb.20.if.end62:
; predecessors: %bb.18, %bb.16
  successors: %bb.22(0x40000000), %bb.21(0x40000000); %bb.22(50.00%), %bb.21(50.00%)

  %60:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %61:gr32 = MOV32rm $noreg, 4, %60:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx64)
  CMP32rm %61:gr32, $noreg, 4, %60:gr64_nosp, @ny, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx66)
  JCC_1 %bb.22, 5, implicit killed $eflags
  JMP_1 %bb.21

bb.21.lor.lhs.false:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.23(0x40000000); %bb.22(50.00%), %bb.23(50.00%)

  %63:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %64:gr32 = MOV32rm $noreg, 4, %63:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx69)
  CMP32rm %64:gr32, $noreg, 4, %63:gr64_nosp, @nz, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx71)
  JCC_1 %bb.23, 4, implicit killed $eflags
  JMP_1 %bb.22

bb.22.if.then73:
; predecessors: %bb.20, %bb.21
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 85 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.23.if.else74:
; predecessors: %bb.21
  successors: %bb.24(0x40000000), %bb.26(0x40000000); %bb.24(50.00%), %bb.26(50.00%)

  %66:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi8 $noreg, 4, %66:gr64_nosp, @nx, $noreg, 32, implicit-def $eflags :: (load 4 from %ir.arrayidx76)
  JCC_1 %bb.26, 5, implicit killed $eflags
  JMP_1 %bb.24

bb.24.land.lhs.true:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.26, 5, implicit killed $eflags
  JMP_1 %bb.25

bb.25.if.then79:
; predecessors: %bb.24
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 83 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.26.if.else80:
; predecessors: %bb.23, %bb.24
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

  %71:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi $noreg, 4, %71:gr64_nosp, @nx, $noreg, 128, implicit-def $eflags :: (load 4 from %ir.arrayidx82)
  JCC_1 %bb.29, 5, implicit killed $eflags
  JMP_1 %bb.27

bb.27.land.lhs.true84:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.29, 5, implicit killed $eflags
  JMP_1 %bb.28

bb.28.if.then86:
; predecessors: %bb.27
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 87 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.29.if.else87:
; predecessors: %bb.26, %bb.27
  successors: %bb.30(0x40000000), %bb.32(0x40000000); %bb.30(50.00%), %bb.32(50.00%)

  %76:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi $noreg, 4, %76:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx89)
  JCC_1 %bb.32, 5, implicit killed $eflags
  JMP_1 %bb.30

bb.30.land.lhs.true91:
; predecessors: %bb.29
  successors: %bb.31(0x40000000), %bb.32(0x40000000); %bb.31(50.00%), %bb.32(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.32, 5, implicit killed $eflags
  JMP_1 %bb.31

bb.31.if.then93:
; predecessors: %bb.30
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 65 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.32.if.else94:
; predecessors: %bb.29, %bb.30
  successors: %bb.33(0x40000000), %bb.35(0x40000000); %bb.33(50.00%), %bb.35(50.00%)

  %81:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi $noreg, 4, %81:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx96)
  JCC_1 %bb.35, 5, implicit killed $eflags
  JMP_1 %bb.33

bb.33.land.lhs.true98:
; predecessors: %bb.32
  successors: %bb.34(0x40000000), %bb.35(0x40000000); %bb.34(50.00%), %bb.35(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 20, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.35, 5, implicit killed $eflags
  JMP_1 %bb.34

bb.34.if.then100:
; predecessors: %bb.33
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 66 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.35.if.else101:
; predecessors: %bb.32, %bb.33
  successors: %bb.36(0x40000000), %bb.38(0x40000000); %bb.36(50.00%), %bb.38(50.00%)

  %86:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi $noreg, 4, %86:gr64_nosp, @nx, $noreg, 512, implicit-def $eflags :: (load 4 from %ir.arrayidx103)
  JCC_1 %bb.38, 5, implicit killed $eflags
  JMP_1 %bb.36

bb.36.land.lhs.true105:
; predecessors: %bb.35
  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 20, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.38, 5, implicit killed $eflags
  JMP_1 %bb.37

bb.37.if.then107:
; predecessors: %bb.36
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 67 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.38.if.else108:
; predecessors: %bb.35, %bb.36
  successors: %bb.39(0x40000000), %bb.41(0x40000000); %bb.39(50.00%), %bb.41(50.00%)

  %91:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi $noreg, 4, %91:gr64_nosp, @nx, $noreg, 1024, implicit-def $eflags :: (load 4 from %ir.arrayidx110)
  JCC_1 %bb.41, 5, implicit killed $eflags
  JMP_1 %bb.39

bb.39.land.lhs.true112:
; predecessors: %bb.38
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.41, 5, implicit killed $eflags
  JMP_1 %bb.40

bb.40.if.then114:
; predecessors: %bb.39
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 68 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.41.if.else115:
; predecessors: %bb.38, %bb.39
  successors: %bb.42(0x40000000), %bb.44(0x40000000); %bb.42(50.00%), %bb.44(50.00%)

  %96:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  CMP32mi $noreg, 4, %96:gr64_nosp, @nx, $noreg, 2048, implicit-def $eflags :: (load 4 from %ir.arrayidx117)
  JCC_1 %bb.44, 5, implicit killed $eflags
  JMP_1 %bb.42

bb.42.land.lhs.true119:
; predecessors: %bb.41
  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.44, 5, implicit killed $eflags
  JMP_1 %bb.43

bb.43.if.then121:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 69 :: (store 1 into @Class)
  JMP_1 %bb.45

bb.44.if.else122:
; predecessors: %bb.41, %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  MOV8mi $rip, 1, $noreg, @Class, $noreg, 85 :: (store 1 into @Class)

bb.45.if.end130:
; predecessors: %bb.44, %bb.43, %bb.40, %bb.37, %bb.34, %bb.31, %bb.28, %bb.25, %bb.22
  successors: %bb.48(0x40000000), %bb.46(0x40000000); %bb.48(50.00%), %bb.46(50.00%)

  %101:gr64 = MOV64ri -4610184818551597739
  MOV64mr %stack.6.a, 1, $noreg, 0, $noreg, %101:gr64 :: (store 8 into %ir.arrayidx1312, align 16)
  MOV64mi32 %stack.6.a, 1, $noreg, 8, $noreg, 0 :: (store 8 into %ir.arrayidx132)
  %102:gr64 = MOV64ri 4595172819793696085
  MOV64mr %stack.6.a, 1, $noreg, 16, $noreg, %102:gr64 :: (store 8 into %ir.arrayidx133, align 16)
  %103:gr64 = MOV64ri 4590669220166325589
  MOV64mr %stack.6.a, 1, $noreg, 24, $noreg, %103:gr64 :: (store 8 into %ir.arrayidx134)
  CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.48, 4, implicit killed $eflags
  JMP_1 %bb.46

bb.46.lor.lhs.false137:
; predecessors: %bb.45
  successors: %bb.48(0x40000000), %bb.47(0x40000000); %bb.48(50.00%), %bb.47(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 83, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.48, 4, implicit killed $eflags
  JMP_1 %bb.47

bb.47.lor.lhs.false141:
; predecessors: %bb.46
  successors: %bb.48(0x40000000), %bb.49(0x40000000); %bb.48(50.00%), %bb.49(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 87, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.49, 5, implicit killed $eflags
  JMP_1 %bb.48

bb.48.if.then145:
; predecessors: %bb.45, %bb.46, %bb.47
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  %113:gr64 = MOV64ri -4622945017495814144
  MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %113:gr64 :: (store 8 into %ir.arrayidx1463, align 16)
  %114:gr64 = MOV64ri 4584664420663164928
  MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %114:gr64 :: (store 8 into %ir.arrayidx147)
  %115:gr64 = MOV64ri -4643211215818981376
  MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %115:gr64 :: (store 8 into %ir.arrayidx148, align 16)
  MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx149)
  JMP_1 %bb.50

bb.49.if.else150:
; predecessors: %bb.47
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  %110:gr64 = MOV64ri -4627845993560893801
  MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %110:gr64 :: (store 8 into %ir.arrayidx1514, align 16)
  %111:gr64 = MOV64ri 4584391475231203080
  MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %111:gr64 :: (store 8 into %ir.arrayidx152)
  %112:gr64 = MOV64ri -4642989727312717253
  MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %112:gr64 :: (store 8 into %ir.arrayidx153, align 16)
  MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx154)

bb.50.if.end155:
; predecessors: %bb.49, %bb.48
  successors: %bb.51(0x80000000); %bb.51(100.00%)

  MOV32mi $rip, 1, $noreg, @lb, $noreg, 1 :: (store 4 into @lb)
  %116:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  MOV32mr %stack.1.k, 1, $noreg, 0, $noreg, %116:gr32 :: (store 4 into %ir.k)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %117:gr64 = LEA64r %stack.13.n1, 1, $noreg, 0, $noreg
  %118:gr64 = LEA64r %stack.14.n2, 1, $noreg, 0, $noreg
  %119:gr64 = LEA64r %stack.15.n3, 1, $noreg, 0, $noreg
  $rdi = COPY %117:gr64
  $rsi = COPY %118:gr64
  $rdx = COPY %119:gr64
  CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %120:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %121:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %122:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @u
  $esi = COPY %120:gr32
  $edx = COPY %121:gr32
  $ecx = COPY %122:gr32
  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %125:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %126:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  %127:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %128:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx157)
  %129:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx159)
  undef %420.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @v
  $esi = COPY %124:gr32
  $edx = COPY %125:gr32
  $ecx = COPY %126:gr32
  $r8d = COPY %128:gr32
  $r9d = COPY %129:gr32
  PUSH64r %420:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @zran3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %133:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %134:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %135:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  %136:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  undef %426.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx161)
  undef %424.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx163)
  undef %422.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx165)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %141:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
  %142:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @v
  $esi = COPY %133:gr32
  $edx = COPY %134:gr32
  $ecx = COPY %135:gr32
  $r8 = COPY %141:gr64
  $r9 = COPY %142:gr64
  PUSH64r %422:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %424:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %426:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %143:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %144:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx167)
  %145:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx169)
  %146:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx171)
  %147:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.18
  $esi = COPY %144:gr32
  $edx = COPY %145:gr32
  $ecx = COPY %146:gr32
  $r8d = COPY %147:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %152:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.19
  $esi = COPY %152:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.20
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %157:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %158:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %159:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  undef %428.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %162:gr64 = LEA64r %stack.6.a, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @u
  $rsi = MOV32ri64 @v
  $rdx = MOV32ri64 @r
  $ecx = COPY %157:gr32
  $r8d = COPY %158:gr32
  $r9d = COPY %159:gr32
  PUSH64r %428:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %164:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %165:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %166:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  %167:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  undef %434.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx177)
  undef %432.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx179)
  undef %430.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx181)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @r
  $esi = COPY %164:gr32
  $edx = COPY %165:gr32
  $ecx = COPY %166:gr32
  $r8 = COPY %141:gr64
  $r9 = COPY %142:gr64
  PUSH64r %430:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %432:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %434:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %172:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %172:fr64 :: (store 8 into %ir.old2)
  %173:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.oldu)
  %174:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  undef %438.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  undef %436.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %178:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @u
  $rsi = MOV32ri64 @v
  $rdx = MOV32ri64 @r
  $rcx = COPY %162:gr64
  $r8 = COPY %178:gr64
  $r9d = COPY %174:gr32
  PUSH64r %436:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %438:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @mg3P, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %179:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %180:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %181:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  undef %440.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @u
  $rsi = MOV32ri64 @v
  $rdx = MOV32ri64 @r
  $ecx = COPY %179:gr32
  $r8d = COPY %180:gr32
  $r9d = COPY %181:gr32
  PUSH64r %440:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %117:gr64
  $rsi = COPY %118:gr64
  $rdx = COPY %119:gr64
  CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %184:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %185:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %186:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @u
  $esi = COPY %184:gr32
  $edx = COPY %185:gr32
  $ecx = COPY %186:gr32
  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %187:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %188:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %189:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  %190:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %191:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx186)
  %192:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx188)
  undef %442.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @v
  $esi = COPY %187:gr32
  $edx = COPY %188:gr32
  $ecx = COPY %189:gr32
  $r8d = COPY %191:gr32
  $r9d = COPY %192:gr32
  PUSH64r %442:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @zran3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32r0 implicit-def dead $eflags
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32r0 implicit-def dead $eflags
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %195:fr64 = COPY killed $xmm0
  MOVSDmr %stack.4.tinit, 1, $noreg, 0, $noreg, %195:fr64 :: (store 8 into %ir.tinit)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.21
  $xmm0 = COPY %195:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)

bb.51.for.cond191:
; predecessors: %bb.50, %bb.52
  successors: %bb.52(0x7c000000), %bb.53(0x04000000); %bb.52(96.88%), %bb.53(3.12%)

  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.53, 15, implicit killed $eflags
  JMP_1 %bb.52

bb.52.for.body194:
; predecessors: %bb.51
  successors: %bb.51(0x80000000); %bb.51(100.00%)

  %408:gr32 = MOV32rm %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %408:gr32
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.51

bb.53.for.end197:
; predecessors: %bb.51
  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.55, 4, implicit killed $eflags
  JMP_1 %bb.54

bb.54.if.then198:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.55.if.end199:
; predecessors: %bb.53, %bb.54
  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

  %203:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %204:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %205:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  undef %444.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @u
  $rsi = MOV32ri64 @v
  $rdx = MOV32ri64 @r
  $ecx = COPY %203:gr32
  $r8d = COPY %204:gr32
  $r9d = COPY %205:gr32
  PUSH64r %444:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.57, 4, implicit killed $eflags
  JMP_1 %bb.56

bb.56.if.then202:
; predecessors: %bb.55
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.57.if.end203:
; predecessors: %bb.55, %bb.56
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  %213:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %214:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %215:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  %216:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  undef %450.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx205)
  undef %448.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx207)
  undef %446.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx209)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %222:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
  %223:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @r
  $esi = COPY %213:gr32
  $edx = COPY %214:gr32
  $ecx = COPY %215:gr32
  $r8 = COPY %222:gr64
  $r9 = COPY %223:gr64
  PUSH64r %446:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %448:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %450:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %224:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %224:fr64 :: (store 8 into %ir.old2)
  %225:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %225:fr64 :: (store 8 into %ir.oldu)
  MOV32mi %stack.2.it, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.it)
  %395:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg

bb.58.for.cond210:
; predecessors: %bb.57, %bb.71
  successors: %bb.59(0x7c000000), %bb.72(0x04000000); %bb.59(96.88%), %bb.72(3.12%)

  %226:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  CMP32rm %226:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.72, 15, implicit killed $eflags
  JMP_1 %bb.59

bb.59.for.body213:
; predecessors: %bb.58
  successors: %bb.62(0x40000000), %bb.60(0x40000000); %bb.62(50.00%), %bb.60(50.00%)

  CMP32mi8 %stack.2.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.it)
  JCC_1 %bb.62, 4, implicit killed $eflags
  JMP_1 %bb.60

bb.60.lor.lhs.false216:
; predecessors: %bb.59
  successors: %bb.62(0x40000000), %bb.61(0x40000000); %bb.62(50.00%), %bb.61(50.00%)

  %367:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  CMP32rm %367:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  JCC_1 %bb.62, 4, implicit killed $eflags
  JMP_1 %bb.61

bb.61.lor.lhs.false219:
; predecessors: %bb.60
  successors: %bb.62(0x30000000), %bb.63(0x50000000); %bb.62(37.50%), %bb.63(62.50%)

  %369:gr64_with_sub_8bit = MOVSX64rm32 %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  %377:gr64_nosp = IMUL64rri32 %369:gr64_with_sub_8bit, 1717986919, implicit-def dead $eflags
  %372:gr64_with_sub_8bit = COPY %377:gr64_nosp
  %372:gr64_with_sub_8bit = SHR64ri %372:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
  %377:gr64_nosp = SAR64ri %377:gr64_nosp(tied-def 0), 33, implicit-def dead $eflags
  %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
  %379:gr32 = LEA64_32r %377:gr64_nosp, 4, %377:gr64_nosp, 0, $noreg
  CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags
  JCC_1 %bb.63, 5, implicit killed $eflags
  JMP_1 %bb.62

bb.62.if.then222:
; predecessors: %bb.59, %bb.60, %bb.61
  successors: %bb.63(0x80000000); %bb.63(100.00%)

  %381:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.22
  $esi = COPY %381:gr32
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.63.if.end224:
; predecessors: %bb.61, %bb.62
  successors: %bb.64(0x50000000), %bb.65(0x30000000); %bb.64(62.50%), %bb.65(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.65, 4, implicit killed $eflags
  JMP_1 %bb.64

bb.64.if.then226:
; predecessors: %bb.63
  successors: %bb.65(0x80000000); %bb.65(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 2
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.65.if.end227:
; predecessors: %bb.63, %bb.64
  successors: %bb.66(0x50000000), %bb.67(0x30000000); %bb.66(62.50%), %bb.67(37.50%)

  %387:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  undef %454.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  undef %452.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @u
  $rsi = MOV32ri64 @v
  $rdx = MOV32ri64 @r
  $rcx = COPY %162:gr64
  $r8 = COPY %395:gr64
  $r9d = COPY %387:gr32
  PUSH64r %452:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %454:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @mg3P, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.67, 4, implicit killed $eflags
  JMP_1 %bb.66

bb.66.if.then231:
; predecessors: %bb.65
  successors: %bb.67(0x80000000); %bb.67(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 2
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.67.if.end232:
; predecessors: %bb.65, %bb.66
  successors: %bb.68(0x50000000), %bb.69(0x30000000); %bb.68(62.50%), %bb.69(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.69, 4, implicit killed $eflags
  JMP_1 %bb.68

bb.68.if.then234:
; predecessors: %bb.67
  successors: %bb.69(0x80000000); %bb.69(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.69.if.end235:
; predecessors: %bb.67, %bb.68
  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

  %398:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %399:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %400:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  undef %456.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @u
  $rsi = MOV32ri64 @v
  $rdx = MOV32ri64 @r
  $ecx = COPY %398:gr32
  $r8d = COPY %399:gr32
  $r9d = COPY %400:gr32
  PUSH64r %456:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.71, 4, implicit killed $eflags
  JMP_1 %bb.70

bb.70.if.then238:
; predecessors: %bb.69
  successors: %bb.71(0x80000000); %bb.71(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.71.if.end239:
; predecessors: %bb.69, %bb.70
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  INC32m %stack.2.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it)
  JMP_1 %bb.58

bb.72.for.end242:
; predecessors: %bb.58
  successors: %bb.73(0x40000000), %bb.90(0x40000000); %bb.73(50.00%), %bb.90(50.00%)

  %228:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  %229:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  %230:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  %231:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  undef %462.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx244)
  undef %460.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx246)
  undef %458.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx248)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %237:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
  %238:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @r
  $esi = COPY %228:gr32
  $edx = COPY %229:gr32
  $ecx = COPY %230:gr32
  $r8 = COPY %237:gr64
  $r9 = COPY %238:gr64
  PUSH64r %458:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %460:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %462:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %240:fr64 = COPY killed $xmm0
  MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %240:fr64 :: (store 8 into %ir.t)
  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
  MOV64mi32 %stack.18.verify_value, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.verify_value)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.23
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %245:gr64 = MOV64ri 4487126258331716666
  MOV64mr %stack.12.epsilon, 1, $noreg, 0, $noreg, %245:gr64 :: (store 8 into %ir.epsilon)
  CMP8mi $rip, 1, $noreg, @Class, $noreg, 85, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.90, 4, implicit killed $eflags
  JMP_1 %bb.73

bb.73.if.then254:
; predecessors: %bb.72
  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 83, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.75, 5, implicit killed $eflags
  JMP_1 %bb.74

bb.74.if.then258:
; predecessors: %bb.73
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %278:gr64 = MOV64ri 4542957617782330299
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %278:gr64 :: (store 8 into %ir.verify_value)
  JMP_1 %bb.87

bb.75.if.else259:
; predecessors: %bb.73
  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 87, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.77, 5, implicit killed $eflags
  JMP_1 %bb.76

bb.76.if.then263:
; predecessors: %bb.75
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %277:gr64 = MOV64ri 4529249300748922777
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %277:gr64 :: (store 8 into %ir.verify_value)
  JMP_1 %bb.87

bb.77.if.else264:
; predecessors: %bb.75
  successors: %bb.78(0x40000000), %bb.79(0x40000000); %bb.78(50.00%), %bb.79(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.79, 5, implicit killed $eflags
  JMP_1 %bb.78

bb.78.if.then268:
; predecessors: %bb.77
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %276:gr64 = MOV64ri 4522856047640670078
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %276:gr64 :: (store 8 into %ir.verify_value)
  JMP_1 %bb.87

bb.79.if.else269:
; predecessors: %bb.77
  successors: %bb.80(0x40000000), %bb.81(0x40000000); %bb.80(50.00%), %bb.81(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 66, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.81, 5, implicit killed $eflags
  JMP_1 %bb.80

bb.80.if.then273:
; predecessors: %bb.79
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %275:gr64 = MOV64ri 4521109751604444092
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %275:gr64 :: (store 8 into %ir.verify_value)
  JMP_1 %bb.87

bb.81.if.else274:
; predecessors: %bb.79
  successors: %bb.82(0x40000000), %bb.83(0x40000000); %bb.82(50.00%), %bb.83(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 67, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.83, 5, implicit killed $eflags
  JMP_1 %bb.82

bb.82.if.then278:
; predecessors: %bb.81
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %274:gr64 = MOV64ri 4513493083252444227
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %274:gr64 :: (store 8 into %ir.verify_value)
  JMP_1 %bb.87

bb.83.if.else279:
; predecessors: %bb.81
  successors: %bb.84(0x40000000), %bb.85(0x40000000); %bb.84(50.00%), %bb.85(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 68, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.85, 5, implicit killed $eflags
  JMP_1 %bb.84

bb.84.if.then283:
; predecessors: %bb.83
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %273:gr64 = MOV64ri 4460185030189797595
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %273:gr64 :: (store 8 into %ir.verify_value)
  JMP_1 %bb.87

bb.85.if.else284:
; predecessors: %bb.83
  successors: %bb.86(0x40000000), %bb.87(0x40000000); %bb.86(50.00%), %bb.87(50.00%)

  CMP8mi $rip, 1, $noreg, @Class, $noreg, 69, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  JCC_1 %bb.87, 5, implicit killed $eflags
  JMP_1 %bb.86

bb.86.if.then288:
; predecessors: %bb.85
  successors: %bb.87(0x80000000); %bb.87(100.00%)

  %272:gr64 = MOV64ri 4455868063219174314
  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %272:gr64 :: (store 8 into %ir.verify_value)

bb.87.if.end295:
; predecessors: %bb.85, %bb.86, %bb.84, %bb.82, %bb.80, %bb.78, %bb.76, %bb.74
  successors: %bb.88(0x40000000), %bb.89(0x40000000); %bb.88(50.00%), %bb.89(50.00%)

  %283:vr128 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  %280:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
  %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
  %283:vr128 = PANDrm %283:vr128(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
  %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
  MOVSDmr %stack.19.err, 1, $noreg, 0, $noreg, %283:vr128 :: (store 8 into %ir.err)
  %286:fr64 = MOVSDrm_alt %stack.12.epsilon, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.epsilon)
  UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags
  JCC_1 %bb.89, 2, implicit killed $eflags
  JMP_1 %bb.88

bb.88.if.then298:
; predecessors: %bb.87
  successors: %bb.91(0x80000000); %bb.91(100.00%)

  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.verified)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.24
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %302:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.25
  $xmm0 = COPY %302:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %306:fr64 = MOVSDrm_alt %stack.19.err, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.err)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.26
  $xmm0 = COPY %306:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.91

bb.89.if.else302:
; predecessors: %bb.87
  successors: %bb.91(0x80000000); %bb.91(100.00%)

  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.27
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %291:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.28
  $xmm0 = COPY %291:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %295:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.29
  $xmm0 = COPY %295:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.91

bb.90.if.else307:
; predecessors: %bb.72
  successors: %bb.91(0x80000000); %bb.91(100.00%)

  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.30
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.31
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %254:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.25
  $xmm0 = COPY %254:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.91.if.end311:
; predecessors: %bb.90, %bb.89, %bb.88
  successors: %bb.92(0x50000000), %bb.93(0x30000000); %bb.92(62.50%), %bb.93(37.50%)

  %309:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %310:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx313)
  %312:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx316)
  %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
  %314:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx320)
  %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
  MOVSDmr %stack.17.nn, 1, $noreg, 0, $noreg, %314:fr64 :: (store 8 into %ir.nn)
  %315:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  %316:fr64 = FsFLD0SD
  UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags
  JCC_1 %bb.92, 5, implicit $eflags
  JCC_1 %bb.92, 10, implicit killed $eflags
  JMP_1 %bb.93

bb.92.if.then325:
; predecessors: %bb.91
  successors: %bb.94(0x80000000); %bb.94(100.00%)

  %319:fr64 = CVTSI2SDrm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
  %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %319:fr64 = MULSDrm %319:fr64(tied-def 0), %stack.17.nn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nn)
  %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %319:fr64 = DIVSDrm %319:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %319:fr64 :: (store 8 into %ir.mflops)
  JMP_1 %bb.94

bb.93.if.else331:
; predecessors: %bb.91
  successors: %bb.94(0x80000000); %bb.94(100.00%)

  MOV64mi32 %stack.5.mflops, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.mflops)

bb.94.if.end332:
; predecessors: %bb.93, %bb.92
  successors: %bb.95(0x50000000), %bb.102(0x30000000); %bb.95(62.50%), %bb.102(37.50%)

  %322:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
  %323:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %324:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx334)
  %325:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx336)
  %326:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx338)
  %327:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
  %328:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  %329:fr64 = MOVSDrm_alt %stack.5.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
  undef %464.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.20.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.32
  $esi = COPY %322:gr32
  $edx = COPY %324:gr32
  $ecx = COPY %325:gr32
  $r8d = COPY %326:gr32
  $r9d = COPY %327:gr32
  $xmm0 = COPY %328:fr64
  $xmm1 = COPY %329:fr64
  PUSH64i32 @.str.42, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.41, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.40, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.39, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.38, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.37, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.36, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.35, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.34, implicit-def $rsp, implicit $rsp
  PUSH64r %464:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.33, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.102, 4, implicit killed $eflags
  JMP_1 %bb.95

bb.95.if.then340:
; predecessors: %bb.94
  successors: %bb.96(0x50000000), %bb.97(0x30000000); %bb.96(62.50%), %bb.97(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %334:fr64 = COPY killed $xmm0
  MOVSDmr %stack.23.tmax, 1, $noreg, 0, $noreg, %334:fr64 :: (store 8 into %ir.tmax)
  %335:fr64 = FsFLD0SD
  UCOMISDrr %334:fr64, %335:fr64, implicit-def $eflags
  JCC_1 %bb.97, 5, implicit $eflags
  JCC_1 %bb.97, 10, implicit killed $eflags
  JMP_1 %bb.96

bb.96.if.then344:
; predecessors: %bb.95
  successors: %bb.97(0x80000000); %bb.97(100.00%)

  %336:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.23.tmax, 1, $noreg, 0, $noreg, %336:gr64 :: (store 8 into %ir.tmax)

bb.97.if.end345:
; predecessors: %bb.95, %bb.96
  successors: %bb.98(0x80000000); %bb.98(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.43
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
  %417:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)

bb.98.for.cond347:
; predecessors: %bb.97, %bb.100, %bb.101
  successors: %bb.99(0x7c000000), %bb.102(0x04000000); %bb.99(96.88%), %bb.102(3.12%)

  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.102, 15, implicit killed $eflags
  JMP_1 %bb.99

bb.99.for.body350:
; predecessors: %bb.98
  successors: %bb.100(0x40000000), %bb.101(0x40000000); %bb.100(50.00%), %bb.101(50.00%)

  %344:gr32 = MOV32rm %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %344:gr32
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %345:fr64 = COPY killed $xmm0
  MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %345:fr64 :: (store 8 into %ir.t)
  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.101, 5, implicit killed $eflags
  JMP_1 %bb.100

bb.100.if.then354:
; predecessors: %bb.99
  successors: %bb.98(0x80000000); %bb.98(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %358:fr64 = COPY killed $xmm0
  %358:fr64 = SUBSDrm %358:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %358:fr64 :: (store 8 into %ir.t)
  %360:fr64 = COPY %358:fr64
  %360:fr64 = MULSDrr %360:fr64(tied-def 0), %417:fr64
  %360:fr64 = DIVSDrm %360:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.44
  $rsi = MOV32ri64 @.str.45
  $xmm0 = COPY %358:fr64
  $xmm1 = COPY %360:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.98

bb.101.if.else360:
; predecessors: %bb.99
  successors: %bb.98(0x80000000); %bb.98(100.00%)

  %348:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %349:gr64 = MOV64rm %stack.22.t_names, 8, %348:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx362)
  %350:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  %352:fr64 = COPY %350:fr64
  %352:fr64 = MULSDrr %352:fr64(tied-def 0), %417:fr64
  %352:fr64 = DIVSDrm %352:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.46
  $rsi = COPY %349:gr64
  $xmm0 = COPY %350:fr64
  $xmm1 = COPY %352:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.98

bb.102.if.end370:
; predecessors: %bb.94, %bb.98

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(1):   MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.3 for.end
  From: %5:gr64 = COPY killed $rax
    To: JCC_1 %bb.5, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %5:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(2):   TEST64rr %5:gr64, %5:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %5:gr64, %5:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %5:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %5:gr64, %5:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.3 for.end
  From: $rdi = MOV32ri64 @.str
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = MOV32ri64 @.str
SU(1):   $rsi = MOV32ri64 @.str.1

********** MI Scheduling **********
main:%bb.4 if.then
  From: MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %6 
Live Thru: 
  LiveReg: %6
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV64mi32 %stack.22.t_names, 1, $noreg, 0, $noreg, @.str.2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 0
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV64mi32 %stack.22.t_names, 1, $noreg, 8, $noreg, @.str.3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV64mi32 %stack.22.t_names, 1, $noreg, 16, $noreg, @.str.4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOV64mi32 %stack.22.t_names, 1, $noreg, 24, $noreg, @.str.5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.22.t_names, 1, $noreg, 32, $noreg, @.str.6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.22.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx6, align 16)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV64mi32 %stack.22.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx7)
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV64mi32 %stack.22.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx8, align 16)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV64mi32 %stack.22.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx9)
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %6:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %6:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mi32 %stack.22.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx9)
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 8 
  Cand SU(0) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV64mi32 %stack.22.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx8, align 16)
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mi32 %stack.22.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx7)
Bottom Pressure:

  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mi32 %stack.22.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx6, align 16)
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mi32 %stack.22.t_names, 1, $noreg, 32, $noreg, @.str.6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mi32 %stack.22.t_names, 1, $noreg, 24, $noreg, @.str.5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mi32 %stack.22.t_names, 1, $noreg, 16, $noreg, @.str.4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mi32 %stack.22.t_names, 1, $noreg, 8, $noreg, @.str.3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mi32 %stack.22.t_names, 1, $noreg, 0, $noreg, @.str.2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
SU(1):   MOV64mi32 %stack.22.t_names, 1, $noreg, 0, $noreg, @.str.2 :: (store 8 into %ir.arrayidx1, align 16)
SU(2):   MOV64mi32 %stack.22.t_names, 1, $noreg, 8, $noreg, @.str.3 :: (store 8 into %ir.arrayidx2)
SU(3):   MOV64mi32 %stack.22.t_names, 1, $noreg, 16, $noreg, @.str.4 :: (store 8 into %ir.arrayidx3, align 16)
SU(4):   MOV64mi32 %stack.22.t_names, 1, $noreg, 24, $noreg, @.str.5 :: (store 8 into %ir.arrayidx4)
SU(5):   MOV64mi32 %stack.22.t_names, 1, $noreg, 32, $noreg, @.str.6 :: (store 8 into %ir.arrayidx5, align 16)
SU(6):   MOV64mi32 %stack.22.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx6, align 16)
SU(7):   MOV64mi32 %stack.22.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx7)
SU(8):   MOV64mi32 %stack.22.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx8, align 16)
SU(9):   MOV64mi32 %stack.22.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx9)
SU(10):   %6:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.6 if.end
  From: %14:gr64 = COPY killed $rax
    To: JCC_1 %bb.17, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %14:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%14
    SU(1): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(1):   MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %14:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(2):   TEST64rr %14:gr64, %14:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.17, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %14:gr64, %14:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %14:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %14:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %14:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %14:gr64, %14:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = MOV32ri64 @.str.12
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.12
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.12
SU(1):   $rsi = MOV32ri64 @.str.1

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = MOV32ri64 @.str.11
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.11
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.11
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.7 if.then14
  From: %31:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%31
  Single Issue       : false;
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%31
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %31:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.7 if.then14
  From: $rdi = COPY %28:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %28:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @lt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %28:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @lt
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = MOV32ri64 @.str.14
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(1):   $rsi = MOV32ri64 @.str.14
SU(2):   $rdx = MOV32ri64 @lt
SU(0):   $rdi = COPY %28:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.7 if.then14
  From: $rdi = MOV32ri64 @.str.13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   $rdi = MOV32ri64 @.str.13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.8 while.cond
  From: %33:gr32 = COPY killed $eax
    To: JCC_1 %bb.8, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %33:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%33
  Single Issue       : false;
SU(1):   CMP32ri8 %33:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%33
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %33:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %33:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %33:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %33:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.9 while.end
  From: %43:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%43
  Single Issue       : false;
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %43:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%43
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %43:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %43:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %43:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.9 while.end
  From: $rdi = COPY %35:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %35:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %37:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rcx = COPY %38:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = COPY %39:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $r8 = COPY %39:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = COPY %38:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %37:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %35:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = MOV32ri64 @.str.15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   $rsi = MOV32ri64 @.str.15
SU(0):   $rdi = COPY %35:gr64
SU(2):   $rdx = COPY %37:gr64
SU(3):   $rcx = COPY %38:gr64
SU(4):   $r8 = COPY %39:gr64
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.9 while.end
  From: %35:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %35:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %36:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%36
    SU(3): Data Latency=4 Reg=%36
    SU(2): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(2):   %37:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nx, $noreg
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(3):   %38:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @ny, $noreg
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(4):   %39:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nz, $noreg
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %39:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nz, $noreg
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %38:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @ny, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %37:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nx, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %36:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %35:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %35:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
SU(1):   %36:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(2):   %37:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nx, $noreg
SU(3):   %38:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @ny, $noreg
SU(4):   %39:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nz, $noreg

********** MI Scheduling **********
main:%bb.10 while.cond25
  From: %45:gr32 = COPY killed $eax
    To: JCC_1 %bb.10, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %45:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   CMP32ri8 %45:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %45:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %45:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %45:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %45:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.11 while.end29
  From: %52:gr32 = COPY killed $eax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %52:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%52
  Single Issue       : false;
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %52:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%52
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %52:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %52:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %52:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %52:gr32 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.11 while.end29
  From: %51:gr64 = LEA64r %stack.16.nit, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %51:gr64 = LEA64r %stack.16.nit, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(1):   $rdi = COPY %47:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 @.str.16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rdx = COPY %51:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%51
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdx = COPY %51:gr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $rdi = COPY %47:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = MOV32ri64 @.str.16
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:gr64 = LEA64r %stack.16.nit, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %51:gr64 = LEA64r %stack.16.nit, 1, $noreg, 0, $noreg
SU(2):   $rsi = MOV32ri64 @.str.16
SU(1):   $rdi = COPY %47:gr64
SU(3):   $rdx = COPY %51:gr64
SU(4):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.12 while.cond31
  From: %54:gr32 = COPY killed $eax
    To: JCC_1 %bb.12, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %54:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%54
  Single Issue       : false;
SU(1):   CMP32ri8 %54:gr32, 10, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%54
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri8 %54:gr32, 10, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %54:gr32 = COPY killed $eax
  Ready @1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %54:gr32 = COPY killed $eax
SU(1):   CMP32ri8 %54:gr32, 10, implicit-def $eflags

********** MI Scheduling **********
main:%bb.15 for.body38
  From: %415:gr32 = COPY killed $eax
    To: JMP_1 %bb.14
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %415:gr32 = COPY killed $eax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%415
  Single Issue       : false;
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %415:gr32 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%415
  Single Issue       : false;
SU(2):   INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %415:gr32 :: (store 4 into %ir.result)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %415:gr32 = COPY killed $eax
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %415:gr32 = COPY killed $eax
SU(1):   MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %415:gr32 :: (store 4 into %ir.result)
SU(2):   INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.15 for.body38
  From: $rdi = COPY %409:gr64
    To: CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %409:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %411:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $rdx = COPY %411:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %409:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = MOV32ri64 @.str.16
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(1):   $rsi = MOV32ri64 @.str.16
SU(0):   $rdi = COPY %409:gr64
SU(2):   $rdx = COPY %411:gr64
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.15 for.body38
  From: %409:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %409:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %410:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%410
  Single Issue       : false;
SU(2):   %411:gr64 = LEA64r $noreg, 4, %410:gr64_nosp, @debug_vec, $noreg
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%410
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %411:gr64 = LEA64r $noreg, 4, %410:gr64_nosp, @debug_vec, $noreg
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %410:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %409:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %409:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
SU(1):   %410:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(2):   %411:gr64 = LEA64r $noreg, 4, %410:gr64_nosp, @debug_vec, $noreg

********** MI Scheduling **********
main:%bb.17 if.else46
  From: MOV32mi $rip, 1, $noreg, @lt, $noreg, 8 :: (store 4 into @lt)
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @lt, $noreg, 8 :: (store 4 into @lt)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.16.nit, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.nit)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi $rip, 1, $noreg, @nx + 32, $noreg, 256 :: (store 4 into %ir.arrayidx49, align 16)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mi $rip, 1, $noreg, @ny + 32, $noreg, 256 :: (store 4 into %ir.arrayidx51, align 16)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   MOV32mi $rip, 1, $noreg, @nz + 32, $noreg, 256 :: (store 4 into %ir.arrayidx53, align 16)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi $rip, 1, $noreg, @nz + 32, $noreg, 256 :: (store 4 into %ir.arrayidx53, align 16)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi $rip, 1, $noreg, @ny + 32, $noreg, 256 :: (store 4 into %ir.arrayidx51, align 16)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi $rip, 1, $noreg, @nx + 32, $noreg, 256 :: (store 4 into %ir.arrayidx49, align 16)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.16.nit, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.nit)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @lt, $noreg, 8 :: (store 4 into @lt)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   MOV32mi $rip, 1, $noreg, @lt, $noreg, 8 :: (store 4 into @lt)
SU(1):   MOV32mi %stack.16.nit, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.nit)
SU(2):   MOV32mi $rip, 1, $noreg, @nx + 32, $noreg, 256 :: (store 4 into %ir.arrayidx49, align 16)
SU(3):   MOV32mi $rip, 1, $noreg, @ny + 32, $noreg, 256 :: (store 4 into %ir.arrayidx51, align 16)
SU(4):   MOV32mi $rip, 1, $noreg, @nz + 32, $noreg, 256 :: (store 4 into %ir.arrayidx53, align 16)
SU(5):   MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.17 if.else46
  From: $rdi = MOV32ri64 @.str.17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   $rdi = MOV32ri64 @.str.17
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.19 for.body56
  From: %465:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.18
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %465:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%465
    SU(1): Data Latency=4 Reg=%465
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi $noreg, 4, %465:gr64_nosp, @debug_vec, $noreg, 0 :: (store 4 into %ir.arrayidx58)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%465
  Single Issue       : false;
SU(2):   %23:gr32 = LEA64_32r %465:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%465
  Successors:
    SU(3): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(3):   MOV32mr %stack.21.i, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%23
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.21.i, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %23:gr32 = LEA64_32r %465:gr64_nosp, 1, $noreg, 1, $noreg
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi $noreg, 4, %465:gr64_nosp, @debug_vec, $noreg, 0 :: (store 4 into %ir.arrayidx58)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %465:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %465:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   MOV32mi $noreg, 4, %465:gr64_nosp, @debug_vec, $noreg, 0 :: (store 4 into %ir.arrayidx58)
SU(2):   %23:gr32 = LEA64_32r %465:gr64_nosp, 1, $noreg, 1, $noreg
SU(3):   MOV32mr %stack.21.i, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.20 if.end62
  From: %60:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.22, 5, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %60:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%60
    SU(1): Data Latency=4 Reg=%60
  Single Issue       : false;
SU(1):   %61:gr32 = MOV32rm $noreg, 4, %60:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx64)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%60
  Successors:
    SU(2): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(2):   CMP32rm %61:gr32, $noreg, 4, %60:gr64_nosp, @ny, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx66)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%61
    SU(0): Data Latency=4 Reg=%60
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.22, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %61:gr32, $noreg, 4, %60:gr64_nosp, @ny, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx66)
  Ready @4c
  BotQ.A TopLatency SU(2) 8c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %61:gr32 = MOV32rm $noreg, 4, %60:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx64)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %60:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %60:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   %61:gr32 = MOV32rm $noreg, 4, %60:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx64)
SU(2):   CMP32rm %61:gr32, $noreg, 4, %60:gr64_nosp, @ny, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx66)

********** MI Scheduling **********
main:%bb.21 lor.lhs.false
  From: %63:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.23, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %63:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%63
    SU(1): Data Latency=4 Reg=%63
  Single Issue       : false;
SU(1):   %64:gr32 = MOV32rm $noreg, 4, %63:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx69)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%63
  Successors:
    SU(2): Data Latency=4 Reg=%64
  Single Issue       : false;
SU(2):   CMP32rm %64:gr32, $noreg, 4, %63:gr64_nosp, @nz, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx71)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%64
    SU(0): Data Latency=4 Reg=%63
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %64:gr32, $noreg, 4, %63:gr64_nosp, @nz, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx71)
  Ready @4c
  BotQ.A TopLatency SU(2) 8c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %64:gr32 = MOV32rm $noreg, 4, %63:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx69)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %63:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %63:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   %64:gr32 = MOV32rm $noreg, 4, %63:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx69)
SU(2):   CMP32rm %64:gr32, $noreg, 4, %63:gr64_nosp, @nz, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx71)

********** MI Scheduling **********
main:%bb.23 if.else74
  From: %66:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.26, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(1):   CMP32mi8 $noreg, 4, %66:gr64_nosp, @nx, $noreg, 32, implicit-def $eflags :: (load 4 from %ir.arrayidx76)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi8 $noreg, 4, %66:gr64_nosp, @nx, $noreg, 32, implicit-def $eflags :: (load 4 from %ir.arrayidx76)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %66:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi8 $noreg, 4, %66:gr64_nosp, @nx, $noreg, 32, implicit-def $eflags :: (load 4 from %ir.arrayidx76)

********** MI Scheduling **********
main:%bb.26 if.else80
  From: %71:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.29, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %71:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(1):   CMP32mi $noreg, 4, %71:gr64_nosp, @nx, $noreg, 128, implicit-def $eflags :: (load 4 from %ir.arrayidx82)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%71
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi $noreg, 4, %71:gr64_nosp, @nx, $noreg, 128, implicit-def $eflags :: (load 4 from %ir.arrayidx82)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %71:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %71:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi $noreg, 4, %71:gr64_nosp, @nx, $noreg, 128, implicit-def $eflags :: (load 4 from %ir.arrayidx82)

********** MI Scheduling **********
main:%bb.29 if.else87
  From: %76:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.32, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %76:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%76
  Single Issue       : false;
SU(1):   CMP32mi $noreg, 4, %76:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx89)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%76
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.32, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi $noreg, 4, %76:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx89)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %76:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %76:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi $noreg, 4, %76:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx89)

********** MI Scheduling **********
main:%bb.32 if.else94
  From: %81:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.35, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %81:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%81
  Single Issue       : false;
SU(1):   CMP32mi $noreg, 4, %81:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx96)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%81
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.35, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi $noreg, 4, %81:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx96)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %81:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %81:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi $noreg, 4, %81:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx96)

********** MI Scheduling **********
main:%bb.35 if.else101
  From: %86:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.38, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %86:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%86
  Single Issue       : false;
SU(1):   CMP32mi $noreg, 4, %86:gr64_nosp, @nx, $noreg, 512, implicit-def $eflags :: (load 4 from %ir.arrayidx103)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%86
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi $noreg, 4, %86:gr64_nosp, @nx, $noreg, 512, implicit-def $eflags :: (load 4 from %ir.arrayidx103)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %86:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi $noreg, 4, %86:gr64_nosp, @nx, $noreg, 512, implicit-def $eflags :: (load 4 from %ir.arrayidx103)

********** MI Scheduling **********
main:%bb.38 if.else108
  From: %91:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.41, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %91:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%91
  Single Issue       : false;
SU(1):   CMP32mi $noreg, 4, %91:gr64_nosp, @nx, $noreg, 1024, implicit-def $eflags :: (load 4 from %ir.arrayidx110)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%91
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.41, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi $noreg, 4, %91:gr64_nosp, @nx, $noreg, 1024, implicit-def $eflags :: (load 4 from %ir.arrayidx110)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %91:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %91:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi $noreg, 4, %91:gr64_nosp, @nx, $noreg, 1024, implicit-def $eflags :: (load 4 from %ir.arrayidx110)

********** MI Scheduling **********
main:%bb.41 if.else115
  From: %96:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.44, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %96:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%96
  Single Issue       : false;
SU(1):   CMP32mi $noreg, 4, %96:gr64_nosp, @nx, $noreg, 2048, implicit-def $eflags :: (load 4 from %ir.arrayidx117)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%96
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.44, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32mi $noreg, 4, %96:gr64_nosp, @nx, $noreg, 2048, implicit-def $eflags :: (load 4 from %ir.arrayidx117)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %96:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %96:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   CMP32mi $noreg, 4, %96:gr64_nosp, @nx, $noreg, 2048, implicit-def $eflags :: (load 4 from %ir.arrayidx117)

********** MI Scheduling **********
main:%bb.45 if.end130
  From: %101:gr64 = MOV64ri -4610184818551597739
    To: JCC_1 %bb.48, 4, implicit killed $eflags
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %101:gr64 = MOV64ri -4610184818551597739
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%101
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr %stack.6.a, 1, $noreg, 0, $noreg, %101:gr64 :: (store 8 into %ir.arrayidx1312, align 16)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%101
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   MOV64mi32 %stack.6.a, 1, $noreg, 8, $noreg, 0 :: (store 8 into %ir.arrayidx132)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %102:gr64 = MOV64ri 4595172819793696085
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%102
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   MOV64mr %stack.6.a, 1, $noreg, 16, $noreg, %102:gr64 :: (store 8 into %ir.arrayidx133, align 16)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%102
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %103:gr64 = MOV64ri 4590669220166325589
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%103
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   MOV64mr %stack.6.a, 1, $noreg, 24, $noreg, %103:gr64 :: (store 8 into %ir.arrayidx134)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%103
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.48, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(7) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV64mr %stack.6.a, 1, $noreg, 24, $noreg, %103:gr64 :: (store 8 into %ir.arrayidx134)
Bottom Pressure:
GR16=2
  LiveReg: %103
  UpdateRegP: SU(6) MOV64mr %stack.6.a, 1, $noreg, 24, $noreg, %103:gr64 :: (store 8 into %ir.arrayidx134)
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(5) %103:gr64 = MOV64ri 4590669220166325589
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV64mr %stack.6.a, 1, $noreg, 16, $noreg, %102:gr64 :: (store 8 into %ir.arrayidx133, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %102
  UpdateRegP: SU(4) MOV64mr %stack.6.a, 1, $noreg, 16, $noreg, %102:gr64 :: (store 8 into %ir.arrayidx133, align 16)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %102:gr64 = MOV64ri 4595172819793696085
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV64mi32 %stack.6.a, 1, $noreg, 8, $noreg, 0 :: (store 8 into %ir.arrayidx132)
Bottom Pressure:

  Ready @1c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.6.a, 1, $noreg, 0, $noreg, %101:gr64 :: (store 8 into %ir.arrayidx1312, align 16)
Bottom Pressure:
GR16=2
  LiveReg: %101
  UpdateRegP: SU(1) MOV64mr %stack.6.a, 1, $noreg, 0, $noreg, %101:gr64 :: (store 8 into %ir.arrayidx1312, align 16)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %101:gr64 = MOV64ri -4610184818551597739
Bottom Pressure:

  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %101:gr64 = MOV64ri -4610184818551597739
SU(1):   MOV64mr %stack.6.a, 1, $noreg, 0, $noreg, %101:gr64 :: (store 8 into %ir.arrayidx1312, align 16)
SU(2):   MOV64mi32 %stack.6.a, 1, $noreg, 8, $noreg, 0 :: (store 8 into %ir.arrayidx132)
SU(3):   %102:gr64 = MOV64ri 4595172819793696085
SU(4):   MOV64mr %stack.6.a, 1, $noreg, 16, $noreg, %102:gr64 :: (store 8 into %ir.arrayidx133, align 16)
SU(5):   %103:gr64 = MOV64ri 4590669220166325589
SU(6):   MOV64mr %stack.6.a, 1, $noreg, 24, $noreg, %103:gr64 :: (store 8 into %ir.arrayidx134)
SU(7):   CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)

********** MI Scheduling **********
main:%bb.48 if.then145
  From: %113:gr64 = MOV64ri -4622945017495814144
    To: JMP_1 %bb.50
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %113:gr64 = MOV64ri -4622945017495814144
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%113
  Single Issue       : false;
SU(1):   MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %113:gr64 :: (store 8 into %ir.arrayidx1463, align 16)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%113
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %114:gr64 = MOV64ri 4584664420663164928
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%114
  Single Issue       : false;
SU(3):   MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %114:gr64 :: (store 8 into %ir.arrayidx147)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%114
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %115:gr64 = MOV64ri -4643211215818981376
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(5):   MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %115:gr64 :: (store 8 into %ir.arrayidx148, align 16)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%115
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx149)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx149)
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %115:gr64 :: (store 8 into %ir.arrayidx148, align 16)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %115:gr64 = MOV64ri -4643211215818981376
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %114:gr64 :: (store 8 into %ir.arrayidx147)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %114:gr64 = MOV64ri 4584664420663164928
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %113:gr64 :: (store 8 into %ir.arrayidx1463, align 16)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %113:gr64 = MOV64ri -4622945017495814144
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %113:gr64 = MOV64ri -4622945017495814144
SU(1):   MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %113:gr64 :: (store 8 into %ir.arrayidx1463, align 16)
SU(2):   %114:gr64 = MOV64ri 4584664420663164928
SU(3):   MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %114:gr64 :: (store 8 into %ir.arrayidx147)
SU(4):   %115:gr64 = MOV64ri -4643211215818981376
SU(5):   MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %115:gr64 :: (store 8 into %ir.arrayidx148, align 16)
SU(6):   MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx149)

********** MI Scheduling **********
main:%bb.49 if.else150
  From: %110:gr64 = MOV64ri -4627845993560893801
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %110:gr64 = MOV64ri -4627845993560893801
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%110
  Single Issue       : false;
SU(1):   MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %110:gr64 :: (store 8 into %ir.arrayidx1514, align 16)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%110
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %111:gr64 = MOV64ri 4584391475231203080
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(3):   MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %111:gr64 :: (store 8 into %ir.arrayidx152)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%111
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %112:gr64 = MOV64ri -4642989727312717253
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(5):   MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %112:gr64 :: (store 8 into %ir.arrayidx153, align 16)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%112
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx154)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx154)
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %112:gr64 :: (store 8 into %ir.arrayidx153, align 16)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %112:gr64 = MOV64ri -4642989727312717253
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %111:gr64 :: (store 8 into %ir.arrayidx152)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %111:gr64 = MOV64ri 4584391475231203080
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %110:gr64 :: (store 8 into %ir.arrayidx1514, align 16)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %110:gr64 = MOV64ri -4627845993560893801
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %110:gr64 = MOV64ri -4627845993560893801
SU(1):   MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %110:gr64 :: (store 8 into %ir.arrayidx1514, align 16)
SU(2):   %111:gr64 = MOV64ri 4584391475231203080
SU(3):   MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %111:gr64 :: (store 8 into %ir.arrayidx152)
SU(4):   %112:gr64 = MOV64ri -4642989727312717253
SU(5):   MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %112:gr64 :: (store 8 into %ir.arrayidx153, align 16)
SU(6):   MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx154)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @.str.21
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %195:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %195:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.21
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @.str.21
SU(1):   $xmm0 = COPY %195:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %195:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %195:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%195
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.tinit, 1, $noreg, 0, $noreg, %195:fr64 :: (store 8 into %ir.tinit)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%195
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.tinit, 1, $noreg, 0, $noreg, %195:fr64 :: (store 8 into %ir.tinit)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %195:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %195:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.4.tinit, 1, $noreg, 0, $noreg, %195:fr64 :: (store 8 into %ir.tinit)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @v
    To: PUSH64r %442:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %187:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %188:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %189:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %191:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %192:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %442:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %192:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %191:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %189:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %188:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %187:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @v
SU(1):   $esi = COPY %187:gr32
SU(2):   $edx = COPY %188:gr32
SU(3):   $ecx = COPY %189:gr32
SU(4):   $r8d = COPY %191:gr32
SU(5):   $r9d = COPY %192:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %187:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %187:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %188:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %189:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %190:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=%190
    SU(4): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(4):   %191:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx186)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %192:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx188)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %442.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %442.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %192:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx188)
  Ready @3c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %191:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx186)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %190:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %189:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %188:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %187:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %187:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %188:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %189:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   %190:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(4):   %191:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx186)
SU(5):   %192:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx188)
SU(6):   undef %442.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @u
    To: CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %184:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %185:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %186:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %186:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %185:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %184:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @u
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @u
SU(1):   $esi = COPY %184:gr32
SU(2):   $edx = COPY %185:gr32
SU(3):   $ecx = COPY %186:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %184:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %184:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %185:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %186:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %186:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %185:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %184:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %184:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %185:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %186:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = COPY %117:gr64
    To: CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %117:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %118:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %119:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %119:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %118:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %117:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = COPY %117:gr64
SU(1):   $rsi = COPY %118:gr64
SU(2):   $rdx = COPY %119:gr64

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @u
    To: PUSH64r %440:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %179:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %180:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %181:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %440:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %181:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %180:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %179:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @u
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @u
SU(1):   $rsi = MOV32ri64 @v
SU(2):   $rdx = MOV32ri64 @r
SU(3):   $ecx = COPY %179:gr32
SU(4):   $r8d = COPY %180:gr32
SU(5):   $r9d = COPY %181:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %179:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %179:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %180:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %181:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %440.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %440.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %181:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %180:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %179:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %179:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %180:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %181:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   undef %440.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %178:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
    To: PUSH64r %436:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %178:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%178
  Single Issue       : false;
SU(1):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $rdx = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $rcx = COPY %162:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r8 = COPY %178:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%178
  Single Issue       : false;
SU(6):   $r9d = COPY %174:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %436:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) $r9d = COPY %174:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $r8 = COPY %178:gr64
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 3 0 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $rcx = COPY %162:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdx = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rdi = MOV32ri64 @u
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %178:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %178:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
SU(1):   $rdi = MOV32ri64 @u
SU(2):   $rsi = MOV32ri64 @v
SU(3):   $rdx = MOV32ri64 @r
SU(4):   $rcx = COPY %162:gr64
SU(5):   $r8 = COPY %178:gr64
SU(6):   $r9d = COPY %174:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %172:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %172:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%172
  Single Issue       : false;
SU(1):   MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %172:fr64 :: (store 8 into %ir.old2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%172
  Single Issue       : false;
SU(2):   %173:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(3):   MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.oldu)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(4):   %174:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   undef %438.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %436.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 6 5 4 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %436.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 4 5 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %438.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %174:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.oldu)
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %173:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %172:fr64 :: (store 8 into %ir.old2)
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %172:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %172:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
SU(1):   MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %172:fr64 :: (store 8 into %ir.old2)
SU(2):   %173:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
SU(3):   MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.oldu)
SU(4):   %174:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(5):   undef %438.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(6):   undef %436.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @r
    To: PUSH64r %430:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %164:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %165:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %166:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = COPY %141:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = COPY %142:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %430:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9 = COPY %142:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8 = COPY %141:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %166:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %165:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %164:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @r
SU(1):   $esi = COPY %164:gr32
SU(2):   $edx = COPY %165:gr32
SU(3):   $ecx = COPY %166:gr32
SU(4):   $r8 = COPY %141:gr64
SU(5):   $r9 = COPY %142:gr64

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %164:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %164:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %165:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %166:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %167:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=%167
    SU(5): Data Latency=4 Reg=%167
    SU(4): Data Latency=4 Reg=%167
  Single Issue       : false;
SU(4):   undef %434.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx177)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%167
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   undef %432.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx179)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%167
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %430.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx181)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%167
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %430.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx181)
  Ready @3c
  BotQ.A TopLatency SU(6) 4c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %432.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx179)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %434.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx177)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %167:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %166:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %165:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %164:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %164:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %165:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %166:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   %167:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(4):   undef %434.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx177)
SU(5):   undef %432.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx179)
SU(6):   undef %430.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx181)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %162:gr64 = LEA64r %stack.6.a, 1, $noreg, 0, $noreg
    To: PUSH64r %428:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %162:gr64 = LEA64r %stack.6.a, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $rdx = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $ecx = COPY %157:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r8d = COPY %158:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   $r9d = COPY %159:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %428:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) $r9d = COPY %159:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $r8d = COPY %158:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $ecx = COPY %157:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdx = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rdi = MOV32ri64 @u
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %162:gr64 = LEA64r %stack.6.a, 1, $noreg, 0, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %162:gr64 = LEA64r %stack.6.a, 1, $noreg, 0, $noreg
SU(1):   $rdi = MOV32ri64 @u
SU(2):   $rsi = MOV32ri64 @v
SU(3):   $rdx = MOV32ri64 @r
SU(4):   $ecx = COPY %157:gr32
SU(5):   $r8d = COPY %158:gr32
SU(6):   $r9d = COPY %159:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %157:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %157:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %158:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %159:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %428.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %428.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %159:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %158:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %157:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %157:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %158:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %159:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   undef %428.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @.str.20
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.20
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @.str.20
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @.str.19
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %152:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %152:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.19
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @.str.19
SU(1):   $esi = COPY %152:gr32
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @.str.18
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %144:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %145:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %146:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %147:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %147:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %146:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %145:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %144:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.18
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @.str.18
SU(1):   $esi = COPY %144:gr32
SU(2):   $edx = COPY %145:gr32
SU(3):   $ecx = COPY %146:gr32
SU(4):   $r8d = COPY %147:gr32
SU(5):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %143:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %143:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%143
    SU(2): Data Latency=4 Reg=%143
    SU(1): Data Latency=4 Reg=%143
  Single Issue       : false;
SU(1):   %144:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx167)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%143
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %145:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx169)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%143
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %146:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx171)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%143
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %147:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %147:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %146:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx171)
  Ready @3c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %145:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx169)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %144:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx167)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %143:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %143:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   %144:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx167)
SU(2):   %145:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx169)
SU(3):   %146:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx171)
SU(4):   %147:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %141:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
    To: PUSH64r %422:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=14
Live In: %422 %135 %134 %133 
Live Out: R9B R9BH R9WH %142 R8B R8BH R8WH %141 CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
  LiveReg: %142
  UpdateRegP: SU(7) $r9 = COPY %142:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  LiveReg: %141
  UpdateRegP: SU(6) $r8 = COPY %141:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  LiveReg: %422
Top Pressure:
GR16=8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=14
Excess PSets: 
SU(0):   %141:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%141
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %142:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%142
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   $rdi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(3):   $esi = COPY %133:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $edx = COPY %134:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(5):   $ecx = COPY %135:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(6):   $r8 = COPY %141:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%141
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(7):   $r9 = COPY %142:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%142
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
ExitSU:   PUSH64r %422:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $r9 = COPY %142:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=13
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 4 3 1 
  Cand SU(2) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $r8 = COPY %141:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 5 4 3 0 
  Cand SU(2) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $ecx = COPY %135:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %135
  UpdateRegP: SU(5) $ecx = COPY %135:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $edx = COPY %134:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %134
  UpdateRegP: SU(4) $edx = COPY %134:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $esi = COPY %133:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %133
  UpdateRegP: SU(3) $esi = COPY %133:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdi = MOV32ri64 @v
Bottom Pressure:
GR16=12
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %142:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=10
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %141:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %141:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
SU(1):   %142:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
SU(2):   $rdi = MOV32ri64 @v
SU(3):   $esi = COPY %133:gr32
SU(4):   $edx = COPY %134:gr32
SU(5):   $ecx = COPY %135:gr32
SU(6):   $r8 = COPY %141:gr64
SU(7):   $r9 = COPY %142:gr64

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %133:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %133:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %134:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %135:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %136:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=%136
    SU(5): Data Latency=4 Reg=%136
    SU(4): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(4):   undef %426.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx161)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   undef %424.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx163)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %422.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx165)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %422.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx165)
  Ready @3c
  BotQ.A TopLatency SU(6) 4c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %424.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx163)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %426.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx161)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %136:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %135:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %134:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %133:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %133:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %134:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %135:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   %136:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(4):   undef %426.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx161)
SU(5):   undef %424.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx163)
SU(6):   undef %422.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx165)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @v
    To: PUSH64r %420:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %124:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %125:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %126:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %128:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %129:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %420:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %129:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %128:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %126:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %125:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %124:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @v
SU(1):   $esi = COPY %124:gr32
SU(2):   $edx = COPY %125:gr32
SU(3):   $ecx = COPY %126:gr32
SU(4):   $r8d = COPY %128:gr32
SU(5):   $r9d = COPY %129:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %124:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %124:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %125:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %126:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %127:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=%127
    SU(4): Data Latency=4 Reg=%127
  Single Issue       : false;
SU(4):   %128:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx157)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%127
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %129:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx159)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%127
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %420.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %420.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %129:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx159)
  Ready @3c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %128:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx157)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %127:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %126:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %125:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %124:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %124:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %125:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %126:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   %127:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(4):   %128:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx157)
SU(5):   %129:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx159)
SU(6):   undef %420.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: $rdi = MOV32ri64 @u
    To: CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %120:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %121:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %122:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %122:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %121:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %120:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @u
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   $rdi = MOV32ri64 @u
SU(1):   $esi = COPY %120:gr32
SU(2):   $edx = COPY %121:gr32
SU(3):   $ecx = COPY %122:gr32

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %120:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %120:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %121:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %122:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %122:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %121:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %120:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %120:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %121:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %122:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)

********** MI Scheduling **********
main:%bb.50 if.end155
  From: %117:gr64 = LEA64r %stack.13.n1, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %117:gr64 = LEA64r %stack.13.n1, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%117
  Single Issue       : false;
SU(1):   %118:gr64 = LEA64r %stack.14.n2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%118
  Single Issue       : false;
SU(2):   %119:gr64 = LEA64r %stack.15.n3, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%119
  Single Issue       : false;
SU(3):   $rdi = COPY %117:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%117
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $rsi = COPY %118:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%118
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $rdx = COPY %119:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%119
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $rdx = COPY %119:gr64
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 2 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $rsi = COPY %118:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdi = COPY %117:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %119:gr64 = LEA64r %stack.15.n3, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %118:gr64 = LEA64r %stack.14.n2, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %117:gr64 = LEA64r %stack.13.n1, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %117:gr64 = LEA64r %stack.13.n1, 1, $noreg, 0, $noreg
SU(1):   %118:gr64 = LEA64r %stack.14.n2, 1, $noreg, 0, $noreg
SU(2):   %119:gr64 = LEA64r %stack.15.n3, 1, $noreg, 0, $noreg
SU(3):   $rdi = COPY %117:gr64
SU(4):   $rsi = COPY %118:gr64
SU(5):   $rdx = COPY %119:gr64

********** MI Scheduling **********
main:%bb.50 if.end155
  From: MOV32mi $rip, 1, $noreg, @lb, $noreg, 1 :: (store 4 into @lb)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @lb, $noreg, 1 :: (store 4 into @lb)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %116:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%116
  Single Issue       : false;
SU(2):   MOV32mr %stack.1.k, 1, $noreg, 0, $noreg, %116:gr32 :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%116
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.1.k, 1, $noreg, 0, $noreg, %116:gr32 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %116:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @lb, $noreg, 1 :: (store 4 into @lb)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   MOV32mi $rip, 1, $noreg, @lb, $noreg, 1 :: (store 4 into @lb)
SU(1):   %116:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(2):   MOV32mr %stack.1.k, 1, $noreg, 0, $noreg, %116:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
main:%bb.55 if.end199
  From: $rdi = MOV32ri64 @u
    To: PUSH64r %444:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %203:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %204:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %205:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %444:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %205:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %204:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %203:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @u
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = MOV32ri64 @u
SU(1):   $rsi = MOV32ri64 @v
SU(2):   $rdx = MOV32ri64 @r
SU(3):   $ecx = COPY %203:gr32
SU(4):   $r8d = COPY %204:gr32
SU(5):   $r9d = COPY %205:gr32

********** MI Scheduling **********
main:%bb.55 if.end199
  From: %203:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %203:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %204:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %205:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %444.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %444.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %205:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %204:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %203:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %203:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %204:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %205:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   undef %444.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
main:%bb.57 if.end203
  From: %224:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %224:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%224
  Single Issue       : false;
SU(1):   MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %224:fr64 :: (store 8 into %ir.old2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%224
  Single Issue       : false;
SU(2):   %225:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%225
  Single Issue       : false;
SU(3):   MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %225:fr64 :: (store 8 into %ir.oldu)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%225
  Single Issue       : false;
SU(4):   MOV32mi %stack.2.it, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.it)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %395:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %395:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.2.it, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.it)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %225:fr64 :: (store 8 into %ir.oldu)
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %225:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %224:fr64 :: (store 8 into %ir.old2)
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %224:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %224:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
SU(1):   MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %224:fr64 :: (store 8 into %ir.old2)
SU(2):   %225:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
SU(3):   MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %225:fr64 :: (store 8 into %ir.oldu)
SU(4):   MOV32mi %stack.2.it, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.it)
SU(5):   %395:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg

********** MI Scheduling **********
main:%bb.57 if.end203
  From: %222:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
    To: PUSH64r %446:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=13
Live In: %446 %215 %214 %213 
Live Out: R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
  LiveReg: %446
Top Pressure:
GR16=8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=10
Excess PSets: 
SU(0):   %222:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%222
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %223:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%223
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   $rdi = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(3):   $esi = COPY %213:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $edx = COPY %214:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(5):   $ecx = COPY %215:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(6):   $r8 = COPY %222:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%222
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(7):   $r9 = COPY %223:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%223
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
ExitSU:   PUSH64r %446:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $r9 = COPY %223:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=11
  LiveReg: %223
  UpdateRegP: SU(7) $r9 = COPY %223:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 4 3 1 
  Cand SU(2) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $r8 = COPY %222:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=12
  LiveReg: %222
  UpdateRegP: SU(6) $r8 = COPY %222:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 5 4 3 0 
  Cand SU(2) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $ecx = COPY %215:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %215
  UpdateRegP: SU(5) $ecx = COPY %215:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $edx = COPY %214:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %214
  UpdateRegP: SU(4) $edx = COPY %214:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $esi = COPY %213:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %213
  UpdateRegP: SU(3) $esi = COPY %213:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdi = MOV32ri64 @r
Bottom Pressure:
GR16=12
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %223:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=10
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %222:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %222:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
SU(1):   %223:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
SU(2):   $rdi = MOV32ri64 @r
SU(3):   $esi = COPY %213:gr32
SU(4):   $edx = COPY %214:gr32
SU(5):   $ecx = COPY %215:gr32
SU(6):   $r8 = COPY %222:gr64
SU(7):   $r9 = COPY %223:gr64

********** MI Scheduling **********
main:%bb.57 if.end203
  From: %213:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %213:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %214:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %215:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %216:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=%216
    SU(5): Data Latency=4 Reg=%216
    SU(4): Data Latency=4 Reg=%216
  Single Issue       : false;
SU(4):   undef %450.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx205)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%216
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   undef %448.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx207)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%216
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %446.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx209)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%216
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %446.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx209)
  Ready @3c
  BotQ.A TopLatency SU(6) 4c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %448.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx207)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %450.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx205)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %216:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %215:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %214:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %213:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %213:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %214:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %215:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   %216:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(4):   undef %450.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx205)
SU(5):   undef %448.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx207)
SU(6):   undef %446.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx209)

********** MI Scheduling **********
main:%bb.58 for.cond210
  From: %226:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
    To: JCC_1 %bb.72, 15, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %226:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%226
  Single Issue       : false;
SU(1):   CMP32rm %226:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%226
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.72, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %226:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %226:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %226:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
SU(1):   CMP32rm %226:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)

********** MI Scheduling **********
main:%bb.60 lor.lhs.false216
  From: %367:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
    To: JCC_1 %bb.62, 4, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %367:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%367
  Single Issue       : false;
SU(1):   CMP32rm %367:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%367
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.62, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %367:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %367:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %367:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
SU(1):   CMP32rm %367:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)

********** MI Scheduling **********
main:%bb.61 lor.lhs.false219
  From: %369:gr64_with_sub_8bit = MOVSX64rm32 %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
    To: JCC_1 %bb.63, 5, implicit killed $eflags
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %369:gr64_with_sub_8bit = MOVSX64rm32 %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(7): Data Latency=4 Reg=%369
    SU(1): Data Latency=4 Reg=%369
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %377:gr64_nosp = IMUL64rri32 %369:gr64_with_sub_8bit, 1717986919, implicit-def dead $eflags
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%369
  Successors:
    SU(4): Data Latency=1 Reg=%377
    SU(2): Data Latency=1 Reg=%377
    SU(4): Out  Latency=0
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %372:gr64_with_sub_8bit = COPY %377:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%377
  Successors:
    SU(3): Data Latency=0 Reg=%372
    SU(3): Out  Latency=0
    SU(4): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %372:gr64_with_sub_8bit = SHR64ri %372:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=0 Reg=%372
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%372
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %377:gr64_nosp = SAR64ri %377:gr64_nosp(tied-def 0), 33, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=1 Reg=%377
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%377
    SU(5): Out  Latency=0
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%377
    SU(4): Out  Latency=0
    SU(3): Data Latency=1 Reg=%372
  Successors:
    SU(6): Data Latency=1 Reg=%377
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %379:gr32 = LEA64_32r %377:gr64_nosp, 4, %377:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%377
  Successors:
    SU(7): Data Latency=1 Reg=%379
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=%379
    SU(5): Out  Latency=0
    SU(4): Out  Latency=0
    SU(3): Out  Latency=0
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%369
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags
Bottom Pressure:
GR16=4
  LiveReg: %369
  UpdateRegP: SU(1) %377:gr64_nosp = IMUL64rri32 %369:gr64_with_sub_8bit, 1717986919, implicit-def dead $eflags
              to GR16 -2
  UpdateRegP: SU(7) CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags
              to GR16 2
  LiveReg: %379
  UpdateRegP: SU(7) CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 8c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %379:gr32 = LEA64_32r %377:gr64_nosp, 4, %377:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %377
  UpdateRegP: SU(6) %379:gr32 = LEA64_32r %377:gr64_nosp, 4, %377:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(6) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %377
  UpdateRegP: SU(5) %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %372
  UpdateRegP: SU(5) %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %377:gr64_nosp = SAR64ri %377:gr64_nosp(tied-def 0), 33, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %377
  UpdateRegP: SU(2) %372:gr64_with_sub_8bit = COPY %377:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(4) %377:gr64_nosp = SAR64ri %377:gr64_nosp(tied-def 0), 33, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %372:gr64_with_sub_8bit = SHR64ri %372:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %372
  UpdateRegP: SU(3) %372:gr64_with_sub_8bit = SHR64ri %372:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %372:gr64_with_sub_8bit = COPY %377:gr64_nosp
Bottom Pressure:
GR16=4
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %377:gr64_nosp = IMUL64rri32 %369:gr64_with_sub_8bit, 1717986919, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %369:gr64_with_sub_8bit = MOVSX64rm32 %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
Bottom Pressure:

  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %369:gr64_with_sub_8bit = MOVSX64rm32 %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
SU(1):   %377:gr64_nosp = IMUL64rri32 %369:gr64_with_sub_8bit, 1717986919, implicit-def dead $eflags
SU(2):   %372:gr64_with_sub_8bit = COPY %377:gr64_nosp
SU(3):   %372:gr64_with_sub_8bit = SHR64ri %372:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
SU(4):   %377:gr64_nosp = SAR64ri %377:gr64_nosp(tied-def 0), 33, implicit-def dead $eflags
SU(5):   %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %379:gr32 = LEA64_32r %377:gr64_nosp, 4, %377:gr64_nosp, 0, $noreg
SU(7):   CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags

********** MI Scheduling **********
main:%bb.62 if.then222
  From: $rdi = MOV32ri64 @.str.22
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %381:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %381:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.22
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   $rdi = MOV32ri64 @.str.22
SU(1):   $esi = COPY %381:gr32
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.65 if.end227
  From: $rdi = MOV32ri64 @u
    To: PUSH64r %452:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $rcx = COPY %162:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = COPY %395:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %387:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %452:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %387:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8 = COPY %395:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $rcx = COPY %162:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @u
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $rdi = MOV32ri64 @u
SU(1):   $rsi = MOV32ri64 @v
SU(2):   $rdx = MOV32ri64 @r
SU(3):   $rcx = COPY %162:gr64
SU(4):   $r8 = COPY %395:gr64
SU(5):   $r9d = COPY %387:gr32

********** MI Scheduling **********
main:%bb.65 if.end227
  From: %387:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %387:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   undef %454.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   undef %452.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %452.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %454.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %387:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %387:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   undef %454.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   undef %452.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)

********** MI Scheduling **********
main:%bb.69 if.end235
  From: $rdi = MOV32ri64 @u
    To: PUSH64r %456:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @u
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @v
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %398:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %399:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %400:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %456:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %400:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $r8d = COPY %399:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $ecx = COPY %398:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @r
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @v
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @u
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   $rdi = MOV32ri64 @u
SU(1):   $rsi = MOV32ri64 @v
SU(2):   $rdx = MOV32ri64 @r
SU(3):   $ecx = COPY %398:gr32
SU(4):   $r8d = COPY %399:gr32
SU(5):   $r9d = COPY %400:gr32

********** MI Scheduling **********
main:%bb.69 if.end235
  From: %398:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %398:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %399:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %400:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %456.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %456.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %400:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %399:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %398:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   %398:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %399:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %400:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   undef %456.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
main:%bb.72 for.end242
  From: %245:gr64 = MOV64ri 4487126258331716666
    To: JCC_1 %bb.90, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %245:gr64 = MOV64ri 4487126258331716666
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%245
  Single Issue       : false;
SU(1):   MOV64mr %stack.12.epsilon, 1, $noreg, 0, $noreg, %245:gr64 :: (store 8 into %ir.epsilon)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%245
  Single Issue       : false;
SU(2):   CMP8mi $rip, 1, $noreg, @Class, $noreg, 85, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.90, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP8mi $rip, 1, $noreg, @Class, $noreg, 85, implicit-def $eflags :: (dereferenceable load 1 from @Class)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.12.epsilon, 1, $noreg, 0, $noreg, %245:gr64 :: (store 8 into %ir.epsilon)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %245:gr64 = MOV64ri 4487126258331716666
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %245:gr64 = MOV64ri 4487126258331716666
SU(1):   MOV64mr %stack.12.epsilon, 1, $noreg, 0, $noreg, %245:gr64 :: (store 8 into %ir.epsilon)
SU(2):   CMP8mi $rip, 1, $noreg, @Class, $noreg, 85, implicit-def $eflags :: (dereferenceable load 1 from @Class)

********** MI Scheduling **********
main:%bb.72 for.end242
  From: $rdi = MOV32ri64 @.str.23
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.23
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $rdi = MOV32ri64 @.str.23
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.72 for.end242
  From: %240:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %240:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%240
  Single Issue       : false;
SU(1):   MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %240:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%240
  Single Issue       : false;
SU(2):   MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV64mi32 %stack.18.verify_value, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.verify_value)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mi32 %stack.18.verify_value, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.verify_value)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %240:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %240:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %240:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %240:fr64 :: (store 8 into %ir.t)
SU(2):   MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
SU(3):   MOV64mi32 %stack.18.verify_value, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.72 for.end242
  From: %237:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
    To: PUSH64r %458:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=13
Live In: %458 %230 %229 %228 
Live Out: R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
  LiveReg: %458
Top Pressure:
GR16=8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=10
Excess PSets: 
SU(0):   %237:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%237
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %238:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%238
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   $rdi = MOV32ri64 @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(3):   $esi = COPY %228:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $edx = COPY %229:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(5):   $ecx = COPY %230:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(6):   $r8 = COPY %237:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%237
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(7):   $r9 = COPY %238:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%238
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
ExitSU:   PUSH64r %458:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $r9 = COPY %238:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=11
  LiveReg: %238
  UpdateRegP: SU(7) $r9 = COPY %238:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 4 3 1 
  Cand SU(2) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $r8 = COPY %237:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=12
  LiveReg: %237
  UpdateRegP: SU(6) $r8 = COPY %237:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 5 4 3 0 
  Cand SU(2) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $ecx = COPY %230:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %230
  UpdateRegP: SU(5) $ecx = COPY %230:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $edx = COPY %229:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %229
  UpdateRegP: SU(4) $edx = COPY %229:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $esi = COPY %228:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %228
  UpdateRegP: SU(3) $esi = COPY %228:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdi = MOV32ri64 @r
Bottom Pressure:
GR16=12
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %238:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=10
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %237:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %237:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
SU(1):   %238:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
SU(2):   $rdi = MOV32ri64 @r
SU(3):   $esi = COPY %228:gr32
SU(4):   $edx = COPY %229:gr32
SU(5):   $ecx = COPY %230:gr32
SU(6):   $r8 = COPY %237:gr64
SU(7):   $r9 = COPY %238:gr64

********** MI Scheduling **********
main:%bb.72 for.end242
  From: %228:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %228:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %229:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %230:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %231:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Data Latency=4 Reg=%231
    SU(5): Data Latency=4 Reg=%231
    SU(4): Data Latency=4 Reg=%231
  Single Issue       : false;
SU(4):   undef %462.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx244)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%231
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   undef %460.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx246)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%231
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %458.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx248)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%231
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %458.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx248)
  Ready @3c
  BotQ.A TopLatency SU(6) 4c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %460.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx246)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %462.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx244)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %231:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %230:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %229:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %228:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %228:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
SU(1):   %229:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
SU(2):   %230:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
SU(3):   %231:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(4):   undef %462.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx244)
SU(5):   undef %460.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx246)
SU(6):   undef %458.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx248)

********** MI Scheduling **********
main:%bb.74 if.then258
  From: %278:gr64 = MOV64ri 4542957617782330299
    To: JMP_1 %bb.87
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %278:gr64 = MOV64ri 4542957617782330299
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%278
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %278:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%278
  Single Issue       : false;
ExitSU:   JMP_1 %bb.87
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %278:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %278:gr64 = MOV64ri 4542957617782330299
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   %278:gr64 = MOV64ri 4542957617782330299
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %278:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.76 if.then263
  From: %277:gr64 = MOV64ri 4529249300748922777
    To: JMP_1 %bb.87
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %277:gr64 = MOV64ri 4529249300748922777
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%277
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %277:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%277
  Single Issue       : false;
ExitSU:   JMP_1 %bb.87
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %277:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %277:gr64 = MOV64ri 4529249300748922777
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.76 ***
SU(0):   %277:gr64 = MOV64ri 4529249300748922777
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %277:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.78 if.then268
  From: %276:gr64 = MOV64ri 4522856047640670078
    To: JMP_1 %bb.87
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %276:gr64 = MOV64ri 4522856047640670078
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%276
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %276:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%276
  Single Issue       : false;
ExitSU:   JMP_1 %bb.87
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %276:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %276:gr64 = MOV64ri 4522856047640670078
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.78 ***
SU(0):   %276:gr64 = MOV64ri 4522856047640670078
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %276:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.80 if.then273
  From: %275:gr64 = MOV64ri 4521109751604444092
    To: JMP_1 %bb.87
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %275:gr64 = MOV64ri 4521109751604444092
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%275
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %275:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%275
  Single Issue       : false;
ExitSU:   JMP_1 %bb.87
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %275:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %275:gr64 = MOV64ri 4521109751604444092
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.80 ***
SU(0):   %275:gr64 = MOV64ri 4521109751604444092
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %275:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.82 if.then278
  From: %274:gr64 = MOV64ri 4513493083252444227
    To: JMP_1 %bb.87
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %274:gr64 = MOV64ri 4513493083252444227
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%274
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %274:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%274
  Single Issue       : false;
ExitSU:   JMP_1 %bb.87
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %274:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %274:gr64 = MOV64ri 4513493083252444227
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.82 ***
SU(0):   %274:gr64 = MOV64ri 4513493083252444227
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %274:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.84 if.then283
  From: %273:gr64 = MOV64ri 4460185030189797595
    To: JMP_1 %bb.87
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %273:gr64 = MOV64ri 4460185030189797595
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%273
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %273:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%273
  Single Issue       : false;
ExitSU:   JMP_1 %bb.87
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %273:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %273:gr64 = MOV64ri 4460185030189797595
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.84 ***
SU(0):   %273:gr64 = MOV64ri 4460185030189797595
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %273:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.86 if.then288
  From: %272:gr64 = MOV64ri 4455868063219174314
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %272:gr64 = MOV64ri 4455868063219174314
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%272
  Single Issue       : false;
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %272:gr64 :: (store 8 into %ir.verify_value)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%272
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %272:gr64 :: (store 8 into %ir.verify_value)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %272:gr64 = MOV64ri 4455868063219174314
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.86 ***
SU(0):   %272:gr64 = MOV64ri 4455868063219174314
SU(1):   MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %272:gr64 :: (store 8 into %ir.verify_value)

********** MI Scheduling **********
main:%bb.87 if.end295
  From: %283:vr128 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
    To: JCC_1 %bb.89, 2, implicit killed $eflags
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %283:vr128 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Data Latency=4 Reg=%283
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %280:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%280
    SU(2): Data Latency=4 Reg=%280
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=%280
    SU(0): Data Latency=4 Reg=%283
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%283
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %283:vr128 = PANDrm %283:vr128(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%283
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%283
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=%283
    SU(3): Out  Latency=0
    SU(1): Data Latency=4 Reg=%280
  Successors:
    SU(7): Data Latency=10 Reg=%283
    SU(5): Data Latency=10 Reg=%283
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   MOVSDmr %stack.19.err, 1, $noreg, 0, $noreg, %283:vr128 :: (store 8 into %ir.err)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(4): Data Latency=10 Reg=%283
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %286:fr64 = MOVSDrm_alt %stack.12.epsilon, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.epsilon)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%286
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(4): Data Latency=10 Reg=%283
    SU(6): Data Latency=4 Reg=%286
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.89, 2, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %286
  UpdateRegP: SU(7) UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags
              to FR32 1    FR32X 1
  LiveReg: %283
  UpdateRegP: SU(5) MOVSDmr %stack.19.err, 1, $noreg, 0, $noreg, %283:vr128 :: (store 8 into %ir.err)
              to 
  UpdateRegP: SU(7) UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 19c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %286:fr64 = MOVSDrm_alt %stack.12.epsilon, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.epsilon)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.19.err, 1, $noreg, 0, $noreg, %283:vr128 :: (store 8 into %ir.err)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %283
  UpdateRegP: SU(4) %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
              to 
  LiveReg: %280
  UpdateRegP: SU(2) %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
              to 
  UpdateRegP: SU(4) %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %283:vr128 = PANDrm %283:vr128(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %283
  UpdateRegP: SU(3) %283:vr128 = PANDrm %283:vr128(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @15c
  BotQ.A BotLatency SU(3) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %283
  UpdateRegP: SU(2) %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(2) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %280:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @20c
  BotQ.A BotLatency SU(1) 20c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %283:vr128 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
Bottom Pressure:

  Ready @20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.87 ***
SU(0):   %283:vr128 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
SU(1):   %280:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
SU(2):   %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
SU(3):   %283:vr128 = PANDrm %283:vr128(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
SU(4):   %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
SU(5):   MOVSDmr %stack.19.err, 1, $noreg, 0, $noreg, %283:vr128 :: (store 8 into %ir.err)
SU(6):   %286:fr64 = MOVSDrm_alt %stack.12.epsilon, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.epsilon)
SU(7):   UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags

********** MI Scheduling **********
main:%bb.88 if.then298
  From: $rdi = MOV32ri64 @.str.26
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %306:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %306:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.26
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.88 ***
SU(0):   $rdi = MOV32ri64 @.str.26
SU(1):   $xmm0 = COPY %306:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.88 if.then298
  From: $rdi = MOV32ri64 @.str.25
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %302:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %302:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.25
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.88 ***
SU(0):   $rdi = MOV32ri64 @.str.25
SU(1):   $xmm0 = COPY %302:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.88 if.then298
  From: $rdi = MOV32ri64 @.str.24
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.24
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.88 ***
SU(0):   $rdi = MOV32ri64 @.str.24
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.89 if.else302
  From: $rdi = MOV32ri64 @.str.29
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %295:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %295:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.29
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.89 ***
SU(0):   $rdi = MOV32ri64 @.str.29
SU(1):   $xmm0 = COPY %295:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.89 if.else302
  From: $rdi = MOV32ri64 @.str.28
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %291:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %291:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.28
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.89 ***
SU(0):   $rdi = MOV32ri64 @.str.28
SU(1):   $xmm0 = COPY %291:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.89 if.else302
  From: $rdi = MOV32ri64 @.str.27
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.27
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.89 ***
SU(0):   $rdi = MOV32ri64 @.str.27
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.90 if.else307
  From: $rdi = MOV32ri64 @.str.25
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %254:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %254:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.25
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.90 ***
SU(0):   $rdi = MOV32ri64 @.str.25
SU(1):   $xmm0 = COPY %254:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
main:%bb.90 if.else307
  From: $rdi = MOV32ri64 @.str.31
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.31
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.90 ***
SU(0):   $rdi = MOV32ri64 @.str.31
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.90 if.else307
  From: $rdi = MOV32ri64 @.str.30
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.30
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.90 ***
SU(0):   $rdi = MOV32ri64 @.str.30
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.91 if.end311
  From: %309:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.92, 5, implicit $eflags
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %309:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=%309
    SU(2): Data Latency=4 Reg=%309
    SU(1): Data Latency=4 Reg=%309
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %310:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx313)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%309
  Successors:
    SU(3): Data Latency=4 Reg=%310
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(2):   %312:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx316)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%309
  Successors:
    SU(3): Data Latency=4 Reg=%312
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%312
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%310
  Successors:
    SU(5): Data Latency=1 Reg=%312
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %314:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx320)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%309
  Successors:
    SU(5): Data Latency=4 Reg=%314
    SU(5): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(5):   %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%312
    SU(4): Out  Latency=0
    SU(4): Data Latency=4 Reg=%314
  Successors:
    SU(6): Data Latency=1 Reg=%314
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   MOVSDmr %stack.17.nn, 1, $noreg, 0, $noreg, %314:fr64 :: (store 8 into %ir.nn)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%314
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %315:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%315
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %316:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Data Latency=1 Reg=%316
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(9):   UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%316
    SU(7): Data Latency=4 Reg=%315
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.92, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %315
  UpdateRegP: SU(9) UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags
              to FR32 1    FR32X 1
  LiveReg: %316
  UpdateRegP: SU(9) UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A TopLatency SU(9) 4c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 7 
  Cand SU(6) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %316:fr64 = FsFLD0SD
Bottom Pressure:
FR32=1
FR32X=1
  Ready @2c
  BotQ.A BotLatency SU(8) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %315:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(7) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %stack.17.nn, 1, $noreg, 0, $noreg, %314:fr64 :: (store 8 into %ir.nn)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %314
  UpdateRegP: SU(6) MOVSDmr %stack.17.nn, 1, $noreg, 0, $noreg, %314:fr64 :: (store 8 into %ir.nn)
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %314
  UpdateRegP: SU(5) %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
              to 
  LiveReg: %312
  UpdateRegP: SU(5) %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
              to FR32 -1    FR32X -1
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %314:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx320)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %309
  UpdateRegP: SU(1) %310:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx313)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(2) %312:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx316)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(4) %314:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx320)
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %312
  UpdateRegP: SU(3) %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
              to 
  LiveReg: %310
  UpdateRegP: SU(3) %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %312:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx316)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %310:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx313)
Bottom Pressure:
GR16=2
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %309:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @10c
  BotQ.A BotLatency SU(0) 10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.91 ***
SU(0):   %309:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   %310:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx313)
SU(2):   %312:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx316)
SU(3):   %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
SU(4):   %314:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx320)
SU(5):   %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
SU(6):   MOVSDmr %stack.17.nn, 1, $noreg, 0, $noreg, %314:fr64 :: (store 8 into %ir.nn)
SU(7):   %315:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(8):   %316:fr64 = FsFLD0SD
SU(9):   UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.92 if.then325
  From: %319:fr64 = CVTSI2SDrm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
    To: JMP_1 %bb.94
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %319:fr64 = CVTSI2SDrm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Data Latency=4 Reg=%319
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Data Latency=4 Reg=%319
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%319
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %319:fr64 = MULSDrm %319:fr64(tied-def 0), %stack.17.nn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nn)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%319
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%319
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%319
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%319
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %319:fr64 = DIVSDrm %319:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%319
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%319
  Single Issue       : false;
SU(5):   MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %319:fr64 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%319
  Single Issue       : false;
ExitSU:   JMP_1 %bb.94
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %319:fr64 :: (store 8 into %ir.mflops)
  Ready @0c
  BotQ.A TopLatency SU(5) 20c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %319:fr64 = DIVSDrm %319:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %319:fr64 = MULSDrm %319:fr64(tied-def 0), %stack.17.nn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nn)
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %319:fr64 = CVTSI2SDrm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
  Ready @20c
  BotQ.A BotLatency SU(0) 20c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.92 ***
SU(0):   %319:fr64 = CVTSI2SDrm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
SU(1):   %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   %319:fr64 = MULSDrm %319:fr64(tied-def 0), %stack.17.nn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nn)
SU(3):   %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(4):   %319:fr64 = DIVSDrm %319:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(5):   MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %319:fr64 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.94 if.end332
  From: $rdi = MOV32ri64 @.str.32
    To: PUSH64i32 @.str.42, implicit-def $rsp, implicit $rsp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=11
Live In: %329 %328 %327 %326 %325 %324 %322 
Live Out: XMM1 XMM0 R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
Top Pressure:
FR32=2
FR32X=2
GR16=10
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Excess PSets: 
SU(0):   $rdi = MOV32ri64 @.str.32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(1):   $esi = COPY %322:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(2):   $edx = COPY %324:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   $ecx = COPY %325:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(4):   $r8d = COPY %326:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(5):   $r9d = COPY %327:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(6):   $xmm0 = COPY %328:fr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $xmm1 = COPY %329:fr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   PUSH64i32 @.str.42, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $xmm1 = COPY %329:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %329
  UpdateRegP: SU(7) $xmm1 = COPY %329:fr64
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $xmm0 = COPY %328:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %328
  UpdateRegP: SU(6) $xmm0 = COPY %328:fr64
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %327:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=9
  LiveReg: %327
  UpdateRegP: SU(5) $r9d = COPY %327:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %326:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=10
  LiveReg: %326
  UpdateRegP: SU(4) $r8d = COPY %326:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %325:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %325
  UpdateRegP: SU(3) $ecx = COPY %325:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %324:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %324
  UpdateRegP: SU(2) $edx = COPY %324:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %322:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=11
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %322
  UpdateRegP: SU(1) $esi = COPY %322:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.32
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.94 ***
SU(0):   $rdi = MOV32ri64 @.str.32
SU(1):   $esi = COPY %322:gr32
SU(2):   $edx = COPY %324:gr32
SU(3):   $ecx = COPY %325:gr32
SU(4):   $r8d = COPY %326:gr32
SU(5):   $r9d = COPY %327:gr32
SU(6):   $xmm0 = COPY %328:fr64
SU(7):   $xmm1 = COPY %329:fr64

********** MI Scheduling **********
main:%bb.94 if.end332
  From: %322:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
    To: ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=12
Live In: 
Live Out: %464 %329 %328 %327 %326 %325 %324 %322 
Live Thru: 
  LiveReg: %464
  LiveReg: %329
  LiveReg: %328
  LiveReg: %327
  LiveReg: %326
  LiveReg: %325
  LiveReg: %324
  LiveReg: %322
Top Pressure:

Bottom Pressure:
FR32=2
FR32X=2
GR16=12
Excess PSets: 
SU(0):   %322:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %323:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%323
    SU(3): Data Latency=4 Reg=%323
    SU(2): Data Latency=4 Reg=%323
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %324:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx334)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%323
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %325:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx336)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%323
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %326:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx338)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%323
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %327:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %328:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %329:fr64 = MOVSDrm_alt %stack.5.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   undef %464.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.20.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 4 3 2 0 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) undef %464.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.20.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 6 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %329:fr64 = MOVSDrm_alt %stack.5.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 6 5 4 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %328:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
Bottom Pressure:
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 5 4 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %327:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
Bottom Pressure:
GR16=8
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 4 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %326:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx338)
Bottom Pressure:
GR16=8
  LiveReg: %323
  UpdateRegP: SU(2) %324:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx334)
              to GR16 -2
  UpdateRegP: SU(3) %325:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx336)
              to GR16 -2
  UpdateRegP: SU(4) %326:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx338)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %325:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx336)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %324:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx334)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %323:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:
GR16=2
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %322:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
Bottom Pressure:

  Ready @3c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.94 ***
SU(0):   %322:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
SU(1):   %323:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(2):   %324:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx334)
SU(3):   %325:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx336)
SU(4):   %326:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx338)
SU(5):   %327:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
SU(6):   %328:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(7):   %329:fr64 = MOVSDrm_alt %stack.5.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
SU(8):   undef %464.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.20.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.95 if.then340
  From: %334:fr64 = COPY killed $xmm0
    To: JCC_1 %bb.97, 5, implicit $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %334:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%334
    SU(1): Data Latency=0 Reg=%334
  Single Issue       : false;
SU(1):   MOVSDmr %stack.23.tmax, 1, $noreg, 0, $noreg, %334:fr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%334
  Single Issue       : false;
SU(2):   %335:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%335
  Single Issue       : false;
SU(3):   UCOMISDrr %334:fr64, %335:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%335
    SU(0): Data Latency=0 Reg=%334
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.97, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) UCOMISDrr %334:fr64, %335:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %335:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.23.tmax, 1, $noreg, 0, $noreg, %334:fr64 :: (store 8 into %ir.tmax)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %334:fr64 = COPY killed $xmm0
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.95 ***
SU(0):   %334:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.23.tmax, 1, $noreg, 0, $noreg, %334:fr64 :: (store 8 into %ir.tmax)
SU(2):   %335:fr64 = FsFLD0SD
SU(3):   UCOMISDrr %334:fr64, %335:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.96 if.then344
  From: %336:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %336:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%336
  Single Issue       : false;
SU(1):   MOV64mr %stack.23.tmax, 1, $noreg, 0, $noreg, %336:gr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%336
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.23.tmax, 1, $noreg, 0, $noreg, %336:gr64 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %336:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.96 ***
SU(0):   %336:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.23.tmax, 1, $noreg, 0, $noreg, %336:gr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.97 if.end345
  From: MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %417:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %417:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.97 ***
SU(0):   MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
SU(1):   %417:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.97 if.end345
  From: $rdi = MOV32ri64 @.str.43
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.43
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.43
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.97 ***
SU(0):   $rdi = MOV32ri64 @.str.43
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.99 for.body350
  From: %345:fr64 = COPY killed $xmm0
    To: JCC_1 %bb.101, 5, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %345:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%345
  Single Issue       : false;
SU(1):   MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %345:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%345
  Single Issue       : false;
SU(2):   CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.101, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %345:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %345:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.99 ***
SU(0):   %345:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %345:fr64 :: (store 8 into %ir.t)
SU(2):   CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.100 if.then354
  From: $rdi = MOV32ri64 @.str.44
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %358:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %360:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %360:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %358:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.45
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.44
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.100 ***
SU(0):   $rdi = MOV32ri64 @.str.44
SU(1):   $rsi = MOV32ri64 @.str.45
SU(2):   $xmm0 = COPY %358:fr64
SU(3):   $xmm1 = COPY %360:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.100 if.then354
  From: %358:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %358:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=0 Reg=%358
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %358:fr64 = SUBSDrm %358:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Predecessors:
    SU(0): Data Latency=0 Reg=%358
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%358
    SU(2): Data Latency=4 Reg=%358
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %358:fr64 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%358
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %360:fr64 = COPY %358:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%358
  Successors:
    SU(4): Data Latency=0 Reg=%360
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %360:fr64 = MULSDrr %360:fr64(tied-def 0), %417:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%360
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%360
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %360:fr64 = DIVSDrm %360:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%360
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %360:fr64 = DIVSDrm %360:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %360:fr64 = MULSDrr %360:fr64(tied-def 0), %417:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %360:fr64 = COPY %358:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %358:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %358:fr64 = SUBSDrm %358:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %358:fr64 = COPY killed $xmm0
  Ready @8c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.100 ***
SU(0):   %358:fr64 = COPY killed $xmm0
SU(1):   %358:fr64 = SUBSDrm %358:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(2):   MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %358:fr64 :: (store 8 into %ir.t)
SU(3):   %360:fr64 = COPY %358:fr64
SU(4):   %360:fr64 = MULSDrr %360:fr64(tied-def 0), %417:fr64
SU(5):   %360:fr64 = DIVSDrm %360:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.101 if.else360
  From: $rdi = MOV32ri64 @.str.46
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %349:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %350:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %352:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %352:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %350:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %349:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.46
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.101 ***
SU(0):   $rdi = MOV32ri64 @.str.46
SU(1):   $rsi = COPY %349:gr64
SU(2):   $xmm0 = COPY %350:fr64
SU(3):   $xmm1 = COPY %352:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.101 if.else360
  From: %348:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %348:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%348
  Single Issue       : false;
SU(1):   %349:gr64 = MOV64rm %stack.22.t_names, 8, %348:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx362)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%348
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %350:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%350
  Single Issue       : false;
SU(3):   %352:fr64 = COPY %350:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%350
  Successors:
    SU(4): Data Latency=0 Reg=%352
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %352:fr64 = MULSDrr %352:fr64(tied-def 0), %417:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%352
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%352
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %352:fr64 = DIVSDrm %352:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%352
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %352:fr64 = DIVSDrm %352:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %352:fr64 = MULSDrr %352:fr64(tied-def 0), %417:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %352:fr64 = COPY %350:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %350:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %349:gr64 = MOV64rm %stack.22.t_names, 8, %348:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx362)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %348:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.101 ***
SU(0):   %348:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %349:gr64 = MOV64rm %stack.22.t_names, 8, %348:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx362)
SU(2):   %350:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(3):   %352:fr64 = COPY %350:fr64
SU(4):   %352:fr64 = MULSDrr %352:fr64(tied-def 0), %417:fr64
SU(5):   %352:fr64 = DIVSDrm %352:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** INTERVALS **********
DIL [160r,176r:14)[288r,304r:8)[384r,416r:45)[736r,752r:65)[912r,944r:49)[1024r,1056r:48)[1248r,1280r:27)[1416r,1440r:64)[1552r,1568r:63)[1848r,1920r:62)[2032r,2048r:61)[2280r,2320r:60)[2432r,2448r:59)[2792r,2832r:55)[2976r,2992r:58)[3120r,3152r:26)[5792r,5840r:57)[5952r,6016r:44)[6192r,6320r:43)[6512r,6704r:42)[6880r,6976r:41)[7056r,7104r:40)[7168r,7200r:39)[7344r,7488r:38)[7648r,7840r:37)[8016r,8176r:36)[8288r,8432r:35)[8480r,8528r:56)[8624r,8688r:34)[8848r,8976r:33)[9024r,9040r:7)[9088r,9104r:6)[9216r,9264r:32)[9424r,9440r:15)[9552r,9568r:5)[9696r,9712r:1)[9888r,10032r:47)[10160r,10176r:0)[10400r,10592r:31)[11376r,11424r:54)[11552r,11568r:13)[11680r,11840r:53)[11952r,11968r:12)[12096r,12112r:11)[12240r,12384r:52)[12496r,12512r:10)[12784r,12976r:30)[13040r,13056r:4)[13104r,13120r:3)[13280r,13312r:29)[14624r,14656r:25)[14752r,14800r:24)[14880r,14928r:23)[15072r,15104r:22)[15200r,15248r:21)[15328r,15376r:20)[15520r,15552r:19)[15616r,15648r:18)[15744r,15792r:17)[16496r,16816r:46)[16944r,16960r:2)[17232r,17264r:28)[17520r,17536r:16)[17680r,17696r:9)[17872r,17952r:51)[18160r,18240r:50)  0@10160r 1@9696r 2@16944r 3@13104r 4@13040r 5@9552r 6@9088r 7@9024r 8@288r 9@17680r 10@12496r 11@12096r 12@11952r 13@11552r 14@160r 15@9424r 16@17520r 17@15744r 18@15616r 19@15520r 20@15328r 21@15200r 22@15072r 23@14880r 24@14752r 25@14624r 26@3120r 27@1248r 28@17232r 29@13280r 30@12784r 31@10400r 32@9216r 33@8848r 34@8624r 35@8288r 36@8016r 37@7648r 38@7344r 39@7168r 40@7056r 41@6880r 42@6512r 43@6192r 44@5952r 45@384r 46@16496r 47@9888r 48@1024r 49@912r 50@18160r 51@17872r 52@12240r 53@11680r 54@11376r 55@2792r 56@8480r 57@5792r 58@2976r 59@2432r 60@2280r 61@2032r 62@1848r 63@1552r 64@1416r 65@736r
DIH [160r,176r:14)[288r,304r:8)[384r,416r:45)[736r,752r:65)[912r,944r:49)[1024r,1056r:48)[1248r,1280r:27)[1416r,1440r:64)[1552r,1568r:63)[1848r,1920r:62)[2032r,2048r:61)[2280r,2320r:60)[2432r,2448r:59)[2792r,2832r:55)[2976r,2992r:58)[3120r,3152r:26)[5792r,5840r:57)[5952r,6016r:44)[6192r,6320r:43)[6512r,6704r:42)[6880r,6976r:41)[7056r,7104r:40)[7168r,7200r:39)[7344r,7488r:38)[7648r,7840r:37)[8016r,8176r:36)[8288r,8432r:35)[8480r,8528r:56)[8624r,8688r:34)[8848r,8976r:33)[9024r,9040r:7)[9088r,9104r:6)[9216r,9264r:32)[9424r,9440r:15)[9552r,9568r:5)[9696r,9712r:1)[9888r,10032r:47)[10160r,10176r:0)[10400r,10592r:31)[11376r,11424r:54)[11552r,11568r:13)[11680r,11840r:53)[11952r,11968r:12)[12096r,12112r:11)[12240r,12384r:52)[12496r,12512r:10)[12784r,12976r:30)[13040r,13056r:4)[13104r,13120r:3)[13280r,13312r:29)[14624r,14656r:25)[14752r,14800r:24)[14880r,14928r:23)[15072r,15104r:22)[15200r,15248r:21)[15328r,15376r:20)[15520r,15552r:19)[15616r,15648r:18)[15744r,15792r:17)[16496r,16816r:46)[16944r,16960r:2)[17232r,17264r:28)[17520r,17536r:16)[17680r,17696r:9)[17872r,17952r:51)[18160r,18240r:50)  0@10160r 1@9696r 2@16944r 3@13104r 4@13040r 5@9552r 6@9088r 7@9024r 8@288r 9@17680r 10@12496r 11@12096r 12@11952r 13@11552r 14@160r 15@9424r 16@17520r 17@15744r 18@15616r 19@15520r 20@15328r 21@15200r 22@15072r 23@14880r 24@14752r 25@14624r 26@3120r 27@1248r 28@17232r 29@13280r 30@12784r 31@10400r 32@9216r 33@8848r 34@8624r 35@8288r 36@8016r 37@7648r 38@7344r 39@7168r 40@7056r 41@6880r 42@6512r 43@6192r 44@5952r 45@384r 46@16496r 47@9888r 48@1024r 49@912r 50@18160r 51@17872r 52@12240r 53@11680r 54@11376r 55@2792r 56@8480r 57@5792r 58@2976r 59@2432r 60@2280r 61@2032r 62@1848r 63@1552r 64@1416r 65@736r
HDI [160r,176r:14)[288r,304r:8)[384r,416r:45)[736r,752r:65)[912r,944r:49)[1024r,1056r:48)[1248r,1280r:27)[1416r,1440r:64)[1552r,1568r:63)[1848r,1920r:62)[2032r,2048r:61)[2280r,2320r:60)[2432r,2448r:59)[2792r,2832r:55)[2976r,2992r:58)[3120r,3152r:26)[5792r,5840r:57)[5952r,6016r:44)[6192r,6320r:43)[6512r,6704r:42)[6880r,6976r:41)[7056r,7104r:40)[7168r,7200r:39)[7344r,7488r:38)[7648r,7840r:37)[8016r,8176r:36)[8288r,8432r:35)[8480r,8528r:56)[8624r,8688r:34)[8848r,8976r:33)[9024r,9040r:7)[9088r,9104r:6)[9216r,9264r:32)[9424r,9440r:15)[9552r,9568r:5)[9696r,9712r:1)[9888r,10032r:47)[10160r,10176r:0)[10400r,10592r:31)[11376r,11424r:54)[11552r,11568r:13)[11680r,11840r:53)[11952r,11968r:12)[12096r,12112r:11)[12240r,12384r:52)[12496r,12512r:10)[12784r,12976r:30)[13040r,13056r:4)[13104r,13120r:3)[13280r,13312r:29)[14624r,14656r:25)[14752r,14800r:24)[14880r,14928r:23)[15072r,15104r:22)[15200r,15248r:21)[15328r,15376r:20)[15520r,15552r:19)[15616r,15648r:18)[15744r,15792r:17)[16496r,16816r:46)[16944r,16960r:2)[17232r,17264r:28)[17520r,17536r:16)[17680r,17696r:9)[17872r,17952r:51)[18160r,18240r:50)  0@10160r 1@9696r 2@16944r 3@13104r 4@13040r 5@9552r 6@9088r 7@9024r 8@288r 9@17680r 10@12496r 11@12096r 12@11952r 13@11552r 14@160r 15@9424r 16@17520r 17@15744r 18@15616r 19@15520r 20@15328r 21@15200r 22@15072r 23@14880r 24@14752r 25@14624r 26@3120r 27@1248r 28@17232r 29@13280r 30@12784r 31@10400r 32@9216r 33@8848r 34@8624r 35@8288r 36@8016r 37@7648r 38@7344r 39@7168r 40@7056r 41@6880r 42@6512r 43@6192r 44@5952r 45@384r 46@16496r 47@9888r 48@1024r 49@912r 50@18160r 51@17872r 52@12240r 53@11680r 54@11376r 55@2792r 56@8480r 57@5792r 58@2976r 59@2432r 60@2280r 61@2032r 62@1848r 63@1552r 64@1416r 65@736r
%5 [448r,480r:0)  0@448r weight:0.000000e+00
%6 [704r,736r:0)  0@704r weight:0.000000e+00
%14 [1088r,1120r:0)  0@1088r weight:0.000000e+00
%23 [3424r,3440r:0)  0@3424r weight:0.000000e+00
%28 [1312r,1416r:0)  0@1312r weight:0.000000e+00
%31 [1472r,1488r:0)  0@1472r weight:0.000000e+00
%32 [1520r,1552r:0)  0@1520r weight:0.000000e+00
%33 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%35 [1680r,1848r:0)  0@1680r weight:0.000000e+00
%36 [1696r,1744r:0)  0@1696r weight:0.000000e+00
%37 [1712r,1856r:0)  0@1712r weight:0.000000e+00
%38 [1728r,1872r:0)  0@1728r weight:0.000000e+00
%39 [1744r,1888r:0)  0@1744r weight:0.000000e+00
%43 [1952r,1968r:0)  0@1952r weight:0.000000e+00
%44 [2000r,2032r:0)  0@2000r weight:0.000000e+00
%45 [2080r,2096r:0)  0@2080r weight:0.000000e+00
%47 [2160r,2280r:0)  0@2160r weight:0.000000e+00
%51 [2240r,2288r:0)  0@2240r weight:0.000000e+00
%52 [2352r,2368r:0)  0@2352r weight:0.000000e+00
%53 [2400r,2432r:0)  0@2400r weight:0.000000e+00
%54 [2480r,2496r:0)  0@2480r weight:0.000000e+00
%58 [2944r,2976r:0)  0@2944r weight:0.000000e+00
%60 [3488r,3520r:0)  0@3488r weight:0.000000e+00
%61 [3504r,3520r:0)  0@3504r weight:0.000000e+00
%63 [3584r,3616r:0)  0@3584r weight:0.000000e+00
%64 [3600r,3616r:0)  0@3600r weight:0.000000e+00
%66 [3728r,3744r:0)  0@3728r weight:0.000000e+00
%71 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%76 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%81 [4304r,4320r:0)  0@4304r weight:0.000000e+00
%86 [4496r,4512r:0)  0@4496r weight:0.000000e+00
%91 [4688r,4704r:0)  0@4688r weight:0.000000e+00
%96 [4880r,4896r:0)  0@4880r weight:0.000000e+00
%101 [5104r,5120r:0)  0@5104r weight:0.000000e+00
%102 [5152r,5168r:0)  0@5152r weight:0.000000e+00
%103 [5184r,5200r:0)  0@5184r weight:0.000000e+00
%110 [5552r,5568r:0)  0@5552r weight:0.000000e+00
%111 [5584r,5600r:0)  0@5584r weight:0.000000e+00
%112 [5616r,5632r:0)  0@5616r weight:0.000000e+00
%113 [5408r,5424r:0)  0@5408r weight:0.000000e+00
%114 [5440r,5456r:0)  0@5440r weight:0.000000e+00
%115 [5472r,5488r:0)  0@5472r weight:0.000000e+00
%116 [5696r,5712r:0)  0@5696r weight:0.000000e+00
%117 [5744r,8480r:0)  0@5744r weight:0.000000e+00
%118 [5760r,8496r:0)  0@5760r weight:0.000000e+00
%119 [5776r,8512r:0)  0@5776r weight:0.000000e+00
%120 [5872r,5968r:0)  0@5872r weight:0.000000e+00
%121 [5888r,5984r:0)  0@5888r weight:0.000000e+00
%122 [5904r,6000r:0)  0@5904r weight:0.000000e+00
%124 [6048r,6208r:0)  0@6048r weight:0.000000e+00
%125 [6064r,6224r:0)  0@6064r weight:0.000000e+00
%126 [6080r,6240r:0)  0@6080r weight:0.000000e+00
%127 [6096r,6128r:0)  0@6096r weight:0.000000e+00
%128 [6112r,6256r:0)  0@6112r weight:0.000000e+00
%129 [6128r,6272r:0)  0@6128r weight:0.000000e+00
%133 [6352r,6528r:0)  0@6352r weight:0.000000e+00
%134 [6368r,6544r:0)  0@6368r weight:0.000000e+00
%135 [6384r,6560r:0)  0@6384r weight:0.000000e+00
%136 [6400r,6448r:0)  0@6400r weight:0.000000e+00
%141 [6480r,7712r:0)  0@6480r weight:0.000000e+00
%142 [6496r,7728r:0)  0@6496r weight:0.000000e+00
%143 [6736r,6784r:0)  0@6736r weight:0.000000e+00
%144 [6752r,6896r:0)  0@6752r weight:0.000000e+00
%145 [6768r,6912r:0)  0@6768r weight:0.000000e+00
%146 [6784r,6928r:0)  0@6784r weight:0.000000e+00
%147 [6800r,6944r:0)  0@6800r weight:0.000000e+00
%152 [7008r,7072r:0)  0@7008r weight:0.000000e+00
%157 [7232r,7392r:0)  0@7232r weight:0.000000e+00
%158 [7248r,7408r:0)  0@7248r weight:0.000000e+00
%159 [7264r,7424r:0)  0@7264r weight:0.000000e+00
%162 [7312r,12592B:0)  0@7312r weight:0.000000e+00
%164 [7520r,7664r:0)  0@7520r weight:0.000000e+00
%165 [7536r,7680r:0)  0@7536r weight:0.000000e+00
%166 [7552r,7696r:0)  0@7552r weight:0.000000e+00
%167 [7568r,7616r:0)  0@7568r weight:0.000000e+00
%172 [7872r,7888r:0)  0@7872r weight:0.000000e+00
%173 [7904r,7920r:0)  0@7904r weight:0.000000e+00
%174 [7936r,8096r:0)  0@7936r weight:0.000000e+00
%178 [8000r,8080r:0)  0@8000r weight:0.000000e+00
%179 [8208r,8336r:0)  0@8208r weight:0.000000e+00
%180 [8224r,8352r:0)  0@8224r weight:0.000000e+00
%181 [8240r,8368r:0)  0@8240r weight:0.000000e+00
%184 [8560r,8640r:0)  0@8560r weight:0.000000e+00
%185 [8576r,8656r:0)  0@8576r weight:0.000000e+00
%186 [8592r,8672r:0)  0@8592r weight:0.000000e+00
%187 [8720r,8864r:0)  0@8720r weight:0.000000e+00
%188 [8736r,8880r:0)  0@8736r weight:0.000000e+00
%189 [8752r,8896r:0)  0@8752r weight:0.000000e+00
%190 [8768r,8800r:0)  0@8768r weight:0.000000e+00
%191 [8784r,8912r:0)  0@8784r weight:0.000000e+00
%192 [8800r,8928r:0)  0@8800r weight:0.000000e+00
%195 [9136r,9232r:0)  0@9136r weight:0.000000e+00
%203 [9760r,9936r:0)  0@9760r weight:0.000000e+00
%204 [9776r,9952r:0)  0@9776r weight:0.000000e+00
%205 [9792r,9968r:0)  0@9792r weight:0.000000e+00
%213 [10224r,10416r:0)  0@10224r weight:0.000000e+00
%214 [10240r,10432r:0)  0@10240r weight:0.000000e+00
%215 [10256r,10448r:0)  0@10256r weight:0.000000e+00
%216 [10272r,10320r:0)  0@10272r weight:0.000000e+00
%222 [10368r,10464r:0)  0@10368r weight:0.000000e+00
%223 [10384r,10480r:0)  0@10384r weight:0.000000e+00
%224 [10624r,10640r:0)  0@10624r weight:0.000000e+00
%225 [10656r,10672r:0)  0@10656r weight:0.000000e+00
%226 [10832r,10848r:0)  0@10832r weight:0.000000e+00
%228 [12608r,12800r:0)  0@12608r weight:0.000000e+00
%229 [12624r,12816r:0)  0@12624r weight:0.000000e+00
%230 [12640r,12832r:0)  0@12640r weight:0.000000e+00
%231 [12656r,12704r:0)  0@12656r weight:0.000000e+00
%237 [12752r,12848r:0)  0@12752r weight:0.000000e+00
%238 [12768r,12864r:0)  0@12768r weight:0.000000e+00
%240 [13152r,13168r:0)  0@13152r weight:0.000000e+00
%245 [13344r,13360r:0)  0@13344r weight:0.000000e+00
%254 [15680r,15760r:0)  0@15680r weight:0.000000e+00
%272 [14272r,14288r:0)  0@14272r weight:0.000000e+00
%273 [14144r,14160r:0)  0@14144r weight:0.000000e+00
%274 [14016r,14032r:0)  0@14016r weight:0.000000e+00
%275 [13888r,13904r:0)  0@13888r weight:0.000000e+00
%276 [13760r,13776r:0)  0@13760r weight:0.000000e+00
%277 [13632r,13648r:0)  0@13632r weight:0.000000e+00
%278 [13504r,13520r:0)  0@13504r weight:0.000000e+00
%280 [14336r,14432r:0)  0@14336r weight:0.000000e+00
%283 [14320r,14368r:2)[14368r,14400r:0)[14400r,14432r:1)[14432r,14480r:3)  0@14368r 1@14400r 2@14320r 3@14432r weight:0.000000e+00
%286 [14464r,14480r:0)  0@14464r weight:0.000000e+00
%291 [15136r,15216r:0)  0@15136r weight:0.000000e+00
%295 [15280r,15344r:0)  0@15280r weight:0.000000e+00
%302 [14688r,14768r:0)  0@14688r weight:0.000000e+00
%306 [14832r,14896r:0)  0@14832r weight:0.000000e+00
%309 [15840r,15920r:0)  0@15840r weight:0.000000e+00
%310 [15856r,15904r:0)  0@15856r weight:0.000000e+00
%312 [15872r,15904r:0)[15904r,15952r:1)  0@15872r 1@15904r weight:0.000000e+00
%314 [15920r,15952r:0)[15952r,15968r:1)  0@15920r 1@15952r weight:0.000000e+00
%315 [15984r,16016r:0)  0@15984r weight:0.000000e+00
%316 [16000r,16016r:0)  0@16000r weight:0.000000e+00
%319 [16096r,16128r:2)[16128r,16160r:0)[16160r,16192r:1)[16192r,16224r:3)[16224r,16240r:4)  0@16128r 1@16160r 2@16096r 3@16192r 4@16224r weight:0.000000e+00
%322 [16320r,16512r:0)  0@16320r weight:0.000000e+00
%323 [16336r,16384r:0)  0@16336r weight:0.000000e+00
%324 [16352r,16528r:0)  0@16352r weight:0.000000e+00
%325 [16368r,16544r:0)  0@16368r weight:0.000000e+00
%326 [16384r,16560r:0)  0@16384r weight:0.000000e+00
%327 [16400r,16576r:0)  0@16400r weight:0.000000e+00
%328 [16416r,16592r:0)  0@16416r weight:0.000000e+00
%329 [16432r,16608r:0)  0@16432r weight:0.000000e+00
%334 [16992r,17040r:0)  0@16992r weight:0.000000e+00
%335 [17024r,17040r:0)  0@17024r weight:0.000000e+00
%336 [17120r,17136r:0)  0@17120r weight:0.000000e+00
%344 [17488r,17520r:0)  0@17488r weight:0.000000e+00
%345 [17568r,17584r:0)  0@17568r weight:0.000000e+00
%348 [18032r,18048r:0)  0@18032r weight:0.000000e+00
%349 [18048r,18176r:0)  0@18048r weight:0.000000e+00
%350 [18064r,18192r:0)  0@18064r weight:0.000000e+00
%352 [18080r,18096r:2)[18096r,18128r:0)[18128r,18208r:1)  0@18096r 1@18128r 2@18080r weight:0.000000e+00
%358 [17728r,17760r:0)[17760r,17904r:1)  0@17728r 1@17760r weight:0.000000e+00
%360 [17792r,17808r:2)[17808r,17840r:0)[17840r,17920r:1)  0@17808r 1@17840r 2@17792r weight:0.000000e+00
%367 [10976r,10992r:0)  0@10976r weight:0.000000e+00
%369 [11056r,11264r:0)  0@11056r weight:0.000000e+00
%372 [11104r,11120r:0)[11120r,11216r:1)  0@11104r 1@11120r weight:0.000000e+00
%377 [11088r,11168r:2)[11168r,11216r:0)[11216r,11248r:1)  0@11168r 1@11216r 2@11088r weight:0.000000e+00
%379 [11248r,11264r:0)  0@11248r weight:0.000000e+00
%381 [11328r,11392r:0)  0@11328r weight:0.000000e+00
%387 [11616r,11760r:0)  0@11616r weight:0.000000e+00
%395 [10784r,12592B:0)  0@10784r weight:0.000000e+00
%398 [12160r,12288r:0)  0@12160r weight:0.000000e+00
%399 [12176r,12304r:0)  0@12176r weight:0.000000e+00
%400 [12192r,12320r:0)  0@12192r weight:0.000000e+00
%408 [9392r,9424r:0)  0@9392r weight:0.000000e+00
%409 [2688r,2792r:0)  0@2688r weight:0.000000e+00
%410 [2704r,2720r:0)  0@2704r weight:0.000000e+00
%411 [2720r,2800r:0)  0@2720r weight:0.000000e+00
%415 [2864r,2880r:0)  0@2864r weight:0.000000e+00
%416 [128r,160r:0)  0@128r weight:0.000000e+00
%417 [17328r,18304B:0)  0@17328r weight:0.000000e+00
%420 [6144r,6304r:0)  0@6144r weight:0.000000e+00
%422 [6448r,6624r:0)  0@6448r weight:0.000000e+00
%424 [6432r,6656r:0)  0@6432r weight:0.000000e+00
%426 [6416r,6688r:0)  0@6416r weight:0.000000e+00
%428 [7280r,7456r:0)  0@7280r weight:0.000000e+00
%430 [7616r,7760r:0)  0@7616r weight:0.000000e+00
%432 [7600r,7792r:0)  0@7600r weight:0.000000e+00
%434 [7584r,7824r:0)  0@7584r weight:0.000000e+00
%436 [7968r,8128r:0)  0@7968r weight:0.000000e+00
%438 [7952r,8160r:0)  0@7952r weight:0.000000e+00
%440 [8256r,8400r:0)  0@8256r weight:0.000000e+00
%442 [8816r,8960r:0)  0@8816r weight:0.000000e+00
%444 [9808r,10000r:0)  0@9808r weight:0.000000e+00
%446 [10320r,10512r:0)  0@10320r weight:0.000000e+00
%448 [10304r,10544r:0)  0@10304r weight:0.000000e+00
%450 [10288r,10576r:0)  0@10288r weight:0.000000e+00
%452 [11648r,11792r:0)  0@11648r weight:0.000000e+00
%454 [11632r,11824r:0)  0@11632r weight:0.000000e+00
%456 [12208r,12352r:0)  0@12208r weight:0.000000e+00
%458 [12704r,12896r:0)  0@12704r weight:0.000000e+00
%460 [12688r,12928r:0)  0@12688r weight:0.000000e+00
%462 [12672r,12960r:0)  0@12672r weight:0.000000e+00
%464 [16448r,16784r:0)  0@16448r weight:0.000000e+00
%465 [3360r,3424r:0)  0@3360r weight:0.000000e+00
RegMasks: 176r 304r 416r 752r 944r 1056r 1280r 1440r 1568r 1920r 2048r 2320r 2448r 2832r 2992r 3152r 5840r 6016r 6320r 6704r 6976r 7104r 7200r 7488r 7840r 8176r 8432r 8528r 8688r 8976r 9040r 9104r 9264r 9440r 9568r 9712r 10032r 10176r 10592r 11424r 11568r 11840r 11968r 12112r 12384r 12512r 12976r 13056r 13120r 13312r 14656r 14800r 14928r 15104r 15248r 15376r 15552r 15648r 15792r 16816r 16960r 17264r 17536r 17696r 17952r 18240r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=32, align=16, at location [SP+8]
  fi#7: size=32, align=16, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=8, align=8, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=80, align=16, at location [SP+8]
  fi#23: size=8, align=8, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
  fi#25: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#1: 5.800000e+01, align=8
  cp#2: 0x3EB0C6F7A0B5ED8D, align=8
  cp#3: 1.000000e+02, align=8

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
32B	  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

48B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

64B	  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
80B	  JCC_1 %bb.3, 15, implicit killed $eflags
96B	  JMP_1 %bb.2

112B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

128B	  %416:gr32 = MOV32rm %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $edi = COPY %416:gr32
176B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
224B	  JMP_1 %bb.1

240B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  $edi = MOV32r0 implicit-def dead $eflags
304B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
384B	  $rdi = MOV32ri64 @.str
400B	  $rsi = MOV32ri64 @.str.1
416B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
448B	  %5:gr64 = COPY killed $rax
464B	  MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.fp)
480B	  TEST64rr %5:gr64, %5:gr64, implicit-def $eflags
496B	  JCC_1 %bb.5, 4, implicit killed $eflags
512B	  JMP_1 %bb.4

528B	bb.4.if.then:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

544B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
560B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 0, $noreg, @.str.2 :: (store 8 into %ir.arrayidx1, align 16)
576B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 8, $noreg, @.str.3 :: (store 8 into %ir.arrayidx2)
592B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 16, $noreg, @.str.4 :: (store 8 into %ir.arrayidx3, align 16)
608B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 24, $noreg, @.str.5 :: (store 8 into %ir.arrayidx4)
624B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 32, $noreg, @.str.6 :: (store 8 into %ir.arrayidx5, align 16)
640B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx6, align 16)
656B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx7)
672B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx8, align 16)
688B	  MOV64mi32 %stack.22.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx9)
704B	  %6:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  $rdi = COPY %6:gr64
752B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
768B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  JMP_1 %bb.6

800B	bb.5.if.else:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

816B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

832B	bb.6.if.end:
	; predecessors: %bb.5, %bb.4
	  successors: %bb.7(0x50000000), %bb.17(0x30000000); %bb.7(62.50%), %bb.17(37.50%)

848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
912B	  $rdi = MOV32ri64 @.str.11
928B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
944B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
976B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1024B	  $rdi = MOV32ri64 @.str.12
1040B	  $rsi = MOV32ri64 @.str.1
1056B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
1072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1088B	  %14:gr64 = COPY killed $rax
1104B	  MOV64mr %stack.24.fp, 1, $noreg, 0, $noreg, %14:gr64 :: (store 8 into %ir.fp)
1120B	  TEST64rr %14:gr64, %14:gr64, implicit-def $eflags
1136B	  JCC_1 %bb.17, 4, implicit killed $eflags
1152B	  JMP_1 %bb.7

1168B	bb.7.if.then14:
	; predecessors: %bb.6
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1248B	  $rdi = MOV32ri64 @.str.13
1264B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1280B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1312B	  %28:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1392B	  $rsi = MOV32ri64 @.str.14
1408B	  $rdx = MOV32ri64 @lt
1416B	  $rdi = COPY %28:gr64
1424B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1440B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1472B	  %31:gr32 = COPY killed $eax
1488B	  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.result)

1504B	bb.8.while.cond:
	; predecessors: %bb.7, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

1520B	  %32:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1552B	  $rdi = COPY %32:gr64
1568B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1600B	  %33:gr32 = COPY killed $eax
1616B	  CMP32ri8 %33:gr32, 10, implicit-def $eflags
1632B	  JCC_1 %bb.8, 5, implicit killed $eflags
1648B	  JMP_1 %bb.9

1664B	bb.9.while.end:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1680B	  %35:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
1696B	  %36:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
1712B	  %37:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nx, $noreg
1728B	  %38:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @ny, $noreg
1744B	  %39:gr64 = LEA64r $noreg, 4, %36:gr64_nosp, @nz, $noreg
1760B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1840B	  $rsi = MOV32ri64 @.str.15
1848B	  $rdi = COPY %35:gr64
1856B	  $rdx = COPY %37:gr64
1872B	  $rcx = COPY %38:gr64
1888B	  $r8 = COPY %39:gr64
1904B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1920B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
1936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1952B	  %43:gr32 = COPY killed $eax
1968B	  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %43:gr32 :: (store 4 into %ir.result)

1984B	bb.10.while.cond25:
	; predecessors: %bb.9, %bb.10
	  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

2000B	  %44:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2032B	  $rdi = COPY %44:gr64
2048B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2064B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2080B	  %45:gr32 = COPY killed $eax
2096B	  CMP32ri8 %45:gr32, 10, implicit-def $eflags
2112B	  JCC_1 %bb.10, 5, implicit killed $eflags
2128B	  JMP_1 %bb.11

2144B	bb.11.while.end29:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2160B	  %47:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2240B	  %51:gr64 = LEA64r %stack.16.nit, 1, $noreg, 0, $noreg
2272B	  $rsi = MOV32ri64 @.str.16
2280B	  $rdi = COPY %47:gr64
2288B	  $rdx = COPY %51:gr64
2304B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2320B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2336B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2352B	  %52:gr32 = COPY killed $eax
2368B	  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %52:gr32 :: (store 4 into %ir.result)

2384B	bb.12.while.cond31:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

2400B	  %53:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2432B	  $rdi = COPY %53:gr64
2448B	  CALL64pcrel32 @fgetc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2464B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2480B	  %54:gr32 = COPY killed $eax
2496B	  CMP32ri8 %54:gr32, 10, implicit-def $eflags
2512B	  JCC_1 %bb.12, 5, implicit killed $eflags
2528B	  JMP_1 %bb.13

2544B	bb.13.while.end35:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2560B	  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

2608B	bb.14.for.cond36:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

2624B	  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 7, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
2640B	  JCC_1 %bb.16, 15, implicit killed $eflags
2656B	  JMP_1 %bb.15

2672B	bb.15.for.body38:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2688B	  %409:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2704B	  %410:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2720B	  %411:gr64 = LEA64r $noreg, 4, %410:gr64_nosp, @debug_vec, $noreg
2736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2784B	  $rsi = MOV32ri64 @.str.16
2792B	  $rdi = COPY %409:gr64
2800B	  $rdx = COPY %411:gr64
2816B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2832B	  CALL64pcrel32 @fscanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2864B	  %415:gr32 = COPY killed $eax
2880B	  MOV32mr %stack.25.result, 1, $noreg, 0, $noreg, %415:gr32 :: (store 4 into %ir.result)
2896B	  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
2912B	  JMP_1 %bb.14

2928B	bb.16.for.end44:
	; predecessors: %bb.14
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

2944B	  %58:gr64 = MOV64rm %stack.24.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
2960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2976B	  $rdi = COPY %58:gr64
2992B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3024B	  JMP_1 %bb.20

3040B	bb.17.if.else46:
	; predecessors: %bb.6
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3056B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3120B	  $rdi = MOV32ri64 @.str.17
3136B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3152B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3168B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3184B	  MOV32mi $rip, 1, $noreg, @lt, $noreg, 8 :: (store 4 into @lt)
3200B	  MOV32mi %stack.16.nit, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.nit)
3216B	  MOV32mi $rip, 1, $noreg, @nx + 32, $noreg, 256 :: (store 4 into %ir.arrayidx49, align 16)
3232B	  MOV32mi $rip, 1, $noreg, @ny + 32, $noreg, 256 :: (store 4 into %ir.arrayidx51, align 16)
3248B	  MOV32mi $rip, 1, $noreg, @nz + 32, $noreg, 256 :: (store 4 into %ir.arrayidx53, align 16)
3264B	  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

3280B	bb.18.for.cond54:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

3296B	  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 7, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
3312B	  JCC_1 %bb.20, 15, implicit killed $eflags
3328B	  JMP_1 %bb.19

3344B	bb.19.for.body56:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3360B	  %465:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3392B	  MOV32mi $noreg, 4, %465:gr64_nosp, @debug_vec, $noreg, 0 :: (store 4 into %ir.arrayidx58)
3424B	  %23:gr32 = LEA64_32r %465:gr64_nosp, 1, $noreg, 1, $noreg
3440B	  MOV32mr %stack.21.i, 1, $noreg, 0, $noreg, %23:gr32 :: (store 4 into %ir.i)
3456B	  JMP_1 %bb.18

3472B	bb.20.if.end62:
	; predecessors: %bb.18, %bb.16
	  successors: %bb.22(0x40000000), %bb.21(0x40000000); %bb.22(50.00%), %bb.21(50.00%)

3488B	  %60:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
3504B	  %61:gr32 = MOV32rm $noreg, 4, %60:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx64)
3520B	  CMP32rm %61:gr32, $noreg, 4, %60:gr64_nosp, @ny, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx66)
3536B	  JCC_1 %bb.22, 5, implicit killed $eflags
3552B	  JMP_1 %bb.21

3568B	bb.21.lor.lhs.false:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.23(0x40000000); %bb.22(50.00%), %bb.23(50.00%)

3584B	  %63:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
3600B	  %64:gr32 = MOV32rm $noreg, 4, %63:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx69)
3616B	  CMP32rm %64:gr32, $noreg, 4, %63:gr64_nosp, @nz, $noreg, implicit-def $eflags :: (load 4 from %ir.arrayidx71)
3632B	  JCC_1 %bb.23, 4, implicit killed $eflags
3648B	  JMP_1 %bb.22

3664B	bb.22.if.then73:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

3680B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 85 :: (store 1 into @Class)
3696B	  JMP_1 %bb.45

3712B	bb.23.if.else74:
	; predecessors: %bb.21
	  successors: %bb.24(0x40000000), %bb.26(0x40000000); %bb.24(50.00%), %bb.26(50.00%)

3728B	  %66:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
3744B	  CMP32mi8 $noreg, 4, %66:gr64_nosp, @nx, $noreg, 32, implicit-def $eflags :: (load 4 from %ir.arrayidx76)
3760B	  JCC_1 %bb.26, 5, implicit killed $eflags
3776B	  JMP_1 %bb.24

3792B	bb.24.land.lhs.true:
	; predecessors: %bb.23
	  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

3808B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
3824B	  JCC_1 %bb.26, 5, implicit killed $eflags
3840B	  JMP_1 %bb.25

3856B	bb.25.if.then79:
	; predecessors: %bb.24
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

3872B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 83 :: (store 1 into @Class)
3888B	  JMP_1 %bb.45

3904B	bb.26.if.else80:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

3920B	  %71:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
3936B	  CMP32mi $noreg, 4, %71:gr64_nosp, @nx, $noreg, 128, implicit-def $eflags :: (load 4 from %ir.arrayidx82)
3952B	  JCC_1 %bb.29, 5, implicit killed $eflags
3968B	  JMP_1 %bb.27

3984B	bb.27.land.lhs.true84:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

4000B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
4016B	  JCC_1 %bb.29, 5, implicit killed $eflags
4032B	  JMP_1 %bb.28

4048B	bb.28.if.then86:
	; predecessors: %bb.27
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4064B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 87 :: (store 1 into @Class)
4080B	  JMP_1 %bb.45

4096B	bb.29.if.else87:
	; predecessors: %bb.26, %bb.27
	  successors: %bb.30(0x40000000), %bb.32(0x40000000); %bb.30(50.00%), %bb.32(50.00%)

4112B	  %76:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
4128B	  CMP32mi $noreg, 4, %76:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx89)
4144B	  JCC_1 %bb.32, 5, implicit killed $eflags
4160B	  JMP_1 %bb.30

4176B	bb.30.land.lhs.true91:
	; predecessors: %bb.29
	  successors: %bb.31(0x40000000), %bb.32(0x40000000); %bb.31(50.00%), %bb.32(50.00%)

4192B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
4208B	  JCC_1 %bb.32, 5, implicit killed $eflags
4224B	  JMP_1 %bb.31

4240B	bb.31.if.then93:
	; predecessors: %bb.30
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4256B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 65 :: (store 1 into @Class)
4272B	  JMP_1 %bb.45

4288B	bb.32.if.else94:
	; predecessors: %bb.29, %bb.30
	  successors: %bb.33(0x40000000), %bb.35(0x40000000); %bb.33(50.00%), %bb.35(50.00%)

4304B	  %81:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
4320B	  CMP32mi $noreg, 4, %81:gr64_nosp, @nx, $noreg, 256, implicit-def $eflags :: (load 4 from %ir.arrayidx96)
4336B	  JCC_1 %bb.35, 5, implicit killed $eflags
4352B	  JMP_1 %bb.33

4368B	bb.33.land.lhs.true98:
	; predecessors: %bb.32
	  successors: %bb.34(0x40000000), %bb.35(0x40000000); %bb.34(50.00%), %bb.35(50.00%)

4384B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 20, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
4400B	  JCC_1 %bb.35, 5, implicit killed $eflags
4416B	  JMP_1 %bb.34

4432B	bb.34.if.then100:
	; predecessors: %bb.33
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4448B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 66 :: (store 1 into @Class)
4464B	  JMP_1 %bb.45

4480B	bb.35.if.else101:
	; predecessors: %bb.32, %bb.33
	  successors: %bb.36(0x40000000), %bb.38(0x40000000); %bb.36(50.00%), %bb.38(50.00%)

4496B	  %86:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
4512B	  CMP32mi $noreg, 4, %86:gr64_nosp, @nx, $noreg, 512, implicit-def $eflags :: (load 4 from %ir.arrayidx103)
4528B	  JCC_1 %bb.38, 5, implicit killed $eflags
4544B	  JMP_1 %bb.36

4560B	bb.36.land.lhs.true105:
	; predecessors: %bb.35
	  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

4576B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 20, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
4592B	  JCC_1 %bb.38, 5, implicit killed $eflags
4608B	  JMP_1 %bb.37

4624B	bb.37.if.then107:
	; predecessors: %bb.36
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4640B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 67 :: (store 1 into @Class)
4656B	  JMP_1 %bb.45

4672B	bb.38.if.else108:
	; predecessors: %bb.35, %bb.36
	  successors: %bb.39(0x40000000), %bb.41(0x40000000); %bb.39(50.00%), %bb.41(50.00%)

4688B	  %91:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
4704B	  CMP32mi $noreg, 4, %91:gr64_nosp, @nx, $noreg, 1024, implicit-def $eflags :: (load 4 from %ir.arrayidx110)
4720B	  JCC_1 %bb.41, 5, implicit killed $eflags
4736B	  JMP_1 %bb.39

4752B	bb.39.land.lhs.true112:
	; predecessors: %bb.38
	  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

4768B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
4784B	  JCC_1 %bb.41, 5, implicit killed $eflags
4800B	  JMP_1 %bb.40

4816B	bb.40.if.then114:
	; predecessors: %bb.39
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4832B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 68 :: (store 1 into @Class)
4848B	  JMP_1 %bb.45

4864B	bb.41.if.else115:
	; predecessors: %bb.38, %bb.39
	  successors: %bb.42(0x40000000), %bb.44(0x40000000); %bb.42(50.00%), %bb.44(50.00%)

4880B	  %96:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
4896B	  CMP32mi $noreg, 4, %96:gr64_nosp, @nx, $noreg, 2048, implicit-def $eflags :: (load 4 from %ir.arrayidx117)
4912B	  JCC_1 %bb.44, 5, implicit killed $eflags
4928B	  JMP_1 %bb.42

4944B	bb.42.land.lhs.true119:
	; predecessors: %bb.41
	  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

4960B	  CMP32mi8 %stack.16.nit, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
4976B	  JCC_1 %bb.44, 5, implicit killed $eflags
4992B	  JMP_1 %bb.43

5008B	bb.43.if.then121:
	; predecessors: %bb.42
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

5024B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 69 :: (store 1 into @Class)
5040B	  JMP_1 %bb.45

5056B	bb.44.if.else122:
	; predecessors: %bb.41, %bb.42
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

5072B	  MOV8mi $rip, 1, $noreg, @Class, $noreg, 85 :: (store 1 into @Class)

5088B	bb.45.if.end130:
	; predecessors: %bb.44, %bb.43, %bb.40, %bb.37, %bb.34, %bb.31, %bb.28, %bb.25, %bb.22
	  successors: %bb.48(0x40000000), %bb.46(0x40000000); %bb.48(50.00%), %bb.46(50.00%)

5104B	  %101:gr64 = MOV64ri -4610184818551597739
5120B	  MOV64mr %stack.6.a, 1, $noreg, 0, $noreg, %101:gr64 :: (store 8 into %ir.arrayidx1312, align 16)
5136B	  MOV64mi32 %stack.6.a, 1, $noreg, 8, $noreg, 0 :: (store 8 into %ir.arrayidx132)
5152B	  %102:gr64 = MOV64ri 4595172819793696085
5168B	  MOV64mr %stack.6.a, 1, $noreg, 16, $noreg, %102:gr64 :: (store 8 into %ir.arrayidx133, align 16)
5184B	  %103:gr64 = MOV64ri 4590669220166325589
5200B	  MOV64mr %stack.6.a, 1, $noreg, 24, $noreg, %103:gr64 :: (store 8 into %ir.arrayidx134)
5216B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)
5232B	  JCC_1 %bb.48, 4, implicit killed $eflags
5248B	  JMP_1 %bb.46

5264B	bb.46.lor.lhs.false137:
	; predecessors: %bb.45
	  successors: %bb.48(0x40000000), %bb.47(0x40000000); %bb.48(50.00%), %bb.47(50.00%)

5280B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 83, implicit-def $eflags :: (dereferenceable load 1 from @Class)
5296B	  JCC_1 %bb.48, 4, implicit killed $eflags
5312B	  JMP_1 %bb.47

5328B	bb.47.lor.lhs.false141:
	; predecessors: %bb.46
	  successors: %bb.48(0x40000000), %bb.49(0x40000000); %bb.48(50.00%), %bb.49(50.00%)

5344B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 87, implicit-def $eflags :: (dereferenceable load 1 from @Class)
5360B	  JCC_1 %bb.49, 5, implicit killed $eflags
5376B	  JMP_1 %bb.48

5392B	bb.48.if.then145:
	; predecessors: %bb.45, %bb.46, %bb.47
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

5408B	  %113:gr64 = MOV64ri -4622945017495814144
5424B	  MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %113:gr64 :: (store 8 into %ir.arrayidx1463, align 16)
5440B	  %114:gr64 = MOV64ri 4584664420663164928
5456B	  MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %114:gr64 :: (store 8 into %ir.arrayidx147)
5472B	  %115:gr64 = MOV64ri -4643211215818981376
5488B	  MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %115:gr64 :: (store 8 into %ir.arrayidx148, align 16)
5504B	  MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx149)
5520B	  JMP_1 %bb.50

5536B	bb.49.if.else150:
	; predecessors: %bb.47
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

5552B	  %110:gr64 = MOV64ri -4627845993560893801
5568B	  MOV64mr %stack.7.c, 1, $noreg, 0, $noreg, %110:gr64 :: (store 8 into %ir.arrayidx1514, align 16)
5584B	  %111:gr64 = MOV64ri 4584391475231203080
5600B	  MOV64mr %stack.7.c, 1, $noreg, 8, $noreg, %111:gr64 :: (store 8 into %ir.arrayidx152)
5616B	  %112:gr64 = MOV64ri -4642989727312717253
5632B	  MOV64mr %stack.7.c, 1, $noreg, 16, $noreg, %112:gr64 :: (store 8 into %ir.arrayidx153, align 16)
5648B	  MOV64mi32 %stack.7.c, 1, $noreg, 24, $noreg, 0 :: (store 8 into %ir.arrayidx154)

5664B	bb.50.if.end155:
	; predecessors: %bb.49, %bb.48
	  successors: %bb.51(0x80000000); %bb.51(100.00%)

5680B	  MOV32mi $rip, 1, $noreg, @lb, $noreg, 1 :: (store 4 into @lb)
5696B	  %116:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
5712B	  MOV32mr %stack.1.k, 1, $noreg, 0, $noreg, %116:gr32 :: (store 4 into %ir.k)
5728B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5744B	  %117:gr64 = LEA64r %stack.13.n1, 1, $noreg, 0, $noreg
5760B	  %118:gr64 = LEA64r %stack.14.n2, 1, $noreg, 0, $noreg
5776B	  %119:gr64 = LEA64r %stack.15.n3, 1, $noreg, 0, $noreg
5792B	  $rdi = COPY %117:gr64
5808B	  $rsi = COPY %118:gr64
5824B	  $rdx = COPY %119:gr64
5840B	  CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
5856B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5872B	  %120:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
5888B	  %121:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
5904B	  %122:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
5920B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5952B	  $rdi = MOV32ri64 @u
5968B	  $esi = COPY %120:gr32
5984B	  $edx = COPY %121:gr32
6000B	  $ecx = COPY %122:gr32
6016B	  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
6032B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6048B	  %124:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
6064B	  %125:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
6080B	  %126:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
6096B	  %127:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
6112B	  %128:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx157)
6128B	  %129:gr32 = MOV32rm $noreg, 4, %127:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx159)
6144B	  undef %420.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
6160B	  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6192B	  $rdi = MOV32ri64 @v
6208B	  $esi = COPY %124:gr32
6224B	  $edx = COPY %125:gr32
6240B	  $ecx = COPY %126:gr32
6256B	  $r8d = COPY %128:gr32
6272B	  $r9d = COPY %129:gr32
6304B	  PUSH64r %420:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
6320B	  CALL64pcrel32 @zran3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
6336B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6352B	  %133:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
6368B	  %134:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
6384B	  %135:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
6400B	  %136:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
6416B	  undef %426.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx161)
6432B	  undef %424.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx163)
6448B	  undef %422.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %136:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx165)
6464B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6480B	  %141:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
6496B	  %142:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
6512B	  $rdi = MOV32ri64 @v
6528B	  $esi = COPY %133:gr32
6544B	  $edx = COPY %134:gr32
6560B	  $ecx = COPY %135:gr32
6576B	  $r8 = COPY %141:gr64
6592B	  $r9 = COPY %142:gr64
6624B	  PUSH64r %422:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
6656B	  PUSH64r %424:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
6688B	  PUSH64r %426:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
6704B	  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
6720B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6736B	  %143:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
6752B	  %144:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx167)
6768B	  %145:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx169)
6784B	  %146:gr32 = MOV32rm $noreg, 4, %143:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx171)
6800B	  %147:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
6816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
6880B	  $rdi = MOV32ri64 @.str.18
6896B	  $esi = COPY %144:gr32
6912B	  $edx = COPY %145:gr32
6928B	  $ecx = COPY %146:gr32
6944B	  $r8d = COPY %147:gr32
6960B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
6976B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
6992B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7008B	  %152:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
7024B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7056B	  $rdi = MOV32ri64 @.str.19
7072B	  $esi = COPY %152:gr32
7088B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
7104B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
7120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7168B	  $rdi = MOV32ri64 @.str.20
7184B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
7200B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
7216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7232B	  %157:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
7248B	  %158:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
7264B	  %159:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
7280B	  undef %428.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
7296B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7312B	  %162:gr64 = LEA64r %stack.6.a, 1, $noreg, 0, $noreg
7344B	  $rdi = MOV32ri64 @u
7360B	  $rsi = MOV32ri64 @v
7376B	  $rdx = MOV32ri64 @r
7392B	  $ecx = COPY %157:gr32
7408B	  $r8d = COPY %158:gr32
7424B	  $r9d = COPY %159:gr32
7456B	  PUSH64r %428:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
7472B	  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
7488B	  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
7504B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7520B	  %164:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
7536B	  %165:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
7552B	  %166:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
7568B	  %167:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
7584B	  undef %434.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx177)
7600B	  undef %432.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx179)
7616B	  undef %430.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %167:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx181)
7632B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7648B	  $rdi = MOV32ri64 @r
7664B	  $esi = COPY %164:gr32
7680B	  $edx = COPY %165:gr32
7696B	  $ecx = COPY %166:gr32
7712B	  $r8 = COPY %141:gr64
7728B	  $r9 = COPY %142:gr64
7760B	  PUSH64r %430:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
7792B	  PUSH64r %432:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
7824B	  PUSH64r %434:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
7840B	  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
7856B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
7872B	  %172:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
7888B	  MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %172:fr64 :: (store 8 into %ir.old2)
7904B	  %173:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
7920B	  MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %173:fr64 :: (store 8 into %ir.oldu)
7936B	  %174:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
7952B	  undef %438.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
7968B	  undef %436.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
7984B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8000B	  %178:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg
8016B	  $rdi = MOV32ri64 @u
8032B	  $rsi = MOV32ri64 @v
8048B	  $rdx = MOV32ri64 @r
8064B	  $rcx = COPY %162:gr64
8080B	  $r8 = COPY %178:gr64
8096B	  $r9d = COPY %174:gr32
8128B	  PUSH64r %436:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
8160B	  PUSH64r %438:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
8176B	  CALL64pcrel32 @mg3P, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
8192B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8208B	  %179:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
8224B	  %180:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
8240B	  %181:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
8256B	  undef %440.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
8272B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8288B	  $rdi = MOV32ri64 @u
8304B	  $rsi = MOV32ri64 @v
8320B	  $rdx = MOV32ri64 @r
8336B	  $ecx = COPY %179:gr32
8352B	  $r8d = COPY %180:gr32
8368B	  $r9d = COPY %181:gr32
8400B	  PUSH64r %440:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
8416B	  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
8432B	  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
8448B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8480B	  $rdi = COPY %117:gr64
8496B	  $rsi = COPY %118:gr64
8512B	  $rdx = COPY %119:gr64
8528B	  CALL64pcrel32 @setup, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp
8544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8560B	  %184:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
8576B	  %185:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
8592B	  %186:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
8608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8624B	  $rdi = MOV32ri64 @u
8640B	  $esi = COPY %184:gr32
8656B	  $edx = COPY %185:gr32
8672B	  $ecx = COPY %186:gr32
8688B	  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit-def $rsp, implicit-def $ssp
8704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8720B	  %187:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
8736B	  %188:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
8752B	  %189:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
8768B	  %190:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
8784B	  %191:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx186)
8800B	  %192:gr32 = MOV32rm $noreg, 4, %190:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx188)
8816B	  undef %442.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
8832B	  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8848B	  $rdi = MOV32ri64 @v
8864B	  $esi = COPY %187:gr32
8880B	  $edx = COPY %188:gr32
8896B	  $ecx = COPY %189:gr32
8912B	  $r8d = COPY %191:gr32
8928B	  $r9d = COPY %192:gr32
8960B	  PUSH64r %442:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
8976B	  CALL64pcrel32 @zran3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
8992B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9024B	  $edi = MOV32r0 implicit-def dead $eflags
9040B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
9056B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9088B	  $edi = MOV32r0 implicit-def dead $eflags
9104B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
9120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9136B	  %195:fr64 = COPY killed $xmm0
9152B	  MOVSDmr %stack.4.tinit, 1, $noreg, 0, $noreg, %195:fr64 :: (store 8 into %ir.tinit)
9168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9216B	  $rdi = MOV32ri64 @.str.21
9232B	  $xmm0 = COPY %195:fr64
9248B	  $al = MOV8ri 1
9264B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
9280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9296B	  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)

9312B	bb.51.for.cond191:
	; predecessors: %bb.50, %bb.52
	  successors: %bb.52(0x7c000000), %bb.53(0x04000000); %bb.52(96.88%), %bb.53(3.12%)

9328B	  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
9344B	  JCC_1 %bb.53, 15, implicit killed $eflags
9360B	  JMP_1 %bb.52

9376B	bb.52.for.body194:
	; predecessors: %bb.51
	  successors: %bb.51(0x80000000); %bb.51(100.00%)

9392B	  %408:gr32 = MOV32rm %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
9408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9424B	  $edi = COPY %408:gr32
9440B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
9456B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9472B	  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
9488B	  JMP_1 %bb.51

9504B	bb.53.for.end197:
	; predecessors: %bb.51
	  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

9520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9552B	  $edi = MOV32ri 1
9568B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
9584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9600B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
9616B	  JCC_1 %bb.55, 4, implicit killed $eflags
9632B	  JMP_1 %bb.54

9648B	bb.54.if.then198:
	; predecessors: %bb.53
	  successors: %bb.55(0x80000000); %bb.55(100.00%)

9664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9696B	  $edi = MOV32ri 5
9712B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
9728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

9744B	bb.55.if.end199:
	; predecessors: %bb.53, %bb.54
	  successors: %bb.56(0x50000000), %bb.57(0x30000000); %bb.56(62.50%), %bb.57(37.50%)

9760B	  %203:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
9776B	  %204:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
9792B	  %205:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
9808B	  undef %444.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
9824B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
9888B	  $rdi = MOV32ri64 @u
9904B	  $rsi = MOV32ri64 @v
9920B	  $rdx = MOV32ri64 @r
9936B	  $ecx = COPY %203:gr32
9952B	  $r8d = COPY %204:gr32
9968B	  $r9d = COPY %205:gr32
10000B	  PUSH64r %444:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
10016B	  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
10032B	  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
10048B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10064B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
10080B	  JCC_1 %bb.57, 4, implicit killed $eflags
10096B	  JMP_1 %bb.56

10112B	bb.56.if.then202:
	; predecessors: %bb.55
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

10128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10160B	  $edi = MOV32ri 5
10176B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
10192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

10208B	bb.57.if.end203:
	; predecessors: %bb.55, %bb.56
	  successors: %bb.58(0x80000000); %bb.58(100.00%)

10224B	  %213:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
10240B	  %214:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
10256B	  %215:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
10272B	  %216:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
10288B	  undef %450.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx205)
10304B	  undef %448.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx207)
10320B	  undef %446.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %216:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx209)
10336B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10368B	  %222:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
10384B	  %223:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
10400B	  $rdi = MOV32ri64 @r
10416B	  $esi = COPY %213:gr32
10432B	  $edx = COPY %214:gr32
10448B	  $ecx = COPY %215:gr32
10464B	  $r8 = COPY %222:gr64
10480B	  $r9 = COPY %223:gr64
10512B	  PUSH64r %446:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
10544B	  PUSH64r %448:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
10576B	  PUSH64r %450:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
10592B	  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
10608B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
10624B	  %224:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
10640B	  MOVSDmr %stack.10.old2, 1, $noreg, 0, $noreg, %224:fr64 :: (store 8 into %ir.old2)
10656B	  %225:fr64 = MOVSDrm_alt %stack.9.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
10672B	  MOVSDmr %stack.11.oldu, 1, $noreg, 0, $noreg, %225:fr64 :: (store 8 into %ir.oldu)
10688B	  MOV32mi %stack.2.it, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.it)
10784B	  %395:gr64 = LEA64r %stack.7.c, 1, $noreg, 0, $noreg

10816B	bb.58.for.cond210:
	; predecessors: %bb.57, %bb.71
	  successors: %bb.59(0x7c000000), %bb.72(0x04000000); %bb.59(96.88%), %bb.72(3.12%)

10832B	  %226:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
10848B	  CMP32rm %226:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
10864B	  JCC_1 %bb.72, 15, implicit killed $eflags
10880B	  JMP_1 %bb.59

10896B	bb.59.for.body213:
	; predecessors: %bb.58
	  successors: %bb.62(0x40000000), %bb.60(0x40000000); %bb.62(50.00%), %bb.60(50.00%)

10912B	  CMP32mi8 %stack.2.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (dereferenceable load 4 from %ir.it)
10928B	  JCC_1 %bb.62, 4, implicit killed $eflags
10944B	  JMP_1 %bb.60

10960B	bb.60.lor.lhs.false216:
	; predecessors: %bb.59
	  successors: %bb.62(0x40000000), %bb.61(0x40000000); %bb.62(50.00%), %bb.61(50.00%)

10976B	  %367:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
10992B	  CMP32rm %367:gr32, %stack.16.nit, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.nit)
11008B	  JCC_1 %bb.62, 4, implicit killed $eflags
11024B	  JMP_1 %bb.61

11040B	bb.61.lor.lhs.false219:
	; predecessors: %bb.60
	  successors: %bb.62(0x30000000), %bb.63(0x50000000); %bb.62(37.50%), %bb.63(62.50%)

11056B	  %369:gr64_with_sub_8bit = MOVSX64rm32 %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
11088B	  %377:gr64_nosp = IMUL64rri32 %369:gr64_with_sub_8bit, 1717986919, implicit-def dead $eflags
11104B	  %372:gr64_with_sub_8bit = COPY %377:gr64_nosp
11120B	  %372:gr64_with_sub_8bit = SHR64ri %372:gr64_with_sub_8bit(tied-def 0), 63, implicit-def dead $eflags
11168B	  %377:gr64_nosp = SAR64ri %377:gr64_nosp(tied-def 0), 33, implicit-def dead $eflags
11216B	  %377.sub_32bit:gr64_nosp = ADD32rr %377.sub_32bit:gr64_nosp(tied-def 0), %372.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
11248B	  %379:gr32 = LEA64_32r %377:gr64_nosp, 4, %377:gr64_nosp, 0, $noreg
11264B	  CMP32rr %369.sub_32bit:gr64_with_sub_8bit, %379:gr32, implicit-def $eflags
11280B	  JCC_1 %bb.63, 5, implicit killed $eflags
11296B	  JMP_1 %bb.62

11312B	bb.62.if.then222:
	; predecessors: %bb.59, %bb.60, %bb.61
	  successors: %bb.63(0x80000000); %bb.63(100.00%)

11328B	  %381:gr32 = MOV32rm %stack.2.it, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.it)
11344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11376B	  $rdi = MOV32ri64 @.str.22
11392B	  $esi = COPY %381:gr32
11408B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
11424B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
11440B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

11456B	bb.63.if.end224:
	; predecessors: %bb.61, %bb.62
	  successors: %bb.64(0x50000000), %bb.65(0x30000000); %bb.64(62.50%), %bb.65(37.50%)

11472B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
11488B	  JCC_1 %bb.65, 4, implicit killed $eflags
11504B	  JMP_1 %bb.64

11520B	bb.64.if.then226:
	; predecessors: %bb.63
	  successors: %bb.65(0x80000000); %bb.65(100.00%)

11536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11552B	  $edi = MOV32ri 2
11568B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
11584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

11600B	bb.65.if.end227:
	; predecessors: %bb.63, %bb.64
	  successors: %bb.66(0x50000000), %bb.67(0x30000000); %bb.66(62.50%), %bb.67(37.50%)

11616B	  %387:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
11632B	  undef %454.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
11648B	  undef %452.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
11664B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11680B	  $rdi = MOV32ri64 @u
11696B	  $rsi = MOV32ri64 @v
11712B	  $rdx = MOV32ri64 @r
11728B	  $rcx = COPY %162:gr64
11744B	  $r8 = COPY %395:gr64
11760B	  $r9d = COPY %387:gr32
11792B	  PUSH64r %452:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
11824B	  PUSH64r %454:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
11840B	  CALL64pcrel32 @mg3P, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
11856B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11872B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
11888B	  JCC_1 %bb.67, 4, implicit killed $eflags
11904B	  JMP_1 %bb.66

11920B	bb.66.if.then231:
	; predecessors: %bb.65
	  successors: %bb.67(0x80000000); %bb.67(100.00%)

11936B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
11952B	  $edi = MOV32ri 2
11968B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
11984B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

12000B	bb.67.if.end232:
	; predecessors: %bb.65, %bb.66
	  successors: %bb.68(0x50000000), %bb.69(0x30000000); %bb.68(62.50%), %bb.69(37.50%)

12016B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
12032B	  JCC_1 %bb.69, 4, implicit killed $eflags
12048B	  JMP_1 %bb.68

12064B	bb.68.if.then234:
	; predecessors: %bb.67
	  successors: %bb.69(0x80000000); %bb.69(100.00%)

12080B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12096B	  $edi = MOV32ri 5
12112B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
12128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

12144B	bb.69.if.end235:
	; predecessors: %bb.67, %bb.68
	  successors: %bb.70(0x50000000), %bb.71(0x30000000); %bb.70(62.50%), %bb.71(37.50%)

12160B	  %398:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
12176B	  %399:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
12192B	  %400:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
12208B	  undef %456.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.1.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
12224B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12240B	  $rdi = MOV32ri64 @u
12256B	  $rsi = MOV32ri64 @v
12272B	  $rdx = MOV32ri64 @r
12288B	  $ecx = COPY %398:gr32
12304B	  $r8d = COPY %399:gr32
12320B	  $r9d = COPY %400:gr32
12352B	  PUSH64r %456:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
12368B	  PUSH64r %162:gr64, implicit-def $rsp, implicit $rsp
12384B	  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp
12400B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12416B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
12432B	  JCC_1 %bb.71, 4, implicit killed $eflags
12448B	  JMP_1 %bb.70

12464B	bb.70.if.then238:
	; predecessors: %bb.69
	  successors: %bb.71(0x80000000); %bb.71(100.00%)

12480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12496B	  $edi = MOV32ri 5
12512B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
12528B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

12544B	bb.71.if.end239:
	; predecessors: %bb.69, %bb.70
	  successors: %bb.58(0x80000000); %bb.58(100.00%)

12560B	  INC32m %stack.2.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it)
12576B	  JMP_1 %bb.58

12592B	bb.72.for.end242:
	; predecessors: %bb.58
	  successors: %bb.73(0x40000000), %bb.90(0x40000000); %bb.73(50.00%), %bb.90(50.00%)

12608B	  %228:gr32 = MOV32rm %stack.13.n1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1)
12624B	  %229:gr32 = MOV32rm %stack.14.n2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2)
12640B	  %230:gr32 = MOV32rm %stack.15.n3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3)
12656B	  %231:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
12672B	  undef %462.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx244)
12688B	  undef %460.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx246)
12704B	  undef %458.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %231:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx248)
12720B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
12752B	  %237:gr64 = LEA64r %stack.8.rnm2, 1, $noreg, 0, $noreg
12768B	  %238:gr64 = LEA64r %stack.9.rnmu, 1, $noreg, 0, $noreg
12784B	  $rdi = MOV32ri64 @r
12800B	  $esi = COPY %228:gr32
12816B	  $edx = COPY %229:gr32
12832B	  $ecx = COPY %230:gr32
12848B	  $r8 = COPY %237:gr64
12864B	  $r9 = COPY %238:gr64
12896B	  PUSH64r %458:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
12928B	  PUSH64r %460:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
12960B	  PUSH64r %462:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
12976B	  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp
12992B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13040B	  $edi = MOV32ri 1
13056B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
13072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13104B	  $edi = MOV32ri 1
13120B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
13136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13152B	  %240:fr64 = COPY killed $xmm0
13168B	  MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %240:fr64 :: (store 8 into %ir.t)
13184B	  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
13200B	  MOV64mi32 %stack.18.verify_value, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.verify_value)
13216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13280B	  $rdi = MOV32ri64 @.str.23
13296B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
13312B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
13328B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
13344B	  %245:gr64 = MOV64ri 4487126258331716666
13360B	  MOV64mr %stack.12.epsilon, 1, $noreg, 0, $noreg, %245:gr64 :: (store 8 into %ir.epsilon)
13376B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 85, implicit-def $eflags :: (dereferenceable load 1 from @Class)
13392B	  JCC_1 %bb.90, 4, implicit killed $eflags
13408B	  JMP_1 %bb.73

13424B	bb.73.if.then254:
	; predecessors: %bb.72
	  successors: %bb.74(0x40000000), %bb.75(0x40000000); %bb.74(50.00%), %bb.75(50.00%)

13440B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 83, implicit-def $eflags :: (dereferenceable load 1 from @Class)
13456B	  JCC_1 %bb.75, 5, implicit killed $eflags
13472B	  JMP_1 %bb.74

13488B	bb.74.if.then258:
	; predecessors: %bb.73
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

13504B	  %278:gr64 = MOV64ri 4542957617782330299
13520B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %278:gr64 :: (store 8 into %ir.verify_value)
13536B	  JMP_1 %bb.87

13552B	bb.75.if.else259:
	; predecessors: %bb.73
	  successors: %bb.76(0x40000000), %bb.77(0x40000000); %bb.76(50.00%), %bb.77(50.00%)

13568B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 87, implicit-def $eflags :: (dereferenceable load 1 from @Class)
13584B	  JCC_1 %bb.77, 5, implicit killed $eflags
13600B	  JMP_1 %bb.76

13616B	bb.76.if.then263:
	; predecessors: %bb.75
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

13632B	  %277:gr64 = MOV64ri 4529249300748922777
13648B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %277:gr64 :: (store 8 into %ir.verify_value)
13664B	  JMP_1 %bb.87

13680B	bb.77.if.else264:
	; predecessors: %bb.75
	  successors: %bb.78(0x40000000), %bb.79(0x40000000); %bb.78(50.00%), %bb.79(50.00%)

13696B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 65, implicit-def $eflags :: (dereferenceable load 1 from @Class)
13712B	  JCC_1 %bb.79, 5, implicit killed $eflags
13728B	  JMP_1 %bb.78

13744B	bb.78.if.then268:
	; predecessors: %bb.77
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

13760B	  %276:gr64 = MOV64ri 4522856047640670078
13776B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %276:gr64 :: (store 8 into %ir.verify_value)
13792B	  JMP_1 %bb.87

13808B	bb.79.if.else269:
	; predecessors: %bb.77
	  successors: %bb.80(0x40000000), %bb.81(0x40000000); %bb.80(50.00%), %bb.81(50.00%)

13824B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 66, implicit-def $eflags :: (dereferenceable load 1 from @Class)
13840B	  JCC_1 %bb.81, 5, implicit killed $eflags
13856B	  JMP_1 %bb.80

13872B	bb.80.if.then273:
	; predecessors: %bb.79
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

13888B	  %275:gr64 = MOV64ri 4521109751604444092
13904B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %275:gr64 :: (store 8 into %ir.verify_value)
13920B	  JMP_1 %bb.87

13936B	bb.81.if.else274:
	; predecessors: %bb.79
	  successors: %bb.82(0x40000000), %bb.83(0x40000000); %bb.82(50.00%), %bb.83(50.00%)

13952B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 67, implicit-def $eflags :: (dereferenceable load 1 from @Class)
13968B	  JCC_1 %bb.83, 5, implicit killed $eflags
13984B	  JMP_1 %bb.82

14000B	bb.82.if.then278:
	; predecessors: %bb.81
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

14016B	  %274:gr64 = MOV64ri 4513493083252444227
14032B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %274:gr64 :: (store 8 into %ir.verify_value)
14048B	  JMP_1 %bb.87

14064B	bb.83.if.else279:
	; predecessors: %bb.81
	  successors: %bb.84(0x40000000), %bb.85(0x40000000); %bb.84(50.00%), %bb.85(50.00%)

14080B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 68, implicit-def $eflags :: (dereferenceable load 1 from @Class)
14096B	  JCC_1 %bb.85, 5, implicit killed $eflags
14112B	  JMP_1 %bb.84

14128B	bb.84.if.then283:
	; predecessors: %bb.83
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

14144B	  %273:gr64 = MOV64ri 4460185030189797595
14160B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %273:gr64 :: (store 8 into %ir.verify_value)
14176B	  JMP_1 %bb.87

14192B	bb.85.if.else284:
	; predecessors: %bb.83
	  successors: %bb.86(0x40000000), %bb.87(0x40000000); %bb.86(50.00%), %bb.87(50.00%)

14208B	  CMP8mi $rip, 1, $noreg, @Class, $noreg, 69, implicit-def $eflags :: (dereferenceable load 1 from @Class)
14224B	  JCC_1 %bb.87, 5, implicit killed $eflags
14240B	  JMP_1 %bb.86

14256B	bb.86.if.then288:
	; predecessors: %bb.85
	  successors: %bb.87(0x80000000); %bb.87(100.00%)

14272B	  %272:gr64 = MOV64ri 4455868063219174314
14288B	  MOV64mr %stack.18.verify_value, 1, $noreg, 0, $noreg, %272:gr64 :: (store 8 into %ir.verify_value)

14304B	bb.87.if.end295:
	; predecessors: %bb.85, %bb.86, %bb.84, %bb.82, %bb.80, %bb.78, %bb.76, %bb.74
	  successors: %bb.88(0x40000000), %bb.89(0x40000000); %bb.88(50.00%), %bb.89(50.00%)

14320B	  %283:vr128 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
14336B	  %280:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
14368B	  %283:vr128 = SUBSDrr %283:vr128(tied-def 0), %280:fr64
14400B	  %283:vr128 = PANDrm %283:vr128(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 16 from constant-pool)
14432B	  %283:vr128 = DIVSDrr %283:vr128(tied-def 0), %280:fr64
14448B	  MOVSDmr %stack.19.err, 1, $noreg, 0, $noreg, %283:vr128 :: (store 8 into %ir.err)
14464B	  %286:fr64 = MOVSDrm_alt %stack.12.epsilon, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.epsilon)
14480B	  UCOMISDrr %286:fr64, %283:vr128, implicit-def $eflags
14496B	  JCC_1 %bb.89, 2, implicit killed $eflags
14512B	  JMP_1 %bb.88

14528B	bb.88.if.then298:
	; predecessors: %bb.87
	  successors: %bb.91(0x80000000); %bb.91(100.00%)

14544B	  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.verified)
14560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14624B	  $rdi = MOV32ri64 @.str.24
14640B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
14656B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
14672B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14688B	  %302:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
14704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14752B	  $rdi = MOV32ri64 @.str.25
14768B	  $xmm0 = COPY %302:fr64
14784B	  $al = MOV8ri 1
14800B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
14816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14832B	  %306:fr64 = MOVSDrm_alt %stack.19.err, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.err)
14848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14880B	  $rdi = MOV32ri64 @.str.26
14896B	  $xmm0 = COPY %306:fr64
14912B	  $al = MOV8ri 1
14928B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
14944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
14960B	  JMP_1 %bb.91

14976B	bb.89.if.else302:
	; predecessors: %bb.87
	  successors: %bb.91(0x80000000); %bb.91(100.00%)

14992B	  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
15008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15072B	  $rdi = MOV32ri64 @.str.27
15088B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
15104B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15136B	  %291:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
15152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15200B	  $rdi = MOV32ri64 @.str.28
15216B	  $xmm0 = COPY %291:fr64
15232B	  $al = MOV8ri 1
15248B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15264B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15280B	  %295:fr64 = MOVSDrm_alt %stack.18.verify_value, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.verify_value)
15296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15328B	  $rdi = MOV32ri64 @.str.29
15344B	  $xmm0 = COPY %295:fr64
15360B	  $al = MOV8ri 1
15376B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15408B	  JMP_1 %bb.91

15424B	bb.90.if.else307:
	; predecessors: %bb.72
	  successors: %bb.91(0x80000000); %bb.91(100.00%)

15440B	  MOV32mi %stack.20.verified, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.verified)
15456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15520B	  $rdi = MOV32ri64 @.str.30
15536B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
15552B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15568B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15616B	  $rdi = MOV32ri64 @.str.31
15632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
15648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15680B	  %254:fr64 = MOVSDrm_alt %stack.8.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
15696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15744B	  $rdi = MOV32ri64 @.str.25
15760B	  $xmm0 = COPY %254:fr64
15776B	  $al = MOV8ri 1
15792B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
15808B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

15824B	bb.91.if.end311:
	; predecessors: %bb.90, %bb.89, %bb.88
	  successors: %bb.92(0x50000000), %bb.93(0x30000000); %bb.92(62.50%), %bb.93(37.50%)

15840B	  %309:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
15856B	  %310:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx313)
15872B	  %312:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx316)
15904B	  %312:fr64 = MULSDrr %312:fr64(tied-def 0), %310:fr64
15920B	  %314:fr64 = CVTSI2SDrm $noreg, 4, %309:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx320)
15952B	  %314:fr64 = MULSDrr %314:fr64(tied-def 0), %312:fr64
15968B	  MOVSDmr %stack.17.nn, 1, $noreg, 0, $noreg, %314:fr64 :: (store 8 into %ir.nn)
15984B	  %315:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
16000B	  %316:fr64 = FsFLD0SD
16016B	  UCOMISDrr %315:fr64, %316:fr64, implicit-def $eflags
16032B	  JCC_1 %bb.92, 5, implicit $eflags
16048B	  JCC_1 %bb.92, 10, implicit killed $eflags
16064B	  JMP_1 %bb.93

16080B	bb.92.if.then325:
	; predecessors: %bb.91
	  successors: %bb.94(0x80000000); %bb.94(100.00%)

16096B	  %319:fr64 = CVTSI2SDrm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
16128B	  %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
16160B	  %319:fr64 = MULSDrm %319:fr64(tied-def 0), %stack.17.nn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.nn)
16192B	  %319:fr64 = MULSDrm %319:fr64(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
16224B	  %319:fr64 = DIVSDrm %319:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
16240B	  MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %319:fr64 :: (store 8 into %ir.mflops)
16256B	  JMP_1 %bb.94

16272B	bb.93.if.else331:
	; predecessors: %bb.91
	  successors: %bb.94(0x80000000); %bb.94(100.00%)

16288B	  MOV64mi32 %stack.5.mflops, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.mflops)

16304B	bb.94.if.end332:
	; predecessors: %bb.93, %bb.92
	  successors: %bb.95(0x50000000), %bb.102(0x30000000); %bb.95(62.50%), %bb.102(37.50%)

16320B	  %322:gr32 = MOVSX32rm8 $rip, 1, $noreg, @Class, $noreg :: (dereferenceable load 1 from @Class)
16336B	  %323:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
16352B	  %324:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx334)
16368B	  %325:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx336)
16384B	  %326:gr32 = MOV32rm $noreg, 4, %323:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx338)
16400B	  %327:gr32 = MOV32rm %stack.16.nit, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nit)
16416B	  %328:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
16432B	  %329:fr64 = MOVSDrm_alt %stack.5.mflops, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.mflops)
16448B	  undef %464.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.20.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
16464B	  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16496B	  $rdi = MOV32ri64 @.str.32
16512B	  $esi = COPY %322:gr32
16528B	  $edx = COPY %324:gr32
16544B	  $ecx = COPY %325:gr32
16560B	  $r8d = COPY %326:gr32
16576B	  $r9d = COPY %327:gr32
16592B	  $xmm0 = COPY %328:fr64
16608B	  $xmm1 = COPY %329:fr64
16624B	  PUSH64i32 @.str.42, implicit-def $rsp, implicit $rsp
16640B	  PUSH64i32 @.str.41, implicit-def $rsp, implicit $rsp
16656B	  PUSH64i32 @.str.40, implicit-def $rsp, implicit $rsp
16672B	  PUSH64i32 @.str.39, implicit-def $rsp, implicit $rsp
16688B	  PUSH64i32 @.str.38, implicit-def $rsp, implicit $rsp
16704B	  PUSH64i32 @.str.37, implicit-def $rsp, implicit $rsp
16720B	  PUSH64i32 @.str.36, implicit-def $rsp, implicit $rsp
16736B	  PUSH64i32 @.str.35, implicit-def $rsp, implicit $rsp
16752B	  PUSH64i32 @.str.34, implicit-def $rsp, implicit $rsp
16784B	  PUSH64r %464:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
16800B	  PUSH64i32 @.str.33, implicit-def $rsp, implicit $rsp
16816B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
16832B	  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16848B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
16864B	  JCC_1 %bb.102, 4, implicit killed $eflags
16880B	  JMP_1 %bb.95

16896B	bb.95.if.then340:
	; predecessors: %bb.94
	  successors: %bb.96(0x50000000), %bb.97(0x30000000); %bb.96(62.50%), %bb.97(37.50%)

16912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16944B	  $edi = MOV32ri 1
16960B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
16976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16992B	  %334:fr64 = COPY killed $xmm0
17008B	  MOVSDmr %stack.23.tmax, 1, $noreg, 0, $noreg, %334:fr64 :: (store 8 into %ir.tmax)
17024B	  %335:fr64 = FsFLD0SD
17040B	  UCOMISDrr %334:fr64, %335:fr64, implicit-def $eflags
17056B	  JCC_1 %bb.97, 5, implicit $eflags
17072B	  JCC_1 %bb.97, 10, implicit killed $eflags
17088B	  JMP_1 %bb.96

17104B	bb.96.if.then344:
	; predecessors: %bb.95
	  successors: %bb.97(0x80000000); %bb.97(100.00%)

17120B	  %336:gr64 = MOV64ri 4607182418800017408
17136B	  MOV64mr %stack.23.tmax, 1, $noreg, 0, $noreg, %336:gr64 :: (store 8 into %ir.tmax)

17152B	bb.97.if.end345:
	; predecessors: %bb.95, %bb.96
	  successors: %bb.98(0x80000000); %bb.98(100.00%)

17168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17232B	  $rdi = MOV32ri64 @.str.43
17248B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
17264B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
17280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17296B	  MOV32mi %stack.21.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
17328B	  %417:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)

17408B	bb.98.for.cond347:
	; predecessors: %bb.97, %bb.100, %bb.101
	  successors: %bb.99(0x7c000000), %bb.102(0x04000000); %bb.99(96.88%), %bb.102(3.12%)

17424B	  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
17440B	  JCC_1 %bb.102, 15, implicit killed $eflags
17456B	  JMP_1 %bb.99

17472B	bb.99.for.body350:
	; predecessors: %bb.98
	  successors: %bb.100(0x40000000), %bb.101(0x40000000); %bb.100(50.00%), %bb.101(50.00%)

17488B	  %344:gr32 = MOV32rm %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
17504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17520B	  $edi = COPY %344:gr32
17536B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
17552B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17568B	  %345:fr64 = COPY killed $xmm0
17584B	  MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %345:fr64 :: (store 8 into %ir.t)
17600B	  CMP32mi8 %stack.21.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
17616B	  JCC_1 %bb.101, 5, implicit killed $eflags
17632B	  JMP_1 %bb.100

17648B	bb.100.if.then354:
	; predecessors: %bb.99
	  successors: %bb.98(0x80000000); %bb.98(100.00%)

17664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17680B	  $edi = MOV32ri 4
17696B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
17712B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17728B	  %358:fr64 = COPY killed $xmm0
17760B	  %358:fr64 = SUBSDrm %358:fr64(tied-def 0), %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
17776B	  MOVSDmr %stack.3.t, 1, $noreg, 0, $noreg, %358:fr64 :: (store 8 into %ir.t)
17792B	  %360:fr64 = COPY %358:fr64
17808B	  %360:fr64 = MULSDrr %360:fr64(tied-def 0), %417:fr64
17840B	  %360:fr64 = DIVSDrm %360:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
17856B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17872B	  $rdi = MOV32ri64 @.str.44
17888B	  $rsi = MOV32ri64 @.str.45
17904B	  $xmm0 = COPY %358:fr64
17920B	  $xmm1 = COPY %360:fr64
17936B	  $al = MOV8ri 2
17952B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
17968B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
17984B	  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
18000B	  JMP_1 %bb.98

18016B	bb.101.if.else360:
	; predecessors: %bb.99
	  successors: %bb.98(0x80000000); %bb.98(100.00%)

18032B	  %348:gr64_nosp = MOVSX64rm32 %stack.21.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
18048B	  %349:gr64 = MOV64rm %stack.22.t_names, 8, %348:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx362)
18064B	  %350:fr64 = MOVSDrm_alt %stack.3.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
18080B	  %352:fr64 = COPY %350:fr64
18096B	  %352:fr64 = MULSDrr %352:fr64(tied-def 0), %417:fr64
18128B	  %352:fr64 = DIVSDrm %352:fr64(tied-def 0), %stack.23.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
18144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
18160B	  $rdi = MOV32ri64 @.str.46
18176B	  $rsi = COPY %349:gr64
18192B	  $xmm0 = COPY %350:fr64
18208B	  $xmm1 = COPY %352:fr64
18224B	  $al = MOV8ri 2
18240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
18256B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
18272B	  INC32m %stack.21.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
18288B	  JMP_1 %bb.98

18304B	bb.102.if.end370:
	; predecessors: %bb.94, %bb.98

18336B	  $eax = MOV32r0 implicit-def dead $eflags
18352B	  RET 0, killed $eax

# End machine code for function main.

Before MISched:
# Machine code for function setup: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=120, align=16, at location [SP+8]
  fi#7: size=120, align=16, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $rsi, $rdx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.n1.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.n1.addr)
  MOV64mr %stack.1.n2.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.n2.addr)
  MOV64mr %stack.2.n3.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.n3.addr)
  %3:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %4:gr32 = MOV32rm $noreg, 4, %3:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
  %5:gr64_nosp = LEA64r %3:gr64_nosp, 2, %3:gr64_nosp, 0, $noreg
  MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
  %6:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %7:gr32 = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx5)
  %8:gr64_nosp = LEA64r %6:gr64_nosp, 2, %6:gr64_nosp, 0, $noreg
  MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
  %9:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx10)
  %11:gr64_nosp = LEA64r %9:gr64_nosp, 2, %9:gr64_nosp, 0, $noreg
  MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
  %13:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %13:gr32 = DEC32r %13:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %13:gr32 :: (store 4 into %ir.k)

bb.1.for.cond:
; predecessors: %bb.0, %bb.5
  successors: %bb.2(0x7c000000), %bb.6(0x04000000); %bb.2(96.88%), %bb.6(3.12%)

  CMP32mi8 %stack.3.k, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  JCC_1 %bb.6, 14, implicit killed $eflags
  JMP_1 %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.5.ax, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ax)

bb.3.for.cond14:
; predecessors: %bb.2, %bb.4
  successors: %bb.4(0x7c000000), %bb.5(0x04000000); %bb.4(96.88%), %bb.5(3.12%)

  CMP32mi8 %stack.5.ax, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load 4 from %ir.ax)
  JCC_1 %bb.5, 15, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body16:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %111:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %112:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
  %113:gr64_nosp = LEA64r %111:gr64_nosp, 2, %111:gr64_nosp, 0, $noreg
  %114:gr64 = LEA64r %stack.7.ng, 4, %113:gr64_nosp, 0, $noreg
  %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
  %117:gr32 = COPY %115:gr32
  %117:gr32 = SHR32ri %117:gr32(tied-def 0), 31, implicit-def dead $eflags
  %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
  %117:gr32 = SAR32r1 %117:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
  INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
  JMP_1 %bb.3

bb.5.for.end:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DEC32m %stack.3.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
  JMP_1 %bb.1

bb.6.for.end26:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %14:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %14:gr32 :: (store 4 into %ir.k)

bb.7.for.cond27:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  CMP32mi8 %stack.3.k, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  JCC_1 %bb.9, 14, implicit killed $eflags
  JMP_1 %bb.8

bb.8.for.body29:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %137:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %104:gr64_nosp = LEA64r %137:gr64_nosp, 2, %137:gr64_nosp, 0, $noreg
  %105:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx324)
  MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
  %106:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx37)
  MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
  %107:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx42)
  MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
  %108:gr32 = LEA64_32r %137:gr64_nosp, 1, $noreg, -1, $noreg
  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %108:gr32 :: (store 4 into %ir.k)
  JMP_1 %bb.7

bb.9.for.end47:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %15:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.k)

bb.10.for.cond48:
; predecessors: %bb.9, %bb.14
  successors: %bb.11(0x7c000000), %bb.15(0x04000000); %bb.11(96.88%), %bb.15(3.12%)

  CMP32mi8 %stack.3.k, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  JCC_1 %bb.15, 14, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body50:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOV32mi %stack.5.ax, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ax)

bb.12.for.cond51:
; predecessors: %bb.11, %bb.13
  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

  CMP32mi8 %stack.5.ax, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load 4 from %ir.ax)
  JCC_1 %bb.14, 15, implicit killed $eflags
  JMP_1 %bb.13

bb.13.for.body53:
; predecessors: %bb.12
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %95:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %95:gr64_nosp = SHL64ri %95:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  %96:gr64_nosp = LEA64r %95:gr64_nosp, 2, %95:gr64_nosp, 0, $noreg
  %97:gr64 = LEA64r %stack.7.ng, 1, %96:gr64_nosp, 0, $noreg
  %98:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
  %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
  %100:gr32 = nsw ADD32ri8 %100:gr32(tied-def 0), 2, implicit-def dead $eflags
  %101:gr64 = LEA64r %stack.6.mi, 1, %96:gr64_nosp, 0, $noreg
  MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
  INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
  JMP_1 %bb.12

bb.14.for.end65:
; predecessors: %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %138:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %89:gr64_nosp = LEA64r %138:gr64_nosp, 2, %138:gr64_nosp, 0, $noreg
  %90:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx685)
  MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
  %91:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx73)
  MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
  %92:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx78)
  MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
  %93:gr32 = LEA64_32r %138:gr64_nosp, 1, $noreg, -1, $noreg
  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.k)
  JMP_1 %bb.10

bb.15.for.end83:
; predecessors: %bb.10
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %16:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %16.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
  MOV32mi $rip, 1, $noreg, @is1, $noreg, 2 :: (store 4 into @is1)
  %18:gr64_nosp = LEA64r %16:gr64_nosp, 2, %16:gr64_nosp, 0, $noreg
  undef %139.sub_32bit:gr64_nosp = MOV32rm %stack.7.ng, 4, %18:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx948)
  %20:gr32 = LEA64_32r %139:gr64_nosp, 1, $noreg, 1, $noreg
  MOV32mr $rip, 1, $noreg, @ie1, $noreg, %20:gr32 :: (store 4 into @ie1)
  %139.sub_32bit:gr64_nosp = ADD32ri8 %139.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  %22:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
  MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
  %23:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %24:gr64_nosp = LEA64r %23:gr64_nosp, 2, %23:gr64_nosp, 0, $noreg
  %29:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx100)
  %26:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %27:gr64_nosp = LEA64r %26:gr64_nosp, 2, %26:gr64_nosp, 0, $noreg
  %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
  %29:gr32 = ADD32ri8 %29:gr32(tied-def 0), 2, implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @is2, $noreg, %29:gr32 :: (store 4 into @is2)
  %32:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx108)
  %32:gr32 = nsw INC32r %32:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @ie2, $noreg, %32:gr32 :: (store 4 into @ie2)
  %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 3, implicit-def dead $eflags
  %34:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
  MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
  %35:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %36:gr64_nosp = LEA64r %35:gr64_nosp, 2, %35:gr64_nosp, 0, $noreg
  %41:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx114)
  %38:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %39:gr64_nosp = LEA64r %38:gr64_nosp, 2, %38:gr64_nosp, 0, $noreg
  %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 2, implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @is3, $noreg, %41:gr32 :: (store 4 into @is3)
  %44:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx122)
  %44:gr32 = nsw INC32r %44:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr $rip, 1, $noreg, @ie3, $noreg, %44:gr32 :: (store 4 into @ie3)
  %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 3, implicit-def dead $eflags
  %46:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
  MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
  %47:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  MOV32mi $noreg, 4, %47:gr64_nosp, @ir, $noreg, 0 :: (store 4 into %ir.arrayidx127)
  %49:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %49:gr32 = DEC32r %49:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.j)

bb.16.for.cond129:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  CMP32mi8 %stack.4.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.j)
  JCC_1 %bb.18, 14, implicit killed $eflags
  JMP_1 %bb.17

bb.17.for.body131:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %140:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
  %82:gr32 = MOV32rm $noreg, 4, %140:gr64_nosp, @m1 + 4, $noreg :: (load 4 from %ir.arrayidx137)
  %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
  %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
  %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
  MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
  %84:gr32 = LEA64_32r %140:gr64_nosp, 1, $noreg, -1, $noreg
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j)
  JMP_1 %bb.16

bb.18.for.end151:
; predecessors: %bb.16
  successors: %bb.19(0x40000000), %bb.20(0x40000000); %bb.19(50.00%), %bb.20(50.00%)

  CMP32mi8 $rip, 1, $noreg, @debug_vec + 4, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 1)`)
  JCC_1 %bb.20, 14, implicit killed $eflags
  JMP_1 %bb.19

bb.19.if.then:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.47
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.48
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %56:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %58:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %59:gr64_nosp = LEA64r %56:gr64_nosp, 2, %56:gr64_nosp, 0, $noreg
  %60:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx1569)
  %61:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
  %62:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx162)
  %63:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
  undef %136.sub_32bit:gr64_with_sub_8bit = MOV32rm %63:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.100)
  %65:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
  undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm %65:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.102)
  %67:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %67:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.104)
  undef %130.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  undef %128.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
  undef %122.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
  undef %120.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
  ADJCALLSTACKDOWN64 72, 0, 72, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.49
  $esi = COPY %56.sub_32bit:gr64_nosp
  $edx = COPY %58:gr32
  $ecx = COPY %60:gr32
  $r8d = COPY %61:gr32
  $r9d = COPY %62:gr32
  dead $eax = MOV32ri 0, implicit-def $al
  PUSH64r %120:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %122:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %124:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %126:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %128:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %130:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %132:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %134:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %136:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 72, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.20.if.end:
; predecessors: %bb.18, %bb.19

  RET 0

# End machine code for function setup.

********** MI Scheduling **********
setup:%bb.0 entry
  From: %2:gr64 = COPY $rdx
    To: End RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=4
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(1):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(2):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(3):   MOV64mr %stack.0.n1.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   MOV64mr %stack.1.n2.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV64mr %stack.2.n3.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %3:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(8): Data Latency=4 Reg=%3
    SU(7): Data Latency=4 Reg=%3
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %4:gr32 = MOV32rm $noreg, 4, %3:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%3
  Successors:
    SU(9): Data Latency=4 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %5:gr64_nosp = LEA64r %3:gr64_nosp, 2, %3:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%3
  Successors:
    SU(9): Data Latency=1 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%5
    SU(7): Data Latency=4 Reg=%4
  Successors:
    SU(17): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(10):   %6:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(12): Data Latency=4 Reg=%6
    SU(11): Data Latency=4 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %7:gr32 = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx5)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(10): Data Latency=4 Reg=%6
  Successors:
    SU(13): Data Latency=4 Reg=%7
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %8:gr64_nosp = LEA64r %6:gr64_nosp, 2, %6:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(10): Data Latency=4 Reg=%6
  Successors:
    SU(13): Data Latency=1 Reg=%8
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%8
    SU(11): Data Latency=4 Reg=%7
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(14):   %9:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(16): Data Latency=4 Reg=%9
    SU(15): Data Latency=4 Reg=%9
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(14): Data Latency=4 Reg=%9
  Successors:
    SU(17): Data Latency=4 Reg=%10
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %11:gr64_nosp = LEA64r %9:gr64_nosp, 2, %9:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(14): Data Latency=4 Reg=%9
  Successors:
    SU(17): Data Latency=1 Reg=%11
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%11
    SU(15): Data Latency=4 Reg=%10
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(18):   %13:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(19): Data Latency=4 Reg=%13
    SU(19): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   %13:gr32 = DEC32r %13:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(18): Data Latency=4 Reg=%13
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%13
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %13:gr32 :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%13
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 17 5 4 3 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %13:gr32 :: (store 4 into %ir.k)
Bottom Pressure:
GR16=2
  LiveReg: %13
  UpdateRegP: SU(20) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %13:gr32 :: (store 4 into %ir.k)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 17 5 4 19 
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %13:gr32 = DEC32r %13:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %13
  UpdateRegP: SU(19) %13:gr32 = DEC32r %13:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(19) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 17 5 4 18 
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %13:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(18) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 17 5 4 
  Cand SU(3) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
Bottom Pressure:
GR16=4
  LiveReg: %11
  UpdateRegP: SU(17) MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
              to GR16 2
  LiveReg: %10
  UpdateRegP: SU(17) MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
              to 
  Ready @0c
  BotQ.A TopLatency SU(17) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 16 15 13 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(16) %11:gr64_nosp = LEA64r %9:gr64_nosp, 2, %9:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %9
  UpdateRegP: SU(15) %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx10)
              to GR16 -2
  UpdateRegP: SU(16) %11:gr64_nosp = LEA64r %9:gr64_nosp, 2, %9:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 13 15 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx10)
Bottom Pressure:
GR16=2
  Ready @4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 13 14 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %9:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @8c
  BotQ.A BotLatency SU(14) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 13 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
Bottom Pressure:
GR16=4
  LiveReg: %8
  UpdateRegP: SU(13) MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
              to GR16 2
  LiveReg: %7
  UpdateRegP: SU(13) MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
              to 
  Ready @1c
  BotQ.A TopLatency SU(13) 8c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 12 11 9 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(12) %8:gr64_nosp = LEA64r %6:gr64_nosp, 2, %6:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %6
  UpdateRegP: SU(11) %7:gr32 = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx5)
              to GR16 -2
  UpdateRegP: SU(12) %8:gr64_nosp = LEA64r %6:gr64_nosp, 2, %6:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 9 11 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %7:gr32 = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx5)
Bottom Pressure:
GR16=2
  Ready @5c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 9 10 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %6:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 9 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
Bottom Pressure:
GR16=4
  LiveReg: %5
  UpdateRegP: SU(9) MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
              to GR16 2
  LiveReg: %4
  UpdateRegP: SU(9) MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
              to 
  Ready @2c
  BotQ.A TopLatency SU(9) 8c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 8 7 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %5:gr64_nosp = LEA64r %3:gr64_nosp, 2, %3:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %3
  UpdateRegP: SU(7) %4:gr32 = MOV32rm $noreg, 4, %3:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
              to GR16 -2
  UpdateRegP: SU(8) %5:gr64_nosp = LEA64r %3:gr64_nosp, 2, %3:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 7 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %4:gr32 = MOV32rm $noreg, 4, %3:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
Bottom Pressure:
GR16=2
  Ready @6c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 6 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %3:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @10c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 5 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.2.n3.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.n3.addr)
Bottom Pressure:
GR16=2
  LiveReg: %2
  UpdateRegP: SU(5) MOV64mr %stack.2.n3.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.n3.addr)
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) MOV64mr %stack.1.n2.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.n2.addr)
Bottom Pressure:
GR16=4
  LiveReg: %1
  UpdateRegP: SU(4) MOV64mr %stack.1.n2.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.n2.addr)
              to 
  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV64mr %stack.0.n1.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.n1.addr)
Bottom Pressure:
GR16=6
  LiveReg: %0
  UpdateRegP: SU(3) MOV64mr %stack.0.n1.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.n1.addr)
              to 
  Ready @4c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %0:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=5
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @4c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=4
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @4c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=4
  Ready @4c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %2:gr64 = COPY $rdx
SU(1):   %1:gr64 = COPY $rsi
SU(2):   %0:gr64 = COPY $rdi
SU(3):   MOV64mr %stack.0.n1.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.n1.addr)
SU(4):   MOV64mr %stack.1.n2.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.n2.addr)
SU(5):   MOV64mr %stack.2.n3.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.n3.addr)
SU(6):   %3:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(7):   %4:gr32 = MOV32rm $noreg, 4, %3:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
SU(8):   %5:gr64_nosp = LEA64r %3:gr64_nosp, 2, %3:gr64_nosp, 0, $noreg
SU(9):   MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
SU(10):   %6:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(11):   %7:gr32 = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx5)
SU(12):   %8:gr64_nosp = LEA64r %6:gr64_nosp, 2, %6:gr64_nosp, 0, $noreg
SU(13):   MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
SU(14):   %9:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(15):   %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx10)
SU(16):   %11:gr64_nosp = LEA64r %9:gr64_nosp, 2, %9:gr64_nosp, 0, $noreg
SU(17):   MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
SU(18):   %13:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(19):   %13:gr32 = DEC32r %13:gr32(tied-def 0), implicit-def dead $eflags
SU(20):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %13:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
setup:%bb.4 for.body16
  From: %111:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: JMP_1 %bb.3
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %111:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%111
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %112:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(9): Data Latency=4 Reg=%112
    SU(4): Data Latency=4 Reg=%112
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %113:gr64_nosp = LEA64r %111:gr64_nosp, 2, %111:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%111
  Successors:
    SU(3): Data Latency=1 Reg=%113
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %114:gr64 = LEA64r %stack.7.ng, 4, %113:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=%113
  Successors:
    SU(9): Data Latency=1 Reg=%114
    SU(4): Data Latency=1 Reg=%114
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(3): Data Latency=1 Reg=%114
    SU(1): Data Latency=4 Reg=%112
  Successors:
    SU(7): Data Latency=4 Reg=%115
    SU(5): Data Latency=4 Reg=%115
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %117:gr32 = COPY %115:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%115
  Successors:
    SU(6): Data Latency=0 Reg=%117
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %117:gr32 = SHR32ri %117:gr32(tied-def 0), 31, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(5): Data Latency=0 Reg=%117
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%117
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%117
    SU(6): Out  Latency=0
    SU(4): Data Latency=4 Reg=%115
  Successors:
    SU(8): Data Latency=1 Reg=%117
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %117:gr32 = SAR32r1 %117:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%117
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%117
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%117
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=%114
    SU(1): Data Latency=4 Reg=%112
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(10):   INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.3
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
Bottom Pressure:
GR16=6
  LiveReg: %114
  UpdateRegP: SU(4) %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
              to 
  UpdateRegP: SU(9) MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
              to GR16 4
  LiveReg: %112
  UpdateRegP: SU(4) %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
              to GR16 -2
  UpdateRegP: SU(9) MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
              to GR16 2
  LiveReg: %117
  UpdateRegP: SU(9) MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 13c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %117:gr32 = SAR32r1 %117:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %117
  UpdateRegP: SU(8) %117:gr32 = SAR32r1 %117:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %117
  UpdateRegP: SU(7) %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
              to 
  LiveReg: %115
  UpdateRegP: SU(5) %117:gr32 = COPY %115:gr32
              to GR16 -2
  UpdateRegP: SU(7) %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @2c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %117:gr32 = SHR32ri %117:gr32(tied-def 0), 31, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %117
  UpdateRegP: SU(6) %117:gr32 = SHR32ri %117:gr32(tied-def 0), 31, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %117:gr32 = COPY %115:gr32
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(4) 7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %114:gr64 = LEA64r %stack.7.ng, 4, %113:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %113
  UpdateRegP: SU(3) %114:gr64 = LEA64r %stack.7.ng, 4, %113:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %113:gr64_nosp = LEA64r %111:gr64_nosp, 2, %111:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %111
  UpdateRegP: SU(2) %113:gr64_nosp = LEA64r %111:gr64_nosp, 2, %111:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %112:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
Bottom Pressure:
GR16=2
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %111:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @13c
  BotQ.A BotLatency SU(0) 13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %111:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %112:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
SU(2):   %113:gr64_nosp = LEA64r %111:gr64_nosp, 2, %111:gr64_nosp, 0, $noreg
SU(3):   %114:gr64 = LEA64r %stack.7.ng, 4, %113:gr64_nosp, 0, $noreg
SU(4):   %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
SU(5):   %117:gr32 = COPY %115:gr32
SU(6):   %117:gr32 = SHR32ri %117:gr32(tied-def 0), 31, implicit-def dead $eflags
SU(7):   %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
SU(8):   %117:gr32 = SAR32r1 %117:gr32(tied-def 0), implicit-def dead $eflags
SU(9):   MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
SU(10):   INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)

********** MI Scheduling **********
setup:%bb.6 for.end26
  From: %14:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %14:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %14:gr32 :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%14
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %14:gr32 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %14:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %14:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
setup:%bb.8 for.body29
  From: %137:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: JMP_1 %bb.7
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %137:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Data Latency=4 Reg=%137
    SU(7): Data Latency=4 Reg=%137
    SU(5): Data Latency=4 Reg=%137
    SU(3): Data Latency=4 Reg=%137
    SU(1): Data Latency=4 Reg=%137
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %104:gr64_nosp = LEA64r %137:gr64_nosp, 2, %137:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%137
  Successors:
    SU(6): Data Latency=1 Reg=%104
    SU(4): Data Latency=1 Reg=%104
    SU(2): Data Latency=1 Reg=%104
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %105:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx324)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%104
  Successors:
    SU(3): Data Latency=4 Reg=%105
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%105
    SU(0): Data Latency=4 Reg=%137
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(4):   %106:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx37)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%104
  Successors:
    SU(5): Data Latency=4 Reg=%106
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%106
    SU(0): Data Latency=4 Reg=%137
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   %107:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx42)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%104
  Successors:
    SU(7): Data Latency=4 Reg=%107
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%107
    SU(0): Data Latency=4 Reg=%137
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(8):   %108:gr32 = LEA64_32r %137:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%137
  Successors:
    SU(9): Data Latency=1 Reg=%108
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %108:gr32 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%108
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 5 3 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %108:gr32 :: (store 4 into %ir.k)
Bottom Pressure:
GR16=2
  LiveReg: %108
  UpdateRegP: SU(9) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %108:gr32 :: (store 4 into %ir.k)
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 5 8 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %108:gr32 = LEA64_32r %137:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %137
  UpdateRegP: SU(1) %104:gr64_nosp = LEA64r %137:gr64_nosp, 2, %137:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(3) MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
              to GR16 2
  UpdateRegP: SU(5) MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
              to GR16 2
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
              to GR16 2
  UpdateRegP: SU(8) %108:gr32 = LEA64_32r %137:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 5 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
Bottom Pressure:
GR16=4
  LiveReg: %107
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 6 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %107:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx42)
Bottom Pressure:
GR16=4
  LiveReg: %104
  UpdateRegP: SU(2) %105:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx324)
              to GR16 -2
  UpdateRegP: SU(4) %106:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx37)
              to GR16 -2
  UpdateRegP: SU(6) %107:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx42)
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
Bottom Pressure:
GR16=6
  LiveReg: %106
  UpdateRegP: SU(5) MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %106:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx37)
Bottom Pressure:
GR16=4
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
Bottom Pressure:
GR16=6
  LiveReg: %105
  UpdateRegP: SU(3) MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %105:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx324)
Bottom Pressure:
GR16=4
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %104:gr64_nosp = LEA64r %137:gr64_nosp, 2, %137:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  Ready @6c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %137:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @10c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %137:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %104:gr64_nosp = LEA64r %137:gr64_nosp, 2, %137:gr64_nosp, 0, $noreg
SU(2):   %105:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx324)
SU(3):   MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
SU(4):   %106:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx37)
SU(5):   MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
SU(6):   %107:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx42)
SU(7):   MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
SU(8):   %108:gr32 = LEA64_32r %137:gr64_nosp, 1, $noreg, -1, $noreg
SU(9):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %108:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
setup:%bb.9 for.end47
  From: %15:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %15:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%15
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %15:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
setup:%bb.13 for.body53
  From: %95:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: JMP_1 %bb.12
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %95:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%95
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %95:gr64_nosp = SHL64ri %95:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%95
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%95
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %96:gr64_nosp = LEA64r %95:gr64_nosp, 2, %95:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%95
  Successors:
    SU(7): Data Latency=1 Reg=%96
    SU(3): Data Latency=1 Reg=%96
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %97:gr64 = LEA64r %stack.7.ng, 1, %96:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%96
  Successors:
    SU(5): Data Latency=1 Reg=%97
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %98:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Data Latency=4 Reg=%98
    SU(5): Data Latency=4 Reg=%98
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%97
    SU(4): Data Latency=4 Reg=%98
  Successors:
    SU(6): Data Latency=4 Reg=%100
    SU(6): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %100:gr32 = nsw ADD32ri8 %100:gr32(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=%100
    SU(5): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%100
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %101:gr64 = LEA64r %stack.6.mi, 1, %96:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%96
  Successors:
    SU(8): Data Latency=1 Reg=%101
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%100
    SU(7): Data Latency=1 Reg=%101
    SU(4): Data Latency=4 Reg=%98
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(9):   INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
Bottom Pressure:
GR16=6
  LiveReg: %101
  UpdateRegP: SU(8) MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
              to GR16 4
  LiveReg: %98
  UpdateRegP: SU(5) %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
              to 
  UpdateRegP: SU(8) MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
              to GR16 2
  LiveReg: %100
  UpdateRegP: SU(8) MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 12c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %101:gr64 = LEA64r %stack.6.mi, 1, %96:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %96
  UpdateRegP: SU(3) %97:gr64 = LEA64r %stack.7.ng, 1, %96:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(7) %101:gr64 = LEA64r %stack.6.mi, 1, %96:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %100:gr32 = nsw ADD32ri8 %100:gr32(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %100
  UpdateRegP: SU(6) %100:gr32 = nsw ADD32ri8 %100:gr32(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
Bottom Pressure:
GR16=6
  LiveReg: %97
  UpdateRegP: SU(5) %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %98:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
Bottom Pressure:
GR16=4
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %97:gr64 = LEA64r %stack.7.ng, 1, %96:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %96:gr64_nosp = LEA64r %95:gr64_nosp, 2, %95:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %95
  UpdateRegP: SU(2) %96:gr64_nosp = LEA64r %95:gr64_nosp, 2, %95:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %95:gr64_nosp = SHL64ri %95:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %95
  UpdateRegP: SU(1) %95:gr64_nosp = SHL64ri %95:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %95:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %95:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %95:gr64_nosp = SHL64ri %95:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
SU(2):   %96:gr64_nosp = LEA64r %95:gr64_nosp, 2, %95:gr64_nosp, 0, $noreg
SU(3):   %97:gr64 = LEA64r %stack.7.ng, 1, %96:gr64_nosp, 0, $noreg
SU(4):   %98:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
SU(5):   %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
SU(6):   %100:gr32 = nsw ADD32ri8 %100:gr32(tied-def 0), 2, implicit-def dead $eflags
SU(7):   %101:gr64 = LEA64r %stack.6.mi, 1, %96:gr64_nosp, 0, $noreg
SU(8):   MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
SU(9):   INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)

********** MI Scheduling **********
setup:%bb.14 for.end65
  From: %138:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: JMP_1 %bb.10
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %138:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(8): Data Latency=4 Reg=%138
    SU(7): Data Latency=4 Reg=%138
    SU(5): Data Latency=4 Reg=%138
    SU(3): Data Latency=4 Reg=%138
    SU(1): Data Latency=4 Reg=%138
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %89:gr64_nosp = LEA64r %138:gr64_nosp, 2, %138:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%138
  Successors:
    SU(6): Data Latency=1 Reg=%89
    SU(4): Data Latency=1 Reg=%89
    SU(2): Data Latency=1 Reg=%89
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %90:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx685)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%89
  Successors:
    SU(3): Data Latency=4 Reg=%90
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%90
    SU(0): Data Latency=4 Reg=%138
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(4):   %91:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx73)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%89
  Successors:
    SU(5): Data Latency=4 Reg=%91
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%91
    SU(0): Data Latency=4 Reg=%138
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   %92:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx78)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%89
  Successors:
    SU(7): Data Latency=4 Reg=%92
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%92
    SU(0): Data Latency=4 Reg=%138
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(8):   %93:gr32 = LEA64_32r %138:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%138
  Successors:
    SU(9): Data Latency=1 Reg=%93
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%93
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 5 3 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.k)
Bottom Pressure:
GR16=2
  LiveReg: %93
  UpdateRegP: SU(9) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.k)
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 5 8 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %93:gr32 = LEA64_32r %138:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %138
  UpdateRegP: SU(1) %89:gr64_nosp = LEA64r %138:gr64_nosp, 2, %138:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(3) MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
              to GR16 2
  UpdateRegP: SU(5) MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
              to GR16 2
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
              to GR16 2
  UpdateRegP: SU(8) %93:gr32 = LEA64_32r %138:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 5 
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
Bottom Pressure:
GR16=4
  LiveReg: %92
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 6 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %92:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx78)
Bottom Pressure:
GR16=4
  LiveReg: %89
  UpdateRegP: SU(2) %90:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx685)
              to GR16 -2
  UpdateRegP: SU(4) %91:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx73)
              to GR16 -2
  UpdateRegP: SU(6) %92:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx78)
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
Bottom Pressure:
GR16=6
  LiveReg: %91
  UpdateRegP: SU(5) MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %91:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx73)
Bottom Pressure:
GR16=4
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
Bottom Pressure:
GR16=6
  LiveReg: %90
  UpdateRegP: SU(3) MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %90:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx685)
Bottom Pressure:
GR16=4
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %89:gr64_nosp = LEA64r %138:gr64_nosp, 2, %138:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  Ready @6c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %138:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @10c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %138:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %89:gr64_nosp = LEA64r %138:gr64_nosp, 2, %138:gr64_nosp, 0, $noreg
SU(2):   %90:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx685)
SU(3):   MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
SU(4):   %91:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx73)
SU(5):   MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
SU(6):   %92:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx78)
SU(7):   MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
SU(8):   %93:gr32 = LEA64_32r %138:gr64_nosp, 1, $noreg, -1, $noreg
SU(9):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
setup:%bb.15 for.end83
  From: %16:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: End RegionInstrs: 45
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %16:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 50
  Successors:
    SU(3): Data Latency=4 Reg=%16
    SU(1): Data Latency=4 Reg=%16
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %16.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 40
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    SU(25): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   MOV32mi $rip, 1, $noreg, @is1, $noreg, 2 :: (store 4 into @is1)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 40
  Successors:
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %18:gr64_nosp = LEA64r %16:gr64_nosp, 2, %16:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 46
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    SU(4): Data Latency=1 Reg=%18
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   undef %139.sub_32bit:gr64_nosp = MOV32rm %stack.7.ng, 4, %18:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx948)
  # preds left       : 1
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 45
  Predecessors:
    SU(3): Data Latency=1 Reg=%18
  Successors:
    SU(7): Data Latency=4 Reg=%139
    SU(5): Data Latency=4 Reg=%139
    SU(7): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %20:gr32 = LEA64_32r %139:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 41
  Predecessors:
    SU(4): Data Latency=4 Reg=%139
  Successors:
    SU(6): Data Latency=1 Reg=%20
    SU(7): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr $rip, 1, $noreg, @ie1, $noreg, %20:gr32 :: (store 4 into @ie1)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 40
  Predecessors:
    SU(5): Data Latency=1 Reg=%20
  Successors:
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %139.sub_32bit:gr64_nosp = ADD32ri8 %139.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 41
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%139
    SU(4): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%139
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %22:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
    SU(9): Data Latency=4 Reg=%22
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
  # preds left       : 8
  # succs left       : 22
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 40
  Predecessors:
    SU(7): Data Latency=1 Reg=%139
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%22
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(44): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(42): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(10):   %23:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 39
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(1): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%23
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %24:gr64_nosp = LEA64r %23:gr64_nosp, 2, %23:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 35
  Predecessors:
    SU(10): Data Latency=4 Reg=%23
  Successors:
    SU(18): Data Latency=1 Reg=%24
    SU(12): Data Latency=1 Reg=%24
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %29:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx100)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 34
  Predecessors:
    SU(11): Data Latency=1 Reg=%24
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%29
    SU(15): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %26:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 35
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%26
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %27:gr64_nosp = LEA64r %26:gr64_nosp, 2, %26:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 31
  Predecessors:
    SU(13): Data Latency=4 Reg=%26
  Successors:
    SU(15): Data Latency=1 Reg=%27
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 30
  Predecessors:
    SU(12): Data Latency=4 Reg=%29
    SU(14): Data Latency=1 Reg=%27
    SU(12): Out  Latency=0
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%29
    SU(16): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   %29:gr32 = ADD32ri8 %29:gr32(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 26
  Predecessors:
    SU(15): Data Latency=4 Reg=%29
    SU(15): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%29
    SU(17): Data Latency=1 Reg=%29
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   MOV32mr $rip, 1, $noreg, @is2, $noreg, %29:gr32 :: (store 4 into @is2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 23
  Predecessors:
    SU(16): Data Latency=1 Reg=%29
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %32:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx108)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 30
  Predecessors:
    SU(11): Data Latency=1 Reg=%24
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%32
    SU(19): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %32:gr32 = nsw INC32r %32:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 26
  Predecessors:
    SU(18): Data Latency=4 Reg=%32
    SU(18): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%32
    SU(20): Data Latency=1 Reg=%32
    SU(21): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   MOV32mr $rip, 1, $noreg, @ie2, $noreg, %32:gr32 :: (store 4 into @ie2)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 25
  Predecessors:
    SU(19): Data Latency=1 Reg=%32
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(21): Anti Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 25
  Predecessors:
    SU(16): Data Latency=1 Reg=%29
    SU(19): Data Latency=1 Reg=%32
    SU(19): Out  Latency=0
    SU(20): Anti Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%32
    SU(22): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 24
  Predecessors:
    SU(21): Data Latency=1 Reg=%32
    SU(21): Out  Latency=0
  Successors:
    SU(24): Data Latency=1 Reg=%32
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %34:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 27
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%34
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(24):   MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
  # preds left       : 17
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 23
  Predecessors:
    SU(22): Data Latency=1 Reg=%32
    SU(23): Ord  Latency=0 Memory
    SU(23): Data Latency=4 Reg=%34
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(44): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(42): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(25):   %35:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 22
  Predecessors:
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(1): Ord  Latency=1 Memory
  Successors:
    SU(26): Data Latency=4 Reg=%35
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(26):   %36:gr64_nosp = LEA64r %35:gr64_nosp, 2, %35:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 18
  Predecessors:
    SU(25): Data Latency=4 Reg=%35
  Successors:
    SU(33): Data Latency=1 Reg=%36
    SU(27): Data Latency=1 Reg=%36
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %41:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx114)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 33
  Height             : 17
  Predecessors:
    SU(26): Data Latency=1 Reg=%36
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(30): Data Latency=4 Reg=%41
    SU(30): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %38:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 18
  Predecessors:
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%38
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(29):   %39:gr64_nosp = LEA64r %38:gr64_nosp, 2, %38:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 14
  Predecessors:
    SU(28): Data Latency=4 Reg=%38
  Successors:
    SU(30): Data Latency=1 Reg=%39
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 37
  Height             : 13
  Predecessors:
    SU(27): Data Latency=4 Reg=%41
    SU(29): Data Latency=1 Reg=%39
    SU(27): Out  Latency=0
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(31): Data Latency=4 Reg=%41
    SU(31): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(31):   %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 41
  Height             : 9
  Predecessors:
    SU(30): Data Latency=4 Reg=%41
    SU(30): Out  Latency=0
  Successors:
    SU(36): Data Latency=1 Reg=%41
    SU(32): Data Latency=1 Reg=%41
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   MOV32mr $rip, 1, $noreg, @is3, $noreg, %41:gr32 :: (store 4 into @is3)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 6
  Predecessors:
    SU(31): Data Latency=1 Reg=%41
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(33):   %44:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx122)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 33
  Height             : 13
  Predecessors:
    SU(26): Data Latency=1 Reg=%36
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(34): Data Latency=4 Reg=%44
    SU(34): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(34):   %44:gr32 = nsw INC32r %44:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 9
  Predecessors:
    SU(33): Data Latency=4 Reg=%44
    SU(33): Out  Latency=0
  Successors:
    SU(36): Data Latency=1 Reg=%44
    SU(35): Data Latency=1 Reg=%44
    SU(36): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   MOV32mr $rip, 1, $noreg, @ie3, $noreg, %44:gr32 :: (store 4 into @ie3)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 38
  Height             : 8
  Predecessors:
    SU(34): Data Latency=1 Reg=%44
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    SU(36): Anti Latency=0
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(36):   %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 8
  Predecessors:
    SU(31): Data Latency=1 Reg=%41
    SU(34): Data Latency=1 Reg=%44
    SU(34): Out  Latency=0
    SU(35): Anti Latency=0
  Successors:
    SU(37): Data Latency=1 Reg=%44
    SU(37): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(37):   %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 7
  Predecessors:
    SU(36): Data Latency=1 Reg=%44
    SU(36): Out  Latency=0
  Successors:
    SU(39): Data Latency=1 Reg=%44
  Pressure Diff      : 
  Single Issue       : false;
SU(38):   %46:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 10
  Predecessors:
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(39): Data Latency=4 Reg=%46
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(39):   MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
  # preds left       : 26
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 6
  Predecessors:
    SU(37): Data Latency=1 Reg=%44
    SU(38): Ord  Latency=0 Memory
    SU(38): Data Latency=4 Reg=%46
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(44): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(42): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(40):   %47:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 45
  Height             : 4
  Predecessors:
    SU(39): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%47
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(41):   MOV32mi $noreg, 4, %47:gr64_nosp, @ir, $noreg, 0 :: (store 4 into %ir.arrayidx127)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 49
  Height             : 0
  Predecessors:
    SU(40): Data Latency=4 Reg=%47
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(42):   %49:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 45
  Height             : 5
  Predecessors:
    SU(39): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(43): Data Latency=4 Reg=%49
    SU(43): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(43):   %49:gr32 = DEC32r %49:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 49
  Height             : 1
  Predecessors:
    SU(42): Data Latency=4 Reg=%49
    SU(42): Out  Latency=0
  Successors:
    SU(44): Data Latency=1 Reg=%49
  Pressure Diff      : 
  Single Issue       : false;
SU(44):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.j)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 50
  Height             : 0
  Predecessors:
    SU(43): Data Latency=1 Reg=%49
    SU(39): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 50
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 41 
  Cand SU(44) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.j)
Bottom Pressure:
GR16=2
  LiveReg: %49
  UpdateRegP: SU(44) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.j)
              to 
  Ready @0c
  BotQ.A TopLatency SU(44) 50c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 43 
  Cand SU(41) ORDER                              
  Cand SU(43) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %49:gr32 = DEC32r %49:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %49
  UpdateRegP: SU(43) %49:gr32 = DEC32r %49:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(43) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 42 
  Cand SU(41) ORDER                              
  Cand SU(42) ORDER                              
Pick Bot ORDER     
Scheduling SU(42) %49:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(42) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 
Scheduling SU(41) MOV32mi $noreg, 4, %47:gr64_nosp, @ir, $noreg, 0 :: (store 4 into %ir.arrayidx127)
Bottom Pressure:
GR16=2
  LiveReg: %47
  UpdateRegP: SU(41) MOV32mi $noreg, 4, %47:gr64_nosp, @ir, $noreg, 0 :: (store 4 into %ir.arrayidx127)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 
Scheduling SU(40) %47:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 39 
Scheduling SU(39) MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
Bottom Pressure:
GR16=4
  LiveReg: %46
  UpdateRegP: SU(39) MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
              to GR16 2
  LiveReg: %44
  UpdateRegP: SU(39) MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
              to 
  Ready @6c
  BotQ.A BotLatency SU(39) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 38 32 
  Cand SU(37) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %46:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
Bottom Pressure:
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(38) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 32 
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %44
  UpdateRegP: SU(37) %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 36 
  Cand SU(32) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %44
  UpdateRegP: SU(35) MOV32mr $rip, 1, $noreg, @ie3, $noreg, %44:gr32 :: (store 4 into @ie3)
              to 
  UpdateRegP: SU(36) %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
              to 
  LiveReg: %41
  UpdateRegP: SU(32) MOV32mr $rip, 1, $noreg, @is3, $noreg, %41:gr32 :: (store 4 into @is3)
              to 
  UpdateRegP: SU(36) %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 35 
  Cand SU(32) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) MOV32mr $rip, 1, $noreg, @ie3, $noreg, %44:gr32 :: (store 4 into @ie3)
Bottom Pressure:
GR16=4
  Ready @8c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 34 
  Cand SU(32) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %44:gr32 = nsw INC32r %44:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %44
  UpdateRegP: SU(34) %44:gr32 = nsw INC32r %44:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 33 
  Cand SU(32) ORDER                              
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %44:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx122)
Bottom Pressure:
GR16=4
  LiveReg: %36
  UpdateRegP: SU(27) %41:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx114)
              to GR16 -2
  UpdateRegP: SU(33) %44:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx122)
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(33) 13c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) MOV32mr $rip, 1, $noreg, @is3, $noreg, %41:gr32 :: (store 4 into @is3)
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %41
  UpdateRegP: SU(31) %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
Bottom Pressure:
GR16=6
  LiveReg: %41
  UpdateRegP: SU(30) %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
              to 
  LiveReg: %39
  UpdateRegP: SU(30) %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
              to GR16 -2
  Ready @13c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 27 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %39:gr64_nosp = LEA64r %38:gr64_nosp, 2, %38:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %38
  UpdateRegP: SU(29) %39:gr64_nosp = LEA64r %38:gr64_nosp, 2, %38:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(29) 14c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 28 
  Cand SU(27) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %38:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:
GR16=4
  Ready @18c
  BotQ.A BotLatency SU(28) 18c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 
Scheduling SU(27) %41:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx114)
Bottom Pressure:
GR16=2
  Ready @17c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) %36:gr64_nosp = LEA64r %35:gr64_nosp, 2, %35:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %35
  UpdateRegP: SU(26) %36:gr64_nosp = LEA64r %35:gr64_nosp, 2, %35:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @18c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %35:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @22c
  BotQ.A BotLatency SU(25) 22c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
Bottom Pressure:
GR16=4
  LiveReg: %34
  UpdateRegP: SU(24) MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
              to GR16 2
  LiveReg: %32
  UpdateRegP: SU(24) MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
              to 
  Ready @23c
  BotQ.A BotLatency SU(24) 23c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 23 17 
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %34:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
Bottom Pressure:
GR16=2
  Ready @27c
  BotQ.A BotLatency SU(23) 27c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 17 
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %32
  UpdateRegP: SU(22) %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @24c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 21 
  Cand SU(17) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %32
  UpdateRegP: SU(20) MOV32mr $rip, 1, $noreg, @ie2, $noreg, %32:gr32 :: (store 4 into @ie2)
              to 
  UpdateRegP: SU(21) %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
              to 
  LiveReg: %29
  UpdateRegP: SU(17) MOV32mr $rip, 1, $noreg, @is2, $noreg, %29:gr32 :: (store 4 into @is2)
              to 
  UpdateRegP: SU(21) %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @25c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 20 
  Cand SU(17) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV32mr $rip, 1, $noreg, @ie2, $noreg, %32:gr32 :: (store 4 into @ie2)
Bottom Pressure:
GR16=4
  Ready @25c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 19 
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %32:gr32 = nsw INC32r %32:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %32
  UpdateRegP: SU(19) %32:gr32 = nsw INC32r %32:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @26c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 18 
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %32:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx108)
Bottom Pressure:
GR16=4
  LiveReg: %24
  UpdateRegP: SU(12) %29:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx100)
              to GR16 -2
  UpdateRegP: SU(18) %32:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx108)
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(18) 30c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) MOV32mr $rip, 1, $noreg, @is2, $noreg, %29:gr32 :: (store 4 into @is2)
Bottom Pressure:
GR16=4
  Ready @23c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %29:gr32 = ADD32ri8 %29:gr32(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %29
  UpdateRegP: SU(16) %29:gr32 = ADD32ri8 %29:gr32(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
Bottom Pressure:
GR16=6
  LiveReg: %29
  UpdateRegP: SU(15) %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
              to 
  LiveReg: %27
  UpdateRegP: SU(15) %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
              to GR16 -2
  Ready @30c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %27:gr64_nosp = LEA64r %26:gr64_nosp, 2, %26:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %26
  UpdateRegP: SU(14) %27:gr64_nosp = LEA64r %26:gr64_nosp, 2, %26:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @31c
  BotQ.A BotLatency SU(14) 31c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %26:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:
GR16=4
  Ready @35c
  BotQ.A BotLatency SU(13) 35c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %29:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx100)
Bottom Pressure:
GR16=2
  Ready @34c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %24:gr64_nosp = LEA64r %23:gr64_nosp, 2, %23:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %23
  UpdateRegP: SU(11) %24:gr64_nosp = LEA64r %23:gr64_nosp, 2, %23:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @35c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %23:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @39c
  BotQ.A BotLatency SU(10) 39c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
Bottom Pressure:
GR16=4
  LiveReg: %22
  UpdateRegP: SU(9) MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
              to GR16 2
  LiveReg: %139
  UpdateRegP: SU(9) MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
              to 
  Ready @40c
  BotQ.A BotLatency SU(9) 40c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 6 2 1 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %22:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
Bottom Pressure:
GR16=2
  Ready @44c
  BotQ.A BotLatency SU(8) 44c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 6 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %139.sub_32bit:gr64_nosp = ADD32ri8 %139.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %139
  UpdateRegP: SU(5) %20:gr32 = LEA64_32r %139:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  UpdateRegP: SU(7) %139.sub_32bit:gr64_nosp = ADD32ri8 %139.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @41c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 6 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr $rip, 1, $noreg, @ie1, $noreg, %20:gr32 :: (store 4 into @ie1)
Bottom Pressure:
GR16=4
  LiveReg: %20
  UpdateRegP: SU(6) MOV32mr $rip, 1, $noreg, @ie1, $noreg, %20:gr32 :: (store 4 into @ie1)
              to 
  Ready @40c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %20:gr32 = LEA64_32r %139:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
GR16=2
  Ready @41c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %139.sub_32bit:gr64_nosp = MOV32rm %stack.7.ng, 4, %18:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx948)
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(4) undef %139.sub_32bit:gr64_nosp = MOV32rm %stack.7.ng, 4, %18:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx948)
              to GR16 -2
  Ready @45c
  BotQ.A BotLatency SU(4) 45c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %18:gr64_nosp = LEA64r %16:gr64_nosp, 2, %16:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %16
  UpdateRegP: SU(1) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %16.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
              to 
  UpdateRegP: SU(3) %18:gr64_nosp = LEA64r %16:gr64_nosp, 2, %16:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @46c
  BotQ.A BotLatency SU(3) 46c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi $rip, 1, $noreg, @is1, $noreg, 2 :: (store 4 into @is1)
Bottom Pressure:
GR16=2
  Ready @40c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %16.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
Bottom Pressure:
GR16=2
  Ready @40c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @50c
  BotQ.A BotLatency SU(0) 50c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %16:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %16.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
SU(2):   MOV32mi $rip, 1, $noreg, @is1, $noreg, 2 :: (store 4 into @is1)
SU(3):   %18:gr64_nosp = LEA64r %16:gr64_nosp, 2, %16:gr64_nosp, 0, $noreg
SU(4):   undef %139.sub_32bit:gr64_nosp = MOV32rm %stack.7.ng, 4, %18:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx948)
SU(5):   %20:gr32 = LEA64_32r %139:gr64_nosp, 1, $noreg, 1, $noreg
SU(6):   MOV32mr $rip, 1, $noreg, @ie1, $noreg, %20:gr32 :: (store 4 into @ie1)
SU(7):   %139.sub_32bit:gr64_nosp = ADD32ri8 %139.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
SU(8):   %22:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
SU(9):   MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
SU(10):   %23:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(11):   %24:gr64_nosp = LEA64r %23:gr64_nosp, 2, %23:gr64_nosp, 0, $noreg
SU(12):   %29:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx100)
SU(13):   %26:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(14):   %27:gr64_nosp = LEA64r %26:gr64_nosp, 2, %26:gr64_nosp, 0, $noreg
SU(15):   %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
SU(16):   %29:gr32 = ADD32ri8 %29:gr32(tied-def 0), 2, implicit-def dead $eflags
SU(17):   MOV32mr $rip, 1, $noreg, @is2, $noreg, %29:gr32 :: (store 4 into @is2)
SU(18):   %32:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx108)
SU(19):   %32:gr32 = nsw INC32r %32:gr32(tied-def 0), implicit-def dead $eflags
SU(20):   MOV32mr $rip, 1, $noreg, @ie2, $noreg, %32:gr32 :: (store 4 into @ie2)
SU(21):   %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
SU(22):   %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 3, implicit-def dead $eflags
SU(23):   %34:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
SU(24):   MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
SU(25):   %35:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(26):   %36:gr64_nosp = LEA64r %35:gr64_nosp, 2, %35:gr64_nosp, 0, $noreg
SU(27):   %41:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx114)
SU(28):   %38:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(29):   %39:gr64_nosp = LEA64r %38:gr64_nosp, 2, %38:gr64_nosp, 0, $noreg
SU(30):   %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
SU(31):   %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 2, implicit-def dead $eflags
SU(32):   MOV32mr $rip, 1, $noreg, @is3, $noreg, %41:gr32 :: (store 4 into @is3)
SU(33):   %44:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx122)
SU(34):   %44:gr32 = nsw INC32r %44:gr32(tied-def 0), implicit-def dead $eflags
SU(35):   MOV32mr $rip, 1, $noreg, @ie3, $noreg, %44:gr32 :: (store 4 into @ie3)
SU(36):   %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
SU(37):   %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 3, implicit-def dead $eflags
SU(38):   %46:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
SU(39):   MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
SU(40):   %47:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(41):   MOV32mi $noreg, 4, %47:gr64_nosp, @ir, $noreg, 0 :: (store 4 into %ir.arrayidx127)
SU(42):   %49:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(43):   %49:gr32 = DEC32r %49:gr32(tied-def 0), implicit-def dead $eflags
SU(44):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.j)

********** MI Scheduling **********
setup:%bb.17 for.body131
  From: %140:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
    To: JMP_1 %bb.16
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %140:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(6): Data Latency=4 Reg=%140
    SU(5): Data Latency=4 Reg=%140
    SU(4): Data Latency=4 Reg=%140
    SU(3): Data Latency=4 Reg=%140
    SU(2): Data Latency=4 Reg=%140
    SU(1): Data Latency=4 Reg=%140
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %82:gr32 = MOV32rm $noreg, 4, %140:gr64_nosp, @m1 + 4, $noreg :: (load 4 from %ir.arrayidx137)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(0): Data Latency=4 Reg=%140
  Successors:
    SU(2): Data Latency=4 Reg=%82
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%82
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%140
  Successors:
    SU(3): Data Latency=4 Reg=%82
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%82
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%140
  Successors:
    SU(4): Data Latency=4 Reg=%82
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%82
    SU(3): Out  Latency=0
    SU(0): Data Latency=4 Reg=%140
  Successors:
    SU(5): Data Latency=4 Reg=%82
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%82
    SU(4): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%140
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   %84:gr32 = LEA64_32r %140:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%140
  Successors:
    SU(7): Data Latency=1 Reg=%84
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%84
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j)
Bottom Pressure:
GR16=2
  LiveReg: %84
  UpdateRegP: SU(7) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(6) %84:gr32 = LEA64_32r %140:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %140
  UpdateRegP: SU(1) %82:gr32 = MOV32rm $noreg, 4, %140:gr64_nosp, @m1 + 4, $noreg :: (load 4 from %ir.arrayidx137)
              to GR16 -2
  UpdateRegP: SU(2) %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
              to 
  UpdateRegP: SU(3) %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
              to 
  UpdateRegP: SU(4) %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
              to 
  UpdateRegP: SU(5) MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
              to GR16 2
  UpdateRegP: SU(6) %84:gr32 = LEA64_32r %140:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
Bottom Pressure:
GR16=4
  LiveReg: %82
  UpdateRegP: SU(5) MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 20c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
Bottom Pressure:
GR16=4
  LiveReg: %82
  UpdateRegP: SU(4) %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
Bottom Pressure:
GR16=4
  LiveReg: %82
  UpdateRegP: SU(3) %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
Bottom Pressure:
GR16=4
  LiveReg: %82
  UpdateRegP: SU(2) %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %82:gr32 = MOV32rm $noreg, 4, %140:gr64_nosp, @m1 + 4, $noreg :: (load 4 from %ir.arrayidx137)
Bottom Pressure:
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %140:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:

  Ready @20c
  BotQ.A BotLatency SU(0) 20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %140:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
SU(1):   %82:gr32 = MOV32rm $noreg, 4, %140:gr64_nosp, @m1 + 4, $noreg :: (load 4 from %ir.arrayidx137)
SU(2):   %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
SU(3):   %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
SU(4):   %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
SU(5):   MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
SU(6):   %84:gr32 = LEA64_32r %140:gr64_nosp, 1, $noreg, -1, $noreg
SU(7):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j)

********** MI Scheduling **********
setup:%bb.19 if.then
  From: $rdi = MOV32ri64 @.str.49
    To: PUSH64r %120:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.49
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %56.sub_32bit:gr64_nosp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %58:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %60:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %61:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %62:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   dead $eax = MOV32ri 0, implicit-def $al
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %120:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) dead $eax = MOV32ri 0, implicit-def $al
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %62:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %61:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %60:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %58:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %56.sub_32bit:gr64_nosp
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.49
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   $rdi = MOV32ri64 @.str.49
SU(1):   $esi = COPY %56.sub_32bit:gr64_nosp
SU(2):   $edx = COPY %58:gr32
SU(3):   $ecx = COPY %60:gr32
SU(4):   $r8d = COPY %61:gr32
SU(5):   $r9d = COPY %62:gr32
SU(6):   dead $eax = MOV32ri 0, implicit-def $al

********** MI Scheduling **********
setup:%bb.19 if.then
  From: %56:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: ADJCALLSTACKDOWN64 72, 0, 72, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=28
Live In: 
Live Out: %120 %122 %124 %126 %128 %130 %132 %134 %136 %62 %61 %60 %56 %58 
Live Thru: 
  LiveReg: %120
  LiveReg: %122
  LiveReg: %124
  LiveReg: %126
  LiveReg: %128
  LiveReg: %130
  LiveReg: %132
  LiveReg: %134
  LiveReg: %136
  LiveReg: %62
  LiveReg: %61
  LiveReg: %60
  LiveReg: %56
  UpdateRegP: SU(2) %59:gr64_nosp = LEA64r %56:gr64_nosp, 2, %56:gr64_nosp, 0, $noreg
              to GR16 -2
  LiveReg: %58
Top Pressure:

Bottom Pressure:
GR16=28
GR16 Limit 26 Actual 28
Excess PSets: GR16 
SU(0):   %56:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%56
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %58:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %59:gr64_nosp = LEA64r %56:gr64_nosp, 2, %56:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%56
  Successors:
    SU(5): Data Latency=1 Reg=%59
    SU(4): Data Latency=1 Reg=%59
    SU(3): Data Latency=1 Reg=%59
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %60:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx1569)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%59
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %61:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%59
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %62:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx162)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%59
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %63:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(7): Data Latency=4 Reg=%63
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   undef %136.sub_32bit:gr64_with_sub_8bit = MOV32rm %63:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.100)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(6): Data Latency=4 Reg=%63
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %65:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(9): Data Latency=4 Reg=%65
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm %65:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.102)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(8): Data Latency=4 Reg=%65
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %67:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(11): Data Latency=4 Reg=%67
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %67:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.104)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%67
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   undef %130.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   undef %128.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   undef %122.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   undef %120.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 72, 0, 72, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 13
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=3 Artificial
    SU(16): Ord  Latency=3 Artificial
    SU(15): Ord  Latency=3 Artificial
    SU(14): Ord  Latency=3 Artificial
    SU(13): Ord  Latency=3 Artificial
    SU(12): Ord  Latency=3 Artificial
    SU(11): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 15 14 13 12 11 9 7 5 4 3 1 
  Try  SU(17) GR16:-2
  Cand SU(17) ORDER                              
  Try  SU(16) GR16:-2
  Try  SU(15) GR16:-2
  Try  SU(14) GR16:-2
  Try  SU(13) GR16:-2
  Try  SU(12) GR16:-2
  Try  SU(1) GR16:-2
Pick Bot REG-EXCESS
Scheduling SU(17) undef %120.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
Bottom Pressure:
GR16=26
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
  BotQ.A BotLatency SU(17) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 14 13 12 11 9 7 5 4 3 
  Cand SU(1) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) undef %122.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
Bottom Pressure:
GR16=24
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 15 14 13 12 11 9 7 5 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
Bottom Pressure:
GR16=22
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 14 13 12 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
Bottom Pressure:
GR16=20
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 13 12 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %128.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
Bottom Pressure:
GR16=18
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 7 12 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %130.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
Bottom Pressure:
GR16=16
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 7 9 11 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %67:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.104)
Bottom Pressure:
GR16=16
  LiveReg: %67
  UpdateRegP: SU(11) undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %67:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.104)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(11) 4c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %67:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
Bottom Pressure:
GR16=14
  GR16: 28 > 26(+ 0 livethru)
  Ready @7c
  BotQ.A BotLatency SU(10) 7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm %65:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.102)
Bottom Pressure:
GR16=14
  LiveReg: %65
  UpdateRegP: SU(9) undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm %65:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.102)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(9) 4c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %65:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
Bottom Pressure:
GR16=12
  GR16: 28 > 26(+ 0 livethru)
  Ready @7c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) undef %136.sub_32bit:gr64_with_sub_8bit = MOV32rm %63:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.100)
Bottom Pressure:
GR16=12
  LiveReg: %63
  UpdateRegP: SU(7) undef %136.sub_32bit:gr64_with_sub_8bit = MOV32rm %63:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.100)
              to GR16 -2
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %63:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
Bottom Pressure:
GR16=10
  GR16: 28 > 26(+ 0 livethru)
  Ready @7c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %62:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx162)
Bottom Pressure:
GR16=10
  LiveReg: %59
  UpdateRegP: SU(3) %60:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx1569)
              to GR16 -2
  UpdateRegP: SU(4) %61:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
              to GR16 -2
  UpdateRegP: SU(5) %62:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx162)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %61:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
Bottom Pressure:
GR16=8
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %60:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx1569)
Bottom Pressure:
GR16=6
  GR16: 28 > 26(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %59:gr64_nosp = LEA64r %56:gr64_nosp, 2, %56:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=4
  GR16: 28 > 26(+ 0 livethru)
  Ready @4c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %58:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:
GR16=2
  GR16: 28 > 26(+ 0 livethru)
  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %56:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  GR16: 28 > 26(+ 0 livethru)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %56:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %58:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(2):   %59:gr64_nosp = LEA64r %56:gr64_nosp, 2, %56:gr64_nosp, 0, $noreg
SU(3):   %60:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx1569)
SU(4):   %61:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
SU(5):   %62:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx162)
SU(6):   %63:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
SU(7):   undef %136.sub_32bit:gr64_with_sub_8bit = MOV32rm %63:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.100)
SU(8):   %65:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
SU(9):   undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm %65:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.102)
SU(10):   %67:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
SU(11):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %67:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.104)
SU(12):   undef %130.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
SU(13):   undef %128.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
SU(14):   undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
SU(15):   undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
SU(16):   undef %122.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
SU(17):   undef %120.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)

********** MI Scheduling **********
setup:%bb.19 if.then
  From: $rdi = MOV32ri64 @.str.48
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.48
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   $rdi = MOV32ri64 @.str.48
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
setup:%bb.19 if.then
  From: $rdi = MOV32ri64 @.str.47
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.47
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   $rdi = MOV32ri64 @.str.47
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** INTERVALS **********
DH [0B,16r:0)[3744r,4112r:1)  0@0B-phi 1@3744r
DIL [0B,48r:0)[3216r,3248r:3)[3312r,3344r:2)[3712r,4112r:1)  0@0B-phi 1@3712r 2@3312r 3@3216r
DIH [0B,48r:0)[3216r,3248r:3)[3312r,3344r:2)[3712r,4112r:1)  0@0B-phi 1@3712r 2@3312r 3@3216r
DL [0B,16r:0)[3744r,4112r:1)  0@0B-phi 1@3744r
HDI [0B,48r:0)[3216r,3248r:3)[3312r,3344r:2)[3712r,4112r:1)  0@0B-phi 1@3712r 2@3312r 3@3216r
HDX [0B,16r:0)[3744r,4112r:1)  0@0B-phi 1@3744r
SIL [0B,32r:0)[3728r,4112r:1)  0@0B-phi 1@3728r
SIH [0B,32r:0)[3728r,4112r:1)  0@0B-phi 1@3728r
HSI [0B,32r:0)[3728r,4112r:1)  0@0B-phi 1@3728r
%0 [48r,64r:0)  0@48r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [16r,96r:0)  0@16r weight:0.000000e+00
%3 [112r,144r:0)  0@112r weight:0.000000e+00
%4 [128r,160r:0)  0@128r weight:0.000000e+00
%5 [144r,160r:0)  0@144r weight:0.000000e+00
%6 [176r,208r:0)  0@176r weight:0.000000e+00
%7 [192r,224r:0)  0@192r weight:0.000000e+00
%8 [208r,224r:0)  0@208r weight:0.000000e+00
%9 [240r,272r:0)  0@240r weight:0.000000e+00
%10 [256r,288r:0)  0@256r weight:0.000000e+00
%11 [272r,288r:0)  0@272r weight:0.000000e+00
%13 [304r,336r:0)[336r,352r:1)  0@304r 1@336r weight:0.000000e+00
%14 [832r,848r:0)  0@832r weight:0.000000e+00
%15 [1168r,1184r:0)  0@1168r weight:0.000000e+00
%16 [1824r,1888r:0)  0@1824r weight:0.000000e+00
%18 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%20 [1936r,1952r:0)  0@1936r weight:0.000000e+00
%22 [2000r,2016r:0)  0@2000r weight:0.000000e+00
%23 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%24 [2048r,2192r:0)  0@2048r weight:0.000000e+00
%26 [2080r,2096r:0)  0@2080r weight:0.000000e+00
%27 [2096r,2128r:0)  0@2096r weight:0.000000e+00
%29 [2064r,2128r:2)[2128r,2160r:0)[2160r,2272r:1)  0@2128r 1@2160r 2@2064r weight:0.000000e+00
%32 [2192r,2224r:2)[2224r,2272r:0)[2272r,2304r:1)[2304r,2336r:3)  0@2224r 1@2272r 2@2192r 3@2304r weight:0.000000e+00
%34 [2320r,2336r:0)  0@2320r weight:0.000000e+00
%35 [2352r,2368r:0)  0@2352r weight:0.000000e+00
%36 [2368r,2512r:0)  0@2368r weight:0.000000e+00
%38 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%39 [2416r,2448r:0)  0@2416r weight:0.000000e+00
%41 [2384r,2448r:2)[2448r,2480r:0)[2480r,2592r:1)  0@2448r 1@2480r 2@2384r weight:0.000000e+00
%44 [2512r,2544r:2)[2544r,2592r:0)[2592r,2624r:1)[2624r,2656r:3)  0@2544r 1@2592r 2@2512r 3@2624r weight:0.000000e+00
%46 [2640r,2656r:0)  0@2640r weight:0.000000e+00
%47 [2672r,2688r:0)  0@2672r weight:0.000000e+00
%49 [2704r,2736r:0)[2736r,2752r:1)  0@2704r 1@2736r weight:0.000000e+00
%56 [3376r,3728r:0)  0@3376r weight:0.000000e+00
%58 [3408r,3744r:0)  0@3408r weight:0.000000e+00
%59 [3424r,3472r:0)  0@3424r weight:0.000000e+00
%60 [3440r,3760r:0)  0@3440r weight:0.000000e+00
%61 [3456r,3776r:0)  0@3456r weight:0.000000e+00
%62 [3472r,3792r:0)  0@3472r weight:0.000000e+00
%63 [3488r,3504r:0)  0@3488r weight:0.000000e+00
%65 [3520r,3536r:0)  0@3520r weight:0.000000e+00
%67 [3552r,3568r:0)  0@3552r weight:0.000000e+00
%82 [2880r,2912r:2)[2912r,2944r:0)[2944r,2976r:1)[2976r,2992r:3)  0@2912r 1@2944r 2@2880r 3@2976r weight:0.000000e+00
%84 [3024r,3040r:0)  0@3024r weight:0.000000e+00
%89 [1632r,1712r:0)  0@1632r weight:0.000000e+00
%90 [1648r,1664r:0)  0@1648r weight:0.000000e+00
%91 [1680r,1696r:0)  0@1680r weight:0.000000e+00
%92 [1712r,1728r:0)  0@1712r weight:0.000000e+00
%93 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%95 [1376r,1408r:0)[1408r,1424r:1)  0@1376r 1@1408r weight:0.000000e+00
%96 [1424r,1520r:0)  0@1424r weight:0.000000e+00
%97 [1440r,1472r:0)  0@1440r weight:0.000000e+00
%98 [1456r,1536r:0)  0@1456r weight:0.000000e+00
%100 [1472r,1504r:0)[1504r,1536r:1)  0@1472r 1@1504r weight:0.000000e+00
%101 [1520r,1536r:0)  0@1520r weight:0.000000e+00
%104 [976r,1056r:0)  0@976r weight:0.000000e+00
%105 [992r,1008r:0)  0@992r weight:0.000000e+00
%106 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%107 [1056r,1072r:0)  0@1056r weight:0.000000e+00
%108 [1104r,1120r:0)  0@1104r weight:0.000000e+00
%111 [544r,576r:0)  0@544r weight:0.000000e+00
%112 [560r,720r:0)  0@560r weight:0.000000e+00
%113 [576r,592r:0)  0@576r weight:0.000000e+00
%114 [592r,720r:0)  0@592r weight:0.000000e+00
%115 [608r,672r:0)  0@608r weight:0.000000e+00
%117 [624r,640r:2)[640r,672r:0)[672r,704r:1)[704r,720r:3)  0@640r 1@672r 2@624r 3@704r weight:0.000000e+00
%120 [3664r,3840r:0)  0@3664r weight:0.000000e+00
%122 [3648r,3872r:0)  0@3648r weight:0.000000e+00
%124 [3632r,3904r:0)  0@3632r weight:0.000000e+00
%126 [3616r,3936r:0)  0@3616r weight:0.000000e+00
%128 [3600r,3968r:0)  0@3600r weight:0.000000e+00
%130 [3584r,4000r:0)  0@3584r weight:0.000000e+00
%132 [3568r,4032r:0)  0@3568r weight:0.000000e+00
%134 [3536r,4064r:0)  0@3536r weight:0.000000e+00
%136 [3504r,4096r:0)  0@3504r weight:0.000000e+00
%137 [944r,1104r:0)  0@944r weight:0.000000e+00
%138 [1600r,1760r:0)  0@1600r weight:0.000000e+00
%139 [1904r,1984r:0)[1984r,2016r:1)  0@1904r 1@1984r weight:0.000000e+00
%140 [2848r,3024r:0)  0@2848r weight:0.000000e+00
RegMasks: 3248r 3344r 4112r
********** MACHINEINSTRS **********
# Machine code for function setup: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=120, align=16, at location [SP+8]
  fi#7: size=120, align=16, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %2:gr64 = COPY $rdx
32B	  %1:gr64 = COPY $rsi
48B	  %0:gr64 = COPY $rdi
64B	  MOV64mr %stack.0.n1.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.n1.addr)
80B	  MOV64mr %stack.1.n2.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.n2.addr)
96B	  MOV64mr %stack.2.n3.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.n3.addr)
112B	  %3:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
128B	  %4:gr32 = MOV32rm $noreg, 4, %3:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
144B	  %5:gr64_nosp = LEA64r %3:gr64_nosp, 2, %3:gr64_nosp, 0, $noreg
160B	  MOV32mr %stack.7.ng, 4, %5:gr64_nosp, 0, $noreg, %4:gr32 :: (store 4 into %ir.arrayidx33)
176B	  %6:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
192B	  %7:gr32 = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx5)
208B	  %8:gr64_nosp = LEA64r %6:gr64_nosp, 2, %6:gr64_nosp, 0, $noreg
224B	  MOV32mr %stack.7.ng, 4, %8:gr64_nosp, 4, $noreg, %7:gr32 :: (store 4 into %ir.arrayidx8)
240B	  %9:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
256B	  %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx10)
272B	  %11:gr64_nosp = LEA64r %9:gr64_nosp, 2, %9:gr64_nosp, 0, $noreg
288B	  MOV32mr %stack.7.ng, 4, %11:gr64_nosp, 8, $noreg, %10:gr32 :: (store 4 into %ir.arrayidx13)
304B	  %13:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
336B	  %13:gr32 = DEC32r %13:gr32(tied-def 0), implicit-def dead $eflags
352B	  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %13:gr32 :: (store 4 into %ir.k)

368B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.5
	  successors: %bb.2(0x7c000000), %bb.6(0x04000000); %bb.2(96.88%), %bb.6(3.12%)

384B	  CMP32mi8 %stack.3.k, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
400B	  JCC_1 %bb.6, 14, implicit killed $eflags
416B	  JMP_1 %bb.2

432B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  MOV32mi %stack.5.ax, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ax)

464B	bb.3.for.cond14:
	; predecessors: %bb.2, %bb.4
	  successors: %bb.4(0x7c000000), %bb.5(0x04000000); %bb.4(96.88%), %bb.5(3.12%)

480B	  CMP32mi8 %stack.5.ax, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load 4 from %ir.ax)
496B	  JCC_1 %bb.5, 15, implicit killed $eflags
512B	  JMP_1 %bb.4

528B	bb.4.for.body16:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

544B	  %111:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
560B	  %112:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
576B	  %113:gr64_nosp = LEA64r %111:gr64_nosp, 2, %111:gr64_nosp, 0, $noreg
592B	  %114:gr64 = LEA64r %stack.7.ng, 4, %113:gr64_nosp, 0, $noreg
608B	  %115:gr32 = MOV32rm %114:gr64, 4, %112:gr64_nosp, 12, $noreg :: (load 4 from %ir.arrayidx20)
624B	  %117:gr32 = COPY %115:gr32
640B	  %117:gr32 = SHR32ri %117:gr32(tied-def 0), 31, implicit-def dead $eflags
672B	  %117:gr32 = ADD32rr %117:gr32(tied-def 0), %115:gr32, implicit-def dead $eflags
704B	  %117:gr32 = SAR32r1 %117:gr32(tied-def 0), implicit-def dead $eflags
720B	  MOV32mr %114:gr64, 4, %112:gr64_nosp, 0, $noreg, %117:gr32 :: (store 4 into %ir.arrayidx24)
736B	  INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
752B	  JMP_1 %bb.3

768B	bb.5.for.end:
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

784B	  DEC32m %stack.3.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
800B	  JMP_1 %bb.1

816B	bb.6.for.end26:
	; predecessors: %bb.1
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

832B	  %14:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
848B	  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %14:gr32 :: (store 4 into %ir.k)

864B	bb.7.for.cond27:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

880B	  CMP32mi8 %stack.3.k, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
896B	  JCC_1 %bb.9, 14, implicit killed $eflags
912B	  JMP_1 %bb.8

928B	bb.8.for.body29:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

944B	  %137:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
976B	  %104:gr64_nosp = LEA64r %137:gr64_nosp, 2, %137:gr64_nosp, 0, $noreg
992B	  %105:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx324)
1008B	  MOV32mr $noreg, 4, %137:gr64_nosp, @nx, $noreg, %105:gr32 :: (store 4 into %ir.arrayidx34)
1024B	  %106:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx37)
1040B	  MOV32mr $noreg, 4, %137:gr64_nosp, @ny, $noreg, %106:gr32 :: (store 4 into %ir.arrayidx39)
1056B	  %107:gr32 = MOV32rm %stack.7.ng, 4, %104:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx42)
1072B	  MOV32mr $noreg, 4, %137:gr64_nosp, @nz, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx44)
1104B	  %108:gr32 = LEA64_32r %137:gr64_nosp, 1, $noreg, -1, $noreg
1120B	  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %108:gr32 :: (store 4 into %ir.k)
1136B	  JMP_1 %bb.7

1152B	bb.9.for.end47:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1168B	  %15:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
1184B	  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.k)

1200B	bb.10.for.cond48:
	; predecessors: %bb.9, %bb.14
	  successors: %bb.11(0x7c000000), %bb.15(0x04000000); %bb.11(96.88%), %bb.15(3.12%)

1216B	  CMP32mi8 %stack.3.k, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
1232B	  JCC_1 %bb.15, 14, implicit killed $eflags
1248B	  JMP_1 %bb.11

1264B	bb.11.for.body50:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

1280B	  MOV32mi %stack.5.ax, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.ax)

1296B	bb.12.for.cond51:
	; predecessors: %bb.11, %bb.13
	  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

1312B	  CMP32mi8 %stack.5.ax, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load 4 from %ir.ax)
1328B	  JCC_1 %bb.14, 15, implicit killed $eflags
1344B	  JMP_1 %bb.13

1360B	bb.13.for.body53:
	; predecessors: %bb.12
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

1376B	  %95:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
1408B	  %95:gr64_nosp = SHL64ri %95:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
1424B	  %96:gr64_nosp = LEA64r %95:gr64_nosp, 2, %95:gr64_nosp, 0, $noreg
1440B	  %97:gr64 = LEA64r %stack.7.ng, 1, %96:gr64_nosp, 0, $noreg
1456B	  %98:gr64_nosp = MOVSX64rm32 %stack.5.ax, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ax)
1472B	  %100:gr32 = MOV32rm %97:gr64, 4, %98:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx57)
1504B	  %100:gr32 = nsw ADD32ri8 %100:gr32(tied-def 0), 2, implicit-def dead $eflags
1520B	  %101:gr64 = LEA64r %stack.6.mi, 1, %96:gr64_nosp, 0, $noreg
1536B	  MOV32mr %101:gr64, 4, %98:gr64_nosp, 0, $noreg, %100:gr32 :: (store 4 into %ir.arrayidx62)
1552B	  INC32m %stack.5.ax, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.ax), (dereferenceable load 4 from %ir.ax)
1568B	  JMP_1 %bb.12

1584B	bb.14.for.end65:
	; predecessors: %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1600B	  %138:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
1632B	  %89:gr64_nosp = LEA64r %138:gr64_nosp, 2, %138:gr64_nosp, 0, $noreg
1648B	  %90:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx685)
1664B	  MOV32mr $noreg, 4, %138:gr64_nosp, @m1, $noreg, %90:gr32 :: (store 4 into %ir.arrayidx70)
1680B	  %91:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx73)
1696B	  MOV32mr $noreg, 4, %138:gr64_nosp, @m2, $noreg, %91:gr32 :: (store 4 into %ir.arrayidx75)
1712B	  %92:gr32 = MOV32rm %stack.6.mi, 4, %89:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx78)
1728B	  MOV32mr $noreg, 4, %138:gr64_nosp, @m3, $noreg, %92:gr32 :: (store 4 into %ir.arrayidx80)
1760B	  %93:gr32 = LEA64_32r %138:gr64_nosp, 1, $noreg, -1, $noreg
1776B	  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %93:gr32 :: (store 4 into %ir.k)
1792B	  JMP_1 %bb.10

1808B	bb.15.for.end83:
	; predecessors: %bb.10
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

1824B	  %16:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
1856B	  MOV32mr %stack.3.k, 1, $noreg, 0, $noreg, %16.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
1872B	  MOV32mi $rip, 1, $noreg, @is1, $noreg, 2 :: (store 4 into @is1)
1888B	  %18:gr64_nosp = LEA64r %16:gr64_nosp, 2, %16:gr64_nosp, 0, $noreg
1904B	  undef %139.sub_32bit:gr64_nosp = MOV32rm %stack.7.ng, 4, %18:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx948)
1936B	  %20:gr32 = LEA64_32r %139:gr64_nosp, 1, $noreg, 1, $noreg
1952B	  MOV32mr $rip, 1, $noreg, @ie1, $noreg, %20:gr32 :: (store 4 into @ie1)
1984B	  %139.sub_32bit:gr64_nosp = ADD32ri8 %139.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
2000B	  %22:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
2016B	  MOV32mr %22:gr64, 1, $noreg, 0, $noreg, %139.sub_32bit:gr64_nosp :: (store 4 into %ir.59)
2032B	  %23:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
2048B	  %24:gr64_nosp = LEA64r %23:gr64_nosp, 2, %23:gr64_nosp, 0, $noreg
2064B	  %29:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx100)
2080B	  %26:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
2096B	  %27:gr64_nosp = LEA64r %26:gr64_nosp, 2, %26:gr64_nosp, 0, $noreg
2128B	  %29:gr32 = SUB32rm %29:gr32(tied-def 0), %stack.7.ng, 4, %27:gr64_nosp, 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx104)
2160B	  %29:gr32 = ADD32ri8 %29:gr32(tied-def 0), 2, implicit-def dead $eflags
2176B	  MOV32mr $rip, 1, $noreg, @is2, $noreg, %29:gr32 :: (store 4 into @is2)
2192B	  %32:gr32 = MOV32rm %stack.7.ng, 4, %24:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx108)
2224B	  %32:gr32 = nsw INC32r %32:gr32(tied-def 0), implicit-def dead $eflags
2240B	  MOV32mr $rip, 1, $noreg, @ie2, $noreg, %32:gr32 :: (store 4 into @ie2)
2272B	  %32:gr32 = SUB32rr %32:gr32(tied-def 0), %29:gr32, implicit-def dead $eflags
2304B	  %32:gr32 = ADD32ri8 %32:gr32(tied-def 0), 3, implicit-def dead $eflags
2320B	  %34:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
2336B	  MOV32mr %34:gr64, 1, $noreg, 0, $noreg, %32:gr32 :: (store 4 into %ir.68)
2352B	  %35:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
2368B	  %36:gr64_nosp = LEA64r %35:gr64_nosp, 2, %35:gr64_nosp, 0, $noreg
2384B	  %41:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx114)
2400B	  %38:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
2416B	  %39:gr64_nosp = LEA64r %38:gr64_nosp, 2, %38:gr64_nosp, 0, $noreg
2448B	  %41:gr32 = SUB32rm %41:gr32(tied-def 0), %stack.7.ng, 4, %39:gr64_nosp, 8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx118)
2480B	  %41:gr32 = ADD32ri8 %41:gr32(tied-def 0), 2, implicit-def dead $eflags
2496B	  MOV32mr $rip, 1, $noreg, @is3, $noreg, %41:gr32 :: (store 4 into @is3)
2512B	  %44:gr32 = MOV32rm %stack.7.ng, 4, %36:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx122)
2544B	  %44:gr32 = nsw INC32r %44:gr32(tied-def 0), implicit-def dead $eflags
2560B	  MOV32mr $rip, 1, $noreg, @ie3, $noreg, %44:gr32 :: (store 4 into @ie3)
2592B	  %44:gr32 = SUB32rr %44:gr32(tied-def 0), %41:gr32, implicit-def dead $eflags
2624B	  %44:gr32 = ADD32ri8 %44:gr32(tied-def 0), 3, implicit-def dead $eflags
2640B	  %46:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
2656B	  MOV32mr %46:gr64, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.77)
2672B	  %47:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
2688B	  MOV32mi $noreg, 4, %47:gr64_nosp, @ir, $noreg, 0 :: (store 4 into %ir.arrayidx127)
2704B	  %49:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
2736B	  %49:gr32 = DEC32r %49:gr32(tied-def 0), implicit-def dead $eflags
2752B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %49:gr32 :: (store 4 into %ir.j)

2768B	bb.16.for.cond129:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

2784B	  CMP32mi8 %stack.4.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.j)
2800B	  JCC_1 %bb.18, 14, implicit killed $eflags
2816B	  JMP_1 %bb.17

2832B	bb.17.for.body131:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2848B	  %140:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
2880B	  %82:gr32 = MOV32rm $noreg, 4, %140:gr64_nosp, @m1 + 4, $noreg :: (load 4 from %ir.arrayidx137)
2912B	  %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m2 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx140)
2944B	  %82:gr32 = IMUL32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @m3 + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx144)
2976B	  %82:gr32 = nsw ADD32rm %82:gr32(tied-def 0), $noreg, 4, %140:gr64_nosp, @ir + 4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.arrayidx134)
2992B	  MOV32mr $noreg, 4, %140:gr64_nosp, @ir, $noreg, %82:gr32 :: (store 4 into %ir.arrayidx148)
3024B	  %84:gr32 = LEA64_32r %140:gr64_nosp, 1, $noreg, -1, $noreg
3040B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j)
3056B	  JMP_1 %bb.16

3072B	bb.18.for.end151:
	; predecessors: %bb.16
	  successors: %bb.19(0x40000000), %bb.20(0x40000000); %bb.19(50.00%), %bb.20(50.00%)

3088B	  CMP32mi8 $rip, 1, $noreg, @debug_vec + 4, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 1)`)
3104B	  JCC_1 %bb.20, 14, implicit killed $eflags
3120B	  JMP_1 %bb.19

3136B	bb.19.if.then:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3216B	  $rdi = MOV32ri64 @.str.47
3232B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3248B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3264B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3312B	  $rdi = MOV32ri64 @.str.48
3328B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3344B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3360B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3376B	  %56:gr64_nosp = MOVSX64rm32 %stack.3.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
3408B	  %58:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
3424B	  %59:gr64_nosp = LEA64r %56:gr64_nosp, 2, %56:gr64_nosp, 0, $noreg
3440B	  %60:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx1569)
3456B	  %61:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
3472B	  %62:gr32 = MOV32rm %stack.7.ng, 4, %59:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx162)
3488B	  %63:gr64 = MOV64rm %stack.0.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n1.addr)
3504B	  undef %136.sub_32bit:gr64_with_sub_8bit = MOV32rm %63:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.100)
3520B	  %65:gr64 = MOV64rm %stack.1.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n2.addr)
3536B	  undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm %65:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.102)
3552B	  %67:gr64 = MOV64rm %stack.2.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.n3.addr)
3568B	  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm %67:gr64, 1, $noreg, 0, $noreg :: (load 4 from %ir.104)
3584B	  undef %130.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
3600B	  undef %128.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
3616B	  undef %126.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
3632B	  undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
3648B	  undef %122.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
3664B	  undef %120.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
3680B	  ADJCALLSTACKDOWN64 72, 0, 72, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3712B	  $rdi = MOV32ri64 @.str.49
3728B	  $esi = COPY %56.sub_32bit:gr64_nosp
3744B	  $edx = COPY %58:gr32
3760B	  $ecx = COPY %60:gr32
3776B	  $r8d = COPY %61:gr32
3792B	  $r9d = COPY %62:gr32
3808B	  dead $eax = MOV32ri 0, implicit-def $al
3840B	  PUSH64r %120:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
3872B	  PUSH64r %122:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
3904B	  PUSH64r %124:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
3936B	  PUSH64r %126:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
3968B	  PUSH64r %128:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4000B	  PUSH64r %130:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4032B	  PUSH64r %132:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4064B	  PUSH64r %134:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4096B	  PUSH64r %136:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4112B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4128B	  ADJCALLSTACKUP64 72, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

4144B	bb.20.if.end:
	; predecessors: %bb.18, %bb.19

4160B	  RET 0

# End machine code for function setup.

Before MISched:
# Machine code for function zero3: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %2, $esi in %3, $edx in %4, $ecx in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $esi, $edx, $ecx
  %5:gr32 = COPY $ecx
  %4:gr32 = COPY $edx
  %3:gr32 = COPY $esi
  %2:gr64 = COPY $rdi
  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  undef %15.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
  MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
  MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

bb.1.for.cond:
; predecessors: %bb.0, %bb.8
  successors: %bb.2(0x7c000000), %bb.9(0x04000000); %bb.2(96.88%), %bb.9(3.12%)

  %8:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  CMP32rm %8:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  JCC_1 %bb.9, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.6.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

bb.3.for.cond1:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %10:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  CMP32rm %10:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.5.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.5.for.cond4:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %12:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %12:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body6:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %17:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
  %17:gr64 = SHL64ri %17:gr64(tied-def 0), 3, implicit-def dead $eflags
  %17:gr64 = ADD64rm %17:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %20:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
  %22:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
  INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.6.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.3

bb.8.for.end13:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  INC32m %stack.7.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.1

bb.9.for.end16:
; predecessors: %bb.1

  RET 0

# End machine code for function zero3.

********** MI Scheduling **********
zero3:%bb.0 entry
  From: %5:gr32 = COPY $ecx
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=8
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX 
Live Out: %15 %1 
Live Thru: 
  LiveReg: %15
  LiveReg: %1
  UpdateRegP: SU(12) %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=6
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(1):   %4:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=0 Reg=%4
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(2):   %3:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=0 Reg=%3
    SU(5): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%2
    SU(4): Data Latency=0 Reg=%2
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(4):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   undef %15.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Successors:
    SU(12): Data Latency=1 Reg=%15
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Successors:
    SU(12): Data Latency=1 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%1
    SU(8): Data Latency=1 Reg=%15
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 7 6 5 4 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %15
  UpdateRegP: SU(12) %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @0c
  BotQ.A TopLatency SU(12) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 11 10 7 6 5 9 8 
  Cand SU(4) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
Bottom Pressure:
GR16=4
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 10 7 6 5 9 
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %2
  UpdateRegP: SU(4) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
              to 
  UpdateRegP: SU(10) MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 9 7 6 5 
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(5) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(9) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 5 7 6 
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) undef %15.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
Bottom Pressure:
GR16=6
  LiveReg: %4
  UpdateRegP: SU(6) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
              to 
  UpdateRegP: SU(8) undef %15.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 5 7 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=8
  LiveReg: %5
  UpdateRegP: SU(7) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 5 0 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 5 1 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=8
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
Bottom Pressure:
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=7
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=6
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=6
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr32 = COPY $ecx
SU(1):   %4:gr32 = COPY $edx
SU(2):   %3:gr32 = COPY $esi
SU(3):   %2:gr64 = COPY $rdi
SU(4):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
SU(5):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
SU(6):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
SU(7):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
SU(8):   undef %15.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
SU(9):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
SU(10):   MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
SU(11):   MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
SU(12):   %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

********** MI Scheduling **********
zero3:%bb.1 for.cond
  From: %8:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JCC_1 %bb.9, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %8:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%8
  Single Issue       : false;
SU(1):   CMP32rm %8:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %8:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %8:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   CMP32rm %8:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)

********** MI Scheduling **********
zero3:%bb.3 for.cond1
  From: %10:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
    To: JCC_1 %bb.8, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(1):   CMP32rm %10:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%10
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %10:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %10:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(1):   CMP32rm %10:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)

********** MI Scheduling **********
zero3:%bb.5 for.cond4
  From: %12:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.7, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%12
  Single Issue       : false;
SU(1):   CMP32rm %12:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %12:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %12:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %12:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)

********** MI Scheduling **********
zero3:%bb.6 for.body6
  From: %17:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: %1 %15 
Live Out: %1 %15 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(5) %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %15
  UpdateRegP: SU(1) %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %17:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%17
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %17:gr64 = SHL64ri %17:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%17
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%17
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %17:gr64 = ADD64rm %17:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=%17
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%17
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %20:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%20
    SU(5): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%20
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%20
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%17
    SU(5): Data Latency=1 Reg=%20
  Successors:
    SU(8): Data Latency=1 Reg=%21
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %22:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(8): Data Latency=4 Reg=%22
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%21
    SU(7): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%22
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(9):   INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(9) 11c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:
GR16=8
  LiveReg: %21
  UpdateRegP: SU(8) MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
              to GR16 2
  LiveReg: %22
  UpdateRegP: SU(8) MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %22:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=6
  Ready @7c
  BotQ.A BotLatency SU(7) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %17
  UpdateRegP: SU(6) %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
              to 
  LiveReg: %20
  UpdateRegP: SU(6) %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %20
  UpdateRegP: SU(5) %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %20:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %17:gr64 = ADD64rm %17:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %17
  UpdateRegP: SU(3) %17:gr64 = ADD64rm %17:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %17:gr64 = SHL64ri %17:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %17
  UpdateRegP: SU(2) %17:gr64 = SHL64ri %17:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %17
  UpdateRegP: SU(1) %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @14c
  BotQ.A BotLatency SU(0) 14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %17:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %17:gr64 = SHL64ri %17:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %17:gr64 = ADD64rm %17:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(4):   %20:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
SU(7):   %22:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(8):   MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
SU(9):   INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** INTERVALS **********
CH [0B,16r:0)  0@0B-phi
CL [0B,16r:0)  0@0B-phi
DH [0B,32r:0)  0@0B-phi
DIL [0B,64r:0)  0@0B-phi
DIH [0B,64r:0)  0@0B-phi
DL [0B,32r:0)  0@0B-phi
HCX [0B,16r:0)  0@0B-phi
HDI [0B,64r:0)  0@0B-phi
HDX [0B,32r:0)  0@0B-phi
SIL [0B,48r:0)  0@0B-phi
SIH [0B,48r:0)  0@0B-phi
HSI [0B,48r:0)  0@0B-phi
%1 [176r,928B:0)  0@176r weight:0.000000e+00
%2 [64r,208r:0)  0@64r weight:0.000000e+00
%3 [48r,176r:0)  0@48r weight:0.000000e+00
%4 [32r,144r:0)  0@32r weight:0.000000e+00
%5 [16r,128r:0)  0@16r weight:0.000000e+00
%8 [288r,304r:0)  0@288r weight:0.000000e+00
%10 [400r,416r:0)  0@400r weight:0.000000e+00
%12 [512r,528r:0)  0@512r weight:0.000000e+00
%15 [144r,256r:0)[256r,928B:1)  0@144r 1@256r weight:0.000000e+00
%17 [592r,624r:2)[624r,656r:0)[656r,688r:1)[688r,752r:3)  0@624r 1@656r 2@592r 3@688r weight:0.000000e+00
%20 [704r,736r:0)[736r,752r:1)  0@704r 1@736r weight:0.000000e+00
%21 [752r,784r:0)  0@752r weight:0.000000e+00
%22 [768r,784r:0)  0@768r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function zero3: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %2, $esi in %3, $edx in %4, $ecx in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $esi, $edx, $ecx
16B	  %5:gr32 = COPY $ecx
32B	  %4:gr32 = COPY $edx
48B	  %3:gr32 = COPY $esi
64B	  %2:gr64 = COPY $rdi
80B	  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
96B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
112B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
128B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
144B	  undef %15.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
176B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
208B	  MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
224B	  MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
256B	  %15:gr64_with_sub_8bit = nuw IMUL64rr %15:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

272B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.8
	  successors: %bb.2(0x7c000000), %bb.9(0x04000000); %bb.2(96.88%), %bb.9(3.12%)

288B	  %8:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
304B	  CMP32rm %8:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
320B	  JCC_1 %bb.9, 13, implicit killed $eflags
336B	  JMP_1 %bb.2

352B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

368B	  MOV32mi %stack.6.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

384B	bb.3.for.cond1:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

400B	  %10:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
416B	  CMP32rm %10:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
432B	  JCC_1 %bb.8, 13, implicit killed $eflags
448B	  JMP_1 %bb.4

464B	bb.4.for.body3:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

480B	  MOV32mi %stack.5.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

496B	bb.5.for.cond4:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

512B	  %12:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
528B	  CMP32rm %12:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
544B	  JCC_1 %bb.7, 13, implicit killed $eflags
560B	  JMP_1 %bb.6

576B	bb.6.for.body6:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

592B	  %17:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
624B	  %17:gr64 = nsw IMUL64rr %17:gr64(tied-def 0), %15:gr64_with_sub_8bit, implicit-def dead $eflags
656B	  %17:gr64 = SHL64ri %17:gr64(tied-def 0), 3, implicit-def dead $eflags
688B	  %17:gr64 = ADD64rm %17:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
704B	  %20:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
736B	  %20:gr64_nosp = nsw IMUL64rr %20:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
752B	  %21:gr64 = LEA64r %17:gr64, 8, %20:gr64_nosp, 0, $noreg
768B	  %22:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
784B	  MOV64mi32 %21:gr64, 8, %22:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx10)
800B	  INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
816B	  JMP_1 %bb.5

832B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

848B	  INC32m %stack.6.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
864B	  JMP_1 %bb.3

880B	bb.8.for.end13:
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

896B	  INC32m %stack.7.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
912B	  JMP_1 %bb.1

928B	bb.9.for.end16:
	; predecessors: %bb.1

944B	  RET 0

# End machine code for function zero3.

Before MISched:
# Machine code for function zran3: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=8, align=8, at location [SP+8]
  fi#20: size=8, align=8, at location [SP+8]
  fi#21: size=8, align=8, at location [SP+8]
  fi#22: size=8, align=8, at location [SP+8]
  fi#23: size=8, align=8, at location [SP+8]
  fi#24: size=4, align=4, at location [SP+8]
  fi#25: size=8, align=8, at location [SP+8]
  fi#26: size=8, align=8, at location [SP+8]
  fi#27: size=160, align=16, at location [SP+8]
  fi#28: size=8, align=8, at location [SP+8]
  fi#29: size=4, align=4, at location [SP+8]
  fi#30: size=80, align=16, at location [SP+8]
  fi#31: size=80, align=16, at location [SP+8]
  fi#32: size=80, align=16, at location [SP+8]
  fi#33: size=320, align=16, at location [SP+8]
  fi#34: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e+00, align=8
  cp#1: 1.300000e+01, align=8
  cp#2: 1.000000e+00, align=8
Function Live Ins: $rdi in %2, $esi in %3, $edx in %4, $ecx in %5, $r8d in %6, $r9d in %7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $esi, $edx, $ecx, $r8d, $r9d
  %7:gr32 = COPY $r9d
  %6:gr32 = COPY $r8d
  %5:gr32 = COPY $ecx
  %4:gr32 = COPY $edx
  %3:gr32 = COPY $esi
  %2:gr64 = COPY $rdi
  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  MOV32mr %stack.4.nx.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.nx.addr)
  MOV32mr %stack.5.ny.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.ny.addr)
  undef %249.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
  MOV64mr %stack.7.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
  MOV32mi %stack.24.mm, 1, $noreg, 0, $noreg, 10 :: (store 4 into %ir.mm)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %10:fr64
  $xmm1 = COPY %11:fr64
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:fr64 = COPY killed $xmm0
  MOVSDmr %stack.25.a, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.a)
  %13:gr64 = MOV64ri 4734050326586327040
  MOV64mr %stack.26.x, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x)
  %14:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %12:fr64
  $edi = COPY %14:gr32
  CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:fr64 = COPY killed $xmm0
  MOVSDmr %stack.21.a1, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.a1)
  %16:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  %18:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
  %18:gr32 = nsw IMUL32rm %18:gr32(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %16:fr64
  $edi = COPY %18:gr32
  CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %19:fr64 = COPY killed $xmm0
  MOVSDmr %stack.22.a2, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.a2)
  %20:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %21:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %22:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %20:gr64
  $esi = COPY %21:gr32
  $edx = COPY %22:gr32
  $ecx = COPY %23:gr32
  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  undef %37.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  undef %29.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  undef %31.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  %31.sub_32bit:gr64_nosp = ADD32ri8 %31.sub_32bit:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
  %31.sub_32bit:gr64_nosp = nsw IMUL32rm %31.sub_32bit:gr64_nosp(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
  undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
  %35.sub_32bit:gr64_nosp = nsw IMUL32rm %35.sub_32bit:gr64_nosp(tied-def 0), %stack.4.nx.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.nx.addr)
  %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
  MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %39:gr32 :: (store 4 into %ir.i)
  %40:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %40:fr64
  $edi = COPY %39:gr32
  CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %41:fr64 = COPY killed $xmm0
  MOVSDmr %stack.23.ai, 1, $noreg, 0, $noreg, %41:fr64 :: (store 8 into %ir.ai)
  undef %260.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
  %260.sub_32bit:gr64_nosp = nsw SUB32rm %260.sub_32bit:gr64_nosp(tied-def 0), $rip, 1, $noreg, @is1, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is1)
  %44:gr32 = LEA64_32r %260:gr64_nosp, 1, $noreg, 1, $noreg
  MOV32mr %stack.14.d1, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.d1)
  %260.sub_32bit:gr64_nosp = nsw ADD32ri8 %260.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  MOV32mr %stack.15.e1, 1, $noreg, 0, $noreg, %260.sub_32bit:gr64_nosp :: (store 4 into %ir.e1)
  %48:gr32 = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
  %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @is2, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is2)
  %48:gr32 = nsw ADD32ri8 %48:gr32(tied-def 0), 2, implicit-def dead $eflags
  MOV32mr %stack.16.e2, 1, $noreg, 0, $noreg, %48:gr32 :: (store 4 into %ir.e2)
  %51:gr32 = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
  %51:gr32 = nsw SUB32rm %51:gr32(tied-def 0), $rip, 1, $noreg, @is3, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is3)
  %51:gr32 = nsw ADD32ri8 %51:gr32(tied-def 0), 2, implicit-def dead $eflags
  MOV32mr %stack.17.e3, 1, $noreg, 0, $noreg, %51:gr32 :: (store 4 into %ir.e3)
  MOV64mr %stack.19.x0, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x0)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %52:gr64 = LEA64r %stack.19.x0, 1, $noreg, 0, $noreg
  $rdi = COPY %52:gr64
  $xmm0 = COPY %41:fr64
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %53:fr64 = COPY killed $xmm0
  MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %53:fr64 :: (store 8 into %ir.rdummy)
  MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %249:gr64_with_sub_8bit = nuw IMUL64rr %249:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %256:gr64 = LEA64r %stack.18.xx, 1, $noreg, 0, $noreg
  %258:gr64 = LEA64r %stack.20.x1, 1, $noreg, 0, $noreg

bb.1.for.cond:
; predecessors: %bb.0, %bb.5
  successors: %bb.2(0x7c000000), %bb.6(0x04000000); %bb.2(96.88%), %bb.6(3.12%)

  %54:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  CMP32rm %54:gr32, %stack.17.e3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e3)
  JCC_1 %bb.6, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %239:fr64 = MOVSDrm_alt %stack.19.x0, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x0)
  MOVSDmr %stack.20.x1, 1, $noreg, 0, $noreg, %239:fr64 :: (store 8 into %ir.x1)
  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.3.for.cond18:
; predecessors: %bb.2, %bb.4
  successors: %bb.4(0x7c000000), %bb.5(0x04000000); %bb.4(96.88%), %bb.5(3.12%)

  %240:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  CMP32rm %240:gr32, %stack.16.e2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e2)
  JCC_1 %bb.5, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body20:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %245:fr64 = MOVSDrm_alt %stack.20.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
  MOVSDmr %stack.18.xx, 1, $noreg, 0, $noreg, %245:fr64 :: (store 8 into %ir.xx)
  %246:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  %247:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  %251:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %251:gr64 = SHL64ri %251:gr64(tied-def 0), 3, implicit-def dead $eflags
  %251:gr64 = ADD64rm %251:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %254:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %246:gr32
  $rsi = COPY %256:gr64
  $xmm0 = COPY %247:fr64
  $rdx = COPY %255:gr64
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $xmm0, implicit $rdx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %257:fr64 = MOVSDrm_alt %stack.21.a1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %258:gr64
  $xmm0 = COPY %257:fr64
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %259:fr64 = COPY killed $xmm0
  MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %259:fr64 :: (store 8 into %ir.rdummy)
  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.3

bb.5.for.end:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %242:fr64 = MOVSDrm_alt %stack.22.a2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %52:gr64
  $xmm0 = COPY %242:fr64
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %244:fr64 = COPY killed $xmm0
  MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %244:fr64 :: (store 8 into %ir.rdummy)
  INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.1

bb.6.for.end28:
; predecessors: %bb.1
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  %237:gr64 = MOV64ri 4607182418800017408

bb.7.for.cond29:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  CMP32mi8 %stack.29.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.9, 15, implicit killed $eflags
  JMP_1 %bb.8

bb.8.for.body31:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %261:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %236:gr64_nosp = COPY %261:gr64_nosp
  %236:gr64_nosp = SHL64ri %236:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  MOV64mi32 %stack.27.ten, 1, %236:gr64_nosp, 8, $noreg, 0 :: (store 8 into %ir.arrayidx34)
  MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
  MOV64mi32 %stack.30.j1, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx492)
  MOV64mi32 %stack.31.j2, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx523)
  MOV64mi32 %stack.32.j3, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx554)
  %238:gr32 = LEA64_32r %261:gr64_nosp, 1, $noreg, 1, $noreg
  MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %238:gr32 :: (store 4 into %ir.i)
  JMP_1 %bb.7

bb.9.for.end58:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %199:gr64 = LEA64r %stack.27.ten, 1, $noreg, 0, $noreg
  %200:gr64 = LEA64r %stack.30.j1, 1, $noreg, 0, $noreg
  %201:gr64 = LEA64r %stack.31.j2, 1, $noreg, 0, $noreg
  %202:gr64 = LEA64r %stack.32.j3, 1, $noreg, 0, $noreg

bb.10.for.cond59:
; predecessors: %bb.9, %bb.21
  successors: %bb.11(0x7c000000), %bb.22(0x04000000); %bb.11(96.88%), %bb.22(3.12%)

  %60:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %60:gr32 = DEC32r %60:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i3, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.22, 13, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body62:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.12.for.cond63:
; predecessors: %bb.11, %bb.20
  successors: %bb.13(0x7c000000), %bb.21(0x04000000); %bb.13(96.88%), %bb.21(3.12%)

  %170:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %170:gr32 = DEC32r %170:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %170:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.21, 13, implicit killed $eflags
  JMP_1 %bb.13

bb.13.for.body66:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.14.for.cond67:
; predecessors: %bb.13, %bb.19
  successors: %bb.15(0x7c000000), %bb.20(0x04000000); %bb.15(96.88%), %bb.20(3.12%)

  %174:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %174:gr32 = DEC32r %174:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %174:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.20, 13, implicit killed $eflags
  JMP_1 %bb.15

bb.15.for.body70:
; predecessors: %bb.14
  successors: %bb.16(0x40000000), %bb.17(0x40000000); %bb.16(50.00%), %bb.17(50.00%)

  %179:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %179:gr64 = SHL64ri %179:gr64(tied-def 0), 3, implicit-def dead $eflags
  %179:gr64 = ADD64rm %179:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %182:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
  %184:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
  UCOMISDrm %185:fr64, %stack.27.ten, 1, $noreg, 8, $noreg, implicit-def $eflags :: (dereferenceable load 8 from %ir.arrayidx78)
  JCC_1 %bb.17, 6, implicit killed $eflags
  JMP_1 %bb.16

bb.16.if.then:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %186:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %190:gr64 = COPY %186:gr64_with_sub_8bit
  %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %190:gr64 = SHL64ri %190:gr64(tied-def 0), 3, implicit-def dead $eflags
  %190:gr64 = ADD64rm %190:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %192:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %194:gr64_nosp = COPY %192:gr64_with_sub_8bit
  %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
  %196:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
  MOVSDmr %stack.27.ten, 1, $noreg, 8, $noreg, %198:fr64 :: (store 8 into %ir.arrayidx87)
  MOV32mr %stack.30.j1, 1, $noreg, 4, $noreg, %196.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx89)
  MOV32mr %stack.31.j2, 1, $noreg, 4, $noreg, %192.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx91)
  MOV32mr %stack.32.j3, 1, $noreg, 4, $noreg, %186.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx93)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %199:gr64
  $rsi = COPY %200:gr64
  $rdx = COPY %201:gr64
  $rcx = COPY %202:gr64
  $r8d = MOV32ri 10
  $r9d = MOV32ri 1
  CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.17.if.end:
; predecessors: %bb.15, %bb.16
  successors: %bb.18(0x40000000), %bb.19(0x40000000); %bb.18(50.00%), %bb.19(50.00%)

  %208:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %208:gr64 = SHL64ri %208:gr64(tied-def 0), 3, implicit-def dead $eflags
  %208:gr64 = ADD64rm %208:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %211:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
  %213:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %214:fr64 = MOVSDrm_alt %stack.27.ten, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.arrayidx10415, align 16)
  UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
  JCC_1 %bb.19, 6, implicit killed $eflags
  JMP_1 %bb.18

bb.18.if.then106:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %219:gr64 = COPY %215:gr64_with_sub_8bit
  %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %219:gr64 = SHL64ri %219:gr64(tied-def 0), 3, implicit-def dead $eflags
  %219:gr64 = ADD64rm %219:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %221:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %223:gr64_nosp = COPY %221:gr64_with_sub_8bit
  %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
  %225:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
  MOVSDmr %stack.27.ten, 1, $noreg, 0, $noreg, %227:fr64 :: (store 8 into %ir.arrayidx11417, align 16)
  MOV32mr %stack.30.j1, 1, $noreg, 0, $noreg, %225.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx11619, align 16)
  MOV32mr %stack.31.j2, 1, $noreg, 0, $noreg, %221.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx11821, align 16)
  MOV32mr %stack.32.j3, 1, $noreg, 0, $noreg, %215.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx12023, align 16)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %199:gr64
  $rsi = COPY %200:gr64
  $rdx = COPY %201:gr64
  $rcx = COPY %202:gr64
  $r8d = MOV32ri 10
  $r9d = MOV32r0 implicit-def dead $eflags
  CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.19.if.end125:
; predecessors: %bb.17, %bb.18
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.14

bb.20.for.end128:
; predecessors: %bb.14
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.12

bb.21.for.end131:
; predecessors: %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.10

bb.22.for.end134:
; predecessors: %bb.10
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i1)
  MOV32mi %stack.8.i0, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i0)
  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
  %111:fr64 = FsFLD0SD
  %141:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)

bb.23.for.cond135:
; predecessors: %bb.22, %bb.28, %bb.29
  successors: %bb.24(0x7c000000), %bb.30(0x04000000); %bb.24(96.88%), %bb.30(3.12%)

  CMP32mi8 %stack.29.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.30, 8, implicit killed $eflags
  JMP_1 %bb.24

bb.24.for.body137:
; predecessors: %bb.23
  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

  MOV64mi32 %stack.28.best, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.best)
  %109:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %109:gr64_nosp = SHL64ri %109:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %110:fr64 = MOVSDrm_alt %stack.27.ten, 1, %109:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx140)
  UCOMISDrr %110:fr64, %111:fr64, implicit-def $eflags
  JCC_1 %bb.26, 6, implicit killed $eflags
  JMP_1 %bb.25

bb.25.if.then142:
; predecessors: %bb.24
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %113:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOV32mi %stack.33.jg, 8, %113:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx146)
  undef %117.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  %262:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  undef %119.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx150)
  %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
  MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
  undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  undef %126.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
  %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
  MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  undef %134.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx168)
  %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
  MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
  %137:gr32 = LEA64_32r %262:gr64_nosp, 1, $noreg, -1, $noreg
  MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %137:gr32 :: (store 4 into %ir.i1)
  JMP_1 %bb.27

bb.26.if.else:
; predecessors: %bb.24
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %112:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx178)
  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 84, $noreg, 0 :: (store 4 into %ir.arrayidx182)
  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 164, $noreg, 0 :: (store 4 into %ir.arrayidx186)
  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 244, $noreg, 0 :: (store 4 into %ir.arrayidx190)

bb.27.if.end191:
; predecessors: %bb.26, %bb.25
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  MOV64mr %stack.28.best, 1, $noreg, 0, $noreg, %237:gr64 :: (store 8 into %ir.best)
  %140:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
  %140:gr64_nosp = SHL64ri %140:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  UCOMISDrm %141:fr64, %stack.27.ten, 1, %140:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx19430, align 16)
  JCC_1 %bb.29, 6, implicit killed $eflags
  JMP_1 %bb.28

bb.28.if.then196:
; predecessors: %bb.27
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %143:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOV32mi %stack.33.jg, 8, %143:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx20032, align 8)
  undef %147.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  %263:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
  undef %149.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx20433, align 8)
  %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
  MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
  undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  undef %156.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx21335, align 8)
  %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
  MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
  undef %162.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  undef %164.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx22237, align 8)
  %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
  MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
  %167:gr32 = LEA64_32r %263:gr64_nosp, 1, $noreg, -1, $noreg
  MOV32mr %stack.8.i0, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i0)
  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.23

bb.29.if.else229:
; predecessors: %bb.27
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %142:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx23340, align 8)
  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 80, $noreg, 0 :: (store 4 into %ir.arrayidx23741, align 8)
  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 160, $noreg, 0 :: (store 4 into %ir.arrayidx24142, align 8)
  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 240, $noreg, 0 :: (store 4 into %ir.arrayidx24543, align 8)
  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.23

bb.30.for.end248:
; predecessors: %bb.23
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  MOV32mi %stack.10.m1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m1)
  MOV32mi %stack.9.m0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m0)
  MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)

bb.31.for.cond249:
; predecessors: %bb.30, %bb.38
  successors: %bb.32(0x7c000000), %bb.39(0x04000000); %bb.32(96.88%), %bb.39(3.12%)

  %62:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  CMP32rm %62:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  JCC_1 %bb.39, 13, implicit killed $eflags
  JMP_1 %bb.32

bb.32.for.body251:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

bb.33.for.cond252:
; predecessors: %bb.32, %bb.37
  successors: %bb.34(0x7c000000), %bb.38(0x04000000); %bb.34(96.88%), %bb.38(3.12%)

  %95:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  CMP32rm %95:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  JCC_1 %bb.38, 13, implicit killed $eflags
  JMP_1 %bb.34

bb.34.for.body254:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.35.for.cond255:
; predecessors: %bb.34, %bb.36
  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)

  %97:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %97:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.37, 13, implicit killed $eflags
  JMP_1 %bb.36

bb.36.for.body257:
; predecessors: %bb.35
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %102:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
  %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %105:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
  %107:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
  INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.35

bb.37.for.end266:
; predecessors: %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.33

bb.38.for.end269:
; predecessors: %bb.33
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.31

bb.39.for.end272:
; predecessors: %bb.31
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
  %94:gr64 = MOV64ri -4616189618054758400

bb.40.for.cond273:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  %64:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  CMP32rm %64:gr32, %stack.9.m0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m0)
  JCC_1 %bb.42, 12, implicit killed $eflags
  JMP_1 %bb.41

bb.41.for.body275:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %84:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %88:gr64 = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 240, $noreg :: (load 4 from %ir.arrayidx27944, align 8)
  %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %88:gr64 = SHL64ri %88:gr64(tied-def 0), 3, implicit-def dead $eflags
  %88:gr64 = ADD64rm %88:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %91:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 160, $noreg :: (load 4 from %ir.arrayidx28545, align 8)
  %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
  %93:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 80, $noreg :: (load 4 from %ir.arrayidx29146, align 8)
  MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.40

bb.42.for.end296:
; predecessors: %bb.40
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)

bb.43.for.cond297:
; predecessors: %bb.42, %bb.44
  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

  %66:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  CMP32rm %66:gr32, %stack.10.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
  JCC_1 %bb.45, 12, implicit killed $eflags
  JMP_1 %bb.44

bb.44.for.body299:
; predecessors: %bb.43
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %73:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %77:gr64 = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 244, $noreg :: (load 4 from %ir.arrayidx303)
  %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  %77:gr64 = SHL64ri %77:gr64(tied-def 0), 3, implicit-def dead $eflags
  %77:gr64 = ADD64rm %77:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %80:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 164, $noreg :: (load 4 from %ir.arrayidx309)
  %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
  %82:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 84, $noreg :: (load 4 from %ir.arrayidx315)
  MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.43

bb.45.for.end320:
; predecessors: %bb.43

  %68:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %69:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %70:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %71:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %72:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %68:gr64
  $esi = COPY %69:gr32
  $edx = COPY %70:gr32
  $ecx = COPY %71:gr32
  $r8d = COPY %72:gr32
  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  RET 0

# End machine code for function zran3.

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %53:fr64 = COPY killed $xmm0
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %53:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%53
  Single Issue       : false;
SU(1):   MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %53:fr64 :: (store 8 into %ir.rdummy)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%53
  Single Issue       : false;
SU(2):   MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %249:gr64_with_sub_8bit = nuw IMUL64rr %249:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %256:gr64 = LEA64r %stack.18.xx, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %258:gr64 = LEA64r %stack.20.x1, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %258:gr64 = LEA64r %stack.20.x1, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %256:gr64 = LEA64r %stack.18.xx, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %249:gr64_with_sub_8bit = nuw IMUL64rr %249:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %53:fr64 :: (store 8 into %ir.rdummy)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %53:fr64 = COPY killed $xmm0
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %53:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %53:fr64 :: (store 8 into %ir.rdummy)
SU(2):   MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(3):   %249:gr64_with_sub_8bit = nuw IMUL64rr %249:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(4):   %256:gr64 = LEA64r %stack.18.xx, 1, $noreg, 0, $noreg
SU(5):   %258:gr64 = LEA64r %stack.20.x1, 1, $noreg, 0, $noreg

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %52:gr64 = LEA64r %stack.19.x0, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %52:gr64 = LEA64r %stack.19.x0, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%52
  Single Issue       : false;
SU(1):   $rdi = COPY %52:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%52
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %41:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %41:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rdi = COPY %52:gr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %52:gr64 = LEA64r %stack.19.x0, 1, $noreg, 0, $noreg
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %52:gr64 = LEA64r %stack.19.x0, 1, $noreg, 0, $noreg
SU(1):   $rdi = COPY %52:gr64
SU(2):   $xmm0 = COPY %41:fr64

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %41:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: %13 XMM0 
Live Out: %41 
Live Thru: 
  LiveReg: %41
  UpdateRegP: SU(1) MOVSDmr %stack.23.ai, 1, $noreg, 0, $noreg, %41:fr64 :: (store 8 into %ir.ai)
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=2
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %41:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%41
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOVSDmr %stack.23.ai, 1, $noreg, 0, $noreg, %41:fr64 :: (store 8 into %ir.ai)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%41
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   undef %260.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%260
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %260.sub_32bit:gr64_nosp = nsw SUB32rm %260.sub_32bit:gr64_nosp(tied-def 0), $rip, 1, $noreg, @is1, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is1)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%260
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%260
    SU(4): Data Latency=4 Reg=%260
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %44:gr32 = LEA64_32r %260:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%260
  Successors:
    SU(5): Data Latency=1 Reg=%44
    SU(6): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr %stack.14.d1, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.d1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%44
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %260.sub_32bit:gr64_nosp = nsw ADD32ri8 %260.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=4 Reg=%260
    SU(3): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%260
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.15.e1, 1, $noreg, 0, $noreg, %260.sub_32bit:gr64_nosp :: (store 4 into %ir.e1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%260
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %48:gr32 = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(9): Data Latency=4 Reg=%48
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @is2, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(8): Data Latency=4 Reg=%48
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%48
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %48:gr32 = nsw ADD32ri8 %48:gr32(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%48
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%48
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   MOV32mr %stack.16.e2, 1, $noreg, 0, $noreg, %48:gr32 :: (store 4 into %ir.e2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%48
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %51:gr32 = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(13): Data Latency=4 Reg=%51
    SU(13): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %51:gr32 = nsw SUB32rm %51:gr32(tied-def 0), $rip, 1, $noreg, @is3, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is3)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(12): Data Latency=4 Reg=%51
    SU(12): Out  Latency=0
  Successors:
    SU(14): Data Latency=4 Reg=%51
    SU(14): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %51:gr32 = nsw ADD32ri8 %51:gr32(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(13): Data Latency=4 Reg=%51
    SU(13): Out  Latency=0
  Successors:
    SU(15): Data Latency=1 Reg=%51
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   MOV32mr %stack.17.e3, 1, $noreg, 0, $noreg, %51:gr32 :: (store 4 into %ir.e3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%51
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   MOV64mr %stack.19.x0, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x0)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 11 7 5 1 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) MOV64mr %stack.19.x0, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %13
  UpdateRegP: SU(16) MOV64mr %stack.19.x0, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x0)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 15 11 7 5 
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV32mr %stack.17.e3, 1, $noreg, 0, $noreg, %51:gr32 :: (store 4 into %ir.e3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %51
  UpdateRegP: SU(15) MOV32mr %stack.17.e3, 1, $noreg, 0, $noreg, %51:gr32 :: (store 4 into %ir.e3)
              to 
  Ready @0c
  BotQ.A TopLatency SU(15) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 11 7 14 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %51:gr32 = nsw ADD32ri8 %51:gr32(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %51
  UpdateRegP: SU(14) %51:gr32 = nsw ADD32ri8 %51:gr32(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(14) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 11 7 13 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %51:gr32 = nsw SUB32rm %51:gr32(tied-def 0), $rip, 1, $noreg, @is3, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %51
  UpdateRegP: SU(13) %51:gr32 = nsw SUB32rm %51:gr32(tied-def 0), $rip, 1, $noreg, @is3, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is3)
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(13) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 11 7 12 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %51:gr32 = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @9c
  BotQ.A BotLatency SU(12) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 11 7 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.16.e2, 1, $noreg, 0, $noreg, %48:gr32 :: (store 4 into %ir.e2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %48
  UpdateRegP: SU(11) MOV32mr %stack.16.e2, 1, $noreg, 0, $noreg, %48:gr32 :: (store 4 into %ir.e2)
              to 
  Ready @1c
  BotQ.A TopLatency SU(11) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 7 10 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %48:gr32 = nsw ADD32ri8 %48:gr32(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %48
  UpdateRegP: SU(10) %48:gr32 = nsw ADD32ri8 %48:gr32(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @is2, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %48
  UpdateRegP: SU(9) %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @is2, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is2)
              to GR16 -2
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %48:gr32 = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 7 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.15.e1, 1, $noreg, 0, $noreg, %260.sub_32bit:gr64_nosp :: (store 4 into %ir.e1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %260
  UpdateRegP: SU(7) MOV32mr %stack.15.e1, 1, $noreg, 0, $noreg, %260.sub_32bit:gr64_nosp :: (store 4 into %ir.e1)
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 6 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %260.sub_32bit:gr64_nosp = nsw ADD32ri8 %260.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %260
  UpdateRegP: SU(4) %44:gr32 = LEA64_32r %260:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  UpdateRegP: SU(6) %260.sub_32bit:gr64_nosp = nsw ADD32ri8 %260.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.14.d1, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.d1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %44
  UpdateRegP: SU(5) MOV32mr %stack.14.d1, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.d1)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %44:gr32 = LEA64_32r %260:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %260.sub_32bit:gr64_nosp = nsw SUB32rm %260.sub_32bit:gr64_nosp(tied-def 0), $rip, 1, $noreg, @is1, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %260
  UpdateRegP: SU(3) %260.sub_32bit:gr64_nosp = nsw SUB32rm %260.sub_32bit:gr64_nosp(tied-def 0), $rip, 1, $noreg, @is1, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is1)
              to GR16 -2
  Ready @7c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %260.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @11c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.23.ai, 1, $noreg, 0, $noreg, %41:fr64 :: (store 8 into %ir.ai)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %41:fr64 = COPY killed $xmm0
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @4c
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %41:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.23.ai, 1, $noreg, 0, $noreg, %41:fr64 :: (store 8 into %ir.ai)
SU(2):   undef %260.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
SU(3):   %260.sub_32bit:gr64_nosp = nsw SUB32rm %260.sub_32bit:gr64_nosp(tied-def 0), $rip, 1, $noreg, @is1, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is1)
SU(4):   %44:gr32 = LEA64_32r %260:gr64_nosp, 1, $noreg, 1, $noreg
SU(5):   MOV32mr %stack.14.d1, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.d1)
SU(6):   %260.sub_32bit:gr64_nosp = nsw ADD32ri8 %260.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
SU(7):   MOV32mr %stack.15.e1, 1, $noreg, 0, $noreg, %260.sub_32bit:gr64_nosp :: (store 4 into %ir.e1)
SU(8):   %48:gr32 = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
SU(9):   %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @is2, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is2)
SU(10):   %48:gr32 = nsw ADD32ri8 %48:gr32(tied-def 0), 2, implicit-def dead $eflags
SU(11):   MOV32mr %stack.16.e2, 1, $noreg, 0, $noreg, %48:gr32 :: (store 4 into %ir.e2)
SU(12):   %51:gr32 = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
SU(13):   %51:gr32 = nsw SUB32rm %51:gr32(tied-def 0), $rip, 1, $noreg, @is3, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is3)
SU(14):   %51:gr32 = nsw ADD32ri8 %51:gr32(tied-def 0), 2, implicit-def dead $eflags
SU(15):   MOV32mr %stack.17.e3, 1, $noreg, 0, $noreg, %51:gr32 :: (store 4 into %ir.e3)
SU(16):   MOV64mr %stack.19.x0, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x0)

********** MI Scheduling **********
zran3:%bb.0 entry
  From: $xmm0 = COPY %40:fr64
    To: CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %40:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $edi = COPY %39:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edi = COPY %39:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %40:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $xmm0 = COPY %40:fr64
SU(1):   $edi = COPY %39:gr32

********** MI Scheduling **********
zran3:%bb.0 entry
  From: undef %37.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: %40 %39 
Live Thru: 
  LiveReg: %40
  LiveReg: %39
  UpdateRegP: SU(8) MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %39:gr32 :: (store 4 into %ir.i)
              to 
Top Pressure:

Bottom Pressure:
FR32=1
FR32X=1
GR16=2
Excess PSets: 
SU(0):   undef %37.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%37
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   undef %29.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=%29
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   undef %31.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%31
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %31.sub_32bit:gr64_nosp = ADD32ri8 %31.sub_32bit:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=%31
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%31
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %31.sub_32bit:gr64_nosp = nsw IMUL32rm %31.sub_32bit:gr64_nosp(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=%31
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%31
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%31
    SU(1): Data Latency=4 Reg=%29
  Successors:
    SU(6): Data Latency=1 Reg=%35
    SU(6): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %35.sub_32bit:gr64_nosp = nsw IMUL32rm %35.sub_32bit:gr64_nosp(tied-def 0), %stack.4.nx.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.nx.addr)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=%35
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%35
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%35
    SU(0): Data Latency=4 Reg=%37
  Successors:
    SU(8): Data Latency=1 Reg=%39
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %39:gr32 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%39
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %40:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %40:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
Bottom Pressure:
GR16=2
  Ready @3c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %39:gr32 :: (store 4 into %ir.i)
Bottom Pressure:
GR16=2
  Ready @0c
  BotQ.A TopLatency SU(8) 15c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=4
  LiveReg: %37
  UpdateRegP: SU(7) %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
              to 
  LiveReg: %35
  UpdateRegP: SU(7) %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %35.sub_32bit:gr64_nosp = nsw IMUL32rm %35.sub_32bit:gr64_nosp(tied-def 0), %stack.4.nx.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.nx.addr)
Bottom Pressure:
GR16=4
  LiveReg: %35
  UpdateRegP: SU(6) %35.sub_32bit:gr64_nosp = nsw IMUL32rm %35.sub_32bit:gr64_nosp(tied-def 0), %stack.4.nx.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.nx.addr)
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %29
  UpdateRegP: SU(5) undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
              to 
  LiveReg: %31
  UpdateRegP: SU(5) undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(5) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %31.sub_32bit:gr64_nosp = nsw IMUL32rm %31.sub_32bit:gr64_nosp(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
Bottom Pressure:
GR16=6
  LiveReg: %31
  UpdateRegP: SU(4) %31.sub_32bit:gr64_nosp = nsw IMUL32rm %31.sub_32bit:gr64_nosp(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %31.sub_32bit:gr64_nosp = ADD32ri8 %31.sub_32bit:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %31
  UpdateRegP: SU(3) %31.sub_32bit:gr64_nosp = ADD32ri8 %31.sub_32bit:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
  BotQ.A BotLatency SU(3) 11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %31.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
Bottom Pressure:
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %29.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
Bottom Pressure:
GR16=2
  Ready @10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %37.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
Bottom Pressure:

  Ready @5c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   undef %37.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
SU(1):   undef %29.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
SU(2):   undef %31.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
SU(3):   %31.sub_32bit:gr64_nosp = ADD32ri8 %31.sub_32bit:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
SU(4):   %31.sub_32bit:gr64_nosp = nsw IMUL32rm %31.sub_32bit:gr64_nosp(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
SU(5):   undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
SU(6):   %35.sub_32bit:gr64_nosp = nsw IMUL32rm %35.sub_32bit:gr64_nosp(tied-def 0), %stack.4.nx.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.nx.addr)
SU(7):   %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
SU(8):   MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %39:gr32 :: (store 4 into %ir.i)
SU(9):   %40:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)

********** MI Scheduling **********
zran3:%bb.0 entry
  From: $rdi = COPY %20:gr64
    To: CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %20:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %21:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %22:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %23:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %23:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %22:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %21:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %20:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = COPY %20:gr64
SU(1):   $esi = COPY %21:gr32
SU(2):   $edx = COPY %22:gr32
SU(3):   $ecx = COPY %23:gr32

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %19:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %19:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%19
  Single Issue       : false;
SU(1):   MOVSDmr %stack.22.a2, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.a2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%19
  Single Issue       : false;
SU(2):   %20:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %21:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %22:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %22:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %21:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %20:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.22.a2, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.a2)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %19:fr64 = COPY killed $xmm0
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %19:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.22.a2, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.a2)
SU(2):   %20:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(3):   %21:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(4):   %22:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(5):   %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)

********** MI Scheduling **********
zran3:%bb.0 entry
  From: $xmm0 = COPY %16:fr64
    To: CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %16:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $edi = COPY %18:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edi = COPY %18:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %16:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $xmm0 = COPY %16:fr64
SU(1):   $edi = COPY %18:gr32

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %15:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %15:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%15
  Single Issue       : false;
SU(1):   MOVSDmr %stack.21.a1, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.a1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%15
  Single Issue       : false;
SU(2):   %16:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %18:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%18
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %18:gr32 = nsw IMUL32rm %18:gr32(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%18
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %18:gr32 = nsw IMUL32rm %18:gr32(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %18:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %16:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.21.a1, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.a1)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:fr64 = COPY killed $xmm0
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %15:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.21.a1, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.a1)
SU(2):   %16:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
SU(3):   %18:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
SU(4):   %18:gr32 = nsw IMUL32rm %18:gr32(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)

********** MI Scheduling **********
zran3:%bb.0 entry
  From: $xmm0 = COPY %12:fr64
    To: CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %12:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $edi = COPY %14:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edi = COPY %14:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %12:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $xmm0 = COPY %12:fr64
SU(1):   $edi = COPY %14:gr32

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %12:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(1):   MOVSDmr %stack.25.a, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.a)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(2):   %13:gr64 = MOV64ri 4734050326586327040
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%13
  Single Issue       : false;
SU(3):   MOV64mr %stack.26.x, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%13
  Single Issue       : false;
SU(4):   %14:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %14:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.26.x, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x)
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %13:gr64 = MOV64ri 4734050326586327040
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.25.a, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.a)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:fr64 = COPY killed $xmm0
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %12:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.25.a, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.a)
SU(2):   %13:gr64 = MOV64ri 4734050326586327040
SU(3):   MOV64mr %stack.26.x, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x)
SU(4):   %14:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(1):   %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(2):   $xmm0 = COPY %10:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%10
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %11:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %11:fr64
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %10:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %10:fr64
SU(3):   $xmm1 = COPY %11:fr64

********** MI Scheduling **********
zran3:%bb.0 entry
  From: %7:gr32 = COPY $r9d
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %1 %249 
Live Thru: 
  LiveReg: %1
  LiveReg: %249
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %7:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%7
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %6:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%6
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %5:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %4:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%4
    SU(8): Data Latency=0 Reg=%4
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %3:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%3
    SU(7): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %2:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%2
    SU(6): Data Latency=0 Reg=%2
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.nx.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.nx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.ny.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.ny.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   undef %249.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   MOV64mr %stack.7.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   MOV32mi %stack.24.mm, 1, $noreg, 0, $noreg, 10 :: (store 4 into %ir.mm)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 14 13 12 11 10 9 8 7 6 
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV32mi %stack.24.mm, 1, $noreg, 0, $noreg, 10 :: (store 4 into %ir.mm)
Bottom Pressure:
GR16=4
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 13 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.7.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %2
  UpdateRegP: SU(6) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
              to 
  UpdateRegP: SU(14) MOV64mr %stack.7.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 13 12 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
              to GR16 -2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 12 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %249.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
Bottom Pressure:
GR16=6
  LiveReg: %4
  UpdateRegP: SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
              to 
  UpdateRegP: SU(12) undef %249.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
              to GR16 -2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 11 10 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.ny.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.ny.addr)
Bottom Pressure:
GR16=8
  LiveReg: %7
  UpdateRegP: SU(11) MOV32mr %stack.5.ny.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.ny.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.nx.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.nx.addr)
Bottom Pressure:
GR16=10
  LiveReg: %6
  UpdateRegP: SU(10) MOV32mr %stack.4.nx.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.nx.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=12
  LiveReg: %5
  UpdateRegP: SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %2:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %3:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %4:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %5:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %6:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %7:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:gr32 = COPY $r9d
SU(1):   %6:gr32 = COPY $r8d
SU(2):   %5:gr32 = COPY $ecx
SU(3):   %4:gr32 = COPY $edx
SU(4):   %3:gr32 = COPY $esi
SU(5):   %2:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
SU(10):   MOV32mr %stack.4.nx.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.nx.addr)
SU(11):   MOV32mr %stack.5.ny.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.ny.addr)
SU(12):   undef %249.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
SU(14):   MOV64mr %stack.7.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
SU(15):   MOV32mi %stack.24.mm, 1, $noreg, 0, $noreg, 10 :: (store 4 into %ir.mm)

********** MI Scheduling **********
zran3:%bb.1 for.cond
  From: %54:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JCC_1 %bb.6, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %54:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(1):   CMP32rm %54:gr32, %stack.17.e3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e3)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%54
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %54:gr32, %stack.17.e3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e3)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %54:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %54:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   CMP32rm %54:gr32, %stack.17.e3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e3)

********** MI Scheduling **********
zran3:%bb.2 for.body
  From: %239:fr64 = MOVSDrm_alt %stack.19.x0, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x0)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %239:fr64 = MOVSDrm_alt %stack.19.x0, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%239
  Single Issue       : false;
SU(1):   MOVSDmr %stack.20.x1, 1, $noreg, 0, $noreg, %239:fr64 :: (store 8 into %ir.x1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%239
  Single Issue       : false;
SU(2):   MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.20.x1, 1, $noreg, 0, $noreg, %239:fr64 :: (store 8 into %ir.x1)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %239:fr64 = MOVSDrm_alt %stack.19.x0, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x0)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %239:fr64 = MOVSDrm_alt %stack.19.x0, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x0)
SU(1):   MOVSDmr %stack.20.x1, 1, $noreg, 0, $noreg, %239:fr64 :: (store 8 into %ir.x1)
SU(2):   MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

********** MI Scheduling **********
zran3:%bb.3 for.cond18
  From: %240:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
    To: JCC_1 %bb.5, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %240:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%240
  Single Issue       : false;
SU(1):   CMP32rm %240:gr32, %stack.16.e2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%240
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %240:gr32, %stack.16.e2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e2)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %240:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %240:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(1):   CMP32rm %240:gr32, %stack.16.e2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e2)

********** MI Scheduling **********
zran3:%bb.4 for.body20
  From: %259:fr64 = COPY killed $xmm0
    To: JMP_1 %bb.3
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %259:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%259
  Single Issue       : false;
SU(1):   MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %259:fr64 :: (store 8 into %ir.rdummy)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%259
  Single Issue       : false;
SU(2):   INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.3
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %259:fr64 :: (store 8 into %ir.rdummy)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %259:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %259:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %259:fr64 :: (store 8 into %ir.rdummy)
SU(2):   INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
zran3:%bb.4 for.body20
  From: $rdi = COPY %258:gr64
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %258:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %257:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %257:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %258:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $rdi = COPY %258:gr64
SU(1):   $xmm0 = COPY %257:fr64

********** MI Scheduling **********
zran3:%bb.4 for.body20
  From: $edi = COPY %246:gr32
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $xmm0, implicit $rdx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %246:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %256:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %247:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rdx = COPY %255:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $xmm0, implicit $rdx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rdx = COPY %255:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %247:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %256:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $edi = COPY %246:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $edi = COPY %246:gr32
SU(1):   $rsi = COPY %256:gr64
SU(2):   $xmm0 = COPY %247:fr64
SU(3):   $rdx = COPY %255:gr64

********** MI Scheduling **********
zran3:%bb.4 for.body20
  From: %245:fr64 = MOVSDrm_alt %stack.20.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=10
Live In: %1 %249 
Live Out: %255 %1 %249 %247 %246 
Live Thru: GR16=4
  LiveReg: %255
  LiveReg: %1
  UpdateRegP: SU(9) %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(5) %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %247
  LiveReg: %246
Top Pressure:
GR16=4
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %245:fr64 = MOVSDrm_alt %stack.20.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%245
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   MOVSDmr %stack.18.xx, 1, $noreg, 0, $noreg, %245:fr64 :: (store 8 into %ir.xx)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%245
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   %246:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %247:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(4):   %251:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=%251
    SU(5): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%251
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%251
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %251:gr64 = SHL64ri %251:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=%251
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%251
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %251:gr64 = ADD64rm %251:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%251
    SU(6): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%251
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %254:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%254
    SU(9): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%254
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%254
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%251
    SU(9): Data Latency=1 Reg=%254
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 1 3 2 
  Cand SU(10) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(10) %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %251
  UpdateRegP: SU(10) %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg
              to 
  LiveReg: %254
  UpdateRegP: SU(10) %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg
              to GR16 -2
  Ready @0c
  BotQ.A TopLatency SU(10) 10c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 7 9 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %254
  UpdateRegP: SU(9) %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 7 8 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %254:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 7 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %251:gr64 = ADD64rm %251:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %251
  UpdateRegP: SU(7) %251:gr64 = ADD64rm %251:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 6 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %251:gr64 = SHL64ri %251:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %251
  UpdateRegP: SU(6) %251:gr64 = SHL64ri %251:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %251
  UpdateRegP: SU(5) %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(5) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %251:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %247:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
Bottom Pressure:
GR16=6
  Ready @3c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %246:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.18.xx, 1, $noreg, 0, $noreg, %245:fr64 :: (store 8 into %ir.xx)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %245
  UpdateRegP: SU(1) MOVSDmr %stack.18.xx, 1, $noreg, 0, $noreg, %245:fr64 :: (store 8 into %ir.xx)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %245:fr64 = MOVSDrm_alt %stack.20.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %245:fr64 = MOVSDrm_alt %stack.20.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
SU(1):   MOVSDmr %stack.18.xx, 1, $noreg, 0, $noreg, %245:fr64 :: (store 8 into %ir.xx)
SU(2):   %246:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(3):   %247:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
SU(4):   %251:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(5):   %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %251:gr64 = SHL64ri %251:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(7):   %251:gr64 = ADD64rm %251:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(8):   %254:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(9):   %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(10):   %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg

********** MI Scheduling **********
zran3:%bb.5 for.end
  From: %244:fr64 = COPY killed $xmm0
    To: JMP_1 %bb.1
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %244:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%244
  Single Issue       : false;
SU(1):   MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %244:fr64 :: (store 8 into %ir.rdummy)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%244
  Single Issue       : false;
SU(2):   INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %244:fr64 :: (store 8 into %ir.rdummy)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %244:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %244:fr64 = COPY killed $xmm0
SU(1):   MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %244:fr64 :: (store 8 into %ir.rdummy)
SU(2):   INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
zran3:%bb.5 for.end
  From: $rdi = COPY %52:gr64
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %52:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %242:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %242:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %52:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = COPY %52:gr64
SU(1):   $xmm0 = COPY %242:fr64

********** MI Scheduling **********
zran3:%bb.6 for.end28
  From: MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %237:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %237:gr64 = MOV64ri 4607182418800017408
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
SU(1):   %237:gr64 = MOV64ri 4607182418800017408

********** MI Scheduling **********
zran3:%bb.8 for.body31
  From: %261:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.7
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: %237 
Live Out: %237 
Live Thru: GR16=2
  LiveReg: %237
  UpdateRegP: SU(4) MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
              to GR16 2
Top Pressure:
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
Constraining copy SU(1)
  Local use SU(8) -> SU(1)
  Local use SU(7) -> SU(1)
  Local use SU(6) -> SU(1)
  Local use SU(5) -> SU(1)
SU(0):   %261:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=%261
    SU(7): Data Latency=4 Reg=%261
    SU(6): Data Latency=4 Reg=%261
    SU(5): Data Latency=4 Reg=%261
    SU(1): Data Latency=4 Reg=%261
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %236:gr64_nosp = COPY %261:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%261
    SU(8): Ord  Latency=0 Weak
    SU(7): Ord  Latency=0 Weak
    SU(6): Ord  Latency=0 Weak
    SU(5): Ord  Latency=0 Weak
  Successors:
    SU(2): Data Latency=0 Reg=%236
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %236:gr64_nosp = SHL64ri %236:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%236
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%236
    SU(3): Data Latency=1 Reg=%236
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV64mi32 %stack.27.ten, 1, %236:gr64_nosp, 8, $noreg, 0 :: (store 8 into %ir.arrayidx34)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%236
  Successors:
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%236
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.30.j1, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx492)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%261
  Successors:
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.31.j2, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx523)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%261
  Successors:
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mi32 %stack.32.j3, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx554)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%261
  Successors:
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %238:gr32 = LEA64_32r %261:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%261
  Successors:
    SU(9): Data Latency=1 Reg=%238
    SU(1): Ord  Latency=0 Weak
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %238:gr32 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%238
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 6 5 4 
  Cand SU(9) ORDER                              
Pick Bot WEAK      
Scheduling SU(9) MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %238:gr32 :: (store 4 into %ir.i)
Bottom Pressure:
GR16=4
  LiveReg: %238
  UpdateRegP: SU(9) MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %238:gr32 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 6 5 8 
  Cand SU(4) ORDER                              
Pick Bot WEAK      
Scheduling SU(4) MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
Bottom Pressure:
GR16=6
  LiveReg: %236
  UpdateRegP: SU(3) MOV64mi32 %stack.27.ten, 1, %236:gr64_nosp, 8, $noreg, 0 :: (store 8 into %ir.arrayidx34)
              to 
  UpdateRegP: SU(4) MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 
  Cand SU(8) ORDER                              
  Cand SU(3) WEAK                               
Pick Bot WEAK      
Scheduling SU(3) MOV64mi32 %stack.27.ten, 1, %236:gr64_nosp, 8, $noreg, 0 :: (store 8 into %ir.arrayidx34)
Bottom Pressure:
GR16=6
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 2 
  Cand SU(8) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %236:gr64_nosp = SHL64ri %236:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %236
  UpdateRegP: SU(2) %236:gr64_nosp = SHL64ri %236:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 1 
  Cand SU(8) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(1) %236:gr64_nosp = COPY %261:gr64_nosp
Bottom Pressure:
GR16=6
  LiveReg: %261
  UpdateRegP: SU(1) %236:gr64_nosp = COPY %261:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(5) MOV64mi32 %stack.30.j1, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx492)
              to 
  UpdateRegP: SU(6) MOV64mi32 %stack.31.j2, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx523)
              to 
  UpdateRegP: SU(7) MOV64mi32 %stack.32.j3, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx554)
              to 
  UpdateRegP: SU(8) %238:gr32 = LEA64_32r %261:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %238:gr32 = LEA64_32r %261:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 6 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mi32 %stack.32.j3, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx554)
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mi32 %stack.31.j2, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx523)
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV64mi32 %stack.30.j1, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx492)
Bottom Pressure:
GR16=4
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %261:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %261:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(5):   MOV64mi32 %stack.30.j1, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx492)
SU(6):   MOV64mi32 %stack.31.j2, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx523)
SU(7):   MOV64mi32 %stack.32.j3, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx554)
SU(8):   %238:gr32 = LEA64_32r %261:gr64_nosp, 1, $noreg, 1, $noreg
SU(1):   %236:gr64_nosp = COPY %261:gr64_nosp
SU(2):   %236:gr64_nosp = SHL64ri %236:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(3):   MOV64mi32 %stack.27.ten, 1, %236:gr64_nosp, 8, $noreg, 0 :: (store 8 into %ir.arrayidx34)
SU(4):   MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
SU(9):   MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %238:gr32 :: (store 4 into %ir.i)

********** MI Scheduling **********
zran3:%bb.9 for.end58
  From: MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %199:gr64 = LEA64r %stack.27.ten, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %200:gr64 = LEA64r %stack.30.j1, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %201:gr64 = LEA64r %stack.31.j2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %202:gr64 = LEA64r %stack.32.j3, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %202:gr64 = LEA64r %stack.32.j3, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %201:gr64 = LEA64r %stack.31.j2, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %200:gr64 = LEA64r %stack.30.j1, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %199:gr64 = LEA64r %stack.27.ten, 1, $noreg, 0, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(1):   %199:gr64 = LEA64r %stack.27.ten, 1, $noreg, 0, $noreg
SU(2):   %200:gr64 = LEA64r %stack.30.j1, 1, $noreg, 0, $noreg
SU(3):   %201:gr64 = LEA64r %stack.31.j2, 1, $noreg, 0, $noreg
SU(4):   %202:gr64 = LEA64r %stack.32.j3, 1, $noreg, 0, $noreg

********** MI Scheduling **********
zran3:%bb.10 for.cond59
  From: %60:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
    To: JCC_1 %bb.22, 13, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %60:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%60
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %60:gr32 = DEC32r %60:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%60
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%60
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i3, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%60
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.22, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i3, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %60:gr32 = DEC32r %60:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %60:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %60:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(1):   %60:gr32 = DEC32r %60:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i3, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
zran3:%bb.12 for.cond63
  From: %170:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
    To: JCC_1 %bb.21, 13, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %170:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%170
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %170:gr32 = DEC32r %170:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%170
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%170
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %170:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%170
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.21, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %170:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %170:gr32 = DEC32r %170:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %170:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %170:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(1):   %170:gr32 = DEC32r %170:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %170:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
zran3:%bb.14 for.cond67
  From: %174:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
    To: JCC_1 %bb.20, 13, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %174:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%174
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %174:gr32 = DEC32r %174:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%174
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%174
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %174:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%174
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %174:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %174:gr32 = DEC32r %174:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %174:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %174:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(1):   %174:gr32 = DEC32r %174:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %174:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
zran3:%bb.15 for.body70
  From: %179:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JCC_1 %bb.17, 6, implicit $eflags
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=8
Live In: %1 %249 
Live Out: %1 %249 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(5) %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(1) %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %179:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(1): Data Latency=4 Reg=%179
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(0): Data Latency=4 Reg=%179
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%179
    SU(2): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %179:gr64 = SHL64ri %179:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=%179
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%179
    SU(3): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %179:gr64 = ADD64rm %179:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(2): Data Latency=1 Reg=%179
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%179
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %182:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(5): Data Latency=4 Reg=%182
    SU(5): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(4): Data Latency=4 Reg=%182
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%182
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%179
    SU(5): Data Latency=1 Reg=%182
  Successors:
    SU(8): Data Latency=1 Reg=%183
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %184:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(8): Data Latency=4 Reg=%184
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(6): Data Latency=1 Reg=%183
    SU(7): Data Latency=4 Reg=%184
  Successors:
    SU(9): Data Latency=4 Reg=%185
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(9):   UCOMISDrm %185:fr64, %stack.27.ten, 1, $noreg, 8, $noreg, implicit-def $eflags :: (dereferenceable load 8 from %ir.arrayidx78)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
    SU(8): Data Latency=4 Reg=%185
    SU(5): Out  Latency=0
    SU(3): Out  Latency=0
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   JCC_1 %bb.17, 6, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 19
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) UCOMISDrm %185:fr64, %stack.27.ten, 1, $noreg, 8, $noreg, implicit-def $eflags :: (dereferenceable load 8 from %ir.arrayidx78)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %185
  UpdateRegP: SU(9) UCOMISDrm %185:fr64, %stack.27.ten, 1, $noreg, 8, $noreg, implicit-def $eflags :: (dereferenceable load 8 from %ir.arrayidx78)
              to 
  Ready @4c
  BotQ.A TopLatency SU(9) 15c
  BotQ.A BotLatency SU(9) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
Bottom Pressure:
GR16=8
  LiveReg: %183
  UpdateRegP: SU(8) %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %184
  UpdateRegP: SU(8) %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(8) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %184:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=6
  Ready @12c
  BotQ.A BotLatency SU(7) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %179
  UpdateRegP: SU(6) %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
              to 
  LiveReg: %182
  UpdateRegP: SU(6) %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %182
  UpdateRegP: SU(5) %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %182:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @14c
  BotQ.A BotLatency SU(4) 14c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %179:gr64 = ADD64rm %179:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %179
  UpdateRegP: SU(3) %179:gr64 = ADD64rm %179:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %179:gr64 = SHL64ri %179:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %179
  UpdateRegP: SU(2) %179:gr64 = SHL64ri %179:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %179
  UpdateRegP: SU(1) %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(1) 15c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %179:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @19c
  BotQ.A BotLatency SU(0) 19c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %179:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %179:gr64 = SHL64ri %179:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %179:gr64 = ADD64rm %179:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(4):   %182:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
SU(7):   %184:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(8):   %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
SU(9):   UCOMISDrm %185:fr64, %stack.27.ten, 1, $noreg, 8, $noreg, implicit-def $eflags :: (dereferenceable load 8 from %ir.arrayidx78)

********** MI Scheduling **********
zran3:%bb.16 if.then
  From: $rdi = COPY %199:gr64
    To: CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %199:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %200:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %201:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rcx = COPY %202:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = MOV32ri 10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = MOV32ri 10
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = COPY %202:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %201:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %200:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %199:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   $rdi = COPY %199:gr64
SU(1):   $rsi = COPY %200:gr64
SU(2):   $rdx = COPY %201:gr64
SU(3):   $rcx = COPY %202:gr64
SU(4):   $r8d = MOV32ri 10
SU(5):   $r9d = MOV32ri 1

********** MI Scheduling **********
zran3:%bb.16 if.then
  From: %186:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=12
Live In: %1 %249 
Live Out: %1 %249 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(7) %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(2) %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %186:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(14): Data Latency=4 Reg=%186
    SU(1): Data Latency=4 Reg=%186
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %190:gr64 = COPY %186:gr64_with_sub_8bit
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%186
  Successors:
    SU(2): Data Latency=0 Reg=%190
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=0 Reg=%190
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%190
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %190:gr64 = SHL64ri %190:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%190
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%190
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %190:gr64 = ADD64rm %190:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(3): Data Latency=1 Reg=%190
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%190
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %192:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(13): Data Latency=4 Reg=%192
    SU(6): Data Latency=4 Reg=%192
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %194:gr64_nosp = COPY %192:gr64_with_sub_8bit
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=%192
  Successors:
    SU(7): Data Latency=0 Reg=%194
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(6): Data Latency=0 Reg=%194
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%194
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%190
    SU(7): Data Latency=1 Reg=%194
  Successors:
    SU(10): Data Latency=1 Reg=%195
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %196:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(12): Data Latency=4 Reg=%196
    SU(10): Data Latency=4 Reg=%196
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=%195
    SU(9): Data Latency=4 Reg=%196
  Successors:
    SU(11): Data Latency=4 Reg=%198
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(11):   MOVSDmr %stack.27.ten, 1, $noreg, 8, $noreg, %198:fr64 :: (store 8 into %ir.arrayidx87)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%198
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOV32mr %stack.30.j1, 1, $noreg, 4, $noreg, %196.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx89)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%196
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   MOV32mr %stack.31.j2, 1, $noreg, 4, $noreg, %192.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx91)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%192
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOV32mr %stack.32.j3, 1, $noreg, 4, $noreg, %186.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx93)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%186
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV32mr %stack.32.j3, 1, $noreg, 4, $noreg, %186.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx93)
Bottom Pressure:
GR16=6
  LiveReg: %186
  UpdateRegP: SU(1) %190:gr64 = COPY %186:gr64_with_sub_8bit
              to GR16 -2
  UpdateRegP: SU(14) MOV32mr %stack.32.j3, 1, $noreg, 4, $noreg, %186.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx93)
              to 
  Ready @0c
  BotQ.A TopLatency SU(14) 11c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 13 12 
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.31.j2, 1, $noreg, 4, $noreg, %192.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx91)
Bottom Pressure:
GR16=8
  LiveReg: %192
  UpdateRegP: SU(6) %194:gr64_nosp = COPY %192:gr64_with_sub_8bit
              to GR16 -2
  UpdateRegP: SU(13) MOV32mr %stack.31.j2, 1, $noreg, 4, $noreg, %192.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx91)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mr %stack.30.j1, 1, $noreg, 4, $noreg, %196.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx89)
Bottom Pressure:
GR16=10
  LiveReg: %196
  UpdateRegP: SU(10) %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(12) MOV32mr %stack.30.j1, 1, $noreg, 4, $noreg, %196.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx89)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOVSDmr %stack.27.ten, 1, $noreg, 8, $noreg, %198:fr64 :: (store 8 into %ir.arrayidx87)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %198
  UpdateRegP: SU(11) MOVSDmr %stack.27.ten, 1, $noreg, 8, $noreg, %198:fr64 :: (store 8 into %ir.arrayidx87)
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 15c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
Bottom Pressure:
GR16=12
  LiveReg: %195
  UpdateRegP: SU(10) %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(10) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(9) %196:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=10
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=12
  LiveReg: %190
  UpdateRegP: SU(8) %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
              to 
  LiveReg: %194
  UpdateRegP: SU(8) %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %194
  UpdateRegP: SU(7) %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %194:gr64_nosp = COPY %192:gr64_with_sub_8bit
Bottom Pressure:
GR16=10
  Ready @6c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %192:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=8
  Ready @10c
  BotQ.A BotLatency SU(5) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %190:gr64 = ADD64rm %190:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=8
  LiveReg: %190
  UpdateRegP: SU(4) %190:gr64 = ADD64rm %190:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %190:gr64 = SHL64ri %190:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %190
  UpdateRegP: SU(3) %190:gr64 = SHL64ri %190:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %190
  UpdateRegP: SU(2) %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %190:gr64 = COPY %186:gr64_with_sub_8bit
Bottom Pressure:
GR16=6
  Ready @11c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %186:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %186:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %190:gr64 = COPY %186:gr64_with_sub_8bit
SU(2):   %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %190:gr64 = SHL64ri %190:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %190:gr64 = ADD64rm %190:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(5):   %192:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %194:gr64_nosp = COPY %192:gr64_with_sub_8bit
SU(7):   %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
SU(9):   %196:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
SU(11):   MOVSDmr %stack.27.ten, 1, $noreg, 8, $noreg, %198:fr64 :: (store 8 into %ir.arrayidx87)
SU(12):   MOV32mr %stack.30.j1, 1, $noreg, 4, $noreg, %196.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx89)
SU(13):   MOV32mr %stack.31.j2, 1, $noreg, 4, $noreg, %192.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx91)
SU(14):   MOV32mr %stack.32.j3, 1, $noreg, 4, $noreg, %186.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx93)

********** MI Scheduling **********
zran3:%bb.17 if.end
  From: %208:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JCC_1 %bb.19, 6, implicit $eflags
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=8
Live In: %1 %249 
Live Out: %1 %249 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(5) %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(1) %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %208:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(1): Data Latency=4 Reg=%208
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%208
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%208
    SU(2): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %208:gr64 = SHL64ri %208:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(1): Data Latency=1 Reg=%208
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%208
    SU(3): Out  Latency=0
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %208:gr64 = ADD64rm %208:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(2): Data Latency=1 Reg=%208
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%208
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %211:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=%211
    SU(5): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%211
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%211
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%208
    SU(5): Data Latency=1 Reg=%211
  Successors:
    SU(9): Data Latency=1 Reg=%212
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %213:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(9): Data Latency=4 Reg=%213
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %214:fr64 = MOVSDrm_alt %stack.27.ten, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.arrayidx10415, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(9): Data Latency=4 Reg=%214
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(9):   UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%212
    SU(7): Data Latency=4 Reg=%213
    SU(8): Data Latency=4 Reg=%214
    SU(5): Out  Latency=0
    SU(3): Out  Latency=0
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.19, 6, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %214
  UpdateRegP: SU(9) UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
              to GR16 4
  LiveReg: %212
  UpdateRegP: SU(9) UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
              to GR16 2
  LiveReg: %213
  UpdateRegP: SU(9) UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
              to 
  Ready @4c
  BotQ.A TopLatency SU(9) 11c
  BotQ.A BotLatency SU(9) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) REG-MAX                            
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %214:fr64 = MOVSDrm_alt %stack.27.ten, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.arrayidx10415, align 16)
Bottom Pressure:
GR16=8
  Ready @8c
  BotQ.A BotLatency SU(8) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %213:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=6
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %208
  UpdateRegP: SU(6) %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
              to 
  LiveReg: %211
  UpdateRegP: SU(6) %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %211
  UpdateRegP: SU(5) %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %211:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %208:gr64 = ADD64rm %208:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %208
  UpdateRegP: SU(3) %208:gr64 = ADD64rm %208:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %208:gr64 = SHL64ri %208:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %208
  UpdateRegP: SU(2) %208:gr64 = SHL64ri %208:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %208
  UpdateRegP: SU(1) %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %208:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %208:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %208:gr64 = SHL64ri %208:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %208:gr64 = ADD64rm %208:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(4):   %211:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
SU(7):   %213:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(8):   %214:fr64 = MOVSDrm_alt %stack.27.ten, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.arrayidx10415, align 16)
SU(9):   UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)

********** MI Scheduling **********
zran3:%bb.18 if.then106
  From: $rdi = COPY %199:gr64
    To: CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %199:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %200:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %201:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rcx = COPY %202:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = MOV32ri 10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = MOV32r0 implicit-def dead $eflags
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = MOV32ri 10
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = COPY %202:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %201:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %200:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %199:gr64
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   $rdi = COPY %199:gr64
SU(1):   $rsi = COPY %200:gr64
SU(2):   $rdx = COPY %201:gr64
SU(3):   $rcx = COPY %202:gr64
SU(4):   $r8d = MOV32ri 10
SU(5):   $r9d = MOV32r0 implicit-def dead $eflags

********** MI Scheduling **********
zran3:%bb.18 if.then106
  From: %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=12
Live In: %1 %249 
Live Out: %1 %249 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(7) %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(2) %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(14): Data Latency=4 Reg=%215
    SU(1): Data Latency=4 Reg=%215
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %219:gr64 = COPY %215:gr64_with_sub_8bit
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%215
  Successors:
    SU(2): Data Latency=0 Reg=%219
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=0 Reg=%219
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%219
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %219:gr64 = SHL64ri %219:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%219
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%219
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %219:gr64 = ADD64rm %219:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(3): Data Latency=1 Reg=%219
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%219
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %221:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(13): Data Latency=4 Reg=%221
    SU(6): Data Latency=4 Reg=%221
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %223:gr64_nosp = COPY %221:gr64_with_sub_8bit
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(5): Data Latency=4 Reg=%221
  Successors:
    SU(7): Data Latency=0 Reg=%223
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(6): Data Latency=0 Reg=%223
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%223
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%219
    SU(7): Data Latency=1 Reg=%223
  Successors:
    SU(10): Data Latency=1 Reg=%224
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %225:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(12): Data Latency=4 Reg=%225
    SU(10): Data Latency=4 Reg=%225
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=%224
    SU(9): Data Latency=4 Reg=%225
  Successors:
    SU(11): Data Latency=4 Reg=%227
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(11):   MOVSDmr %stack.27.ten, 1, $noreg, 0, $noreg, %227:fr64 :: (store 8 into %ir.arrayidx11417, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%227
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOV32mr %stack.30.j1, 1, $noreg, 0, $noreg, %225.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx11619, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%225
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   MOV32mr %stack.31.j2, 1, $noreg, 0, $noreg, %221.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx11821, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%221
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOV32mr %stack.32.j3, 1, $noreg, 0, $noreg, %215.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx12023, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%215
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV32mr %stack.32.j3, 1, $noreg, 0, $noreg, %215.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx12023, align 16)
Bottom Pressure:
GR16=6
  LiveReg: %215
  UpdateRegP: SU(1) %219:gr64 = COPY %215:gr64_with_sub_8bit
              to GR16 -2
  UpdateRegP: SU(14) MOV32mr %stack.32.j3, 1, $noreg, 0, $noreg, %215.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx12023, align 16)
              to 
  Ready @0c
  BotQ.A TopLatency SU(14) 11c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 13 12 
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.31.j2, 1, $noreg, 0, $noreg, %221.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx11821, align 16)
Bottom Pressure:
GR16=8
  LiveReg: %221
  UpdateRegP: SU(6) %223:gr64_nosp = COPY %221:gr64_with_sub_8bit
              to GR16 -2
  UpdateRegP: SU(13) MOV32mr %stack.31.j2, 1, $noreg, 0, $noreg, %221.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx11821, align 16)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mr %stack.30.j1, 1, $noreg, 0, $noreg, %225.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx11619, align 16)
Bottom Pressure:
GR16=10
  LiveReg: %225
  UpdateRegP: SU(10) %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(12) MOV32mr %stack.30.j1, 1, $noreg, 0, $noreg, %225.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx11619, align 16)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOVSDmr %stack.27.ten, 1, $noreg, 0, $noreg, %227:fr64 :: (store 8 into %ir.arrayidx11417, align 16)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %227
  UpdateRegP: SU(11) MOVSDmr %stack.27.ten, 1, $noreg, 0, $noreg, %227:fr64 :: (store 8 into %ir.arrayidx11417, align 16)
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 15c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
Bottom Pressure:
GR16=12
  LiveReg: %224
  UpdateRegP: SU(10) %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(10) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(9) %225:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=10
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=12
  LiveReg: %219
  UpdateRegP: SU(8) %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
              to 
  LiveReg: %223
  UpdateRegP: SU(8) %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %223
  UpdateRegP: SU(7) %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %223:gr64_nosp = COPY %221:gr64_with_sub_8bit
Bottom Pressure:
GR16=10
  Ready @6c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %221:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=8
  Ready @10c
  BotQ.A BotLatency SU(5) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %219:gr64 = ADD64rm %219:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=8
  LiveReg: %219
  UpdateRegP: SU(4) %219:gr64 = ADD64rm %219:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %219:gr64 = SHL64ri %219:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %219
  UpdateRegP: SU(3) %219:gr64 = SHL64ri %219:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %219
  UpdateRegP: SU(2) %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %219:gr64 = COPY %215:gr64_with_sub_8bit
Bottom Pressure:
GR16=6
  Ready @11c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %219:gr64 = COPY %215:gr64_with_sub_8bit
SU(2):   %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %219:gr64 = SHL64ri %219:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %219:gr64 = ADD64rm %219:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(5):   %221:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %223:gr64_nosp = COPY %221:gr64_with_sub_8bit
SU(7):   %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
SU(9):   %225:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
SU(11):   MOVSDmr %stack.27.ten, 1, $noreg, 0, $noreg, %227:fr64 :: (store 8 into %ir.arrayidx11417, align 16)
SU(12):   MOV32mr %stack.30.j1, 1, $noreg, 0, $noreg, %225.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx11619, align 16)
SU(13):   MOV32mr %stack.31.j2, 1, $noreg, 0, $noreg, %221.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx11821, align 16)
SU(14):   MOV32mr %stack.32.j3, 1, $noreg, 0, $noreg, %215.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx12023, align 16)

********** MI Scheduling **********
zran3:%bb.22 for.end134
  From: MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i1)
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.8.i0, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i0)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %111:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %141:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %141:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %111:fr64 = FsFLD0SD
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.8.i0, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i0)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i1)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i1)
SU(1):   MOV32mi %stack.8.i0, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i0)
SU(2):   MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
SU(3):   %111:fr64 = FsFLD0SD
SU(4):   %141:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
zran3:%bb.24 for.body137
  From: MOV64mi32 %stack.28.best, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.best)
    To: JCC_1 %bb.26, 6, implicit $eflags
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.28.best, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.best)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %109:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%109
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %109:gr64_nosp = SHL64ri %109:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%109
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%109
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(3):   %110:fr64 = MOVSDrm_alt %stack.27.ten, 1, %109:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx140)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%109
  Successors:
    SU(4): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(4):   UCOMISDrr %110:fr64, %111:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%110
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 6, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) UCOMISDrr %110:fr64, %111:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %110:fr64 = MOVSDrm_alt %stack.27.ten, 1, %109:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx140)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %109:gr64_nosp = SHL64ri %109:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %109:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.28.best, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.best)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   MOV64mi32 %stack.28.best, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.best)
SU(1):   %109:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(2):   %109:gr64_nosp = SHL64ri %109:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(3):   %110:fr64 = MOVSDrm_alt %stack.27.ten, 1, %109:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx140)
SU(4):   UCOMISDrr %110:fr64, %111:fr64, implicit-def $eflags

********** MI Scheduling **********
zran3:%bb.25 if.then142
  From: %113:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.27
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %113:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(14): Data Latency=4 Reg=%113
    SU(10): Data Latency=4 Reg=%113
    SU(6): Data Latency=4 Reg=%113
    SU(1): Data Latency=4 Reg=%113
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mi %stack.33.jg, 8, %113:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx146)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   undef %117.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%117
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %262:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(15): Data Latency=4 Reg=%262
    SU(12): Data Latency=4 Reg=%262
    SU(8): Data Latency=4 Reg=%262
    SU(4): Data Latency=4 Reg=%262
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   undef %119.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx150)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%262
  Successors:
    SU(5): Data Latency=4 Reg=%119
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%119
    SU(2): Data Latency=4 Reg=%117
  Successors:
    SU(6): Data Latency=1 Reg=%121
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%121
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%124
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   undef %126.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%262
  Successors:
    SU(9): Data Latency=4 Reg=%126
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%126
    SU(7): Data Latency=4 Reg=%124
  Successors:
    SU(10): Data Latency=1 Reg=%128
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%128
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(11):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Data Latency=4 Reg=%132
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   undef %134.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx168)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%262
  Successors:
    SU(13): Data Latency=4 Reg=%134
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(12): Data Latency=4 Reg=%134
    SU(11): Data Latency=4 Reg=%132
  Successors:
    SU(14): Data Latency=1 Reg=%136
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%113
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(15):   %137:gr32 = LEA64_32r %262:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%262
  Successors:
    SU(16): Data Latency=1 Reg=%137
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %137:gr32 :: (store 4 into %ir.i1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%137
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 14 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %137:gr32 :: (store 4 into %ir.i1)
Bottom Pressure:
GR16=2
  LiveReg: %137
  UpdateRegP: SU(16) MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %137:gr32 :: (store 4 into %ir.i1)
              to 
  Ready @0c
  BotQ.A TopLatency SU(16) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %137:gr32 = LEA64_32r %262:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %262
  UpdateRegP: SU(4) undef %119.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx150)
              to GR16 -2
  UpdateRegP: SU(8) undef %126.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
              to GR16 -2
  UpdateRegP: SU(12) undef %134.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx168)
              to GR16 -2
  UpdateRegP: SU(15) %137:gr32 = LEA64_32r %262:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(15) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
Bottom Pressure:
GR16=6
  LiveReg: %113
  UpdateRegP: SU(1) MOV32mi %stack.33.jg, 8, %113:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx146)
              to 
  UpdateRegP: SU(6) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
              to GR16 2
  UpdateRegP: SU(10) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
              to GR16 2
  UpdateRegP: SU(14) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
              to GR16 2
  LiveReg: %136
  UpdateRegP: SU(14) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
              to 
  Ready @0c
  BotQ.A TopLatency SU(14) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %132
  UpdateRegP: SU(13) %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
              to 
  LiveReg: %134
  UpdateRegP: SU(13) %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 11 
  Cand SU(10) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) undef %134.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx168)
Bottom Pressure:
GR16=6
  Ready @5c
  BotQ.A BotLatency SU(12) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
Bottom Pressure:
GR16=4
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
Bottom Pressure:
GR16=6
  LiveReg: %128
  UpdateRegP: SU(10) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 6 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %124
  UpdateRegP: SU(9) %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
              to 
  LiveReg: %126
  UpdateRegP: SU(9) %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 7 
  Cand SU(6) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) undef %126.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
Bottom Pressure:
GR16=6
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
Bottom Pressure:
GR16=6
  LiveReg: %121
  UpdateRegP: SU(6) MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
              to 
  Ready @2c
  BotQ.A TopLatency SU(6) 9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %117
  UpdateRegP: SU(5) %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
              to 
  LiveReg: %119
  UpdateRegP: SU(5) %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @3c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %119.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx150)
Bottom Pressure:
GR16=6
  Ready @7c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %262:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @11c
  BotQ.A BotLatency SU(3) 9c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %117.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
Bottom Pressure:
GR16=2
  Ready @7c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %stack.33.jg, 8, %113:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx146)
Bottom Pressure:
GR16=2
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %113:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @7c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %113:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   MOV32mi %stack.33.jg, 8, %113:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx146)
SU(2):   undef %117.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
SU(3):   %262:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(4):   undef %119.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx150)
SU(5):   %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
SU(6):   MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
SU(7):   undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
SU(8):   undef %126.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
SU(9):   %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
SU(10):   MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
SU(11):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
SU(12):   undef %134.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx168)
SU(13):   %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
SU(14):   MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
SU(15):   %137:gr32 = LEA64_32r %262:gr64_nosp, 1, $noreg, -1, $noreg
SU(16):   MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %137:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
zran3:%bb.26 if.else
  From: %112:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %112:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%112
    SU(3): Data Latency=4 Reg=%112
    SU(2): Data Latency=4 Reg=%112
    SU(1): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(1):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx178)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%112
  Successors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 84, $noreg, 0 :: (store 4 into %ir.arrayidx182)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%112
  Successors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 164, $noreg, 0 :: (store 4 into %ir.arrayidx186)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%112
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 244, $noreg, 0 :: (store 4 into %ir.arrayidx190)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%112
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 244, $noreg, 0 :: (store 4 into %ir.arrayidx190)
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 164, $noreg, 0 :: (store 4 into %ir.arrayidx186)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 84, $noreg, 0 :: (store 4 into %ir.arrayidx182)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx178)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %112:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %112:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx178)
SU(2):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 84, $noreg, 0 :: (store 4 into %ir.arrayidx182)
SU(3):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 164, $noreg, 0 :: (store 4 into %ir.arrayidx186)
SU(4):   MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 244, $noreg, 0 :: (store 4 into %ir.arrayidx190)

********** MI Scheduling **********
zran3:%bb.27 if.end191
  From: MOV64mr %stack.28.best, 1, $noreg, 0, $noreg, %237:gr64 :: (store 8 into %ir.best)
    To: JCC_1 %bb.29, 6, implicit $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mr %stack.28.best, 1, $noreg, 0, $noreg, %237:gr64 :: (store 8 into %ir.best)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %140:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%140
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %140:gr64_nosp = SHL64ri %140:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%140
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%140
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   UCOMISDrm %141:fr64, %stack.27.ten, 1, %140:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx19430, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%140
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 6, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) UCOMISDrm %141:fr64, %stack.27.ten, 1, %140:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx19430, align 16)
  Ready @4c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %140:gr64_nosp = SHL64ri %140:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %140:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr %stack.28.best, 1, $noreg, 0, $noreg, %237:gr64 :: (store 8 into %ir.best)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   MOV64mr %stack.28.best, 1, $noreg, 0, $noreg, %237:gr64 :: (store 8 into %ir.best)
SU(1):   %140:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
SU(2):   %140:gr64_nosp = SHL64ri %140:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(3):   UCOMISDrm %141:fr64, %stack.27.ten, 1, %140:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx19430, align 16)

********** MI Scheduling **********
zran3:%bb.28 if.then196
  From: %143:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.23
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %143:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(14): Data Latency=4 Reg=%143
    SU(10): Data Latency=4 Reg=%143
    SU(6): Data Latency=4 Reg=%143
    SU(1): Data Latency=4 Reg=%143
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mi %stack.33.jg, 8, %143:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx20032, align 8)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%143
  Successors:
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   undef %147.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%147
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %263:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(15): Data Latency=4 Reg=%263
    SU(12): Data Latency=4 Reg=%263
    SU(8): Data Latency=4 Reg=%263
    SU(4): Data Latency=4 Reg=%263
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   undef %149.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx20433, align 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%263
  Successors:
    SU(5): Data Latency=4 Reg=%149
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%149
    SU(2): Data Latency=4 Reg=%147
  Successors:
    SU(6): Data Latency=1 Reg=%151
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%151
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%143
  Successors:
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%154
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   undef %156.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx21335, align 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%263
  Successors:
    SU(9): Data Latency=4 Reg=%156
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%156
    SU(7): Data Latency=4 Reg=%154
  Successors:
    SU(10): Data Latency=1 Reg=%158
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%158
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%143
  Successors:
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(11):   undef %162.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Data Latency=4 Reg=%162
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   undef %164.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx22237, align 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=%263
  Successors:
    SU(13): Data Latency=4 Reg=%164
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(12): Data Latency=4 Reg=%164
    SU(11): Data Latency=4 Reg=%162
  Successors:
    SU(14): Data Latency=1 Reg=%166
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=%166
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%143
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(15):   %167:gr32 = LEA64_32r %263:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%263
  Successors:
    SU(16): Data Latency=1 Reg=%167
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   MOV32mr %stack.8.i0, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i0)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%167
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.23
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 14 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(17) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 14 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) MOV32mr %stack.8.i0, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i0)
Bottom Pressure:
GR16=2
  LiveReg: %167
  UpdateRegP: SU(16) MOV32mr %stack.8.i0, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i0)
              to 
  Ready @0c
  BotQ.A TopLatency SU(16) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %167:gr32 = LEA64_32r %263:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=2
  LiveReg: %263
  UpdateRegP: SU(4) undef %149.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx20433, align 8)
              to GR16 -2
  UpdateRegP: SU(8) undef %156.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx21335, align 8)
              to GR16 -2
  UpdateRegP: SU(12) undef %164.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx22237, align 8)
              to GR16 -2
  UpdateRegP: SU(15) %167:gr32 = LEA64_32r %263:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
Bottom Pressure:
GR16=6
  LiveReg: %143
  UpdateRegP: SU(1) MOV32mi %stack.33.jg, 8, %143:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx20032, align 8)
              to 
  UpdateRegP: SU(6) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
              to GR16 2
  UpdateRegP: SU(10) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
              to GR16 2
  UpdateRegP: SU(14) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
              to GR16 2
  LiveReg: %166
  UpdateRegP: SU(14) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
              to 
  Ready @0c
  BotQ.A TopLatency SU(14) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %162
  UpdateRegP: SU(13) %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
              to 
  LiveReg: %164
  UpdateRegP: SU(13) %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 11 
  Cand SU(10) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) undef %164.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx22237, align 8)
Bottom Pressure:
GR16=6
  Ready @5c
  BotQ.A BotLatency SU(12) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) undef %162.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
Bottom Pressure:
GR16=4
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
Bottom Pressure:
GR16=6
  LiveReg: %158
  UpdateRegP: SU(10) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 6 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %154
  UpdateRegP: SU(9) %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
              to 
  LiveReg: %156
  UpdateRegP: SU(9) %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 7 
  Cand SU(6) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) undef %156.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx21335, align 8)
Bottom Pressure:
GR16=6
  Ready @6c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
Bottom Pressure:
GR16=6
  LiveReg: %151
  UpdateRegP: SU(6) MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
              to 
  Ready @2c
  BotQ.A TopLatency SU(6) 9c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %147
  UpdateRegP: SU(5) %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
              to 
  LiveReg: %149
  UpdateRegP: SU(5) %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
              to GR16 -2
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %149.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx20433, align 8)
Bottom Pressure:
GR16=6
  Ready @7c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %263:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
Bottom Pressure:
GR16=4
  Ready @11c
  BotQ.A BotLatency SU(3) 9c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %147.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
Bottom Pressure:
GR16=2
  Ready @7c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %stack.33.jg, 8, %143:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx20032, align 8)
Bottom Pressure:
GR16=2
  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %143:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @8c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %143:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   MOV32mi %stack.33.jg, 8, %143:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx20032, align 8)
SU(2):   undef %147.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
SU(3):   %263:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
SU(4):   undef %149.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx20433, align 8)
SU(5):   %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
SU(6):   MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
SU(7):   undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
SU(8):   undef %156.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx21335, align 8)
SU(9):   %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
SU(10):   MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
SU(11):   undef %162.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
SU(12):   undef %164.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx22237, align 8)
SU(13):   %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
SU(14):   MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
SU(15):   %167:gr32 = LEA64_32r %263:gr64_nosp, 1, $noreg, -1, $noreg
SU(16):   MOV32mr %stack.8.i0, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i0)
SU(17):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
zran3:%bb.29 if.else229
  From: %142:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.23
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %142:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%142
    SU(3): Data Latency=4 Reg=%142
    SU(2): Data Latency=4 Reg=%142
    SU(1): Data Latency=4 Reg=%142
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx23340, align 8)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 80, $noreg, 0 :: (store 4 into %ir.arrayidx23741, align 8)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 160, $noreg, 0 :: (store 4 into %ir.arrayidx24142, align 8)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 240, $noreg, 0 :: (store 4 into %ir.arrayidx24543, align 8)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%142
  Single Issue       : false;
SU(5):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.23
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 240, $noreg, 0 :: (store 4 into %ir.arrayidx24543, align 8)
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 160, $noreg, 0 :: (store 4 into %ir.arrayidx24142, align 8)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 80, $noreg, 0 :: (store 4 into %ir.arrayidx23741, align 8)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx23340, align 8)
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %142:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %142:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx23340, align 8)
SU(2):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 80, $noreg, 0 :: (store 4 into %ir.arrayidx23741, align 8)
SU(3):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 160, $noreg, 0 :: (store 4 into %ir.arrayidx24142, align 8)
SU(4):   MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 240, $noreg, 0 :: (store 4 into %ir.arrayidx24543, align 8)
SU(5):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
zran3:%bb.30 for.end248
  From: MOV32mi %stack.10.m1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m1)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.10.m1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.9.m0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m0)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.9.m0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m0)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.10.m1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m1)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   MOV32mi %stack.10.m1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m1)
SU(1):   MOV32mi %stack.9.m0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m0)
SU(2):   MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)

********** MI Scheduling **********
zran3:%bb.31 for.cond249
  From: %62:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JCC_1 %bb.39, 13, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %62:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%62
  Single Issue       : false;
SU(1):   CMP32rm %62:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%62
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %62:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %62:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %62:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   CMP32rm %62:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)

********** MI Scheduling **********
zran3:%bb.33 for.cond252
  From: %95:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
    To: JCC_1 %bb.38, 13, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %95:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%95
  Single Issue       : false;
SU(1):   CMP32rm %95:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%95
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %95:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %95:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %95:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(1):   CMP32rm %95:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)

********** MI Scheduling **********
zran3:%bb.35 for.cond255
  From: %97:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.37, 13, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %97:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(1):   CMP32rm %97:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%97
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.37, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %97:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %97:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %97:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %97:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)

********** MI Scheduling **********
zran3:%bb.36 for.body257
  From: %102:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.35
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: %1 %249 
Live Out: %1 %249 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(5) %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(1) %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %102:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%102
    SU(1): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%102
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%102
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%102
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=%102
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%102
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %105:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%105
    SU(5): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%105
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%105
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%102
    SU(5): Data Latency=1 Reg=%105
  Successors:
    SU(8): Data Latency=1 Reg=%106
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %107:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(8): Data Latency=4 Reg=%107
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%106
    SU(7): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%107
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(9):   INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.35
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(9) 11c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
Bottom Pressure:
GR16=8
  LiveReg: %106
  UpdateRegP: SU(8) MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
              to GR16 2
  LiveReg: %107
  UpdateRegP: SU(8) MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %107:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=6
  Ready @7c
  BotQ.A BotLatency SU(7) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %102
  UpdateRegP: SU(6) %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
              to 
  LiveReg: %105
  UpdateRegP: SU(6) %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %105
  UpdateRegP: SU(5) %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %105:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %102
  UpdateRegP: SU(3) %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %102
  UpdateRegP: SU(2) %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %102
  UpdateRegP: SU(1) %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %102:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @14c
  BotQ.A BotLatency SU(0) 14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %102:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(4):   %105:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
SU(7):   %107:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(8):   MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
SU(9):   INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
zran3:%bb.39 for.end272
  From: MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %94:gr64 = MOV64ri -4616189618054758400
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %94:gr64 = MOV64ri -4616189618054758400
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
SU(1):   %94:gr64 = MOV64ri -4616189618054758400

********** MI Scheduling **********
zran3:%bb.40 for.cond273
  From: %64:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JCC_1 %bb.42, 12, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %64:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%64
  Single Issue       : false;
SU(1):   CMP32rm %64:gr32, %stack.9.m0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m0)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%64
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.42, 12, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %64:gr32, %stack.9.m0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m0)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %64:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %64:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   CMP32rm %64:gr32, %stack.9.m0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m0)

********** MI Scheduling **********
zran3:%bb.41 for.body275
  From: %84:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.40
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=12
Live In: %94 %1 %249 
Live Out: %94 %1 %249 
Live Thru: GR16=6
  LiveReg: %94
  UpdateRegP: SU(9) MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
              to GR16 4
  LiveReg: %1
  UpdateRegP: SU(6) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(2) %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=6
Bottom Pressure:
GR16=6
Excess PSets: 
SU(0):   %84:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(8): Data Latency=4 Reg=%84
    SU(5): Data Latency=4 Reg=%84
    SU(1): Data Latency=4 Reg=%84
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %88:gr64 = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 240, $noreg :: (load 4 from %ir.arrayidx27944, align 8)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%84
  Successors:
    SU(2): Data Latency=4 Reg=%88
    SU(2): Out  Latency=0
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(1): Data Latency=4 Reg=%88
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%88
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %88:gr64 = SHL64ri %88:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(2): Data Latency=1 Reg=%88
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%88
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %88:gr64 = ADD64rm %88:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 8
  Predecessors:
    SU(3): Data Latency=1 Reg=%88
    SU(3): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%88
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %91:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 160, $noreg :: (load 4 from %ir.arrayidx28545, align 8)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%84
  Successors:
    SU(6): Data Latency=4 Reg=%91
    SU(6): Out  Latency=0
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=%91
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%91
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%88
    SU(6): Data Latency=1 Reg=%91
  Successors:
    SU(9): Data Latency=1 Reg=%92
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %93:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 80, $noreg :: (load 4 from %ir.arrayidx29146, align 8)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%84
  Successors:
    SU(9): Data Latency=4 Reg=%93
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1 Reg=%92
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%93
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(10):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=6
  Ready @3c
  BotQ.A TopLatency SU(10) 15c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
Bottom Pressure:
GR16=10
  LiveReg: %92
  UpdateRegP: SU(9) MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
              to GR16 2
  LiveReg: %93
  UpdateRegP: SU(9) MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %93:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 80, $noreg :: (load 4 from %ir.arrayidx29146, align 8)
Bottom Pressure:
GR16=10
  LiveReg: %84
  UpdateRegP: SU(1) %88:gr64 = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 240, $noreg :: (load 4 from %ir.arrayidx27944, align 8)
              to GR16 -2
  UpdateRegP: SU(5) %91:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 160, $noreg :: (load 4 from %ir.arrayidx28545, align 8)
              to GR16 -2
  UpdateRegP: SU(8) %93:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 80, $noreg :: (load 4 from %ir.arrayidx29146, align 8)
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=12
  LiveReg: %88
  UpdateRegP: SU(7) %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
              to 
  LiveReg: %91
  UpdateRegP: SU(7) %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %91
  UpdateRegP: SU(6) %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %91:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 160, $noreg :: (load 4 from %ir.arrayidx28545, align 8)
Bottom Pressure:
GR16=10
  Ready @9c
  BotQ.A BotLatency SU(5) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %88:gr64 = ADD64rm %88:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=10
  LiveReg: %88
  UpdateRegP: SU(4) %88:gr64 = ADD64rm %88:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %88:gr64 = SHL64ri %88:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %88
  UpdateRegP: SU(3) %88:gr64 = SHL64ri %88:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %88
  UpdateRegP: SU(2) %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %88:gr64 = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 240, $noreg :: (load 4 from %ir.arrayidx27944, align 8)
Bottom Pressure:
GR16=8
  Ready @14c
  BotQ.A BotLatency SU(1) 14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %84:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=6
  Ready @18c
  BotQ.A BotLatency SU(0) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %84:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %88:gr64 = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 240, $noreg :: (load 4 from %ir.arrayidx27944, align 8)
SU(2):   %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %88:gr64 = SHL64ri %88:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %88:gr64 = ADD64rm %88:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(5):   %91:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 160, $noreg :: (load 4 from %ir.arrayidx28545, align 8)
SU(6):   %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
SU(8):   %93:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 80, $noreg :: (load 4 from %ir.arrayidx29146, align 8)
SU(9):   MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
SU(10):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
zran3:%bb.43 for.cond297
  From: %66:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JCC_1 %bb.45, 12, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(1):   CMP32rm %66:gr32, %stack.10.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.45, 12, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %66:gr32, %stack.10.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %66:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   CMP32rm %66:gr32, %stack.10.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)

********** MI Scheduling **********
zran3:%bb.44 for.body299
  From: %73:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.43
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=12
Live In: %237 %1 %249 
Live Out: %237 %1 %249 
Live Thru: GR16=6
  LiveReg: %237
  UpdateRegP: SU(9) MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
              to GR16 4
  LiveReg: %1
  UpdateRegP: SU(6) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %249
  UpdateRegP: SU(2) %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=6
Bottom Pressure:
GR16=6
Excess PSets: 
SU(0):   %73:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(8): Data Latency=4 Reg=%73
    SU(5): Data Latency=4 Reg=%73
    SU(1): Data Latency=4 Reg=%73
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %77:gr64 = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 244, $noreg :: (load 4 from %ir.arrayidx303)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
  Successors:
    SU(2): Data Latency=4 Reg=%77
    SU(2): Out  Latency=0
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(1): Data Latency=4 Reg=%77
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%77
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %77:gr64 = SHL64ri %77:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(2): Data Latency=1 Reg=%77
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%77
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %77:gr64 = ADD64rm %77:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 8
  Predecessors:
    SU(3): Data Latency=1 Reg=%77
    SU(3): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%77
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %80:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 164, $noreg :: (load 4 from %ir.arrayidx309)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
  Successors:
    SU(6): Data Latency=4 Reg=%80
    SU(6): Out  Latency=0
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=%80
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%80
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%77
    SU(6): Data Latency=1 Reg=%80
  Successors:
    SU(9): Data Latency=1 Reg=%81
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %82:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 84, $noreg :: (load 4 from %ir.arrayidx315)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
  Successors:
    SU(9): Data Latency=4 Reg=%82
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1 Reg=%81
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%82
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(10):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=6
  Ready @3c
  BotQ.A TopLatency SU(10) 15c
  BotQ.A BotLatency SU(10) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
Bottom Pressure:
GR16=10
  LiveReg: %81
  UpdateRegP: SU(9) MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
              to GR16 2
  LiveReg: %82
  UpdateRegP: SU(9) MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %82:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 84, $noreg :: (load 4 from %ir.arrayidx315)
Bottom Pressure:
GR16=10
  LiveReg: %73
  UpdateRegP: SU(1) %77:gr64 = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 244, $noreg :: (load 4 from %ir.arrayidx303)
              to GR16 -2
  UpdateRegP: SU(5) %80:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 164, $noreg :: (load 4 from %ir.arrayidx309)
              to GR16 -2
  UpdateRegP: SU(8) %82:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 84, $noreg :: (load 4 from %ir.arrayidx315)
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=12
  LiveReg: %77
  UpdateRegP: SU(7) %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
              to 
  LiveReg: %80
  UpdateRegP: SU(7) %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %80
  UpdateRegP: SU(6) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %80:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 164, $noreg :: (load 4 from %ir.arrayidx309)
Bottom Pressure:
GR16=10
  Ready @9c
  BotQ.A BotLatency SU(5) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %77:gr64 = ADD64rm %77:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=10
  LiveReg: %77
  UpdateRegP: SU(4) %77:gr64 = ADD64rm %77:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %77:gr64 = SHL64ri %77:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %77
  UpdateRegP: SU(3) %77:gr64 = SHL64ri %77:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %77
  UpdateRegP: SU(2) %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %77:gr64 = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 244, $noreg :: (load 4 from %ir.arrayidx303)
Bottom Pressure:
GR16=8
  Ready @14c
  BotQ.A BotLatency SU(1) 14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=6
  Ready @18c
  BotQ.A BotLatency SU(0) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %73:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %77:gr64 = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 244, $noreg :: (load 4 from %ir.arrayidx303)
SU(2):   %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %77:gr64 = SHL64ri %77:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %77:gr64 = ADD64rm %77:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(5):   %80:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 164, $noreg :: (load 4 from %ir.arrayidx309)
SU(6):   %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
SU(8):   %82:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 84, $noreg :: (load 4 from %ir.arrayidx315)
SU(9):   MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
SU(10):   DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
zran3:%bb.45 for.end320
  From: $rdi = COPY %68:gr64
    To: CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %68:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %69:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %70:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %71:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %72:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %72:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %71:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %70:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %69:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %68:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $rdi = COPY %68:gr64
SU(1):   $esi = COPY %69:gr32
SU(2):   $edx = COPY %70:gr32
SU(3):   $ecx = COPY %71:gr32
SU(4):   $r8d = COPY %72:gr32

********** MI Scheduling **********
zran3:%bb.45 for.end320
  From: %68:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %68:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %69:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %70:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %71:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %72:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %72:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %71:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %70:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %69:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %68:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %68:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(1):   %69:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %70:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %71:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(4):   %72:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** INTERVALS **********
CH [0B,48r:0)[912r,928r:2)[4384r,4432r:4)[5136r,5184r:3)[8560r,8592r:1)  0@0B-phi 1@8560r 2@912r 3@5136r 4@4384r
CL [0B,48r:0)[912r,928r:2)[4384r,4432r:4)[5136r,5184r:3)[8560r,8592r:1)  0@0B-phi 1@8560r 2@912r 3@5136r 4@4384r
DH [0B,64r:0)[896r,928r:2)[2448r,2464r:3)[4368r,4432r:5)[5120r,5184r:4)[8544r,8592r:1)  0@0B-phi 1@8544r 2@896r 3@2448r 4@5120r 5@4368r
DIL [0B,96r:0)[528r,544r:4)[704r,720r:3)[864r,928r:11)[1264r,1280r:2)[1728r,1760r:10)[2400r,2464r:1)[2528r,2560r:5)[2704r,2736r:6)[4336r,4432r:8)[5088r,5184r:7)[8512r,8592r:9)  0@0B-phi 1@2400r 2@1264r 3@704r 4@528r 5@2528r 6@2704r 7@5088r 8@4336r 9@8512r 10@1728r 11@864r
DIH [0B,96r:0)[528r,544r:4)[704r,720r:3)[864r,928r:11)[1264r,1280r:2)[1728r,1760r:10)[2400r,2464r:1)[2528r,2560r:5)[2704r,2736r:6)[4336r,4432r:8)[5088r,5184r:7)[8512r,8592r:9)  0@0B-phi 1@2400r 2@1264r 3@704r 4@528r 5@2528r 6@2704r 7@5088r 8@4336r 9@8512r 10@1728r 11@864r
DL [0B,64r:0)[896r,928r:2)[2448r,2464r:3)[4368r,4432r:5)[5120r,5184r:4)[8544r,8592r:1)  0@0B-phi 1@8544r 2@896r 3@2448r 4@5120r 5@4368r
HCX [0B,48r:0)[912r,928r:2)[4384r,4432r:4)[5136r,5184r:3)[8560r,8592r:1)  0@0B-phi 1@8560r 2@912r 3@5136r 4@4384r
HDI [0B,96r:0)[528r,544r:4)[704r,720r:3)[864r,928r:11)[1264r,1280r:2)[1728r,1760r:10)[2400r,2464r:1)[2528r,2560r:5)[2704r,2736r:6)[4336r,4432r:8)[5088r,5184r:7)[8512r,8592r:9)  0@0B-phi 1@2400r 2@1264r 3@704r 4@528r 5@2528r 6@2704r 7@5088r 8@4336r 9@8512r 10@1728r 11@864r
HDX [0B,64r:0)[896r,928r:2)[2448r,2464r:3)[4368r,4432r:5)[5120r,5184r:4)[8544r,8592r:1)  0@0B-phi 1@8544r 2@896r 3@2448r 4@5120r 5@4368r
EFLAGS [304r,304d:101)[400r,400d:100)[496r,496d:99)[560r,560d:98)[656r,656d:97)[672r,672d:96)[736r,736d:95)[848r,848d:94)[944r,944d:93)[1024r,1024d:92)[1056r,1056d:91)[1136r,1136d:90)[1232r,1232d:89)[1296r,1296d:88)[1376r,1376d:87)[1456r,1456d:86)[1520r,1520d:85)[1552r,1552d:84)[1616r,1616d:83)[1648r,1648d:82)[1696r,1696d:81)[1776r,1776d:80)[1856r,1856d:16)[1936r,1952r:79)[2080r,2096r:20)[2240r,2240d:15)[2272r,2272d:14)[2304r,2304d:13)[2352r,2352d:12)[2384r,2384d:11)[2480r,2480d:10)[2512r,2512d:9)[2576r,2576d:8)[2624r,2624d:7)[2688r,2688d:19)[2752r,2752d:18)[2800r,2800d:17)[2896r,2912r:4)[3128r,3128d:21)[3360r,3360d:78)[3376r,3392r:3)[3504r,3504d:48)[3520r,3536r:2)[3648r,3648d:46)[3664r,3680r:1)[3760r,3760d:44)[3792r,3792d:43)[3824r,3824d:42)[3872r,3872d:41)[3936r,3952r:40)[4048r,4048d:39)[4080r,4080d:38)[4112r,4112d:37)[4176r,4176d:36)[4320r,4320d:35)[4448r,4448d:34)[4512r,4512d:33)[4544r,4544d:32)[4576r,4576d:31)[4624r,4624d:30)[4688r,4704r:29)[4800r,4800d:28)[4832r,4832d:27)[4864r,4864d:26)[4928r,4928d:25)[5072r,5072d:24)[5168r,5168d:0)[5200r,5200d:23)[5232r,5232d:22)[5280r,5280d:45)[5328r,5328d:47)[5472r,5488r:77)[5584r,5584d:52)[5616r,5632r:51)[6256r,6256d:50)[6272r,6288r:49)[6736r,6736d:6)[6864r,6864d:5)[6992r,7008r:76)[7104r,7120r:61)[7216r,7232r:59)[7312r,7312d:57)[7344r,7344d:56)[7376r,7376d:55)[7424r,7424d:54)[7488r,7488d:53)[7536r,7536d:58)[7584r,7584d:60)[7696r,7712r:75)[7808r,7808d:66)[7840r,7840d:65)[7872r,7872d:64)[7920r,7920d:63)[7984r,7984d:62)[8080r,8096r:74)[8192r,8192d:71)[8224r,8224d:70)[8256r,8256d:69)[8304r,8304d:68)[8368r,8368d:67)[8496r,8496d:73)[8608r,8608d:72)  0@5168r 1@3664r 2@3520r 3@3376r 4@2896r 5@6864r 6@6736r 7@2624r 8@2576r 9@2512r 10@2480r 11@2384r 12@2352r 13@2304r 14@2272r 15@2240r 16@1856r 17@2800r 18@2752r 19@2688r 20@2080r 21@3128r 22@5232r 23@5200r 24@5072r 25@4928r 26@4864r 27@4832r 28@4800r 29@4688r 30@4624r 31@4576r 32@4544r 33@4512r 34@4448r 35@4320r 36@4176r 37@4112r 38@4080r 39@4048r 40@3936r 41@3872r 42@3824r 43@3792r 44@3760r 45@5280r 46@3648r 47@5328r 48@3504r 49@6272r 50@6256r 51@5616r 52@5584r 53@7488r 54@7424r 55@7376r 56@7344r 57@7312r 58@7536r 59@7216r 60@7584r 61@7104r 62@7984r 63@7920r 64@7872r 65@7840r 66@7808r 67@8368r 68@8304r 69@8256r 70@8224r 71@8192r 72@8608r 73@8496r 74@8080r 75@7696r 76@6992r 77@5472r 78@3360r 79@1936r 80@1776r 81@1696r 82@1648r 83@1616r 84@1552r 85@1520r 86@1456r 87@1376r 88@1296r 89@1232r 90@1136r 91@1056r 92@1024r 93@944r 94@848r 95@736r 96@672r 97@656r 98@560r 99@496r 100@400r 101@304r
SIL [0B,80r:0)[880r,928r:2)[2416r,2464r:3)[4352r,4432r:5)[5104r,5184r:4)[8528r,8592r:1)  0@0B-phi 1@8528r 2@880r 3@2416r 4@5104r 5@4352r
SIH [0B,80r:0)[880r,928r:2)[2416r,2464r:3)[4352r,4432r:5)[5104r,5184r:4)[8528r,8592r:1)  0@0B-phi 1@8528r 2@880r 3@2416r 4@5104r 5@4352r
HSI [0B,80r:0)[880r,928r:2)[2416r,2464r:3)[4352r,4432r:5)[5104r,5184r:4)[8528r,8592r:1)  0@0B-phi 1@8528r 2@880r 3@2416r 4@5104r 5@4352r
R8B [0B,32r:0)[4400r,4432r:2)[5152r,5184r:1)[8576r,8592r:3)  0@0B-phi 1@5152r 2@4400r 3@8576r
R8BH [0B,32r:0)[4400r,4432r:2)[5152r,5184r:1)[8576r,8592r:3)  0@0B-phi 1@5152r 2@4400r 3@8576r
R8WH [0B,32r:0)[4400r,4432r:2)[5152r,5184r:1)[8576r,8592r:3)  0@0B-phi 1@5152r 2@4400r 3@8576r
R9B [0B,16r:0)[4416r,4432r:2)[5168r,5184r:1)  0@0B-phi 1@5168r 2@4416r
R9BH [0B,16r:0)[4416r,4432r:2)[5168r,5184r:1)  0@0B-phi 1@5168r 2@4416r
R9WH [0B,16r:0)[4416r,4432r:2)[5168r,5184r:1)  0@0B-phi 1@5168r 2@4416r
%1 [240r,8400B:0)  0@240r weight:0.000000e+00
%2 [96r,272r:0)  0@96r weight:0.000000e+00
%3 [80r,240r:0)  0@80r weight:0.000000e+00
%4 [64r,208r:0)  0@64r weight:0.000000e+00
%5 [48r,160r:0)  0@48r weight:0.000000e+00
%6 [32r,176r:0)  0@32r weight:0.000000e+00
%7 [16r,192r:0)  0@16r weight:0.000000e+00
%10 [320r,352r:0)  0@320r weight:0.000000e+00
%11 [336r,368r:0)  0@336r weight:0.000000e+00
%12 [416r,512r:0)  0@416r weight:0.000000e+00
%13 [448r,1680r:0)  0@448r weight:0.000000e+00
%14 [480r,528r:0)  0@480r weight:0.000000e+00
%15 [576r,592r:0)  0@576r weight:0.000000e+00
%16 [608r,688r:0)  0@608r weight:0.000000e+00
%18 [624r,656r:0)[656r,704r:1)  0@624r 1@656r weight:0.000000e+00
%19 [752r,768r:0)  0@752r weight:0.000000e+00
%20 [784r,864r:0)  0@784r weight:0.000000e+00
%21 [800r,880r:0)  0@800r weight:0.000000e+00
%22 [816r,896r:0)  0@816r weight:0.000000e+00
%23 [832r,912r:0)  0@832r weight:0.000000e+00
%29 [976r,1104r:0)  0@976r weight:0.000000e+00
%31 [992r,1024r:2)[1024r,1056r:1)[1056r,1104r:0)  0@1056r 1@1024r 2@992r weight:0.000000e+00
%35 [1104r,1136r:1)[1136r,1184r:0)  0@1136r 1@1104r weight:0.000000e+00
%37 [960r,1184r:0)  0@960r weight:0.000000e+00
%39 [1184r,1264r:0)  0@1184r weight:0.000000e+00
%40 [1216r,1248r:0)  0@1216r weight:0.000000e+00
%41 [1312r,1744r:0)  0@1312r weight:0.000000e+00
%44 [1408r,1424r:0)  0@1408r weight:0.000000e+00
%48 [1488r,1520r:2)[1520r,1552r:0)[1552r,1568r:1)  0@1520r 1@1552r 2@1488r weight:0.000000e+00
%51 [1584r,1616r:2)[1616r,1648r:0)[1648r,1664r:1)  0@1616r 1@1648r 2@1584r weight:0.000000e+00
%52 [1712r,2832B:0)  0@1712r weight:0.000000e+00
%53 [1792r,1808r:0)  0@1792r weight:0.000000e+00
%54 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%60 [3328r,3360r:0)[3360r,3376r:1)  0@3328r 1@3360r weight:0.000000e+00
%62 [6976r,6992r:0)  0@6976r weight:0.000000e+00
%64 [7680r,7696r:0)  0@7680r weight:0.000000e+00
%66 [8064r,8080r:0)  0@8064r weight:0.000000e+00
%68 [8416r,8512r:0)  0@8416r weight:0.000000e+00
%69 [8432r,8528r:0)  0@8432r weight:0.000000e+00
%70 [8448r,8544r:0)  0@8448r weight:0.000000e+00
%71 [8464r,8560r:0)  0@8464r weight:0.000000e+00
%72 [8480r,8576r:0)  0@8480r weight:0.000000e+00
%73 [8144r,8336r:0)  0@8144r weight:0.000000e+00
%77 [8160r,8192r:2)[8192r,8224r:0)[8224r,8256r:1)[8256r,8320r:3)  0@8192r 1@8224r 2@8160r 3@8256r weight:0.000000e+00
%80 [8272r,8304r:0)[8304r,8320r:1)  0@8272r 1@8304r weight:0.000000e+00
%81 [8320r,8352r:0)  0@8320r weight:0.000000e+00
%82 [8336r,8352r:0)  0@8336r weight:0.000000e+00
%84 [7760r,7952r:0)  0@7760r weight:0.000000e+00
%88 [7776r,7808r:2)[7808r,7840r:0)[7840r,7872r:1)[7872r,7936r:3)  0@7808r 1@7840r 2@7776r 3@7872r weight:0.000000e+00
%91 [7888r,7920r:0)[7920r,7936r:1)  0@7888r 1@7920r weight:0.000000e+00
%92 [7936r,7968r:0)  0@7936r weight:0.000000e+00
%93 [7952r,7968r:0)  0@7952r weight:0.000000e+00
%94 [7648r,8016B:0)  0@7648r weight:0.000000e+00
%95 [7088r,7104r:0)  0@7088r weight:0.000000e+00
%97 [7200r,7216r:0)  0@7200r weight:0.000000e+00
%102 [7280r,7312r:2)[7312r,7344r:0)[7344r,7376r:1)[7376r,7440r:3)  0@7312r 1@7344r 2@7280r 3@7376r weight:0.000000e+00
%105 [7392r,7424r:0)[7424r,7440r:1)  0@7392r 1@7424r weight:0.000000e+00
%106 [7440r,7472r:0)  0@7440r weight:0.000000e+00
%107 [7456r,7472r:0)  0@7456r weight:0.000000e+00
%109 [5552r,5584r:0)[5584r,5600r:1)  0@5552r 1@5584r weight:0.000000e+00
%110 [5600r,5616r:0)  0@5600r weight:0.000000e+00
%111 [5424r,6896B:0)  0@5424r weight:0.000000e+00
%112 [6112r,6176r:0)  0@6112r weight:0.000000e+00
%113 [5680r,6016r:0)  0@5680r weight:0.000000e+00
%117 [5712r,5792r:0)  0@5712r weight:0.000000e+00
%119 [5744r,5792r:0)  0@5744r weight:0.000000e+00
%121 [5792r,5808r:0)  0@5792r weight:0.000000e+00
%124 [5824r,5888r:0)  0@5824r weight:0.000000e+00
%126 [5840r,5888r:0)  0@5840r weight:0.000000e+00
%128 [5888r,5904r:0)  0@5888r weight:0.000000e+00
%132 [5920r,6000r:0)  0@5920r weight:0.000000e+00
%134 [5952r,6000r:0)  0@5952r weight:0.000000e+00
%136 [6000r,6016r:0)  0@6000r weight:0.000000e+00
%137 [6048r,6064r:0)  0@6048r weight:0.000000e+00
%140 [6224r,6256r:0)[6256r,6272r:1)  0@6224r 1@6256r weight:0.000000e+00
%141 [5440r,6896B:0)  0@5440r weight:0.000000e+00
%142 [6784r,6848r:0)  0@6784r weight:0.000000e+00
%143 [6336r,6672r:0)  0@6336r weight:0.000000e+00
%147 [6368r,6448r:0)  0@6368r weight:0.000000e+00
%149 [6400r,6448r:0)  0@6400r weight:0.000000e+00
%151 [6448r,6464r:0)  0@6448r weight:0.000000e+00
%154 [6480r,6544r:0)  0@6480r weight:0.000000e+00
%156 [6496r,6544r:0)  0@6496r weight:0.000000e+00
%158 [6544r,6560r:0)  0@6544r weight:0.000000e+00
%162 [6576r,6656r:0)  0@6576r weight:0.000000e+00
%164 [6608r,6656r:0)  0@6608r weight:0.000000e+00
%166 [6656r,6672r:0)  0@6656r weight:0.000000e+00
%167 [6704r,6720r:0)  0@6704r weight:0.000000e+00
%170 [3472r,3504r:0)[3504r,3520r:1)  0@3472r 1@3504r weight:0.000000e+00
%174 [3616r,3648r:0)[3648r,3664r:1)  0@3616r 1@3648r weight:0.000000e+00
%179 [3728r,3760r:2)[3760r,3792r:0)[3792r,3824r:1)[3824r,3888r:3)  0@3760r 1@3792r 2@3728r 3@3824r weight:0.000000e+00
%182 [3840r,3872r:0)[3872r,3888r:1)  0@3840r 1@3872r weight:0.000000e+00
%183 [3888r,3920r:0)  0@3888r weight:0.000000e+00
%184 [3904r,3920r:0)  0@3904r weight:0.000000e+00
%185 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%186 [4000r,4304r:0)  0@4000r weight:0.000000e+00
%190 [4032r,4048r:2)[4048r,4080r:0)[4080r,4112r:1)[4112r,4192r:3)  0@4048r 1@4080r 2@4032r 3@4112r weight:0.000000e+00
%192 [4128r,4288r:0)  0@4128r weight:0.000000e+00
%194 [4160r,4176r:0)[4176r,4192r:1)  0@4160r 1@4176r weight:0.000000e+00
%195 [4192r,4240r:0)  0@4192r weight:0.000000e+00
%196 [4208r,4272r:0)  0@4208r weight:0.000000e+00
%198 [4240r,4256r:0)  0@4240r weight:0.000000e+00
%199 [3200r,5360B:0)  0@3200r weight:0.000000e+00
%200 [3216r,5360B:0)  0@3216r weight:0.000000e+00
%201 [3232r,5360B:0)  0@3232r weight:0.000000e+00
%202 [3248r,5360B:0)  0@3248r weight:0.000000e+00
%208 [4480r,4512r:2)[4512r,4544r:0)[4544r,4576r:1)[4576r,4640r:3)  0@4512r 1@4544r 2@4480r 3@4576r weight:0.000000e+00
%211 [4592r,4624r:0)[4624r,4640r:1)  0@4592r 1@4624r weight:0.000000e+00
%212 [4640r,4688r:0)  0@4640r weight:0.000000e+00
%213 [4656r,4688r:0)  0@4656r weight:0.000000e+00
%214 [4672r,4688r:0)  0@4672r weight:0.000000e+00
%215 [4752r,5056r:0)  0@4752r weight:0.000000e+00
%219 [4784r,4800r:2)[4800r,4832r:0)[4832r,4864r:1)[4864r,4944r:3)  0@4800r 1@4832r 2@4784r 3@4864r weight:0.000000e+00
%221 [4880r,5040r:0)  0@4880r weight:0.000000e+00
%223 [4912r,4928r:0)[4928r,4944r:1)  0@4912r 1@4928r weight:0.000000e+00
%224 [4944r,4992r:0)  0@4944r weight:0.000000e+00
%225 [4960r,5024r:0)  0@4960r weight:0.000000e+00
%227 [4992r,5008r:0)  0@4992r weight:0.000000e+00
%236 [3124r,3128r:0)[3128r,3144r:1)  0@3124r 1@3128r weight:0.000000e+00
%237 [2864r,8400B:0)  0@2864r weight:0.000000e+00
%238 [3120r,3152r:0)  0@3120r weight:0.000000e+00
%239 [2000r,2016r:0)  0@2000r weight:0.000000e+00
%240 [2064r,2080r:0)  0@2064r weight:0.000000e+00
%242 [2672r,2720r:0)  0@2672r weight:0.000000e+00
%244 [2768r,2784r:0)  0@2768r weight:0.000000e+00
%245 [2144r,2160r:0)  0@2144r weight:0.000000e+00
%246 [2176r,2400r:0)  0@2176r weight:0.000000e+00
%247 [2192r,2432r:0)  0@2192r weight:0.000000e+00
%249 [208r,1856r:0)[1856r,8400B:1)  0@208r 1@1856r weight:0.000000e+00
%251 [2208r,2240r:2)[2240r,2272r:0)[2272r,2304r:1)[2304r,2368r:3)  0@2240r 1@2272r 2@2208r 3@2304r weight:0.000000e+00
%254 [2320r,2352r:0)[2352r,2368r:1)  0@2320r 1@2352r weight:0.000000e+00
%255 [2368r,2448r:0)  0@2368r weight:0.000000e+00
%256 [1872r,2832B:0)  0@1872r weight:0.000000e+00
%257 [2496r,2544r:0)  0@2496r weight:0.000000e+00
%258 [1888r,2832B:0)  0@1888r weight:0.000000e+00
%259 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%260 [1344r,1376r:0)[1376r,1456r:1)[1456r,1472r:2)  0@1344r 1@1376r 2@1456r weight:0.000000e+00
%261 [2960r,3124r:0)  0@2960r weight:0.000000e+00
%262 [5728r,6048r:0)  0@5728r weight:0.000000e+00
%263 [6384r,6704r:0)  0@6384r weight:0.000000e+00
RegMasks: 384r 544r 720r 928r 1280r 1760r 2464r 2560r 2736r 4432r 5184r 8592r
********** MACHINEINSTRS **********
# Machine code for function zran3: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=8, align=8, at location [SP+8]
  fi#20: size=8, align=8, at location [SP+8]
  fi#21: size=8, align=8, at location [SP+8]
  fi#22: size=8, align=8, at location [SP+8]
  fi#23: size=8, align=8, at location [SP+8]
  fi#24: size=4, align=4, at location [SP+8]
  fi#25: size=8, align=8, at location [SP+8]
  fi#26: size=8, align=8, at location [SP+8]
  fi#27: size=160, align=16, at location [SP+8]
  fi#28: size=8, align=8, at location [SP+8]
  fi#29: size=4, align=4, at location [SP+8]
  fi#30: size=80, align=16, at location [SP+8]
  fi#31: size=80, align=16, at location [SP+8]
  fi#32: size=80, align=16, at location [SP+8]
  fi#33: size=320, align=16, at location [SP+8]
  fi#34: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e+00, align=8
  cp#1: 1.300000e+01, align=8
  cp#2: 1.000000e+00, align=8
Function Live Ins: $rdi in %2, $esi in %3, $edx in %4, $ecx in %5, $r8d in %6, $r9d in %7

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $esi, $edx, $ecx, $r8d, $r9d
16B	  %7:gr32 = COPY $r9d
32B	  %6:gr32 = COPY $r8d
48B	  %5:gr32 = COPY $ecx
64B	  %4:gr32 = COPY $edx
80B	  %3:gr32 = COPY $esi
96B	  %2:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.oz.addr)
128B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
144B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
160B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
176B	  MOV32mr %stack.4.nx.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.nx.addr)
192B	  MOV32mr %stack.5.ny.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.ny.addr)
208B	  undef %249.sub_32bit:gr64_with_sub_8bit = MOV32rr %4:gr32
240B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %3:gr32
272B	  MOV64mr %stack.7.z, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.z)
288B	  MOV32mi %stack.24.mm, 1, $noreg, 0, $noreg, 10 :: (store 4 into %ir.mm)
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
336B	  %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
352B	  $xmm0 = COPY %10:fr64
368B	  $xmm1 = COPY %11:fr64
384B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
416B	  %12:fr64 = COPY killed $xmm0
432B	  MOVSDmr %stack.25.a, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.a)
448B	  %13:gr64 = MOV64ri 4734050326586327040
464B	  MOV64mr %stack.26.x, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x)
480B	  %14:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
512B	  $xmm0 = COPY %12:fr64
528B	  $edi = COPY %14:gr32
544B	  CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  %15:fr64 = COPY killed $xmm0
592B	  MOVSDmr %stack.21.a1, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.a1)
608B	  %16:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
624B	  %18:gr32 = MOV32rm %stack.4.nx.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr)
656B	  %18:gr32 = nsw IMUL32rm %18:gr32(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  $xmm0 = COPY %16:fr64
704B	  $edi = COPY %18:gr32
720B	  CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %19:fr64 = COPY killed $xmm0
768B	  MOVSDmr %stack.22.a2, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.a2)
784B	  %20:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
800B	  %21:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
816B	  %22:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
832B	  %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %20:gr64
880B	  $esi = COPY %21:gr32
896B	  $edx = COPY %22:gr32
912B	  $ecx = COPY %23:gr32
928B	  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
960B	  undef %37.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
976B	  undef %29.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
992B	  undef %31.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
1024B	  %31.sub_32bit:gr64_nosp = ADD32ri8 %31.sub_32bit:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
1056B	  %31.sub_32bit:gr64_nosp = nsw IMUL32rm %31.sub_32bit:gr64_nosp(tied-def 0), %stack.5.ny.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.ny.addr)
1104B	  undef %35.sub_32bit:gr64_nosp = LEA64_32r %29:gr64_with_sub_8bit, 1, %31:gr64_nosp, -2, $noreg
1136B	  %35.sub_32bit:gr64_nosp = nsw IMUL32rm %35.sub_32bit:gr64_nosp(tied-def 0), %stack.4.nx.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.nx.addr)
1184B	  %39:gr32 = LEA64_32r %37:gr64_with_sub_8bit, 1, %35:gr64_nosp, -2, $noreg
1200B	  MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %39:gr32 :: (store 4 into %ir.i)
1216B	  %40:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
1232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1248B	  $xmm0 = COPY %40:fr64
1264B	  $edi = COPY %39:gr32
1280B	  CALL64pcrel32 @power, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1312B	  %41:fr64 = COPY killed $xmm0
1328B	  MOVSDmr %stack.23.ai, 1, $noreg, 0, $noreg, %41:fr64 :: (store 8 into %ir.ai)
1344B	  undef %260.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ie1, $noreg :: (dereferenceable load 4 from @ie1)
1376B	  %260.sub_32bit:gr64_nosp = nsw SUB32rm %260.sub_32bit:gr64_nosp(tied-def 0), $rip, 1, $noreg, @is1, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is1)
1408B	  %44:gr32 = LEA64_32r %260:gr64_nosp, 1, $noreg, 1, $noreg
1424B	  MOV32mr %stack.14.d1, 1, $noreg, 0, $noreg, %44:gr32 :: (store 4 into %ir.d1)
1456B	  %260.sub_32bit:gr64_nosp = nsw ADD32ri8 %260.sub_32bit:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
1472B	  MOV32mr %stack.15.e1, 1, $noreg, 0, $noreg, %260.sub_32bit:gr64_nosp :: (store 4 into %ir.e1)
1488B	  %48:gr32 = MOV32rm $rip, 1, $noreg, @ie2, $noreg :: (dereferenceable load 4 from @ie2)
1520B	  %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @is2, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is2)
1552B	  %48:gr32 = nsw ADD32ri8 %48:gr32(tied-def 0), 2, implicit-def dead $eflags
1568B	  MOV32mr %stack.16.e2, 1, $noreg, 0, $noreg, %48:gr32 :: (store 4 into %ir.e2)
1584B	  %51:gr32 = MOV32rm $rip, 1, $noreg, @ie3, $noreg :: (dereferenceable load 4 from @ie3)
1616B	  %51:gr32 = nsw SUB32rm %51:gr32(tied-def 0), $rip, 1, $noreg, @is3, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from @is3)
1648B	  %51:gr32 = nsw ADD32ri8 %51:gr32(tied-def 0), 2, implicit-def dead $eflags
1664B	  MOV32mr %stack.17.e3, 1, $noreg, 0, $noreg, %51:gr32 :: (store 4 into %ir.e3)
1680B	  MOV64mr %stack.19.x0, 1, $noreg, 0, $noreg, %13:gr64 :: (store 8 into %ir.x0)
1696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1712B	  %52:gr64 = LEA64r %stack.19.x0, 1, $noreg, 0, $noreg
1728B	  $rdi = COPY %52:gr64
1744B	  $xmm0 = COPY %41:fr64
1760B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1792B	  %53:fr64 = COPY killed $xmm0
1808B	  MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %53:fr64 :: (store 8 into %ir.rdummy)
1824B	  MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
1856B	  %249:gr64_with_sub_8bit = nuw IMUL64rr %249:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1872B	  %256:gr64 = LEA64r %stack.18.xx, 1, $noreg, 0, $noreg
1888B	  %258:gr64 = LEA64r %stack.20.x1, 1, $noreg, 0, $noreg

1904B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.5
	  successors: %bb.2(0x7c000000), %bb.6(0x04000000); %bb.2(96.88%), %bb.6(3.12%)

1920B	  %54:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1936B	  CMP32rm %54:gr32, %stack.17.e3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e3)
1952B	  JCC_1 %bb.6, 13, implicit $eflags
1968B	  JMP_1 %bb.2

1984B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

2000B	  %239:fr64 = MOVSDrm_alt %stack.19.x0, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x0)
2016B	  MOVSDmr %stack.20.x1, 1, $noreg, 0, $noreg, %239:fr64 :: (store 8 into %ir.x1)
2032B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

2048B	bb.3.for.cond18:
	; predecessors: %bb.2, %bb.4
	  successors: %bb.4(0x7c000000), %bb.5(0x04000000); %bb.4(96.88%), %bb.5(3.12%)

2064B	  %240:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2080B	  CMP32rm %240:gr32, %stack.16.e2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.e2)
2096B	  JCC_1 %bb.5, 13, implicit $eflags
2112B	  JMP_1 %bb.4

2128B	bb.4.for.body20:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

2144B	  %245:fr64 = MOVSDrm_alt %stack.20.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
2160B	  MOVSDmr %stack.18.xx, 1, $noreg, 0, $noreg, %245:fr64 :: (store 8 into %ir.xx)
2176B	  %246:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
2192B	  %247:fr64 = MOVSDrm_alt %stack.25.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
2208B	  %251:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
2240B	  %251:gr64 = nsw IMUL64rr %251:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
2272B	  %251:gr64 = SHL64ri %251:gr64(tied-def 0), 3, implicit-def dead $eflags
2304B	  %251:gr64 = ADD64rm %251:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
2320B	  %254:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2352B	  %254:gr64_nosp = nsw IMUL64rr %254:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2368B	  %255:gr64 = nuw LEA64r %251:gr64, 8, %254:gr64_nosp, 8, $noreg
2384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2400B	  $edi = COPY %246:gr32
2416B	  $rsi = COPY %256:gr64
2432B	  $xmm0 = COPY %247:fr64
2448B	  $rdx = COPY %255:gr64
2464B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit killed $xmm0, implicit $rdx, implicit-def $rsp, implicit-def $ssp
2480B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2496B	  %257:fr64 = MOVSDrm_alt %stack.21.a1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a1)
2512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2528B	  $rdi = COPY %258:gr64
2544B	  $xmm0 = COPY %257:fr64
2560B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
2576B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2592B	  %259:fr64 = COPY killed $xmm0
2608B	  MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %259:fr64 :: (store 8 into %ir.rdummy)
2624B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
2640B	  JMP_1 %bb.3

2656B	bb.5.for.end:
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

2672B	  %242:fr64 = MOVSDrm_alt %stack.22.a2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a2)
2688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2704B	  $rdi = COPY %52:gr64
2720B	  $xmm0 = COPY %242:fr64
2736B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
2752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2768B	  %244:fr64 = COPY killed $xmm0
2784B	  MOVSDmr %stack.34.rdummy, 1, $noreg, 0, $noreg, %244:fr64 :: (store 8 into %ir.rdummy)
2800B	  INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
2816B	  JMP_1 %bb.1

2832B	bb.6.for.end28:
	; predecessors: %bb.1
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2848B	  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)
2864B	  %237:gr64 = MOV64ri 4607182418800017408

2880B	bb.7.for.cond29:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

2896B	  CMP32mi8 %stack.29.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
2912B	  JCC_1 %bb.9, 15, implicit $eflags
2928B	  JMP_1 %bb.8

2944B	bb.8.for.body31:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2960B	  %261:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3056B	  MOV64mi32 %stack.30.j1, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx492)
3072B	  MOV64mi32 %stack.31.j2, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx523)
3088B	  MOV64mi32 %stack.32.j3, 8, %261:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx554)
3120B	  %238:gr32 = LEA64_32r %261:gr64_nosp, 1, $noreg, 1, $noreg
3124B	  %236:gr64_nosp = COPY %261:gr64_nosp
3128B	  %236:gr64_nosp = SHL64ri %236:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
3136B	  MOV64mi32 %stack.27.ten, 1, %236:gr64_nosp, 8, $noreg, 0 :: (store 8 into %ir.arrayidx34)
3144B	  MOV64mr %stack.27.ten, 1, %236:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx461, align 16)
3152B	  MOV32mr %stack.29.i, 1, $noreg, 0, $noreg, %238:gr32 :: (store 4 into %ir.i)
3160B	  JMP_1 %bb.7

3168B	bb.9.for.end58:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

3184B	  MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
3200B	  %199:gr64 = LEA64r %stack.27.ten, 1, $noreg, 0, $noreg
3216B	  %200:gr64 = LEA64r %stack.30.j1, 1, $noreg, 0, $noreg
3232B	  %201:gr64 = LEA64r %stack.31.j2, 1, $noreg, 0, $noreg
3248B	  %202:gr64 = LEA64r %stack.32.j3, 1, $noreg, 0, $noreg

3312B	bb.10.for.cond59:
	; predecessors: %bb.9, %bb.21
	  successors: %bb.11(0x7c000000), %bb.22(0x04000000); %bb.11(96.88%), %bb.22(3.12%)

3328B	  %60:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
3360B	  %60:gr32 = DEC32r %60:gr32(tied-def 0), implicit-def dead $eflags
3376B	  CMP32mr %stack.13.i3, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
3392B	  JCC_1 %bb.22, 13, implicit $eflags
3408B	  JMP_1 %bb.11

3424B	bb.11.for.body62:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3440B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

3456B	bb.12.for.cond63:
	; predecessors: %bb.11, %bb.20
	  successors: %bb.13(0x7c000000), %bb.21(0x04000000); %bb.13(96.88%), %bb.21(3.12%)

3472B	  %170:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
3504B	  %170:gr32 = DEC32r %170:gr32(tied-def 0), implicit-def dead $eflags
3520B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %170:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
3536B	  JCC_1 %bb.21, 13, implicit $eflags
3552B	  JMP_1 %bb.13

3568B	bb.13.for.body66:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3584B	  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

3600B	bb.14.for.cond67:
	; predecessors: %bb.13, %bb.19
	  successors: %bb.15(0x7c000000), %bb.20(0x04000000); %bb.15(96.88%), %bb.20(3.12%)

3616B	  %174:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
3648B	  %174:gr32 = DEC32r %174:gr32(tied-def 0), implicit-def dead $eflags
3664B	  CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %174:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
3680B	  JCC_1 %bb.20, 13, implicit $eflags
3696B	  JMP_1 %bb.15

3712B	bb.15.for.body70:
	; predecessors: %bb.14
	  successors: %bb.16(0x40000000), %bb.17(0x40000000); %bb.16(50.00%), %bb.17(50.00%)

3728B	  %179:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
3760B	  %179:gr64 = nsw IMUL64rr %179:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
3792B	  %179:gr64 = SHL64ri %179:gr64(tied-def 0), 3, implicit-def dead $eflags
3824B	  %179:gr64 = ADD64rm %179:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
3840B	  %182:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
3872B	  %182:gr64_nosp = nsw IMUL64rr %182:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
3888B	  %183:gr64 = LEA64r %179:gr64, 8, %182:gr64_nosp, 0, $noreg
3904B	  %184:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
3920B	  %185:fr64 = MOVSDrm_alt %183:gr64, 8, %184:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
3936B	  UCOMISDrm %185:fr64, %stack.27.ten, 1, $noreg, 8, $noreg, implicit-def $eflags :: (dereferenceable load 8 from %ir.arrayidx78)
3952B	  JCC_1 %bb.17, 6, implicit $eflags
3968B	  JMP_1 %bb.16

3984B	bb.16.if.then:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

4000B	  %186:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
4032B	  %190:gr64 = COPY %186:gr64_with_sub_8bit
4048B	  %190:gr64 = nsw IMUL64rr %190:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
4080B	  %190:gr64 = SHL64ri %190:gr64(tied-def 0), 3, implicit-def dead $eflags
4112B	  %190:gr64 = ADD64rm %190:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
4128B	  %192:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
4160B	  %194:gr64_nosp = COPY %192:gr64_with_sub_8bit
4176B	  %194:gr64_nosp = nsw IMUL64rr %194:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
4192B	  %195:gr64 = LEA64r %190:gr64, 8, %194:gr64_nosp, 0, $noreg
4208B	  %196:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
4240B	  %198:fr64 = MOVSDrm_alt %195:gr64, 8, %196:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
4256B	  MOVSDmr %stack.27.ten, 1, $noreg, 8, $noreg, %198:fr64 :: (store 8 into %ir.arrayidx87)
4272B	  MOV32mr %stack.30.j1, 1, $noreg, 4, $noreg, %196.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx89)
4288B	  MOV32mr %stack.31.j2, 1, $noreg, 4, $noreg, %192.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx91)
4304B	  MOV32mr %stack.32.j3, 1, $noreg, 4, $noreg, %186.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx93)
4320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4336B	  $rdi = COPY %199:gr64
4352B	  $rsi = COPY %200:gr64
4368B	  $rdx = COPY %201:gr64
4384B	  $rcx = COPY %202:gr64
4400B	  $r8d = MOV32ri 10
4416B	  $r9d = MOV32ri 1
4432B	  CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
4448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

4464B	bb.17.if.end:
	; predecessors: %bb.15, %bb.16
	  successors: %bb.18(0x40000000), %bb.19(0x40000000); %bb.18(50.00%), %bb.19(50.00%)

4480B	  %208:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
4512B	  %208:gr64 = nsw IMUL64rr %208:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
4544B	  %208:gr64 = SHL64ri %208:gr64(tied-def 0), 3, implicit-def dead $eflags
4576B	  %208:gr64 = ADD64rm %208:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
4592B	  %211:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
4624B	  %211:gr64_nosp = nsw IMUL64rr %211:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
4640B	  %212:gr64 = LEA64r %208:gr64, 8, %211:gr64_nosp, 0, $noreg
4656B	  %213:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
4672B	  %214:fr64 = MOVSDrm_alt %stack.27.ten, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.arrayidx10415, align 16)
4688B	  UCOMISDrm %214:fr64, %212:gr64, 8, %213:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx102)
4704B	  JCC_1 %bb.19, 6, implicit $eflags
4720B	  JMP_1 %bb.18

4736B	bb.18.if.then106:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

4752B	  %215:gr64_with_sub_8bit = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
4784B	  %219:gr64 = COPY %215:gr64_with_sub_8bit
4800B	  %219:gr64 = nsw IMUL64rr %219:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
4832B	  %219:gr64 = SHL64ri %219:gr64(tied-def 0), 3, implicit-def dead $eflags
4864B	  %219:gr64 = ADD64rm %219:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
4880B	  %221:gr64_with_sub_8bit = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
4912B	  %223:gr64_nosp = COPY %221:gr64_with_sub_8bit
4928B	  %223:gr64_nosp = nsw IMUL64rr %223:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
4944B	  %224:gr64 = LEA64r %219:gr64, 8, %223:gr64_nosp, 0, $noreg
4960B	  %225:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
4992B	  %227:fr64 = MOVSDrm_alt %224:gr64, 8, %225:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx112)
5008B	  MOVSDmr %stack.27.ten, 1, $noreg, 0, $noreg, %227:fr64 :: (store 8 into %ir.arrayidx11417, align 16)
5024B	  MOV32mr %stack.30.j1, 1, $noreg, 0, $noreg, %225.sub_32bit:gr64_nosp :: (store 4 into %ir.arrayidx11619, align 16)
5040B	  MOV32mr %stack.31.j2, 1, $noreg, 0, $noreg, %221.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx11821, align 16)
5056B	  MOV32mr %stack.32.j3, 1, $noreg, 0, $noreg, %215.sub_32bit:gr64_with_sub_8bit :: (store 4 into %ir.arrayidx12023, align 16)
5072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5088B	  $rdi = COPY %199:gr64
5104B	  $rsi = COPY %200:gr64
5120B	  $rdx = COPY %201:gr64
5136B	  $rcx = COPY %202:gr64
5152B	  $r8d = MOV32ri 10
5168B	  $r9d = MOV32r0 implicit-def dead $eflags
5184B	  CALL64pcrel32 @bubble, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
5200B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

5216B	bb.19.if.end125:
	; predecessors: %bb.17, %bb.18
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

5232B	  INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
5248B	  JMP_1 %bb.14

5264B	bb.20.for.end128:
	; predecessors: %bb.14
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

5280B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
5296B	  JMP_1 %bb.12

5312B	bb.21.for.end131:
	; predecessors: %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

5328B	  INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
5344B	  JMP_1 %bb.10

5360B	bb.22.for.end134:
	; predecessors: %bb.10
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

5376B	  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i1)
5392B	  MOV32mi %stack.8.i0, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i0)
5408B	  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
5424B	  %111:fr64 = FsFLD0SD
5440B	  %141:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)

5456B	bb.23.for.cond135:
	; predecessors: %bb.22, %bb.28, %bb.29
	  successors: %bb.24(0x7c000000), %bb.30(0x04000000); %bb.24(96.88%), %bb.30(3.12%)

5472B	  CMP32mi8 %stack.29.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
5488B	  JCC_1 %bb.30, 8, implicit $eflags
5504B	  JMP_1 %bb.24

5520B	bb.24.for.body137:
	; predecessors: %bb.23
	  successors: %bb.25(0x40000000), %bb.26(0x40000000); %bb.25(50.00%), %bb.26(50.00%)

5536B	  MOV64mi32 %stack.28.best, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.best)
5552B	  %109:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
5584B	  %109:gr64_nosp = SHL64ri %109:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
5600B	  %110:fr64 = MOVSDrm_alt %stack.27.ten, 1, %109:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx140)
5616B	  UCOMISDrr %110:fr64, %111:fr64, implicit-def $eflags
5632B	  JCC_1 %bb.26, 6, implicit $eflags
5648B	  JMP_1 %bb.25

5664B	bb.25.if.then142:
	; predecessors: %bb.24
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

5680B	  %113:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
5696B	  MOV32mi %stack.33.jg, 8, %113:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx146)
5712B	  undef %117.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
5728B	  %262:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
5744B	  undef %119.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx150)
5792B	  %121:gr32 = LEA64_32r %117:gr64_with_sub_8bit, 1, %119:gr64_nosp, -2, $noreg
5808B	  MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 84, $noreg, %121:gr32 :: (store 4 into %ir.arrayidx155)
5824B	  undef %124.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
5840B	  undef %126.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx159)
5888B	  %128:gr32 = LEA64_32r %124:gr64_with_sub_8bit, 1, %126:gr64_nosp, -2, $noreg
5904B	  MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 164, $noreg, %128:gr32 :: (store 4 into %ir.arrayidx164)
5920B	  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
5952B	  undef %134.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %262:gr64_nosp, 4, $noreg :: (load 4 from %ir.arrayidx168)
6000B	  %136:gr32 = LEA64_32r %132:gr64_with_sub_8bit, 1, %134:gr64_nosp, -2, $noreg
6016B	  MOV32mr %stack.33.jg, 8, %113:gr64_nosp, 244, $noreg, %136:gr32 :: (store 4 into %ir.arrayidx173)
6048B	  %137:gr32 = LEA64_32r %262:gr64_nosp, 1, $noreg, -1, $noreg
6064B	  MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %137:gr32 :: (store 4 into %ir.i1)
6080B	  JMP_1 %bb.27

6096B	bb.26.if.else:
	; predecessors: %bb.24
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

6112B	  %112:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
6128B	  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 4, $noreg, 0 :: (store 4 into %ir.arrayidx178)
6144B	  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 84, $noreg, 0 :: (store 4 into %ir.arrayidx182)
6160B	  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 164, $noreg, 0 :: (store 4 into %ir.arrayidx186)
6176B	  MOV32mi %stack.33.jg, 8, %112:gr64_nosp, 244, $noreg, 0 :: (store 4 into %ir.arrayidx190)

6192B	bb.27.if.end191:
	; predecessors: %bb.26, %bb.25
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

6208B	  MOV64mr %stack.28.best, 1, $noreg, 0, $noreg, %237:gr64 :: (store 8 into %ir.best)
6224B	  %140:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
6256B	  %140:gr64_nosp = SHL64ri %140:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
6272B	  UCOMISDrm %141:fr64, %stack.27.ten, 1, %140:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx19430, align 16)
6288B	  JCC_1 %bb.29, 6, implicit $eflags
6304B	  JMP_1 %bb.28

6320B	bb.28.if.then196:
	; predecessors: %bb.27
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

6336B	  %143:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
6352B	  MOV32mi %stack.33.jg, 8, %143:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx20032, align 8)
6368B	  undef %147.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is1, $noreg :: (dereferenceable load 4 from @is1)
6384B	  %263:gr64_nosp = MOVSX64rm32 %stack.8.i0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i0)
6400B	  undef %149.sub_32bit:gr64_nosp = MOV32rm %stack.30.j1, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx20433, align 8)
6448B	  %151:gr32 = LEA64_32r %147:gr64_with_sub_8bit, 1, %149:gr64_nosp, -2, $noreg
6464B	  MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 80, $noreg, %151:gr32 :: (store 4 into %ir.arrayidx20934, align 8)
6480B	  undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is2, $noreg :: (dereferenceable load 4 from @is2)
6496B	  undef %156.sub_32bit:gr64_nosp = MOV32rm %stack.31.j2, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx21335, align 8)
6544B	  %158:gr32 = LEA64_32r %154:gr64_with_sub_8bit, 1, %156:gr64_nosp, -2, $noreg
6560B	  MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 160, $noreg, %158:gr32 :: (store 4 into %ir.arrayidx21836, align 8)
6576B	  undef %162.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @is3, $noreg :: (dereferenceable load 4 from @is3)
6608B	  undef %164.sub_32bit:gr64_nosp = MOV32rm %stack.32.j3, 8, %263:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx22237, align 8)
6656B	  %166:gr32 = LEA64_32r %162:gr64_with_sub_8bit, 1, %164:gr64_nosp, -2, $noreg
6672B	  MOV32mr %stack.33.jg, 8, %143:gr64_nosp, 240, $noreg, %166:gr32 :: (store 4 into %ir.arrayidx22738, align 8)
6704B	  %167:gr32 = LEA64_32r %263:gr64_nosp, 1, $noreg, -1, $noreg
6720B	  MOV32mr %stack.8.i0, 1, $noreg, 0, $noreg, %167:gr32 :: (store 4 into %ir.i0)
6736B	  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
6752B	  JMP_1 %bb.23

6768B	bb.29.if.else229:
	; predecessors: %bb.27
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

6784B	  %142:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
6800B	  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 0, $noreg, 0 :: (store 4 into %ir.arrayidx23340, align 8)
6816B	  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 80, $noreg, 0 :: (store 4 into %ir.arrayidx23741, align 8)
6832B	  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 160, $noreg, 0 :: (store 4 into %ir.arrayidx24142, align 8)
6848B	  MOV32mi %stack.33.jg, 8, %142:gr64_nosp, 240, $noreg, 0 :: (store 4 into %ir.arrayidx24543, align 8)
6864B	  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
6880B	  JMP_1 %bb.23

6896B	bb.30.for.end248:
	; predecessors: %bb.23
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

6912B	  MOV32mi %stack.10.m1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m1)
6928B	  MOV32mi %stack.9.m0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.m0)
6944B	  MOV32mi %stack.13.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)

6960B	bb.31.for.cond249:
	; predecessors: %bb.30, %bb.38
	  successors: %bb.32(0x7c000000), %bb.39(0x04000000); %bb.32(96.88%), %bb.39(3.12%)

6976B	  %62:gr32 = MOV32rm %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
6992B	  CMP32rm %62:gr32, %stack.3.n3.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
7008B	  JCC_1 %bb.39, 13, implicit $eflags
7024B	  JMP_1 %bb.32

7040B	bb.32.for.body251:
	; predecessors: %bb.31
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

7056B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

7072B	bb.33.for.cond252:
	; predecessors: %bb.32, %bb.37
	  successors: %bb.34(0x7c000000), %bb.38(0x04000000); %bb.34(96.88%), %bb.38(3.12%)

7088B	  %95:gr32 = MOV32rm %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
7104B	  CMP32rm %95:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
7120B	  JCC_1 %bb.38, 13, implicit $eflags
7136B	  JMP_1 %bb.34

7152B	bb.34.for.body254:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

7168B	  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

7184B	bb.35.for.cond255:
	; predecessors: %bb.34, %bb.36
	  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)

7200B	  %97:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
7216B	  CMP32rm %97:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
7232B	  JCC_1 %bb.37, 13, implicit $eflags
7248B	  JMP_1 %bb.36

7264B	bb.36.for.body257:
	; predecessors: %bb.35
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

7280B	  %102:gr64 = MOVSX64rm32 %stack.13.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
7312B	  %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
7344B	  %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
7376B	  %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
7392B	  %105:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
7424B	  %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
7440B	  %106:gr64 = LEA64r %102:gr64, 8, %105:gr64_nosp, 0, $noreg
7456B	  %107:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
7472B	  MOV64mi32 %106:gr64, 8, %107:gr64_nosp, 0, $noreg, 0 :: (store 8 into %ir.arrayidx263)
7488B	  INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
7504B	  JMP_1 %bb.35

7520B	bb.37.for.end266:
	; predecessors: %bb.35
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

7536B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
7552B	  JMP_1 %bb.33

7568B	bb.38.for.end269:
	; predecessors: %bb.33
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

7584B	  INC32m %stack.13.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
7600B	  JMP_1 %bb.31

7616B	bb.39.for.end272:
	; predecessors: %bb.31
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7632B	  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)
7648B	  %94:gr64 = MOV64ri -4616189618054758400

7664B	bb.40.for.cond273:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

7680B	  %64:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
7696B	  CMP32rm %64:gr32, %stack.9.m0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m0)
7712B	  JCC_1 %bb.42, 12, implicit $eflags
7728B	  JMP_1 %bb.41

7744B	bb.41.for.body275:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7760B	  %84:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
7776B	  %88:gr64 = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 240, $noreg :: (load 4 from %ir.arrayidx27944, align 8)
7808B	  %88:gr64 = nsw IMUL64rr %88:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
7840B	  %88:gr64 = SHL64ri %88:gr64(tied-def 0), 3, implicit-def dead $eflags
7872B	  %88:gr64 = ADD64rm %88:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
7888B	  %91:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 160, $noreg :: (load 4 from %ir.arrayidx28545, align 8)
7920B	  %91:gr64_nosp = nsw IMUL64rr %91:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
7936B	  %92:gr64 = LEA64r %88:gr64, 8, %91:gr64_nosp, 0, $noreg
7952B	  %93:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %84:gr64_nosp, 80, $noreg :: (load 4 from %ir.arrayidx29146, align 8)
7968B	  MOV64mr %92:gr64, 8, %93:gr64_nosp, 0, $noreg, %94:gr64 :: (store 8 into %ir.arrayidx293)
7984B	  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
8000B	  JMP_1 %bb.40

8016B	bb.42.for.end296:
	; predecessors: %bb.40
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

8032B	  MOV32mi %stack.29.i, 1, $noreg, 0, $noreg, 9 :: (store 4 into %ir.i)

8048B	bb.43.for.cond297:
	; predecessors: %bb.42, %bb.44
	  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

8064B	  %66:gr32 = MOV32rm %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
8080B	  CMP32rm %66:gr32, %stack.10.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
8096B	  JCC_1 %bb.45, 12, implicit $eflags
8112B	  JMP_1 %bb.44

8128B	bb.44.for.body299:
	; predecessors: %bb.43
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

8144B	  %73:gr64_nosp = MOVSX64rm32 %stack.29.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
8160B	  %77:gr64 = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 244, $noreg :: (load 4 from %ir.arrayidx303)
8192B	  %77:gr64 = nsw IMUL64rr %77:gr64(tied-def 0), %249:gr64_with_sub_8bit, implicit-def dead $eflags
8224B	  %77:gr64 = SHL64ri %77:gr64(tied-def 0), 3, implicit-def dead $eflags
8256B	  %77:gr64 = ADD64rm %77:gr64(tied-def 0), %stack.7.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
8272B	  %80:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 164, $noreg :: (load 4 from %ir.arrayidx309)
8304B	  %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
8320B	  %81:gr64 = LEA64r %77:gr64, 8, %80:gr64_nosp, 0, $noreg
8336B	  %82:gr64_nosp = MOVSX64rm32 %stack.33.jg, 8, %73:gr64_nosp, 84, $noreg :: (load 4 from %ir.arrayidx315)
8352B	  MOV64mr %81:gr64, 8, %82:gr64_nosp, 0, $noreg, %237:gr64 :: (store 8 into %ir.arrayidx317)
8368B	  DEC32m %stack.29.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
8384B	  JMP_1 %bb.43

8400B	bb.45.for.end320:
	; predecessors: %bb.43

8416B	  %68:gr64 = MOV64rm %stack.7.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
8432B	  %69:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
8448B	  %70:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
8464B	  %71:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
8480B	  %72:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
8496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8512B	  $rdi = COPY %68:gr64
8528B	  $esi = COPY %69:gr32
8544B	  $edx = COPY %70:gr32
8560B	  $ecx = COPY %71:gr32
8576B	  $r8d = COPY %72:gr32
8592B	  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
8608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
8624B	  RET 0

# End machine code for function zran3.

Before MISched:
# Machine code for function norm2u3: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
Function Live Ins: $rdi in %6, $esi in %7, $edx in %8, $ecx in %9, $r8 in %10, $r9 in %11

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9
  %11:gr64 = COPY $r9
  %10:gr64 = COPY $r8
  %9:gr32 = COPY $ecx
  %8:gr32 = COPY $edx
  %7:gr32 = COPY $esi
  %6:gr64 = COPY $rdi
  MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.or.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n3.addr)
  MOV64mr %stack.4.rnm2.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.rnm2.addr)
  MOV64mr %stack.5.rnmu.addr, 1, $noreg, 0, $noreg, %11:gr64 :: (store 8 into %ir.rnmu.addr)
  undef %40.sub_32bit:gr64_with_sub_8bit = MOV32rr %8:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
  MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.r)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 8
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %15:fr64 = CVTSI2SDrm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr, align 16)
  %17:fr64 = CVTSI2SDrm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ny.addr, align 8)
  %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
  %19:fr64 = CVTSI2SDrm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nz.addr, align 16)
  %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
  MOVSDmr %stack.15.dn, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.dn)
  MOV64mi32 %stack.10.s, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.s)
  %20:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  MOV64mi32 %20:gr64, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.14)
  MOV32mi %stack.12.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %66:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load 16 from constant-pool)

bb.3.for.cond:
; predecessors: %bb.2, %bb.12
  successors: %bb.4(0x7c000000), %bb.13(0x04000000); %bb.4(96.88%), %bb.13(3.12%)

  %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.13, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.13.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.5.for.cond6:
; predecessors: %bb.4, %bb.11
  successors: %bb.6(0x7c000000), %bb.12(0x04000000); %bb.6(96.88%), %bb.12(3.12%)

  %32:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %32:gr32 = DEC32r %32:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i2, 1, $noreg, 0, $noreg, %32:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.12, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body10:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.14.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.7.for.cond11:
; predecessors: %bb.6, %bb.10
  successors: %bb.8(0x7c000000), %bb.11(0x04000000); %bb.8(96.88%), %bb.11(3.12%)

  %36:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %36:gr32 = DEC32r %36:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.14.i1, 1, $noreg, 0, $noreg, %36:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.11, 13, implicit killed $eflags
  JMP_1 %bb.8

bb.8.for.body15:
; predecessors: %bb.7
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  %38:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  %42:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
  %42:gr64 = SHL64ri %42:gr64(tied-def 0), 3, implicit-def dead $eflags
  %42:gr64 = ADD64rm %42:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  %45:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
  %47:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %48:fr64
  $xmm1 = COPY %49:fr64
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %51:fr64 = COPY killed $xmm0
  %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
  MOVSDmr %stack.10.s, 1, $noreg, 0, $noreg, %51:fr64 :: (store 8 into %ir.s)
  %54:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
  %54:gr64 = SHL64ri %54:gr64(tied-def 0), 3, implicit-def dead $eflags
  %54:gr64 = ADD64rm %54:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  %57:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
  %59:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
  %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
  MOVLPDmr %stack.11.a, 1, $noreg, 0, $noreg, %61:vr128 :: (store 8 into %ir.a)
  %63:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)
  JCC_1 %bb.10, 6, implicit killed $eflags
  JMP_1 %bb.9

bb.9.if.then28:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %64:fr64 = MOVSDrm_alt %stack.11.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  %65:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  MOVSDmr %65:gr64, 1, $noreg, 0, $noreg, %64:fr64 :: (store 8 into %ir.43)

bb.10.if.end29:
; predecessors: %bb.8, %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.14.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.7

bb.11.for.end:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  INC32m %stack.13.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.5

bb.12.for.end32:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.12.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.3

bb.13.for.end35:
; predecessors: %bb.3
  successors: %bb.14(0x40000000), %bb.15(0x40000000); %bb.14(50.00%), %bb.15(50.00%)

  %2:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  %2:fr64 = DIVSDrm %2:fr64(tied-def 0), %stack.15.dn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.dn)
  %26:fr64 = FsFLD0SD
  UCOMISDrr %2:fr64, %26:fr64, implicit-def $eflags
  JCC_1 %bb.15, 2, implicit killed $eflags

bb.14:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %67:fr64 = SQRTSDr %2:fr64
  JMP_1 %bb.16

bb.15.call.sqrt:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $xmm0 = COPY %2:fr64
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %67:fr64 = COPY killed $xmm0

bb.16.for.end35.split:
; predecessors: %bb.15, %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  %28:gr64 = MOV64rm %stack.4.rnm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2.addr)
  MOVSDmr %28:gr64, 1, $noreg, 0, $noreg, %67:fr64 :: (store 8 into %ir.52)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.18, 4, implicit killed $eflags
  JMP_1 %bb.17

bb.17.if.then38:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 8
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.18.if.end39:
; predecessors: %bb.16, %bb.17

  RET 0

# End machine code for function norm2u3.

********** MI Scheduling **********
norm2u3:%bb.0 entry
  From: %11:gr64 = COPY $r9
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %1 %40 
Live Thru: 
  LiveReg: %1
  LiveReg: %40
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %11:gr64 = COPY $r9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%11
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %10:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%10
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %9:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%9
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %8:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%8
    SU(8): Data Latency=0 Reg=%8
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %7:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%7
    SU(7): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %6:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%6
    SU(6): Data Latency=0 Reg=%6
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.or.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%9
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.rnm2.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.rnm2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%10
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.5.rnmu.addr, 1, $noreg, 0, $noreg, %11:gr64 :: (store 8 into %ir.rnmu.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%11
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   undef %40.sub_32bit:gr64_with_sub_8bit = MOV32rr %8:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%8
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%7
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.r)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(15) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.r)
Bottom Pressure:
GR16=6
  LiveReg: %6
  UpdateRegP: SU(6) MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.or.addr)
              to 
  UpdateRegP: SU(14) MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.r)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
Bottom Pressure:
GR16=6
  LiveReg: %7
  UpdateRegP: SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
              to GR16 -2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 12 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %40.sub_32bit:gr64_with_sub_8bit = MOV32rr %8:gr32
Bottom Pressure:
GR16=6
  LiveReg: %8
  UpdateRegP: SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n2.addr)
              to 
  UpdateRegP: SU(12) undef %40.sub_32bit:gr64_with_sub_8bit = MOV32rr %8:gr32
              to GR16 -2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.5.rnmu.addr, 1, $noreg, 0, $noreg, %11:gr64 :: (store 8 into %ir.rnmu.addr)
Bottom Pressure:
GR16=8
  LiveReg: %11
  UpdateRegP: SU(11) MOV64mr %stack.5.rnmu.addr, 1, $noreg, 0, $noreg, %11:gr64 :: (store 8 into %ir.rnmu.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.rnm2.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.rnm2.addr)
Bottom Pressure:
GR16=10
  LiveReg: %10
  UpdateRegP: SU(10) MOV64mr %stack.4.rnm2.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.rnm2.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=12
  LiveReg: %9
  UpdateRegP: SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.or.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %6:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %7:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %8:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %9:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %10:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr64 = COPY $r9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %11:gr64 = COPY $r9
SU(1):   %10:gr64 = COPY $r8
SU(2):   %9:gr32 = COPY $ecx
SU(3):   %8:gr32 = COPY $edx
SU(4):   %7:gr32 = COPY $esi
SU(5):   %6:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.or.addr)
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n1.addr)
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n2.addr)
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n3.addr)
SU(10):   MOV64mr %stack.4.rnm2.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.rnm2.addr)
SU(11):   MOV64mr %stack.5.rnmu.addr, 1, $noreg, 0, $noreg, %11:gr64 :: (store 8 into %ir.rnmu.addr)
SU(12):   undef %40.sub_32bit:gr64_with_sub_8bit = MOV32rr %8:gr32
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
SU(14):   MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.r)
SU(15):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
norm2u3:%bb.2 if.end
  From: %15:fr64 = CVTSI2SDrm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr, align 16)
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %40 %1 
Live Out: %66 %49 %40 %1 
Live Thru: GR16=4
  LiveReg: %66
  LiveReg: %49
  LiveReg: %40
  LiveReg: %1
  UpdateRegP: SU(10) %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
Excess PSets: 
SU(0):   %15:fr64 = CVTSI2SDrm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%15
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %17:fr64 = CVTSI2SDrm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ny.addr, align 8)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%17
    SU(2): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%15
  Successors:
    SU(4): Data Latency=1 Reg=%17
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %19:fr64 = CVTSI2SDrm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nz.addr, align 16)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%19
    SU(4): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(4):   %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%17
    SU(3): Out  Latency=0
    SU(3): Data Latency=4 Reg=%19
  Successors:
    SU(5): Data Latency=1 Reg=%19
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   MOVSDmr %stack.15.dn, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.dn)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%19
  Successors:
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.10.s, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.s)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %20:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%20
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   MOV64mi32 %20:gr64, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.14)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%20
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mi %stack.12.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(12):   %66:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load 16 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 12 11 
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %66:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load 16 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @3c
  BotQ.A BotLatency SU(12) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %40
  UpdateRegP: SU(10) %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mi %stack.12.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
Bottom Pressure:
GR16=4
  Ready @0c
  BotQ.A TopLatency SU(9) 6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOV64mi32 %20:gr64, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.14)
Bottom Pressure:
GR16=6
  LiveReg: %20
  UpdateRegP: SU(8) MOV64mi32 %20:gr64, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.14)
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %20:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
Bottom Pressure:
GR16=4
  Ready @5c
  BotQ.A BotLatency SU(7) 4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mi32 %stack.10.s, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.s)
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.15.dn, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.dn)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %19
  UpdateRegP: SU(5) MOVSDmr %stack.15.dn, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.dn)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %19
  UpdateRegP: SU(4) %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
              to 
  LiveReg: %17
  UpdateRegP: SU(4) %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(3) %19:fr64 = CVTSI2SDrm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nz.addr, align 16)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %17
  UpdateRegP: SU(2) %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
              to 
  LiveReg: %15
  UpdateRegP: SU(2) %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
              to FR32 -1    FR32X -1
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %17:fr64 = CVTSI2SDrm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ny.addr, align 8)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:fr64 = CVTSI2SDrm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr, align 16)
Bottom Pressure:
GR16=4
  Ready @7c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %15:fr64 = CVTSI2SDrm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr, align 16)
SU(1):   %17:fr64 = CVTSI2SDrm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ny.addr, align 8)
SU(2):   %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
SU(3):   %19:fr64 = CVTSI2SDrm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nz.addr, align 16)
SU(4):   %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
SU(5):   MOVSDmr %stack.15.dn, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.dn)
SU(6):   MOV64mi32 %stack.10.s, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.s)
SU(7):   %20:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
SU(8):   MOV64mi32 %20:gr64, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.14)
SU(9):   MOV32mi %stack.12.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(10):   %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(11):   %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(12):   %66:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load 16 from constant-pool)

********** MI Scheduling **********
norm2u3:%bb.3 for.cond
  From: %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
    To: JCC_1 %bb.13, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%23
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%23
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%23
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%23
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(1):   %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
norm2u3:%bb.5 for.cond6
  From: %32:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
    To: JCC_1 %bb.12, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %32:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%32
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %32:gr32 = DEC32r %32:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%32
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i2, 1, $noreg, 0, $noreg, %32:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%32
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i2, 1, $noreg, 0, $noreg, %32:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %32:gr32 = DEC32r %32:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %32:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(1):   %32:gr32 = DEC32r %32:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i2, 1, $noreg, 0, $noreg, %32:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
norm2u3:%bb.7 for.cond11
  From: %36:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
    To: JCC_1 %bb.11, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %36:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%36
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %36:gr32 = DEC32r %36:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%36
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%36
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.14.i1, 1, $noreg, 0, $noreg, %36:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%36
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.11, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.14.i1, 1, $noreg, 0, $noreg, %36:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %36:gr32 = DEC32r %36:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %36:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %36:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(1):   %36:gr32 = DEC32r %36:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.14.i1, 1, $noreg, 0, $noreg, %36:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
norm2u3:%bb.8 for.body15
  From: %51:fr64 = COPY killed $xmm0
    To: JCC_1 %bb.10, 6, implicit killed $eflags
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=8
Live In: %66 %1 %40 %38 XMM0 
Live Out: %66 %1 %40 
Live Thru: FR32=1
FR32X=1
GR16=4
  LiveReg: %66
  UpdateRegP: SU(12) %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
              to 
  LiveReg: %1
  UpdateRegP: SU(8) %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %40
  UpdateRegP: SU(4) %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=3
FR32X=3
GR16=4
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
Excess PSets: 
SU(0):   %51:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=0 Reg=%51
    SU(1): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Predecessors:
    SU(0): Data Latency=0 Reg=%51
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%51
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.s, 1, $noreg, 0, $noreg, %51:fr64 :: (store 8 into %ir.s)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%51
  Successors:
    SU(15): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %54:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%54
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(3): Data Latency=4 Reg=%54
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%54
    SU(5): Out  Latency=0
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %54:gr64 = SHL64ri %54:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(4): Data Latency=1 Reg=%54
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%54
    SU(6): Out  Latency=0
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %54:gr64 = ADD64rm %54:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(5): Data Latency=1 Reg=%54
    SU(5): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%54
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %57:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(8): Data Latency=4 Reg=%57
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(7): Data Latency=4 Reg=%57
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%57
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(6): Data Latency=4 Reg=%54
    SU(8): Data Latency=1 Reg=%57
  Successors:
    SU(11): Data Latency=1 Reg=%58
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %59:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(11): Data Latency=4 Reg=%59
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=%58
    SU(10): Data Latency=4 Reg=%59
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%61
    SU(12): Out  Latency=0
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(12):   %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 6
  Predecessors:
    SU(11): Data Latency=4 Reg=%61
    SU(11): Out  Latency=0
  Successors:
    SU(15): Data Latency=1 Reg=%61
    SU(13): Data Latency=1 Reg=%61
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOVLPDmr %stack.11.a, 1, $noreg, 0, $noreg, %61:vr128 :: (store 8 into %ir.a)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 5
  Predecessors:
    SU(12): Data Latency=1 Reg=%61
    SU(11): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   %63:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(15): Data Latency=4 Reg=%63
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 4
  Predecessors:
    SU(12): Data Latency=1 Reg=%61
    SU(13): Ord  Latency=1 Memory
    SU(14): Data Latency=4 Reg=%63
    SU(8): Out  Latency=0
    SU(6): Out  Latency=0
    SU(5): Out  Latency=0
    SU(4): Out  Latency=0
    SU(2): Ord  Latency=1 Memory
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 6, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %61
  UpdateRegP: SU(13) MOVLPDmr %stack.11.a, 1, $noreg, 0, $noreg, %61:vr128 :: (store 8 into %ir.a)
              to 
  UpdateRegP: SU(15) UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)
              to GR16 2
  LiveReg: %63
  UpdateRegP: SU(15) UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)
              to 
  Ready @4c
  BotQ.A TopLatency SU(15) 17c
  BotQ.A BotLatency SU(15) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %63:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @8c
  BotQ.A BotLatency SU(14) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVLPDmr %stack.11.a, 1, $noreg, 0, $noreg, %61:vr128 :: (store 8 into %ir.a)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %61
  UpdateRegP: SU(12) %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %58
  UpdateRegP: SU(11) %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %59
  UpdateRegP: SU(11) %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(11) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 2 
  Cand SU(9) ORDER                              
  Cand SU(10) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(10) %59:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @14c
  BotQ.A BotLatency SU(10) 14c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 2 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %54
  UpdateRegP: SU(9) %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
              to 
  LiveReg: %57
  UpdateRegP: SU(9) %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 8 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %57
  UpdateRegP: SU(8) %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 7 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %57:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @16c
  BotQ.A BotLatency SU(7) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %54:gr64 = ADD64rm %54:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %54
  UpdateRegP: SU(6) %54:gr64 = ADD64rm %54:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
              to GR16 -2
  Ready @15c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %54:gr64 = SHL64ri %54:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %54
  UpdateRegP: SU(5) %54:gr64 = SHL64ri %54:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %54
  UpdateRegP: SU(4) %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(4) 17c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %54:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @21c
  BotQ.A BotLatency SU(3) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.s, 1, $noreg, 0, $noreg, %51:fr64 :: (store 8 into %ir.s)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %51
  UpdateRegP: SU(2) MOVSDmr %stack.10.s, 1, $noreg, 0, $noreg, %51:fr64 :: (store 8 into %ir.s)
              to 
  Ready @11c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  LiveReg: %51
  UpdateRegP: SU(1) %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
              to 
  LiveReg: %38
  UpdateRegP: SU(1) %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:fr64 = COPY killed $xmm0
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  Ready @12c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %51:fr64 = COPY killed $xmm0
SU(1):   %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
SU(2):   MOVSDmr %stack.10.s, 1, $noreg, 0, $noreg, %51:fr64 :: (store 8 into %ir.s)
SU(3):   %54:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(4):   %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %54:gr64 = SHL64ri %54:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %54:gr64 = ADD64rm %54:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
SU(7):   %57:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(9):   %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
SU(10):   %59:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(11):   %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
SU(12):   %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
SU(13):   MOVLPDmr %stack.11.a, 1, $noreg, 0, $noreg, %61:vr128 :: (store 8 into %ir.a)
SU(14):   %63:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
SU(15):   UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)

********** MI Scheduling **********
norm2u3:%bb.8 for.body15
  From: $xmm0 = COPY %48:fr64
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %48:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm1 = COPY %49:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm1 = COPY %49:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %48:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   $xmm0 = COPY %48:fr64
SU(1):   $xmm1 = COPY %49:fr64

********** MI Scheduling **********
norm2u3:%bb.8 for.body15
  From: %38:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=8
Live In: %1 %40 
Live Out: %48 %1 %40 %38 
Live Thru: GR16=4
  LiveReg: %48
  LiveReg: %1
  UpdateRegP: SU(6) %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %40
  UpdateRegP: SU(2) %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %38
Top Pressure:
GR16=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
Excess PSets: 
SU(0):   %38:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %42:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(2): Data Latency=4 Reg=%42
    SU(2): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Data Latency=4 Reg=%42
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%42
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %42:gr64 = SHL64ri %42:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Data Latency=1 Reg=%42
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%42
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %42:gr64 = ADD64rm %42:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(3): Data Latency=1 Reg=%42
    SU(3): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%42
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %45:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(6): Data Latency=4 Reg=%45
    SU(6): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=%45
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%45
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%42
    SU(6): Data Latency=1 Reg=%45
  Successors:
    SU(9): Data Latency=1 Reg=%46
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %47:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(9): Data Latency=4 Reg=%47
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1 Reg=%46
    SU(8): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %46
  UpdateRegP: SU(9) %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %47
  UpdateRegP: SU(9) %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A TopLatency SU(9) 11c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 8 
  Cand SU(0) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %47:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %42
  UpdateRegP: SU(7) %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
              to 
  LiveReg: %45
  UpdateRegP: SU(7) %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 6 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %45
  UpdateRegP: SU(6) %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 5 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %45:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @9c
  BotQ.A BotLatency SU(5) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %42:gr64 = ADD64rm %42:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %42
  UpdateRegP: SU(4) %42:gr64 = ADD64rm %42:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %42:gr64 = SHL64ri %42:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %42
  UpdateRegP: SU(3) %42:gr64 = SHL64ri %42:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %42
  UpdateRegP: SU(2) %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %42:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @14c
  BotQ.A BotLatency SU(1) 14c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %38:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %38:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
SU(1):   %42:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(2):   %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %42:gr64 = SHL64ri %42:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %42:gr64 = ADD64rm %42:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
SU(5):   %45:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
SU(8):   %47:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(9):   %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)

********** MI Scheduling **********
norm2u3:%bb.9 if.then28
  From: %64:fr64 = MOVSDrm_alt %stack.11.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %64:fr64 = MOVSDrm_alt %stack.11.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%64
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %65:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%65
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %65:gr64, 1, $noreg, 0, $noreg, %64:fr64 :: (store 8 into %ir.43)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%65
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%64
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %65:gr64, 1, $noreg, 0, $noreg, %64:fr64 :: (store 8 into %ir.43)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %65:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %64:fr64 = MOVSDrm_alt %stack.11.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %64:fr64 = MOVSDrm_alt %stack.11.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
SU(1):   %65:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
SU(2):   MOVSDmr %65:gr64, 1, $noreg, 0, $noreg, %64:fr64 :: (store 8 into %ir.43)

********** MI Scheduling **********
norm2u3:%bb.13 for.end35
  From: %2:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
    To: JCC_1 %bb.15, 2, implicit killed $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %2:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%2
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %2:fr64 = DIVSDrm %2:fr64(tied-def 0), %stack.15.dn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.dn)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%2
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%2
  Single Issue       : false;
SU(2):   %26:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(3):   UCOMISDrr %2:fr64, %26:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%2
    SU(2): Data Latency=1 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.15, 2, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) UCOMISDrr %2:fr64, %26:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %26:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %2:fr64 = DIVSDrm %2:fr64(tied-def 0), %stack.15.dn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.dn)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %2:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %2:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
SU(1):   %2:fr64 = DIVSDrm %2:fr64(tied-def 0), %stack.15.dn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.dn)
SU(2):   %26:fr64 = FsFLD0SD
SU(3):   UCOMISDrr %2:fr64, %26:fr64, implicit-def $eflags

********** MI Scheduling **********
norm2u3:%bb.16 for.end35.split
  From: %28:gr64 = MOV64rm %stack.4.rnm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2.addr)
    To: JCC_1 %bb.18, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %28:gr64 = MOV64rm %stack.4.rnm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%28
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOVSDmr %28:gr64, 1, $noreg, 0, $noreg, %67:fr64 :: (store 8 into %ir.52)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%28
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(2): Ord  Latency=1 Memory
  Single Issue       : false;
SU(2):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Ord  Latency=1 Memory
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %28:gr64, 1, $noreg, 0, $noreg, %67:fr64 :: (store 8 into %ir.52)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %28:gr64 = MOV64rm %stack.4.rnm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %28:gr64 = MOV64rm %stack.4.rnm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2.addr)
SU(1):   MOVSDmr %28:gr64, 1, $noreg, 0, $noreg, %67:fr64 :: (store 8 into %ir.52)
SU(2):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)  0@0B-phi
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)[384r,400r:2)[2496r,2512r:1)  0@0B-phi 1@2496r 2@384r
DIH [0B,96r:0)[384r,400r:2)[2496r,2512r:1)  0@0B-phi 1@2496r 2@384r
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)[384r,400r:2)[2496r,2512r:1)  0@0B-phi 1@2496r 2@384r
HDX [0B,64r:0)  0@0B-phi
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
R9B [0B,16r:0)  0@0B-phi
R9BH [0B,16r:0)  0@0B-phi
R9WH [0B,16r:0)  0@0B-phi
%1 [240r,2032B:0)  0@240r weight:0.000000e+00
%2 [2048r,2080r:0)[2080r,2160r:1)[2208B,2240r:1)  0@2048r 1@2080r weight:0.000000e+00
%6 [96r,272r:0)  0@96r weight:0.000000e+00
%7 [80r,240r:0)  0@80r weight:0.000000e+00
%8 [64r,208r:0)  0@64r weight:0.000000e+00
%9 [48r,160r:0)  0@48r weight:0.000000e+00
%10 [32r,176r:0)  0@32r weight:0.000000e+00
%11 [16r,192r:0)  0@16r weight:0.000000e+00
%15 [448r,496r:0)  0@448r weight:0.000000e+00
%17 [464r,496r:0)[496r,544r:1)  0@464r 1@496r weight:0.000000e+00
%19 [512r,544r:0)[544r,560r:1)  0@512r 1@544r weight:0.000000e+00
%20 [592r,608r:0)  0@592r weight:0.000000e+00
%23 [720r,752r:0)[752r,768r:1)  0@720r 1@752r weight:0.000000e+00
%26 [2096r,2112r:0)  0@2096r weight:0.000000e+00
%28 [2368r,2384r:0)  0@2368r weight:0.000000e+00
%32 [864r,896r:0)[896r,912r:1)  0@864r 1@896r weight:0.000000e+00
%36 [1008r,1040r:0)[1040r,1056r:1)  0@1008r 1@1040r weight:0.000000e+00
%38 [1120r,1456r:0)  0@1120r weight:0.000000e+00
%40 [208r,656r:0)[656r,2032B:1)  0@208r 1@656r weight:0.000000e+00
%42 [1136r,1168r:2)[1168r,1200r:0)[1200r,1232r:1)[1232r,1296r:3)  0@1168r 1@1200r 2@1136r 3@1232r weight:0.000000e+00
%45 [1248r,1280r:0)[1280r,1296r:1)  0@1248r 1@1280r weight:0.000000e+00
%46 [1296r,1328r:0)  0@1296r weight:0.000000e+00
%47 [1312r,1328r:0)  0@1312r weight:0.000000e+00
%48 [1328r,1360r:0)  0@1328r weight:0.000000e+00
%49 [672r,2032B:0)  0@672r weight:0.000000e+00
%51 [1424r,1456r:0)[1456r,1472r:1)  0@1424r 1@1456r weight:0.000000e+00
%54 [1488r,1520r:2)[1520r,1552r:0)[1552r,1584r:1)[1584r,1648r:3)  0@1520r 1@1552r 2@1488r 3@1584r weight:0.000000e+00
%57 [1600r,1632r:0)[1632r,1648r:1)  0@1600r 1@1632r weight:0.000000e+00
%58 [1648r,1680r:0)  0@1648r weight:0.000000e+00
%59 [1664r,1680r:0)  0@1664r weight:0.000000e+00
%61 [1680r,1712r:0)[1712r,1776r:1)  0@1680r 1@1712r weight:0.000000e+00
%63 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%64 [1840r,1872r:0)  0@1840r weight:0.000000e+00
%65 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%66 [688r,2032B:0)  0@688r weight:0.000000e+00
%67 [2160r,2208B:0)[2288r,2336B:1)[2336B,2384r:2)  0@2160r 1@2288r 2@2336B-phi weight:0.000000e+00
RegMasks: 400r 1392r 2256r 2512r
********** MACHINEINSTRS **********
# Machine code for function norm2u3: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
Function Live Ins: $rdi in %6, $esi in %7, $edx in %8, $ecx in %9, $r8 in %10, $r9 in %11

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9
16B	  %11:gr64 = COPY $r9
32B	  %10:gr64 = COPY $r8
48B	  %9:gr32 = COPY $ecx
64B	  %8:gr32 = COPY $edx
80B	  %7:gr32 = COPY $esi
96B	  %6:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.or.addr)
128B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n1.addr)
144B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n2.addr)
160B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n3.addr)
176B	  MOV64mr %stack.4.rnm2.addr, 1, $noreg, 0, $noreg, %10:gr64 :: (store 8 into %ir.rnm2.addr)
192B	  MOV64mr %stack.5.rnmu.addr, 1, $noreg, 0, $noreg, %11:gr64 :: (store 8 into %ir.rnmu.addr)
208B	  undef %40.sub_32bit:gr64_with_sub_8bit = MOV32rr %8:gr32
240B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
272B	  MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.r)
288B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
304B	  JCC_1 %bb.2, 4, implicit killed $eflags
320B	  JMP_1 %bb.1

336B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
384B	  $edi = MOV32ri 8
400B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

432B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  %15:fr64 = CVTSI2SDrm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nx.addr, align 16)
464B	  %17:fr64 = CVTSI2SDrm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ny.addr, align 8)
496B	  %17:fr64 = MULSDrr %17:fr64(tied-def 0), %15:fr64
512B	  %19:fr64 = CVTSI2SDrm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nz.addr, align 16)
544B	  %19:fr64 = MULSDrr %19:fr64(tied-def 0), %17:fr64
560B	  MOVSDmr %stack.15.dn, 1, $noreg, 0, $noreg, %19:fr64 :: (store 8 into %ir.dn)
576B	  MOV64mi32 %stack.10.s, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.s)
592B	  %20:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
608B	  MOV64mi32 %20:gr64, 1, $noreg, 0, $noreg, 0 :: (store 8 into %ir.14)
624B	  MOV32mi %stack.12.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
656B	  %40:gr64_with_sub_8bit = nuw IMUL64rr %40:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
672B	  %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
688B	  %66:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load 16 from constant-pool)

704B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.12
	  successors: %bb.4(0x7c000000), %bb.13(0x04000000); %bb.4(96.88%), %bb.13(3.12%)

720B	  %23:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
752B	  %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32mr %stack.12.i3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
784B	  JCC_1 %bb.13, 13, implicit killed $eflags
800B	  JMP_1 %bb.4

816B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

832B	  MOV32mi %stack.13.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

848B	bb.5.for.cond6:
	; predecessors: %bb.4, %bb.11
	  successors: %bb.6(0x7c000000), %bb.12(0x04000000); %bb.6(96.88%), %bb.12(3.12%)

864B	  %32:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
896B	  %32:gr32 = DEC32r %32:gr32(tied-def 0), implicit-def dead $eflags
912B	  CMP32mr %stack.13.i2, 1, $noreg, 0, $noreg, %32:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
928B	  JCC_1 %bb.12, 13, implicit killed $eflags
944B	  JMP_1 %bb.6

960B	bb.6.for.body10:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

976B	  MOV32mi %stack.14.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

992B	bb.7.for.cond11:
	; predecessors: %bb.6, %bb.10
	  successors: %bb.8(0x7c000000), %bb.11(0x04000000); %bb.8(96.88%), %bb.11(3.12%)

1008B	  %36:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
1040B	  %36:gr32 = DEC32r %36:gr32(tied-def 0), implicit-def dead $eflags
1056B	  CMP32mr %stack.14.i1, 1, $noreg, 0, $noreg, %36:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
1072B	  JCC_1 %bb.11, 13, implicit killed $eflags
1088B	  JMP_1 %bb.8

1104B	bb.8.for.body15:
	; predecessors: %bb.7
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

1120B	  %38:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
1136B	  %42:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1168B	  %42:gr64 = nsw IMUL64rr %42:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
1200B	  %42:gr64 = SHL64ri %42:gr64(tied-def 0), 3, implicit-def dead $eflags
1232B	  %42:gr64 = ADD64rm %42:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
1248B	  %45:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1280B	  %45:gr64_nosp = nsw IMUL64rr %45:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1296B	  %46:gr64 = LEA64r %42:gr64, 8, %45:gr64_nosp, 0, $noreg
1312B	  %47:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1328B	  %48:fr64 = MOVSDrm_alt %46:gr64, 8, %47:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx19)
1344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1360B	  $xmm0 = COPY %48:fr64
1376B	  $xmm1 = COPY %49:fr64
1392B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
1408B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1424B	  %51:fr64 = COPY killed $xmm0
1456B	  %51:fr64 = ADDSDrr %51:fr64(tied-def 0), %38:fr64
1472B	  MOVSDmr %stack.10.s, 1, $noreg, 0, $noreg, %51:fr64 :: (store 8 into %ir.s)
1488B	  %54:gr64 = MOVSX64rm32 %stack.12.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1520B	  %54:gr64 = nsw IMUL64rr %54:gr64(tied-def 0), %40:gr64_with_sub_8bit, implicit-def dead $eflags
1552B	  %54:gr64 = SHL64ri %54:gr64(tied-def 0), 3, implicit-def dead $eflags
1584B	  %54:gr64 = ADD64rm %54:gr64(tied-def 0), %stack.9.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
1600B	  %57:gr64_nosp = MOVSX64rm32 %stack.13.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1632B	  %57:gr64_nosp = nsw IMUL64rr %57:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1648B	  %58:gr64 = LEA64r %54:gr64, 8, %57:gr64_nosp, 0, $noreg
1664B	  %59:gr64_nosp = MOVSX64rm32 %stack.14.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1680B	  %61:vr128 = MOVSDrm %58:gr64, 8, %59:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx25)
1712B	  %61:vr128 = PANDrr %61:vr128(tied-def 0), %66:vr128
1744B	  MOVLPDmr %stack.11.a, 1, $noreg, 0, $noreg, %61:vr128 :: (store 8 into %ir.a)
1760B	  %63:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
1776B	  UCOMISDrm %61:vr128, %63:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.40)
1792B	  JCC_1 %bb.10, 6, implicit killed $eflags
1808B	  JMP_1 %bb.9

1824B	bb.9.if.then28:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1840B	  %64:fr64 = MOVSDrm_alt %stack.11.a, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a)
1856B	  %65:gr64 = MOV64rm %stack.5.rnmu.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu.addr)
1872B	  MOVSDmr %65:gr64, 1, $noreg, 0, $noreg, %64:fr64 :: (store 8 into %ir.43)

1888B	bb.10.if.end29:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1904B	  INC32m %stack.14.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
1920B	  JMP_1 %bb.7

1936B	bb.11.for.end:
	; predecessors: %bb.7
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1952B	  INC32m %stack.13.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
1968B	  JMP_1 %bb.5

1984B	bb.12.for.end32:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

2000B	  INC32m %stack.12.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
2016B	  JMP_1 %bb.3

2032B	bb.13.for.end35:
	; predecessors: %bb.3
	  successors: %bb.14(0x40000000), %bb.15(0x40000000); %bb.14(50.00%), %bb.15(50.00%)

2048B	  %2:fr64 = MOVSDrm_alt %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
2080B	  %2:fr64 = DIVSDrm %2:fr64(tied-def 0), %stack.15.dn, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.dn)
2096B	  %26:fr64 = FsFLD0SD
2112B	  UCOMISDrr %2:fr64, %26:fr64, implicit-def $eflags
2128B	  JCC_1 %bb.15, 2, implicit killed $eflags

2144B	bb.14:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2160B	  %67:fr64 = SQRTSDr %2:fr64
2192B	  JMP_1 %bb.16

2208B	bb.15.call.sqrt:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2240B	  $xmm0 = COPY %2:fr64
2256B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
2272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2288B	  %67:fr64 = COPY killed $xmm0

2336B	bb.16.for.end35.split:
	; predecessors: %bb.15, %bb.14
	  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

2368B	  %28:gr64 = MOV64rm %stack.4.rnm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2.addr)
2384B	  MOVSDmr %28:gr64, 1, $noreg, 0, $noreg, %67:fr64 :: (store 8 into %ir.52)
2400B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
2416B	  JCC_1 %bb.18, 4, implicit killed $eflags
2432B	  JMP_1 %bb.17

2448B	bb.17.if.then38:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2496B	  $edi = MOV32ri 8
2512B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
2528B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

2544B	bb.18.if.end39:
	; predecessors: %bb.16, %bb.17

2560B	  RET 0

# End machine code for function norm2u3.

Before MISched:
# Machine code for function resid: NoPHIs, TracksLiveness
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=2072, align=16, at location [SP+8]
  fi#15: size=2072, align=16, at location [SP+8]
Function Live Ins: $rdi in %6, $rsi in %7, $rdx in %8, $ecx in %9, $r8d in %10, $r9d in %11

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $rdi, $rsi, $rdx, $ecx, $r8d, $r9d
  %11:gr32 = COPY $r9d
  %10:gr32 = COPY $r8d
  %9:gr32 = COPY $ecx
  %8:gr64 = COPY $rdx
  %7:gr64 = COPY $rsi
  %6:gr64 = COPY $rdi
  MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ou.addr)
  MOV64mr %stack.1.ov.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.ov.addr)
  MOV64mr %stack.2.or.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.or.addr)
  MOV32mr %stack.3.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.4.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.5.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
  undef %83.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.u)
  MOV64mr %stack.9.v, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.v)
  MOV64mr %stack.10.r, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.r)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %83:gr64_with_sub_8bit = nuw IMUL64rr %83:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

bb.3.for.cond:
; predecessors: %bb.2, %bb.13
  successors: %bb.4(0x7c000000), %bb.14(0x04000000); %bb.4(96.88%), %bb.14(3.12%)

  %17:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %17:gr32 = DEC32r %17:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.14, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.5.for.cond1:
; predecessors: %bb.4, %bb.12
  successors: %bb.6(0x7c000000), %bb.13(0x04000000); %bb.6(96.88%), %bb.13(3.12%)

  %39:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.13, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body4:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.7.for.cond5:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %41:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %41:gr32, %stack.3.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.9, 13, implicit killed $eflags
  JMP_1 %bb.8

bb.8.for.body7:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %82:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %105:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %85:gr64_nosp = COPY %105:gr64_nosp
  %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
  %98:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %89:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, -1, $noreg
  %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
  %118:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
  %95:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, 1, $noreg
  %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
  %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %100:gr64_nosp = LEA64r %105:gr64_nosp, 1, $noreg, -1, $noreg
  %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
  %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
  %105:gr64_nosp = nsw INC64r %105:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
  %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
  MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
  %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
  %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
  %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
  %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
  %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
  %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
  %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
  %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
  MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
  %117:gr32 = LEA64_32r %118:gr64_nosp, 1, $noreg, 1, $noreg
  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %117:gr32 :: (store 4 into %ir.i1)
  JMP_1 %bb.7

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.10.for.cond75:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %45:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.12, 13, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body78:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %50:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  %50:gr64 = SHL64ri %50:gr64(tied-def 0), 3, implicit-def dead $eflags
  %51:gr64 = MOV64rm %stack.9.v, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v)
  %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
  %53:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
  %55:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
  %57:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a.addr, align 16)
  %65:fr64 = MOVSDrm_alt %57:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
  %62:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
  %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
  %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
  %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
  %74:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx109)
  %70:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx95)
  %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
  %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
  %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
  %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
  %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
  %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
  %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
  %50:gr64 = ADD64rm %50:gr64(tied-def 0), %stack.10.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
  MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.10

bb.12.for.end124:
; predecessors: %bb.10
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.5

bb.13.for.end127:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.3

bb.14.for.end130:
; predecessors: %bb.3
  successors: %bb.15(0x50000000), %bb.16(0x30000000); %bb.15(62.50%), %bb.16(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.16, 4, implicit killed $eflags
  JMP_1 %bb.15

bb.15.if.then132:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 4
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.16.if.end133:
; predecessors: %bb.14, %bb.15
  successors: %bb.17(0x40000000), %bb.18(0x40000000); %bb.17(50.00%), %bb.18(50.00%)

  %20:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  %21:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %22:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %23:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %24:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %20:gr64
  $esi = COPY %21:gr32
  $edx = COPY %22:gr32
  $ecx = COPY %23:gr32
  $r8d = COPY %24:gr32
  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
  JCC_1 %bb.18, 14, implicit killed $eflags
  JMP_1 %bb.17

bb.17.if.then135:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %25:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  %26:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %27:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %28:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %29:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %25:gr64
  $esi = COPY %26:gr32
  $edx = COPY %27:gr32
  $ecx = COPY %28:gr32
  $r8 = MOV32ri64 @.str.58
  $r9d = COPY %29:gr32
  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.18.if.end136:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x40000000), %bb.20(0x40000000); %bb.19(50.00%), %bb.20(50.00%)

  %31:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 2)`, align 8)
  CMP32rm %31:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 8)
  JCC_1 %bb.20, 12, implicit killed $eflags
  JMP_1 %bb.19

bb.19.if.then138:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %33:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  %34:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %35:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %36:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %33:gr64
  $esi = COPY %34:gr32
  $edx = COPY %35:gr32
  $ecx = COPY %36:gr32
  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.20.if.end139:
; predecessors: %bb.18, %bb.19

  RET 0

# End machine code for function resid.

********** MI Scheduling **********
resid:%bb.0 entry
  From: %11:gr32 = COPY $r9d
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %1 %83 
Live Thru: 
  LiveReg: %1
  LiveReg: %83
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %11:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%11
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %10:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%10
    SU(10): Data Latency=0 Reg=%10
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %9:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%9
    SU(9): Data Latency=0 Reg=%9
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %8:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(16): Data Latency=0 Reg=%8
    SU(8): Data Latency=0 Reg=%8
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %7:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%7
    SU(7): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %6:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%6
    SU(6): Data Latency=0 Reg=%6
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ou.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.ov.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.ov.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.or.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.or.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%9
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%10
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%11
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   undef %83.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%10
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%9
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.u)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   MOV64mr %stack.9.v, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.v)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   MOV64mr %stack.10.r, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.r)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 12 11 10 9 8 7 6 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(17) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 12 11 10 9 8 7 6 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) MOV64mr %stack.10.r, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.r)
Bottom Pressure:
GR16=6
  LiveReg: %8
  UpdateRegP: SU(8) MOV64mr %stack.2.or.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.or.addr)
              to 
  UpdateRegP: SU(16) MOV64mr %stack.10.r, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.r)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 14 13 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr %stack.9.v, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.v)
Bottom Pressure:
GR16=8
  LiveReg: %7
  UpdateRegP: SU(7) MOV64mr %stack.1.ov.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.ov.addr)
              to 
  UpdateRegP: SU(15) MOV64mr %stack.9.v, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.v)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 14 13 12 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.u)
Bottom Pressure:
GR16=10
  LiveReg: %6
  UpdateRegP: SU(6) MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ou.addr)
              to 
  UpdateRegP: SU(14) MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.u)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 13 12 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
Bottom Pressure:
GR16=10
  LiveReg: %9
  UpdateRegP: SU(9) MOV32mr %stack.3.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 12 11 10 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %83.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
Bottom Pressure:
GR16=10
  LiveReg: %10
  UpdateRegP: SU(10) MOV32mr %stack.4.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
              to 
  UpdateRegP: SU(12) undef %83.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 11 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=12
  LiveReg: %11
  UpdateRegP: SU(11) MOV32mr %stack.5.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.or.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.or.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.ov.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.ov.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ou.addr)
Bottom Pressure:
GR16=12
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %6:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %7:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %8:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %9:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %10:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %11:gr32 = COPY $r9d
SU(1):   %10:gr32 = COPY $r8d
SU(2):   %9:gr32 = COPY $ecx
SU(3):   %8:gr64 = COPY $rdx
SU(4):   %7:gr64 = COPY $rsi
SU(5):   %6:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ou.addr)
SU(7):   MOV64mr %stack.1.ov.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.ov.addr)
SU(8):   MOV64mr %stack.2.or.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.or.addr)
SU(9):   MOV32mr %stack.3.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
SU(10):   MOV32mr %stack.4.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
SU(11):   MOV32mr %stack.5.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
SU(12):   undef %83.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
SU(14):   MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.u)
SU(15):   MOV64mr %stack.9.v, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.v)
SU(16):   MOV64mr %stack.10.r, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.r)
SU(17):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
resid:%bb.2 if.end
  From: MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %83:gr64_with_sub_8bit = nuw IMUL64rr %83:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %83:gr64_with_sub_8bit = nuw IMUL64rr %83:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(1):   %83:gr64_with_sub_8bit = nuw IMUL64rr %83:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

********** MI Scheduling **********
resid:%bb.3 for.cond
  From: %17:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
    To: JCC_1 %bb.14, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %17:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %17:gr32 = DEC32r %17:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%17
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%17
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %17:gr32 = DEC32r %17:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %17:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(1):   %17:gr32 = DEC32r %17:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
resid:%bb.5 for.cond1
  From: %39:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
    To: JCC_1 %bb.13, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%39
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%39
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%39
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %39:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(1):   %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
resid:%bb.7 for.cond5
  From: %41:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.9, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %41:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%41
  Single Issue       : false;
SU(1):   CMP32rm %41:gr32, %stack.3.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%41
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %41:gr32, %stack.3.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %41:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %41:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %41:gr32, %stack.3.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)

********** MI Scheduling **********
resid:%bb.8 for.body7
  From: %82:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: JMP_1 %bb.7
 RegionInstrs: 38
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=20
Live In: %83 %1 
Live Out: %83 %1 
Live Thru: GR16=4
  LiveReg: %83
  UpdateRegP: SU(3) %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(17) %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(22) %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(7) %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(12) %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(15) %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %82:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 39
  Successors:
    SU(23): Data Latency=4 Reg=%82
    SU(18): Data Latency=4 Reg=%82
    SU(4): Data Latency=4 Reg=%82
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %105:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 40
  Successors:
    SU(21): Data Latency=4 Reg=%105
    SU(16): Data Latency=4 Reg=%105
    SU(2): Data Latency=4 Reg=%105
    SU(21): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %85:gr64_nosp = COPY %105:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(1): Data Latency=4 Reg=%105
  Successors:
    SU(3): Data Latency=0 Reg=%85
    SU(3): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(2): Data Latency=0 Reg=%85
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%85
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 35
  Predecessors:
    SU(3): Data Latency=1 Reg=%85
    SU(0): Data Latency=4 Reg=%82
  Successors:
    SU(13): Data Latency=1 Reg=%86
    SU(8): Data Latency=1 Reg=%86
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %98:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 40
  Successors:
    SU(15): Data Latency=4 Reg=%98
    SU(11): Data Latency=4 Reg=%98
    SU(6): Data Latency=4 Reg=%98
    SU(15): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %89:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(5): Data Latency=4 Reg=%98
  Successors:
    SU(7): Data Latency=1 Reg=%89
    SU(7): Out  Latency=0
    SU(15): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 35
  Predecessors:
    SU(6): Data Latency=1 Reg=%89
    SU(6): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%89
    SU(27): Data Latency=1 Reg=%89
    SU(8): Data Latency=1 Reg=%89
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 34
  Predecessors:
    SU(7): Data Latency=1 Reg=%89
    SU(4): Data Latency=1 Reg=%86
  Successors:
    SU(10): Data Latency=1 Reg=%90
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %118:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(36): Data Latency=4 Reg=%118
    SU(35): Data Latency=4 Reg=%118
    SU(34): Data Latency=4 Reg=%118
    SU(32): Data Latency=4 Reg=%118
    SU(30): Data Latency=4 Reg=%118
    SU(28): Data Latency=4 Reg=%118
    SU(26): Data Latency=4 Reg=%118
    SU(25): Data Latency=4 Reg=%118
    SU(20): Data Latency=4 Reg=%118
    SU(14): Data Latency=4 Reg=%118
    SU(10): Data Latency=4 Reg=%118
    SU(37): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 33
  Predecessors:
    SU(8): Data Latency=1 Reg=%90
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(14): Data Latency=4 Reg=%103
    SU(14): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(11):   %95:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(5): Data Latency=4 Reg=%98
  Successors:
    SU(12): Data Latency=1 Reg=%95
    SU(12): Out  Latency=0
    SU(15): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(11): Data Latency=1 Reg=%95
    SU(11): Out  Latency=0
  Successors:
    SU(33): Data Latency=1 Reg=%95
    SU(29): Data Latency=1 Reg=%95
    SU(13): Data Latency=1 Reg=%95
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 30
  Predecessors:
    SU(12): Data Latency=1 Reg=%95
    SU(4): Data Latency=1 Reg=%86
  Successors:
    SU(14): Data Latency=1 Reg=%96
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 29
  Predecessors:
    SU(10): Data Latency=4 Reg=%103
    SU(13): Data Latency=1 Reg=%96
    SU(10): Out  Latency=0
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(20): Data Latency=4 Reg=%103
    SU(20): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(15):   %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 27
  Predecessors:
    SU(11): Anti Latency=0
    SU(6): Anti Latency=0
    SU(5): Data Latency=4 Reg=%98
    SU(5): Out  Latency=0
  Successors:
    SU(24): Data Latency=1 Reg=%98
    SU(19): Data Latency=1 Reg=%98
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %100:gr64_nosp = LEA64r %105:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 29
  Predecessors:
    SU(1): Data Latency=4 Reg=%105
  Successors:
    SU(17): Data Latency=1 Reg=%100
    SU(17): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 28
  Predecessors:
    SU(16): Data Latency=1 Reg=%100
    SU(16): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%100
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 27
  Predecessors:
    SU(17): Data Latency=1 Reg=%100
    SU(0): Data Latency=4 Reg=%82
  Successors:
    SU(29): Data Latency=1 Reg=%101
    SU(27): Data Latency=1 Reg=%101
    SU(19): Data Latency=1 Reg=%101
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 26
  Predecessors:
    SU(18): Data Latency=1 Reg=%101
    SU(15): Data Latency=1 Reg=%98
  Successors:
    SU(20): Data Latency=1 Reg=%102
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 25
  Predecessors:
    SU(14): Data Latency=4 Reg=%103
    SU(19): Data Latency=1 Reg=%102
    SU(14): Out  Latency=0
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(25): Data Latency=4 Reg=%103
    SU(25): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(21):   %105:gr64_nosp = nsw INC64r %105:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(16): Anti Latency=0
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=%105
    SU(1): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%105
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(21): Data Latency=1 Reg=%105
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%105
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 23
  Predecessors:
    SU(22): Data Latency=1 Reg=%105
    SU(0): Data Latency=4 Reg=%82
  Successors:
    SU(33): Data Latency=1 Reg=%106
    SU(31): Data Latency=1 Reg=%106
    SU(24): Data Latency=1 Reg=%106
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(23): Data Latency=1 Reg=%106
    SU(15): Data Latency=1 Reg=%98
  Successors:
    SU(25): Data Latency=1 Reg=%107
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(25):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 21
  Predecessors:
    SU(20): Data Latency=4 Reg=%103
    SU(24): Data Latency=1 Reg=%107
    SU(20): Out  Latency=0
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(26): Data Latency=4 Reg=%103
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 17
  Predecessors:
    SU(25): Data Latency=4 Reg=%103
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(27):   %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 17
  Predecessors:
    SU(18): Data Latency=1 Reg=%101
    SU(7): Data Latency=1 Reg=%89
  Successors:
    SU(28): Data Latency=1 Reg=%109
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 16
  Predecessors:
    SU(27): Data Latency=1 Reg=%109
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(30): Data Latency=4 Reg=%114
    SU(30): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(29):   %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(18): Data Latency=1 Reg=%101
    SU(12): Data Latency=1 Reg=%95
  Successors:
    SU(30): Data Latency=1 Reg=%111
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(30):   %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 12
  Predecessors:
    SU(28): Data Latency=4 Reg=%114
    SU(29): Data Latency=1 Reg=%111
    SU(28): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(32): Data Latency=4 Reg=%114
    SU(32): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(23): Data Latency=1 Reg=%106
    SU(7): Data Latency=1 Reg=%89
  Successors:
    SU(32): Data Latency=1 Reg=%113
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(32):   %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 32
  Height             : 8
  Predecessors:
    SU(30): Data Latency=4 Reg=%114
    SU(31): Data Latency=1 Reg=%113
    SU(30): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(34): Data Latency=4 Reg=%114
    SU(34): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(33):   %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(23): Data Latency=1 Reg=%106
    SU(12): Data Latency=1 Reg=%95
  Successors:
    SU(34): Data Latency=1 Reg=%115
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 36
  Height             : 4
  Predecessors:
    SU(32): Data Latency=4 Reg=%114
    SU(33): Data Latency=1 Reg=%115
    SU(32): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(35): Data Latency=4 Reg=%114
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(35):   MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 0
  Predecessors:
    SU(34): Data Latency=4 Reg=%114
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%118
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(36):   %117:gr32 = LEA64_32r %118:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%118
  Successors:
    SU(37): Data Latency=1 Reg=%117
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %117:gr32 :: (store 4 into %ir.i1)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 0
  Predecessors:
    SU(36): Data Latency=1 Reg=%117
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 40
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 35 
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %117:gr32 :: (store 4 into %ir.i1)
Bottom Pressure:
GR16=6
  LiveReg: %117
  UpdateRegP: SU(37) MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %117:gr32 :: (store 4 into %ir.i1)
              to 
  Ready @0c
  BotQ.A TopLatency SU(37) 36c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 36 
  Cand SU(35) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %117:gr32 = LEA64_32r %118:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %118
  UpdateRegP: SU(10) %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(14) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to GR16 2
  UpdateRegP: SU(20) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
              to GR16 2
  UpdateRegP: SU(25) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
              to GR16 2
  UpdateRegP: SU(26) MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
              to FR32 1    FR32X 1
  UpdateRegP: SU(28) %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(30) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to GR16 2
  UpdateRegP: SU(32) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
              to GR16 2
  UpdateRegP: SU(34) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
              to GR16 2
  UpdateRegP: SU(35) MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
              to FR32 1    FR32X 1
  UpdateRegP: SU(36) %117:gr32 = LEA64_32r %118:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(36) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %114
  UpdateRegP: SU(35) MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
              to 
  Ready @0c
  BotQ.A TopLatency SU(35) 40c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %114
  UpdateRegP: SU(34) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %115
  UpdateRegP: SU(34) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(34) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 32 
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %106
  UpdateRegP: SU(24) %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(31) %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(33) %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
              to 
  LiveReg: %95
  UpdateRegP: SU(13) %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(29) %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(33) %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(33) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %114
  UpdateRegP: SU(32) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %113
  UpdateRegP: SU(32) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(32) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 30 
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %89
  UpdateRegP: SU(8) %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(31) %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(31) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %114
  UpdateRegP: SU(30) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %111
  UpdateRegP: SU(30) %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(30) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 28 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %101
  UpdateRegP: SU(19) %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(29) %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(29) 13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
Bottom Pressure:
GR16=16
  LiveReg: %109
  UpdateRegP: SU(28) %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(28) 16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 26 
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  Ready @17c
  BotQ.A BotLatency SU(27) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %103
  UpdateRegP: SU(26) MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
              to 
  Ready @17c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %103
  UpdateRegP: SU(25) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %107
  UpdateRegP: SU(25) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(25) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 20 
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %98
  UpdateRegP: SU(19) %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(24) 22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 23 
  Cand SU(20) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %82
  UpdateRegP: SU(4) %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(23) %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
              to 
  LiveReg: %105
  UpdateRegP: SU(23) %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(23) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 22 
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %105
  UpdateRegP: SU(22) %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @24c
  BotQ.A BotLatency SU(22) 24c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %105:gr64_nosp = nsw INC64r %105:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %105
  UpdateRegP: SU(2) %85:gr64_nosp = COPY %105:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(16) %100:gr64_nosp = LEA64r %105:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  UpdateRegP: SU(21) %105:gr64_nosp = nsw INC64r %105:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(21) 25c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %103
  UpdateRegP: SU(20) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %102
  UpdateRegP: SU(20) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
              to FR32 -1    FR32X -1
  Ready @25c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 14 
  Cand SU(19) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(19) %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @26c
  BotQ.A BotLatency SU(19) 26c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 18 15 
  Cand SU(14) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %100
  UpdateRegP: SU(18) %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(18) 27c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 17 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %100
  UpdateRegP: SU(17) %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(17) 28c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 16 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %100:gr64_nosp = LEA64r %105:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @29c
  BotQ.A BotLatency SU(16) 29c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %98
  UpdateRegP: SU(6) %89:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  UpdateRegP: SU(11) %95:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  UpdateRegP: SU(15) %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %103
  UpdateRegP: SU(14) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %96
  UpdateRegP: SU(14) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to FR32 -1    FR32X -1
  Ready @29c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %86
  UpdateRegP: SU(8) %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(13) %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(13) 30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %95
  UpdateRegP: SU(12) %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
  BotQ.A BotLatency SU(12) 31c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %95:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @32c
  BotQ.A BotLatency SU(11) 32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
Bottom Pressure:
GR16=18
  LiveReg: %90
  UpdateRegP: SU(10) %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
              to FR32 -1    FR32X -1
  Ready @33c
  BotQ.A BotLatency SU(10) 33c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %118:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=16
  Ready @37c
  BotQ.A BotLatency SU(9) 37c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  Ready @34c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=14
  LiveReg: %89
  UpdateRegP: SU(7) %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @35c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %89:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=12
  Ready @36c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %98:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=10
  Ready @40c
  BotQ.A BotLatency SU(5) 40c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %85
  UpdateRegP: SU(4) %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @35c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %85
  UpdateRegP: SU(3) %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @36c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %85:gr64_nosp = COPY %105:gr64_nosp
Bottom Pressure:
GR16=8
  Ready @36c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %105:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=6
  Ready @40c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %82:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=4
  Ready @39c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %82:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %105:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(2):   %85:gr64_nosp = COPY %105:gr64_nosp
SU(3):   %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
SU(4):   %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
SU(5):   %98:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %89:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, -1, $noreg
SU(7):   %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
SU(9):   %118:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
SU(11):   %95:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, 1, $noreg
SU(12):   %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(13):   %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
SU(14):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
SU(15):   %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(16):   %100:gr64_nosp = LEA64r %105:gr64_nosp, 1, $noreg, -1, $noreg
SU(17):   %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
SU(18):   %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
SU(19):   %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
SU(20):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
SU(21):   %105:gr64_nosp = nsw INC64r %105:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(22):   %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
SU(24):   %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
SU(25):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
SU(26):   MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
SU(27):   %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
SU(28):   %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
SU(29):   %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
SU(30):   %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
SU(31):   %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
SU(32):   %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
SU(33):   %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
SU(34):   %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
SU(35):   MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
SU(36):   %117:gr32 = LEA64_32r %118:gr64_nosp, 1, $noreg, 1, $noreg
SU(37):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %117:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
resid:%bb.10 for.cond75
  From: %45:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
    To: JCC_1 %bb.12, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %45:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%45
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%45
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%45
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%45
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %45:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %45:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(1):   %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
resid:%bb.11 for.body78
  From: %50:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.10
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=14
Live In: %1 %83 
Live Out: %1 %83 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(6) %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %83
  UpdateRegP: SU(1) %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %50:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(1): Data Latency=4 Reg=%50
    SU(1): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%50
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%50
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %50:gr64 = SHL64ri %50:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(1): Data Latency=1 Reg=%50
    SU(1): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%50
    SU(13): Data Latency=1 Reg=%50
    SU(4): Data Latency=1 Reg=%50
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %51:gr64 = MOV64rm %stack.9.v, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Data Latency=4 Reg=%51
    SU(4): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%50
    SU(3): Out  Latency=0
    SU(3): Data Latency=4 Reg=%51
  Successors:
    SU(7): Data Latency=1 Reg=%51
    SU(26): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %53:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(6): Data Latency=4 Reg=%53
    SU(6): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(5): Data Latency=4 Reg=%53
    SU(5): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%53
    SU(14): Data Latency=1 Reg=%53
    SU(7): Data Latency=1 Reg=%53
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(4): Data Latency=1 Reg=%51
    SU(6): Data Latency=1 Reg=%53
  Successors:
    SU(9): Data Latency=1 Reg=%54
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %55:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(28): Data Latency=4 Reg=%55
    SU(23): Data Latency=4 Reg=%55
    SU(20): Data Latency=4 Reg=%55
    SU(19): Data Latency=4 Reg=%55
    SU(18): Data Latency=4 Reg=%55
    SU(17): Data Latency=4 Reg=%55
    SU(15): Data Latency=4 Reg=%55
    SU(9): Data Latency=4 Reg=%55
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(7): Data Latency=1 Reg=%54
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(16): Data Latency=4 Reg=%72
    SU(16): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(10):   %57:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a.addr, align 16)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(24): Data Latency=4 Reg=%57
    SU(21): Data Latency=4 Reg=%57
    SU(11): Data Latency=4 Reg=%57
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %65:fr64 = MOVSDrm_alt %57:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(10): Data Latency=4 Reg=%57
  Successors:
    SU(15): Data Latency=4 Reg=%65
    SU(15): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(12):   %62:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(13): Data Latency=4 Reg=%62
    SU(13): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%50
    SU(12): Out  Latency=0
    SU(12): Data Latency=4 Reg=%62
  Successors:
    SU(14): Data Latency=1 Reg=%62
    SU(26): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(13): Data Latency=1 Reg=%62
    SU(6): Data Latency=1 Reg=%53
  Successors:
    SU(15): Data Latency=1 Reg=%64
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(14): Data Latency=1 Reg=%64
    SU(11): Data Latency=4 Reg=%65
    SU(11): Out  Latency=0
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(16): Data Latency=4 Reg=%65
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(16):   %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 6
  Predecessors:
    SU(15): Data Latency=4 Reg=%65
    SU(9): Data Latency=4 Reg=%72
    SU(9): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%72
    SU(22): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(17):   %74:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx109)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(23): Data Latency=4 Reg=%74
    SU(23): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(18):   %70:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx95)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(19): Data Latency=4 Reg=%70
    SU(19): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(19):   %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(18): Data Latency=4 Reg=%70
    SU(18): Out  Latency=0
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(20): Data Latency=4 Reg=%70
    SU(20): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 13
  Predecessors:
    SU(19): Data Latency=4 Reg=%70
    SU(19): Out  Latency=0
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(21): Data Latency=4 Reg=%70
    SU(21): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 9
  Predecessors:
    SU(20): Data Latency=4 Reg=%70
    SU(20): Out  Latency=0
    SU(10): Data Latency=4 Reg=%57
  Successors:
    SU(22): Data Latency=4 Reg=%70
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 5
  Predecessors:
    SU(21): Data Latency=4 Reg=%70
    SU(16): Data Latency=1 Reg=%72
    SU(16): Out  Latency=0
  Successors:
    SU(25): Data Latency=1 Reg=%72
    SU(25): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(23):   %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(17): Data Latency=4 Reg=%74
    SU(17): Out  Latency=0
    SU(8): Data Latency=4 Reg=%55
  Successors:
    SU(24): Data Latency=4 Reg=%74
    SU(24): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(23): Data Latency=4 Reg=%74
    SU(23): Out  Latency=0
    SU(10): Data Latency=4 Reg=%57
  Successors:
    SU(25): Data Latency=4 Reg=%74
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(25):   %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 4
  Predecessors:
    SU(22): Data Latency=1 Reg=%72
    SU(24): Data Latency=4 Reg=%74
    SU(22): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%72
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(26):   %50:gr64 = ADD64rm %50:gr64(tied-def 0), %stack.10.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(13): Anti Latency=0
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=%50
    SU(2): Out  Latency=0
  Successors:
    SU(27): Data Latency=4 Reg=%50
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(26): Data Latency=4 Reg=%50
    SU(6): Data Latency=1 Reg=%53
  Successors:
    SU(28): Data Latency=1 Reg=%81
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
  # preds left       : 20
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(25): Data Latency=1 Reg=%72
    SU(26): Ord  Latency=0 Memory
    SU(27): Data Latency=1 Reg=%81
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%55
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(29):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 25
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 25
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 
Scheduling SU(29) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(29) 22c
  BotQ.A BotLatency SU(29) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %81
  UpdateRegP: SU(28) MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %55
  UpdateRegP: SU(9) %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(15) %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
              to GR16 2
  UpdateRegP: SU(17) %74:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx109)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(18) %70:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx95)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(19) %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
              to 
  UpdateRegP: SU(20) %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
              to 
  UpdateRegP: SU(23) %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
              to 
  UpdateRegP: SU(28) MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
              to FR32 1    FR32X 1
  LiveReg: %72
  UpdateRegP: SU(28) MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 27 
  Cand SU(25) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %50
  UpdateRegP: SU(27) %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
              to 
  LiveReg: %53
  UpdateRegP: SU(7) %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(14) %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(27) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %50:gr64 = ADD64rm %50:gr64(tied-def 0), %stack.10.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %50
  UpdateRegP: SU(4) %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(13) %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(26) %50:gr64 = ADD64rm %50:gr64(tied-def 0), %stack.10.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(26) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %72
  UpdateRegP: SU(25) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
              to 
  LiveReg: %74
  UpdateRegP: SU(25) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 22 
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %74
  UpdateRegP: SU(24) %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %57
  UpdateRegP: SU(11) %65:fr64 = MOVSDrm_alt %57:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(21) %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
              to 
  UpdateRegP: SU(24) %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
              to FR32 -1    FR32X -1
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 23 
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %74
  UpdateRegP: SU(23) %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(23) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 17 
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=12
  LiveReg: %72
  UpdateRegP: SU(22) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
              to 
  LiveReg: %70
  UpdateRegP: SU(22) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
              to FR32 -1    FR32X -1
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 21 16 
  Cand SU(17) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(21) %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
Bottom Pressure:
FR32=3
FR32X=3
GR16=12
  LiveReg: %70
  UpdateRegP: SU(21) %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
              to FR32 -1    FR32X -1
  Ready @9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 20 
  Cand SU(17) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
Bottom Pressure:
FR32=3
FR32X=3
GR16=12
  LiveReg: %70
  UpdateRegP: SU(20) %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
              to FR32 -1    FR32X -1
  Ready @13c
  BotQ.A BotLatency SU(20) 13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 19 
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
Bottom Pressure:
FR32=3
FR32X=3
GR16=12
  LiveReg: %70
  UpdateRegP: SU(19) %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
              to FR32 -1    FR32X -1
  Ready @17c
  BotQ.A BotLatency SU(19) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 18 
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %70:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx95)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @21c
  BotQ.A BotLatency SU(18) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %74:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx109)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @16c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %72
  UpdateRegP: SU(16) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
              to 
  LiveReg: %65
  UpdateRegP: SU(16) %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
              to FR32 -1    FR32X -1
  Ready @6c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %65
  UpdateRegP: SU(15) %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %64
  UpdateRegP: SU(15) %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
              to FR32 -1    FR32X -1
  Ready @10c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 14 11 
  Cand SU(9) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %62
  UpdateRegP: SU(14) %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @11c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 13 
  Cand SU(9) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %62
  UpdateRegP: SU(13) %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 12 
  Cand SU(9) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %62:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  Ready @16c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %65:fr64 = MOVSDrm_alt %57:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @14c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %57:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a.addr, align 16)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @18c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
Bottom Pressure:
GR16=12
  LiveReg: %54
  UpdateRegP: SU(9) %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
              to FR32 -1    FR32X -1
  Ready @10c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %55:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=10
  Ready @25c
  BotQ.A BotLatency SU(8) 25c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %51
  UpdateRegP: SU(7) %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @11c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %53
  UpdateRegP: SU(6) %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %53:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=8
  Ready @16c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %51
  UpdateRegP: SU(4) %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %51:gr64 = MOV64rm %stack.9.v, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v)
Bottom Pressure:
GR16=6
  Ready @16c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %50:gr64 = SHL64ri %50:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %50
  UpdateRegP: SU(2) %50:gr64 = SHL64ri %50:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %50
  UpdateRegP: SU(1) %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @18c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %50:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %50:gr64 = SHL64ri %50:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %51:gr64 = MOV64rm %stack.9.v, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v)
SU(4):   %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
SU(5):   %53:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
SU(8):   %55:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(9):   %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
SU(10):   %57:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a.addr, align 16)
SU(11):   %65:fr64 = MOVSDrm_alt %57:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
SU(12):   %62:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(13):   %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
SU(14):   %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
SU(15):   %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
SU(16):   %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
SU(17):   %74:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx109)
SU(18):   %70:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx95)
SU(19):   %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
SU(20):   %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
SU(21):   %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
SU(22):   %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
SU(23):   %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
SU(24):   %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
SU(25):   %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
SU(26):   %50:gr64 = ADD64rm %50:gr64(tied-def 0), %stack.10.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
SU(27):   %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
SU(28):   MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
SU(29):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
resid:%bb.16 if.end133
  From: $rdi = COPY %20:gr64
    To: CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %20:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %21:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %22:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %23:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %24:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %24:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %23:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %22:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %21:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %20:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   $rdi = COPY %20:gr64
SU(1):   $esi = COPY %21:gr32
SU(2):   $edx = COPY %22:gr32
SU(3):   $ecx = COPY %23:gr32
SU(4):   $r8d = COPY %24:gr32

********** MI Scheduling **********
resid:%bb.16 if.end133
  From: %20:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %20:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %21:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %22:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %23:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %24:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %24:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %23:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %22:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %21:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %20:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
SU(1):   %21:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %22:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %23:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(4):   %24:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)

********** MI Scheduling **********
resid:%bb.17 if.then135
  From: $rdi = COPY %25:gr64
    To: CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %25:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %26:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %27:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %28:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @.str.58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = COPY %29:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %29:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %28:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %27:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %26:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %25:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @.str.58
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(4):   $r8 = MOV32ri64 @.str.58
SU(0):   $rdi = COPY %25:gr64
SU(1):   $esi = COPY %26:gr32
SU(2):   $edx = COPY %27:gr32
SU(3):   $ecx = COPY %28:gr32
SU(5):   $r9d = COPY %29:gr32

********** MI Scheduling **********
resid:%bb.17 if.then135
  From: %25:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %25:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %26:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %27:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %28:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %29:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %29:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %28:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %27:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %26:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %25:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %25:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
SU(1):   %26:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %27:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %28:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(4):   %29:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)

********** MI Scheduling **********
resid:%bb.18 if.end136
  From: %31:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 2)`, align 8)
    To: JCC_1 %bb.20, 12, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 2)`, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%31
  Single Issue       : false;
SU(1):   CMP32rm %31:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 12, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %31:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 8)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 2)`, align 8)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %31:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 2)`, align 8)
SU(1):   CMP32rm %31:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 8)

********** MI Scheduling **********
resid:%bb.19 if.then138
  From: $rdi = COPY %33:gr64
    To: CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %33:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %34:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %35:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %36:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %36:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %35:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %34:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %33:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   $rdi = COPY %33:gr64
SU(1):   $esi = COPY %34:gr32
SU(2):   $edx = COPY %35:gr32
SU(3):   $ecx = COPY %36:gr32

********** MI Scheduling **********
resid:%bb.19 if.then138
  From: %33:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %33:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %34:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %35:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %36:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %36:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %35:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %34:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %33:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %33:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
SU(1):   %34:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %35:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %36:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)

********** INTERVALS **********
CH [0B,48r:0)[3072r,3104r:3)[3400r,3416r:2)[3664r,3680r:1)  0@0B-phi 1@3664r 2@3400r 3@3072r
CL [0B,48r:0)[3072r,3104r:3)[3400r,3416r:2)[3664r,3680r:1)  0@0B-phi 1@3664r 2@3400r 3@3072r
DH [0B,64r:0)[3056r,3104r:3)[3392r,3416r:2)[3648r,3680r:1)  0@0B-phi 1@3648r 2@3392r 3@3056r
DIL [0B,96r:0)[416r,432r:2)[2864r,2880r:1)[3024r,3104r:5)[3380r,3416r:4)[3616r,3680r:3)  0@0B-phi 1@2864r 2@416r 3@3616r 4@3380r 5@3024r
DIH [0B,96r:0)[416r,432r:2)[2864r,2880r:1)[3024r,3104r:5)[3380r,3416r:4)[3616r,3680r:3)  0@0B-phi 1@2864r 2@416r 3@3616r 4@3380r 5@3024r
DL [0B,64r:0)[3056r,3104r:3)[3392r,3416r:2)[3648r,3680r:1)  0@0B-phi 1@3648r 2@3392r 3@3056r
HCX [0B,48r:0)[3072r,3104r:3)[3400r,3416r:2)[3664r,3680r:1)  0@0B-phi 1@3664r 2@3400r 3@3072r
HDI [0B,96r:0)[416r,432r:2)[2864r,2880r:1)[3024r,3104r:5)[3380r,3416r:4)[3616r,3680r:3)  0@0B-phi 1@2864r 2@416r 3@3616r 4@3380r 5@3024r
HDX [0B,64r:0)[3056r,3104r:3)[3392r,3416r:2)[3648r,3680r:1)  0@0B-phi 1@3648r 2@3392r 3@3056r
SIL [0B,80r:0)[3040r,3104r:3)[3384r,3416r:2)[3632r,3680r:1)  0@0B-phi 1@3632r 2@3384r 3@3040r
SIH [0B,80r:0)[3040r,3104r:3)[3384r,3416r:2)[3632r,3680r:1)  0@0B-phi 1@3632r 2@3384r 3@3040r
HSI [0B,80r:0)[3040r,3104r:3)[3384r,3416r:2)[3632r,3680r:1)  0@0B-phi 1@3632r 2@3384r 3@3040r
R8B [0B,32r:0)[3088r,3104r:1)[3376r,3416r:2)  0@0B-phi 1@3088r 2@3376r
R8BH [0B,32r:0)[3088r,3104r:1)[3376r,3416r:2)  0@0B-phi 1@3088r 2@3376r
R8WH [0B,32r:0)[3088r,3104r:1)[3376r,3416r:2)  0@0B-phi 1@3088r 2@3376r
R9B [0B,16r:0)[3408r,3416r:1)  0@0B-phi 1@3408r
R9BH [0B,16r:0)[3408r,3416r:1)  0@0B-phi 1@3408r
R9WH [0B,16r:0)[3408r,3416r:1)  0@0B-phi 1@3408r
%1 [240r,2752B:0)  0@240r weight:0.000000e+00
%6 [96r,272r:0)  0@96r weight:0.000000e+00
%7 [80r,288r:0)  0@80r weight:0.000000e+00
%8 [64r,304r:0)  0@64r weight:0.000000e+00
%9 [48r,240r:0)  0@48r weight:0.000000e+00
%10 [32r,208r:0)  0@32r weight:0.000000e+00
%11 [16r,192r:0)  0@16r weight:0.000000e+00
%17 [544r,576r:0)[576r,592r:1)  0@544r 1@576r weight:0.000000e+00
%20 [2928r,3024r:0)  0@2928r weight:0.000000e+00
%21 [2944r,3040r:0)  0@2944r weight:0.000000e+00
%22 [2960r,3056r:0)  0@2960r weight:0.000000e+00
%23 [2976r,3072r:0)  0@2976r weight:0.000000e+00
%24 [2992r,3088r:0)  0@2992r weight:0.000000e+00
%25 [3200r,3380r:0)  0@3200r weight:0.000000e+00
%26 [3216r,3384r:0)  0@3216r weight:0.000000e+00
%27 [3232r,3392r:0)  0@3232r weight:0.000000e+00
%28 [3248r,3400r:0)  0@3248r weight:0.000000e+00
%29 [3264r,3408r:0)  0@3264r weight:0.000000e+00
%31 [3456r,3472r:0)  0@3456r weight:0.000000e+00
%33 [3536r,3616r:0)  0@3536r weight:0.000000e+00
%34 [3552r,3632r:0)  0@3552r weight:0.000000e+00
%35 [3568r,3648r:0)  0@3568r weight:0.000000e+00
%36 [3584r,3664r:0)  0@3584r weight:0.000000e+00
%39 [688r,720r:0)[720r,736r:1)  0@688r 1@720r weight:0.000000e+00
%41 [832r,848r:0)  0@832r weight:0.000000e+00
%45 [1808r,1840r:0)[1840r,1856r:1)  0@1808r 1@1840r weight:0.000000e+00
%50 [1920r,1952r:2)[1952r,1984r:0)[1984r,2576r:1)[2576r,2592r:3)  0@1952r 1@1984r 2@1920r 3@2576r weight:0.000000e+00
%51 [2000r,2032r:0)[2032r,2096r:1)  0@2000r 1@2032r weight:0.000000e+00
%53 [2048r,2080r:0)[2080r,2592r:1)  0@2048r 1@2080r weight:0.000000e+00
%54 [2096r,2128r:0)  0@2096r weight:0.000000e+00
%55 [2112r,2608r:0)  0@2112r weight:0.000000e+00
%57 [2144r,2512r:0)  0@2144r weight:0.000000e+00
%62 [2176r,2208r:0)[2208r,2224r:1)  0@2176r 1@2208r weight:0.000000e+00
%64 [2224r,2256r:0)  0@2224r weight:0.000000e+00
%65 [2160r,2256r:0)[2256r,2288r:1)  0@2160r 1@2256r weight:0.000000e+00
%70 [2320r,2352r:2)[2352r,2384r:0)[2384r,2416r:1)[2416r,2448r:3)  0@2352r 1@2384r 2@2320r 3@2416r weight:0.000000e+00
%72 [2128r,2288r:2)[2288r,2448r:0)[2448r,2544r:1)[2544r,2608r:3)  0@2288r 1@2448r 2@2128r 3@2544r weight:0.000000e+00
%74 [2304r,2480r:2)[2480r,2512r:0)[2512r,2544r:1)  0@2480r 1@2512r 2@2304r weight:0.000000e+00
%81 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%82 [912r,1424r:0)  0@912r weight:0.000000e+00
%83 [208r,512r:0)[512r,2752B:1)  0@208r 1@512r weight:0.000000e+00
%85 [944r,960r:0)[960r,976r:1)  0@944r 1@960r weight:0.000000e+00
%86 [976r,1168r:0)  0@976r weight:0.000000e+00
%89 [1008r,1040r:0)[1040r,1584r:1)  0@1008r 1@1040r weight:0.000000e+00
%90 [1056r,1104r:0)  0@1056r weight:0.000000e+00
%95 [1120r,1152r:0)[1152r,1632r:1)  0@1120r 1@1152r weight:0.000000e+00
%96 [1168r,1200r:0)  0@1168r weight:0.000000e+00
%98 [992r,1232r:0)[1232r,1440r:1)  0@992r 1@1232r weight:0.000000e+00
%100 [1248r,1280r:0)[1280r,1296r:1)  0@1248r 1@1280r weight:0.000000e+00
%101 [1296r,1536r:0)  0@1296r weight:0.000000e+00
%102 [1312r,1344r:0)  0@1312r weight:0.000000e+00
%103 [1104r,1200r:2)[1200r,1344r:0)[1344r,1472r:1)[1472r,1488r:3)  0@1200r 1@1344r 2@1104r 3@1472r weight:0.000000e+00
%105 [928r,1376r:2)[1376r,1408r:0)[1408r,1424r:1)  0@1376r 1@1408r 2@928r weight:0.000000e+00
%106 [1424r,1632r:0)  0@1424r weight:0.000000e+00
%107 [1440r,1472r:0)  0@1440r weight:0.000000e+00
%109 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%111 [1536r,1568r:0)  0@1536r weight:0.000000e+00
%113 [1584r,1616r:0)  0@1584r weight:0.000000e+00
%114 [1520r,1568r:2)[1568r,1616r:0)[1616r,1664r:1)[1664r,1680r:3)  0@1568r 1@1616r 2@1520r 3@1664r weight:0.000000e+00
%115 [1632r,1664r:0)  0@1632r weight:0.000000e+00
%117 [1712r,1728r:0)  0@1712r weight:0.000000e+00
%118 [1072r,1712r:0)  0@1072r weight:0.000000e+00
RegMasks: 432r 2880r 3104r 3416r 3680r
********** MACHINEINSTRS **********
# Machine code for function resid: NoPHIs, TracksLiveness
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=2072, align=16, at location [SP+8]
  fi#15: size=2072, align=16, at location [SP+8]
Function Live Ins: $rdi in %6, $rsi in %7, $rdx in %8, $ecx in %9, $r8d in %10, $r9d in %11

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $rdi, $rsi, $rdx, $ecx, $r8d, $r9d
16B	  %11:gr32 = COPY $r9d
32B	  %10:gr32 = COPY $r8d
48B	  %9:gr32 = COPY $ecx
64B	  %8:gr64 = COPY $rdx
80B	  %7:gr64 = COPY $rsi
96B	  %6:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.ou.addr)
128B	  MOV64mr %stack.1.ov.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.ov.addr)
144B	  MOV64mr %stack.2.or.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.or.addr)
160B	  MOV32mr %stack.3.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
176B	  MOV32mr %stack.4.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
192B	  MOV32mr %stack.5.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
208B	  undef %83.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
240B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
272B	  MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.u)
288B	  MOV64mr %stack.9.v, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.v)
304B	  MOV64mr %stack.10.r, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.r)
320B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
336B	  JCC_1 %bb.2, 4, implicit killed $eflags
352B	  JMP_1 %bb.1

368B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
416B	  $edi = MOV32ri 4
432B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

464B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

480B	  MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
512B	  %83:gr64_with_sub_8bit = nuw IMUL64rr %83:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

528B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.13
	  successors: %bb.4(0x7c000000), %bb.14(0x04000000); %bb.4(96.88%), %bb.14(3.12%)

544B	  %17:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
576B	  %17:gr32 = DEC32r %17:gr32(tied-def 0), implicit-def dead $eflags
592B	  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
608B	  JCC_1 %bb.14, 13, implicit killed $eflags
624B	  JMP_1 %bb.4

640B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

656B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

672B	bb.5.for.cond1:
	; predecessors: %bb.4, %bb.12
	  successors: %bb.6(0x7c000000), %bb.13(0x04000000); %bb.6(96.88%), %bb.13(3.12%)

688B	  %39:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
720B	  %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
736B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
752B	  JCC_1 %bb.13, 13, implicit killed $eflags
768B	  JMP_1 %bb.6

784B	bb.6.for.body4:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

816B	bb.7.for.cond5:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

832B	  %41:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
848B	  CMP32rm %41:gr32, %stack.3.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
864B	  JCC_1 %bb.9, 13, implicit killed $eflags
880B	  JMP_1 %bb.8

896B	bb.8.for.body7:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

912B	  %82:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
928B	  %105:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
944B	  %85:gr64_nosp = COPY %105:gr64_nosp
960B	  %85:gr64_nosp = nsw IMUL64rr %85:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
976B	  %86:gr64 = LEA64r %82:gr64, 8, %85:gr64_nosp, 0, $noreg
992B	  %98:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1008B	  %89:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, -1, $noreg
1040B	  %89:gr64_nosp = nsw IMUL64rr %89:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1056B	  %90:gr64 = LEA64r %86:gr64, 8, %89:gr64_nosp, 0, $noreg
1072B	  %118:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1104B	  %103:fr64 = MOVSDrm_alt %90:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
1120B	  %95:gr64_nosp = LEA64r %98:gr64_nosp, 1, $noreg, 1, $noreg
1152B	  %95:gr64_nosp = nsw IMUL64rr %95:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1168B	  %96:gr64 = LEA64r %86:gr64, 8, %95:gr64_nosp, 0, $noreg
1200B	  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %96:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
1232B	  %98:gr64_nosp = nsw IMUL64rr %98:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1248B	  %100:gr64_nosp = LEA64r %105:gr64_nosp, 1, $noreg, -1, $noreg
1280B	  %100:gr64_nosp = nsw IMUL64rr %100:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
1296B	  %101:gr64 = LEA64r %82:gr64, 8, %100:gr64_nosp, 0, $noreg
1312B	  %102:gr64 = LEA64r %101:gr64, 8, %98:gr64_nosp, 0, $noreg
1344B	  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %102:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
1376B	  %105:gr64_nosp = nsw INC64r %105:gr64_nosp(tied-def 0), implicit-def dead $eflags
1408B	  %105:gr64_nosp = nsw IMUL64rr %105:gr64_nosp(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
1424B	  %106:gr64 = LEA64r %82:gr64, 8, %105:gr64_nosp, 0, $noreg
1440B	  %107:gr64 = LEA64r %106:gr64, 8, %98:gr64_nosp, 0, $noreg
1472B	  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %107:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
1488B	  MOVSDmr %stack.14.u1, 8, %118:gr64_nosp, 0, $noreg, %103:fr64 :: (store 8 into %ir.arrayidx37)
1504B	  %109:gr64 = LEA64r %101:gr64, 8, %89:gr64_nosp, 0, $noreg
1520B	  %114:fr64 = MOVSDrm_alt %109:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
1536B	  %111:gr64 = LEA64r %101:gr64, 8, %95:gr64_nosp, 0, $noreg
1568B	  %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %111:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
1584B	  %113:gr64 = LEA64r %106:gr64, 8, %89:gr64_nosp, 0, $noreg
1616B	  %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %113:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
1632B	  %115:gr64 = LEA64r %106:gr64, 8, %95:gr64_nosp, 0, $noreg
1664B	  %114:fr64 = ADDSDrm %114:fr64(tied-def 0), %115:gr64, 8, %118:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
1680B	  MOVSDmr %stack.15.u2, 8, %118:gr64_nosp, 0, $noreg, %114:fr64 :: (store 8 into %ir.arrayidx74)
1712B	  %117:gr32 = LEA64_32r %118:gr64_nosp, 1, $noreg, 1, $noreg
1728B	  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %117:gr32 :: (store 4 into %ir.i1)
1744B	  JMP_1 %bb.7

1760B	bb.9.for.end:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1776B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

1792B	bb.10.for.cond75:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1808B	  %45:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
1840B	  %45:gr32 = DEC32r %45:gr32(tied-def 0), implicit-def dead $eflags
1856B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
1872B	  JCC_1 %bb.12, 13, implicit killed $eflags
1888B	  JMP_1 %bb.11

1904B	bb.11.for.body78:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1920B	  %50:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1952B	  %50:gr64 = nsw IMUL64rr %50:gr64(tied-def 0), %83:gr64_with_sub_8bit, implicit-def dead $eflags
1984B	  %50:gr64 = SHL64ri %50:gr64(tied-def 0), 3, implicit-def dead $eflags
2000B	  %51:gr64 = MOV64rm %stack.9.v, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v)
2032B	  %51:gr64 = ADD64rr %51:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
2048B	  %53:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2080B	  %53:gr64_nosp = nsw IMUL64rr %53:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2096B	  %54:gr64 = LEA64r %51:gr64, 8, %53:gr64_nosp, 0, $noreg
2112B	  %55:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2128B	  %72:fr64 = MOVSDrm_alt %54:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
2144B	  %57:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.a.addr, align 16)
2160B	  %65:fr64 = MOVSDrm_alt %57:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
2176B	  %62:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
2208B	  %62:gr64 = ADD64rr %62:gr64(tied-def 0), %50:gr64, implicit-def dead $eflags
2224B	  %64:gr64 = LEA64r %62:gr64, 8, %53:gr64_nosp, 0, $noreg
2256B	  %65:fr64 = MULSDrm %65:fr64(tied-def 0), %64:gr64, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
2288B	  %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %65:fr64
2304B	  %74:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx109)
2320B	  %70:fr64 = MOVSDrm_alt %stack.15.u2, 8, %55:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx95)
2352B	  %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx98)
2384B	  %70:fr64 = ADDSDrm %70:fr64(tied-def 0), %stack.14.u1, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx102)
2416B	  %70:fr64 = MULSDrm %70:fr64(tied-def 0), %57:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx93)
2448B	  %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %70:fr64
2480B	  %74:fr64 = ADDSDrm %74:fr64(tied-def 0), %stack.15.u2, 8, %55:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx112)
2512B	  %74:fr64 = MULSDrm %74:fr64(tied-def 0), %57:gr64, 1, $noreg, 24, $noreg :: (load 8 from %ir.arrayidx106)
2544B	  %72:fr64 = SUBSDrr %72:fr64(tied-def 0), %74:fr64
2576B	  %50:gr64 = ADD64rm %50:gr64(tied-def 0), %stack.10.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
2592B	  %81:gr64 = LEA64r %50:gr64, 8, %53:gr64_nosp, 0, $noreg
2608B	  MOVSDmr %81:gr64, 8, %55:gr64_nosp, 0, $noreg, %72:fr64 :: (store 8 into %ir.arrayidx121)
2624B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
2640B	  JMP_1 %bb.10

2656B	bb.12.for.end124:
	; predecessors: %bb.10
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

2672B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
2688B	  JMP_1 %bb.5

2704B	bb.13.for.end127:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

2720B	  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
2736B	  JMP_1 %bb.3

2752B	bb.14.for.end130:
	; predecessors: %bb.3
	  successors: %bb.15(0x50000000), %bb.16(0x30000000); %bb.15(62.50%), %bb.16(37.50%)

2768B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
2784B	  JCC_1 %bb.16, 4, implicit killed $eflags
2800B	  JMP_1 %bb.15

2816B	bb.15.if.then132:
	; predecessors: %bb.14
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2864B	  $edi = MOV32ri 4
2880B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
2896B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

2912B	bb.16.if.end133:
	; predecessors: %bb.14, %bb.15
	  successors: %bb.17(0x40000000), %bb.18(0x40000000); %bb.17(50.00%), %bb.18(50.00%)

2928B	  %20:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
2944B	  %21:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
2960B	  %22:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
2976B	  %23:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
2992B	  %24:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
3008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3024B	  $rdi = COPY %20:gr64
3040B	  $esi = COPY %21:gr32
3056B	  $edx = COPY %22:gr32
3072B	  $ecx = COPY %23:gr32
3088B	  $r8d = COPY %24:gr32
3104B	  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
3120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3136B	  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
3152B	  JCC_1 %bb.18, 14, implicit killed $eflags
3168B	  JMP_1 %bb.17

3184B	bb.17.if.then135:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3200B	  %25:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
3216B	  %26:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
3232B	  %27:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
3248B	  %28:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
3264B	  %29:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 8)
3280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3376B	  $r8 = MOV32ri64 @.str.58
3380B	  $rdi = COPY %25:gr64
3384B	  $esi = COPY %26:gr32
3392B	  $edx = COPY %27:gr32
3400B	  $ecx = COPY %28:gr32
3408B	  $r9d = COPY %29:gr32
3416B	  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
3424B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

3440B	bb.18.if.end136:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x40000000), %bb.20(0x40000000); %bb.19(50.00%), %bb.20(50.00%)

3456B	  %31:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 8, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 2)`, align 8)
3472B	  CMP32rm %31:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 8)
3488B	  JCC_1 %bb.20, 12, implicit killed $eflags
3504B	  JMP_1 %bb.19

3520B	bb.19.if.then138:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3536B	  %33:gr64 = MOV64rm %stack.10.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
3552B	  %34:gr32 = MOV32rm %stack.3.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
3568B	  %35:gr32 = MOV32rm %stack.4.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
3584B	  %36:gr32 = MOV32rm %stack.5.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
3600B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3616B	  $rdi = COPY %33:gr64
3632B	  $esi = COPY %34:gr32
3648B	  $edx = COPY %35:gr32
3664B	  $ecx = COPY %36:gr32
3680B	  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
3696B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

3712B	bb.20.if.end139:
	; predecessors: %bb.18, %bb.19

3728B	  RET 0

# End machine code for function resid.

Before MISched:
# Machine code for function mg3P: NoPHIs, TracksLiveness
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8 in %4, $r9d in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9d
  %5:gr32 = COPY $r9d
  %4:gr64 = COPY $r8
  %3:gr64 = COPY $rcx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
  MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
  MOV64mr %stack.2.r.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.r.addr)
  MOV64mr %stack.3.a.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.4.c.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.c.addr)
  MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n1.addr)
  %6:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.k)

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %9:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  %9:gr32 = nsw INC32r %9:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %113:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %113:gr32 = DEC32r %113:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %113:gr32 :: (store 4 into %ir.j)
  %114:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  %130:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %117:gr64_nosp = MOVSX64rm32 $noreg, 4, %130:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx)
  %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
  %119:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx4)
  %120:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx6)
  %121:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx8)
  %122:gr64_nosp = MOVSX64rr32 %113:gr32
  %123:gr64_nosp = MOVSX64rm32 $noreg, 4, %122:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx10)
  %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
  %125:gr32 = MOV32rm $noreg, 4, %122:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx14)
  undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx16)
  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx18)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %118:gr64
  $esi = COPY %119:gr32
  $edx = COPY %120:gr32
  $ecx = COPY %121:gr32
  $r8 = COPY %124:gr64
  $r9d = COPY %125:gr32
  PUSH64r %130:gr64_nosp, implicit-def $rsp, implicit $rsp
  PUSH64r %132:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %134:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @rprj3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  DEC32m %stack.9.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
  JMP_1 %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %11:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %11.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
  %15:gr64 = MOVSX64rm32 $noreg, 4, %11:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx20)
  %15:gr64 = SHL64ri %15:gr64(tied-def 0), 3, implicit-def dead $eflags
  %15:gr64 = ADD64rm %15:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  %16:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx24)
  %17:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx26)
  %18:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx28)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %15:gr64
  $esi = COPY %16:gr32
  $edx = COPY %17:gr32
  $ecx = COPY %18:gr32
  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %136:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %24:gr64 = MOVSX64rm32 $noreg, 4, %136:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx34)
  %24:gr64 = SHL64ri %24:gr64(tied-def 0), 3, implicit-def dead $eflags
  %23:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
  %24:gr64 = ADD64rm %24:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  %25:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx38)
  %26:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx40)
  %27:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx42)
  %28:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $rsi = COPY %24:gr64
  $edx = COPY %25:gr32
  $ecx = COPY %26:gr32
  $r8d = COPY %27:gr32
  $r9 = COPY %28:gr64
  PUSH64r %136:gr64_nosp, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @psinv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %31:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.k)

bb.4.for.cond44:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %34:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  JCC_1 %bb.6, 15, implicit killed $eflags
  JMP_1 %bb.5

bb.5.for.body47:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %67:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %67:gr32 = DEC32r %67:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.j)
  %68:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %71:gr64 = MOVSX64rm32 $noreg, 4, %68:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx50)
  %71:gr64 = SHL64ri %71:gr64(tied-def 0), 3, implicit-def dead $eflags
  %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  %72:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx54)
  %73:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx56)
  %74:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx58)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %71:gr64
  $esi = COPY %72:gr32
  $edx = COPY %73:gr32
  $ecx = COPY %74:gr32
  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %75:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  %76:gr64_nosp = MOVSX64rm32 %stack.8.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
  %77:gr64_nosp = MOVSX64rm32 $noreg, 4, %76:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx60)
  %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
  %79:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx64)
  %80:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx66)
  %81:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx68)
  %138:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %84:gr64_nosp = MOVSX64rm32 $noreg, 4, %138:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx70)
  %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
  %86:gr32 = MOV32rm $noreg, 4, %138:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx74)
  undef %142.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx76)
  undef %140.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx78)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %78:gr64
  $esi = COPY %79:gr32
  $edx = COPY %80:gr32
  $ecx = COPY %81:gr32
  $r8 = COPY %85:gr64
  $r9d = COPY %86:gr32
  PUSH64r %138:gr64_nosp, implicit-def $rsp, implicit $rsp
  PUSH64r %140:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %142:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @interp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %144:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %95:gr64 = MOVSX64rm32 $noreg, 4, %144:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx88)
  %95:gr64 = SHL64ri %95:gr64(tied-def 0), 3, implicit-def dead $eflags
  %94:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
  %95:gr64 = ADD64rm %95:gr64(tied-def 0), %stack.2.r.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r.addr)
  %96:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx92)
  %97:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx94)
  %98:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx96)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %94:gr64
  $rsi = COPY %95:gr64
  $rdx = COPY %95:gr64
  $ecx = COPY %96:gr32
  $r8d = COPY %97:gr32
  $r9d = COPY %98:gr32
  PUSH64r %144:gr64_nosp, implicit-def $rsp, implicit $rsp
  PUSH64rmm %stack.3.a.addr, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %146:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  %106:gr64 = MOVSX64rm32 $noreg, 4, %146:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx102)
  %106:gr64 = SHL64ri %106:gr64(tied-def 0), 3, implicit-def dead $eflags
  %105:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
  %106:gr64 = ADD64rm %106:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  %107:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx106)
  %108:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx108)
  %109:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx110)
  %110:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %105:gr64
  $rsi = COPY %106:gr64
  $edx = COPY %107:gr32
  $ecx = COPY %108:gr32
  $r8d = COPY %109:gr32
  $r9 = COPY %110:gr64
  PUSH64r %146:gr64_nosp, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @psinv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.9.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
  JMP_1 %bb.4

bb.6.for.end112:
; predecessors: %bb.4

  undef %148.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  %37:gr32 = LEA64_32r %148:gr64_nosp, 1, $noreg, -1, $noreg
  MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %37:gr32 :: (store 4 into %ir.j)
  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %148.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
  %38:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  %39:gr64_nosp = MOVSX64rr32 %37:gr32
  %40:gr64_nosp = MOVSX64rm32 $noreg, 4, %39:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx115)
  %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
  %42:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx119)
  %43:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx121)
  %44:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx123)
  %45:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  undef %152.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  undef %150.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %41:gr64
  $esi = COPY %42:gr32
  $edx = COPY %43:gr32
  $ecx = COPY %44:gr32
  $r8 = COPY %38:gr64
  $r9d = COPY %45:gr32
  PUSH64r %148:gr64_nosp, implicit-def $rsp, implicit $rsp
  PUSH64r %150:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %152:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @interp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %49:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  %50:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v.addr)
  %51:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  %52:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %53:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  %54:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %49:gr64
  $rsi = COPY %50:gr64
  $rdx = COPY %51:gr64
  $ecx = COPY %52:gr32
  $r8d = COPY %53:gr32
  $r9d = COPY %54:gr32
  PUSH64r %154:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64rmm %stack.3.a.addr, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %58:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  %59:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  %60:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %61:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  %62:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  %63:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %58:gr64
  $rsi = COPY %59:gr64
  $edx = COPY %60:gr32
  $ecx = COPY %61:gr32
  $r8d = COPY %62:gr32
  $r9 = COPY %63:gr64
  PUSH64r %156:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @psinv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  RET 0

# End machine code for function mg3P.

********** MI Scheduling **********
mg3P:%bb.0 entry
  From: %5:gr32 = COPY $r9d
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %4:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.r.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.r.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.a.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.c.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.c.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %6:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(13): Data Latency=4 Reg=%6
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(12): Data Latency=4 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.k)
Bottom Pressure:
GR16=2
  LiveReg: %6
  UpdateRegP: SU(13) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.k)
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 12 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %6:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(12) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(11) MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n1.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 10 9 8 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.c.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.c.addr)
Bottom Pressure:
GR16=4
  LiveReg: %4
  UpdateRegP: SU(10) MOV64mr %stack.4.c.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.c.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 9 8 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.a.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(9) MOV64mr %stack.3.a.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 1 8 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.r.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.r.addr)
Bottom Pressure:
GR16=8
  LiveReg: %2
  UpdateRegP: SU(8) MOV64mr %stack.2.r.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.r.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 1 2 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
Bottom Pressure:
GR16=10
  LiveReg: %1
  UpdateRegP: SU(7) MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 0 1 2 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
Bottom Pressure:
GR16=12
  LiveReg: %0
  UpdateRegP: SU(6) MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 2 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 1 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr32 = COPY $r9d
SU(1):   %4:gr64 = COPY $r8
SU(2):   %3:gr64 = COPY $rcx
SU(3):   %2:gr64 = COPY $rdx
SU(4):   %1:gr64 = COPY $rsi
SU(5):   %0:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
SU(7):   MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
SU(8):   MOV64mr %stack.2.r.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.r.addr)
SU(9):   MOV64mr %stack.3.a.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.a.addr)
SU(10):   MOV64mr %stack.4.c.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.c.addr)
SU(11):   MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n1.addr)
SU(12):   %6:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(13):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
mg3P:%bb.1 for.cond
  From: %9:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
    To: JCC_1 %bb.3, 12, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%9
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %9:gr32 = nsw INC32r %9:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%9
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%9
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.3, 12, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %9:gr32 = nsw INC32r %9:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %9:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
SU(1):   %9:gr32 = nsw INC32r %9:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
mg3P:%bb.2 for.body
  From: $rdi = COPY %118:gr64
    To: PUSH64r %130:gr64_nosp, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %118:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %119:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %120:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %121:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = COPY %124:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %125:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %130:gr64_nosp, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %125:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = COPY %124:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %121:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %120:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %119:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %118:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = COPY %118:gr64
SU(1):   $esi = COPY %119:gr32
SU(2):   $edx = COPY %120:gr32
SU(3):   $ecx = COPY %121:gr32
SU(4):   $r8 = COPY %124:gr64
SU(5):   $r9d = COPY %125:gr32

********** MI Scheduling **********
mg3P:%bb.2 for.body
  From: %113:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=18
Live In: 
Live Out: %132 %134 %125 %124 %121 %130 %120 %119 %118 
Live Thru: 
  LiveReg: %132
  LiveReg: %134
  LiveReg: %125
  LiveReg: %124
  LiveReg: %121
  LiveReg: %130
  UpdateRegP: SU(5) %117:gr64_nosp = MOVSX64rm32 $noreg, 4, %130:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx)
              to GR16 -2
  UpdateRegP: SU(7) %119:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx4)
              to GR16 -2
  UpdateRegP: SU(8) %120:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx6)
              to GR16 -2
  UpdateRegP: SU(9) %121:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx8)
              to GR16 -2
  LiveReg: %120
  LiveReg: %119
  LiveReg: %118
Top Pressure:

Bottom Pressure:
GR16=18
Excess PSets: 
SU(0):   %113:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%113
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %113:gr32 = DEC32r %113:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
    SU(0): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%113
    SU(2): Data Latency=1 Reg=%113
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %113:gr32 :: (store 4 into %ir.j)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%113
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %114:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(12): Data Latency=4 Reg=%114
    SU(6): Data Latency=4 Reg=%114
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %130:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(9): Data Latency=4 Reg=%130
    SU(8): Data Latency=4 Reg=%130
    SU(7): Data Latency=4 Reg=%130
    SU(5): Data Latency=4 Reg=%130
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %117:gr64_nosp = MOVSX64rm32 $noreg, 4, %130:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%130
  Successors:
    SU(6): Data Latency=4 Reg=%117
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%117
    SU(3): Data Latency=4 Reg=%114
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %119:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%130
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %120:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%130
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %121:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%130
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %122:gr64_nosp = MOVSX64rr32 %113:gr32
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%113
  Successors:
    SU(15): Data Latency=1 Reg=%122
    SU(14): Data Latency=1 Reg=%122
    SU(13): Data Latency=1 Reg=%122
    SU(11): Data Latency=1 Reg=%122
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %123:gr64_nosp = MOVSX64rm32 $noreg, 4, %122:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
  Successors:
    SU(12): Data Latency=4 Reg=%123
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=%123
    SU(3): Data Latency=4 Reg=%114
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %125:gr32 = MOV32rm $noreg, 4, %122:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx14)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx16)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx18)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%122
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=3 Artificial
    SU(14): Ord  Latency=3 Artificial
    SU(13): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 2 15 14 13 9 8 7 
  Cand SU(12) ORDER                              
  Cand SU(15) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(15) undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx18)
Bottom Pressure:
GR16=18
  LiveReg: %122
  UpdateRegP: SU(11) %123:gr64_nosp = MOVSX64rm32 $noreg, 4, %122:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx10)
              to GR16 -2
  UpdateRegP: SU(13) %125:gr32 = MOV32rm $noreg, 4, %122:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx14)
              to GR16 -2
  UpdateRegP: SU(14) undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx16)
              to GR16 -2
  UpdateRegP: SU(15) undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx18)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(15) 6c
  BotQ.A BotLatency SU(15) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 2 7 14 13 9 8 
  Cand SU(12) ORDER                              
  Cand SU(7) REG-MAX                            
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx16)
Bottom Pressure:
GR16=16
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 2 7 8 13 9 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %125:gr32 = MOV32rm $noreg, 4, %122:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx14)
Bottom Pressure:
GR16=14
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 6 2 7 8 9 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=16
  LiveReg: %114
  UpdateRegP: SU(6) %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(12) %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
              to 
  LiveReg: %123
  UpdateRegP: SU(12) %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @0c
  BotQ.A TopLatency SU(12) 10c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 6 2 7 8 11 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %123:gr64_nosp = MOVSX64rm32 $noreg, 4, %122:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx10)
Bottom Pressure:
GR16=14
  Ready @4c
  BotQ.A BotLatency SU(11) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 6 2 7 8 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %122:gr64_nosp = MOVSX64rr32 %113:gr32
Bottom Pressure:
GR16=14
  LiveReg: %113
  UpdateRegP: SU(2) MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %113:gr32 :: (store 4 into %ir.j)
              to 
  UpdateRegP: SU(10) %122:gr64_nosp = MOVSX64rr32 %113:gr32
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(10) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 6 2 7 8 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %121:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx8)
Bottom Pressure:
GR16=12
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 2 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %120:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx6)
Bottom Pressure:
GR16=10
  Ready @3c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %119:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx4)
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %117
  UpdateRegP: SU(6) %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %117:gr64_nosp = MOVSX64rm32 $noreg, 4, %130:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx)
Bottom Pressure:
GR16=6
  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %130:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GR16=4
  Ready @10c
  BotQ.A BotLatency SU(4) 8c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %114:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
GR16=2
  Ready @6c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %113:gr32 :: (store 4 into %ir.j)
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %113:gr32 = DEC32r %113:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %113
  UpdateRegP: SU(1) %113:gr32 = DEC32r %113:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @6c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %113:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %113:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %113:gr32 = DEC32r %113:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %113:gr32 :: (store 4 into %ir.j)
SU(3):   %114:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
SU(4):   %130:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(5):   %117:gr64_nosp = MOVSX64rm32 $noreg, 4, %130:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx)
SU(6):   %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
SU(7):   %119:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx4)
SU(8):   %120:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx6)
SU(9):   %121:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx8)
SU(10):   %122:gr64_nosp = MOVSX64rr32 %113:gr32
SU(11):   %123:gr64_nosp = MOVSX64rm32 $noreg, 4, %122:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx10)
SU(12):   %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
SU(13):   %125:gr32 = MOV32rm $noreg, 4, %122:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx14)
SU(14):   undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx16)
SU(15):   undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx18)

********** MI Scheduling **********
mg3P:%bb.3 for.end
  From: %31:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%31
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(2):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%31
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %31:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
SU(1):   %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.k)

********** MI Scheduling **********
mg3P:%bb.3 for.end
  From: $rdi = COPY %23:gr64
    To: PUSH64r %136:gr64_nosp, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %23:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = COPY %24:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %25:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %26:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %27:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = COPY %28:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %136:gr64_nosp, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = COPY %28:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %27:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %26:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %25:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %24:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %23:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = COPY %23:gr64
SU(1):   $rsi = COPY %24:gr64
SU(2):   $edx = COPY %25:gr32
SU(3):   $ecx = COPY %26:gr32
SU(4):   $r8d = COPY %27:gr32
SU(5):   $r9 = COPY %28:gr64

********** MI Scheduling **********
mg3P:%bb.3 for.end
  From: %136:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=14
Live In: 
Live Out: %28 %27 %136 %26 %25 %24 %23 
Live Thru: 
  LiveReg: %28
  LiveReg: %27
  LiveReg: %136
  UpdateRegP: SU(1) %24:gr64 = MOVSX64rm32 $noreg, 4, %136:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx34)
              to GR16 -2
  UpdateRegP: SU(6) %25:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx38)
              to GR16 -2
  UpdateRegP: SU(7) %26:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx40)
              to GR16 -2
  UpdateRegP: SU(8) %27:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx42)
              to GR16 -2
  LiveReg: %26
  LiveReg: %25
  LiveReg: %24
  LiveReg: %23
Top Pressure:

Bottom Pressure:
GR16=14
Excess PSets: 
SU(0):   %136:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(8): Data Latency=4 Reg=%136
    SU(7): Data Latency=4 Reg=%136
    SU(6): Data Latency=4 Reg=%136
    SU(1): Data Latency=4 Reg=%136
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %24:gr64 = MOVSX64rm32 $noreg, 4, %136:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx34)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%136
  Successors:
    SU(2): Data Latency=4 Reg=%24
    SU(2): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %24:gr64 = SHL64ri %24:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%24
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%24
    SU(4): Data Latency=1 Reg=%24
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %23:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%23
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%24
    SU(3): Out  Latency=0
    SU(3): Data Latency=4 Reg=%23
  Successors:
    SU(5): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %24:gr64 = ADD64rm %24:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=%24
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %25:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx38)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %26:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx40)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %27:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx42)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %28:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %28:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
Bottom Pressure:
GR16=12
  Ready @3c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 7 6 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %27:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx42)
Bottom Pressure:
GR16=10
  Ready @3c
  BotQ.A TopLatency SU(8) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %26:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx40)
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %25:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx38)
Bottom Pressure:
GR16=6
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %24:gr64 = ADD64rm %24:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GR16=6
  LiveReg: %24
  UpdateRegP: SU(4) %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(5) %24:gr64 = ADD64rm %24:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %23
  UpdateRegP: SU(4) %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %23:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %24:gr64 = SHL64ri %24:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %24
  UpdateRegP: SU(2) %24:gr64 = SHL64ri %24:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %24:gr64 = MOVSX64rm32 $noreg, 4, %136:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx34)
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %136:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %136:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %24:gr64 = MOVSX64rm32 $noreg, 4, %136:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx34)
SU(2):   %24:gr64 = SHL64ri %24:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %23:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
SU(4):   %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
SU(5):   %24:gr64 = ADD64rm %24:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
SU(6):   %25:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx38)
SU(7):   %26:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx40)
SU(8):   %27:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx42)
SU(9):   %28:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)

********** MI Scheduling **********
mg3P:%bb.3 for.end
  From: $rdi = COPY %15:gr64
    To: CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %15:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %16:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %17:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %18:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %18:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %17:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %16:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %15:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = COPY %15:gr64
SU(1):   $esi = COPY %16:gr32
SU(2):   $edx = COPY %17:gr32
SU(3):   $ecx = COPY %18:gr32

********** MI Scheduling **********
mg3P:%bb.3 for.end
  From: %11:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: %18 %17 %16 %15 
Live Thru: 
  LiveReg: %18
  LiveReg: %17
  LiveReg: %16
  LiveReg: %15
Top Pressure:

Bottom Pressure:
GR16=8
Excess PSets: 
SU(0):   %11:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%11
    SU(6): Data Latency=4 Reg=%11
    SU(5): Data Latency=4 Reg=%11
    SU(2): Data Latency=4 Reg=%11
    SU(1): Data Latency=4 Reg=%11
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %11.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %15:gr64 = MOVSX64rm32 $noreg, 4, %11:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx20)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Successors:
    SU(3): Data Latency=4 Reg=%15
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %15:gr64 = SHL64ri %15:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%15
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%15
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %15:gr64 = ADD64rm %15:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%15
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %16:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx24)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %17:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx26)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %18:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx28)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 6 5 4 
  Cand SU(1) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %18:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx28)
Bottom Pressure:
GR16=8
  LiveReg: %11
  UpdateRegP: SU(1) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %11.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
              to 
  UpdateRegP: SU(2) %15:gr64 = MOVSX64rm32 $noreg, 4, %11:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx20)
              to GR16 -2
  UpdateRegP: SU(5) %16:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx24)
              to GR16 -2
  UpdateRegP: SU(6) %17:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx26)
              to GR16 -2
  UpdateRegP: SU(7) %18:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx28)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(7) 4c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 6 5 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %17:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx26)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 5 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %16:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx24)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %15:gr64 = ADD64rm %15:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GR16=4
  LiveReg: %15
  UpdateRegP: SU(4) %15:gr64 = ADD64rm %15:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %15:gr64 = SHL64ri %15:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %15
  UpdateRegP: SU(3) %15:gr64 = SHL64ri %15:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %15:gr64 = MOVSX64rm32 $noreg, 4, %11:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx20)
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %11.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %11:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
SU(1):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %11.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
SU(2):   %15:gr64 = MOVSX64rm32 $noreg, 4, %11:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx20)
SU(3):   %15:gr64 = SHL64ri %15:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %15:gr64 = ADD64rm %15:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
SU(5):   %16:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx24)
SU(6):   %17:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx26)
SU(7):   %18:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx28)

********** MI Scheduling **********
mg3P:%bb.4 for.cond44
  From: %34:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: JCC_1 %bb.6, 15, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %34:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%34
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%34
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%34
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%34
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %34:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: $rdi = COPY %105:gr64
    To: PUSH64r %146:gr64_nosp, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %105:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = COPY %106:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %107:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %108:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %109:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = COPY %110:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %146:gr64_nosp, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = COPY %110:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %109:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %108:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %107:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %106:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %105:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = COPY %105:gr64
SU(1):   $rsi = COPY %106:gr64
SU(2):   $edx = COPY %107:gr32
SU(3):   $ecx = COPY %108:gr32
SU(4):   $r8d = COPY %109:gr32
SU(5):   $r9 = COPY %110:gr64

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: %146:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=14
Live In: 
Live Out: %110 %109 %146 %108 %107 %106 %105 
Live Thru: 
  LiveReg: %110
  LiveReg: %109
  LiveReg: %146
  UpdateRegP: SU(1) %106:gr64 = MOVSX64rm32 $noreg, 4, %146:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx102)
              to GR16 -2
  UpdateRegP: SU(6) %107:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx106)
              to GR16 -2
  UpdateRegP: SU(7) %108:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx108)
              to GR16 -2
  UpdateRegP: SU(8) %109:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx110)
              to GR16 -2
  LiveReg: %108
  LiveReg: %107
  LiveReg: %106
  LiveReg: %105
Top Pressure:

Bottom Pressure:
GR16=14
Excess PSets: 
SU(0):   %146:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(8): Data Latency=4 Reg=%146
    SU(7): Data Latency=4 Reg=%146
    SU(6): Data Latency=4 Reg=%146
    SU(1): Data Latency=4 Reg=%146
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %106:gr64 = MOVSX64rm32 $noreg, 4, %146:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx102)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(2): Data Latency=4 Reg=%106
    SU(2): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %106:gr64 = SHL64ri %106:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%106
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%106
    SU(4): Data Latency=1 Reg=%106
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %105:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%105
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%106
    SU(3): Out  Latency=0
    SU(3): Data Latency=4 Reg=%105
  Successors:
    SU(5): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %106:gr64 = ADD64rm %106:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=%106
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %107:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %108:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx108)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %109:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx110)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %110:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %110:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
Bottom Pressure:
GR16=12
  Ready @3c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 7 6 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %109:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx110)
Bottom Pressure:
GR16=10
  Ready @3c
  BotQ.A TopLatency SU(8) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %108:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx108)
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %107:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx106)
Bottom Pressure:
GR16=6
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %106:gr64 = ADD64rm %106:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GR16=6
  LiveReg: %106
  UpdateRegP: SU(4) %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(5) %106:gr64 = ADD64rm %106:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %105
  UpdateRegP: SU(4) %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %105:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %106:gr64 = SHL64ri %106:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %106
  UpdateRegP: SU(2) %106:gr64 = SHL64ri %106:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %106:gr64 = MOVSX64rm32 $noreg, 4, %146:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx102)
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %146:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %146:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %106:gr64 = MOVSX64rm32 $noreg, 4, %146:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx102)
SU(2):   %106:gr64 = SHL64ri %106:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %105:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
SU(4):   %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
SU(5):   %106:gr64 = ADD64rm %106:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
SU(6):   %107:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx106)
SU(7):   %108:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx108)
SU(8):   %109:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx110)
SU(9):   %110:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: $rdi = COPY %94:gr64
    To: PUSH64r %144:gr64_nosp, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %94:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = COPY %95:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = COPY %95:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %96:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %97:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %98:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %144:gr64_nosp, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %98:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %97:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %96:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %95:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %95:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %94:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = COPY %94:gr64
SU(1):   $rsi = COPY %95:gr64
SU(2):   $rdx = COPY %95:gr64
SU(3):   $ecx = COPY %96:gr32
SU(4):   $r8d = COPY %97:gr32
SU(5):   $r9d = COPY %98:gr32

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: %144:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=12
Live In: 
Live Out: %98 %144 %97 %96 %95 %94 
Live Thru: 
  LiveReg: %98
  LiveReg: %144
  UpdateRegP: SU(1) %95:gr64 = MOVSX64rm32 $noreg, 4, %144:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx88)
              to GR16 -2
  UpdateRegP: SU(6) %96:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx92)
              to GR16 -2
  UpdateRegP: SU(7) %97:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx94)
              to GR16 -2
  UpdateRegP: SU(8) %98:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx96)
              to GR16 -2
  LiveReg: %97
  LiveReg: %96
  LiveReg: %95
  LiveReg: %94
Top Pressure:

Bottom Pressure:
GR16=12
Excess PSets: 
SU(0):   %144:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(8): Data Latency=4 Reg=%144
    SU(7): Data Latency=4 Reg=%144
    SU(6): Data Latency=4 Reg=%144
    SU(1): Data Latency=4 Reg=%144
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %95:gr64 = MOVSX64rm32 $noreg, 4, %144:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx88)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%144
  Successors:
    SU(2): Data Latency=4 Reg=%95
    SU(2): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %95:gr64 = SHL64ri %95:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%95
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%95
    SU(4): Data Latency=1 Reg=%95
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %94:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%94
    SU(4): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%95
    SU(3): Out  Latency=0
    SU(3): Data Latency=4 Reg=%94
  Successors:
    SU(5): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %95:gr64 = ADD64rm %95:gr64(tied-def 0), %stack.2.r.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=%95
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %96:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx92)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%144
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %97:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx94)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%144
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %98:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx96)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%144
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %98:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx96)
Bottom Pressure:
GR16=10
  Ready @3c
  BotQ.A TopLatency SU(8) 4c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 6 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %97:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx94)
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %96:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx92)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %95:gr64 = ADD64rm %95:gr64(tied-def 0), %stack.2.r.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
GR16=6
  LiveReg: %95
  UpdateRegP: SU(4) %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(5) %95:gr64 = ADD64rm %95:gr64(tied-def 0), %stack.2.r.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r.addr)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %94
  UpdateRegP: SU(4) %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(4) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %94:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %95:gr64 = SHL64ri %95:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %95
  UpdateRegP: SU(2) %95:gr64 = SHL64ri %95:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %95:gr64 = MOVSX64rm32 $noreg, 4, %144:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx88)
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %144:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %144:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %95:gr64 = MOVSX64rm32 $noreg, 4, %144:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx88)
SU(2):   %95:gr64 = SHL64ri %95:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %94:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
SU(4):   %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
SU(5):   %95:gr64 = ADD64rm %95:gr64(tied-def 0), %stack.2.r.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r.addr)
SU(6):   %96:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx92)
SU(7):   %97:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx94)
SU(8):   %98:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx96)

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: $rdi = COPY %78:gr64
    To: PUSH64r %138:gr64_nosp, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %78:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %79:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %80:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %81:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = COPY %85:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %86:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %138:gr64_nosp, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %86:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = COPY %85:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %81:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %80:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %79:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %78:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = COPY %78:gr64
SU(1):   $esi = COPY %79:gr32
SU(2):   $edx = COPY %80:gr32
SU(3):   $ecx = COPY %81:gr32
SU(4):   $r8 = COPY %85:gr64
SU(5):   $r9d = COPY %86:gr32

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: %75:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=18
Live In: 
Live Out: %140 %138 %142 %86 %85 %81 %80 %79 %78 
Live Thru: 
  LiveReg: %140
  LiveReg: %138
  UpdateRegP: SU(8) %84:gr64_nosp = MOVSX64rm32 $noreg, 4, %138:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx70)
              to GR16 -2
  UpdateRegP: SU(10) %86:gr32 = MOV32rm $noreg, 4, %138:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx74)
              to GR16 -2
  UpdateRegP: SU(11) undef %142.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx76)
              to GR16 -2
  UpdateRegP: SU(12) undef %140.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx78)
              to GR16 -2
  LiveReg: %142
  LiveReg: %86
  LiveReg: %85
  LiveReg: %81
  LiveReg: %80
  LiveReg: %79
  LiveReg: %78
Top Pressure:

Bottom Pressure:
GR16=18
Excess PSets: 
SU(0):   %75:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%75
    SU(3): Data Latency=4 Reg=%75
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %76:gr64_nosp = MOVSX64rm32 %stack.8.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(6): Data Latency=4 Reg=%76
    SU(5): Data Latency=4 Reg=%76
    SU(4): Data Latency=4 Reg=%76
    SU(2): Data Latency=4 Reg=%76
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %77:gr64_nosp = MOVSX64rm32 $noreg, 4, %76:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx60)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%76
  Successors:
    SU(3): Data Latency=4 Reg=%77
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%77
    SU(0): Data Latency=4 Reg=%75
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %79:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx64)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%76
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %80:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%76
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %81:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx68)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%76
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %138:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(12): Data Latency=4 Reg=%138
    SU(11): Data Latency=4 Reg=%138
    SU(10): Data Latency=4 Reg=%138
    SU(8): Data Latency=4 Reg=%138
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %84:gr64_nosp = MOVSX64rm32 $noreg, 4, %138:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx70)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(7): Data Latency=4 Reg=%138
  Successors:
    SU(9): Data Latency=4 Reg=%84
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%84
    SU(0): Data Latency=4 Reg=%75
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %86:gr32 = MOV32rm $noreg, 4, %138:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx74)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(7): Data Latency=4 Reg=%138
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   undef %142.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx76)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(7): Data Latency=4 Reg=%138
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   undef %140.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx78)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(7): Data Latency=4 Reg=%138
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=3 Artificial
    SU(11): Ord  Latency=3 Artificial
    SU(10): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 3 12 11 10 6 5 4 
  Cand SU(9) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) undef %140.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx78)
Bottom Pressure:
GR16=16
  Ready @3c
  BotQ.A TopLatency SU(12) 4c
  BotQ.A BotLatency SU(12) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 3 4 11 10 6 5 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) undef %142.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx76)
Bottom Pressure:
GR16=14
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 3 4 5 10 6 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %86:gr32 = MOV32rm $noreg, 4, %138:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx74)
Bottom Pressure:
GR16=12
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 3 4 5 6 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  LiveReg: %75
  UpdateRegP: SU(3) %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(9) %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
              to 
  LiveReg: %84
  UpdateRegP: SU(9) %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @0c
  BotQ.A TopLatency SU(9) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 4 5 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %84:gr64_nosp = MOVSX64rm32 $noreg, 4, %138:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx70)
Bottom Pressure:
GR16=12
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 4 5 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %138:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GR16=10
  Ready @8c
  BotQ.A BotLatency SU(7) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 4 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %81:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx68)
Bottom Pressure:
GR16=10
  LiveReg: %76
  UpdateRegP: SU(2) %77:gr64_nosp = MOVSX64rm32 $noreg, 4, %76:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx60)
              to GR16 -2
  UpdateRegP: SU(4) %79:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx64)
              to GR16 -2
  UpdateRegP: SU(5) %80:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx66)
              to GR16 -2
  UpdateRegP: SU(6) %81:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx68)
              to GR16 -2
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %80:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx66)
Bottom Pressure:
GR16=8
  Ready @3c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %79:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx64)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %77
  UpdateRegP: SU(3) %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @2c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %77:gr64_nosp = MOVSX64rm32 $noreg, 4, %76:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx60)
Bottom Pressure:
GR16=4
  Ready @6c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %76:gr64_nosp = MOVSX64rm32 %stack.8.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GR16=2
  Ready @10c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:

  Ready @6c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %75:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
SU(1):   %76:gr64_nosp = MOVSX64rm32 %stack.8.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
SU(2):   %77:gr64_nosp = MOVSX64rm32 $noreg, 4, %76:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx60)
SU(3):   %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
SU(4):   %79:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx64)
SU(5):   %80:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx66)
SU(6):   %81:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx68)
SU(7):   %138:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(8):   %84:gr64_nosp = MOVSX64rm32 $noreg, 4, %138:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx70)
SU(9):   %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
SU(10):   %86:gr32 = MOV32rm $noreg, 4, %138:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx74)
SU(11):   undef %142.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx76)
SU(12):   undef %140.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx78)

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: $rdi = COPY %71:gr64
    To: CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %71:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %72:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %73:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %74:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %74:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %73:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %72:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %71:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = COPY %71:gr64
SU(1):   $esi = COPY %72:gr32
SU(2):   $edx = COPY %73:gr32
SU(3):   $ecx = COPY %74:gr32

********** MI Scheduling **********
mg3P:%bb.5 for.body47
  From: %67:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: %74 %73 %72 %71 
Live Thru: 
  LiveReg: %74
  LiveReg: %73
  LiveReg: %72
  LiveReg: %71
Top Pressure:

Bottom Pressure:
GR16=8
Excess PSets: 
SU(0):   %67:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%67
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %67:gr32 = DEC32r %67:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%67
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%67
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.j)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %68:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(9): Data Latency=4 Reg=%68
    SU(8): Data Latency=4 Reg=%68
    SU(7): Data Latency=4 Reg=%68
    SU(4): Data Latency=4 Reg=%68
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %71:gr64 = MOVSX64rm32 $noreg, 4, %68:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(3): Data Latency=4 Reg=%68
  Successors:
    SU(5): Data Latency=4 Reg=%71
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %71:gr64 = SHL64ri %71:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%71
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%71
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%71
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %72:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx54)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %73:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx56)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %74:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx58)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 8 7 6 
  Cand SU(2) ORDER                              
  Cand SU(9) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(9) %74:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx58)
Bottom Pressure:
GR16=8
  LiveReg: %68
  UpdateRegP: SU(4) %71:gr64 = MOVSX64rm32 $noreg, 4, %68:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx50)
              to GR16 -2
  UpdateRegP: SU(7) %72:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx54)
              to GR16 -2
  UpdateRegP: SU(8) %73:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx56)
              to GR16 -2
  UpdateRegP: SU(9) %74:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx58)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(9) 4c
  BotQ.A BotLatency SU(9) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 8 7 
  Cand SU(2) ORDER                              
  Cand SU(6) REG-MAX                            
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %73:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx56)
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 7 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %72:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx54)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GR16=4
  LiveReg: %71
  UpdateRegP: SU(6) %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(6) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %71:gr64 = SHL64ri %71:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %71
  UpdateRegP: SU(5) %71:gr64 = SHL64ri %71:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %71:gr64 = MOVSX64rm32 $noreg, 4, %68:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx50)
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(4) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %68:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(3) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.j)
Bottom Pressure:
GR16=2
  LiveReg: %67
  UpdateRegP: SU(2) MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.j)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %67:gr32 = DEC32r %67:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %67
  UpdateRegP: SU(1) %67:gr32 = DEC32r %67:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %67:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:

  Ready @6c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %67:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(1):   %67:gr32 = DEC32r %67:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.j)
SU(3):   %68:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
SU(4):   %71:gr64 = MOVSX64rm32 $noreg, 4, %68:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx50)
SU(5):   %71:gr64 = SHL64ri %71:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
SU(7):   %72:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx54)
SU(8):   %73:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx56)
SU(9):   %74:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx58)

********** MI Scheduling **********
mg3P:%bb.6 for.end112
  From: $rdi = COPY %58:gr64
    To: PUSH64r %156:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %58:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = COPY %59:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %60:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %61:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %62:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = COPY %63:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %156:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = COPY %63:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %62:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %61:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %60:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %59:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %58:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = COPY %58:gr64
SU(1):   $rsi = COPY %59:gr64
SU(2):   $edx = COPY %60:gr32
SU(3):   $ecx = COPY %61:gr32
SU(4):   $r8d = COPY %62:gr32
SU(5):   $r9 = COPY %63:gr64

********** MI Scheduling **********
mg3P:%bb.6 for.end112
  From: %58:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
    To: ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %58:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %59:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %60:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %61:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %62:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %63:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %156.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %156.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %63:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %62:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %61:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %60:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %59:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %58:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %58:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
SU(1):   %59:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
SU(2):   %60:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(3):   %61:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
SU(4):   %62:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
SU(5):   %63:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
SU(6):   undef %156.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
mg3P:%bb.6 for.end112
  From: $rdi = COPY %49:gr64
    To: PUSH64r %154:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %49:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = COPY %50:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = COPY %51:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %52:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8d = COPY %53:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %54:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %154:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %54:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %53:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %52:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %51:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %50:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %49:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = COPY %49:gr64
SU(1):   $rsi = COPY %50:gr64
SU(2):   $rdx = COPY %51:gr64
SU(3):   $ecx = COPY %52:gr32
SU(4):   $r8d = COPY %53:gr32
SU(5):   $r9d = COPY %54:gr32

********** MI Scheduling **********
mg3P:%bb.6 for.end112
  From: %49:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
    To: ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %49:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %50:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %51:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %52:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %53:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %54:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %54:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %53:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %52:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %51:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %50:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v.addr)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %49:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %49:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
SU(1):   %50:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v.addr)
SU(2):   %51:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
SU(3):   %52:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(4):   %53:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
SU(5):   %54:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
SU(6):   undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)

********** MI Scheduling **********
mg3P:%bb.6 for.end112
  From: $rdi = COPY %41:gr64
    To: PUSH64r %148:gr64_nosp, implicit-def $rsp, implicit $rsp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %41:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %42:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $edx = COPY %43:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $ecx = COPY %44:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = COPY %38:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %45:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %148:gr64_nosp, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %45:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = COPY %38:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %44:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %43:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %42:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %41:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = COPY %41:gr64
SU(1):   $esi = COPY %42:gr32
SU(2):   $edx = COPY %43:gr32
SU(3):   $ecx = COPY %44:gr32
SU(4):   $r8 = COPY %38:gr64
SU(5):   $r9d = COPY %45:gr32

********** MI Scheduling **********
mg3P:%bb.6 for.end112
  From: undef %148.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=18
Live In: 
Live Out: %150 %152 %45 %44 %43 %42 %41 %38 %148 
Live Thru: 
  LiveReg: %150
  LiveReg: %152
  LiveReg: %45
  LiveReg: %44
  LiveReg: %43
  LiveReg: %42
  LiveReg: %41
  LiveReg: %38
  UpdateRegP: SU(7) %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
              to 
  LiveReg: %148
  UpdateRegP: SU(1) %37:gr32 = LEA64_32r %148:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  UpdateRegP: SU(3) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %148.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
              to 
Top Pressure:

Bottom Pressure:
GR16=18
Excess PSets: 
SU(0):   undef %148.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%148
    SU(1): Data Latency=4 Reg=%148
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %37:gr32 = LEA64_32r %148:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%148
  Successors:
    SU(5): Data Latency=1 Reg=%37
    SU(2): Data Latency=1 Reg=%37
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %37:gr32 :: (store 4 into %ir.j)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%37
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %148.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%148
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %38:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%38
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %39:gr64_nosp = MOVSX64rr32 %37:gr32
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%37
  Successors:
    SU(10): Data Latency=1 Reg=%39
    SU(9): Data Latency=1 Reg=%39
    SU(8): Data Latency=1 Reg=%39
    SU(6): Data Latency=1 Reg=%39
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %40:gr64_nosp = MOVSX64rm32 $noreg, 4, %39:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx115)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(5): Data Latency=1 Reg=%39
  Successors:
    SU(7): Data Latency=4 Reg=%40
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%40
    SU(4): Data Latency=4 Reg=%38
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %42:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx119)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%39
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %43:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx121)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%39
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %44:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx123)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%39
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %45:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   undef %152.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   undef %150.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=3 Artificial
    SU(12): Ord  Latency=3 Artificial
    SU(11): Ord  Latency=3 Artificial
    SU(10): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 13 12 11 10 9 8 
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %150.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
Bottom Pressure:
GR16=16
  Ready @3c
  BotQ.A BotLatency SU(13) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 8 12 11 10 9 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %152.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
Bottom Pressure:
GR16=14
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 8 9 11 10 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %45:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
Bottom Pressure:
GR16=12
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 8 9 10 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %44:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx123)
Bottom Pressure:
GR16=12
  LiveReg: %39
  UpdateRegP: SU(6) %40:gr64_nosp = MOVSX64rm32 $noreg, 4, %39:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx115)
              to GR16 -2
  UpdateRegP: SU(8) %42:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx119)
              to GR16 -2
  UpdateRegP: SU(9) %43:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx121)
              to GR16 -2
  UpdateRegP: SU(10) %44:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx123)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(10) 6c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 8 9 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %43:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx121)
Bottom Pressure:
GR16=10
  Ready @3c
  BotQ.A TopLatency SU(9) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %42:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx119)
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %40
  UpdateRegP: SU(7) %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A TopLatency SU(7) 10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 6 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %40:gr64_nosp = MOVSX64rm32 $noreg, 4, %39:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx115)
Bottom Pressure:
GR16=6
  Ready @5c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %39:gr64_nosp = MOVSX64rr32 %37:gr32
Bottom Pressure:
GR16=6
  LiveReg: %37
  UpdateRegP: SU(2) MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %37:gr32 :: (store 4 into %ir.j)
              to 
  UpdateRegP: SU(5) %39:gr64_nosp = MOVSX64rr32 %37:gr32
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(5) 5c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %38:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GR16=4
  Ready @5c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %148.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
Bottom Pressure:
GR16=4
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %37:gr32 :: (store 4 into %ir.j)
Bottom Pressure:
GR16=4
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %37:gr32 = LEA64_32r %148:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=2
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %148.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
Bottom Pressure:

  Ready @11c
  BotQ.A BotLatency SU(0) 10c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   undef %148.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
SU(1):   %37:gr32 = LEA64_32r %148:gr64_nosp, 1, $noreg, -1, $noreg
SU(2):   MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %37:gr32 :: (store 4 into %ir.j)
SU(3):   MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %148.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
SU(4):   %38:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
SU(5):   %39:gr64_nosp = MOVSX64rr32 %37:gr32
SU(6):   %40:gr64_nosp = MOVSX64rm32 $noreg, 4, %39:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx115)
SU(7):   %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
SU(8):   %42:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx119)
SU(9):   %43:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx121)
SU(10):   %44:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx123)
SU(11):   %45:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(12):   undef %152.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
SU(13):   undef %150.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)

********** INTERVALS **********
CH [0B,48r:0)[720r,864r:1)[1184r,1200r:10)[1520r,1600r:9)[2096r,2112r:5)[2432r,2576r:4)[2880r,2976r:3)[3296r,3376r:2)[3760r,3904r:8)[4112r,4208r:7)[4416r,4496r:6)  0@0B-phi 1@720r 2@3296r 3@2880r 4@2432r 5@2096r 6@4416r 7@4112r 8@3760r 9@1520r 10@1184r
CL [0B,48r:0)[720r,864r:1)[1184r,1200r:10)[1520r,1600r:9)[2096r,2112r:5)[2432r,2576r:4)[2880r,2976r:3)[3296r,3376r:2)[3760r,3904r:8)[4112r,4208r:7)[4416r,4496r:6)  0@0B-phi 1@720r 2@3296r 3@2880r 4@2432r 5@2096r 6@4416r 7@4112r 8@3760r 9@1520r 10@1184r
DH [0B,64r:0)[704r,864r:1)[1168r,1200r:8)[1504r,1600r:7)[2080r,2112r:4)[2416r,2576r:3)[2864r,2976r:9)[3280r,3376r:2)[3744r,3904r:6)[4096r,4208r:10)[4400r,4496r:5)  0@0B-phi 1@704r 2@3280r 3@2416r 4@2080r 5@4400r 6@3744r 7@1504r 8@1168r 9@2864r 10@4096r
DIL [0B,96r:0)[672r,864r:1)[1136r,1200r:10)[1472r,1600r:9)[2048r,2112r:5)[2384r,2576r:4)[2832r,2976r:3)[3248r,3376r:2)[3712r,3904r:8)[4064r,4208r:7)[4368r,4496r:6)  0@0B-phi 1@672r 2@3248r 3@2832r 4@2384r 5@2048r 6@4368r 7@4064r 8@3712r 9@1472r 10@1136r
DIH [0B,96r:0)[672r,864r:1)[1136r,1200r:10)[1472r,1600r:9)[2048r,2112r:5)[2384r,2576r:4)[2832r,2976r:3)[3248r,3376r:2)[3712r,3904r:8)[4064r,4208r:7)[4368r,4496r:6)  0@0B-phi 1@672r 2@3248r 3@2832r 4@2384r 5@2048r 6@4368r 7@4064r 8@3712r 9@1472r 10@1136r
DL [0B,64r:0)[704r,864r:1)[1168r,1200r:8)[1504r,1600r:7)[2080r,2112r:4)[2416r,2576r:3)[2864r,2976r:9)[3280r,3376r:2)[3744r,3904r:6)[4096r,4208r:10)[4400r,4496r:5)  0@0B-phi 1@704r 2@3280r 3@2416r 4@2080r 5@4400r 6@3744r 7@1504r 8@1168r 9@2864r 10@4096r
HCX [0B,48r:0)[720r,864r:1)[1184r,1200r:10)[1520r,1600r:9)[2096r,2112r:5)[2432r,2576r:4)[2880r,2976r:3)[3296r,3376r:2)[3760r,3904r:8)[4112r,4208r:7)[4416r,4496r:6)  0@0B-phi 1@720r 2@3296r 3@2880r 4@2432r 5@2096r 6@4416r 7@4112r 8@3760r 9@1520r 10@1184r
HDI [0B,96r:0)[672r,864r:1)[1136r,1200r:10)[1472r,1600r:9)[2048r,2112r:5)[2384r,2576r:4)[2832r,2976r:3)[3248r,3376r:2)[3712r,3904r:8)[4064r,4208r:7)[4368r,4496r:6)  0@0B-phi 1@672r 2@3248r 3@2832r 4@2384r 5@2048r 6@4368r 7@4064r 8@3712r 9@1472r 10@1136r
HDX [0B,64r:0)[704r,864r:1)[1168r,1200r:8)[1504r,1600r:7)[2080r,2112r:4)[2416r,2576r:3)[2864r,2976r:9)[3280r,3376r:2)[3744r,3904r:6)[4096r,4208r:10)[4400r,4496r:5)  0@0B-phi 1@704r 2@3280r 3@2416r 4@2080r 5@4400r 6@3744r 7@1504r 8@1168r 9@2864r 10@4096r
SIL [0B,80r:0)[688r,864r:1)[1152r,1200r:5)[1488r,1600r:10)[2064r,2112r:3)[2400r,2576r:2)[2848r,2976r:7)[3264r,3376r:6)[3728r,3904r:4)[4080r,4208r:9)[4384r,4496r:8)  0@0B-phi 1@688r 2@2400r 3@2064r 4@3728r 5@1152r 6@3264r 7@2848r 8@4384r 9@4080r 10@1488r
SIH [0B,80r:0)[688r,864r:1)[1152r,1200r:5)[1488r,1600r:10)[2064r,2112r:3)[2400r,2576r:2)[2848r,2976r:7)[3264r,3376r:6)[3728r,3904r:4)[4080r,4208r:9)[4384r,4496r:8)  0@0B-phi 1@688r 2@2400r 3@2064r 4@3728r 5@1152r 6@3264r 7@2848r 8@4384r 9@4080r 10@1488r
HSI [0B,80r:0)[688r,864r:1)[1152r,1200r:5)[1488r,1600r:10)[2064r,2112r:3)[2400r,2576r:2)[2848r,2976r:7)[3264r,3376r:6)[3728r,3904r:4)[4080r,4208r:9)[4384r,4496r:8)  0@0B-phi 1@688r 2@2400r 3@2064r 4@3728r 5@1152r 6@3264r 7@2848r 8@4384r 9@4080r 10@1488r
R8B [0B,32r:0)[736r,864r:6)[1536r,1600r:5)[2448r,2576r:7)[2896r,2976r:2)[3312r,3376r:1)[3776r,3904r:8)[4128r,4208r:4)[4432r,4496r:3)  0@0B-phi 1@3312r 2@2896r 3@4432r 4@4128r 5@1536r 6@736r 7@2448r 8@3776r
R8BH [0B,32r:0)[736r,864r:6)[1536r,1600r:5)[2448r,2576r:7)[2896r,2976r:2)[3312r,3376r:1)[3776r,3904r:8)[4128r,4208r:4)[4432r,4496r:3)  0@0B-phi 1@3312r 2@2896r 3@4432r 4@4128r 5@1536r 6@736r 7@2448r 8@3776r
R8WH [0B,32r:0)[736r,864r:6)[1536r,1600r:5)[2448r,2576r:7)[2896r,2976r:2)[3312r,3376r:1)[3776r,3904r:8)[4128r,4208r:4)[4432r,4496r:3)  0@0B-phi 1@3312r 2@2896r 3@4432r 4@4128r 5@1536r 6@736r 7@2448r 8@3776r
R9B [0B,16r:0)[752r,864r:1)[1552r,1600r:8)[2464r,2576r:3)[2912r,2976r:2)[3328r,3376r:6)[3792r,3904r:5)[4144r,4208r:4)[4448r,4496r:7)  0@0B-phi 1@752r 2@2912r 3@2464r 4@4144r 5@3792r 6@3328r 7@4448r 8@1552r
R9BH [0B,16r:0)[752r,864r:1)[1552r,1600r:8)[2464r,2576r:3)[2912r,2976r:2)[3328r,3376r:6)[3792r,3904r:5)[4144r,4208r:4)[4448r,4496r:7)  0@0B-phi 1@752r 2@2912r 3@2464r 4@4144r 5@3792r 6@3328r 7@4448r 8@1552r
R9WH [0B,16r:0)[752r,864r:1)[1552r,1600r:8)[2464r,2576r:3)[2912r,2976r:2)[3328r,3376r:6)[3792r,3904r:5)[4144r,4208r:4)[4448r,4496r:7)  0@0B-phi 1@752r 2@2912r 3@2464r 4@4144r 5@3792r 6@3328r 7@4448r 8@1552r
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%6 [208r,224r:0)  0@208r weight:0.000000e+00
%9 [256r,288r:0)[288r,304r:1)  0@256r 1@288r weight:0.000000e+00
%11 [944r,1104r:0)  0@944r weight:0.000000e+00
%15 [992r,1024r:2)[1024r,1056r:0)[1056r,1136r:1)  0@1024r 1@1056r 2@992r weight:0.000000e+00
%16 [1072r,1152r:0)  0@1072r weight:0.000000e+00
%17 [1088r,1168r:0)  0@1088r weight:0.000000e+00
%18 [1104r,1184r:0)  0@1104r weight:0.000000e+00
%23 [1312r,1344r:0)[1344r,1472r:1)  0@1312r 1@1344r weight:0.000000e+00
%24 [1264r,1296r:2)[1296r,1376r:0)[1376r,1488r:1)  0@1296r 1@1376r 2@1264r weight:0.000000e+00
%25 [1392r,1504r:0)  0@1392r weight:0.000000e+00
%26 [1408r,1520r:0)  0@1408r weight:0.000000e+00
%27 [1424r,1536r:0)  0@1424r weight:0.000000e+00
%28 [1440r,1552r:0)  0@1440r weight:0.000000e+00
%31 [1632r,1664r:0)[1664r,1680r:1)  0@1632r 1@1664r weight:0.000000e+00
%34 [1712r,1744r:0)[1744r,1760r:1)  0@1712r 1@1744r weight:0.000000e+00
%37 [3488r,3552r:0)  0@3488r weight:0.000000e+00
%38 [3536r,3776r:0)  0@3536r weight:0.000000e+00
%39 [3552r,3632r:0)  0@3552r weight:0.000000e+00
%40 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%41 [3584r,3712r:0)  0@3584r weight:0.000000e+00
%42 [3600r,3728r:0)  0@3600r weight:0.000000e+00
%43 [3616r,3744r:0)  0@3616r weight:0.000000e+00
%44 [3632r,3760r:0)  0@3632r weight:0.000000e+00
%45 [3648r,3792r:0)  0@3648r weight:0.000000e+00
%49 [3936r,4064r:0)  0@3936r weight:0.000000e+00
%50 [3952r,4080r:0)  0@3952r weight:0.000000e+00
%51 [3968r,4096r:0)  0@3968r weight:0.000000e+00
%52 [3984r,4112r:0)  0@3984r weight:0.000000e+00
%53 [4000r,4128r:0)  0@4000r weight:0.000000e+00
%54 [4016r,4144r:0)  0@4016r weight:0.000000e+00
%58 [4240r,4368r:0)  0@4240r weight:0.000000e+00
%59 [4256r,4384r:0)  0@4256r weight:0.000000e+00
%60 [4272r,4400r:0)  0@4272r weight:0.000000e+00
%61 [4288r,4416r:0)  0@4288r weight:0.000000e+00
%62 [4304r,4432r:0)  0@4304r weight:0.000000e+00
%63 [4320r,4448r:0)  0@4320r weight:0.000000e+00
%67 [1824r,1856r:0)[1856r,1872r:1)  0@1824r 1@1856r weight:0.000000e+00
%68 [1888r,2016r:0)  0@1888r weight:0.000000e+00
%71 [1904r,1936r:2)[1936r,1968r:0)[1968r,2048r:1)  0@1936r 1@1968r 2@1904r weight:0.000000e+00
%72 [1984r,2064r:0)  0@1984r weight:0.000000e+00
%73 [2000r,2080r:0)  0@2000r weight:0.000000e+00
%74 [2016r,2096r:0)  0@2016r weight:0.000000e+00
%75 [2144r,2304r:0)  0@2144r weight:0.000000e+00
%76 [2160r,2240r:0)  0@2160r weight:0.000000e+00
%77 [2176r,2192r:0)  0@2176r weight:0.000000e+00
%78 [2192r,2384r:0)  0@2192r weight:0.000000e+00
%79 [2208r,2400r:0)  0@2208r weight:0.000000e+00
%80 [2224r,2416r:0)  0@2224r weight:0.000000e+00
%81 [2240r,2432r:0)  0@2240r weight:0.000000e+00
%84 [2288r,2304r:0)  0@2288r weight:0.000000e+00
%85 [2304r,2448r:0)  0@2304r weight:0.000000e+00
%86 [2320r,2464r:0)  0@2320r weight:0.000000e+00
%94 [2688r,2720r:0)[2720r,2832r:1)  0@2688r 1@2720r weight:0.000000e+00
%95 [2640r,2672r:2)[2672r,2752r:0)[2752r,2864r:1)  0@2672r 1@2752r 2@2640r weight:0.000000e+00
%96 [2768r,2880r:0)  0@2768r weight:0.000000e+00
%97 [2784r,2896r:0)  0@2784r weight:0.000000e+00
%98 [2800r,2912r:0)  0@2800r weight:0.000000e+00
%105 [3088r,3120r:0)[3120r,3248r:1)  0@3088r 1@3120r weight:0.000000e+00
%106 [3040r,3072r:2)[3072r,3152r:0)[3152r,3264r:1)  0@3072r 1@3152r 2@3040r weight:0.000000e+00
%107 [3168r,3280r:0)  0@3168r weight:0.000000e+00
%108 [3184r,3296r:0)  0@3184r weight:0.000000e+00
%109 [3200r,3312r:0)  0@3200r weight:0.000000e+00
%110 [3216r,3328r:0)  0@3216r weight:0.000000e+00
%113 [368r,400r:0)[400r,560r:1)  0@368r 1@400r weight:0.000000e+00
%114 [432r,592r:0)  0@432r weight:0.000000e+00
%117 [480r,496r:0)  0@480r weight:0.000000e+00
%118 [496r,672r:0)  0@496r weight:0.000000e+00
%119 [512r,688r:0)  0@512r weight:0.000000e+00
%120 [528r,704r:0)  0@528r weight:0.000000e+00
%121 [544r,720r:0)  0@544r weight:0.000000e+00
%122 [560r,640r:0)  0@560r weight:0.000000e+00
%123 [576r,592r:0)  0@576r weight:0.000000e+00
%124 [592r,736r:0)  0@592r weight:0.000000e+00
%125 [608r,752r:0)  0@608r weight:0.000000e+00
%130 [448r,784r:0)  0@448r weight:0.000000e+00
%132 [640r,816r:0)  0@640r weight:0.000000e+00
%134 [624r,848r:0)  0@624r weight:0.000000e+00
%136 [1232r,1584r:0)  0@1232r weight:0.000000e+00
%138 [2256r,2496r:0)  0@2256r weight:0.000000e+00
%140 [2352r,2528r:0)  0@2352r weight:0.000000e+00
%142 [2336r,2560r:0)  0@2336r weight:0.000000e+00
%144 [2608r,2944r:0)  0@2608r weight:0.000000e+00
%146 [3008r,3360r:0)  0@3008r weight:0.000000e+00
%148 [3456r,3824r:0)  0@3456r weight:0.000000e+00
%150 [3680r,3856r:0)  0@3680r weight:0.000000e+00
%152 [3664r,3888r:0)  0@3664r weight:0.000000e+00
%154 [4032r,4176r:0)  0@4032r weight:0.000000e+00
%156 [4336r,4480r:0)  0@4336r weight:0.000000e+00
RegMasks: 864r 1200r 1600r 2112r 2576r 2976r 3376r 3904r 4208r 4496r
********** MACHINEINSTRS **********
# Machine code for function mg3P: NoPHIs, TracksLiveness
Frame Objects:
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8 in %4, $r9d in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9d
16B	  %5:gr32 = COPY $r9d
32B	  %4:gr64 = COPY $r8
48B	  %3:gr64 = COPY $rcx
64B	  %2:gr64 = COPY $rdx
80B	  %1:gr64 = COPY $rsi
96B	  %0:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
128B	  MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
144B	  MOV64mr %stack.2.r.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.r.addr)
160B	  MOV64mr %stack.3.a.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.a.addr)
176B	  MOV64mr %stack.4.c.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.c.addr)
192B	  MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n1.addr)
208B	  %6:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
224B	  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.k)

240B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

256B	  %9:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
288B	  %9:gr32 = nsw INC32r %9:gr32(tied-def 0), implicit-def dead $eflags
304B	  CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
320B	  JCC_1 %bb.3, 12, implicit killed $eflags
336B	  JMP_1 %bb.2

352B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

368B	  %113:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
400B	  %113:gr32 = DEC32r %113:gr32(tied-def 0), implicit-def dead $eflags
416B	  MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %113:gr32 :: (store 4 into %ir.j)
432B	  %114:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
448B	  %130:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
480B	  %117:gr64_nosp = MOVSX64rm32 $noreg, 4, %130:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx)
496B	  %118:gr64 = LEA64r %114:gr64, 8, %117:gr64_nosp, 0, $noreg
512B	  %119:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx4)
528B	  %120:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx6)
544B	  %121:gr32 = MOV32rm $noreg, 4, %130:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx8)
560B	  %122:gr64_nosp = MOVSX64rr32 %113:gr32
576B	  %123:gr64_nosp = MOVSX64rm32 $noreg, 4, %122:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx10)
592B	  %124:gr64 = LEA64r %114:gr64, 8, %123:gr64_nosp, 0, $noreg
608B	  %125:gr32 = MOV32rm $noreg, 4, %122:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx14)
624B	  undef %134.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx16)
640B	  undef %132.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %122:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx18)
656B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  $rdi = COPY %118:gr64
688B	  $esi = COPY %119:gr32
704B	  $edx = COPY %120:gr32
720B	  $ecx = COPY %121:gr32
736B	  $r8 = COPY %124:gr64
752B	  $r9d = COPY %125:gr32
784B	  PUSH64r %130:gr64_nosp, implicit-def $rsp, implicit $rsp
816B	  PUSH64r %132:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
848B	  PUSH64r %134:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
864B	  CALL64pcrel32 @rprj3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
880B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
896B	  DEC32m %stack.9.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
912B	  JMP_1 %bb.1

928B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

944B	  %11:gr64_nosp = MOVSX64rm32 $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
976B	  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %11.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
992B	  %15:gr64 = MOVSX64rm32 $noreg, 4, %11:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx20)
1024B	  %15:gr64 = SHL64ri %15:gr64(tied-def 0), 3, implicit-def dead $eflags
1056B	  %15:gr64 = ADD64rm %15:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
1072B	  %16:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx24)
1088B	  %17:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx26)
1104B	  %18:gr32 = MOV32rm $noreg, 4, %11:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx28)
1120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  $rdi = COPY %15:gr64
1152B	  $esi = COPY %16:gr32
1168B	  $edx = COPY %17:gr32
1184B	  $ecx = COPY %18:gr32
1200B	  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
1216B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1232B	  %136:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
1264B	  %24:gr64 = MOVSX64rm32 $noreg, 4, %136:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx34)
1296B	  %24:gr64 = SHL64ri %24:gr64(tied-def 0), 3, implicit-def dead $eflags
1312B	  %23:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
1344B	  %23:gr64 = ADD64rr %23:gr64(tied-def 0), %24:gr64, implicit-def dead $eflags
1376B	  %24:gr64 = ADD64rm %24:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
1392B	  %25:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx38)
1408B	  %26:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx40)
1424B	  %27:gr32 = MOV32rm $noreg, 4, %136:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx42)
1440B	  %28:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
1456B	  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1472B	  $rdi = COPY %23:gr64
1488B	  $rsi = COPY %24:gr64
1504B	  $edx = COPY %25:gr32
1520B	  $ecx = COPY %26:gr32
1536B	  $r8d = COPY %27:gr32
1552B	  $r9 = COPY %28:gr64
1584B	  PUSH64r %136:gr64_nosp, implicit-def $rsp, implicit $rsp
1600B	  CALL64pcrel32 @psinv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
1616B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1632B	  %31:gr32 = MOV32rm $rip, 1, $noreg, @lb, $noreg :: (dereferenceable load 4 from @lb)
1664B	  %31:gr32 = nsw INC32r %31:gr32(tied-def 0), implicit-def dead $eflags
1680B	  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.k)

1696B	bb.4.for.cond44:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1712B	  %34:gr32 = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
1744B	  %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
1760B	  CMP32mr %stack.9.k, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.k)
1776B	  JCC_1 %bb.6, 15, implicit killed $eflags
1792B	  JMP_1 %bb.5

1808B	bb.5.for.body47:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1824B	  %67:gr32 = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
1856B	  %67:gr32 = DEC32r %67:gr32(tied-def 0), implicit-def dead $eflags
1872B	  MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %67:gr32 :: (store 4 into %ir.j)
1888B	  %68:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
1904B	  %71:gr64 = MOVSX64rm32 $noreg, 4, %68:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx50)
1936B	  %71:gr64 = SHL64ri %71:gr64(tied-def 0), 3, implicit-def dead $eflags
1968B	  %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
1984B	  %72:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx54)
2000B	  %73:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx56)
2016B	  %74:gr32 = MOV32rm $noreg, 4, %68:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx58)
2032B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2048B	  $rdi = COPY %71:gr64
2064B	  $esi = COPY %72:gr32
2080B	  $edx = COPY %73:gr32
2096B	  $ecx = COPY %74:gr32
2112B	  CALL64pcrel32 @zero3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
2128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2144B	  %75:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
2160B	  %76:gr64_nosp = MOVSX64rm32 %stack.8.j, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j)
2176B	  %77:gr64_nosp = MOVSX64rm32 $noreg, 4, %76:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx60)
2192B	  %78:gr64 = LEA64r %75:gr64, 8, %77:gr64_nosp, 0, $noreg
2208B	  %79:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx64)
2224B	  %80:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx66)
2240B	  %81:gr32 = MOV32rm $noreg, 4, %76:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx68)
2256B	  %138:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
2288B	  %84:gr64_nosp = MOVSX64rm32 $noreg, 4, %138:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx70)
2304B	  %85:gr64 = LEA64r %75:gr64, 8, %84:gr64_nosp, 0, $noreg
2320B	  %86:gr32 = MOV32rm $noreg, 4, %138:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx74)
2336B	  undef %142.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx76)
2352B	  undef %140.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %138:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx78)
2368B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2384B	  $rdi = COPY %78:gr64
2400B	  $esi = COPY %79:gr32
2416B	  $edx = COPY %80:gr32
2432B	  $ecx = COPY %81:gr32
2448B	  $r8 = COPY %85:gr64
2464B	  $r9d = COPY %86:gr32
2496B	  PUSH64r %138:gr64_nosp, implicit-def $rsp, implicit $rsp
2528B	  PUSH64r %140:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
2560B	  PUSH64r %142:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
2576B	  CALL64pcrel32 @interp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
2592B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2608B	  %144:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
2640B	  %95:gr64 = MOVSX64rm32 $noreg, 4, %144:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx88)
2672B	  %95:gr64 = SHL64ri %95:gr64(tied-def 0), 3, implicit-def dead $eflags
2688B	  %94:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
2720B	  %94:gr64 = ADD64rr %94:gr64(tied-def 0), %95:gr64, implicit-def dead $eflags
2752B	  %95:gr64 = ADD64rm %95:gr64(tied-def 0), %stack.2.r.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r.addr)
2768B	  %96:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx92)
2784B	  %97:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx94)
2800B	  %98:gr32 = MOV32rm $noreg, 4, %144:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx96)
2816B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2832B	  $rdi = COPY %94:gr64
2848B	  $rsi = COPY %95:gr64
2864B	  $rdx = COPY %95:gr64
2880B	  $ecx = COPY %96:gr32
2896B	  $r8d = COPY %97:gr32
2912B	  $r9d = COPY %98:gr32
2944B	  PUSH64r %144:gr64_nosp, implicit-def $rsp, implicit $rsp
2960B	  PUSH64rmm %stack.3.a.addr, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp
2976B	  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
2992B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3008B	  %146:gr64_nosp = MOVSX64rm32 %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
3040B	  %106:gr64 = MOVSX64rm32 $noreg, 4, %146:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx102)
3072B	  %106:gr64 = SHL64ri %106:gr64(tied-def 0), 3, implicit-def dead $eflags
3088B	  %105:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
3120B	  %105:gr64 = ADD64rr %105:gr64(tied-def 0), %106:gr64, implicit-def dead $eflags
3152B	  %106:gr64 = ADD64rm %106:gr64(tied-def 0), %stack.0.u.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u.addr)
3168B	  %107:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx106)
3184B	  %108:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx108)
3200B	  %109:gr32 = MOV32rm $noreg, 4, %146:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx110)
3216B	  %110:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
3232B	  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3248B	  $rdi = COPY %105:gr64
3264B	  $rsi = COPY %106:gr64
3280B	  $edx = COPY %107:gr32
3296B	  $ecx = COPY %108:gr32
3312B	  $r8d = COPY %109:gr32
3328B	  $r9 = COPY %110:gr64
3360B	  PUSH64r %146:gr64_nosp, implicit-def $rsp, implicit $rsp
3376B	  CALL64pcrel32 @psinv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
3392B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3408B	  INC32m %stack.9.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k)
3424B	  JMP_1 %bb.4

3440B	bb.6.for.end112:
	; predecessors: %bb.4

3456B	  undef %148.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @lt, $noreg :: (dereferenceable load 4 from @lt)
3488B	  %37:gr32 = LEA64_32r %148:gr64_nosp, 1, $noreg, -1, $noreg
3504B	  MOV32mr %stack.8.j, 1, $noreg, 0, $noreg, %37:gr32 :: (store 4 into %ir.j)
3520B	  MOV32mr %stack.9.k, 1, $noreg, 0, $noreg, %148.sub_32bit:gr64_nosp :: (store 4 into %ir.k)
3536B	  %38:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
3552B	  %39:gr64_nosp = MOVSX64rr32 %37:gr32
3568B	  %40:gr64_nosp = MOVSX64rm32 $noreg, 4, %39:gr64_nosp, @ir, $noreg :: (load 4 from %ir.arrayidx115)
3584B	  %41:gr64 = LEA64r %38:gr64, 8, %40:gr64_nosp, 0, $noreg
3600B	  %42:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m1, $noreg :: (load 4 from %ir.arrayidx119)
3616B	  %43:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m2, $noreg :: (load 4 from %ir.arrayidx121)
3632B	  %44:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @m3, $noreg :: (load 4 from %ir.arrayidx123)
3648B	  %45:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
3664B	  undef %152.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
3680B	  undef %150.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
3696B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3712B	  $rdi = COPY %41:gr64
3728B	  $esi = COPY %42:gr32
3744B	  $edx = COPY %43:gr32
3760B	  $ecx = COPY %44:gr32
3776B	  $r8 = COPY %38:gr64
3792B	  $r9d = COPY %45:gr32
3824B	  PUSH64r %148:gr64_nosp, implicit-def $rsp, implicit $rsp
3856B	  PUSH64r %150:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
3888B	  PUSH64r %152:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
3904B	  CALL64pcrel32 @interp, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
3920B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3936B	  %49:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
3952B	  %50:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.v.addr)
3968B	  %51:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
3984B	  %52:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
4000B	  %53:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
4016B	  %54:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
4032B	  undef %154.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
4048B	  ADJCALLSTACKDOWN64 16, 0, 16, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4064B	  $rdi = COPY %49:gr64
4080B	  $rsi = COPY %50:gr64
4096B	  $rdx = COPY %51:gr64
4112B	  $ecx = COPY %52:gr32
4128B	  $r8d = COPY %53:gr32
4144B	  $r9d = COPY %54:gr32
4176B	  PUSH64r %154:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4192B	  PUSH64rmm %stack.3.a.addr, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp
4208B	  CALL64pcrel32 @resid, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit-def $rsp, implicit-def $ssp
4224B	  ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4240B	  %58:gr64 = MOV64rm %stack.2.r.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r.addr)
4256B	  %59:gr64 = MOV64rm %stack.0.u.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u.addr)
4272B	  %60:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
4288B	  %61:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
4304B	  %62:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
4320B	  %63:gr64 = MOV64rm %stack.4.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
4336B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.9.k, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k)
4352B	  ADJCALLSTACKDOWN64 8, 0, 8, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4368B	  $rdi = COPY %58:gr64
4384B	  $rsi = COPY %59:gr64
4400B	  $edx = COPY %60:gr32
4416B	  $ecx = COPY %61:gr32
4432B	  $r8d = COPY %62:gr32
4448B	  $r9 = COPY %63:gr64
4480B	  PUSH64r %156:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
4496B	  CALL64pcrel32 @psinv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $ecx, implicit $r8d, implicit $r9, implicit-def $rsp, implicit-def $ssp
4512B	  ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4528B	  RET 0

# End machine code for function mg3P.

Before MISched:
# Machine code for function rprj3: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=2072, align=16, at location [SP+8]
  fi#22: size=2072, align=16, at location [SP+8]
  fi#23: size=8, align=8, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 2.500000e-01, align=8
  cp#2: 1.250000e-01, align=8
  cp#3: 6.250000e-02, align=8
Function Live Ins: $rdi in %4, $esi in %5, $edx in %6, $ecx in %7, $r8 in %8, $r9d in %9

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9d
  %9:gr32 = COPY $r9d
  %8:gr64 = COPY $r8
  %7:gr32 = COPY $ecx
  %6:gr32 = COPY $edx
  %5:gr32 = COPY $esi
  %4:gr64 = COPY $rdi
  MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
  MOV32mr %stack.1.m1k.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.m1k.addr)
  MOV32mr %stack.2.m2k.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.m2k.addr)
  MOV32mr %stack.3.m3k.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.m3k.addr)
  MOV64mr %stack.4.os.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.os.addr)
  MOV32mr %stack.5.m1j.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.m1j.addr)
  MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
  undef %116.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  MOV64mr %stack.10.s, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.s)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 6
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  CMP32mi8 %stack.1.m1k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1k.addr)
  JCC_1 %bb.4, 5, implicit killed $eflags
  JMP_1 %bb.3

bb.3.if.then1:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.17.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
  JMP_1 %bb.5

bb.4.if.else:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.17.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)

bb.5.if.end2:
; predecessors: %bb.4, %bb.3
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

  undef %129.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
  undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  CMP32mi8 %stack.2.m2k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2k.addr)
  JCC_1 %bb.7, 5, implicit killed $eflags
  JMP_1 %bb.6

bb.6.if.then4:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  MOV32mi %stack.18.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
  JMP_1 %bb.8

bb.7.if.else5:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  MOV32mi %stack.18.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)

bb.8.if.end6:
; predecessors: %bb.7, %bb.6
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  CMP32mi8 %stack.3.m3k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3k.addr)
  JCC_1 %bb.10, 5, implicit killed $eflags
  JMP_1 %bb.9

bb.9.if.then8:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  MOV32mi %stack.19.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
  JMP_1 %bb.11

bb.10.if.else9:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  MOV32mi %stack.19.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)

bb.11.if.end10:
; predecessors: %bb.10, %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOV32mi %stack.11.j3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j3)
  %129:gr64_with_sub_8bit = nuw IMUL64rr %129:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %162:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %164:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %165:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %116:gr64_with_sub_8bit = nuw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags

bb.12.for.cond:
; predecessors: %bb.11, %bb.22
  successors: %bb.13(0x7c000000), %bb.23(0x04000000); %bb.13(96.88%), %bb.23(3.12%)

  %23:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.j3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j3)
  JCC_1 %bb.23, 13, implicit killed $eflags
  JMP_1 %bb.13

bb.13.for.body:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %47:gr32 = MOV32rm %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
  %47:gr32 = ADD32rr %47:gr32(tied-def 0), %47:gr32, implicit-def dead $eflags
  %47:gr32 = nsw SUB32rm %47:gr32(tied-def 0), %stack.19.d3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d3)
  MOV32mr %stack.14.i3, 1, $noreg, 0, $noreg, %47:gr32 :: (store 4 into %ir.i3)
  MOV32mi %stack.12.j2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j2)

bb.14.for.cond13:
; predecessors: %bb.13, %bb.21
  successors: %bb.15(0x7c000000), %bb.22(0x04000000); %bb.15(96.88%), %bb.22(3.12%)

  %50:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  %50:gr32 = DEC32r %50:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.j2, 1, $noreg, 0, $noreg, %50:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j2)
  JCC_1 %bb.22, 13, implicit killed $eflags
  JMP_1 %bb.15

bb.15.for.body16:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %54:gr32 = MOV32rm %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
  %54:gr32 = ADD32rr %54:gr32(tied-def 0), %54:gr32, implicit-def dead $eflags
  %54:gr32 = nsw SUB32rm %54:gr32(tied-def 0), %stack.18.d2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d2)
  MOV32mr %stack.15.i2, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.i2)
  MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)

bb.16.for.cond19:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %55:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  CMP32rm %55:gr32, %stack.5.m1j.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1j.addr)
  JCC_1 %bb.18, 13, implicit killed $eflags
  JMP_1 %bb.17

bb.17.for.body21:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  undef %167.sub_32bit:gr64_nosp = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  %126:gr32 = LEA64_32r %167:gr64_nosp, 1, %167:gr64_nosp, 0, $noreg
  %126:gr32 = nsw SUB32rm %126:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
  MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %126:gr32 :: (store 4 into %ir.i1)
  %149:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %130:gr64_nosp = LEA64r %149:gr64_nosp, 1, $noreg, 1, $noreg
  %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  %131:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
  %143:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %134:gr64_nosp = COPY %143:gr64_nosp
  %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
  %136:gr64_nosp = MOVSX64rr32 %126:gr32
  %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
  %139:gr64_nosp = LEA64r %143:gr64_nosp, 1, $noreg, 2, $noreg
  %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
  %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
  %143:gr64_nosp = nsw INC64r %143:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %144:gr64_nosp = COPY %149:gr64_nosp
  %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
  %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
  %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
  %149:gr64_nosp = nsw ADD64ri8 %149:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
  %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
  %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
  MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
  %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
  %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
  %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
  %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
  %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
  MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
  %167.sub_32bit:gr64_nosp = nsw INC32r %167.sub_32bit:gr64_nosp(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.13.j1, 1, $noreg, 0, $noreg, %167.sub_32bit:gr64_nosp :: (store 4 into %ir.j1)
  JMP_1 %bb.16

bb.18.for.end:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)

bb.19.for.cond89:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  %59:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.j1, 1, $noreg, 0, $noreg, %59:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j1)
  JCC_1 %bb.21, 13, implicit killed $eflags
  JMP_1 %bb.20

bb.20.for.body92:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %63:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  %63:gr32 = ADD32rr %63:gr32(tied-def 0), %63:gr32, implicit-def dead $eflags
  %63:gr32 = nsw SUB32rm %63:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
  MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %63:gr32 :: (store 4 into %ir.i1)
  %93:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %66:gr64_nosp = COPY %93:gr64_nosp
  %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %86:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %68:gr64_nosp = COPY %86:gr64_nosp
  %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  %69:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
  %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
  %72:gr64_nosp = MOVSX64rr32 %63:gr32
  %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
  %75:gr64_nosp = LEA64r %86:gr64_nosp, 1, $noreg, 2, $noreg
  %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
  %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
  %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
  %80:gr64_nosp = LEA64r %93:gr64_nosp, 1, $noreg, 2, $noreg
  %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
  %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
  %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
  %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
  MOVSDmr %stack.24.y2, 1, $noreg, 0, $noreg, %82:fr64 :: (store 8 into %ir.y2)
  %86:gr64_nosp = nsw INC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
  %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
  %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
  %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
  %93:gr64_nosp = nsw INC64r %93:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
  %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
  MOVSDmr %stack.23.x2, 1, $noreg, 0, $noreg, %95:fr64 :: (store 8 into %ir.x2)
  %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
  %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
  %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
  %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
  %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
  %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
  %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
  %108:fr64 = MOVSDrm_alt %stack.21.x1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx199)
  %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
  %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
  %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
  %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
  %113:fr64 = MOVSDrm_alt %stack.22.y1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx208)
  %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
  %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
  %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
  %118:gr64 = MOVSX64rm32 %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
  %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
  %118:gr64 = SHL64ri %118:gr64(tied-def 0), 3, implicit-def dead $eflags
  %118:gr64 = ADD64rm %118:gr64(tied-def 0), %stack.10.s, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.s)
  %121:gr64_nosp = MOVSX64rm32 %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
  %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
  %123:gr64_nosp = MOVSX64rm32 %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
  INC32m %stack.13.j1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j1), (dereferenceable load 4 from %ir.j1)
  JMP_1 %bb.19

bb.21.for.end223:
; predecessors: %bb.19
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  INC32m %stack.12.j2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j2), (dereferenceable load 4 from %ir.j2)
  JMP_1 %bb.14

bb.22.for.end226:
; predecessors: %bb.14
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  INC32m %stack.11.j3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j3), (dereferenceable load 4 from %ir.j3)
  JMP_1 %bb.12

bb.23.for.end229:
; predecessors: %bb.12
  successors: %bb.24(0x50000000), %bb.25(0x30000000); %bb.24(62.50%), %bb.25(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.25, 4, implicit killed $eflags
  JMP_1 %bb.24

bb.24.if.then231:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 6
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.25.if.end232:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x40000000), %bb.27(0x40000000); %bb.26(50.00%), %bb.27(50.00%)

  %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.20.j, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.j)
  %28:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  %29:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  %30:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  %31:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %28:gr64
  $esi = COPY %29:gr32
  $edx = COPY %30:gr32
  $ecx = COPY %31:gr32
  $r8d = COPY %27:gr32
  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
  JCC_1 %bb.27, 14, implicit killed $eflags
  JMP_1 %bb.26

bb.26.if.then235:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %32:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  %33:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  %34:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  %35:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  %37:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $edx = COPY %34:gr32
  $ecx = COPY %35:gr32
  $r8 = MOV32ri64 @.str.50
  $r9d = COPY %37:gr32
  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.27.if.end237:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  %39:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 16, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 4)`, align 16)
  CMP32rm %39:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  JCC_1 %bb.29, 12, implicit killed $eflags
  JMP_1 %bb.28

bb.28.if.then239:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %41:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  %42:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  %43:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  %44:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %41:gr64
  $esi = COPY %42:gr32
  $edx = COPY %43:gr32
  $ecx = COPY %44:gr32
  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.29.if.end240:
; predecessors: %bb.27, %bb.28

  RET 0

# End machine code for function rprj3.

********** MI Scheduling **********
rprj3:%bb.0 entry
  From: %9:gr32 = COPY $r9d
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %116 %9 %6 %5 
Live Thru: 
  LiveReg: %116
  LiveReg: %9
  UpdateRegP: SU(11) MOV32mr %stack.5.m1j.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.m1j.addr)
              to 
  LiveReg: %6
  UpdateRegP: SU(8) MOV32mr %stack.2.m2k.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.m2k.addr)
              to 
  LiveReg: %5
  UpdateRegP: SU(7) MOV32mr %stack.1.m1k.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.m1k.addr)
              to 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=8
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%9
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %8:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%8
    SU(10): Data Latency=0 Reg=%8
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %7:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %6:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%6
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %5:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %4:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%4
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.m1k.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.m1k.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.m2k.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.m2k.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.m3k.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.m3k.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.os.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.os.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.m1j.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.m1j.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   undef %116.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   MOV64mr %stack.10.s, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.s)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=4 Artificial
    SU(13): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 11 10 9 8 7 6 15 13 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
Bottom Pressure:
GR16=8
  Ready @4c
  BotQ.A BotLatency SU(15) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 11 10 9 8 7 6 13 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.10.s, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.s)
Bottom Pressure:
GR16=10
  LiveReg: %8
  UpdateRegP: SU(10) MOV64mr %stack.4.os.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.os.addr)
              to 
  UpdateRegP: SU(14) MOV64mr %stack.10.s, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.s)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %116.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
Bottom Pressure:
GR16=10
  LiveReg: %4
  UpdateRegP: SU(6) MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
              to 
  UpdateRegP: SU(12) MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.m1j.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.m1j.addr)
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 10 9 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.os.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.os.addr)
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 0 9 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.m3k.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.m3k.addr)
Bottom Pressure:
GR16=12
  LiveReg: %7
  UpdateRegP: SU(9) MOV32mr %stack.3.m3k.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.m3k.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 0 1 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.m2k.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.m2k.addr)
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 0 1 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.m1k.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.m1k.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 0 1 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 1 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %4:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %5:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 0 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %6:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %7:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gr32 = COPY $r9d
SU(1):   %8:gr64 = COPY $r8
SU(2):   %7:gr32 = COPY $ecx
SU(3):   %6:gr32 = COPY $edx
SU(4):   %5:gr32 = COPY $esi
SU(5):   %4:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
SU(7):   MOV32mr %stack.1.m1k.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.m1k.addr)
SU(8):   MOV32mr %stack.2.m2k.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.m2k.addr)
SU(9):   MOV32mr %stack.3.m3k.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.m3k.addr)
SU(10):   MOV64mr %stack.4.os.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.os.addr)
SU(11):   MOV32mr %stack.5.m1j.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.m1j.addr)
SU(12):   MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
SU(13):   undef %116.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
SU(14):   MOV64mr %stack.10.s, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.s)
SU(15):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
rprj3:%bb.5 if.end2
  From: undef %129.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
    To: JCC_1 %bb.7, 5, implicit killed $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %129.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   CMP32mi8 %stack.2.m2k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2k.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CMP32mi8 %stack.2.m2k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2k.addr)
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %129.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   undef %129.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
SU(1):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
SU(2):   undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
SU(3):   CMP32mi8 %stack.2.m2k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2k.addr)

********** MI Scheduling **********
rprj3:%bb.11 if.end10
  From: MOV32mi %stack.11.j3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j3)
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.11.j3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %129:gr64_with_sub_8bit = nuw IMUL64rr %129:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %162:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %164:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %165:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %116:gr64_with_sub_8bit = nuw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 0 5 4 3 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %116:gr64_with_sub_8bit = nuw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %165:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %164:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %162:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %129:gr64_with_sub_8bit = nuw IMUL64rr %129:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.11.j3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j3)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   MOV32mi %stack.11.j3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j3)
SU(1):   %129:gr64_with_sub_8bit = nuw IMUL64rr %129:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %162:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(3):   %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(4):   %164:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(5):   %165:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(6):   %116:gr64_with_sub_8bit = nuw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags

********** MI Scheduling **********
rprj3:%bb.12 for.cond
  From: %23:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
    To: JCC_1 %bb.23, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %23:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%23
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%23
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%23
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.j3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%23
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.j3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %23:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %23:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
SU(1):   %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.j3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j3)

********** MI Scheduling **********
rprj3:%bb.13 for.body
  From: %47:gr32 = MOV32rm %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:gr32 = MOV32rm %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%47
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %47:gr32 = ADD32rr %47:gr32(tied-def 0), %47:gr32, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%47
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %47:gr32 = nsw SUB32rm %47:gr32(tied-def 0), %stack.19.d3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%47
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(3):   MOV32mr %stack.14.i3, 1, $noreg, 0, $noreg, %47:gr32 :: (store 4 into %ir.i3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(4):   MOV32mi %stack.12.j2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.12.j2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j2)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.14.i3, 1, $noreg, 0, $noreg, %47:gr32 :: (store 4 into %ir.i3)
  Ready @0c
  BotQ.A TopLatency SU(3) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %47:gr32 = nsw SUB32rm %47:gr32(tied-def 0), %stack.19.d3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d3)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %47:gr32 = ADD32rr %47:gr32(tied-def 0), %47:gr32, implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr32 = MOV32rm %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %47:gr32 = MOV32rm %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
SU(1):   %47:gr32 = ADD32rr %47:gr32(tied-def 0), %47:gr32, implicit-def dead $eflags
SU(2):   %47:gr32 = nsw SUB32rm %47:gr32(tied-def 0), %stack.19.d3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d3)
SU(3):   MOV32mr %stack.14.i3, 1, $noreg, 0, $noreg, %47:gr32 :: (store 4 into %ir.i3)
SU(4):   MOV32mi %stack.12.j2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j2)

********** MI Scheduling **********
rprj3:%bb.14 for.cond13
  From: %50:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
    To: JCC_1 %bb.22, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %50:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%50
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %50:gr32 = DEC32r %50:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%50
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%50
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.j2, 1, $noreg, 0, $noreg, %50:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%50
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.22, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.j2, 1, $noreg, 0, $noreg, %50:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %50:gr32 = DEC32r %50:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %50:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
SU(1):   %50:gr32 = DEC32r %50:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.j2, 1, $noreg, 0, $noreg, %50:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j2)

********** MI Scheduling **********
rprj3:%bb.15 for.body16
  From: %54:gr32 = MOV32rm %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %54:gr32 = MOV32rm %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%54
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %54:gr32 = ADD32rr %54:gr32(tied-def 0), %54:gr32, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%54
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%54
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %54:gr32 = nsw SUB32rm %54:gr32(tied-def 0), %stack.18.d2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%54
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(3):   MOV32mr %stack.15.i2, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.i2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(4):   MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.15.i2, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.i2)
  Ready @0c
  BotQ.A TopLatency SU(3) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %54:gr32 = nsw SUB32rm %54:gr32(tied-def 0), %stack.18.d2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d2)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %54:gr32 = ADD32rr %54:gr32(tied-def 0), %54:gr32, implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %54:gr32 = MOV32rm %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %54:gr32 = MOV32rm %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
SU(1):   %54:gr32 = ADD32rr %54:gr32(tied-def 0), %54:gr32, implicit-def dead $eflags
SU(2):   %54:gr32 = nsw SUB32rm %54:gr32(tied-def 0), %stack.18.d2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d2)
SU(3):   MOV32mr %stack.15.i2, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.i2)
SU(4):   MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)

********** MI Scheduling **********
rprj3:%bb.16 for.cond19
  From: %55:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
    To: JCC_1 %bb.18, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %55:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%55
  Single Issue       : false;
SU(1):   CMP32rm %55:gr32, %stack.5.m1j.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1j.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%55
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %55:gr32, %stack.5.m1j.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1j.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %55:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %55:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
SU(1):   CMP32rm %55:gr32, %stack.5.m1j.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1j.addr)

********** MI Scheduling **********
rprj3:%bb.17 for.body21
  From: undef %167.sub_32bit:gr64_nosp = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
    To: JMP_1 %bb.16
 RegionInstrs: 43
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=22
Live In: %129 %1 
Live Out: %129 %1 
Live Thru: GR16=4
  LiveReg: %129
  UpdateRegP: SU(6) %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(22) %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(27) %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(11) %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(16) %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(20) %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   undef %167.sub_32bit:gr64_nosp = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 43
  Successors:
    SU(41): Data Latency=4 Reg=%167
    SU(1): Data Latency=4 Reg=%167
    SU(41): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %126:gr32 = LEA64_32r %167:gr64_nosp, 1, %167:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 39
  Predecessors:
    SU(0): Data Latency=4 Reg=%167
  Successors:
    SU(2): Data Latency=1 Reg=%126
    SU(2): Out  Latency=0
    SU(41): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %126:gr32 = nsw SUB32rm %126:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 38
  Predecessors:
    SU(1): Data Latency=1 Reg=%126
    SU(1): Out  Latency=0
  Successors:
    SU(13): Data Latency=4 Reg=%126
    SU(3): Data Latency=4 Reg=%126
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %126:gr32 :: (store 4 into %ir.i1)
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 34
  Predecessors:
    SU(2): Data Latency=4 Reg=%126
  Successors:
    SU(39): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %149:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 41
  Successors:
    SU(26): Data Latency=4 Reg=%149
    SU(21): Data Latency=4 Reg=%149
    SU(5): Data Latency=4 Reg=%149
    SU(26): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %130:gr64_nosp = LEA64r %149:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 37
  Predecessors:
    SU(4): Data Latency=4 Reg=%149
  Successors:
    SU(6): Data Latency=1 Reg=%130
    SU(6): Out  Latency=0
    SU(26): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 36
  Predecessors:
    SU(5): Data Latency=1 Reg=%130
    SU(5): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%130
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %131:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 39
  Successors:
    SU(28): Data Latency=4 Reg=%131
    SU(23): Data Latency=4 Reg=%131
    SU(8): Data Latency=4 Reg=%131
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 35
  Predecessors:
    SU(6): Data Latency=1 Reg=%130
    SU(7): Data Latency=4 Reg=%131
  Successors:
    SU(17): Data Latency=1 Reg=%132
    SU(12): Data Latency=1 Reg=%132
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %143:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 39
  Successors:
    SU(19): Data Latency=4 Reg=%143
    SU(15): Data Latency=4 Reg=%143
    SU(10): Data Latency=4 Reg=%143
    SU(19): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %134:gr64_nosp = COPY %143:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 35
  Predecessors:
    SU(9): Data Latency=4 Reg=%143
  Successors:
    SU(11): Data Latency=0 Reg=%134
    SU(11): Out  Latency=0
    SU(19): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 35
  Predecessors:
    SU(10): Data Latency=0 Reg=%134
    SU(10): Out  Latency=0
  Successors:
    SU(34): Data Latency=1 Reg=%134
    SU(32): Data Latency=1 Reg=%134
    SU(12): Data Latency=1 Reg=%134
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 34
  Predecessors:
    SU(8): Data Latency=1 Reg=%132
    SU(11): Data Latency=1 Reg=%134
  Successors:
    SU(14): Data Latency=1 Reg=%135
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %136:gr64_nosp = MOVSX64rr32 %126:gr32
  # preds left       : 1
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 34
  Predecessors:
    SU(2): Data Latency=4 Reg=%126
  Successors:
    SU(40): Data Latency=1 Reg=%136
    SU(39): Data Latency=1 Reg=%136
    SU(37): Data Latency=1 Reg=%136
    SU(35): Data Latency=1 Reg=%136
    SU(33): Data Latency=1 Reg=%136
    SU(31): Data Latency=1 Reg=%136
    SU(30): Data Latency=1 Reg=%136
    SU(25): Data Latency=1 Reg=%136
    SU(18): Data Latency=1 Reg=%136
    SU(14): Data Latency=1 Reg=%136
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 33
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(12): Data Latency=1 Reg=%135
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(18): Data Latency=4 Reg=%147
    SU(18): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(15):   %139:gr64_nosp = LEA64r %143:gr64_nosp, 1, $noreg, 2, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(9): Data Latency=4 Reg=%143
  Successors:
    SU(16): Data Latency=1 Reg=%139
    SU(16): Out  Latency=0
    SU(19): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(15): Data Latency=1 Reg=%139
    SU(15): Out  Latency=0
  Successors:
    SU(38): Data Latency=1 Reg=%139
    SU(36): Data Latency=1 Reg=%139
    SU(17): Data Latency=1 Reg=%139
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(8): Data Latency=1 Reg=%132
    SU(16): Data Latency=1 Reg=%139
  Successors:
    SU(18): Data Latency=1 Reg=%140
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 29
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(14): Data Latency=4 Reg=%147
    SU(14): Out  Latency=0
    SU(17): Data Latency=1 Reg=%140
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(25): Data Latency=4 Reg=%147
    SU(25): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(19):   %143:gr64_nosp = nsw INC64r %143:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(15): Anti Latency=0
    SU(10): Anti Latency=0
    SU(9): Data Latency=4 Reg=%143
    SU(9): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%143
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(19): Data Latency=1 Reg=%143
    SU(19): Out  Latency=0
  Successors:
    SU(29): Data Latency=1 Reg=%143
    SU(24): Data Latency=1 Reg=%143
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %144:gr64_nosp = COPY %149:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(4): Data Latency=4 Reg=%149
  Successors:
    SU(22): Data Latency=0 Reg=%144
    SU(22): Out  Latency=0
    SU(26): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(21): Data Latency=0 Reg=%144
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%144
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(22): Data Latency=1 Reg=%144
    SU(7): Data Latency=4 Reg=%131
  Successors:
    SU(36): Data Latency=1 Reg=%145
    SU(32): Data Latency=1 Reg=%145
    SU(24): Data Latency=1 Reg=%145
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 26
  Predecessors:
    SU(23): Data Latency=1 Reg=%145
    SU(20): Data Latency=1 Reg=%143
  Successors:
    SU(25): Data Latency=1 Reg=%146
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(25):   %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 25
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(18): Data Latency=4 Reg=%147
    SU(18): Out  Latency=0
    SU(24): Data Latency=1 Reg=%146
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(30): Data Latency=4 Reg=%147
    SU(30): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   %149:gr64_nosp = nsw ADD64ri8 %149:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(21): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%149
    SU(4): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%149
    SU(27): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(26): Data Latency=1 Reg=%149
    SU(26): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%149
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 23
  Predecessors:
    SU(27): Data Latency=1 Reg=%149
    SU(7): Data Latency=4 Reg=%131
  Successors:
    SU(38): Data Latency=1 Reg=%150
    SU(34): Data Latency=1 Reg=%150
    SU(29): Data Latency=1 Reg=%150
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(29):   %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(28): Data Latency=1 Reg=%150
    SU(20): Data Latency=1 Reg=%143
  Successors:
    SU(30): Data Latency=1 Reg=%151
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(30):   %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 21
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(25): Data Latency=4 Reg=%147
    SU(25): Out  Latency=0
    SU(29): Data Latency=1 Reg=%151
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(31): Data Latency=4 Reg=%147
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 17
  Predecessors:
    SU(30): Data Latency=4 Reg=%147
    SU(30): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=%136
  Successors:
    SU(39): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(32):   %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 17
  Predecessors:
    SU(23): Data Latency=1 Reg=%145
    SU(11): Data Latency=1 Reg=%134
  Successors:
    SU(33): Data Latency=1 Reg=%153
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(33):   %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 27
  Height             : 16
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(31): Ord  Latency=1 Memory
    SU(32): Data Latency=1 Reg=%153
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%158
    SU(35): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(34):   %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(28): Data Latency=1 Reg=%150
    SU(11): Data Latency=1 Reg=%134
  Successors:
    SU(35): Data Latency=1 Reg=%155
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(35):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 12
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(33): Data Latency=4 Reg=%158
    SU(33): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(34): Data Latency=1 Reg=%155
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(37): Data Latency=4 Reg=%158
    SU(37): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(36):   %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(23): Data Latency=1 Reg=%145
    SU(16): Data Latency=1 Reg=%139
  Successors:
    SU(37): Data Latency=1 Reg=%157
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(37):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 8
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(35): Data Latency=4 Reg=%158
    SU(35): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(36): Data Latency=1 Reg=%157
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(39): Data Latency=4 Reg=%158
    SU(39): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(38):   %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(28): Data Latency=1 Reg=%150
    SU(16): Data Latency=1 Reg=%139
  Successors:
    SU(39): Data Latency=1 Reg=%159
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(39):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 39
  Height             : 4
  Predecessors:
    SU(13): Data Latency=1 Reg=%136
    SU(37): Data Latency=4 Reg=%158
    SU(37): Out  Latency=0
    SU(31): Ord  Latency=1 Memory
    SU(38): Data Latency=1 Reg=%159
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%158
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(40):   MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 0
  Predecessors:
    SU(39): Data Latency=4 Reg=%158
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=%136
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(41):   %167.sub_32bit:gr64_nosp = nsw INC32r %167.sub_32bit:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%167
    SU(0): Out  Latency=0
  Successors:
    SU(42): Data Latency=1 Reg=%167
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   MOV32mr %stack.13.j1, 1, $noreg, 0, $noreg, %167.sub_32bit:gr64_nosp :: (store 4 into %ir.j1)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 0
  Predecessors:
    SU(41): Data Latency=1 Reg=%167
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 43
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 40 
  Cand SU(42) ORDER                              
Pick Bot ORDER     
Scheduling SU(42) MOV32mr %stack.13.j1, 1, $noreg, 0, $noreg, %167.sub_32bit:gr64_nosp :: (store 4 into %ir.j1)
Bottom Pressure:
GR16=6
  LiveReg: %167
  UpdateRegP: SU(42) MOV32mr %stack.13.j1, 1, $noreg, 0, $noreg, %167.sub_32bit:gr64_nosp :: (store 4 into %ir.j1)
              to 
  Ready @0c
  BotQ.A TopLatency SU(42) 39c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 41 
  Cand SU(40) ORDER                              
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %167.sub_32bit:gr64_nosp = nsw INC32r %167.sub_32bit:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %167
  UpdateRegP: SU(1) %126:gr32 = LEA64_32r %167:gr64_nosp, 1, %167:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(41) %167.sub_32bit:gr64_nosp = nsw INC32r %167.sub_32bit:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(41) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 
Scheduling SU(40) MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %136
  UpdateRegP: SU(14) %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(18) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
              to GR16 2
  UpdateRegP: SU(25) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
              to GR16 2
  UpdateRegP: SU(30) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
              to GR16 2
  UpdateRegP: SU(31) MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
              to FR32 1    FR32X 1
  UpdateRegP: SU(33) %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(35) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
              to GR16 2
  UpdateRegP: SU(37) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
              to GR16 2
  UpdateRegP: SU(39) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
              to GR16 2
  UpdateRegP: SU(40) MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
              to FR32 1    FR32X 1
  LiveReg: %158
  UpdateRegP: SU(40) MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
              to 
  Ready @0c
  BotQ.A TopLatency SU(40) 43c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 39 
Scheduling SU(39) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %158
  UpdateRegP: SU(39) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %159
  UpdateRegP: SU(39) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(39) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 38 
  Cand SU(37) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %150
  UpdateRegP: SU(29) %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(34) %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(38) %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
              to 
  LiveReg: %139
  UpdateRegP: SU(17) %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(36) %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(38) %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(38) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 
Scheduling SU(37) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %158
  UpdateRegP: SU(37) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %157
  UpdateRegP: SU(37) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(37) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 36 
  Cand SU(35) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %145
  UpdateRegP: SU(24) %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(32) %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(36) %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(36) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %158
  UpdateRegP: SU(35) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %155
  UpdateRegP: SU(35) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(35) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 34 
  Cand SU(33) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %134
  UpdateRegP: SU(12) %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(32) %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(34) %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(34) 13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
Bottom Pressure:
GR16=18
  LiveReg: %153
  UpdateRegP: SU(33) %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(33) 16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 32 
  Cand SU(31) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=16
  Ready @17c
  BotQ.A BotLatency SU(32) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %147
  UpdateRegP: SU(31) MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
              to 
  Ready @17c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %147
  UpdateRegP: SU(30) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %151
  UpdateRegP: SU(30) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(30) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 29 
  Cand SU(25) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %143
  UpdateRegP: SU(24) %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(29) %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(29) 22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 28 
  Cand SU(25) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %131
  UpdateRegP: SU(8) %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(23) %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(28) %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
              to 
  LiveReg: %149
  UpdateRegP: SU(28) %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(28) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 27 
  Cand SU(25) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %149
  UpdateRegP: SU(27) %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @24c
  BotQ.A BotLatency SU(27) 24c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %149:gr64_nosp = nsw ADD64ri8 %149:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %149
  UpdateRegP: SU(5) %130:gr64_nosp = LEA64r %149:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  UpdateRegP: SU(21) %144:gr64_nosp = COPY %149:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(26) %149:gr64_nosp = nsw ADD64ri8 %149:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(26) 25c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %147
  UpdateRegP: SU(25) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %146
  UpdateRegP: SU(25) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
              to FR32 -1    FR32X -1
  Ready @25c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 24 
  Cand SU(18) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  Ready @26c
  BotQ.A BotLatency SU(24) 26c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 23 20 
  Cand SU(18) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %144
  UpdateRegP: SU(23) %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(23) 27c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 20 22 
  Cand SU(18) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %144
  UpdateRegP: SU(22) %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(22) 28c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 20 21 
  Cand SU(18) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %144:gr64_nosp = COPY %149:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @28c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 20 
  Cand SU(18) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %143
  UpdateRegP: SU(20) %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 19 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %143:gr64_nosp = nsw INC64r %143:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %143
  UpdateRegP: SU(10) %134:gr64_nosp = COPY %143:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(15) %139:gr64_nosp = LEA64r %143:gr64_nosp, 1, $noreg, 2, $noreg
              to GR16 -2
  UpdateRegP: SU(19) %143:gr64_nosp = nsw INC64r %143:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @28c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %147
  UpdateRegP: SU(18) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %140
  UpdateRegP: SU(18) %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
              to FR32 -1    FR32X -1
  Ready @29c
  BotQ.A BotLatency SU(18) 29c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 17 
  Cand SU(14) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %132
  UpdateRegP: SU(12) %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(17) %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(17) 30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 16 
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %139
  UpdateRegP: SU(16) %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
  BotQ.A BotLatency SU(16) 31c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %139:gr64_nosp = LEA64r %143:gr64_nosp, 1, $noreg, 2, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @32c
  BotQ.A BotLatency SU(15) 32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
Bottom Pressure:
GR16=20
  LiveReg: %135
  UpdateRegP: SU(14) %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
              to FR32 -1    FR32X -1
  Ready @33c
  BotQ.A BotLatency SU(14) 33c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 3 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %136:gr64_nosp = MOVSX64rr32 %126:gr32
Bottom Pressure:
GR16=20
  LiveReg: %126
  UpdateRegP: SU(3) MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %126:gr32 :: (store 4 into %ir.i1)
              to 
  UpdateRegP: SU(13) %136:gr64_nosp = MOVSX64rr32 %126:gr32
              to GR16 -2
  Ready @34c
  BotQ.A BotLatency SU(13) 34c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 12 
  Cand SU(3) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=18
  Ready @34c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 8 11 
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=18
  LiveReg: %134
  UpdateRegP: SU(11) %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @35c
  BotQ.A BotLatency SU(11) 35c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 8 10 
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %134:gr64_nosp = COPY %143:gr64_nosp
Bottom Pressure:
GR16=16
  Ready @35c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 8 9 
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %143:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=14
  Ready @39c
  BotQ.A BotLatency SU(9) 39c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 8 
  Cand SU(3) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  LiveReg: %130
  UpdateRegP: SU(8) %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @35c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 7 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %131:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
GR16=12
  Ready @39c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %130
  UpdateRegP: SU(6) %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @36c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %130:gr64_nosp = LEA64r %149:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
GR16=10
  Ready @37c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %149:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=8
  Ready @41c
  BotQ.A BotLatency SU(4) 41c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %126:gr32 :: (store 4 into %ir.i1)
Bottom Pressure:
GR16=8
  Ready @34c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %126:gr32 = nsw SUB32rm %126:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
GR16=8
  LiveReg: %126
  UpdateRegP: SU(2) %126:gr32 = nsw SUB32rm %126:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
              to GR16 -2
  Ready @38c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %126:gr32 = LEA64_32r %167:gr64_nosp, 1, %167:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  Ready @39c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %167.sub_32bit:gr64_nosp = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
Bottom Pressure:
GR16=4
  Ready @43c
  BotQ.A BotLatency SU(0) 43c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   undef %167.sub_32bit:gr64_nosp = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
SU(1):   %126:gr32 = LEA64_32r %167:gr64_nosp, 1, %167:gr64_nosp, 0, $noreg
SU(2):   %126:gr32 = nsw SUB32rm %126:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
SU(3):   MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %126:gr32 :: (store 4 into %ir.i1)
SU(4):   %149:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(5):   %130:gr64_nosp = LEA64r %149:gr64_nosp, 1, $noreg, 1, $noreg
SU(6):   %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %131:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
SU(8):   %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
SU(9):   %143:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(10):   %134:gr64_nosp = COPY %143:gr64_nosp
SU(11):   %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
SU(13):   %136:gr64_nosp = MOVSX64rr32 %126:gr32
SU(14):   %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
SU(15):   %139:gr64_nosp = LEA64r %143:gr64_nosp, 1, $noreg, 2, $noreg
SU(16):   %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(17):   %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
SU(18):   %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
SU(19):   %143:gr64_nosp = nsw INC64r %143:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(20):   %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(21):   %144:gr64_nosp = COPY %149:gr64_nosp
SU(22):   %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
SU(24):   %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
SU(25):   %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
SU(26):   %149:gr64_nosp = nsw ADD64ri8 %149:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
SU(27):   %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
SU(28):   %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
SU(29):   %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
SU(30):   %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
SU(31):   MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
SU(32):   %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
SU(33):   %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
SU(34):   %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
SU(35):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
SU(36):   %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
SU(37):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
SU(38):   %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
SU(39):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
SU(40):   MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
SU(41):   %167.sub_32bit:gr64_nosp = nsw INC32r %167.sub_32bit:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(42):   MOV32mr %stack.13.j1, 1, $noreg, 0, $noreg, %167.sub_32bit:gr64_nosp :: (store 4 into %ir.j1)

********** MI Scheduling **********
rprj3:%bb.19 for.cond89
  From: %59:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
    To: JCC_1 %bb.21, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %59:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%59
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%59
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%59
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.j1, 1, $noreg, 0, $noreg, %59:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%59
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.21, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.j1, 1, $noreg, 0, $noreg, %59:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %59:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %59:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
SU(1):   %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.j1, 1, $noreg, 0, $noreg, %59:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j1)

********** MI Scheduling **********
rprj3:%bb.20 for.body92
  From: %63:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
    To: JMP_1 %bb.19
 RegionInstrs: 68
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=8
FR32X=8
GR16=26
Live In: %3 %116 %165 %164 %163 %162 %1 %129 
Live Out: %3 %116 %165 %164 %163 %162 %1 %129 
Live Thru: FR32=4
FR32X=4
GR16=8
  LiveReg: %3
  UpdateRegP: SU(63) %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %116
  UpdateRegP: SU(59) %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %165
  UpdateRegP: SU(56) %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
              to 
  LiveReg: %164
  UpdateRegP: SU(52) %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
              to 
  LiveReg: %163
  UpdateRegP: SU(47) %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
              to 
  LiveReg: %162
  UpdateRegP: SU(44) %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
              to 
  LiveReg: %1
  UpdateRegP: SU(6) %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(21) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(35) %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %129
  UpdateRegP: SU(9) %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(16) %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(28) %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=4
FR32X=4
GR16=8
Bottom Pressure:
FR32=4
FR32X=4
GR16=8
Excess PSets: 
SU(0):   %63:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 60
  Successors:
    SU(1): Data Latency=4 Reg=%63
    SU(1): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %63:gr32 = ADD32rr %63:gr32(tied-def 0), %63:gr32, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 56
  Predecessors:
    SU(0): Data Latency=4 Reg=%63
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%63
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %63:gr32 = nsw SUB32rm %63:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 55
  Predecessors:
    SU(1): Data Latency=1 Reg=%63
    SU(1): Out  Latency=0
  Successors:
    SU(13): Data Latency=4 Reg=%63
    SU(3): Data Latency=4 Reg=%63
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %63:gr32 :: (store 4 into %ir.i1)
  # preds left       : 1
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 51
  Predecessors:
    SU(2): Data Latency=4 Reg=%63
  Successors:
    SU(45): Ord  Latency=1 Memory
    SU(43): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %93:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 56
  Successors:
    SU(34): Data Latency=4 Reg=%93
    SU(20): Data Latency=4 Reg=%93
    SU(5): Data Latency=4 Reg=%93
    SU(34): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %66:gr64_nosp = COPY %93:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 52
  Predecessors:
    SU(4): Data Latency=4 Reg=%93
  Successors:
    SU(6): Data Latency=0 Reg=%66
    SU(6): Out  Latency=0
    SU(34): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 52
  Predecessors:
    SU(5): Data Latency=0 Reg=%66
    SU(5): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%66
    SU(18): Data Latency=1 Reg=%66
    SU(12): Data Latency=1 Reg=%66
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %86:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 57
  Successors:
    SU(27): Data Latency=4 Reg=%86
    SU(15): Data Latency=4 Reg=%86
    SU(8): Data Latency=4 Reg=%86
    SU(27): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %68:gr64_nosp = COPY %86:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 53
  Predecessors:
    SU(7): Data Latency=4 Reg=%86
  Successors:
    SU(9): Data Latency=0 Reg=%68
    SU(9): Out  Latency=0
    SU(27): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 53
  Predecessors:
    SU(8): Data Latency=0 Reg=%68
    SU(8): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%68
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %69:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 56
  Successors:
    SU(29): Data Latency=4 Reg=%69
    SU(17): Data Latency=4 Reg=%69
    SU(11): Data Latency=4 Reg=%69
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 52
  Predecessors:
    SU(9): Data Latency=1 Reg=%68
    SU(10): Data Latency=4 Reg=%69
  Successors:
    SU(36): Data Latency=1 Reg=%70
    SU(22): Data Latency=1 Reg=%70
    SU(12): Data Latency=1 Reg=%70
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 51
  Predecessors:
    SU(11): Data Latency=1 Reg=%70
    SU(6): Data Latency=1 Reg=%66
  Successors:
    SU(14): Data Latency=1 Reg=%71
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %72:gr64_nosp = MOVSX64rr32 %63:gr32
  # preds left       : 1
  # succs left       : 15
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 51
  Predecessors:
    SU(2): Data Latency=4 Reg=%63
  Successors:
    SU(55): Data Latency=1 Reg=%72
    SU(54): Data Latency=1 Reg=%72
    SU(50): Data Latency=1 Reg=%72
    SU(49): Data Latency=1 Reg=%72
    SU(45): Data Latency=1 Reg=%72
    SU(43): Data Latency=1 Reg=%72
    SU(42): Data Latency=1 Reg=%72
    SU(39): Data Latency=1 Reg=%72
    SU(37): Data Latency=1 Reg=%72
    SU(33): Data Latency=1 Reg=%72
    SU(31): Data Latency=1 Reg=%72
    SU(25): Data Latency=1 Reg=%72
    SU(23): Data Latency=1 Reg=%72
    SU(19): Data Latency=1 Reg=%72
    SU(14): Data Latency=1 Reg=%72
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 50
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(12): Data Latency=1 Reg=%71
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%82
    SU(19): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(15):   %75:gr64_nosp = LEA64r %86:gr64_nosp, 1, $noreg, 2, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 50
  Predecessors:
    SU(7): Data Latency=4 Reg=%86
  Successors:
    SU(16): Data Latency=1 Reg=%75
    SU(16): Out  Latency=0
    SU(27): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 49
  Predecessors:
    SU(15): Data Latency=1 Reg=%75
    SU(15): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%75
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 48
  Predecessors:
    SU(16): Data Latency=1 Reg=%75
    SU(10): Data Latency=4 Reg=%69
  Successors:
    SU(38): Data Latency=1 Reg=%76
    SU(24): Data Latency=1 Reg=%76
    SU(18): Data Latency=1 Reg=%76
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 47
  Predecessors:
    SU(17): Data Latency=1 Reg=%76
    SU(6): Data Latency=1 Reg=%66
  Successors:
    SU(19): Data Latency=1 Reg=%77
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 46
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(14): Data Latency=4 Reg=%82
    SU(14): Out  Latency=0
    SU(18): Data Latency=1 Reg=%77
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(23): Data Latency=4 Reg=%82
    SU(23): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(20):   %80:gr64_nosp = LEA64r %93:gr64_nosp, 1, $noreg, 2, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 45
  Predecessors:
    SU(4): Data Latency=4 Reg=%93
  Successors:
    SU(21): Data Latency=1 Reg=%80
    SU(21): Out  Latency=0
    SU(34): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 44
  Predecessors:
    SU(20): Data Latency=1 Reg=%80
    SU(20): Out  Latency=0
  Successors:
    SU(32): Data Latency=1 Reg=%80
    SU(24): Data Latency=1 Reg=%80
    SU(22): Data Latency=1 Reg=%80
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 43
  Predecessors:
    SU(21): Data Latency=1 Reg=%80
    SU(11): Data Latency=1 Reg=%70
  Successors:
    SU(23): Data Latency=1 Reg=%81
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(23):   %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 42
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(19): Data Latency=4 Reg=%82
    SU(19): Out  Latency=0
    SU(22): Data Latency=1 Reg=%81
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(25): Data Latency=4 Reg=%82
    SU(25): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(24):   %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 39
  Predecessors:
    SU(17): Data Latency=1 Reg=%76
    SU(21): Data Latency=1 Reg=%80
  Successors:
    SU(25): Data Latency=1 Reg=%83
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(25):   %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 38
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(23): Data Latency=4 Reg=%82
    SU(23): Out  Latency=0
    SU(24): Data Latency=1 Reg=%83
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(51): Data Latency=4 Reg=%82
    SU(26): Data Latency=4 Reg=%82
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   MOVSDmr %stack.24.y2, 1, $noreg, 0, $noreg, %82:fr64 :: (store 8 into %ir.y2)
  # preds left       : 5
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 34
  Predecessors:
    SU(25): Data Latency=4 Reg=%82
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Successors:
    SU(45): Ord  Latency=1 Memory
    SU(43): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(27):   %86:gr64_nosp = nsw INC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 37
  Predecessors:
    SU(15): Anti Latency=0
    SU(8): Anti Latency=0
    SU(7): Data Latency=4 Reg=%86
    SU(7): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%86
    SU(28): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 36
  Predecessors:
    SU(27): Data Latency=1 Reg=%86
    SU(27): Out  Latency=0
  Successors:
    SU(29): Data Latency=1 Reg=%86
  Pressure Diff      : 
  Single Issue       : false;
SU(29):   %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 35
  Predecessors:
    SU(28): Data Latency=1 Reg=%86
    SU(10): Data Latency=4 Reg=%69
  Successors:
    SU(41): Data Latency=1 Reg=%87
    SU(32): Data Latency=1 Reg=%87
    SU(30): Data Latency=1 Reg=%87
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(30):   %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 34
  Predecessors:
    SU(29): Data Latency=1 Reg=%87
    SU(6): Data Latency=1 Reg=%66
  Successors:
    SU(31): Data Latency=1 Reg=%88
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(31):   %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 27
  Height             : 33
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(26): Ord  Latency=1 Memory
    SU(30): Data Latency=1 Reg=%88
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(33): Data Latency=4 Reg=%95
    SU(33): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(32):   %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(29): Data Latency=1 Reg=%87
    SU(21): Data Latency=1 Reg=%80
  Successors:
    SU(33): Data Latency=1 Reg=%90
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(33):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 29
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(31): Data Latency=4 Reg=%95
    SU(31): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(32): Data Latency=1 Reg=%90
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(37): Data Latency=4 Reg=%95
    SU(37): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(34):   %93:gr64_nosp = nsw INC64r %93:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(20): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%93
    SU(4): Out  Latency=0
  Successors:
    SU(35): Data Latency=1 Reg=%93
    SU(35): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(34): Data Latency=1 Reg=%93
    SU(34): Out  Latency=0
  Successors:
    SU(41): Data Latency=1 Reg=%93
    SU(38): Data Latency=1 Reg=%93
    SU(36): Data Latency=1 Reg=%93
  Pressure Diff      : 
  Single Issue       : false;
SU(36):   %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 26
  Predecessors:
    SU(35): Data Latency=1 Reg=%93
    SU(11): Data Latency=1 Reg=%70
  Successors:
    SU(37): Data Latency=1 Reg=%94
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(37):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 25
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(33): Data Latency=4 Reg=%95
    SU(33): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(36): Data Latency=1 Reg=%94
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(39): Data Latency=4 Reg=%95
    SU(39): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(38):   %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(17): Data Latency=1 Reg=%76
    SU(35): Data Latency=1 Reg=%93
  Successors:
    SU(39): Data Latency=1 Reg=%96
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(39):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 39
  Height             : 21
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(37): Data Latency=4 Reg=%95
    SU(37): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(38): Data Latency=1 Reg=%96
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(46): Data Latency=4 Reg=%95
    SU(40): Data Latency=4 Reg=%95
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(40):   MOVSDmr %stack.23.x2, 1, $noreg, 0, $noreg, %95:fr64 :: (store 8 into %ir.x2)
  # preds left       : 9
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 43
  Height             : 17
  Predecessors:
    SU(39): Data Latency=4 Reg=%95
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Successors:
    SU(45): Ord  Latency=1 Memory
    SU(43): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(41):   %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 17
  Predecessors:
    SU(29): Data Latency=1 Reg=%87
    SU(35): Data Latency=1 Reg=%93
  Successors:
    SU(45): Data Latency=1 Reg=%98
    SU(43): Data Latency=1 Reg=%98
    SU(42): Data Latency=1 Reg=%98
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(42):   %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 44
  Height             : 16
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(40): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(41): Data Latency=1 Reg=%98
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(45): Data Latency=4 Reg=%103
    SU(45): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(43):   %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 44
  Height             : 11
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
    SU(40): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(41): Data Latency=1 Reg=%98
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(44): Data Latency=4 Reg=%101
    SU(44): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(44):   %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 48
  Height             : 7
  Predecessors:
    SU(43): Data Latency=4 Reg=%101
    SU(43): Out  Latency=0
  Successors:
    SU(48): Data Latency=1 Reg=%101
  Pressure Diff      : 
  Single Issue       : false;
SU(45):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 12
  Predecessors:
    SU(42): Data Latency=4 Reg=%103
    SU(42): Out  Latency=0
    SU(41): Data Latency=1 Reg=%98
    SU(40): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(13): Data Latency=1 Reg=%72
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(46): Data Latency=4 Reg=%103
    SU(46): Out  Latency=0
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(46):   %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 52
  Height             : 8
  Predecessors:
    SU(45): Data Latency=4 Reg=%103
    SU(45): Out  Latency=0
    SU(39): Data Latency=4 Reg=%95
  Successors:
    SU(47): Data Latency=1 Reg=%103
    SU(47): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(47):   %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 53
  Height             : 7
  Predecessors:
    SU(46): Data Latency=1 Reg=%103
    SU(46): Out  Latency=0
  Successors:
    SU(48): Data Latency=1 Reg=%103
    SU(48): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(48):   %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 54
  Height             : 6
  Predecessors:
    SU(47): Data Latency=1 Reg=%103
    SU(47): Out  Latency=0
    SU(44): Data Latency=1 Reg=%101
  Successors:
    SU(53): Data Latency=1 Reg=%103
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(49):   %108:fr64 = MOVSDrm_alt %stack.21.x1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx199)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
  Successors:
    SU(50): Data Latency=4 Reg=%108
    SU(50): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(50):   %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 11
  Predecessors:
    SU(49): Data Latency=4 Reg=%108
    SU(49): Out  Latency=0
    SU(13): Data Latency=1 Reg=%72
  Successors:
    SU(51): Data Latency=4 Reg=%108
    SU(51): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(51):   %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 7
  Predecessors:
    SU(25): Data Latency=4 Reg=%82
    SU(50): Out  Latency=0
    SU(50): Data Latency=4 Reg=%108
  Successors:
    SU(52): Data Latency=1 Reg=%108
    SU(52): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(52):   %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 6
  Predecessors:
    SU(51): Data Latency=1 Reg=%108
    SU(51): Out  Latency=0
  Successors:
    SU(53): Data Latency=1 Reg=%108
    SU(53): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(53):   %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 55
  Height             : 5
  Predecessors:
    SU(48): Data Latency=1 Reg=%103
    SU(52): Out  Latency=0
    SU(52): Data Latency=1 Reg=%108
  Successors:
    SU(57): Data Latency=1 Reg=%108
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(54):   %113:fr64 = MOVSDrm_alt %stack.22.y1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx208)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 13
  Predecessors:
    SU(13): Data Latency=1 Reg=%72
  Successors:
    SU(55): Data Latency=4 Reg=%113
    SU(55): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(55):   %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 9
  Predecessors:
    SU(54): Data Latency=4 Reg=%113
    SU(54): Out  Latency=0
    SU(13): Data Latency=1 Reg=%72
  Successors:
    SU(56): Data Latency=4 Reg=%113
    SU(56): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(56):   %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(55): Data Latency=4 Reg=%113
    SU(55): Out  Latency=0
  Successors:
    SU(57): Data Latency=1 Reg=%113
    SU(57): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(57):   %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 56
  Height             : 4
  Predecessors:
    SU(53): Data Latency=1 Reg=%108
    SU(56): Out  Latency=0
    SU(56): Data Latency=1 Reg=%113
  Successors:
    SU(66): Data Latency=1 Reg=%113
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(58):   %118:gr64 = MOVSX64rm32 %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(59): Data Latency=4 Reg=%118
    SU(59): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(59):   %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(58): Data Latency=4 Reg=%118
    SU(58): Out  Latency=0
  Successors:
    SU(60): Data Latency=1 Reg=%118
    SU(60): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(60):   %118:gr64 = SHL64ri %118:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(59): Data Latency=1 Reg=%118
    SU(59): Out  Latency=0
  Successors:
    SU(61): Data Latency=1 Reg=%118
    SU(61): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(61):   %118:gr64 = ADD64rm %118:gr64(tied-def 0), %stack.10.s, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.s)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(60): Data Latency=1 Reg=%118
    SU(60): Out  Latency=0
  Successors:
    SU(64): Data Latency=4 Reg=%118
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(62):   %121:gr64_nosp = MOVSX64rm32 %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(63): Data Latency=4 Reg=%121
    SU(63): Out  Latency=0
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(63):   %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(62): Data Latency=4 Reg=%121
    SU(62): Out  Latency=0
  Successors:
    SU(64): Data Latency=1 Reg=%121
  Pressure Diff      : 
  Single Issue       : false;
SU(64):   %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(61): Data Latency=4 Reg=%118
    SU(63): Data Latency=1 Reg=%121
  Successors:
    SU(66): Data Latency=1 Reg=%122
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(65):   %123:gr64_nosp = MOVSX64rm32 %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(66): Data Latency=4 Reg=%123
    SU(67): Ord  Latency=0 Memory
    SU(66): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(66):   MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
  # preds left       : 30
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 57
  Height             : 3
  Predecessors:
    SU(57): Data Latency=1 Reg=%113
    SU(65): Ord  Latency=0 Memory
    SU(64): Data Latency=1 Reg=%122
    SU(62): Ord  Latency=0 Memory
    SU(61): Ord  Latency=0 Memory
    SU(58): Ord  Latency=0 Memory
    SU(65): Data Latency=4 Reg=%123
    SU(55): Ord  Latency=0 Memory
    SU(54): Ord  Latency=0 Memory
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(67): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(67):   INC32m %stack.13.j1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j1), (dereferenceable load 4 from %ir.j1)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 57
  Height             : 3
  Predecessors:
    SU(66): Ord  Latency=0 Memory
    SU(65): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 60
  Height             : 0
  Predecessors:
    SU(67): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 60
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 67 
Scheduling SU(67) INC32m %stack.13.j1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j1), (dereferenceable load 4 from %ir.j1)
Bottom Pressure:
FR32=4
FR32X=4
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(67) 57c
  BotQ.A BotLatency SU(67) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 66 
Scheduling SU(66) MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
Bottom Pressure:
FR32=5
FR32X=5
GR16=12
  LiveReg: %122
  UpdateRegP: SU(66) MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %123
  UpdateRegP: SU(66) MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
              to FR32 1    FR32X 1
  LiveReg: %113
  UpdateRegP: SU(66) MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 64 65 
  Cand SU(57) ORDER                              
  Cand SU(64) ORDER                              
  Cand SU(65) ORDER                              
Pick Bot ORDER     
Scheduling SU(65) %123:gr64_nosp = MOVSX64rm32 %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
Bottom Pressure:
FR32=5
FR32X=5
GR16=10
  Ready @7c
  BotQ.A BotLatency SU(65) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 64 
  Cand SU(57) ORDER                              
  Cand SU(64) ORDER                              
Pick Bot ORDER     
Scheduling SU(64) %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=12
  LiveReg: %118
  UpdateRegP: SU(64) %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
              to 
  LiveReg: %121
  UpdateRegP: SU(64) %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 61 63 
  Cand SU(57) ORDER                              
  Cand SU(61) ORDER                              
  Cand SU(63) ORDER                              
Pick Bot ORDER     
Scheduling SU(63) %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=12
  LiveReg: %121
  UpdateRegP: SU(63) %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 61 62 
  Cand SU(57) ORDER                              
  Cand SU(61) ORDER                              
  Cand SU(62) ORDER                              
Pick Bot ORDER     
Scheduling SU(62) %121:gr64_nosp = MOVSX64rm32 %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
Bottom Pressure:
FR32=5
FR32X=5
GR16=10
  Ready @9c
  BotQ.A BotLatency SU(62) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 61 
  Cand SU(57) ORDER                              
  Cand SU(61) ORDER                              
Pick Bot ORDER     
Scheduling SU(61) %118:gr64 = ADD64rm %118:gr64(tied-def 0), %stack.10.s, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.s)
Bottom Pressure:
FR32=5
FR32X=5
GR16=10
  LiveReg: %118
  UpdateRegP: SU(61) %118:gr64 = ADD64rm %118:gr64(tied-def 0), %stack.10.s, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.s)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 60 
  Cand SU(57) ORDER                              
  Cand SU(60) ORDER                              
Pick Bot ORDER     
Scheduling SU(60) %118:gr64 = SHL64ri %118:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=10
  LiveReg: %118
  UpdateRegP: SU(60) %118:gr64 = SHL64ri %118:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 59 
  Cand SU(57) ORDER                              
  Cand SU(59) ORDER                              
Pick Bot ORDER     
Scheduling SU(59) %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=10
  LiveReg: %118
  UpdateRegP: SU(59) %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(59) 10c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 58 
  Cand SU(57) ORDER                              
  Cand SU(58) ORDER                              
Pick Bot ORDER     
Scheduling SU(58) %118:gr64 = MOVSX64rm32 %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
Bottom Pressure:
FR32=5
FR32X=5
GR16=8
  Ready @14c
  BotQ.A BotLatency SU(58) 14c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 57 
Scheduling SU(57) %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
Bottom Pressure:
FR32=6
FR32X=6
GR16=8
  LiveReg: %113
  UpdateRegP: SU(57) %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
              to 
  LiveReg: %108
  UpdateRegP: SU(57) %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A TopLatency SU(57) 56c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 53 56 
  Cand SU(53) ORDER                              
  Cand SU(56) ORDER                              
Pick Bot ORDER     
Scheduling SU(56) %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
Bottom Pressure:
FR32=6
FR32X=6
GR16=8
  LiveReg: %113
  UpdateRegP: SU(56) %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
              to FR32 -1    FR32X -1
  Ready @5c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 53 55 
  Cand SU(53) ORDER                              
  Cand SU(55) ORDER                              
Pick Bot ORDER     
Scheduling SU(55) %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
Bottom Pressure:
FR32=6
FR32X=6
GR16=10
  LiveReg: %113
  UpdateRegP: SU(55) %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %72
  UpdateRegP: SU(14) %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(19) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
              to GR16 2
  UpdateRegP: SU(23) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
              to GR16 2
  UpdateRegP: SU(25) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
              to GR16 2
  UpdateRegP: SU(31) %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(33) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
              to GR16 2
  UpdateRegP: SU(37) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
              to GR16 2
  UpdateRegP: SU(39) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
              to GR16 2
  UpdateRegP: SU(42) %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(43) %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(45) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
              to GR16 2
  UpdateRegP: SU(49) %108:fr64 = MOVSDrm_alt %stack.21.x1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx199)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(50) %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
              to 
  UpdateRegP: SU(54) %113:fr64 = MOVSDrm_alt %stack.22.y1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx208)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(55) %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
              to FR32 -1    FR32X -1
  Ready @9c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 53 54 
  Cand SU(53) ORDER                              
  Cand SU(54) ORDER                              
Pick Bot ORDER     
Scheduling SU(54) %113:fr64 = MOVSDrm_alt %stack.22.y1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx208)
Bottom Pressure:
FR32=5
FR32X=5
GR16=10
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 53 
Scheduling SU(53) %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
Bottom Pressure:
FR32=6
FR32X=6
GR16=10
  LiveReg: %108
  UpdateRegP: SU(53) %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
              to 
  LiveReg: %103
  UpdateRegP: SU(53) %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 52 
  Cand SU(48) ORDER                              
  Cand SU(52) ORDER                              
Pick Bot ORDER     
Scheduling SU(52) %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
Bottom Pressure:
FR32=6
FR32X=6
GR16=10
  LiveReg: %108
  UpdateRegP: SU(52) %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 51 
  Cand SU(48) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
Bottom Pressure:
FR32=7
FR32X=7
GR16=10
  LiveReg: %108
  UpdateRegP: SU(51) %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
              to 
  LiveReg: %82
  UpdateRegP: SU(26) MOVSDmr %stack.24.y2, 1, $noreg, 0, $noreg, %82:fr64 :: (store 8 into %ir.y2)
              to 
  UpdateRegP: SU(51) %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
              to FR32 -1    FR32X -1
  Ready @7c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 50 
  Cand SU(48) ORDER                              
  Cand SU(50) ORDER                              
Pick Bot ORDER     
Scheduling SU(50) %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
Bottom Pressure:
FR32=7
FR32X=7
GR16=10
  LiveReg: %108
  UpdateRegP: SU(50) %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 49 
  Cand SU(48) ORDER                              
  Cand SU(49) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) %108:fr64 = MOVSDrm_alt %stack.21.x1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx199)
Bottom Pressure:
FR32=6
FR32X=6
GR16=10
  Ready @15c
  BotQ.A BotLatency SU(49) 15c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 
Scheduling SU(48) %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
Bottom Pressure:
FR32=7
FR32X=7
GR16=10
  LiveReg: %103
  UpdateRegP: SU(48) %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
              to 
  LiveReg: %101
  UpdateRegP: SU(48) %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 44 
  Cand SU(47) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
Bottom Pressure:
FR32=7
FR32X=7
GR16=10
  LiveReg: %103
  UpdateRegP: SU(47) %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
              to FR32 -1    FR32X -1
  Ready @7c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 46 
  Cand SU(44) ORDER                              
  Cand SU(46) ORDER                              
Pick Bot ORDER     
Scheduling SU(46) %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
Bottom Pressure:
FR32=8
FR32X=8
GR16=10
  LiveReg: %103
  UpdateRegP: SU(46) %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
              to 
  LiveReg: %95
  UpdateRegP: SU(40) MOVSDmr %stack.23.x2, 1, $noreg, 0, $noreg, %95:fr64 :: (store 8 into %ir.x2)
              to 
  UpdateRegP: SU(46) %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
              to FR32 -1    FR32X -1
  Ready @8c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 45 
  Cand SU(44) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
Bottom Pressure:
FR32=8
FR32X=8
GR16=12
  LiveReg: %103
  UpdateRegP: SU(45) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %98
  UpdateRegP: SU(42) %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(43) %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(45) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 42 
  Cand SU(44) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
Bottom Pressure:
FR32=8
FR32X=8
GR16=12
  LiveReg: %101
  UpdateRegP: SU(44) %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 43 
  Cand SU(42) ORDER                              
  Cand SU(43) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
Bottom Pressure:
FR32=7
FR32X=7
GR16=12
  Ready @11c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 
Scheduling SU(42) %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
Bottom Pressure:
FR32=6
FR32X=6
GR16=12
  Ready @16c
  BotQ.A BotLatency SU(42) 16c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 41 
  Cand SU(40) ORDER                              
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=6
FR32X=6
GR16=14
  LiveReg: %87
  UpdateRegP: SU(30) %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(32) %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(41) %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
              to 
  LiveReg: %93
  UpdateRegP: SU(36) %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(38) %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(41) %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(41) 17c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 
Scheduling SU(40) MOVSDmr %stack.23.x2, 1, $noreg, 0, $noreg, %95:fr64 :: (store 8 into %ir.x2)
Bottom Pressure:
FR32=6
FR32X=6
GR16=14
  Ready @17c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 39 
Scheduling SU(39) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
Bottom Pressure:
FR32=6
FR32X=6
GR16=16
  LiveReg: %95
  UpdateRegP: SU(39) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %96
  UpdateRegP: SU(39) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(39) 21c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 38 
  Cand SU(37) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=6
FR32X=6
GR16=16
  LiveReg: %76
  UpdateRegP: SU(18) %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(24) %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(38) %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(38) 22c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 
Scheduling SU(37) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
Bottom Pressure:
FR32=6
FR32X=6
GR16=18
  LiveReg: %95
  UpdateRegP: SU(37) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %94
  UpdateRegP: SU(37) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
              to FR32 -1    FR32X -1
  Ready @25c
  BotQ.A BotLatency SU(37) 25c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 36 
  Cand SU(33) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=6
FR32X=6
GR16=18
  LiveReg: %70
  UpdateRegP: SU(12) %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(22) %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(36) %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(36) 26c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 35 
  Cand SU(33) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=6
FR32X=6
GR16=18
  LiveReg: %93
  UpdateRegP: SU(35) %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(35) 27c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 34 
  Cand SU(33) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %93:gr64_nosp = nsw INC64r %93:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=6
FR32X=6
GR16=18
  LiveReg: %93
  UpdateRegP: SU(5) %66:gr64_nosp = COPY %93:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(20) %80:gr64_nosp = LEA64r %93:gr64_nosp, 1, $noreg, 2, $noreg
              to GR16 -2
  UpdateRegP: SU(34) %93:gr64_nosp = nsw INC64r %93:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(34) 28c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
Bottom Pressure:
FR32=6
FR32X=6
GR16=20
  LiveReg: %95
  UpdateRegP: SU(33) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %90
  UpdateRegP: SU(33) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
              to FR32 -1    FR32X -1
  Ready @29c
  BotQ.A BotLatency SU(33) 29c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 32 
  Cand SU(31) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=6
FR32X=6
GR16=20
  LiveReg: %80
  UpdateRegP: SU(22) %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(32) %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(32) 30c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
Bottom Pressure:
FR32=5
FR32X=5
GR16=22
  LiveReg: %88
  UpdateRegP: SU(31) %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
              to FR32 -1    FR32X -1
  Ready @33c
  BotQ.A BotLatency SU(31) 33c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 30 
  Cand SU(26) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=22
  LiveReg: %66
  UpdateRegP: SU(12) %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(18) %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(30) %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @34c
  BotQ.A BotLatency SU(30) 34c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 29 
  Cand SU(26) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  GR16: 24 <= 26(+ 8 livethru)
  LiveReg: %69
  UpdateRegP: SU(11) %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(17) %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(29) %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
              to 
  LiveReg: %86
  UpdateRegP: SU(29) %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @35c
  BotQ.A BotLatency SU(29) 35c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 28 
  Cand SU(26) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  LiveReg: %86
  UpdateRegP: SU(28) %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @36c
  BotQ.A BotLatency SU(28) 36c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 27 
  Cand SU(26) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %86:gr64_nosp = nsw INC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  LiveReg: %86
  UpdateRegP: SU(8) %68:gr64_nosp = COPY %86:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(15) %75:gr64_nosp = LEA64r %86:gr64_nosp, 1, $noreg, 2, $noreg
              to GR16 -2
  UpdateRegP: SU(27) %86:gr64_nosp = nsw INC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @37c
  BotQ.A BotLatency SU(27) 37c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) MOVSDmr %stack.24.y2, 1, $noreg, 0, $noreg, %82:fr64 :: (store 8 into %ir.y2)
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  Ready @34c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
Bottom Pressure:
FR32=5
FR32X=5
GR16=26
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %82
  UpdateRegP: SU(25) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %83
  UpdateRegP: SU(25) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
              to FR32 -1    FR32X -1
  Ready @38c
  BotQ.A BotLatency SU(25) 38c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 24 
  Cand SU(23) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  GR16: 26 <= 26(+ 8 livethru)
  Ready @39c
  BotQ.A BotLatency SU(24) 39c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
Bottom Pressure:
FR32=5
FR32X=5
GR16=26
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %82
  UpdateRegP: SU(23) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %81
  UpdateRegP: SU(23) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
              to FR32 -1    FR32X -1
  Ready @42c
  BotQ.A BotLatency SU(23) 42c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 22 
  Cand SU(19) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  GR16: 26 <= 26(+ 8 livethru)
  Ready @43c
  BotQ.A BotLatency SU(22) 43c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
  Cand SU(19) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  LiveReg: %80
  UpdateRegP: SU(21) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @44c
  BotQ.A BotLatency SU(21) 44c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 20 
  Cand SU(19) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %80:gr64_nosp = LEA64r %93:gr64_nosp, 1, $noreg, 2, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=22
  GR16: 26 <= 26(+ 8 livethru)
  Ready @45c
  BotQ.A BotLatency SU(20) 45c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 45c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
Bottom Pressure:
FR32=5
FR32X=5
GR16=24
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %82
  UpdateRegP: SU(19) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %77
  UpdateRegP: SU(19) %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
              to FR32 -1    FR32X -1
  Ready @46c
  BotQ.A BotLatency SU(19) 46c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 18 
  Cand SU(14) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=22
  GR16: 26 <= 26(+ 8 livethru)
  Ready @47c
  BotQ.A BotLatency SU(18) 47c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 17 
  Cand SU(14) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=22
  LiveReg: %75
  UpdateRegP: SU(17) %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @48c
  BotQ.A BotLatency SU(17) 48c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 16 
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=5
FR32X=5
GR16=22
  LiveReg: %75
  UpdateRegP: SU(16) %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @49c
  BotQ.A BotLatency SU(16) 49c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 49c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %75:gr64_nosp = LEA64r %86:gr64_nosp, 1, $noreg, 2, $noreg
Bottom Pressure:
FR32=5
FR32X=5
GR16=20
  GR16: 26 <= 26(+ 8 livethru)
  Ready @50c
  BotQ.A BotLatency SU(15) 50c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
Bottom Pressure:
FR32=4
FR32X=4
GR16=22
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %71
  UpdateRegP: SU(14) %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
              to FR32 -1    FR32X -1
  Ready @50c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 3 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %72:gr64_nosp = MOVSX64rr32 %63:gr32
Bottom Pressure:
FR32=4
FR32X=4
GR16=22
  LiveReg: %63
  UpdateRegP: SU(3) MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %63:gr32 :: (store 4 into %ir.i1)
              to 
  UpdateRegP: SU(13) %72:gr64_nosp = MOVSX64rr32 %63:gr32
              to GR16 -2
  Ready @51c
  BotQ.A BotLatency SU(13) 51c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 12 
  Cand SU(3) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=4
FR32X=4
GR16=20
  GR16: 26 <= 26(+ 8 livethru)
  Ready @51c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 11 6 
  Cand SU(3) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=4
FR32X=4
GR16=20
  LiveReg: %68
  UpdateRegP: SU(11) %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @52c
  BotQ.A BotLatency SU(11) 52c
BotQ.A @14c
  Retired: 57
  Executed: 14c
  Critical: 14c, 57 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 9 10 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %69:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
FR32=4
FR32X=4
GR16=18
  GR16: 26 <= 26(+ 8 livethru)
  Ready @56c
  BotQ.A BotLatency SU(10) 56c
BotQ.A @14c
  Retired: 58
  Executed: 14c
  Critical: 14c, 58 MOps
  ExpectedLatency: 56c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 9 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=4
FR32X=4
GR16=18
  LiveReg: %68
  UpdateRegP: SU(9) %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @53c
BotQ.A @14c
  Retired: 59
  Executed: 14c
  Critical: 14c, 59 MOps
  ExpectedLatency: 56c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 8 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %68:gr64_nosp = COPY %86:gr64_nosp
Bottom Pressure:
FR32=4
FR32X=4
GR16=16
  GR16: 26 <= 26(+ 8 livethru)
  Ready @53c
BotQ.A @14c
  Retired: 59
  Executed: 14c
  Critical: 14c, 59 MOps
  ExpectedLatency: 56c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 7 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %86:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=4
FR32X=4
GR16=14
  GR16: 26 <= 26(+ 8 livethru)
  Ready @57c
  BotQ.A BotLatency SU(7) 57c
  *** Max MOps 4 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 60
  Executed: 15c
  Critical: 15c, 60 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=4
FR32X=4
GR16=14
  LiveReg: %66
  UpdateRegP: SU(6) %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @52c
BotQ.A @15c
  Retired: 61
  Executed: 15c
  Critical: 15c, 61 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %66:gr64_nosp = COPY %93:gr64_nosp
Bottom Pressure:
FR32=4
FR32X=4
GR16=12
  GR16: 26 <= 26(+ 8 livethru)
  Ready @52c
BotQ.A @15c
  Retired: 61
  Executed: 15c
  Critical: 15c, 61 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %93:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=4
FR32X=4
GR16=10
  GR16: 26 <= 26(+ 8 livethru)
  Ready @56c
BotQ.A @15c
  Retired: 62
  Executed: 15c
  Critical: 15c, 62 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %63:gr32 :: (store 4 into %ir.i1)
Bottom Pressure:
FR32=4
FR32X=4
GR16=10
  Ready @51c
BotQ.A @15c
  Retired: 63
  Executed: 15c
  Critical: 15c, 63 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %63:gr32 = nsw SUB32rm %63:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
FR32=4
FR32X=4
GR16=10
  LiveReg: %63
  UpdateRegP: SU(2) %63:gr32 = nsw SUB32rm %63:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
              to GR16 -2
  Ready @55c
  *** Max MOps 4 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 64
  Executed: 16c
  Critical: 16c, 64 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %63:gr32 = ADD32rr %63:gr32(tied-def 0), %63:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=4
FR32X=4
GR16=10
  LiveReg: %63
  UpdateRegP: SU(1) %63:gr32 = ADD32rr %63:gr32(tied-def 0), %63:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @56c
BotQ.A @16c
  Retired: 65
  Executed: 16c
  Critical: 16c, 65 MOps
  ExpectedLatency: 57c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %63:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
Bottom Pressure:
FR32=4
FR32X=4
GR16=8
  GR16: 26 <= 26(+ 8 livethru)
  Ready @60c
  BotQ.A BotLatency SU(0) 60c
BotQ.A @16c
  Retired: 66
  Executed: 16c
  Critical: 16c, 66 MOps
  ExpectedLatency: 60c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %63:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
SU(1):   %63:gr32 = ADD32rr %63:gr32(tied-def 0), %63:gr32, implicit-def dead $eflags
SU(2):   %63:gr32 = nsw SUB32rm %63:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
SU(3):   MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %63:gr32 :: (store 4 into %ir.i1)
SU(4):   %93:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %66:gr64_nosp = COPY %93:gr64_nosp
SU(6):   %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %86:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(8):   %68:gr64_nosp = COPY %86:gr64_nosp
SU(9):   %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
SU(10):   %69:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
SU(11):   %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
SU(12):   %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
SU(13):   %72:gr64_nosp = MOVSX64rr32 %63:gr32
SU(14):   %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
SU(15):   %75:gr64_nosp = LEA64r %86:gr64_nosp, 1, $noreg, 2, $noreg
SU(16):   %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
SU(17):   %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
SU(18):   %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
SU(19):   %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
SU(20):   %80:gr64_nosp = LEA64r %93:gr64_nosp, 1, $noreg, 2, $noreg
SU(21):   %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(22):   %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
SU(23):   %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
SU(24):   %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
SU(25):   %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
SU(26):   MOVSDmr %stack.24.y2, 1, $noreg, 0, $noreg, %82:fr64 :: (store 8 into %ir.y2)
SU(27):   %86:gr64_nosp = nsw INC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(28):   %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
SU(29):   %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
SU(30):   %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
SU(31):   %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
SU(32):   %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
SU(33):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
SU(34):   %93:gr64_nosp = nsw INC64r %93:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(35):   %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(36):   %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
SU(37):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
SU(38):   %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
SU(39):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
SU(40):   MOVSDmr %stack.23.x2, 1, $noreg, 0, $noreg, %95:fr64 :: (store 8 into %ir.x2)
SU(41):   %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
SU(42):   %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
SU(43):   %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
SU(44):   %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
SU(45):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
SU(46):   %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
SU(47):   %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
SU(48):   %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
SU(49):   %108:fr64 = MOVSDrm_alt %stack.21.x1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx199)
SU(50):   %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
SU(51):   %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
SU(52):   %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
SU(53):   %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
SU(54):   %113:fr64 = MOVSDrm_alt %stack.22.y1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx208)
SU(55):   %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
SU(56):   %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
SU(57):   %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
SU(58):   %118:gr64 = MOVSX64rm32 %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
SU(59):   %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
SU(60):   %118:gr64 = SHL64ri %118:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(61):   %118:gr64 = ADD64rm %118:gr64(tied-def 0), %stack.10.s, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.s)
SU(62):   %121:gr64_nosp = MOVSX64rm32 %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
SU(63):   %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(64):   %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
SU(65):   %123:gr64_nosp = MOVSX64rm32 %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
SU(66):   MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
SU(67):   INC32m %stack.13.j1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j1), (dereferenceable load 4 from %ir.j1)

********** MI Scheduling **********
rprj3:%bb.25 if.end232
  From: $rdi = COPY %28:gr64
    To: CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %28:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %29:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %30:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %31:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %27:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %27:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %31:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %30:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %29:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %28:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $rdi = COPY %28:gr64
SU(1):   $esi = COPY %29:gr32
SU(2):   $edx = COPY %30:gr32
SU(3):   $ecx = COPY %31:gr32
SU(4):   $r8d = COPY %27:gr32

********** MI Scheduling **********
rprj3:%bb.25 if.end232
  From: %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%27
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%27
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(2):   MOV32mr %stack.20.j, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.j)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(3):   %28:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %29:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %30:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   %31:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %31:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %30:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %29:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %28:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.20.j, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.j)
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
SU(1):   %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   MOV32mr %stack.20.j, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.j)
SU(3):   %28:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
SU(4):   %29:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
SU(5):   %30:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
SU(6):   %31:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)

********** MI Scheduling **********
rprj3:%bb.26 if.then235
  From: $rdi = COPY %32:gr64
    To: CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %32:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %33:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %34:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %35:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @.str.50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = COPY %37:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %37:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %35:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %34:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %33:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %32:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @.str.50
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(4):   $r8 = MOV32ri64 @.str.50
SU(0):   $rdi = COPY %32:gr64
SU(1):   $esi = COPY %33:gr32
SU(2):   $edx = COPY %34:gr32
SU(3):   $ecx = COPY %35:gr32
SU(5):   $r9d = COPY %37:gr32

********** MI Scheduling **********
rprj3:%bb.26 if.then235
  From: %32:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %32:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %33:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %34:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %35:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %37:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=4 Reg=%37
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%37
    SU(4): Out  Latency=0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
  Ready @0c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 4 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %37:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %35:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %34:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %33:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %32:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
SU(1):   %33:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
SU(2):   %34:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
SU(3):   %35:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
SU(4):   %37:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
SU(5):   %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags

********** MI Scheduling **********
rprj3:%bb.27 if.end237
  From: %39:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 16, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 4)`, align 16)
    To: JCC_1 %bb.29, 12, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 16, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 4)`, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   CMP32rm %39:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 12, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %39:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 16, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 4)`, align 16)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %39:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 16, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 4)`, align 16)
SU(1):   CMP32rm %39:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** MI Scheduling **********
rprj3:%bb.28 if.then239
  From: $rdi = COPY %41:gr64
    To: CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %41:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %42:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %43:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %44:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %44:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %43:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %42:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %41:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   $rdi = COPY %41:gr64
SU(1):   $esi = COPY %42:gr32
SU(2):   $edx = COPY %43:gr32
SU(3):   $ecx = COPY %44:gr32

********** MI Scheduling **********
rprj3:%bb.28 if.then239
  From: %41:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %41:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %42:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %43:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %44:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %44:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %43:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %42:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %41:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %41:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
SU(1):   %42:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
SU(2):   %43:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
SU(3):   %44:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)

********** INTERVALS **********
CH [0B,48r:0)[4848r,4880r:3)[5208r,5224r:2)[5472r,5488r:1)  0@0B-phi 1@5472r 2@5208r 3@4848r
CL [0B,48r:0)[4848r,4880r:3)[5208r,5224r:2)[5472r,5488r:1)  0@0B-phi 1@5472r 2@5208r 3@4848r
DH [0B,64r:0)[4832r,4880r:3)[5200r,5224r:2)[5456r,5488r:1)  0@0B-phi 1@5456r 2@5200r 3@4832r
DIL [0B,96r:0)[352r,368r:2)[4592r,4608r:1)[4800r,4880r:5)[5188r,5224r:4)[5424r,5488r:3)  0@0B-phi 1@4592r 2@352r 3@5424r 4@5188r 5@4800r
DIH [0B,96r:0)[352r,368r:2)[4592r,4608r:1)[4800r,4880r:5)[5188r,5224r:4)[5424r,5488r:3)  0@0B-phi 1@4592r 2@352r 3@5424r 4@5188r 5@4800r
DL [0B,64r:0)[4832r,4880r:3)[5200r,5224r:2)[5456r,5488r:1)  0@0B-phi 1@5456r 2@5200r 3@4832r
HCX [0B,48r:0)[4848r,4880r:3)[5208r,5224r:2)[5472r,5488r:1)  0@0B-phi 1@5472r 2@5208r 3@4848r
HDI [0B,96r:0)[352r,368r:2)[4592r,4608r:1)[4800r,4880r:5)[5188r,5224r:4)[5424r,5488r:3)  0@0B-phi 1@4592r 2@352r 3@5424r 4@5188r 5@4800r
HDX [0B,64r:0)[4832r,4880r:3)[5200r,5224r:2)[5456r,5488r:1)  0@0B-phi 1@5456r 2@5200r 3@4832r
SIL [0B,80r:0)[4816r,4880r:3)[5192r,5224r:2)[5440r,5488r:1)  0@0B-phi 1@5440r 2@5192r 3@4816r
SIH [0B,80r:0)[4816r,4880r:3)[5192r,5224r:2)[5440r,5488r:1)  0@0B-phi 1@5440r 2@5192r 3@4816r
HSI [0B,80r:0)[4816r,4880r:3)[5192r,5224r:2)[5440r,5488r:1)  0@0B-phi 1@5440r 2@5192r 3@4816r
R8B [0B,32r:0)[4864r,4880r:1)[5184r,5224r:2)  0@0B-phi 1@4864r 2@5184r
R8BH [0B,32r:0)[4864r,4880r:1)[5184r,5224r:2)  0@0B-phi 1@4864r 2@5184r
R8WH [0B,32r:0)[4864r,4880r:1)[5184r,5224r:2)  0@0B-phi 1@4864r 2@5184r
R9B [0B,16r:0)[5216r,5224r:1)  0@0B-phi 1@5216r
R9BH [0B,16r:0)[5216r,5224r:1)  0@0B-phi 1@5216r
R9WH [0B,16r:0)[5216r,5224r:1)  0@0B-phi 1@5216r
%1 [576r,4480B:0)  0@576r weight:0.000000e+00
%3 [592r,4480B:0)  0@592r weight:0.000000e+00
%4 [96r,208r:0)  0@96r weight:0.000000e+00
%5 [80r,576r:0)  0@80r weight:0.000000e+00
%6 [64r,560r:0)  0@64r weight:0.000000e+00
%7 [48r,160r:0)  0@48r weight:0.000000e+00
%8 [32r,240r:0)  0@32r weight:0.000000e+00
%9 [16r,592r:0)  0@16r weight:0.000000e+00
%23 [1120r,1152r:0)[1152r,1168r:1)  0@1120r 1@1152r weight:0.000000e+00
%27 [4656r,4688r:0)[4688r,4864r:1)  0@4656r 1@4688r weight:0.000000e+00
%28 [4720r,4800r:0)  0@4720r weight:0.000000e+00
%29 [4736r,4816r:0)  0@4736r weight:0.000000e+00
%30 [4752r,4832r:0)  0@4752r weight:0.000000e+00
%31 [4768r,4848r:0)  0@4768r weight:0.000000e+00
%32 [4976r,5188r:0)  0@4976r weight:0.000000e+00
%33 [4992r,5192r:0)  0@4992r weight:0.000000e+00
%34 [5008r,5200r:0)  0@5008r weight:0.000000e+00
%35 [5024r,5208r:0)  0@5024r weight:0.000000e+00
%37 [5040r,5072r:0)[5072r,5216r:1)  0@5040r 1@5072r weight:0.000000e+00
%39 [5264r,5280r:0)  0@5264r weight:0.000000e+00
%41 [5344r,5424r:0)  0@5344r weight:0.000000e+00
%42 [5360r,5440r:0)  0@5360r weight:0.000000e+00
%43 [5376r,5456r:0)  0@5376r weight:0.000000e+00
%44 [5392r,5472r:0)  0@5392r weight:0.000000e+00
%47 [1232r,1264r:2)[1264r,1296r:0)[1296r,1312r:1)  0@1264r 1@1296r 2@1232r weight:0.000000e+00
%50 [1360r,1392r:0)[1392r,1408r:1)  0@1360r 1@1392r weight:0.000000e+00
%54 [1472r,1504r:2)[1504r,1536r:0)[1536r,1552r:1)  0@1504r 1@1536r 2@1472r weight:0.000000e+00
%55 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%59 [2688r,2720r:0)[2720r,2736r:1)  0@2688r 1@2720r weight:0.000000e+00
%63 [2800r,2832r:2)[2832r,2864r:0)[2864r,3040r:1)  0@2832r 1@2864r 2@2800r weight:0.000000e+00
%66 [2912r,2928r:0)[2928r,3424r:1)  0@2912r 1@2928r weight:0.000000e+00
%68 [2960r,2976r:0)[2976r,3008r:1)  0@2960r 1@2976r weight:0.000000e+00
%69 [2992r,3408r:0)  0@2992r weight:0.000000e+00
%70 [3008r,3568r:0)  0@3008r weight:0.000000e+00
%71 [3024r,3056r:0)  0@3024r weight:0.000000e+00
%72 [3040r,4064r:0)  0@3040r weight:0.000000e+00
%75 [3072r,3104r:0)[3104r,3120r:1)  0@3072r 1@3104r weight:0.000000e+00
%76 [3120r,3616r:0)  0@3120r weight:0.000000e+00
%77 [3136r,3168r:0)  0@3136r weight:0.000000e+00
%80 [3184r,3216r:0)[3216r,3456r:1)  0@3184r 1@3216r weight:0.000000e+00
%81 [3232r,3264r:0)  0@3232r weight:0.000000e+00
%82 [3056r,3168r:2)[3168r,3264r:0)[3264r,3312r:1)[3312r,3952r:3)  0@3168r 1@3264r 2@3056r 3@3312r weight:0.000000e+00
%83 [3280r,3312r:0)  0@3280r weight:0.000000e+00
%86 [2944r,3360r:2)[3360r,3392r:0)[3392r,3408r:1)  0@3360r 1@3392r 2@2944r weight:0.000000e+00
%87 [3408r,3680r:0)  0@3408r weight:0.000000e+00
%88 [3424r,3440r:0)  0@3424r weight:0.000000e+00
%90 [3456r,3488r:0)  0@3456r weight:0.000000e+00
%93 [2896r,3520r:2)[3520r,3552r:0)[3552r,3680r:1)  0@3520r 1@3552r 2@2896r weight:0.000000e+00
%94 [3568r,3600r:0)  0@3568r weight:0.000000e+00
%95 [3440r,3488r:2)[3488r,3600r:0)[3600r,3648r:1)[3648r,3808r:3)  0@3488r 1@3600r 2@3440r 3@3648r weight:0.000000e+00
%96 [3616r,3648r:0)  0@3616r weight:0.000000e+00
%98 [3680r,3776r:0)  0@3680r weight:0.000000e+00
%101 [3712r,3744r:0)[3744r,3872r:1)  0@3712r 1@3744r weight:0.000000e+00
%103 [3696r,3776r:2)[3776r,3808r:0)[3808r,3840r:1)[3840r,3872r:3)[3872r,4016r:4)  0@3776r 1@3808r 2@3696r 3@3840r 4@3872r weight:0.000000e+00
%108 [3888r,3920r:2)[3920r,3952r:0)[3952r,3984r:1)[3984r,4016r:3)[4016r,4128r:4)  0@3920r 1@3952r 2@3888r 3@3984r 4@4016r weight:0.000000e+00
%113 [4032r,4064r:2)[4064r,4096r:0)[4096r,4128r:1)[4128r,4336r:3)  0@4064r 1@4096r 2@4032r 3@4128r weight:0.000000e+00
%116 [224r,1088r:0)[1088r,4480B:1)  0@224r 1@1088r weight:0.000000e+00
%118 [4144r,4176r:2)[4176r,4208r:0)[4208r,4240r:1)[4240r,4304r:3)  0@4176r 1@4208r 2@4144r 3@4240r weight:0.000000e+00
%121 [4256r,4288r:0)[4288r,4304r:1)  0@4256r 1@4288r weight:0.000000e+00
%122 [4304r,4336r:0)  0@4304r weight:0.000000e+00
%123 [4320r,4336r:0)  0@4320r weight:0.000000e+00
%126 [1728r,1760r:0)[1760r,1952r:1)  0@1728r 1@1760r weight:0.000000e+00
%129 [560r,992r:0)[992r,4480B:1)  0@560r 1@992r weight:0.000000e+00
%130 [1808r,1840r:0)[1840r,1872r:1)  0@1808r 1@1840r weight:0.000000e+00
%131 [1856r,2304r:0)  0@1856r weight:0.000000e+00
%132 [1872r,2032r:0)  0@1872r weight:0.000000e+00
%134 [1904r,1920r:0)[1920r,2416r:1)  0@1904r 1@1920r weight:0.000000e+00
%135 [1936r,1968r:0)  0@1936r weight:0.000000e+00
%136 [1952r,2560r:0)  0@1952r weight:0.000000e+00
%139 [1984r,2016r:0)[2016r,2512r:1)  0@1984r 1@2016r weight:0.000000e+00
%140 [2032r,2064r:0)  0@2032r weight:0.000000e+00
%143 [1888r,2096r:2)[2096r,2128r:0)[2128r,2320r:1)  0@2096r 1@2128r 2@1888r weight:0.000000e+00
%144 [2144r,2160r:0)[2160r,2176r:1)  0@2144r 1@2160r weight:0.000000e+00
%145 [2176r,2464r:0)  0@2176r weight:0.000000e+00
%146 [2192r,2224r:0)  0@2192r weight:0.000000e+00
%147 [1968r,2064r:2)[2064r,2224r:0)[2224r,2352r:1)[2352r,2368r:3)  0@2064r 1@2224r 2@1968r 3@2352r weight:0.000000e+00
%149 [1792r,2256r:2)[2256r,2288r:0)[2288r,2304r:1)  0@2256r 1@2288r 2@1792r weight:0.000000e+00
%150 [2304r,2512r:0)  0@2304r weight:0.000000e+00
%151 [2320r,2352r:0)  0@2320r weight:0.000000e+00
%153 [2384r,2400r:0)  0@2384r weight:0.000000e+00
%155 [2416r,2448r:0)  0@2416r weight:0.000000e+00
%157 [2464r,2496r:0)  0@2464r weight:0.000000e+00
%158 [2400r,2448r:2)[2448r,2496r:0)[2496r,2544r:1)[2544r,2560r:3)  0@2448r 1@2496r 2@2400r 3@2544r weight:0.000000e+00
%159 [2512r,2544r:0)  0@2512r weight:0.000000e+00
%162 [1008r,4480B:0)  0@1008r weight:0.000000e+00
%163 [1024r,4480B:0)  0@1024r weight:0.000000e+00
%164 [1040r,4480B:0)  0@1040r weight:0.000000e+00
%165 [1056r,4480B:0)  0@1056r weight:0.000000e+00
%167 [1680r,2592r:0)[2592r,2608r:1)  0@1680r 1@2592r weight:0.000000e+00
RegMasks: 368r 4608r 4880r 5224r 5488r
********** MACHINEINSTRS **********
# Machine code for function rprj3: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=2072, align=16, at location [SP+8]
  fi#22: size=2072, align=16, at location [SP+8]
  fi#23: size=8, align=8, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
  cp#1: 2.500000e-01, align=8
  cp#2: 1.250000e-01, align=8
  cp#3: 6.250000e-02, align=8
Function Live Ins: $rdi in %4, $esi in %5, $edx in %6, $ecx in %7, $r8 in %8, $r9d in %9

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9d
16B	  %9:gr32 = COPY $r9d
32B	  %8:gr64 = COPY $r8
48B	  %7:gr32 = COPY $ecx
64B	  %6:gr32 = COPY $edx
80B	  %5:gr32 = COPY $esi
96B	  %4:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
128B	  MOV32mr %stack.1.m1k.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.m1k.addr)
144B	  MOV32mr %stack.2.m2k.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.m2k.addr)
160B	  MOV32mr %stack.3.m3k.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.m3k.addr)
176B	  MOV64mr %stack.4.os.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.os.addr)
192B	  MOV32mr %stack.5.m1j.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.m1j.addr)
208B	  MOV64mr %stack.9.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
224B	  undef %116.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
240B	  MOV64mr %stack.10.s, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.s)
256B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
272B	  JCC_1 %bb.2, 4, implicit killed $eflags
288B	  JMP_1 %bb.1

304B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $edi = MOV32ri 6
368B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

400B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

416B	  CMP32mi8 %stack.1.m1k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1k.addr)
432B	  JCC_1 %bb.4, 5, implicit killed $eflags
448B	  JMP_1 %bb.3

464B	bb.3.if.then1:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

480B	  MOV32mi %stack.17.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
496B	  JMP_1 %bb.5

512B	bb.4.if.else:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

528B	  MOV32mi %stack.17.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)

544B	bb.5.if.end2:
	; predecessors: %bb.4, %bb.3
	  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

560B	  undef %129.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
576B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
592B	  undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
608B	  CMP32mi8 %stack.2.m2k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2k.addr)
624B	  JCC_1 %bb.7, 5, implicit killed $eflags
640B	  JMP_1 %bb.6

656B	bb.6.if.then4:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

672B	  MOV32mi %stack.18.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
688B	  JMP_1 %bb.8

704B	bb.7.if.else5:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

720B	  MOV32mi %stack.18.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)

736B	bb.8.if.end6:
	; predecessors: %bb.7, %bb.6
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

816B	  CMP32mi8 %stack.3.m3k.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3k.addr)
832B	  JCC_1 %bb.10, 5, implicit killed $eflags
848B	  JMP_1 %bb.9

864B	bb.9.if.then8:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

880B	  MOV32mi %stack.19.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
896B	  JMP_1 %bb.11

912B	bb.10.if.else9:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

928B	  MOV32mi %stack.19.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)

944B	bb.11.if.end10:
	; predecessors: %bb.10, %bb.9
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

960B	  MOV32mi %stack.11.j3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j3)
992B	  %129:gr64_with_sub_8bit = nuw IMUL64rr %129:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1008B	  %162:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
1024B	  %163:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
1040B	  %164:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
1056B	  %165:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
1088B	  %116:gr64_with_sub_8bit = nuw IMUL64rr %116:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags

1104B	bb.12.for.cond:
	; predecessors: %bb.11, %bb.22
	  successors: %bb.13(0x7c000000), %bb.23(0x04000000); %bb.13(96.88%), %bb.23(3.12%)

1120B	  %23:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
1152B	  %23:gr32 = DEC32r %23:gr32(tied-def 0), implicit-def dead $eflags
1168B	  CMP32mr %stack.11.j3, 1, $noreg, 0, $noreg, %23:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j3)
1184B	  JCC_1 %bb.23, 13, implicit killed $eflags
1200B	  JMP_1 %bb.13

1216B	bb.13.for.body:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

1232B	  %47:gr32 = MOV32rm %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
1264B	  %47:gr32 = ADD32rr %47:gr32(tied-def 0), %47:gr32, implicit-def dead $eflags
1296B	  %47:gr32 = nsw SUB32rm %47:gr32(tied-def 0), %stack.19.d3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d3)
1312B	  MOV32mr %stack.14.i3, 1, $noreg, 0, $noreg, %47:gr32 :: (store 4 into %ir.i3)
1328B	  MOV32mi %stack.12.j2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j2)

1344B	bb.14.for.cond13:
	; predecessors: %bb.13, %bb.21
	  successors: %bb.15(0x7c000000), %bb.22(0x04000000); %bb.15(96.88%), %bb.22(3.12%)

1360B	  %50:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
1392B	  %50:gr32 = DEC32r %50:gr32(tied-def 0), implicit-def dead $eflags
1408B	  CMP32mr %stack.12.j2, 1, $noreg, 0, $noreg, %50:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j2)
1424B	  JCC_1 %bb.22, 13, implicit killed $eflags
1440B	  JMP_1 %bb.15

1456B	bb.15.for.body16:
	; predecessors: %bb.14
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

1472B	  %54:gr32 = MOV32rm %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
1504B	  %54:gr32 = ADD32rr %54:gr32(tied-def 0), %54:gr32, implicit-def dead $eflags
1536B	  %54:gr32 = nsw SUB32rm %54:gr32(tied-def 0), %stack.18.d2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d2)
1552B	  MOV32mr %stack.15.i2, 1, $noreg, 0, $noreg, %54:gr32 :: (store 4 into %ir.i2)
1568B	  MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)

1584B	bb.16.for.cond19:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

1600B	  %55:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
1616B	  CMP32rm %55:gr32, %stack.5.m1j.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1j.addr)
1632B	  JCC_1 %bb.18, 13, implicit killed $eflags
1648B	  JMP_1 %bb.17

1664B	bb.17.for.body21:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

1680B	  undef %167.sub_32bit:gr64_nosp = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
1728B	  %126:gr32 = LEA64_32r %167:gr64_nosp, 1, %167:gr64_nosp, 0, $noreg
1760B	  %126:gr32 = nsw SUB32rm %126:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
1776B	  MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %126:gr32 :: (store 4 into %ir.i1)
1792B	  %149:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1808B	  %130:gr64_nosp = LEA64r %149:gr64_nosp, 1, $noreg, 1, $noreg
1840B	  %130:gr64_nosp = nsw IMUL64rr %130:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
1856B	  %131:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
1872B	  %132:gr64 = LEA64r %131:gr64, 8, %130:gr64_nosp, 0, $noreg
1888B	  %143:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1904B	  %134:gr64_nosp = COPY %143:gr64_nosp
1920B	  %134:gr64_nosp = nsw IMUL64rr %134:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1936B	  %135:gr64 = LEA64r %132:gr64, 8, %134:gr64_nosp, 0, $noreg
1952B	  %136:gr64_nosp = MOVSX64rr32 %126:gr32
1968B	  %147:fr64 = MOVSDrm_alt %135:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx27)
1984B	  %139:gr64_nosp = LEA64r %143:gr64_nosp, 1, $noreg, 2, $noreg
2016B	  %139:gr64_nosp = nsw IMUL64rr %139:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2032B	  %140:gr64 = LEA64r %132:gr64, 8, %139:gr64_nosp, 0, $noreg
2064B	  %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %140:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx35)
2096B	  %143:gr64_nosp = nsw INC64r %143:gr64_nosp(tied-def 0), implicit-def dead $eflags
2128B	  %143:gr64_nosp = nsw IMUL64rr %143:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2144B	  %144:gr64_nosp = COPY %149:gr64_nosp
2160B	  %144:gr64_nosp = nsw IMUL64rr %144:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
2176B	  %145:gr64 = LEA64r %131:gr64, 8, %144:gr64_nosp, 0, $noreg
2192B	  %146:gr64 = LEA64r %145:gr64, 8, %143:gr64_nosp, 0, $noreg
2224B	  %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %146:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
2256B	  %149:gr64_nosp = nsw ADD64ri8 %149:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags
2288B	  %149:gr64_nosp = nsw IMUL64rr %149:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
2304B	  %150:gr64 = LEA64r %131:gr64, 8, %149:gr64_nosp, 0, $noreg
2320B	  %151:gr64 = LEA64r %150:gr64, 8, %143:gr64_nosp, 0, $noreg
2352B	  %147:fr64 = ADDSDrm %147:fr64(tied-def 0), %151:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx52)
2368B	  MOVSDmr %stack.21.x1, 8, %136:gr64_nosp, 0, $noreg, %147:fr64 :: (store 8 into %ir.arrayidx55)
2384B	  %153:gr64 = LEA64r %145:gr64, 8, %134:gr64_nosp, 0, $noreg
2400B	  %158:fr64 = MOVSDrm_alt %153:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx61)
2416B	  %155:gr64 = LEA64r %150:gr64, 8, %134:gr64_nosp, 0, $noreg
2448B	  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %155:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx68)
2464B	  %157:gr64 = LEA64r %145:gr64, 8, %139:gr64_nosp, 0, $noreg
2496B	  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %157:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx76)
2512B	  %159:gr64 = LEA64r %150:gr64, 8, %139:gr64_nosp, 0, $noreg
2544B	  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), %159:gr64, 8, %136:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx85)
2560B	  MOVSDmr %stack.22.y1, 8, %136:gr64_nosp, 0, $noreg, %158:fr64 :: (store 8 into %ir.arrayidx88)
2592B	  %167.sub_32bit:gr64_nosp = nsw INC32r %167.sub_32bit:gr64_nosp(tied-def 0), implicit-def dead $eflags
2608B	  MOV32mr %stack.13.j1, 1, $noreg, 0, $noreg, %167.sub_32bit:gr64_nosp :: (store 4 into %ir.j1)
2624B	  JMP_1 %bb.16

2640B	bb.18.for.end:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2656B	  MOV32mi %stack.13.j1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.j1)

2672B	bb.19.for.cond89:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

2688B	  %59:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
2720B	  %59:gr32 = DEC32r %59:gr32(tied-def 0), implicit-def dead $eflags
2736B	  CMP32mr %stack.13.j1, 1, $noreg, 0, $noreg, %59:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.j1)
2752B	  JCC_1 %bb.21, 13, implicit killed $eflags
2768B	  JMP_1 %bb.20

2784B	bb.20.for.body92:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2800B	  %63:gr32 = MOV32rm %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
2832B	  %63:gr32 = ADD32rr %63:gr32(tied-def 0), %63:gr32, implicit-def dead $eflags
2864B	  %63:gr32 = nsw SUB32rm %63:gr32(tied-def 0), %stack.17.d1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.d1)
2880B	  MOV32mr %stack.16.i1, 1, $noreg, 0, $noreg, %63:gr32 :: (store 4 into %ir.i1)
2896B	  %93:gr64_nosp = MOVSX64rm32 %stack.15.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2912B	  %66:gr64_nosp = COPY %93:gr64_nosp
2928B	  %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2944B	  %86:gr64_nosp = MOVSX64rm32 %stack.14.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
2960B	  %68:gr64_nosp = COPY %86:gr64_nosp
2976B	  %68:gr64_nosp = nsw IMUL64rr %68:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
2992B	  %69:gr64 = MOV64rm %stack.9.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
3008B	  %70:gr64 = LEA64r %69:gr64, 8, %68:gr64_nosp, 0, $noreg
3024B	  %71:gr64 = LEA64r %70:gr64, 8, %66:gr64_nosp, 0, $noreg
3040B	  %72:gr64_nosp = MOVSX64rr32 %63:gr32
3056B	  %82:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx101)
3072B	  %75:gr64_nosp = LEA64r %86:gr64_nosp, 1, $noreg, 2, $noreg
3104B	  %75:gr64_nosp = nsw IMUL64rr %75:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
3120B	  %76:gr64 = LEA64r %69:gr64, 8, %75:gr64_nosp, 0, $noreg
3136B	  %77:gr64 = LEA64r %76:gr64, 8, %66:gr64_nosp, 0, $noreg
3168B	  %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %77:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx109)
3184B	  %80:gr64_nosp = LEA64r %93:gr64_nosp, 1, $noreg, 2, $noreg
3216B	  %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
3232B	  %81:gr64 = LEA64r %70:gr64, 8, %80:gr64_nosp, 0, $noreg
3264B	  %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %81:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx118)
3280B	  %83:gr64 = LEA64r %76:gr64, 8, %80:gr64_nosp, 0, $noreg
3312B	  %82:fr64 = ADDSDrm %82:fr64(tied-def 0), %83:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx128)
3328B	  MOVSDmr %stack.24.y2, 1, $noreg, 0, $noreg, %82:fr64 :: (store 8 into %ir.y2)
3360B	  %86:gr64_nosp = nsw INC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
3392B	  %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %129:gr64_with_sub_8bit, implicit-def dead $eflags
3408B	  %87:gr64 = LEA64r %69:gr64, 8, %86:gr64_nosp, 0, $noreg
3424B	  %88:gr64 = LEA64r %87:gr64, 8, %66:gr64_nosp, 0, $noreg
3440B	  %95:fr64 = MOVSDrm_alt %88:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx137)
3456B	  %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
3488B	  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %90:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx146)
3520B	  %93:gr64_nosp = nsw INC64r %93:gr64_nosp(tied-def 0), implicit-def dead $eflags
3552B	  %93:gr64_nosp = nsw IMUL64rr %93:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
3568B	  %94:gr64 = LEA64r %70:gr64, 8, %93:gr64_nosp, 0, $noreg
3600B	  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx155)
3616B	  %96:gr64 = LEA64r %76:gr64, 8, %93:gr64_nosp, 0, $noreg
3648B	  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %96:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx165)
3664B	  MOVSDmr %stack.23.x2, 1, $noreg, 0, $noreg, %95:fr64 :: (store 8 into %ir.x2)
3680B	  %98:gr64 = LEA64r %87:gr64, 8, %93:gr64_nosp, 0, $noreg
3696B	  %103:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx184)
3712B	  %101:fr64 = MOVSDrm_alt %98:gr64, 8, %72:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx175)
3744B	  %101:fr64 = MULSDrr %101:fr64(tied-def 0), %162:fr64
3776B	  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %98:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx193)
3808B	  %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %95:fr64
3840B	  %103:fr64 = MULSDrr %103:fr64(tied-def 0), %163:fr64
3872B	  %103:fr64 = ADDSDrr %103:fr64(tied-def 0), %101:fr64
3888B	  %108:fr64 = MOVSDrm_alt %stack.21.x1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx199)
3920B	  %108:fr64 = ADDSDrm %108:fr64(tied-def 0), %stack.21.x1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx202)
3952B	  %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %82:fr64
3984B	  %108:fr64 = MULSDrr %108:fr64(tied-def 0), %164:fr64
4016B	  %108:fr64 = ADDSDrr %108:fr64(tied-def 0), %103:fr64
4032B	  %113:fr64 = MOVSDrm_alt %stack.22.y1, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx208)
4064B	  %113:fr64 = ADDSDrm %113:fr64(tied-def 0), %stack.22.y1, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx211)
4096B	  %113:fr64 = MULSDrr %113:fr64(tied-def 0), %165:fr64
4128B	  %113:fr64 = ADDSDrr %113:fr64(tied-def 0), %108:fr64
4144B	  %118:gr64 = MOVSX64rm32 %stack.11.j3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j3)
4176B	  %118:gr64 = nsw IMUL64rr %118:gr64(tied-def 0), %116:gr64_with_sub_8bit, implicit-def dead $eflags
4208B	  %118:gr64 = SHL64ri %118:gr64(tied-def 0), 3, implicit-def dead $eflags
4240B	  %118:gr64 = ADD64rm %118:gr64(tied-def 0), %stack.10.s, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.s)
4256B	  %121:gr64_nosp = MOVSX64rm32 %stack.12.j2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j2)
4288B	  %121:gr64_nosp = nsw IMUL64rr %121:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
4304B	  %122:gr64 = LEA64r %118:gr64, 8, %121:gr64_nosp, 0, $noreg
4320B	  %123:gr64_nosp = MOVSX64rm32 %stack.13.j1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j1)
4336B	  MOVSDmr %122:gr64, 8, %123:gr64_nosp, 0, $noreg, %113:fr64 :: (store 8 into %ir.arrayidx220)
4352B	  INC32m %stack.13.j1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j1), (dereferenceable load 4 from %ir.j1)
4368B	  JMP_1 %bb.19

4384B	bb.21.for.end223:
	; predecessors: %bb.19
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

4400B	  INC32m %stack.12.j2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j2), (dereferenceable load 4 from %ir.j2)
4416B	  JMP_1 %bb.14

4432B	bb.22.for.end226:
	; predecessors: %bb.14
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

4448B	  INC32m %stack.11.j3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.j3), (dereferenceable load 4 from %ir.j3)
4464B	  JMP_1 %bb.12

4480B	bb.23.for.end229:
	; predecessors: %bb.12
	  successors: %bb.24(0x50000000), %bb.25(0x30000000); %bb.24(62.50%), %bb.25(37.50%)

4496B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
4512B	  JCC_1 %bb.25, 4, implicit killed $eflags
4528B	  JMP_1 %bb.24

4544B	bb.24.if.then231:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4592B	  $edi = MOV32ri 6
4608B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
4624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

4640B	bb.25.if.end232:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.26(0x40000000), %bb.27(0x40000000); %bb.26(50.00%), %bb.27(50.00%)

4656B	  %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
4688B	  %27:gr32 = DEC32r %27:gr32(tied-def 0), implicit-def dead $eflags
4704B	  MOV32mr %stack.20.j, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.j)
4720B	  %28:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
4736B	  %29:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
4752B	  %30:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
4768B	  %31:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
4784B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4800B	  $rdi = COPY %28:gr64
4816B	  $esi = COPY %29:gr32
4832B	  $edx = COPY %30:gr32
4848B	  $ecx = COPY %31:gr32
4864B	  $r8d = COPY %27:gr32
4880B	  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
4896B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4912B	  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
4928B	  JCC_1 %bb.27, 14, implicit killed $eflags
4944B	  JMP_1 %bb.26

4960B	bb.26.if.then235:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4976B	  %32:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
4992B	  %33:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
5008B	  %34:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
5024B	  %35:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
5040B	  %37:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
5072B	  %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
5088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5184B	  $r8 = MOV32ri64 @.str.50
5188B	  $rdi = COPY %32:gr64
5192B	  $esi = COPY %33:gr32
5200B	  $edx = COPY %34:gr32
5208B	  $ecx = COPY %35:gr32
5216B	  $r9d = COPY %37:gr32
5224B	  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
5232B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

5248B	bb.27.if.end237:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

5264B	  %39:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 16, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 4)`, align 16)
5280B	  CMP32rm %39:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
5296B	  JCC_1 %bb.29, 12, implicit killed $eflags
5312B	  JMP_1 %bb.28

5328B	bb.28.if.then239:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

5344B	  %41:gr64 = MOV64rm %stack.10.s, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.s)
5360B	  %42:gr32 = MOV32rm %stack.5.m1j.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m1j.addr)
5376B	  %43:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m2j.addr, align 16)
5392B	  %44:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m3j.addr, align 8)
5408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
5424B	  $rdi = COPY %41:gr64
5440B	  $esi = COPY %42:gr32
5456B	  $edx = COPY %43:gr32
5472B	  $ecx = COPY %44:gr32
5488B	  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
5504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

5520B	bb.29.if.end240:
	; predecessors: %bb.27, %bb.28

5536B	  RET 0

# End machine code for function rprj3.

Before MISched:
# Machine code for function psinv: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=2072, align=16, at location [SP+8]
  fi#13: size=2072, align=16, at location [SP+8]
Function Live Ins: $rdi in %4, $rsi in %5, $edx in %6, $ecx in %7, $r8d in %8, $r9 in %9

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $rdi, $rsi, $edx, $ecx, $r8d, $r9
  %9:gr64 = COPY $r9
  %8:gr32 = COPY $r8d
  %7:gr32 = COPY $ecx
  %6:gr32 = COPY $edx
  %5:gr64 = COPY $rsi
  %4:gr64 = COPY $rdi
  MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
  MOV64mr %stack.1.ou.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.ou.addr)
  MOV32mr %stack.2.n1.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.3.n2.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.4.n3.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n3.addr)
  MOV64mr %stack.5.c.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.c.addr)
  undef %75.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  MOV64mr %stack.7.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
  MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.u)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 3
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.9.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %75:gr64_with_sub_8bit = nuw IMUL64rr %75:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

bb.3.for.cond:
; predecessors: %bb.2, %bb.13
  successors: %bb.4(0x7c000000), %bb.14(0x04000000); %bb.4(96.88%), %bb.14(3.12%)

  %15:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %15:gr32 = DEC32r %15:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.9.i3, 1, $noreg, 0, $noreg, %15:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.14, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.10.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.5.for.cond1:
; predecessors: %bb.4, %bb.12
  successors: %bb.6(0x7c000000), %bb.13(0x04000000); %bb.6(96.88%), %bb.13(3.12%)

  %37:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.10.i2, 1, $noreg, 0, $noreg, %37:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.13, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body4:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.7.for.cond5:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %39:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %39:gr32, %stack.2.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.9, 13, implicit killed $eflags
  JMP_1 %bb.8

bb.8.for.body7:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %74:gr64 = MOV64rm %stack.7.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  %97:gr64_nosp = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %77:gr64_nosp = COPY %97:gr64_nosp
  %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
  %90:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %81:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, -1, $noreg
  %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
  %110:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
  %87:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, 1, $noreg
  %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
  %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %92:gr64_nosp = LEA64r %97:gr64_nosp, 1, $noreg, -1, $noreg
  %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
  %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
  %97:gr64_nosp = nsw INC64r %97:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
  %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
  MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
  %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
  %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
  %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
  %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
  %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
  %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
  %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
  %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
  MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
  %109:gr32 = LEA64_32r %110:gr64_nosp, 1, $noreg, 1, $noreg
  MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %109:gr32 :: (store 4 into %ir.i1)
  JMP_1 %bb.7

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.10.for.cond75:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %43:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.12, 13, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body78:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %48:gr64 = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  %48:gr64 = SHL64ri %48:gr64(tied-def 0), 3, implicit-def dead $eflags
  %49:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
  %51:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
  %53:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %54:gr64 = MOV64rm %stack.5.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  %63:fr64 = MOVSDrm_alt %54:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
  %48:gr64 = ADD64rm %48:gr64(tied-def 0), %stack.7.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
  %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
  %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
  %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
  %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
  %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
  %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
  %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
  %71:fr64 = MOVSDrm_alt %stack.13.r2, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx116)
  %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
  %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
  %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
  %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
  MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
  INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.10

bb.12.for.end135:
; predecessors: %bb.10
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  INC32m %stack.10.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.5

bb.13.for.end138:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.9.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.3

bb.14.for.end141:
; predecessors: %bb.3
  successors: %bb.15(0x50000000), %bb.16(0x30000000); %bb.15(62.50%), %bb.16(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.16, 4, implicit killed $eflags
  JMP_1 %bb.15

bb.15.if.then143:
; predecessors: %bb.14
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 3
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.16.if.end144:
; predecessors: %bb.14, %bb.15
  successors: %bb.17(0x40000000), %bb.18(0x40000000); %bb.17(50.00%), %bb.18(50.00%)

  %18:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %19:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %20:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %21:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %22:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %19:gr32
  $edx = COPY %20:gr32
  $ecx = COPY %21:gr32
  $r8d = COPY %22:gr32
  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
  JCC_1 %bb.18, 14, implicit killed $eflags
  JMP_1 %bb.17

bb.17.if.then146:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %23:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %24:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %25:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %26:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %23:gr64
  $esi = COPY %24:gr32
  $edx = COPY %25:gr32
  $ecx = COPY %26:gr32
  $r8 = MOV32ri64 @.str.55
  $r9d = COPY %27:gr32
  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.18.if.end147:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x40000000), %bb.20(0x40000000); %bb.19(50.00%), %bb.20(50.00%)

  %29:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 12, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 3)`)
  CMP32rm %29:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  JCC_1 %bb.20, 12, implicit killed $eflags
  JMP_1 %bb.19

bb.19.if.then149:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %31:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %32:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %33:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %34:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %31:gr64
  $esi = COPY %32:gr32
  $edx = COPY %33:gr32
  $ecx = COPY %34:gr32
  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.20.if.end150:
; predecessors: %bb.18, %bb.19

  RET 0

# End machine code for function psinv.

********** MI Scheduling **********
psinv:%bb.0 entry
  From: %9:gr64 = COPY $r9
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %1 %75 
Live Thru: 
  LiveReg: %1
  LiveReg: %75
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gr64 = COPY $r9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%9
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %8:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%8
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %7:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%7
    SU(9): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %6:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%6
    SU(8): Data Latency=0 Reg=%6
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %5:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%5
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %4:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%4
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.ou.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.ou.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.n1.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n2.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.n3.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.5.c.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.c.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   undef %75.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   MOV64mr %stack.7.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.u)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(16): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 14 13 12 11 10 9 8 7 6 16 
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(16) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 14 13 12 11 10 9 8 7 6 
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.u)
Bottom Pressure:
GR16=6
  LiveReg: %5
  UpdateRegP: SU(7) MOV64mr %stack.1.ou.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.ou.addr)
              to 
  UpdateRegP: SU(15) MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.u)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 13 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.7.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
Bottom Pressure:
GR16=8
  LiveReg: %4
  UpdateRegP: SU(6) MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
              to 
  UpdateRegP: SU(14) MOV64mr %stack.7.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 13 12 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
Bottom Pressure:
GR16=8
  LiveReg: %6
  UpdateRegP: SU(8) MOV32mr %stack.2.n1.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
              to GR16 -2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 12 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %75.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
Bottom Pressure:
GR16=8
  LiveReg: %7
  UpdateRegP: SU(9) MOV32mr %stack.3.n2.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n2.addr)
              to 
  UpdateRegP: SU(12) undef %75.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 11 10 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.5.c.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.c.addr)
Bottom Pressure:
GR16=10
  LiveReg: %9
  UpdateRegP: SU(11) MOV64mr %stack.5.c.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.c.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.n3.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=12
  LiveReg: %8
  UpdateRegP: SU(10) MOV32mr %stack.4.n3.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n2.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.n1.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.ou.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.ou.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %4:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %5:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %6:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %7:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64 = COPY $r9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gr64 = COPY $r9
SU(1):   %8:gr32 = COPY $r8d
SU(2):   %7:gr32 = COPY $ecx
SU(3):   %6:gr32 = COPY $edx
SU(4):   %5:gr64 = COPY $rsi
SU(5):   %4:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
SU(7):   MOV64mr %stack.1.ou.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.ou.addr)
SU(8):   MOV32mr %stack.2.n1.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.n1.addr)
SU(9):   MOV32mr %stack.3.n2.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n2.addr)
SU(10):   MOV32mr %stack.4.n3.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n3.addr)
SU(11):   MOV64mr %stack.5.c.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.c.addr)
SU(12):   undef %75.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
SU(14):   MOV64mr %stack.7.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
SU(15):   MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.u)
SU(16):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
psinv:%bb.2 if.end
  From: MOV32mi %stack.9.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.9.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %75:gr64_with_sub_8bit = nuw IMUL64rr %75:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %75:gr64_with_sub_8bit = nuw IMUL64rr %75:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.9.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   MOV32mi %stack.9.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(1):   %75:gr64_with_sub_8bit = nuw IMUL64rr %75:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

********** MI Scheduling **********
psinv:%bb.3 for.cond
  From: %15:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
    To: JCC_1 %bb.14, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %15:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%15
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %15:gr32 = DEC32r %15:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%15
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%15
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.9.i3, 1, $noreg, 0, $noreg, %15:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%15
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.9.i3, 1, $noreg, 0, $noreg, %15:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %15:gr32 = DEC32r %15:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %15:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(1):   %15:gr32 = DEC32r %15:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.9.i3, 1, $noreg, 0, $noreg, %15:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
psinv:%bb.5 for.cond1
  From: %37:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
    To: JCC_1 %bb.13, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %37:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%37
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%37
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%37
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.10.i2, 1, $noreg, 0, $noreg, %37:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%37
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.10.i2, 1, $noreg, 0, $noreg, %37:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %37:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %37:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(1):   %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.10.i2, 1, $noreg, 0, $noreg, %37:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
psinv:%bb.7 for.cond5
  From: %39:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.9, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   CMP32rm %39:gr32, %stack.2.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %39:gr32, %stack.2.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %39:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %39:gr32, %stack.2.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)

********** MI Scheduling **********
psinv:%bb.8 for.body7
  From: %74:gr64 = MOV64rm %stack.7.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
    To: JMP_1 %bb.7
 RegionInstrs: 38
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=20
Live In: %75 %1 
Live Out: %75 %1 
Live Thru: GR16=4
  LiveReg: %75
  UpdateRegP: SU(3) %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(17) %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(22) %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(7) %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(12) %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(15) %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %74:gr64 = MOV64rm %stack.7.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 39
  Successors:
    SU(23): Data Latency=4 Reg=%74
    SU(18): Data Latency=4 Reg=%74
    SU(4): Data Latency=4 Reg=%74
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %97:gr64_nosp = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 40
  Successors:
    SU(21): Data Latency=4 Reg=%97
    SU(16): Data Latency=4 Reg=%97
    SU(2): Data Latency=4 Reg=%97
    SU(21): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %77:gr64_nosp = COPY %97:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(1): Data Latency=4 Reg=%97
  Successors:
    SU(3): Data Latency=0 Reg=%77
    SU(3): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(2): Data Latency=0 Reg=%77
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%77
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 35
  Predecessors:
    SU(3): Data Latency=1 Reg=%77
    SU(0): Data Latency=4 Reg=%74
  Successors:
    SU(13): Data Latency=1 Reg=%78
    SU(8): Data Latency=1 Reg=%78
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %90:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 40
  Successors:
    SU(15): Data Latency=4 Reg=%90
    SU(11): Data Latency=4 Reg=%90
    SU(6): Data Latency=4 Reg=%90
    SU(15): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %81:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 36
  Predecessors:
    SU(5): Data Latency=4 Reg=%90
  Successors:
    SU(7): Data Latency=1 Reg=%81
    SU(7): Out  Latency=0
    SU(15): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 35
  Predecessors:
    SU(6): Data Latency=1 Reg=%81
    SU(6): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%81
    SU(27): Data Latency=1 Reg=%81
    SU(8): Data Latency=1 Reg=%81
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 34
  Predecessors:
    SU(7): Data Latency=1 Reg=%81
    SU(4): Data Latency=1 Reg=%78
  Successors:
    SU(10): Data Latency=1 Reg=%82
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %110:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(36): Data Latency=4 Reg=%110
    SU(35): Data Latency=4 Reg=%110
    SU(34): Data Latency=4 Reg=%110
    SU(32): Data Latency=4 Reg=%110
    SU(30): Data Latency=4 Reg=%110
    SU(28): Data Latency=4 Reg=%110
    SU(26): Data Latency=4 Reg=%110
    SU(25): Data Latency=4 Reg=%110
    SU(20): Data Latency=4 Reg=%110
    SU(14): Data Latency=4 Reg=%110
    SU(10): Data Latency=4 Reg=%110
    SU(37): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 33
  Predecessors:
    SU(8): Data Latency=1 Reg=%82
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(14): Data Latency=4 Reg=%95
    SU(14): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(11):   %87:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(5): Data Latency=4 Reg=%90
  Successors:
    SU(12): Data Latency=1 Reg=%87
    SU(12): Out  Latency=0
    SU(15): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(11): Data Latency=1 Reg=%87
    SU(11): Out  Latency=0
  Successors:
    SU(33): Data Latency=1 Reg=%87
    SU(29): Data Latency=1 Reg=%87
    SU(13): Data Latency=1 Reg=%87
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 30
  Predecessors:
    SU(12): Data Latency=1 Reg=%87
    SU(4): Data Latency=1 Reg=%78
  Successors:
    SU(14): Data Latency=1 Reg=%88
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 29
  Predecessors:
    SU(10): Data Latency=4 Reg=%95
    SU(13): Data Latency=1 Reg=%88
    SU(10): Out  Latency=0
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(20): Data Latency=4 Reg=%95
    SU(20): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(15):   %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 27
  Predecessors:
    SU(11): Anti Latency=0
    SU(6): Anti Latency=0
    SU(5): Data Latency=4 Reg=%90
    SU(5): Out  Latency=0
  Successors:
    SU(24): Data Latency=1 Reg=%90
    SU(19): Data Latency=1 Reg=%90
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %92:gr64_nosp = LEA64r %97:gr64_nosp, 1, $noreg, -1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 29
  Predecessors:
    SU(1): Data Latency=4 Reg=%97
  Successors:
    SU(17): Data Latency=1 Reg=%92
    SU(17): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 28
  Predecessors:
    SU(16): Data Latency=1 Reg=%92
    SU(16): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%92
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 27
  Predecessors:
    SU(17): Data Latency=1 Reg=%92
    SU(0): Data Latency=4 Reg=%74
  Successors:
    SU(29): Data Latency=1 Reg=%93
    SU(27): Data Latency=1 Reg=%93
    SU(19): Data Latency=1 Reg=%93
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 26
  Predecessors:
    SU(18): Data Latency=1 Reg=%93
    SU(15): Data Latency=1 Reg=%90
  Successors:
    SU(20): Data Latency=1 Reg=%94
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 25
  Predecessors:
    SU(14): Data Latency=4 Reg=%95
    SU(19): Data Latency=1 Reg=%94
    SU(14): Out  Latency=0
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(25): Data Latency=4 Reg=%95
    SU(25): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(21):   %97:gr64_nosp = nsw INC64r %97:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(16): Anti Latency=0
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=%97
    SU(1): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%97
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(21): Data Latency=1 Reg=%97
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%97
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 23
  Predecessors:
    SU(22): Data Latency=1 Reg=%97
    SU(0): Data Latency=4 Reg=%74
  Successors:
    SU(33): Data Latency=1 Reg=%98
    SU(31): Data Latency=1 Reg=%98
    SU(24): Data Latency=1 Reg=%98
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(23): Data Latency=1 Reg=%98
    SU(15): Data Latency=1 Reg=%90
  Successors:
    SU(25): Data Latency=1 Reg=%99
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(25):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 21
  Predecessors:
    SU(20): Data Latency=4 Reg=%95
    SU(24): Data Latency=1 Reg=%99
    SU(20): Out  Latency=0
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(26): Data Latency=4 Reg=%95
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 17
  Predecessors:
    SU(25): Data Latency=4 Reg=%95
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(27):   %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 17
  Predecessors:
    SU(18): Data Latency=1 Reg=%93
    SU(7): Data Latency=1 Reg=%81
  Successors:
    SU(28): Data Latency=1 Reg=%101
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 16
  Predecessors:
    SU(27): Data Latency=1 Reg=%101
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(30): Data Latency=4 Reg=%106
    SU(30): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(29):   %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(18): Data Latency=1 Reg=%93
    SU(12): Data Latency=1 Reg=%87
  Successors:
    SU(30): Data Latency=1 Reg=%103
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(30):   %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 12
  Predecessors:
    SU(28): Data Latency=4 Reg=%106
    SU(29): Data Latency=1 Reg=%103
    SU(28): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(32): Data Latency=4 Reg=%106
    SU(32): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(23): Data Latency=1 Reg=%98
    SU(7): Data Latency=1 Reg=%81
  Successors:
    SU(32): Data Latency=1 Reg=%105
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(32):   %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 32
  Height             : 8
  Predecessors:
    SU(30): Data Latency=4 Reg=%106
    SU(31): Data Latency=1 Reg=%105
    SU(30): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(34): Data Latency=4 Reg=%106
    SU(34): Out  Latency=0
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(33):   %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(23): Data Latency=1 Reg=%98
    SU(12): Data Latency=1 Reg=%87
  Successors:
    SU(34): Data Latency=1 Reg=%107
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 36
  Height             : 4
  Predecessors:
    SU(32): Data Latency=4 Reg=%106
    SU(33): Data Latency=1 Reg=%107
    SU(32): Out  Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(35): Data Latency=4 Reg=%106
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(35):   MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 0
  Predecessors:
    SU(34): Data Latency=4 Reg=%106
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%110
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(36):   %109:gr32 = LEA64_32r %110:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%110
  Successors:
    SU(37): Data Latency=1 Reg=%109
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %109:gr32 :: (store 4 into %ir.i1)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 0
  Predecessors:
    SU(36): Data Latency=1 Reg=%109
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 40
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 35 
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %109:gr32 :: (store 4 into %ir.i1)
Bottom Pressure:
GR16=6
  LiveReg: %109
  UpdateRegP: SU(37) MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %109:gr32 :: (store 4 into %ir.i1)
              to 
  Ready @0c
  BotQ.A TopLatency SU(37) 36c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 36 
  Cand SU(35) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %109:gr32 = LEA64_32r %110:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
GR16=6
  LiveReg: %110
  UpdateRegP: SU(10) %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(14) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to GR16 2
  UpdateRegP: SU(20) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
              to GR16 2
  UpdateRegP: SU(25) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
              to GR16 2
  UpdateRegP: SU(26) MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
              to FR32 1    FR32X 1
  UpdateRegP: SU(28) %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(30) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to GR16 2
  UpdateRegP: SU(32) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
              to GR16 2
  UpdateRegP: SU(34) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
              to GR16 2
  UpdateRegP: SU(35) MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
              to FR32 1    FR32X 1
  UpdateRegP: SU(36) %109:gr32 = LEA64_32r %110:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(36) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %106
  UpdateRegP: SU(35) MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
              to 
  Ready @0c
  BotQ.A TopLatency SU(35) 40c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %106
  UpdateRegP: SU(34) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %107
  UpdateRegP: SU(34) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(34) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 32 
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %98
  UpdateRegP: SU(24) %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(31) %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(33) %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
              to 
  LiveReg: %87
  UpdateRegP: SU(13) %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(29) %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(33) %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(33) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %106
  UpdateRegP: SU(32) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %105
  UpdateRegP: SU(32) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(32) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 30 
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %81
  UpdateRegP: SU(8) %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(31) %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(31) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %106
  UpdateRegP: SU(30) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %103
  UpdateRegP: SU(30) %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(30) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 28 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %93
  UpdateRegP: SU(19) %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(29) %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(29) 13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
Bottom Pressure:
GR16=16
  LiveReg: %101
  UpdateRegP: SU(28) %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(28) 16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 26 
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  Ready @17c
  BotQ.A BotLatency SU(27) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %95
  UpdateRegP: SU(26) MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
              to 
  Ready @17c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %95
  UpdateRegP: SU(25) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %99
  UpdateRegP: SU(25) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(25) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 20 
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %90
  UpdateRegP: SU(19) %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(24) 22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 23 
  Cand SU(20) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %74
  UpdateRegP: SU(4) %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(23) %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
              to 
  LiveReg: %97
  UpdateRegP: SU(23) %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(23) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 22 
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %97
  UpdateRegP: SU(22) %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @24c
  BotQ.A BotLatency SU(22) 24c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 21 
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %97:gr64_nosp = nsw INC64r %97:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %97
  UpdateRegP: SU(2) %77:gr64_nosp = COPY %97:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(16) %92:gr64_nosp = LEA64r %97:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  UpdateRegP: SU(21) %97:gr64_nosp = nsw INC64r %97:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(21) 25c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %95
  UpdateRegP: SU(20) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %94
  UpdateRegP: SU(20) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
              to FR32 -1    FR32X -1
  Ready @25c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 14 
  Cand SU(19) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(19) %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @26c
  BotQ.A BotLatency SU(19) 26c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 18 15 
  Cand SU(14) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %92
  UpdateRegP: SU(18) %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(18) 27c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 17 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %92
  UpdateRegP: SU(17) %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(17) 28c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 16 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %92:gr64_nosp = LEA64r %97:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @29c
  BotQ.A BotLatency SU(16) 29c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %90
  UpdateRegP: SU(6) %81:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, -1, $noreg
              to GR16 -2
  UpdateRegP: SU(11) %87:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  UpdateRegP: SU(15) %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %95
  UpdateRegP: SU(14) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %88
  UpdateRegP: SU(14) %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to FR32 -1    FR32X -1
  Ready @29c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 10 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %78
  UpdateRegP: SU(8) %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(13) %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(13) 30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %87
  UpdateRegP: SU(12) %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
  BotQ.A BotLatency SU(12) 31c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %87:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @32c
  BotQ.A BotLatency SU(11) 32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
Bottom Pressure:
GR16=18
  LiveReg: %82
  UpdateRegP: SU(10) %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
              to FR32 -1    FR32X -1
  Ready @33c
  BotQ.A BotLatency SU(10) 33c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %110:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=16
  Ready @37c
  BotQ.A BotLatency SU(9) 37c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  Ready @34c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=14
  LiveReg: %81
  UpdateRegP: SU(7) %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @35c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %81:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, -1, $noreg
Bottom Pressure:
GR16=12
  Ready @36c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %90:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=10
  Ready @40c
  BotQ.A BotLatency SU(5) 40c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %77
  UpdateRegP: SU(4) %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @35c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %77
  UpdateRegP: SU(3) %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @36c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %77:gr64_nosp = COPY %97:gr64_nosp
Bottom Pressure:
GR16=8
  Ready @36c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %97:gr64_nosp = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=6
  Ready @40c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %74:gr64 = MOV64rm %stack.7.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
GR16=4
  Ready @39c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %74:gr64 = MOV64rm %stack.7.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
SU(1):   %97:gr64_nosp = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(2):   %77:gr64_nosp = COPY %97:gr64_nosp
SU(3):   %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
SU(4):   %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
SU(5):   %90:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %81:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, -1, $noreg
SU(7):   %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
SU(9):   %110:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
SU(11):   %87:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, 1, $noreg
SU(12):   %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(13):   %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
SU(14):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
SU(15):   %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(16):   %92:gr64_nosp = LEA64r %97:gr64_nosp, 1, $noreg, -1, $noreg
SU(17):   %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
SU(18):   %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
SU(19):   %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
SU(20):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
SU(21):   %97:gr64_nosp = nsw INC64r %97:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(22):   %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
SU(24):   %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
SU(25):   %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
SU(26):   MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
SU(27):   %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
SU(28):   %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
SU(29):   %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
SU(30):   %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
SU(31):   %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
SU(32):   %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
SU(33):   %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
SU(34):   %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
SU(35):   MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
SU(36):   %109:gr32 = LEA64_32r %110:gr64_nosp, 1, $noreg, 1, $noreg
SU(37):   MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %109:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
psinv:%bb.10 for.cond75
  From: %43:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
    To: JCC_1 %bb.12, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%43
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%43
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%43
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%43
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %43:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(1):   %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
psinv:%bb.11 for.body78
  From: %48:gr64 = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.10
 RegionInstrs: 27
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=14
Live In: %1 %75 
Live Out: %1 %75 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(6) %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %75
  UpdateRegP: SU(1) %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %48:gr64 = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(1): Data Latency=4 Reg=%48
    SU(1): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(0): Data Latency=4 Reg=%48
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%48
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %48:gr64 = SHL64ri %48:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(1): Data Latency=1 Reg=%48
    SU(1): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%48
    SU(4): Data Latency=1 Reg=%48
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %49:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(4): Data Latency=4 Reg=%49
    SU(4): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 26
  Predecessors:
    SU(2): Data Latency=1 Reg=%48
    SU(3): Out  Latency=0
    SU(3): Data Latency=4 Reg=%49
  Successors:
    SU(7): Data Latency=1 Reg=%49
    SU(11): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %51:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(6): Data Latency=4 Reg=%51
    SU(6): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(5): Data Latency=4 Reg=%51
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%51
    SU(7): Data Latency=1 Reg=%51
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 10
  Predecessors:
    SU(4): Data Latency=1 Reg=%49
    SU(6): Data Latency=1 Reg=%51
  Successors:
    SU(25): Data Latency=1 Reg=%52
    SU(14): Data Latency=1 Reg=%52
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %53:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(25): Data Latency=4 Reg=%53
    SU(22): Data Latency=4 Reg=%53
    SU(21): Data Latency=4 Reg=%53
    SU(20): Data Latency=4 Reg=%53
    SU(17): Data Latency=4 Reg=%53
    SU(16): Data Latency=4 Reg=%53
    SU(15): Data Latency=4 Reg=%53
    SU(14): Data Latency=4 Reg=%53
    SU(13): Data Latency=4 Reg=%53
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %54:gr64 = MOV64rm %stack.5.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(23): Data Latency=4 Reg=%54
    SU(18): Data Latency=4 Reg=%54
    SU(10): Data Latency=4 Reg=%54
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %63:fr64 = MOVSDrm_alt %54:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(9): Data Latency=4 Reg=%54
  Successors:
    SU(13): Data Latency=4 Reg=%63
    SU(13): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(11):   %48:gr64 = ADD64rm %48:gr64(tied-def 0), %stack.7.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 26
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Data Latency=1 Reg=%48
    SU(2): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%48
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 22
  Predecessors:
    SU(11): Data Latency=4 Reg=%48
    SU(6): Data Latency=1 Reg=%51
  Successors:
    SU(16): Data Latency=1 Reg=%61
    SU(15): Data Latency=1 Reg=%61
    SU(13): Data Latency=1 Reg=%61
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 13
  Predecessors:
    SU(12): Data Latency=1 Reg=%61
    SU(10): Data Latency=4 Reg=%63
    SU(10): Out  Latency=0
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(14): Data Latency=4 Reg=%63
    SU(14): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(14):   %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%63
    SU(13): Out  Latency=0
    SU(8): Data Latency=4 Reg=%53
    SU(7): Data Latency=1 Reg=%52
  Successors:
    SU(19): Data Latency=4 Reg=%63
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(15):   %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 21
  Predecessors:
    SU(12): Data Latency=1 Reg=%61
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(16): Data Latency=4 Reg=%66
    SU(16): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(16):   %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 17
  Predecessors:
    SU(15): Data Latency=4 Reg=%66
    SU(15): Out  Latency=0
    SU(12): Data Latency=1 Reg=%61
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(17): Data Latency=4 Reg=%66
    SU(17): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(17):   %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 13
  Predecessors:
    SU(16): Data Latency=4 Reg=%66
    SU(16): Out  Latency=0
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(18): Data Latency=4 Reg=%66
    SU(18): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 9
  Predecessors:
    SU(17): Data Latency=4 Reg=%66
    SU(17): Out  Latency=0
    SU(9): Data Latency=4 Reg=%54
  Successors:
    SU(19): Data Latency=4 Reg=%66
    SU(19): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 5
  Predecessors:
    SU(18): Data Latency=4 Reg=%66
    SU(18): Out  Latency=0
    SU(14): Data Latency=4 Reg=%63
  Successors:
    SU(24): Data Latency=1 Reg=%66
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(20):   %71:fr64 = MOVSDrm_alt %stack.13.r2, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx116)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 20
  Predecessors:
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(21): Data Latency=4 Reg=%71
    SU(21): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(21):   %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 16
  Predecessors:
    SU(20): Data Latency=4 Reg=%71
    SU(20): Out  Latency=0
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(22): Data Latency=4 Reg=%71
    SU(22): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(21): Data Latency=4 Reg=%71
    SU(21): Out  Latency=0
    SU(8): Data Latency=4 Reg=%53
  Successors:
    SU(23): Data Latency=4 Reg=%71
    SU(23): Out  Latency=0
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(23):   %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 8
  Predecessors:
    SU(22): Data Latency=4 Reg=%71
    SU(22): Out  Latency=0
    SU(9): Data Latency=4 Reg=%54
  Successors:
    SU(24): Data Latency=4 Reg=%71
    SU(24): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 4
  Predecessors:
    SU(19): Data Latency=1 Reg=%66
    SU(23): Out  Latency=0
    SU(23): Data Latency=4 Reg=%71
  Successors:
    SU(25): Data Latency=1 Reg=%71
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(25):   MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
  # preds left       : 20
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 3
  Predecessors:
    SU(24): Data Latency=1 Reg=%71
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%53
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=1 Reg=%52
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(26):   INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 3
  Predecessors:
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 32
  Height             : 0
  Predecessors:
    SU(26): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 32
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(26) 29c
  BotQ.A BotLatency SU(26) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %52
  UpdateRegP: SU(14) %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
              to GR16 2
  UpdateRegP: SU(25) MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %53
  UpdateRegP: SU(13) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
              to GR16 2
  UpdateRegP: SU(14) %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
              to 
  UpdateRegP: SU(15) %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(16) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
              to GR16 2
  UpdateRegP: SU(17) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
              to 
  UpdateRegP: SU(20) %71:fr64 = MOVSDrm_alt %stack.13.r2, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx116)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(21) %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
              to 
  UpdateRegP: SU(22) %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
              to 
  UpdateRegP: SU(25) MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
              to FR32 1    FR32X 1
  LiveReg: %71
  UpdateRegP: SU(25) MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %71
  UpdateRegP: SU(24) %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
              to 
  LiveReg: %66
  UpdateRegP: SU(24) %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(24) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 23 
  Cand SU(19) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %71
  UpdateRegP: SU(23) %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %54
  UpdateRegP: SU(10) %63:fr64 = MOVSDrm_alt %54:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(18) %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
              to 
  UpdateRegP: SU(23) %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(23) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 22 
  Cand SU(19) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %71
  UpdateRegP: SU(22) %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(22) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
  Cand SU(19) ORDER                              
  Cand SU(21) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(21) %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %71
  UpdateRegP: SU(21) %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(21) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 20 
  Cand SU(19) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %71:fr64 = MOVSDrm_alt %stack.13.r2, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx116)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @20c
  BotQ.A BotLatency SU(20) 20c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %66
  UpdateRegP: SU(19) %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
              to 
  LiveReg: %63
  UpdateRegP: SU(19) %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
              to FR32 -1    FR32X -1
  Ready @5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 14 
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %66
  UpdateRegP: SU(18) %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
              to FR32 -1    FR32X -1
  Ready @9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 17 
  Cand SU(14) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %66
  UpdateRegP: SU(17) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
              to FR32 -1    FR32X -1
  Ready @13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 16 
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %66
  UpdateRegP: SU(16) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %61
  UpdateRegP: SU(13) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
              to 
  UpdateRegP: SU(15) %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(16) %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
              to FR32 -1    FR32X -1
  Ready @17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @21c
  BotQ.A BotLatency SU(15) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %63
  UpdateRegP: SU(14) %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
              to FR32 -1    FR32X -1
  Ready @9c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 7 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %63
  UpdateRegP: SU(13) %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
              to FR32 -1    FR32X -1
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 8 
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %48
  UpdateRegP: SU(12) %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
              to 
  LiveReg: %51
  UpdateRegP: SU(7) %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(12) %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(12) 22c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 10 11 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %48:gr64 = ADD64rm %48:gr64(tied-def 0), %stack.7.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %48
  UpdateRegP: SU(4) %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
              to 
  UpdateRegP: SU(11) %48:gr64 = ADD64rm %48:gr64(tied-def 0), %stack.7.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(11) 26c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 10 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %63:fr64 = MOVSDrm_alt %54:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
Bottom Pressure:
GR16=14
  Ready @17c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 9 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %54:gr64 = MOV64rm %stack.5.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
Bottom Pressure:
GR16=12
  Ready @21c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %53:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=10
  Ready @25c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %49
  UpdateRegP: SU(7) %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @10c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %51
  UpdateRegP: SU(6) %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @23c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %51:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=8
  Ready @27c
  BotQ.A BotLatency SU(5) 27c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %49
  UpdateRegP: SU(4) %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %49:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=6
  Ready @30c
  BotQ.A BotLatency SU(3) 30c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %48:gr64 = SHL64ri %48:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %48
  UpdateRegP: SU(2) %48:gr64 = SHL64ri %48:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %48
  UpdateRegP: SU(1) %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %48:gr64 = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @32c
  BotQ.A BotLatency SU(0) 32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %48:gr64 = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %48:gr64 = SHL64ri %48:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %49:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(4):   %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
SU(5):   %51:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
SU(8):   %53:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(9):   %54:gr64 = MOV64rm %stack.5.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
SU(10):   %63:fr64 = MOVSDrm_alt %54:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
SU(11):   %48:gr64 = ADD64rm %48:gr64(tied-def 0), %stack.7.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
SU(12):   %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
SU(13):   %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
SU(14):   %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
SU(15):   %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
SU(16):   %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
SU(17):   %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
SU(18):   %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
SU(19):   %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
SU(20):   %71:fr64 = MOVSDrm_alt %stack.13.r2, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx116)
SU(21):   %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
SU(22):   %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
SU(23):   %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
SU(24):   %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
SU(25):   MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
SU(26):   INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
psinv:%bb.16 if.end144
  From: $rdi = COPY %18:gr64
    To: CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %18:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %19:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %20:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %21:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %22:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %22:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %21:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %20:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %19:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %18:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   $rdi = COPY %18:gr64
SU(1):   $esi = COPY %19:gr32
SU(2):   $edx = COPY %20:gr32
SU(3):   $ecx = COPY %21:gr32
SU(4):   $r8d = COPY %22:gr32

********** MI Scheduling **********
psinv:%bb.16 if.end144
  From: %18:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %19:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %20:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %21:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %22:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %22:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %21:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %20:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %19:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %18:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %19:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %20:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %21:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(4):   %22:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** MI Scheduling **********
psinv:%bb.17 if.then146
  From: $rdi = COPY %23:gr64
    To: CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %23:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %24:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %25:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %26:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @.str.55
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = COPY %27:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %27:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %26:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %25:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %24:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %23:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @.str.55
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(4):   $r8 = MOV32ri64 @.str.55
SU(0):   $rdi = COPY %23:gr64
SU(1):   $esi = COPY %24:gr32
SU(2):   $edx = COPY %25:gr32
SU(3):   $ecx = COPY %26:gr32
SU(5):   $r9d = COPY %27:gr32

********** MI Scheduling **********
psinv:%bb.17 if.then146
  From: %23:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %23:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %24:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %25:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %26:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %26:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %25:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %24:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %23:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %23:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %24:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %25:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %26:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(4):   %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** MI Scheduling **********
psinv:%bb.18 if.end147
  From: %29:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 12, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 3)`)
    To: JCC_1 %bb.20, 12, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 12, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 3)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(1):   CMP32rm %29:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 12, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %29:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 12, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 3)`)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %29:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 12, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 3)`)
SU(1):   CMP32rm %29:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** MI Scheduling **********
psinv:%bb.19 if.then149
  From: $rdi = COPY %31:gr64
    To: CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %31:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %32:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %33:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %34:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %34:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %33:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %32:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %31:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   $rdi = COPY %31:gr64
SU(1):   $esi = COPY %32:gr32
SU(2):   $edx = COPY %33:gr32
SU(3):   $ecx = COPY %34:gr32

********** MI Scheduling **********
psinv:%bb.19 if.then149
  From: %31:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %32:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %33:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %34:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %34:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %33:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %32:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %31:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %32:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %33:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(3):   %34:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)

********** INTERVALS **********
CH [0B,48r:0)[3008r,3040r:3)[3336r,3352r:2)[3600r,3616r:1)  0@0B-phi 1@3600r 2@3336r 3@3008r
CL [0B,48r:0)[3008r,3040r:3)[3336r,3352r:2)[3600r,3616r:1)  0@0B-phi 1@3600r 2@3336r 3@3008r
DH [0B,64r:0)[2992r,3040r:3)[3328r,3352r:2)[3584r,3616r:1)  0@0B-phi 1@3584r 2@3328r 3@2992r
DIL [0B,96r:0)[400r,416r:2)[2800r,2816r:1)[2960r,3040r:5)[3316r,3352r:4)[3552r,3616r:3)  0@0B-phi 1@2800r 2@400r 3@3552r 4@3316r 5@2960r
DIH [0B,96r:0)[400r,416r:2)[2800r,2816r:1)[2960r,3040r:5)[3316r,3352r:4)[3552r,3616r:3)  0@0B-phi 1@2800r 2@400r 3@3552r 4@3316r 5@2960r
DL [0B,64r:0)[2992r,3040r:3)[3328r,3352r:2)[3584r,3616r:1)  0@0B-phi 1@3584r 2@3328r 3@2992r
HCX [0B,48r:0)[3008r,3040r:3)[3336r,3352r:2)[3600r,3616r:1)  0@0B-phi 1@3600r 2@3336r 3@3008r
HDI [0B,96r:0)[400r,416r:2)[2800r,2816r:1)[2960r,3040r:5)[3316r,3352r:4)[3552r,3616r:3)  0@0B-phi 1@2800r 2@400r 3@3552r 4@3316r 5@2960r
HDX [0B,64r:0)[2992r,3040r:3)[3328r,3352r:2)[3584r,3616r:1)  0@0B-phi 1@3584r 2@3328r 3@2992r
SIL [0B,80r:0)[2976r,3040r:3)[3320r,3352r:2)[3568r,3616r:1)  0@0B-phi 1@3568r 2@3320r 3@2976r
SIH [0B,80r:0)[2976r,3040r:3)[3320r,3352r:2)[3568r,3616r:1)  0@0B-phi 1@3568r 2@3320r 3@2976r
HSI [0B,80r:0)[2976r,3040r:3)[3320r,3352r:2)[3568r,3616r:1)  0@0B-phi 1@3568r 2@3320r 3@2976r
R8B [0B,32r:0)[3024r,3040r:1)[3312r,3352r:2)  0@0B-phi 1@3024r 2@3312r
R8BH [0B,32r:0)[3024r,3040r:1)[3312r,3352r:2)  0@0B-phi 1@3024r 2@3312r
R8WH [0B,32r:0)[3024r,3040r:1)[3312r,3352r:2)  0@0B-phi 1@3024r 2@3312r
R9B [0B,16r:0)[3344r,3352r:1)  0@0B-phi 1@3344r
R9BH [0B,16r:0)[3344r,3352r:1)  0@0B-phi 1@3344r
R9WH [0B,16r:0)[3344r,3352r:1)  0@0B-phi 1@3344r
%1 [240r,2688B:0)  0@240r weight:0.000000e+00
%4 [96r,272r:0)  0@96r weight:0.000000e+00
%5 [80r,288r:0)  0@80r weight:0.000000e+00
%6 [64r,240r:0)  0@64r weight:0.000000e+00
%7 [48r,208r:0)  0@48r weight:0.000000e+00
%8 [32r,176r:0)  0@32r weight:0.000000e+00
%9 [16r,192r:0)  0@16r weight:0.000000e+00
%15 [528r,560r:0)[560r,576r:1)  0@528r 1@560r weight:0.000000e+00
%18 [2864r,2960r:0)  0@2864r weight:0.000000e+00
%19 [2880r,2976r:0)  0@2880r weight:0.000000e+00
%20 [2896r,2992r:0)  0@2896r weight:0.000000e+00
%21 [2912r,3008r:0)  0@2912r weight:0.000000e+00
%22 [2928r,3024r:0)  0@2928r weight:0.000000e+00
%23 [3136r,3316r:0)  0@3136r weight:0.000000e+00
%24 [3152r,3320r:0)  0@3152r weight:0.000000e+00
%25 [3168r,3328r:0)  0@3168r weight:0.000000e+00
%26 [3184r,3336r:0)  0@3184r weight:0.000000e+00
%27 [3200r,3344r:0)  0@3200r weight:0.000000e+00
%29 [3392r,3408r:0)  0@3392r weight:0.000000e+00
%31 [3472r,3552r:0)  0@3472r weight:0.000000e+00
%32 [3488r,3568r:0)  0@3488r weight:0.000000e+00
%33 [3504r,3584r:0)  0@3504r weight:0.000000e+00
%34 [3520r,3600r:0)  0@3520r weight:0.000000e+00
%37 [672r,704r:0)[704r,720r:1)  0@672r 1@704r weight:0.000000e+00
%39 [816r,832r:0)  0@816r weight:0.000000e+00
%43 [1792r,1824r:0)[1824r,1840r:1)  0@1792r 1@1824r weight:0.000000e+00
%48 [1904r,1936r:2)[1936r,1968r:0)[1968r,2160r:1)[2160r,2176r:3)  0@1936r 1@1968r 2@1904r 3@2160r weight:0.000000e+00
%49 [1984r,2016r:0)[2016r,2080r:1)  0@1984r 1@2016r weight:0.000000e+00
%51 [2032r,2064r:0)[2064r,2176r:1)  0@2032r 1@2064r weight:0.000000e+00
%52 [2080r,2544r:0)  0@2080r weight:0.000000e+00
%53 [2096r,2544r:0)  0@2096r weight:0.000000e+00
%54 [2112r,2496r:0)  0@2112r weight:0.000000e+00
%61 [2176r,2288r:0)  0@2176r weight:0.000000e+00
%63 [2128r,2208r:2)[2208r,2240r:0)[2240r,2384r:1)  0@2208r 1@2240r 2@2128r weight:0.000000e+00
%66 [2256r,2288r:2)[2288r,2320r:0)[2320r,2352r:1)[2352r,2384r:3)[2384r,2528r:4)  0@2288r 1@2320r 2@2256r 3@2352r 4@2384r weight:0.000000e+00
%71 [2400r,2432r:2)[2432r,2464r:0)[2464r,2496r:1)[2496r,2528r:3)[2528r,2544r:4)  0@2432r 1@2464r 2@2400r 3@2496r 4@2528r weight:0.000000e+00
%74 [896r,1408r:0)  0@896r weight:0.000000e+00
%75 [208r,496r:0)[496r,2688B:1)  0@208r 1@496r weight:0.000000e+00
%77 [928r,944r:0)[944r,960r:1)  0@928r 1@944r weight:0.000000e+00
%78 [960r,1152r:0)  0@960r weight:0.000000e+00
%81 [992r,1024r:0)[1024r,1568r:1)  0@992r 1@1024r weight:0.000000e+00
%82 [1040r,1088r:0)  0@1040r weight:0.000000e+00
%87 [1104r,1136r:0)[1136r,1616r:1)  0@1104r 1@1136r weight:0.000000e+00
%88 [1152r,1184r:0)  0@1152r weight:0.000000e+00
%90 [976r,1216r:0)[1216r,1424r:1)  0@976r 1@1216r weight:0.000000e+00
%92 [1232r,1264r:0)[1264r,1280r:1)  0@1232r 1@1264r weight:0.000000e+00
%93 [1280r,1520r:0)  0@1280r weight:0.000000e+00
%94 [1296r,1328r:0)  0@1296r weight:0.000000e+00
%95 [1088r,1184r:2)[1184r,1328r:0)[1328r,1456r:1)[1456r,1472r:3)  0@1184r 1@1328r 2@1088r 3@1456r weight:0.000000e+00
%97 [912r,1360r:2)[1360r,1392r:0)[1392r,1408r:1)  0@1360r 1@1392r 2@912r weight:0.000000e+00
%98 [1408r,1616r:0)  0@1408r weight:0.000000e+00
%99 [1424r,1456r:0)  0@1424r weight:0.000000e+00
%101 [1488r,1504r:0)  0@1488r weight:0.000000e+00
%103 [1520r,1552r:0)  0@1520r weight:0.000000e+00
%105 [1568r,1600r:0)  0@1568r weight:0.000000e+00
%106 [1504r,1552r:2)[1552r,1600r:0)[1600r,1648r:1)[1648r,1664r:3)  0@1552r 1@1600r 2@1504r 3@1648r weight:0.000000e+00
%107 [1616r,1648r:0)  0@1616r weight:0.000000e+00
%109 [1696r,1712r:0)  0@1696r weight:0.000000e+00
%110 [1056r,1696r:0)  0@1056r weight:0.000000e+00
RegMasks: 416r 2816r 3040r 3352r 3616r
********** MACHINEINSTRS **********
# Machine code for function psinv: NoPHIs, TracksLiveness
Frame Objects:
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=2072, align=16, at location [SP+8]
  fi#13: size=2072, align=16, at location [SP+8]
Function Live Ins: $rdi in %4, $rsi in %5, $edx in %6, $ecx in %7, $r8d in %8, $r9 in %9

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $rdi, $rsi, $edx, $ecx, $r8d, $r9
16B	  %9:gr64 = COPY $r9
32B	  %8:gr32 = COPY $r8d
48B	  %7:gr32 = COPY $ecx
64B	  %6:gr32 = COPY $edx
80B	  %5:gr64 = COPY $rsi
96B	  %4:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.or.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.or.addr)
128B	  MOV64mr %stack.1.ou.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.ou.addr)
144B	  MOV32mr %stack.2.n1.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.n1.addr)
160B	  MOV32mr %stack.3.n2.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.n2.addr)
176B	  MOV32mr %stack.4.n3.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.n3.addr)
192B	  MOV64mr %stack.5.c.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.c.addr)
208B	  undef %75.sub_32bit:gr64_with_sub_8bit = MOV32rr %7:gr32
240B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
272B	  MOV64mr %stack.7.r, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.r)
288B	  MOV64mr %stack.8.u, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.u)
304B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
320B	  JCC_1 %bb.2, 4, implicit killed $eflags
336B	  JMP_1 %bb.1

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  $edi = MOV32ri 3
416B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

448B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

464B	  MOV32mi %stack.9.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
496B	  %75:gr64_with_sub_8bit = nuw IMUL64rr %75:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

512B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.13
	  successors: %bb.4(0x7c000000), %bb.14(0x04000000); %bb.4(96.88%), %bb.14(3.12%)

528B	  %15:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
560B	  %15:gr32 = DEC32r %15:gr32(tied-def 0), implicit-def dead $eflags
576B	  CMP32mr %stack.9.i3, 1, $noreg, 0, $noreg, %15:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
592B	  JCC_1 %bb.14, 13, implicit killed $eflags
608B	  JMP_1 %bb.4

624B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

640B	  MOV32mi %stack.10.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

656B	bb.5.for.cond1:
	; predecessors: %bb.4, %bb.12
	  successors: %bb.6(0x7c000000), %bb.13(0x04000000); %bb.6(96.88%), %bb.13(3.12%)

672B	  %37:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
704B	  %37:gr32 = DEC32r %37:gr32(tied-def 0), implicit-def dead $eflags
720B	  CMP32mr %stack.10.i2, 1, $noreg, 0, $noreg, %37:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
736B	  JCC_1 %bb.13, 13, implicit killed $eflags
752B	  JMP_1 %bb.6

768B	bb.6.for.body4:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

784B	  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

800B	bb.7.for.cond5:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

816B	  %39:gr32 = MOV32rm %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
832B	  CMP32rm %39:gr32, %stack.2.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
848B	  JCC_1 %bb.9, 13, implicit killed $eflags
864B	  JMP_1 %bb.8

880B	bb.8.for.body7:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

896B	  %74:gr64 = MOV64rm %stack.7.r, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.r)
912B	  %97:gr64_nosp = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
928B	  %77:gr64_nosp = COPY %97:gr64_nosp
944B	  %77:gr64_nosp = nsw IMUL64rr %77:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
960B	  %78:gr64 = LEA64r %74:gr64, 8, %77:gr64_nosp, 0, $noreg
976B	  %90:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
992B	  %81:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, -1, $noreg
1024B	  %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1040B	  %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
1056B	  %110:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1088B	  %95:fr64 = MOVSDrm_alt %82:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx12)
1104B	  %87:gr64_nosp = LEA64r %90:gr64_nosp, 1, $noreg, 1, $noreg
1136B	  %87:gr64_nosp = nsw IMUL64rr %87:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1152B	  %88:gr64 = LEA64r %78:gr64, 8, %87:gr64_nosp, 0, $noreg
1184B	  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %88:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
1216B	  %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1232B	  %92:gr64_nosp = LEA64r %97:gr64_nosp, 1, $noreg, -1, $noreg
1264B	  %92:gr64_nosp = nsw IMUL64rr %92:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
1280B	  %93:gr64 = LEA64r %74:gr64, 8, %92:gr64_nosp, 0, $noreg
1296B	  %94:gr64 = LEA64r %93:gr64, 8, %90:gr64_nosp, 0, $noreg
1328B	  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %94:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx26)
1360B	  %97:gr64_nosp = nsw INC64r %97:gr64_nosp(tied-def 0), implicit-def dead $eflags
1392B	  %97:gr64_nosp = nsw IMUL64rr %97:gr64_nosp(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
1408B	  %98:gr64 = LEA64r %74:gr64, 8, %97:gr64_nosp, 0, $noreg
1424B	  %99:gr64 = LEA64r %98:gr64, 8, %90:gr64_nosp, 0, $noreg
1456B	  %95:fr64 = ADDSDrm %95:fr64(tied-def 0), %99:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx34)
1472B	  MOVSDmr %stack.12.r1, 8, %110:gr64_nosp, 0, $noreg, %95:fr64 :: (store 8 into %ir.arrayidx37)
1488B	  %101:gr64 = LEA64r %93:gr64, 8, %81:gr64_nosp, 0, $noreg
1504B	  %106:fr64 = MOVSDrm_alt %101:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx45)
1520B	  %103:gr64 = LEA64r %93:gr64, 8, %87:gr64_nosp, 0, $noreg
1552B	  %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %103:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
1568B	  %105:gr64 = LEA64r %98:gr64, 8, %81:gr64_nosp, 0, $noreg
1600B	  %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %105:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx62)
1616B	  %107:gr64 = LEA64r %98:gr64, 8, %87:gr64_nosp, 0, $noreg
1648B	  %106:fr64 = ADDSDrm %106:fr64(tied-def 0), %107:gr64, 8, %110:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx71)
1664B	  MOVSDmr %stack.13.r2, 8, %110:gr64_nosp, 0, $noreg, %106:fr64 :: (store 8 into %ir.arrayidx74)
1696B	  %109:gr32 = LEA64_32r %110:gr64_nosp, 1, $noreg, 1, $noreg
1712B	  MOV32mr %stack.11.i1, 1, $noreg, 0, $noreg, %109:gr32 :: (store 4 into %ir.i1)
1728B	  JMP_1 %bb.7

1744B	bb.9.for.end:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1760B	  MOV32mi %stack.11.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

1776B	bb.10.for.cond75:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1792B	  %43:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
1824B	  %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
1840B	  CMP32mr %stack.11.i1, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
1856B	  JCC_1 %bb.12, 13, implicit killed $eflags
1872B	  JMP_1 %bb.11

1888B	bb.11.for.body78:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1904B	  %48:gr64 = MOVSX64rm32 %stack.9.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1936B	  %48:gr64 = nsw IMUL64rr %48:gr64(tied-def 0), %75:gr64_with_sub_8bit, implicit-def dead $eflags
1968B	  %48:gr64 = SHL64ri %48:gr64(tied-def 0), 3, implicit-def dead $eflags
1984B	  %49:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
2016B	  %49:gr64 = ADD64rr %49:gr64(tied-def 0), %48:gr64, implicit-def dead $eflags
2032B	  %51:gr64_nosp = MOVSX64rm32 %stack.10.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2064B	  %51:gr64_nosp = nsw IMUL64rr %51:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2080B	  %52:gr64 = LEA64r %49:gr64, 8, %51:gr64_nosp, 0, $noreg
2096B	  %53:gr64_nosp = MOVSX64rm32 %stack.11.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2112B	  %54:gr64 = MOV64rm %stack.5.c.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.c.addr)
2128B	  %63:fr64 = MOVSDrm_alt %54:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.arrayidx851)
2160B	  %48:gr64 = ADD64rm %48:gr64(tied-def 0), %stack.7.r, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.r)
2176B	  %61:gr64 = LEA64r %48:gr64, 8, %51:gr64_nosp, 0, $noreg
2208B	  %63:fr64 = MULSDrm %63:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx91)
2240B	  %63:fr64 = ADDSDrm %63:fr64(tied-def 0), %52:gr64, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx84)
2256B	  %66:fr64 = MOVSDrm_alt %61:gr64, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx100)
2288B	  %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %61:gr64, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
2320B	  %66:fr64 = ADDSDrm %66:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx110)
2352B	  %66:fr64 = MULSDrm %66:fr64(tied-def 0), %54:gr64, 1, $noreg, 8, $noreg :: (load 8 from %ir.arrayidx93)
2384B	  %66:fr64 = ADDSDrr %66:fr64(tied-def 0), %63:fr64
2400B	  %71:fr64 = MOVSDrm_alt %stack.13.r2, 8, %53:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx116)
2432B	  %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx119)
2464B	  %71:fr64 = ADDSDrm %71:fr64(tied-def 0), %stack.12.r1, 8, %53:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx123)
2496B	  %71:fr64 = MULSDrm %71:fr64(tied-def 0), %54:gr64, 1, $noreg, 16, $noreg :: (load 8 from %ir.arrayidx114)
2528B	  %71:fr64 = ADDSDrr %71:fr64(tied-def 0), %66:fr64
2544B	  MOVSDmr %52:gr64, 8, %53:gr64_nosp, 0, $noreg, %71:fr64 :: (store 8 into %ir.arrayidx132)
2560B	  INC32m %stack.11.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
2576B	  JMP_1 %bb.10

2592B	bb.12.for.end135:
	; predecessors: %bb.10
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

2608B	  INC32m %stack.10.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
2624B	  JMP_1 %bb.5

2640B	bb.13.for.end138:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

2656B	  INC32m %stack.9.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
2672B	  JMP_1 %bb.3

2688B	bb.14.for.end141:
	; predecessors: %bb.3
	  successors: %bb.15(0x50000000), %bb.16(0x30000000); %bb.15(62.50%), %bb.16(37.50%)

2704B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
2720B	  JCC_1 %bb.16, 4, implicit killed $eflags
2736B	  JMP_1 %bb.15

2752B	bb.15.if.then143:
	; predecessors: %bb.14
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2800B	  $edi = MOV32ri 3
2816B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
2832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

2848B	bb.16.if.end144:
	; predecessors: %bb.14, %bb.15
	  successors: %bb.17(0x40000000), %bb.18(0x40000000); %bb.17(50.00%), %bb.18(50.00%)

2864B	  %18:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
2880B	  %19:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
2896B	  %20:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
2912B	  %21:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
2928B	  %22:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
2944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2960B	  $rdi = COPY %18:gr64
2976B	  $esi = COPY %19:gr32
2992B	  $edx = COPY %20:gr32
3008B	  $ecx = COPY %21:gr32
3024B	  $r8d = COPY %22:gr32
3040B	  CALL64pcrel32 @comm3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8d, implicit-def $rsp, implicit-def $ssp
3056B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3072B	  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
3088B	  JCC_1 %bb.18, 14, implicit killed $eflags
3104B	  JMP_1 %bb.17

3120B	bb.17.if.then146:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3136B	  %23:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
3152B	  %24:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
3168B	  %25:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
3184B	  %26:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
3200B	  %27:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
3216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3312B	  $r8 = MOV32ri64 @.str.55
3316B	  $rdi = COPY %23:gr64
3320B	  $esi = COPY %24:gr32
3328B	  $edx = COPY %25:gr32
3336B	  $ecx = COPY %26:gr32
3344B	  $r9d = COPY %27:gr32
3352B	  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
3360B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

3376B	bb.18.if.end147:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x40000000), %bb.20(0x40000000); %bb.19(50.00%), %bb.20(50.00%)

3392B	  %29:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 12, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 3)`)
3408B	  CMP32rm %29:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
3424B	  JCC_1 %bb.20, 12, implicit killed $eflags
3440B	  JMP_1 %bb.19

3456B	bb.19.if.then149:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3472B	  %31:gr64 = MOV64rm %stack.8.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
3488B	  %32:gr32 = MOV32rm %stack.2.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
3504B	  %33:gr32 = MOV32rm %stack.3.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
3520B	  %34:gr32 = MOV32rm %stack.4.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
3536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3552B	  $rdi = COPY %31:gr64
3568B	  $esi = COPY %32:gr32
3584B	  $edx = COPY %33:gr32
3600B	  $ecx = COPY %34:gr32
3616B	  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
3632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

3648B	bb.20.if.end150:
	; predecessors: %bb.18, %bb.19

3664B	  RET 0

# End machine code for function psinv.

Before MISched:
# Machine code for function interp: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=2072, align=16, at location [SP+8]
  fi#21: size=2072, align=16, at location [SP+8]
  fi#22: size=2072, align=16, at location [SP+8]
Constant Pool:
  cp#0: 1.250000e-01, align=8
  cp#1: 2.500000e-01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $rdi in %4, $esi in %5, $edx in %6, $ecx in %7, $r8 in %8, $r9d in %9

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9d
  %9:gr32 = COPY $r9d
  %8:gr64 = COPY $r8
  %7:gr32 = COPY $ecx
  %6:gr32 = COPY $edx
  %5:gr32 = COPY $esi
  %4:gr64 = COPY $rdi
  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.oz.addr)
  MOV32mr %stack.1.mm1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.mm1.addr)
  MOV32mr %stack.2.mm2.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.mm2.addr)
  MOV32mr %stack.3.mm3.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.mm3.addr)
  MOV64mr %stack.4.ou.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.ou.addr)
  MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
  undef %354.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
  MOV64mr %stack.9.z, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.z)
  undef %338.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  MOV64mr %stack.10.u, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.u)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 7
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x40000000), %bb.26(0x40000000); %bb.3(50.00%), %bb.26(50.00%)

  CMP32mi8 %stack.5.n1.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.26, 4, implicit killed $eflags
  JMP_1 %bb.3

bb.3.land.lhs.true:
; predecessors: %bb.2
  successors: %bb.4(0x40000000), %bb.26(0x40000000); %bb.4(50.00%), %bb.26(50.00%)

  CMP32mi8 %fixed-stack.2, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  JCC_1 %bb.26, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.land.lhs.true2:
; predecessors: %bb.3
  successors: %bb.5(0x40000000), %bb.26(0x40000000); %bb.5(50.00%), %bb.26(50.00%)

  CMP32mi8 %fixed-stack.1, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  JCC_1 %bb.26, 4, implicit killed $eflags
  JMP_1 %bb.5

bb.5.if.then4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %569:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %571:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %575:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

bb.6.for.cond:
; predecessors: %bb.5, %bb.25
  successors: %bb.7(0x7c000000), %bb.77(0x04000000); %bb.7(96.88%), %bb.77(3.12%)

  %364:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  %364:gr32 = DEC32r %364:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %364:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.77, 13, implicit killed $eflags
  JMP_1 %bb.7

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

bb.8.for.cond6:
; predecessors: %bb.7, %bb.24
  successors: %bb.9(0x7c000000), %bb.25(0x04000000); %bb.9(96.88%), %bb.25(3.12%)

  %392:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %392:gr32 = DEC32r %392:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %392:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.25, 13, implicit killed $eflags
  JMP_1 %bb.9

bb.9.for.body9:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.10.for.cond10:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %394:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %394:gr32, %stack.1.mm1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.mm1.addr)
  JCC_1 %bb.12, 13, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body12:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %538:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %553:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %541:gr64_nosp = COPY %553:gr64_nosp
  %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
  %549:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %545:gr64_nosp = LEA64r %549:gr64_nosp, 1, $noreg, 1, $noreg
  %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
  %547:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
  %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
  %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
  MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
  %553:gr64_nosp = nsw INC64r %553:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
  %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
  %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
  %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
  MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
  %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
  %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
  %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
  %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
  MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.10

bb.12.for.end:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.13.for.cond63:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %398:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %398:gr32 = DEC32r %398:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %398:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.15, 13, implicit killed $eflags
  JMP_1 %bb.14

bb.14.for.body66:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %514:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %503:gr64 = COPY %514:gr64
  %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %503:gr64 = SHL64ri %503:gr64(tied-def 0), 4, implicit-def dead $eflags
  %503:gr64 = ADD64rm %503:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %516:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %507:gr64_nosp = COPY %516:gr64_nosp
  %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %507:gr64_nosp = SHL64ri %507:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
  %509:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %510:gr64_nosp = COPY %509:gr64_nosp
  %510:gr64_nosp = SHL64ri %510:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
  %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %514:gr64 = SHL64ri %514:gr64(tied-def 0), 3, implicit-def dead $eflags
  %514:gr64 = ADD64rm %514:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
  %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
  MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
  %530:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %521:gr64 = COPY %530:gr64
  %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %521:gr64 = SHL64ri %521:gr64(tied-def 0), 4, implicit-def dead $eflags
  %521:gr64 = ADD64rm %521:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %532:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %525:gr64_nosp = COPY %532:gr64_nosp
  %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %525:gr64_nosp = SHL64ri %525:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
  %527:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %528:gr64_nosp = COPY %527:gr64_nosp
  %528:gr64_nosp = SHL64ri %528:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %530:gr64 = SHL64ri %530:gr64(tied-def 0), 3, implicit-def dead $eflags
  %530:gr64 = ADD64rm %530:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
  %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
  %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
  %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
  %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
  MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.13

bb.15.for.end129:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.16.for.cond130:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %402:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %402:gr32 = DEC32r %402:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %402:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.18, 13, implicit killed $eflags
  JMP_1 %bb.17

bb.17.for.body133:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %475:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %475:gr64 = SHL64ri %475:gr64(tied-def 0), 4, implicit-def dead $eflags
  %475:gr64 = ADD64rm %475:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %477:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %479:gr64_nosp = LEA64r %477:gr64_nosp, 1, %477:gr64_nosp, 1, $noreg
  %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
  %482:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %485:fr64 = MOVSDrm_alt %stack.20.z1, 8, %482:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx145)
  %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
  %482:gr64_nosp = SHL64ri %482:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
  MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
  %488:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %488:gr64 = SHL64ri %488:gr64(tied-def 0), 4, implicit-def dead $eflags
  %488:gr64 = ADD64rm %488:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %490:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %492:gr64_nosp = LEA64r %490:gr64_nosp, 1, %490:gr64_nosp, 1, $noreg
  %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
  %494:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %495:gr64_nosp = COPY %494:gr64_nosp
  %495:gr64_nosp = SHL64ri %495:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %498:fr64 = MOVSDrm_alt %stack.20.z1, 8, %494:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx170)
  %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
  %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
  %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
  MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.16

bb.18.for.end190:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.19.for.cond191:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  %406:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %406:gr32 = DEC32r %406:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %406:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.21, 13, implicit killed $eflags
  JMP_1 %bb.20

bb.20.for.body194:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %442:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %446:gr64 = LEA64r %442:gr64_nosp, 1, %442:gr64_nosp, 1, $noreg
  %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %446:gr64 = SHL64ri %446:gr64(tied-def 0), 3, implicit-def dead $eflags
  %446:gr64 = ADD64rm %446:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %450:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %450:gr64_nosp = SHL64ri %450:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
  %453:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %456:fr64 = MOVSDrm_alt %stack.21.z2, 8, %453:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx206)
  %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
  %453:gr64_nosp = SHL64ri %453:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
  MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
  %457:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %460:gr64 = LEA64r %457:gr64_nosp, 1, %457:gr64_nosp, 1, $noreg
  %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %460:gr64 = SHL64ri %460:gr64(tied-def 0), 3, implicit-def dead $eflags
  %460:gr64 = ADD64rm %460:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %464:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %464:gr64_nosp = SHL64ri %464:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
  %466:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %467:gr64_nosp = COPY %466:gr64_nosp
  %467:gr64_nosp = SHL64ri %467:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %470:fr64 = MOVSDrm_alt %stack.21.z2, 8, %466:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx231)
  %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
  %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
  %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
  MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.19

bb.21.for.end251:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.22.for.cond252:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

  %410:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %410:gr32 = DEC32r %410:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %410:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.24, 13, implicit killed $eflags
  JMP_1 %bb.23

bb.23.for.body255:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %412:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %416:gr64 = LEA64r %412:gr64_nosp, 1, %412:gr64_nosp, 1, $noreg
  %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %416:gr64 = SHL64ri %416:gr64(tied-def 0), 3, implicit-def dead $eflags
  %416:gr64 = ADD64rm %416:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %418:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %420:gr64_nosp = LEA64r %418:gr64_nosp, 1, %418:gr64_nosp, 1, $noreg
  %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
  %423:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %426:fr64 = MOVSDrm_alt %stack.22.z3, 8, %423:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx268)
  %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
  %423:gr64_nosp = SHL64ri %423:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
  MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
  %427:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %430:gr64 = LEA64r %427:gr64_nosp, 1, %427:gr64_nosp, 1, $noreg
  %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %430:gr64 = SHL64ri %430:gr64(tied-def 0), 3, implicit-def dead $eflags
  %430:gr64 = ADD64rm %430:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %432:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %434:gr64_nosp = LEA64r %432:gr64_nosp, 1, %432:gr64_nosp, 1, $noreg
  %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
  %436:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %437:gr64_nosp = COPY %436:gr64_nosp
  %437:gr64_nosp = SHL64ri %437:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  %440:fr64 = MOVSDrm_alt %stack.22.z3, 8, %436:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx295)
  %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
  %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
  %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
  MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.22

bb.24.for.end316:
; predecessors: %bb.22
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.8

bb.25.for.end319:
; predecessors: %bb.8
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.6

bb.26.if.else:
; predecessors: %bb.2, %bb.3, %bb.4
  successors: %bb.27(0x40000000), %bb.28(0x40000000); %bb.27(50.00%), %bb.28(50.00%)

  CMP32mi8 %stack.5.n1.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.28, 5, implicit killed $eflags
  JMP_1 %bb.27

bb.27.if.then324:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
  MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t1)
  JMP_1 %bb.29

bb.28.if.else325:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)
  MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t1)

bb.29.if.end326:
; predecessors: %bb.28, %bb.27
  successors: %bb.30(0x40000000), %bb.31(0x40000000); %bb.30(50.00%), %bb.31(50.00%)

  CMP32mi8 %fixed-stack.2, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  JCC_1 %bb.31, 5, implicit killed $eflags
  JMP_1 %bb.30

bb.30.if.then328:
; predecessors: %bb.29
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
  MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t2)
  JMP_1 %bb.32

bb.31.if.else329:
; predecessors: %bb.29
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)
  MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t2)

bb.32.if.end330:
; predecessors: %bb.31, %bb.30
  successors: %bb.33(0x40000000), %bb.34(0x40000000); %bb.33(50.00%), %bb.34(50.00%)

  CMP32mi8 %fixed-stack.1, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  JCC_1 %bb.34, 5, implicit killed $eflags
  JMP_1 %bb.33

bb.33.if.then332:
; predecessors: %bb.32
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
  MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t3)
  JMP_1 %bb.35

bb.34.if.else333:
; predecessors: %bb.32
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)
  MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t3)

bb.35.if.end334:
; predecessors: %bb.34, %bb.33
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %27:gr32 = MOV32rm %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  MOV32mr %stack.11.i3, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.i3)
  %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %562:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %564:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)

bb.36.for.cond335:
; predecessors: %bb.35, %bb.55
  successors: %bb.37(0x7c000000), %bb.56(0x04000000); %bb.37(96.88%), %bb.56(3.12%)

  %30:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  %30:gr32 = DEC32r %30:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %30:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.56, 15, implicit killed $eflags
  JMP_1 %bb.37

bb.37.for.body338:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  %211:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %211:gr32 :: (store 4 into %ir.i2)

bb.38.for.cond339:
; predecessors: %bb.37, %bb.45
  successors: %bb.39(0x7c000000), %bb.46(0x04000000); %bb.39(96.88%), %bb.46(3.12%)

  %214:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %214:gr32 = DEC32r %214:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %214:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.46, 15, implicit killed $eflags
  JMP_1 %bb.39

bb.39.for.body342:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %295:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %295:gr32 :: (store 4 into %ir.i1)

bb.40.for.cond343:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  %298:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %298:gr32 = DEC32r %298:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %298:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.42, 15, implicit killed $eflags
  JMP_1 %bb.41

bb.41.for.body346:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %355:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %336:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  %336:gr64 = NOT64r %336:gr64(tied-def 0)
  %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
  %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %340:gr64 = SHL64ri %340:gr64(tied-def 0), 3, implicit-def dead $eflags
  %340:gr64 = ADD64rm %340:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %359:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %344:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  %344:gr64 = NOT64r %344:gr64(tied-def 0)
  %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
  %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
  %348:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %351:gr64_nosp = LEA64r %348:gr64_nosp, 1, %348:gr64_nosp, 0, $noreg
  %350:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
  %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
  %355:gr64_nosp = DEC64r %355:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %355:gr64_nosp = SHL64ri %355:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  %355:gr64_nosp = ADD64rm %355:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %359:gr64_nosp = DEC64r %359:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
  %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
  MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.40

bb.42.for.end389:
; predecessors: %bb.40
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.43.for.cond390:
; predecessors: %bb.42, %bb.44
  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

  %302:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %302:gr32 = DEC32r %302:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %302:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.45, 15, implicit killed $eflags
  JMP_1 %bb.44

bb.44.for.body393:
; predecessors: %bb.43
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %324:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %306:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  %306:gr64 = NOT64r %306:gr64(tied-def 0)
  %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
  %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %310:gr64 = SHL64ri %310:gr64(tied-def 0), 3, implicit-def dead $eflags
  %310:gr64 = ADD64rm %310:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %328:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %314:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  %314:gr64 = NOT64r %314:gr64(tied-def 0)
  %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
  %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
  %318:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %321:gr64_nosp = LEA64r %318:gr64_nosp, 1, %318:gr64_nosp, 0, $noreg
  %320:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
  %324:gr64_nosp = DEC64r %324:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %324:gr64_nosp = SHL64ri %324:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  %324:gr64_nosp = ADD64rm %324:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %328:gr64_nosp = DEC64r %328:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
  %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
  %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
  %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
  %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
  MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.43

bb.45.for.end446:
; predecessors: %bb.43
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.38

bb.46.for.end449:
; predecessors: %bb.38
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.47.for.cond450:
; predecessors: %bb.46, %bb.54
  successors: %bb.48(0x7c000000), %bb.55(0x04000000); %bb.48(96.88%), %bb.55(3.12%)

  %218:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %218:gr32 = DEC32r %218:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %218:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.55, 15, implicit killed $eflags
  JMP_1 %bb.48

bb.48.for.body453:
; predecessors: %bb.47
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %220:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %220:gr32 :: (store 4 into %ir.i1)

bb.49.for.cond454:
; predecessors: %bb.48, %bb.50
  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

  %223:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %223:gr32 = DEC32r %223:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %223:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.51, 15, implicit killed $eflags
  JMP_1 %bb.50

bb.50.for.body457:
; predecessors: %bb.49
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %283:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %265:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  %265:gr64 = NOT64r %265:gr64(tied-def 0)
  %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
  %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %269:gr64 = SHL64ri %269:gr64(tied-def 0), 3, implicit-def dead $eflags
  %269:gr64 = ADD64rm %269:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %290:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %273:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  %273:gr64 = NOT64r %273:gr64(tied-def 0)
  %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
  %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
  %277:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %280:gr64_nosp = LEA64r %277:gr64_nosp, 1, %277:gr64_nosp, 0, $noreg
  %279:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  %283:gr64_nosp = DEC64r %283:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %283:gr64_nosp = SHL64ri %283:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  %283:gr64_nosp = ADD64rm %283:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %286:gr64_nosp = COPY %290:gr64_nosp
  %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
  %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
  %290:gr64_nosp = DEC64r %290:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
  %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
  %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
  %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
  MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.49

bb.51.for.end510:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.52.for.cond511:
; predecessors: %bb.51, %bb.53
  successors: %bb.53(0x7c000000), %bb.54(0x04000000); %bb.53(96.88%), %bb.54(3.12%)

  %227:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %227:gr32 = DEC32r %227:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %227:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.54, 15, implicit killed $eflags
  JMP_1 %bb.53

bb.53.for.body514:
; predecessors: %bb.52
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %249:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %231:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  %231:gr64 = NOT64r %231:gr64(tied-def 0)
  %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
  %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %235:gr64 = SHL64ri %235:gr64(tied-def 0), 3, implicit-def dead $eflags
  %235:gr64 = ADD64rm %235:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %256:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %239:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  %239:gr64 = NOT64r %239:gr64(tied-def 0)
  %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
  %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
  %243:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %246:gr64_nosp = LEA64r %243:gr64_nosp, 1, %243:gr64_nosp, 0, $noreg
  %245:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
  %249:gr64_nosp = DEC64r %249:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %249:gr64_nosp = SHL64ri %249:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  %249:gr64_nosp = ADD64rm %249:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %252:gr64_nosp = COPY %256:gr64_nosp
  %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
  %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
  %256:gr64_nosp = DEC64r %256:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
  %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
  MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.52

bb.54.for.end584:
; predecessors: %bb.52
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.47

bb.55.for.end587:
; predecessors: %bb.47
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.36

bb.56.for.end590:
; predecessors: %bb.36
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %568:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

bb.57.for.cond591:
; predecessors: %bb.56, %bb.76
  successors: %bb.58(0x7c000000), %bb.77(0x04000000); %bb.58(96.88%), %bb.77(3.12%)

  %34:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.77, 15, implicit killed $eflags
  JMP_1 %bb.58

bb.58.for.body594:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  %36:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %36:gr32 :: (store 4 into %ir.i2)

bb.59.for.cond595:
; predecessors: %bb.58, %bb.66
  successors: %bb.60(0x7c000000), %bb.67(0x04000000); %bb.60(96.88%), %bb.67(3.12%)

  %39:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.67, 15, implicit killed $eflags
  JMP_1 %bb.60

bb.60.for.body598:
; predecessors: %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %134:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %134:gr32 :: (store 4 into %ir.i1)

bb.61.for.cond599:
; predecessors: %bb.60, %bb.62
  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

  %137:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %137:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.63, 15, implicit killed $eflags
  JMP_1 %bb.62

bb.62.for.body602:
; predecessors: %bb.61
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %205:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %180:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  %180:gr64 = NOT64r %180:gr64(tied-def 0)
  %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
  %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %184:gr64 = SHL64ri %184:gr64(tied-def 0), 3, implicit-def dead $eflags
  %184:gr64 = ADD64rm %184:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %201:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %188:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  %188:gr64 = NOT64r %188:gr64(tied-def 0)
  %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
  %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
  %192:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %195:gr64_nosp = LEA64r %192:gr64_nosp, 1, %192:gr64_nosp, 0, $noreg
  %194:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
  %196:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %198:gr64_nosp = COPY %205:gr64_nosp
  %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
  %201:gr64_nosp = DEC64r %201:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
  %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
  %205:gr64_nosp = DEC64r %205:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
  %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
  %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
  %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
  %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
  MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.61

bb.63.for.end655:
; predecessors: %bb.61
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.64.for.cond656:
; predecessors: %bb.63, %bb.65
  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)

  %141:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %141:gr32 = DEC32r %141:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %141:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.66, 15, implicit killed $eflags
  JMP_1 %bb.65

bb.65.for.body659:
; predecessors: %bb.64
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  %171:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %145:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  %145:gr64 = NOT64r %145:gr64(tied-def 0)
  %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
  %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %149:gr64 = SHL64ri %149:gr64(tied-def 0), 3, implicit-def dead $eflags
  %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %166:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %153:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  %153:gr64 = NOT64r %153:gr64(tied-def 0)
  %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
  %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
  %157:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %160:gr64_nosp = LEA64r %157:gr64_nosp, 1, %157:gr64_nosp, 0, $noreg
  %159:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
  %161:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %163:gr64_nosp = COPY %171:gr64_nosp
  %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
  %166:gr64_nosp = DEC64r %166:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
  %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
  %171:gr64_nosp = DEC64r %171:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
  %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
  %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
  MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.64

bb.66.for.end729:
; predecessors: %bb.64
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.59

bb.67.for.end732:
; predecessors: %bb.59
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.68.for.cond733:
; predecessors: %bb.67, %bb.75
  successors: %bb.69(0x7c000000), %bb.76(0x04000000); %bb.69(96.88%), %bb.76(3.12%)

  %43:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.76, 15, implicit killed $eflags
  JMP_1 %bb.69

bb.69.for.body736:
; predecessors: %bb.68
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  %45:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.i1)

bb.70.for.cond737:
; predecessors: %bb.69, %bb.71
  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)

  %48:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %48:gr32 = DEC32r %48:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.72, 15, implicit killed $eflags
  JMP_1 %bb.71

bb.71.for.body740:
; predecessors: %bb.70
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  %126:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %98:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  %98:gr64 = NOT64r %98:gr64(tied-def 0)
  %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
  %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
  %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %122:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %106:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  %106:gr64 = NOT64r %106:gr64(tied-def 0)
  %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
  %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
  %110:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %113:gr64_nosp = LEA64r %110:gr64_nosp, 1, %110:gr64_nosp, 0, $noreg
  %112:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
  %114:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %116:gr64_nosp = COPY %126:gr64_nosp
  %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
  %118:gr64_nosp = COPY %122:gr64_nosp
  %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
  %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
  %122:gr64_nosp = DEC64r %122:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
  %126:gr64_nosp = DEC64r %126:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
  %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
  %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
  %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
  MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.70

bb.72.for.end810:
; predecessors: %bb.70
  successors: %bb.73(0x80000000); %bb.73(100.00%)

  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

bb.73.for.cond811:
; predecessors: %bb.72, %bb.74
  successors: %bb.74(0x7c000000), %bb.75(0x04000000); %bb.74(96.88%), %bb.75(3.12%)

  %52:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %52:gr32 = DEC32r %52:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %52:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  JCC_1 %bb.75, 15, implicit killed $eflags
  JMP_1 %bb.74

bb.74.for.body814:
; predecessors: %bb.73
  successors: %bb.73(0x80000000); %bb.73(100.00%)

  %86:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %56:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  %56:gr64 = NOT64r %56:gr64(tied-def 0)
  %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
  %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  %60:gr64 = SHL64ri %60:gr64(tied-def 0), 3, implicit-def dead $eflags
  %60:gr64 = ADD64rm %60:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %80:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %64:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  %64:gr64 = NOT64r %64:gr64(tied-def 0)
  %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
  %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
  %68:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %71:gr64_nosp = LEA64r %68:gr64_nosp, 1, %68:gr64_nosp, 0, $noreg
  %70:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
  %72:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %74:gr64_nosp = COPY %86:gr64_nosp
  %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
  %76:gr64_nosp = COPY %80:gr64_nosp
  %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
  %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
  %80:gr64_nosp = DEC64r %80:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
  %86:gr64_nosp = DEC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
  %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
  %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
  %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
  MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.73

bb.75.for.end916:
; predecessors: %bb.73
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.68

bb.76.for.end919:
; predecessors: %bb.68
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.57

bb.77.if.end923:
; predecessors: %bb.57, %bb.6
  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.79, 4, implicit killed $eflags
  JMP_1 %bb.78

bb.78.if.then925:
; predecessors: %bb.77
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 7
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.79.if.end926:
; predecessors: %bb.77, %bb.78
  successors: %bb.80(0x40000000), %bb.81(0x40000000); %bb.80(50.00%), %bb.81(50.00%)

  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
  JCC_1 %bb.81, 14, implicit killed $eflags
  JMP_1 %bb.80

bb.80.if.then928:
; predecessors: %bb.79
  successors: %bb.81(0x80000000); %bb.81(100.00%)

  %367:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %368:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %369:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %370:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  %372:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  %372:gr32 = DEC32r %372:gr32(tied-def 0), implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %367:gr64
  $esi = COPY %368:gr32
  $edx = COPY %369:gr32
  $ecx = COPY %370:gr32
  $r8 = MOV32ri64 @.str.56
  $r9d = COPY %372:gr32
  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %374:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %375:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %376:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  %377:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  %378:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %374:gr64
  $esi = COPY %375:gr32
  $edx = COPY %376:gr32
  $ecx = COPY %377:gr32
  $r8 = MOV32ri64 @.str.57
  $r9d = COPY %378:gr32
  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.81.if.end930:
; predecessors: %bb.79, %bb.80
  successors: %bb.82(0x40000000), %bb.83(0x40000000); %bb.82(50.00%), %bb.83(50.00%)

  %380:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 20, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 5)`)
  CMP32rm %380:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  JCC_1 %bb.83, 12, implicit killed $eflags
  JMP_1 %bb.82

bb.82.if.then932:
; predecessors: %bb.81
  successors: %bb.83(0x80000000); %bb.83(100.00%)

  %382:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  %383:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  %384:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  %385:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %382:gr64
  $esi = COPY %383:gr32
  $edx = COPY %384:gr32
  $ecx = COPY %385:gr32
  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %386:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %387:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %388:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  %389:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %386:gr64
  $esi = COPY %387:gr32
  $edx = COPY %388:gr32
  $ecx = COPY %389:gr32
  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.83.if.end933:
; predecessors: %bb.81, %bb.82

  RET 0

# End machine code for function interp.

********** MI Scheduling **********
interp:%bb.0 entry
  From: %9:gr32 = COPY $r9d
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 19
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %3 %338 %1 %354 
Live Thru: 
  LiveReg: %3
  LiveReg: %338
  LiveReg: %1
  LiveReg: %354
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=8
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(16): Data Latency=0 Reg=%9
    SU(11): Data Latency=0 Reg=%9
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %8:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(17): Data Latency=0 Reg=%8
    SU(10): Data Latency=0 Reg=%8
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %7:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %6:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%6
    SU(8): Data Latency=0 Reg=%6
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %5:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%5
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %4:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%4
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.oz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.mm1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.mm1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.mm2.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.mm2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.mm3.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.mm3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.ou.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.ou.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   undef %354.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   MOV64mr %stack.9.z, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.z)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   undef %338.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   MOV64mr %stack.10.u, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.u)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(18): Ord  Latency=4 Artificial
    SU(15): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 14 13 12 11 10 9 8 7 6 18 15 
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
Bottom Pressure:
GR16=8
  Ready @4c
  BotQ.A BotLatency SU(18) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 16 14 13 12 11 10 9 8 7 6 15 
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV64mr %stack.10.u, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.u)
Bottom Pressure:
GR16=10
  LiveReg: %8
  UpdateRegP: SU(10) MOV64mr %stack.4.ou.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.ou.addr)
              to 
  UpdateRegP: SU(17) MOV64mr %stack.10.u, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.u)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 16 14 13 12 11 10 9 8 7 6 
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
Bottom Pressure:
GR16=10
  LiveReg: %9
  UpdateRegP: SU(11) MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(16) undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
              to GR16 -2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 6 14 13 12 11 10 9 8 7 
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) undef %338.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
Bottom Pressure:
GR16=8
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 14 13 12 11 10 9 8 
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV64mr %stack.9.z, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.z)
Bottom Pressure:
GR16=10
  LiveReg: %4
  UpdateRegP: SU(6) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.oz.addr)
              to 
  UpdateRegP: SU(14) MOV64mr %stack.9.z, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.z)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 8 13 12 11 10 9 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
Bottom Pressure:
GR16=10
  LiveReg: %5
  UpdateRegP: SU(7) MOV32mr %stack.1.mm1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.mm1.addr)
              to 
  UpdateRegP: SU(13) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 8 9 12 11 10 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) undef %354.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
Bottom Pressure:
GR16=10
  LiveReg: %6
  UpdateRegP: SU(8) MOV32mr %stack.2.mm2.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.mm2.addr)
              to 
  UpdateRegP: SU(12) undef %354.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
              to GR16 -2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 8 9 10 11 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=10
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 8 9 10 0 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.ou.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.ou.addr)
Bottom Pressure:
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 8 9 0 1 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.mm3.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.mm3.addr)
Bottom Pressure:
GR16=12
  LiveReg: %7
  UpdateRegP: SU(9) MOV32mr %stack.3.mm3.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.mm3.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 8 1 0 2 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.mm2.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.mm2.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 2 1 0 3 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.mm1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.mm1.addr)
Bottom Pressure:
GR16=12
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.oz.addr)
Bottom Pressure:
GR16=12
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 2 1 0 5 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %4:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %5:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %6:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %7:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gr32 = COPY $r9d
SU(1):   %8:gr64 = COPY $r8
SU(2):   %7:gr32 = COPY $ecx
SU(3):   %6:gr32 = COPY $edx
SU(4):   %5:gr32 = COPY $esi
SU(5):   %4:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.oz.addr)
SU(7):   MOV32mr %stack.1.mm1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.mm1.addr)
SU(8):   MOV32mr %stack.2.mm2.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.mm2.addr)
SU(9):   MOV32mr %stack.3.mm3.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.mm3.addr)
SU(10):   MOV64mr %stack.4.ou.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.ou.addr)
SU(11):   MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
SU(12):   undef %354.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
SU(13):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
SU(14):   MOV64mr %stack.9.z, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.z)
SU(15):   undef %338.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
SU(16):   undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
SU(17):   MOV64mr %stack.10.u, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.u)
SU(18):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
interp:%bb.5 if.then4
  From: MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %569:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %571:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %575:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %575:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %571:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %569:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
SU(1):   %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %569:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(4):   %571:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(5):   %575:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
interp:%bb.6 for.cond
  From: %364:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
    To: JCC_1 %bb.77, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %364:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%364
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %364:gr32 = DEC32r %364:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%364
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%364
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %364:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%364
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.77, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %364:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %364:gr32 = DEC32r %364:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %364:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %364:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
SU(1):   %364:gr32 = DEC32r %364:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %364:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
interp:%bb.8 for.cond6
  From: %392:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
    To: JCC_1 %bb.25, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %392:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%392
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %392:gr32 = DEC32r %392:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%392
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%392
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %392:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%392
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.25, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %392:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %392:gr32 = DEC32r %392:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %392:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %392:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(1):   %392:gr32 = DEC32r %392:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %392:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
interp:%bb.10 for.cond10
  From: %394:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.12, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %394:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%394
  Single Issue       : false;
SU(1):   CMP32rm %394:gr32, %stack.1.mm1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%394
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %394:gr32, %stack.1.mm1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %394:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %394:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %394:gr32, %stack.1.mm1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.mm1.addr)

********** MI Scheduling **********
interp:%bb.11 for.body12
  From: %538:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
    To: JMP_1 %bb.10
 RegionInstrs: 28
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=18
Live In: %354 %1 
Live Out: %354 %1 
Live Thru: GR16=4
  LiveReg: %354
  UpdateRegP: SU(3) %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(16) %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(7) %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(11) %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %538:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 33
  Successors:
    SU(17): Data Latency=4 Reg=%538
    SU(4): Data Latency=4 Reg=%538
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %553:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(15): Data Latency=4 Reg=%553
    SU(2): Data Latency=4 Reg=%553
    SU(15): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %541:gr64_nosp = COPY %553:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(1): Data Latency=4 Reg=%553
  Successors:
    SU(3): Data Latency=0 Reg=%541
    SU(3): Out  Latency=0
    SU(15): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(2): Data Latency=0 Reg=%541
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%541
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 29
  Predecessors:
    SU(3): Data Latency=1 Reg=%541
    SU(0): Data Latency=4 Reg=%538
  Successors:
    SU(12): Data Latency=1 Reg=%542
    SU(8): Data Latency=1 Reg=%542
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %549:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(11): Data Latency=4 Reg=%549
    SU(6): Data Latency=4 Reg=%549
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %545:gr64_nosp = LEA64r %549:gr64_nosp, 1, $noreg, 1, $noreg
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(5): Data Latency=4 Reg=%549
  Successors:
    SU(7): Data Latency=1 Reg=%545
    SU(7): Out  Latency=0
    SU(11): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 29
  Predecessors:
    SU(6): Data Latency=1 Reg=%545
    SU(6): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%545
    SU(8): Data Latency=1 Reg=%545
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 28
  Predecessors:
    SU(7): Data Latency=1 Reg=%545
    SU(4): Data Latency=1 Reg=%542
  Successors:
    SU(10): Data Latency=1 Reg=%546
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %547:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 31
  Successors:
    SU(26): Data Latency=4 Reg=%547
    SU(24): Data Latency=4 Reg=%547
    SU(23): Data Latency=4 Reg=%547
    SU(21): Data Latency=4 Reg=%547
    SU(20): Data Latency=4 Reg=%547
    SU(19): Data Latency=4 Reg=%547
    SU(14): Data Latency=4 Reg=%547
    SU(13): Data Latency=4 Reg=%547
    SU(10): Data Latency=4 Reg=%547
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 27
  Predecessors:
    SU(8): Data Latency=1 Reg=%546
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(13): Data Latency=4 Reg=%551
    SU(13): Out  Latency=0
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(11):   %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Data Latency=4 Reg=%549
    SU(5): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%549
    SU(12): Data Latency=1 Reg=%549
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 24
  Predecessors:
    SU(4): Data Latency=1 Reg=%542
    SU(11): Data Latency=1 Reg=%549
  Successors:
    SU(20): Data Latency=1 Reg=%550
    SU(13): Data Latency=1 Reg=%550
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 23
  Predecessors:
    SU(10): Data Latency=4 Reg=%551
    SU(12): Data Latency=1 Reg=%550
    SU(10): Out  Latency=0
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(25): Data Latency=4 Reg=%551
    SU(14): Data Latency=4 Reg=%551
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(14):   MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 19
  Predecessors:
    SU(13): Data Latency=4 Reg=%551
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(24): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(15):   %553:gr64_nosp = nsw INC64r %553:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=%553
    SU(1): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%553
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(15): Data Latency=1 Reg=%553
    SU(15): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%553
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(16): Data Latency=1 Reg=%553
    SU(0): Data Latency=4 Reg=%538
  Successors:
    SU(22): Data Latency=1 Reg=%554
    SU(18): Data Latency=1 Reg=%554
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 19
  Predecessors:
    SU(17): Data Latency=1 Reg=%554
    SU(11): Data Latency=1 Reg=%549
  Successors:
    SU(24): Data Latency=1 Reg=%555
    SU(19): Data Latency=1 Reg=%555
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 18
  Predecessors:
    SU(18): Data Latency=1 Reg=%555
    SU(14): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(20): Data Latency=4 Reg=%557
    SU(20): Out  Latency=0
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(20):   %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(19): Data Latency=4 Reg=%557
    SU(19): Out  Latency=0
    SU(14): Ord  Latency=1 Memory
    SU(12): Data Latency=1 Reg=%550
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(21): Data Latency=4 Reg=%557
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(21):   MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 10
  Predecessors:
    SU(20): Data Latency=4 Reg=%557
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(24): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(22):   %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 10
  Predecessors:
    SU(17): Data Latency=1 Reg=%554
    SU(7): Data Latency=1 Reg=%545
  Successors:
    SU(23): Data Latency=1 Reg=%558
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(23):   %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 9
  Predecessors:
    SU(22): Data Latency=1 Reg=%558
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(24): Data Latency=4 Reg=%561
    SU(24): Out  Latency=0
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(24):   %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 5
  Predecessors:
    SU(23): Data Latency=4 Reg=%561
    SU(23): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(18): Data Latency=1 Reg=%555
    SU(14): Ord  Latency=1 Memory
    SU(9): Data Latency=4 Reg=%547
  Successors:
    SU(25): Data Latency=4 Reg=%561
    SU(25): Out  Latency=0
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(25):   %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 1
  Predecessors:
    SU(24): Data Latency=4 Reg=%561
    SU(24): Out  Latency=0
    SU(13): Data Latency=4 Reg=%551
  Successors:
    SU(26): Data Latency=1 Reg=%561
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(26):   MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=%561
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%547
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(27):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 3
  Predecessors:
    SU(24): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 32
  Height             : 0
  Predecessors:
    SU(27): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 34
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 27 
  Cand SU(26) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(27) 29c
  BotQ.A BotLatency SU(27) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %547
  UpdateRegP: SU(10) %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(13) %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
              to GR16 2
  UpdateRegP: SU(14) MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
              to FR32 1    FR32X 1
  UpdateRegP: SU(19) %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(20) %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
              to GR16 2
  UpdateRegP: SU(21) MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
              to FR32 1    FR32X 1
  UpdateRegP: SU(23) %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(24) %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
              to GR16 2
  UpdateRegP: SU(26) MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
              to FR32 1    FR32X 1
  LiveReg: %561
  UpdateRegP: SU(26) MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
              to 
  Ready @0c
  BotQ.A TopLatency SU(26) 34c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %561
  UpdateRegP: SU(25) %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
              to 
  LiveReg: %551
  UpdateRegP: SU(14) MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
              to 
  UpdateRegP: SU(25) %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
              to FR32 -1    FR32X -1
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %561
  UpdateRegP: SU(24) %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %555
  UpdateRegP: SU(19) %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(24) %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(24) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %558
  UpdateRegP: SU(23) %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(23) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 21 
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %554
  UpdateRegP: SU(18) %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(22) %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
              to 
  LiveReg: %545
  UpdateRegP: SU(8) %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(22) %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(22) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %557
  UpdateRegP: SU(21) MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
              to 
  Ready @10c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %557
  UpdateRegP: SU(20) %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %550
  UpdateRegP: SU(13) %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
              to 
  UpdateRegP: SU(20) %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
              to FR32 -1    FR32X -1
  Ready @14c
  BotQ.A BotLatency SU(20) 14c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @18c
  BotQ.A BotLatency SU(19) 18c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 14 
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  LiveReg: %549
  UpdateRegP: SU(12) %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @19c
  BotQ.A BotLatency SU(18) 19c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 17 
  Cand SU(14) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %538
  UpdateRegP: SU(4) %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(17) %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
              to 
  LiveReg: %553
  UpdateRegP: SU(17) %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @20c
  BotQ.A BotLatency SU(17) 20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 16 
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %553
  UpdateRegP: SU(16) %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(16) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 15 
  Cand SU(14) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %553:gr64_nosp = nsw INC64r %553:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %553
  UpdateRegP: SU(2) %541:gr64_nosp = COPY %553:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(15) %553:gr64_nosp = nsw INC64r %553:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(15) 22c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @19c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %551
  UpdateRegP: SU(13) %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
              to FR32 -1    FR32X -1
  Ready @23c
  BotQ.A BotLatency SU(13) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %542
  UpdateRegP: SU(8) %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(12) %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @24c
  BotQ.A BotLatency SU(12) 24c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %549
  UpdateRegP: SU(6) %545:gr64_nosp = LEA64r %549:gr64_nosp, 1, $noreg, 1, $noreg
              to GR16 -2
  UpdateRegP: SU(11) %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(11) 25c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
Bottom Pressure:
GR16=18
  LiveReg: %546
  UpdateRegP: SU(10) %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
              to FR32 -1    FR32X -1
  Ready @27c
  BotQ.A BotLatency SU(10) 27c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %547:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=16
  Ready @31c
  BotQ.A BotLatency SU(9) 31c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=14
  Ready @28c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=14
  LiveReg: %545
  UpdateRegP: SU(7) %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @29c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %545:gr64_nosp = LEA64r %549:gr64_nosp, 1, $noreg, 1, $noreg
Bottom Pressure:
GR16=12
  Ready @30c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %549:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=10
  Ready @34c
  BotQ.A BotLatency SU(5) 34c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %541
  UpdateRegP: SU(4) %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @29c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %541
  UpdateRegP: SU(3) %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %541:gr64_nosp = COPY %553:gr64_nosp
Bottom Pressure:
GR16=8
  Ready @30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %553:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=6
  Ready @34c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %538:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=4
  Ready @33c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %538:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(1):   %553:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(2):   %541:gr64_nosp = COPY %553:gr64_nosp
SU(3):   %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(4):   %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
SU(5):   %549:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %545:gr64_nosp = LEA64r %549:gr64_nosp, 1, $noreg, 1, $noreg
SU(7):   %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
SU(9):   %547:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
SU(11):   %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
SU(13):   %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
SU(14):   MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
SU(15):   %553:gr64_nosp = nsw INC64r %553:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(16):   %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(17):   %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
SU(18):   %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
SU(19):   %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
SU(20):   %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
SU(21):   MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
SU(22):   %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
SU(23):   %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
SU(24):   %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
SU(25):   %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
SU(26):   MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
SU(27):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.13 for.cond63
  From: %398:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.15, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %398:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%398
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %398:gr32 = DEC32r %398:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%398
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%398
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %398:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%398
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.15, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %398:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %398:gr32 = DEC32r %398:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %398:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %398:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %398:gr32 = DEC32r %398:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %398:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.14 for.body66
  From: %514:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.13
 RegionInstrs: 45
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=18
Live In: %569 %1 %354 %3 %338 
Live Out: %569 %1 %354 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %569
  UpdateRegP: SU(41) %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
              to 
  LiveReg: %1
  UpdateRegP: SU(17) %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(37) %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %354
  UpdateRegP: SU(14) %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(34) %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(7) %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(28) %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(2) %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(23) %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
Constraining copy SU(32)
  Local use SU(40) -> SU(32)
  Local use SU(39) -> SU(32)
SU(0):   %514:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 47
  Successors:
    SU(14): Data Latency=4 Reg=%514
    SU(1): Data Latency=4 Reg=%514
    SU(14): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %503:gr64 = COPY %514:gr64
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 43
  Predecessors:
    SU(0): Data Latency=4 Reg=%514
  Successors:
    SU(2): Data Latency=0 Reg=%503
    SU(2): Out  Latency=0
    SU(14): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 43
  Predecessors:
    SU(1): Data Latency=0 Reg=%503
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%503
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %503:gr64 = SHL64ri %503:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 42
  Predecessors:
    SU(2): Data Latency=1 Reg=%503
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%503
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %503:gr64 = ADD64rm %503:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 41
  Predecessors:
    SU(3): Data Latency=1 Reg=%503
    SU(3): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%503
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %516:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 43
  Successors:
    SU(17): Data Latency=4 Reg=%516
    SU(6): Data Latency=4 Reg=%516
    SU(17): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %507:gr64_nosp = COPY %516:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 39
  Predecessors:
    SU(5): Data Latency=4 Reg=%516
  Successors:
    SU(7): Data Latency=0 Reg=%507
    SU(7): Out  Latency=0
    SU(17): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 39
  Predecessors:
    SU(6): Data Latency=0 Reg=%507
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%507
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %507:gr64_nosp = SHL64ri %507:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 38
  Predecessors:
    SU(7): Data Latency=1 Reg=%507
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%507
    SU(9): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 37
  Predecessors:
    SU(4): Data Latency=4 Reg=%503
    SU(8): Out  Latency=0
    SU(8): Data Latency=1 Reg=%507
  Successors:
    SU(20): Data Latency=1 Reg=%507
    SU(13): Data Latency=1 Reg=%507
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %509:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 41
  Successors:
    SU(19): Data Latency=4 Reg=%509
    SU(11): Data Latency=4 Reg=%509
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %510:gr64_nosp = COPY %509:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 37
  Predecessors:
    SU(10): Data Latency=4 Reg=%509
  Successors:
    SU(12): Data Latency=0 Reg=%510
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %510:gr64_nosp = SHL64ri %510:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 37
  Predecessors:
    SU(11): Data Latency=0 Reg=%510
    SU(11): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%510
    SU(13): Data Latency=1 Reg=%510
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 36
  Predecessors:
    SU(9): Data Latency=1 Reg=%507
    SU(12): Data Latency=1 Reg=%510
  Successors:
    SU(19): Data Latency=4 Reg=%518
    SU(19): Out  Latency=0
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(14):   %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 39
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%514
    SU(0): Out  Latency=0
  Successors:
    SU(15): Data Latency=1 Reg=%514
    SU(15): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %514:gr64 = SHL64ri %514:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 38
  Predecessors:
    SU(14): Data Latency=1 Reg=%514
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%514
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %514:gr64 = ADD64rm %514:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 37
  Predecessors:
    SU(15): Data Latency=1 Reg=%514
    SU(15): Out  Latency=0
  Successors:
    SU(18): Data Latency=4 Reg=%514
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 34
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Data Latency=4 Reg=%516
    SU(5): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%516
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 33
  Predecessors:
    SU(16): Data Latency=4 Reg=%514
    SU(17): Data Latency=1 Reg=%516
  Successors:
    SU(19): Data Latency=1 Reg=%517
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 32
  Predecessors:
    SU(13): Data Latency=4 Reg=%518
    SU(18): Data Latency=1 Reg=%517
    SU(13): Out  Latency=0
    SU(10): Data Latency=4 Reg=%509
  Successors:
    SU(20): Data Latency=4 Reg=%518
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(20):   MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
  # preds left       : 10
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 28
  Predecessors:
    SU(19): Data Latency=4 Reg=%518
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%510
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=%507
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(21):   %530:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 27
  Predecessors:
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(34): Data Latency=4 Reg=%530
    SU(22): Data Latency=4 Reg=%530
    SU(34): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(22):   %521:gr64 = COPY %530:gr64
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 24
  Height             : 23
  Predecessors:
    SU(21): Data Latency=4 Reg=%530
  Successors:
    SU(23): Data Latency=0 Reg=%521
    SU(23): Out  Latency=0
    SU(34): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 14
  Predecessors:
    SU(22): Data Latency=0 Reg=%521
    SU(22): Out  Latency=0
  Successors:
    SU(24): Data Latency=1 Reg=%521
    SU(24): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   %521:gr64 = SHL64ri %521:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 13
  Predecessors:
    SU(23): Data Latency=1 Reg=%521
    SU(23): Out  Latency=0
  Successors:
    SU(25): Data Latency=1 Reg=%521
    SU(25): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %521:gr64 = ADD64rm %521:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 12
  Predecessors:
    SU(24): Data Latency=1 Reg=%521
    SU(24): Out  Latency=0
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(30): Data Latency=4 Reg=%521
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %532:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 22
  Predecessors:
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(37): Data Latency=4 Reg=%532
    SU(27): Data Latency=4 Reg=%532
    SU(37): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(27):   %525:gr64_nosp = COPY %532:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 24
  Height             : 18
  Predecessors:
    SU(26): Data Latency=4 Reg=%532
  Successors:
    SU(28): Data Latency=0 Reg=%525
    SU(28): Out  Latency=0
    SU(37): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 10
  Predecessors:
    SU(27): Data Latency=0 Reg=%525
    SU(27): Out  Latency=0
  Successors:
    SU(29): Data Latency=1 Reg=%525
    SU(29): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(29):   %525:gr64_nosp = SHL64ri %525:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 9
  Predecessors:
    SU(28): Data Latency=1 Reg=%525
    SU(28): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%525
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 8
  Predecessors:
    SU(25): Data Latency=4 Reg=%521
    SU(29): Out  Latency=0
    SU(29): Data Latency=1 Reg=%525
  Successors:
    SU(43): Data Latency=1 Reg=%525
    SU(42): Data Latency=1 Reg=%525
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(31):   %527:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 20
  Predecessors:
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%527
    SU(39): Data Latency=4 Reg=%527
    SU(32): Data Latency=4 Reg=%527
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(32):   %528:gr64_nosp = COPY %527:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 35
  Height             : 8
  Predecessors:
    SU(31): Data Latency=4 Reg=%527
    SU(40): Ord  Latency=0 Weak
    SU(39): Ord  Latency=0 Weak
  Successors:
    SU(33): Data Latency=0 Reg=%528
    SU(33): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(33):   %528:gr64_nosp = SHL64ri %528:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 8
  Predecessors:
    SU(32): Data Latency=0 Reg=%528
    SU(32): Out  Latency=0
  Successors:
    SU(43): Data Latency=1 Reg=%528
    SU(42): Data Latency=1 Reg=%528
  Pressure Diff      : 
  Single Issue       : false;
SU(34):   %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 23
  Predecessors:
    SU(22): Anti Latency=0
    SU(21): Data Latency=4 Reg=%530
    SU(21): Out  Latency=0
  Successors:
    SU(35): Data Latency=1 Reg=%530
    SU(35): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   %530:gr64 = SHL64ri %530:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 22
  Predecessors:
    SU(34): Data Latency=1 Reg=%530
    SU(34): Out  Latency=0
  Successors:
    SU(36): Data Latency=1 Reg=%530
    SU(36): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(36):   %530:gr64 = ADD64rm %530:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 21
  Predecessors:
    SU(35): Data Latency=1 Reg=%530
    SU(35): Out  Latency=0
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(38): Data Latency=4 Reg=%530
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 18
  Predecessors:
    SU(27): Anti Latency=0
    SU(26): Data Latency=4 Reg=%532
    SU(26): Out  Latency=0
  Successors:
    SU(38): Data Latency=1 Reg=%532
  Pressure Diff      : 
  Single Issue       : false;
SU(38):   %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 17
  Predecessors:
    SU(36): Data Latency=4 Reg=%530
    SU(37): Data Latency=1 Reg=%532
  Successors:
    SU(40): Data Latency=1 Reg=%533
    SU(39): Data Latency=1 Reg=%533
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(39):   %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
  # preds left       : 3
  # succs left       : 4
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 16
  Predecessors:
    SU(38): Data Latency=1 Reg=%533
    SU(31): Data Latency=4 Reg=%527
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%536
    SU(40): Out  Latency=0
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Weak
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(40):   %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
  # preds left       : 5
  # succs left       : 4
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 12
  Predecessors:
    SU(39): Data Latency=4 Reg=%536
    SU(39): Out  Latency=0
    SU(38): Data Latency=1 Reg=%533
    SU(31): Data Latency=4 Reg=%527
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%536
    SU(41): Out  Latency=0
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Weak
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(41):   %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 8
  Predecessors:
    SU(40): Data Latency=4 Reg=%536
    SU(40): Out  Latency=0
  Successors:
    SU(42): Data Latency=1 Reg=%536
    SU(42): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 7
  Predecessors:
    SU(41): Data Latency=1 Reg=%536
    SU(41): Out  Latency=0
    SU(33): Data Latency=1 Reg=%528
    SU(30): Data Latency=1 Reg=%525
    SU(20): Ord  Latency=1 Memory
  Successors:
    SU(43): Data Latency=4 Reg=%536
    SU(44): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(43):   MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
  # preds left       : 19
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 3
  Predecessors:
    SU(42): Data Latency=4 Reg=%536
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(33): Data Latency=1 Reg=%528
    SU(31): Ord  Latency=0 Memory
    SU(30): Data Latency=1 Reg=%525
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(44): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(44):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 44
  Height             : 3
  Predecessors:
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 47
  Height             : 0
  Predecessors:
    SU(44): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 47
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 
Scheduling SU(44) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(44) 44c
  BotQ.A BotLatency SU(44) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 43 
Scheduling SU(43) MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %528
  UpdateRegP: SU(42) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
              to GR16 2
  UpdateRegP: SU(43) MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %525
  UpdateRegP: SU(42) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
              to 
  UpdateRegP: SU(43) MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
              to FR32 1    FR32X 1
  LiveReg: %536
  UpdateRegP: SU(43) MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 
Scheduling SU(42) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %536
  UpdateRegP: SU(42) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(42) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 33 30 
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %536
  UpdateRegP: SU(41) %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(41) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 33 40 
  Cand SU(30) ORDER                              
  Cand SU(33) ORDER                              
Pick Bot WEAK      
Scheduling SU(33) %528:gr64_nosp = SHL64ri %528:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %528
  UpdateRegP: SU(33) %528:gr64_nosp = SHL64ri %528:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 40 32 
  Cand SU(30) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %528:gr64_nosp = COPY %527:gr64_nosp
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %527
  UpdateRegP: SU(32) %528:gr64_nosp = COPY %527:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(39) %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(40) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
              to GR16 2
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 40 
  Cand SU(30) ORDER                              
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
Bottom Pressure:
FR32=2
FR32X=2
GR16=14
  LiveReg: %536
  UpdateRegP: SU(40) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %533
  UpdateRegP: SU(39) %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(40) %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(40) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 39 
  Cand SU(30) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @16c
  BotQ.A BotLatency SU(39) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 38 31 
  Cand SU(30) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %530
  UpdateRegP: SU(38) %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
              to 
  LiveReg: %532
  UpdateRegP: SU(38) %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(38) 17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 36 37 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(36) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %532
  UpdateRegP: SU(27) %525:gr64_nosp = COPY %532:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(37) %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(37) 18c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 36 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %530:gr64 = ADD64rm %530:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %530
  UpdateRegP: SU(36) %530:gr64 = ADD64rm %530:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(36) 21c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 35 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) %530:gr64 = SHL64ri %530:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %530
  UpdateRegP: SU(35) %530:gr64 = SHL64ri %530:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(35) 22c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 34 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %530
  UpdateRegP: SU(22) %521:gr64 = COPY %530:gr64
              to GR16 -2
  UpdateRegP: SU(34) %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(34) 23c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %527:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @20c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %525
  UpdateRegP: SU(30) %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
              to 
  LiveReg: %521
  UpdateRegP: SU(30) %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 29 
  Cand SU(25) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %525:gr64_nosp = SHL64ri %525:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %525
  UpdateRegP: SU(29) %525:gr64_nosp = SHL64ri %525:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 28 
  Cand SU(25) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %525
  UpdateRegP: SU(28) %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 27 
  Cand SU(25) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %525:gr64_nosp = COPY %532:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @18c
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %532:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @22c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %521:gr64 = ADD64rm %521:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %521
  UpdateRegP: SU(25) %521:gr64 = ADD64rm %521:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) %521:gr64 = SHL64ri %521:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %521
  UpdateRegP: SU(24) %521:gr64 = SHL64ri %521:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %521
  UpdateRegP: SU(23) %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Scheduling SU(22) %521:gr64 = COPY %530:gr64
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @23c
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) %530:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @27c
  BotQ.A BotLatency SU(21) 27c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %510
  UpdateRegP: SU(13) %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(20) MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %507
  UpdateRegP: SU(13) %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(20) MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
              to FR32 1    FR32X 1
  LiveReg: %518
  UpdateRegP: SU(20) MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
              to 
  Ready @28c
  BotQ.A BotLatency SU(20) 28c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %518
  UpdateRegP: SU(19) %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %517
  UpdateRegP: SU(19) %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %509
  UpdateRegP: SU(11) %510:gr64_nosp = COPY %509:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(19) %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
              to FR32 -1    FR32X -1
  Ready @32c
  BotQ.A BotLatency SU(19) 32c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 13 
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %514
  UpdateRegP: SU(18) %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
              to 
  LiveReg: %516
  UpdateRegP: SU(18) %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @33c
  BotQ.A BotLatency SU(18) 33c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 16 17 
  Cand SU(13) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %516
  UpdateRegP: SU(6) %507:gr64_nosp = COPY %516:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(17) %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @34c
  BotQ.A BotLatency SU(17) 34c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 16 
  Cand SU(13) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %514:gr64 = ADD64rm %514:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %514
  UpdateRegP: SU(16) %514:gr64 = ADD64rm %514:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @37c
  BotQ.A BotLatency SU(16) 37c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 15 
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %514:gr64 = SHL64ri %514:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %514
  UpdateRegP: SU(15) %514:gr64 = SHL64ri %514:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @38c
  BotQ.A BotLatency SU(15) 38c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %514
  UpdateRegP: SU(1) %503:gr64 = COPY %514:gr64
              to GR16 -2
  UpdateRegP: SU(14) %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @39c
  BotQ.A BotLatency SU(14) 39c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @36c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 12 
  Cand SU(9) ORDER                              
  Cand SU(12) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(12) %510:gr64_nosp = SHL64ri %510:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %510
  UpdateRegP: SU(12) %510:gr64_nosp = SHL64ri %510:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @37c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 
  Cand SU(9) ORDER                              
  Cand SU(11) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(11) %510:gr64_nosp = COPY %509:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @37c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %509:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @41c
  BotQ.A BotLatency SU(10) 41c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %507
  UpdateRegP: SU(9) %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
              to 
  LiveReg: %503
  UpdateRegP: SU(9) %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @37c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %507:gr64_nosp = SHL64ri %507:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %507
  UpdateRegP: SU(8) %507:gr64_nosp = SHL64ri %507:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @38c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %507
  UpdateRegP: SU(7) %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @39c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %507:gr64_nosp = COPY %516:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @39c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %516:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @43c
  BotQ.A BotLatency SU(5) 43c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %503:gr64 = ADD64rm %503:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %503
  UpdateRegP: SU(4) %503:gr64 = ADD64rm %503:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @41c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %503:gr64 = SHL64ri %503:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %503
  UpdateRegP: SU(3) %503:gr64 = SHL64ri %503:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @42c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %503
  UpdateRegP: SU(2) %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @43c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %503:gr64 = COPY %514:gr64
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @43c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %514:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @47c
  BotQ.A BotLatency SU(0) 47c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %514:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %503:gr64 = COPY %514:gr64
SU(2):   %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %503:gr64 = SHL64ri %503:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(4):   %503:gr64 = ADD64rm %503:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(5):   %516:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %507:gr64_nosp = COPY %516:gr64_nosp
SU(7):   %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %507:gr64_nosp = SHL64ri %507:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(9):   %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
SU(10):   %509:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(11):   %510:gr64_nosp = COPY %509:gr64_nosp
SU(12):   %510:gr64_nosp = SHL64ri %510:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(13):   %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
SU(14):   %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(15):   %514:gr64 = SHL64ri %514:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(16):   %514:gr64 = ADD64rm %514:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(17):   %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(18):   %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
SU(19):   %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
SU(20):   MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
SU(21):   %530:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(22):   %521:gr64 = COPY %530:gr64
SU(23):   %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(24):   %521:gr64 = SHL64ri %521:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(25):   %521:gr64 = ADD64rm %521:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(26):   %532:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(27):   %525:gr64_nosp = COPY %532:gr64_nosp
SU(28):   %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(29):   %525:gr64_nosp = SHL64ri %525:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(30):   %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
SU(31):   %527:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(34):   %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(35):   %530:gr64 = SHL64ri %530:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(36):   %530:gr64 = ADD64rm %530:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(37):   %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(38):   %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
SU(39):   %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
SU(40):   %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
SU(32):   %528:gr64_nosp = COPY %527:gr64_nosp
SU(33):   %528:gr64_nosp = SHL64ri %528:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(41):   %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
SU(42):   %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
SU(43):   MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
SU(44):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.16 for.cond130
  From: %402:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.18, 13, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %402:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%402
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %402:gr32 = DEC32r %402:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%402
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%402
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %402:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%402
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %402:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %402:gr32 = DEC32r %402:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %402:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %402:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %402:gr32 = DEC32r %402:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %402:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.17 for.body133
  From: %475:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.16
 RegionInstrs: 31
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=10
Live In: %571 %3 %338 %569 
Live Out: %571 %3 %338 %569 
Live Thru: FR32=2
FR32X=2
GR16=4
  LiveReg: %571
  UpdateRegP: SU(27) %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
              to 
  LiveReg: %3
  UpdateRegP: SU(6) %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(20) %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(1) %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(15) %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %569
  UpdateRegP: SU(10) %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
Excess PSets: 
Constraining copy SU(23)
  Local use SU(26) -> SU(23)
  Local use SU(25) -> SU(23)
SU(0):   %475:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
    SU(1): Data Latency=4 Reg=%475
    SU(1): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(0): Data Latency=4 Reg=%475
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%475
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %475:gr64 = SHL64ri %475:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(1): Data Latency=1 Reg=%475
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%475
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %475:gr64 = ADD64rm %475:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 30
  Predecessors:
    SU(2): Data Latency=1 Reg=%475
    SU(2): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%475
    SU(29): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %477:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(5): Data Latency=4 Reg=%477
    SU(29): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %479:gr64_nosp = LEA64r %477:gr64_nosp, 1, %477:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(4): Data Latency=4 Reg=%477
  Successors:
    SU(6): Data Latency=1 Reg=%479
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(5): Data Latency=1 Reg=%479
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%479
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 26
  Predecessors:
    SU(3): Data Latency=4 Reg=%475
    SU(6): Data Latency=1 Reg=%479
  Successors:
    SU(13): Data Latency=1 Reg=%480
    SU(12): Data Latency=1 Reg=%480
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %482:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(11): Data Latency=4 Reg=%482
    SU(9): Data Latency=4 Reg=%482
    SU(11): Out  Latency=0
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %485:fr64 = MOVSDrm_alt %stack.20.z1, 8, %482:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx145)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(8): Data Latency=4 Reg=%482
  Successors:
    SU(10): Data Latency=4 Reg=%485
    SU(10): Out  Latency=0
    SU(11): Anti Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(10):   %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 26
  Predecessors:
    SU(9): Data Latency=4 Reg=%485
    SU(9): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%485
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %482:gr64_nosp = SHL64ri %482:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Data Latency=4 Reg=%482
    SU(8): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%482
    SU(12): Data Latency=1 Reg=%482
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 25
  Predecessors:
    SU(7): Data Latency=1 Reg=%480
    SU(10): Data Latency=1 Reg=%485
    SU(10): Out  Latency=0
    SU(11): Data Latency=1 Reg=%482
  Successors:
    SU(13): Data Latency=4 Reg=%485
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(13):   MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
  # preds left       : 9
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 21
  Predecessors:
    SU(12): Data Latency=4 Reg=%485
    SU(12): Ord  Latency=0 Memory
    SU(11): Data Latency=1 Reg=%482
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=1 Reg=%480
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(14):   %488:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 18
  Predecessors:
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%488
    SU(15): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(14): Data Latency=4 Reg=%488
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%488
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %488:gr64 = SHL64ri %488:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 13
  Predecessors:
    SU(15): Data Latency=1 Reg=%488
    SU(15): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%488
    SU(17): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %488:gr64 = ADD64rm %488:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 12
  Predecessors:
    SU(16): Data Latency=1 Reg=%488
    SU(16): Out  Latency=0
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%488
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %490:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 14
  Predecessors:
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%490
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   %492:gr64_nosp = LEA64r %490:gr64_nosp, 1, %490:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 10
  Predecessors:
    SU(18): Data Latency=4 Reg=%490
  Successors:
    SU(20): Data Latency=1 Reg=%492
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 9
  Predecessors:
    SU(19): Data Latency=1 Reg=%492
    SU(19): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%492
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 8
  Predecessors:
    SU(17): Data Latency=4 Reg=%488
    SU(20): Data Latency=1 Reg=%492
  Successors:
    SU(29): Data Latency=1 Reg=%493
    SU(28): Data Latency=1 Reg=%493
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   %494:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 20
  Predecessors:
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(26): Data Latency=4 Reg=%494
    SU(25): Data Latency=4 Reg=%494
    SU(23): Data Latency=4 Reg=%494
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   %495:gr64_nosp = COPY %494:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 24
  Height             : 8
  Predecessors:
    SU(22): Data Latency=4 Reg=%494
    SU(26): Ord  Latency=0 Weak
    SU(25): Ord  Latency=0 Weak
  Successors:
    SU(24): Data Latency=0 Reg=%495
    SU(24): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   %495:gr64_nosp = SHL64ri %495:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 8
  Predecessors:
    SU(23): Data Latency=0 Reg=%495
    SU(23): Out  Latency=0
  Successors:
    SU(29): Data Latency=1 Reg=%495
    SU(28): Data Latency=1 Reg=%495
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %498:fr64 = MOVSDrm_alt %stack.20.z1, 8, %494:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx170)
  # preds left       : 2
  # succs left       : 3
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 16
  Predecessors:
    SU(22): Data Latency=4 Reg=%494
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(26): Data Latency=4 Reg=%498
    SU(26): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Weak
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(26):   %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
  # preds left       : 4
  # succs left       : 3
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 12
  Predecessors:
    SU(25): Data Latency=4 Reg=%498
    SU(25): Out  Latency=0
    SU(22): Data Latency=4 Reg=%494
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%498
    SU(27): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(27):   %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 8
  Predecessors:
    SU(26): Data Latency=4 Reg=%498
    SU(26): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%498
    SU(28): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 7
  Predecessors:
    SU(27): Data Latency=1 Reg=%498
    SU(27): Out  Latency=0
    SU(24): Data Latency=1 Reg=%495
    SU(21): Data Latency=1 Reg=%493
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%498
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(29):   MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 3
  Predecessors:
    SU(28): Data Latency=4 Reg=%498
    SU(28): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Data Latency=1 Reg=%495
    SU(22): Ord  Latency=0 Memory
    SU(21): Data Latency=1 Reg=%493
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(30): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(30):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 33
  Height             : 3
  Predecessors:
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 36
  Height             : 0
  Predecessors:
    SU(30): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 36
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(30) 33c
  BotQ.A BotLatency SU(30) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 
Scheduling SU(29) MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %495
  UpdateRegP: SU(28) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
              to GR16 2
  UpdateRegP: SU(29) MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %493
  UpdateRegP: SU(28) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
              to 
  UpdateRegP: SU(29) MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
              to FR32 1    FR32X 1
  LiveReg: %498
  UpdateRegP: SU(29) MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %498
  UpdateRegP: SU(28) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(28) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 24 21 
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %498
  UpdateRegP: SU(27) %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(27) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 24 26 
  Cand SU(21) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot WEAK      
Scheduling SU(24) %495:gr64_nosp = SHL64ri %495:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %495
  UpdateRegP: SU(24) %495:gr64_nosp = SHL64ri %495:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 26 23 
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %495:gr64_nosp = COPY %494:gr64_nosp
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %494
  UpdateRegP: SU(23) %495:gr64_nosp = COPY %494:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(25) %498:fr64 = MOVSDrm_alt %stack.20.z1, 8, %494:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx170)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(26) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
              to 
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 26 
  Cand SU(21) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %498
  UpdateRegP: SU(26) %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(26) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 25 
  Cand SU(21) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %498:fr64 = MOVSDrm_alt %stack.20.z1, 8, %494:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx170)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @16c
  BotQ.A BotLatency SU(25) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 22 
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %494:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @20c
  BotQ.A BotLatency SU(22) 20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %488
  UpdateRegP: SU(21) %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
              to 
  LiveReg: %492
  UpdateRegP: SU(21) %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 20 
  Cand SU(17) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %492
  UpdateRegP: SU(20) %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 19 
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %492:gr64_nosp = LEA64r %490:gr64_nosp, 1, %490:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %490
  UpdateRegP: SU(19) %492:gr64_nosp = LEA64r %490:gr64_nosp, 1, %490:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @10c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 18 
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %490:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %488:gr64 = ADD64rm %488:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %488
  UpdateRegP: SU(17) %488:gr64 = ADD64rm %488:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %488:gr64 = SHL64ri %488:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %488
  UpdateRegP: SU(16) %488:gr64 = SHL64ri %488:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %488
  UpdateRegP: SU(15) %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %488:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @18c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %482
  UpdateRegP: SU(12) %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
              to GR16 2
  UpdateRegP: SU(13) MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %480
  UpdateRegP: SU(12) %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
              to 
  UpdateRegP: SU(13) MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
              to FR32 1    FR32X 1
  LiveReg: %485
  UpdateRegP: SU(13) MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
              to 
  Ready @21c
  BotQ.A BotLatency SU(13) 21c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %485
  UpdateRegP: SU(12) %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
              to FR32 -1    FR32X -1
  Ready @25c
  BotQ.A BotLatency SU(12) 25c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 10 11 
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %482:gr64_nosp = SHL64ri %482:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %482
  UpdateRegP: SU(9) %485:fr64 = MOVSDrm_alt %stack.20.z1, 8, %482:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx145)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(11) %482:gr64_nosp = SHL64ri %482:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(11) 26c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 10 
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %485
  UpdateRegP: SU(10) %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
              to FR32 -1    FR32X -1
  Ready @26c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 9 
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %485:fr64 = MOVSDrm_alt %stack.20.z1, 8, %482:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx145)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @30c
  BotQ.A BotLatency SU(9) 30c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %482:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @34c
  BotQ.A BotLatency SU(8) 34c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %475
  UpdateRegP: SU(7) %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
              to 
  LiveReg: %479
  UpdateRegP: SU(7) %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @26c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %479
  UpdateRegP: SU(6) %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %479:gr64_nosp = LEA64r %477:gr64_nosp, 1, %477:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %477
  UpdateRegP: SU(5) %479:gr64_nosp = LEA64r %477:gr64_nosp, 1, %477:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @28c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %477:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @32c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %475:gr64 = ADD64rm %475:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %475
  UpdateRegP: SU(3) %475:gr64 = ADD64rm %475:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @30c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %475:gr64 = SHL64ri %475:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %475
  UpdateRegP: SU(2) %475:gr64 = SHL64ri %475:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %475
  UpdateRegP: SU(1) %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @32c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %475:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @36c
  BotQ.A BotLatency SU(0) 36c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %475:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %475:gr64 = SHL64ri %475:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(3):   %475:gr64 = ADD64rm %475:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(4):   %477:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %479:gr64_nosp = LEA64r %477:gr64_nosp, 1, %477:gr64_nosp, 1, $noreg
SU(6):   %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
SU(8):   %482:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(9):   %485:fr64 = MOVSDrm_alt %stack.20.z1, 8, %482:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx145)
SU(10):   %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
SU(11):   %482:gr64_nosp = SHL64ri %482:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(12):   %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
SU(13):   MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
SU(14):   %488:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(15):   %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(16):   %488:gr64 = SHL64ri %488:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(17):   %488:gr64 = ADD64rm %488:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(18):   %490:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(19):   %492:gr64_nosp = LEA64r %490:gr64_nosp, 1, %490:gr64_nosp, 1, $noreg
SU(20):   %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(21):   %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
SU(22):   %494:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(25):   %498:fr64 = MOVSDrm_alt %stack.20.z1, 8, %494:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx170)
SU(26):   %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
SU(23):   %495:gr64_nosp = COPY %494:gr64_nosp
SU(24):   %495:gr64_nosp = SHL64ri %495:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(27):   %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
SU(28):   %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
SU(29):   MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
SU(30):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.19 for.cond191
  From: %406:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.21, 13, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %406:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%406
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %406:gr32 = DEC32r %406:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%406
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%406
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %406:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%406
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.21, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %406:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %406:gr32 = DEC32r %406:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %406:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %406:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %406:gr32 = DEC32r %406:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %406:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.20 for.body194
  From: %442:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.19
 RegionInstrs: 33
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=10
Live In: %571 %3 %338 %569 
Live Out: %571 %3 %338 %569 
Live Thru: FR32=2
FR32X=2
GR16=4
  LiveReg: %571
  UpdateRegP: SU(29) %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
              to 
  LiveReg: %3
  UpdateRegP: SU(6) %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(21) %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(2) %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(17) %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %569
  UpdateRegP: SU(11) %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
Excess PSets: 
Constraining copy SU(25)
  Local use SU(28) -> SU(25)
  Local use SU(27) -> SU(25)
SU(0):   %442:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(1): Data Latency=4 Reg=%442
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %446:gr64 = LEA64r %442:gr64_nosp, 1, %442:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 33
  Predecessors:
    SU(0): Data Latency=4 Reg=%442
  Successors:
    SU(2): Data Latency=1 Reg=%446
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 32
  Predecessors:
    SU(1): Data Latency=1 Reg=%446
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%446
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %446:gr64 = SHL64ri %446:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 31
  Predecessors:
    SU(2): Data Latency=1 Reg=%446
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%446
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %446:gr64 = ADD64rm %446:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(3): Data Latency=1 Reg=%446
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%446
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %450:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(6): Data Latency=4 Reg=%450
    SU(6): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(5): Data Latency=4 Reg=%450
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%450
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %450:gr64_nosp = SHL64ri %450:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(6): Data Latency=1 Reg=%450
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%450
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=%446
    SU(7): Out  Latency=0
    SU(7): Data Latency=1 Reg=%450
  Successors:
    SU(14): Data Latency=1 Reg=%450
    SU(13): Data Latency=1 Reg=%450
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %453:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(12): Data Latency=4 Reg=%453
    SU(10): Data Latency=4 Reg=%453
    SU(12): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %456:fr64 = MOVSDrm_alt %stack.21.z2, 8, %453:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx206)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(9): Data Latency=4 Reg=%453
  Successors:
    SU(11): Data Latency=4 Reg=%456
    SU(11): Out  Latency=0
    SU(12): Anti Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(11):   %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 26
  Predecessors:
    SU(10): Data Latency=4 Reg=%456
    SU(10): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%456
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %453:gr64_nosp = SHL64ri %453:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(10): Anti Latency=0
    SU(9): Data Latency=4 Reg=%453
    SU(9): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%453
    SU(13): Data Latency=1 Reg=%453
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 25
  Predecessors:
    SU(8): Data Latency=1 Reg=%450
    SU(11): Data Latency=1 Reg=%456
    SU(11): Out  Latency=0
    SU(12): Data Latency=1 Reg=%453
  Successors:
    SU(14): Data Latency=4 Reg=%456
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(14):   MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
  # preds left       : 9
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 21
  Predecessors:
    SU(13): Data Latency=4 Reg=%456
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%453
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%450
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(15):   %457:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 19
  Predecessors:
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%457
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %460:gr64 = LEA64r %457:gr64_nosp, 1, %457:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 15
  Predecessors:
    SU(15): Data Latency=4 Reg=%457
  Successors:
    SU(17): Data Latency=1 Reg=%460
    SU(17): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 14
  Predecessors:
    SU(16): Data Latency=1 Reg=%460
    SU(16): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%460
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %460:gr64 = SHL64ri %460:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 13
  Predecessors:
    SU(17): Data Latency=1 Reg=%460
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%460
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %460:gr64 = ADD64rm %460:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 12
  Predecessors:
    SU(18): Data Latency=1 Reg=%460
    SU(18): Out  Latency=0
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(23): Data Latency=4 Reg=%460
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %464:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 14
  Predecessors:
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%464
    SU(21): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 10
  Predecessors:
    SU(20): Data Latency=4 Reg=%464
    SU(20): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%464
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %464:gr64_nosp = SHL64ri %464:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 9
  Predecessors:
    SU(21): Data Latency=1 Reg=%464
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%464
    SU(23): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 8
  Predecessors:
    SU(19): Data Latency=4 Reg=%460
    SU(22): Out  Latency=0
    SU(22): Data Latency=1 Reg=%464
  Successors:
    SU(31): Data Latency=1 Reg=%464
    SU(30): Data Latency=1 Reg=%464
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %466:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 20
  Predecessors:
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(28): Data Latency=4 Reg=%466
    SU(27): Data Latency=4 Reg=%466
    SU(25): Data Latency=4 Reg=%466
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(25):   %467:gr64_nosp = COPY %466:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 25
  Height             : 8
  Predecessors:
    SU(24): Data Latency=4 Reg=%466
    SU(28): Ord  Latency=0 Weak
    SU(27): Ord  Latency=0 Weak
  Successors:
    SU(26): Data Latency=0 Reg=%467
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %467:gr64_nosp = SHL64ri %467:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 8
  Predecessors:
    SU(25): Data Latency=0 Reg=%467
    SU(25): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%467
    SU(30): Data Latency=1 Reg=%467
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %470:fr64 = MOVSDrm_alt %stack.21.z2, 8, %466:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx231)
  # preds left       : 2
  # succs left       : 3
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 16
  Predecessors:
    SU(24): Data Latency=4 Reg=%466
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(28): Data Latency=4 Reg=%470
    SU(28): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Weak
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(28):   %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
  # preds left       : 4
  # succs left       : 3
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 12
  Predecessors:
    SU(27): Data Latency=4 Reg=%470
    SU(27): Out  Latency=0
    SU(24): Data Latency=4 Reg=%466
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%470
    SU(29): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(29):   %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 8
  Predecessors:
    SU(28): Data Latency=4 Reg=%470
    SU(28): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%470
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 7
  Predecessors:
    SU(29): Data Latency=1 Reg=%470
    SU(29): Out  Latency=0
    SU(26): Data Latency=1 Reg=%467
    SU(23): Data Latency=1 Reg=%464
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(31): Data Latency=4 Reg=%470
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 3
  Predecessors:
    SU(30): Data Latency=4 Reg=%470
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Data Latency=1 Reg=%467
    SU(24): Ord  Latency=0 Memory
    SU(23): Data Latency=1 Reg=%464
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(32):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 3
  Predecessors:
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 37
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 37
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(32) 34c
  BotQ.A BotLatency SU(32) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %467
  UpdateRegP: SU(30) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
              to GR16 2
  UpdateRegP: SU(31) MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %464
  UpdateRegP: SU(30) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
              to 
  UpdateRegP: SU(31) MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
              to FR32 1    FR32X 1
  LiveReg: %470
  UpdateRegP: SU(31) MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %470
  UpdateRegP: SU(30) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(30) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 26 23 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %470
  UpdateRegP: SU(29) %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(29) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 26 28 
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot WEAK      
Scheduling SU(26) %467:gr64_nosp = SHL64ri %467:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %467
  UpdateRegP: SU(26) %467:gr64_nosp = SHL64ri %467:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 28 25 
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %467:gr64_nosp = COPY %466:gr64_nosp
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %466
  UpdateRegP: SU(25) %467:gr64_nosp = COPY %466:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(27) %470:fr64 = MOVSDrm_alt %stack.21.z2, 8, %466:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx231)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(28) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
              to 
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 28 
  Cand SU(23) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %470
  UpdateRegP: SU(28) %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(28) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 27 
  Cand SU(23) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %470:fr64 = MOVSDrm_alt %stack.21.z2, 8, %466:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx231)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @16c
  BotQ.A BotLatency SU(27) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 24 
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %466:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @20c
  BotQ.A BotLatency SU(24) 20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %464
  UpdateRegP: SU(23) %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
              to 
  LiveReg: %460
  UpdateRegP: SU(23) %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 22 
  Cand SU(19) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %464:gr64_nosp = SHL64ri %464:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %464
  UpdateRegP: SU(22) %464:gr64_nosp = SHL64ri %464:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
  Cand SU(19) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %464
  UpdateRegP: SU(21) %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 20 
  Cand SU(19) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %464:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) %460:gr64 = ADD64rm %460:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %460
  UpdateRegP: SU(19) %460:gr64 = ADD64rm %460:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %460:gr64 = SHL64ri %460:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %460
  UpdateRegP: SU(18) %460:gr64 = SHL64ri %460:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %460
  UpdateRegP: SU(17) %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %460:gr64 = LEA64r %457:gr64_nosp, 1, %457:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %457
  UpdateRegP: SU(16) %460:gr64 = LEA64r %457:gr64_nosp, 1, %457:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @15c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %457:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @19c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %453
  UpdateRegP: SU(13) %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
              to GR16 2
  UpdateRegP: SU(14) MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %450
  UpdateRegP: SU(13) %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
              to 
  UpdateRegP: SU(14) MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
              to FR32 1    FR32X 1
  LiveReg: %456
  UpdateRegP: SU(14) MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
              to 
  Ready @21c
  BotQ.A BotLatency SU(14) 21c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %456
  UpdateRegP: SU(13) %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
              to FR32 -1    FR32X -1
  Ready @25c
  BotQ.A BotLatency SU(13) 25c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 12 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %453:gr64_nosp = SHL64ri %453:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %453
  UpdateRegP: SU(10) %456:fr64 = MOVSDrm_alt %stack.21.z2, 8, %453:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx206)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(12) %453:gr64_nosp = SHL64ri %453:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(12) 26c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %456
  UpdateRegP: SU(11) %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
              to FR32 -1    FR32X -1
  Ready @26c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %456:fr64 = MOVSDrm_alt %stack.21.z2, 8, %453:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx206)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @30c
  BotQ.A BotLatency SU(10) 30c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %453:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @34c
  BotQ.A BotLatency SU(9) 34c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %450
  UpdateRegP: SU(8) %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
              to 
  LiveReg: %446
  UpdateRegP: SU(8) %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %450:gr64_nosp = SHL64ri %450:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %450
  UpdateRegP: SU(7) %450:gr64_nosp = SHL64ri %450:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %450
  UpdateRegP: SU(6) %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %450:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %446:gr64 = ADD64rm %446:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %446
  UpdateRegP: SU(4) %446:gr64 = ADD64rm %446:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @30c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %446:gr64 = SHL64ri %446:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %446
  UpdateRegP: SU(3) %446:gr64 = SHL64ri %446:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %446
  UpdateRegP: SU(2) %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @32c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %446:gr64 = LEA64r %442:gr64_nosp, 1, %442:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %442
  UpdateRegP: SU(1) %446:gr64 = LEA64r %442:gr64_nosp, 1, %442:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @33c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %442:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @37c
  BotQ.A BotLatency SU(0) 37c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %442:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %446:gr64 = LEA64r %442:gr64_nosp, 1, %442:gr64_nosp, 1, $noreg
SU(2):   %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %446:gr64 = SHL64ri %446:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %446:gr64 = ADD64rm %446:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(5):   %450:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(7):   %450:gr64_nosp = SHL64ri %450:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(8):   %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
SU(9):   %453:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %456:fr64 = MOVSDrm_alt %stack.21.z2, 8, %453:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx206)
SU(11):   %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
SU(12):   %453:gr64_nosp = SHL64ri %453:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(13):   %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
SU(14):   MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
SU(15):   %457:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(16):   %460:gr64 = LEA64r %457:gr64_nosp, 1, %457:gr64_nosp, 1, $noreg
SU(17):   %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(18):   %460:gr64 = SHL64ri %460:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(19):   %460:gr64 = ADD64rm %460:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(20):   %464:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(21):   %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(22):   %464:gr64_nosp = SHL64ri %464:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(23):   %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
SU(24):   %466:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(27):   %470:fr64 = MOVSDrm_alt %stack.21.z2, 8, %466:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx231)
SU(28):   %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
SU(25):   %467:gr64_nosp = COPY %466:gr64_nosp
SU(26):   %467:gr64_nosp = SHL64ri %467:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(29):   %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
SU(30):   %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
SU(31):   MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
SU(32):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.22 for.cond252
  From: %410:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.24, 13, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %410:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%410
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %410:gr32 = DEC32r %410:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%410
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%410
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %410:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%410
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.24, 13, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %410:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %410:gr32 = DEC32r %410:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %410:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %410:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %410:gr32 = DEC32r %410:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %410:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.23 for.body255
  From: %412:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.22
 RegionInstrs: 33
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=10
Live In: %575 %3 %338 %571 
Live Out: %575 %3 %338 %571 
Live Thru: FR32=2
FR32X=2
GR16=4
  LiveReg: %575
  UpdateRegP: SU(29) %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
              to 
  LiveReg: %3
  UpdateRegP: SU(7) %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(22) %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(2) %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(17) %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %571
  UpdateRegP: SU(11) %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
Excess PSets: 
Constraining copy SU(25)
  Local use SU(28) -> SU(25)
  Local use SU(27) -> SU(25)
SU(0):   %412:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(1): Data Latency=4 Reg=%412
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %416:gr64 = LEA64r %412:gr64_nosp, 1, %412:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 33
  Predecessors:
    SU(0): Data Latency=4 Reg=%412
  Successors:
    SU(2): Data Latency=1 Reg=%416
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 32
  Predecessors:
    SU(1): Data Latency=1 Reg=%416
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%416
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %416:gr64 = SHL64ri %416:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 31
  Predecessors:
    SU(2): Data Latency=1 Reg=%416
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%416
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %416:gr64 = ADD64rm %416:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(3): Data Latency=1 Reg=%416
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%416
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %418:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(6): Data Latency=4 Reg=%418
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %420:gr64_nosp = LEA64r %418:gr64_nosp, 1, %418:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(5): Data Latency=4 Reg=%418
  Successors:
    SU(7): Data Latency=1 Reg=%420
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(6): Data Latency=1 Reg=%420
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%420
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=%416
    SU(7): Data Latency=1 Reg=%420
  Successors:
    SU(14): Data Latency=1 Reg=%421
    SU(13): Data Latency=1 Reg=%421
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %423:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(12): Data Latency=4 Reg=%423
    SU(10): Data Latency=4 Reg=%423
    SU(12): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %426:fr64 = MOVSDrm_alt %stack.22.z3, 8, %423:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx268)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(9): Data Latency=4 Reg=%423
  Successors:
    SU(11): Data Latency=4 Reg=%426
    SU(11): Out  Latency=0
    SU(12): Anti Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(11):   %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 26
  Predecessors:
    SU(10): Data Latency=4 Reg=%426
    SU(10): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%426
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %423:gr64_nosp = SHL64ri %423:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(10): Anti Latency=0
    SU(9): Data Latency=4 Reg=%423
    SU(9): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%423
    SU(13): Data Latency=1 Reg=%423
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 25
  Predecessors:
    SU(8): Data Latency=1 Reg=%421
    SU(11): Data Latency=1 Reg=%426
    SU(11): Out  Latency=0
    SU(12): Data Latency=1 Reg=%423
  Successors:
    SU(14): Data Latency=4 Reg=%426
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(14):   MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
  # preds left       : 9
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 21
  Predecessors:
    SU(13): Data Latency=4 Reg=%426
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%423
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%421
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(24): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(15):   %427:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 19
  Predecessors:
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%427
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %430:gr64 = LEA64r %427:gr64_nosp, 1, %427:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 15
  Predecessors:
    SU(15): Data Latency=4 Reg=%427
  Successors:
    SU(17): Data Latency=1 Reg=%430
    SU(17): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 14
  Predecessors:
    SU(16): Data Latency=1 Reg=%430
    SU(16): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%430
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %430:gr64 = SHL64ri %430:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 13
  Predecessors:
    SU(17): Data Latency=1 Reg=%430
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%430
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %430:gr64 = ADD64rm %430:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 12
  Predecessors:
    SU(18): Data Latency=1 Reg=%430
    SU(18): Out  Latency=0
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(23): Data Latency=4 Reg=%430
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %432:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 14
  Predecessors:
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%432
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   %434:gr64_nosp = LEA64r %432:gr64_nosp, 1, %432:gr64_nosp, 1, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 10
  Predecessors:
    SU(20): Data Latency=4 Reg=%432
  Successors:
    SU(22): Data Latency=1 Reg=%434
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 9
  Predecessors:
    SU(21): Data Latency=1 Reg=%434
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%434
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 8
  Predecessors:
    SU(19): Data Latency=4 Reg=%430
    SU(22): Data Latency=1 Reg=%434
  Successors:
    SU(31): Data Latency=1 Reg=%435
    SU(30): Data Latency=1 Reg=%435
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %436:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 20
  Predecessors:
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(28): Data Latency=4 Reg=%436
    SU(27): Data Latency=4 Reg=%436
    SU(25): Data Latency=4 Reg=%436
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(25):   %437:gr64_nosp = COPY %436:gr64_nosp
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 25
  Height             : 8
  Predecessors:
    SU(24): Data Latency=4 Reg=%436
    SU(28): Ord  Latency=0 Weak
    SU(27): Ord  Latency=0 Weak
  Successors:
    SU(26): Data Latency=0 Reg=%437
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %437:gr64_nosp = SHL64ri %437:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 8
  Predecessors:
    SU(25): Data Latency=0 Reg=%437
    SU(25): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%437
    SU(30): Data Latency=1 Reg=%437
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %440:fr64 = MOVSDrm_alt %stack.22.z3, 8, %436:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx295)
  # preds left       : 2
  # succs left       : 3
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 16
  Predecessors:
    SU(24): Data Latency=4 Reg=%436
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(28): Data Latency=4 Reg=%440
    SU(28): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Weak
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(28):   %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
  # preds left       : 4
  # succs left       : 3
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 12
  Predecessors:
    SU(27): Data Latency=4 Reg=%440
    SU(27): Out  Latency=0
    SU(24): Data Latency=4 Reg=%436
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%440
    SU(29): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Weak
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(29):   %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 8
  Predecessors:
    SU(28): Data Latency=4 Reg=%440
    SU(28): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%440
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 7
  Predecessors:
    SU(29): Data Latency=1 Reg=%440
    SU(29): Out  Latency=0
    SU(26): Data Latency=1 Reg=%437
    SU(23): Data Latency=1 Reg=%435
    SU(14): Ord  Latency=1 Memory
  Successors:
    SU(31): Data Latency=4 Reg=%440
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 3
  Predecessors:
    SU(30): Data Latency=4 Reg=%440
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Data Latency=1 Reg=%437
    SU(24): Ord  Latency=0 Memory
    SU(23): Data Latency=1 Reg=%435
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(32):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 3
  Predecessors:
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 37
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 37
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(32) 34c
  BotQ.A BotLatency SU(32) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %437
  UpdateRegP: SU(30) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
              to GR16 2
  UpdateRegP: SU(31) MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %435
  UpdateRegP: SU(30) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
              to 
  UpdateRegP: SU(31) MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
              to FR32 1    FR32X 1
  LiveReg: %440
  UpdateRegP: SU(31) MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %440
  UpdateRegP: SU(30) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(30) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 26 23 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %440
  UpdateRegP: SU(29) %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(29) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 26 28 
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot WEAK      
Scheduling SU(26) %437:gr64_nosp = SHL64ri %437:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %437
  UpdateRegP: SU(26) %437:gr64_nosp = SHL64ri %437:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 28 25 
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %437:gr64_nosp = COPY %436:gr64_nosp
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %436
  UpdateRegP: SU(25) %437:gr64_nosp = COPY %436:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(27) %440:fr64 = MOVSDrm_alt %stack.22.z3, 8, %436:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx295)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(28) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
              to 
  Ready @8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 28 
  Cand SU(23) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %440
  UpdateRegP: SU(28) %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(28) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 27 
  Cand SU(23) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %440:fr64 = MOVSDrm_alt %stack.22.z3, 8, %436:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx295)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @16c
  BotQ.A BotLatency SU(27) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 24 
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %436:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @20c
  BotQ.A BotLatency SU(24) 20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %430
  UpdateRegP: SU(23) %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
              to 
  LiveReg: %434
  UpdateRegP: SU(23) %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 22 
  Cand SU(19) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %434
  UpdateRegP: SU(22) %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
  Cand SU(19) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %434:gr64_nosp = LEA64r %432:gr64_nosp, 1, %432:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %432
  UpdateRegP: SU(21) %434:gr64_nosp = LEA64r %432:gr64_nosp, 1, %432:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @10c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 20 
  Cand SU(19) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %432:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) %430:gr64 = ADD64rm %430:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %430
  UpdateRegP: SU(19) %430:gr64 = ADD64rm %430:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %430:gr64 = SHL64ri %430:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %430
  UpdateRegP: SU(18) %430:gr64 = SHL64ri %430:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %430
  UpdateRegP: SU(17) %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %430:gr64 = LEA64r %427:gr64_nosp, 1, %427:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %427
  UpdateRegP: SU(16) %430:gr64 = LEA64r %427:gr64_nosp, 1, %427:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @15c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %427:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @19c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %423
  UpdateRegP: SU(13) %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
              to GR16 2
  UpdateRegP: SU(14) MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %421
  UpdateRegP: SU(13) %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
              to 
  UpdateRegP: SU(14) MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
              to FR32 1    FR32X 1
  LiveReg: %426
  UpdateRegP: SU(14) MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
              to 
  Ready @21c
  BotQ.A BotLatency SU(14) 21c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %426
  UpdateRegP: SU(13) %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
              to FR32 -1    FR32X -1
  Ready @25c
  BotQ.A BotLatency SU(13) 25c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 12 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %423:gr64_nosp = SHL64ri %423:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %423
  UpdateRegP: SU(10) %426:fr64 = MOVSDrm_alt %stack.22.z3, 8, %423:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx268)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(12) %423:gr64_nosp = SHL64ri %423:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(12) 26c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %426
  UpdateRegP: SU(11) %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
              to FR32 -1    FR32X -1
  Ready @26c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %426:fr64 = MOVSDrm_alt %stack.22.z3, 8, %423:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx268)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @30c
  BotQ.A BotLatency SU(10) 30c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %423:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @34c
  BotQ.A BotLatency SU(9) 34c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %416
  UpdateRegP: SU(8) %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
              to 
  LiveReg: %420
  UpdateRegP: SU(8) %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @26c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %420
  UpdateRegP: SU(7) %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %420:gr64_nosp = LEA64r %418:gr64_nosp, 1, %418:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %418
  UpdateRegP: SU(6) %420:gr64_nosp = LEA64r %418:gr64_nosp, 1, %418:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @28c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %418:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %416:gr64 = ADD64rm %416:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %416
  UpdateRegP: SU(4) %416:gr64 = ADD64rm %416:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @30c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %416:gr64 = SHL64ri %416:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %416
  UpdateRegP: SU(3) %416:gr64 = SHL64ri %416:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %416
  UpdateRegP: SU(2) %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @32c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %416:gr64 = LEA64r %412:gr64_nosp, 1, %412:gr64_nosp, 1, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %412
  UpdateRegP: SU(1) %416:gr64 = LEA64r %412:gr64_nosp, 1, %412:gr64_nosp, 1, $noreg
              to GR16 -2
  Ready @33c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %412:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @37c
  BotQ.A BotLatency SU(0) 37c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %412:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %416:gr64 = LEA64r %412:gr64_nosp, 1, %412:gr64_nosp, 1, $noreg
SU(2):   %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %416:gr64 = SHL64ri %416:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(4):   %416:gr64 = ADD64rm %416:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(5):   %418:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %420:gr64_nosp = LEA64r %418:gr64_nosp, 1, %418:gr64_nosp, 1, $noreg
SU(7):   %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(8):   %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
SU(9):   %423:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(10):   %426:fr64 = MOVSDrm_alt %stack.22.z3, 8, %423:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx268)
SU(11):   %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
SU(12):   %423:gr64_nosp = SHL64ri %423:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(13):   %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
SU(14):   MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
SU(15):   %427:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(16):   %430:gr64 = LEA64r %427:gr64_nosp, 1, %427:gr64_nosp, 1, $noreg
SU(17):   %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(18):   %430:gr64 = SHL64ri %430:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(19):   %430:gr64 = ADD64rm %430:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(20):   %432:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(21):   %434:gr64_nosp = LEA64r %432:gr64_nosp, 1, %432:gr64_nosp, 1, $noreg
SU(22):   %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
SU(24):   %436:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(27):   %440:fr64 = MOVSDrm_alt %stack.22.z3, 8, %436:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx295)
SU(28):   %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
SU(25):   %437:gr64_nosp = COPY %436:gr64_nosp
SU(26):   %437:gr64_nosp = SHL64ri %437:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
SU(29):   %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
SU(30):   %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
SU(31):   MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
SU(32):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.27 if.then324
  From: MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
    To: JMP_1 %bb.29
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   JMP_1 %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t1)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
SU(1):   MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t1)

********** MI Scheduling **********
interp:%bb.28 if.else325
  From: MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t1)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)
SU(1):   MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t1)

********** MI Scheduling **********
interp:%bb.30 if.then328
  From: MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
    To: JMP_1 %bb.32
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   JMP_1 %bb.32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t2)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
SU(1):   MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t2)

********** MI Scheduling **********
interp:%bb.31 if.else329
  From: MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t2)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)
SU(1):   MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t2)

********** MI Scheduling **********
interp:%bb.33 if.then332
  From: MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
    To: JMP_1 %bb.35
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   JMP_1 %bb.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t3)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
SU(1):   MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t3)

********** MI Scheduling **********
interp:%bb.34 if.else333
  From: MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t3)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)
SU(1):   MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t3)

********** MI Scheduling **********
interp:%bb.35 if.end334
  From: %27:gr32 = MOV32rm %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %27:gr32 = MOV32rm %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(1):   MOV32mr %stack.11.i3, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.i3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(2):   %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %562:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   %564:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %564:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %562:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.11.i3, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.i3)
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %27:gr32 = MOV32rm %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  Ready @5c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %27:gr32 = MOV32rm %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
SU(1):   MOV32mr %stack.11.i3, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.i3)
SU(2):   %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(3):   %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(4):   %562:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(5):   %564:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
interp:%bb.36 for.cond335
  From: %30:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
    To: JCC_1 %bb.56, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %30:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%30
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %30:gr32 = DEC32r %30:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%30
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%30
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %30:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%30
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.56, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %30:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %30:gr32 = DEC32r %30:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %30:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %30:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
SU(1):   %30:gr32 = DEC32r %30:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %30:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
interp:%bb.37 for.body338
  From: %211:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %211:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%211
  Single Issue       : false;
SU(1):   MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %211:gr32 :: (store 4 into %ir.i2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%211
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %211:gr32 :: (store 4 into %ir.i2)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %211:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %211:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
SU(1):   MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %211:gr32 :: (store 4 into %ir.i2)

********** MI Scheduling **********
interp:%bb.38 for.cond339
  From: %214:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
    To: JCC_1 %bb.46, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %214:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%214
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %214:gr32 = DEC32r %214:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%214
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%214
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %214:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%214
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.46, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %214:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %214:gr32 = DEC32r %214:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %214:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %214:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(1):   %214:gr32 = DEC32r %214:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %214:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
interp:%bb.39 for.body342
  From: %295:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %295:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%295
  Single Issue       : false;
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %295:gr32 :: (store 4 into %ir.i1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%295
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %295:gr32 :: (store 4 into %ir.i1)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %295:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %295:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %295:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
interp:%bb.40 for.cond343
  From: %298:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.42, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %298:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%298
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %298:gr32 = DEC32r %298:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%298
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%298
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %298:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%298
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.42, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %298:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %298:gr32 = DEC32r %298:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %298:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %298:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %298:gr32 = DEC32r %298:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %298:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.41 for.body346
  From: %355:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.40
 RegionInstrs: 28
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=20
Live In: %1 %354 %3 %338 
Live Out: %1 %354 %3 %338 
Live Thru: GR16=8
  LiveReg: %1
  UpdateRegP: SU(23) %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %354
  UpdateRegP: SU(19) %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=8
Bottom Pressure:
GR16=8
Excess PSets: 
SU(0):   %355:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(18): Data Latency=4 Reg=%355
    SU(3): Data Latency=4 Reg=%355
    SU(18): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %336:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(2): Data Latency=4 Reg=%336
    SU(2): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %336:gr64 = NOT64r %336:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 20
  Predecessors:
    SU(1): Data Latency=4 Reg=%336
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%336
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 19
  Predecessors:
    SU(2): Data Latency=1 Reg=%336
    SU(0): Data Latency=4 Reg=%355
  Successors:
    SU(4): Data Latency=1 Reg=%340
    SU(4): Out  Latency=0
    SU(18): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 18
  Predecessors:
    SU(3): Data Latency=1 Reg=%340
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%340
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %340:gr64 = SHL64ri %340:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 17
  Predecessors:
    SU(4): Data Latency=1 Reg=%340
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%340
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %340:gr64 = ADD64rm %340:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=%340
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%340
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %359:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(22): Data Latency=4 Reg=%359
    SU(10): Data Latency=4 Reg=%359
    SU(22): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %344:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(9): Data Latency=4 Reg=%344
    SU(9): Out  Latency=0
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %344:gr64 = NOT64r %344:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(8): Data Latency=4 Reg=%344
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%344
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(9): Data Latency=1 Reg=%344
    SU(7): Data Latency=4 Reg=%359
  Successors:
    SU(11): Data Latency=1 Reg=%346
    SU(11): Out  Latency=0
    SU(22): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(10): Data Latency=1 Reg=%346
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%346
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(6): Data Latency=4 Reg=%340
    SU(11): Data Latency=1 Reg=%346
  Successors:
    SU(26): Data Latency=1 Reg=%347
    SU(17): Data Latency=1 Reg=%347
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %348:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(25): Data Latency=4 Reg=%348
    SU(14): Data Latency=4 Reg=%348
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %351:gr64_nosp = LEA64r %348:gr64_nosp, 1, %348:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(13): Data Latency=4 Reg=%348
  Successors:
    SU(16): Data Latency=1 Reg=%351
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %350:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(16): Data Latency=4 Reg=%350
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(14): Data Latency=1 Reg=%351
    SU(15): Data Latency=4 Reg=%350
    SU(14): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%351
    SU(17): Data Latency=1 Reg=%351
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 11
  Predecessors:
    SU(12): Data Latency=1 Reg=%347
    SU(16): Data Latency=1 Reg=%351
  Successors:
    SU(25): Data Latency=4 Reg=%361
    SU(25): Out  Latency=0
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(18):   %355:gr64_nosp = DEC64r %355:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%355
    SU(0): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%355
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(18): Data Latency=1 Reg=%355
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%355
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %355:gr64_nosp = SHL64ri %355:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(19): Data Latency=1 Reg=%355
    SU(19): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%355
    SU(21): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %355:gr64_nosp = ADD64rm %355:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(20): Data Latency=1 Reg=%355
    SU(20): Out  Latency=0
  Successors:
    SU(24): Data Latency=4 Reg=%355
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %359:gr64_nosp = DEC64r %359:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%359
    SU(7): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%359
    SU(23): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(22): Data Latency=1 Reg=%359
    SU(22): Out  Latency=0
  Successors:
    SU(24): Data Latency=1 Reg=%359
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(21): Data Latency=4 Reg=%355
    SU(23): Data Latency=1 Reg=%359
  Successors:
    SU(25): Data Latency=1 Reg=%360
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(25):   %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 7
  Predecessors:
    SU(17): Data Latency=4 Reg=%361
    SU(24): Data Latency=1 Reg=%360
    SU(17): Out  Latency=0
    SU(13): Data Latency=4 Reg=%348
  Successors:
    SU(26): Data Latency=4 Reg=%361
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
  # preds left       : 13
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 3
  Predecessors:
    SU(25): Data Latency=4 Reg=%361
    SU(25): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%351
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%347
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(27):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 3
  Predecessors:
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 24
  Height             : 0
  Predecessors:
    SU(27): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 24
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 
Scheduling SU(27) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(27) 21c
  BotQ.A BotLatency SU(27) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 
Scheduling SU(26) MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %347
  UpdateRegP: SU(17) %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(26) MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %351
  UpdateRegP: SU(17) %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(26) MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
              to FR32 1    FR32X 1
  LiveReg: %361
  UpdateRegP: SU(26) MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %361
  UpdateRegP: SU(25) %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %360
  UpdateRegP: SU(25) %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %348
  UpdateRegP: SU(14) %351:gr64_nosp = LEA64r %348:gr64_nosp, 1, %348:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(25) %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(25) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 17 
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %355
  UpdateRegP: SU(24) %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
              to 
  LiveReg: %359
  UpdateRegP: SU(24) %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(24) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 21 23 
  Cand SU(17) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %359
  UpdateRegP: SU(23) %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(23) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 21 22 
  Cand SU(17) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %359:gr64_nosp = DEC64r %359:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %359
  UpdateRegP: SU(10) %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(22) %359:gr64_nosp = DEC64r %359:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(22) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 21 
  Cand SU(17) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %355:gr64_nosp = ADD64rm %355:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %355
  UpdateRegP: SU(21) %355:gr64_nosp = ADD64rm %355:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(21) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 20 
  Cand SU(17) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %355:gr64_nosp = SHL64ri %355:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %355
  UpdateRegP: SU(20) %355:gr64_nosp = SHL64ri %355:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(20) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 19 
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %355
  UpdateRegP: SU(19) %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(19) 14c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 18 
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %355:gr64_nosp = DEC64r %355:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %355
  UpdateRegP: SU(3) %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %355:gr64_nosp = DEC64r %355:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(18) 15c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
Bottom Pressure:
GR16=18
  Ready @11c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
Bottom Pressure:
GR16=20
  LiveReg: %351
  UpdateRegP: SU(16) %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
              to 
  LiveReg: %350
  UpdateRegP: SU(16) %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(15) %350:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
GR16=18
  Ready @16c
  BotQ.A BotLatency SU(15) 16c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %351:gr64_nosp = LEA64r %348:gr64_nosp, 1, %348:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=16
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %348:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=14
  Ready @17c
  BotQ.A BotLatency SU(13) 17c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=16
  LiveReg: %340
  UpdateRegP: SU(12) %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
              to 
  LiveReg: %346
  UpdateRegP: SU(12) %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=16
  LiveReg: %346
  UpdateRegP: SU(11) %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=16
  LiveReg: %344
  UpdateRegP: SU(10) %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @14c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %344:gr64 = NOT64r %344:gr64(tied-def 0)
Bottom Pressure:
GR16=16
  LiveReg: %344
  UpdateRegP: SU(9) %344:gr64 = NOT64r %344:gr64(tied-def 0)
              to GR16 -2
  Ready @15c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %344:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
Bottom Pressure:
GR16=14
  Ready @19c
  BotQ.A BotLatency SU(8) 19c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %359:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=12
  Ready @18c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %340:gr64 = ADD64rm %340:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=12
  LiveReg: %340
  UpdateRegP: SU(6) %340:gr64 = ADD64rm %340:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @16c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %340:gr64 = SHL64ri %340:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %340
  UpdateRegP: SU(5) %340:gr64 = SHL64ri %340:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @17c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=12
  LiveReg: %340
  UpdateRegP: SU(4) %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @18c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=12
  LiveReg: %336
  UpdateRegP: SU(3) %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @19c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %336:gr64 = NOT64r %336:gr64(tied-def 0)
Bottom Pressure:
GR16=12
  LiveReg: %336
  UpdateRegP: SU(2) %336:gr64 = NOT64r %336:gr64(tied-def 0)
              to GR16 -2
  Ready @20c
  BotQ.A BotLatency SU(2) 20c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %336:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
Bottom Pressure:
GR16=10
  Ready @24c
  BotQ.A BotLatency SU(1) 24c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %355:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=8
  Ready @23c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %355:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %336:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
SU(2):   %336:gr64 = NOT64r %336:gr64(tied-def 0)
SU(3):   %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
SU(4):   %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %340:gr64 = SHL64ri %340:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %340:gr64 = ADD64rm %340:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %359:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %344:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
SU(9):   %344:gr64 = NOT64r %344:gr64(tied-def 0)
SU(10):   %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
SU(11):   %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
SU(13):   %348:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %351:gr64_nosp = LEA64r %348:gr64_nosp, 1, %348:gr64_nosp, 0, $noreg
SU(15):   %350:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(16):   %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
SU(17):   %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
SU(18):   %355:gr64_nosp = DEC64r %355:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(19):   %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(20):   %355:gr64_nosp = SHL64ri %355:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
SU(21):   %355:gr64_nosp = ADD64rm %355:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(22):   %359:gr64_nosp = DEC64r %359:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(23):   %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(24):   %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
SU(25):   %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
SU(26):   MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
SU(27):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.43 for.cond390
  From: %302:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.45, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %302:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%302
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %302:gr32 = DEC32r %302:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%302
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%302
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %302:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%302
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.45, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %302:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %302:gr32 = DEC32r %302:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %302:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %302:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %302:gr32 = DEC32r %302:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %302:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.44 for.body393
  From: %324:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.43
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=20
Live In: %562 %1 %354 %3 %338 
Live Out: %562 %1 %354 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %562
  UpdateRegP: SU(26) %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %354
  UpdateRegP: SU(18) %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %324:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(17): Data Latency=4 Reg=%324
    SU(3): Data Latency=4 Reg=%324
    SU(17): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %306:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(2): Data Latency=4 Reg=%306
    SU(2): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %306:gr64 = NOT64r %306:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(1): Data Latency=4 Reg=%306
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%306
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(2): Data Latency=1 Reg=%306
    SU(0): Data Latency=4 Reg=%324
  Successors:
    SU(4): Data Latency=1 Reg=%310
    SU(4): Out  Latency=0
    SU(17): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%310
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%310
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %310:gr64 = SHL64ri %310:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%310
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%310
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %310:gr64 = ADD64rm %310:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%310
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%310
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %328:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(21): Data Latency=4 Reg=%328
    SU(10): Data Latency=4 Reg=%328
    SU(21): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %314:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(9): Data Latency=4 Reg=%314
    SU(9): Out  Latency=0
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %314:gr64 = NOT64r %314:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 20
  Predecessors:
    SU(8): Data Latency=4 Reg=%314
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%314
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 19
  Predecessors:
    SU(9): Data Latency=1 Reg=%314
    SU(7): Data Latency=4 Reg=%328
  Successors:
    SU(11): Data Latency=1 Reg=%316
    SU(11): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%316
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%316
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%310
    SU(11): Data Latency=1 Reg=%316
  Successors:
    SU(28): Data Latency=1 Reg=%317
    SU(27): Data Latency=1 Reg=%317
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %318:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(25): Data Latency=4 Reg=%318
    SU(24): Data Latency=4 Reg=%318
    SU(14): Data Latency=4 Reg=%318
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %321:gr64_nosp = LEA64r %318:gr64_nosp, 1, %318:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%318
  Successors:
    SU(16): Data Latency=1 Reg=%321
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %320:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%320
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%321
    SU(15): Data Latency=4 Reg=%320
    SU(14): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%321
    SU(27): Data Latency=1 Reg=%321
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %324:gr64_nosp = DEC64r %324:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%324
    SU(0): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%324
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 23
  Predecessors:
    SU(17): Data Latency=1 Reg=%324
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%324
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %324:gr64_nosp = SHL64ri %324:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(18): Data Latency=1 Reg=%324
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%324
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %324:gr64_nosp = ADD64rm %324:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 21
  Predecessors:
    SU(19): Data Latency=1 Reg=%324
    SU(19): Out  Latency=0
  Successors:
    SU(23): Data Latency=4 Reg=%324
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %328:gr64_nosp = DEC64r %328:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 19
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%328
    SU(7): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%328
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 18
  Predecessors:
    SU(21): Data Latency=1 Reg=%328
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%328
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(20): Data Latency=4 Reg=%324
    SU(22): Data Latency=1 Reg=%328
  Successors:
    SU(25): Data Latency=1 Reg=%329
    SU(24): Data Latency=1 Reg=%329
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 16
  Predecessors:
    SU(23): Data Latency=1 Reg=%329
    SU(13): Data Latency=4 Reg=%318
  Successors:
    SU(25): Data Latency=4 Reg=%332
    SU(25): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(24): Data Latency=4 Reg=%332
    SU(24): Out  Latency=0
    SU(23): Data Latency=1 Reg=%329
    SU(13): Data Latency=4 Reg=%318
  Successors:
    SU(26): Data Latency=4 Reg=%332
    SU(26): Out  Latency=0
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 8
  Predecessors:
    SU(25): Data Latency=4 Reg=%332
    SU(25): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%332
    SU(27): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(26): Data Latency=1 Reg=%332
    SU(26): Out  Latency=0
    SU(16): Data Latency=1 Reg=%321
    SU(12): Data Latency=1 Reg=%317
  Successors:
    SU(28): Data Latency=4 Reg=%332
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(28):   MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 3
  Predecessors:
    SU(27): Data Latency=4 Reg=%332
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%321
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%317
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(29): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(29):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 3
  Predecessors:
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 29
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 
Scheduling SU(29) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(29) 26c
  BotQ.A BotLatency SU(29) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %317
  UpdateRegP: SU(27) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
              to GR16 2
  UpdateRegP: SU(28) MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %321
  UpdateRegP: SU(27) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
              to 
  UpdateRegP: SU(28) MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
              to FR32 1    FR32X 1
  LiveReg: %332
  UpdateRegP: SU(28) MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 
Scheduling SU(27) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %332
  UpdateRegP: SU(27) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(27) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 16 12 
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %332
  UpdateRegP: SU(26) %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(26) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %332
  UpdateRegP: SU(25) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %329
  UpdateRegP: SU(24) %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(25) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %318
  UpdateRegP: SU(14) %321:gr64_nosp = LEA64r %318:gr64_nosp, 1, %318:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(25) %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(25) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @16c
  BotQ.A BotLatency SU(24) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %324
  UpdateRegP: SU(23) %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
              to 
  LiveReg: %328
  UpdateRegP: SU(23) %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(23) 17c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 22 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %328
  UpdateRegP: SU(22) %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(22) 18c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %328:gr64_nosp = DEC64r %328:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %328
  UpdateRegP: SU(10) %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %328:gr64_nosp = DEC64r %328:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @19c
  BotQ.A BotLatency SU(21) 19c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %324:gr64_nosp = ADD64rm %324:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %324
  UpdateRegP: SU(20) %324:gr64_nosp = ADD64rm %324:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(20) 21c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %324:gr64_nosp = SHL64ri %324:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %324
  UpdateRegP: SU(19) %324:gr64_nosp = SHL64ri %324:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(19) 22c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %324
  UpdateRegP: SU(18) %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(18) 23c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %324:gr64_nosp = DEC64r %324:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %324
  UpdateRegP: SU(3) %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(17) %324:gr64_nosp = DEC64r %324:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @24c
  BotQ.A BotLatency SU(17) 24c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %321
  UpdateRegP: SU(16) %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
              to 
  LiveReg: %320
  UpdateRegP: SU(16) %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(15) %320:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @12c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %321:gr64_nosp = LEA64r %318:gr64_nosp, 1, %318:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @9c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %318:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @20c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %310
  UpdateRegP: SU(12) %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
              to 
  LiveReg: %316
  UpdateRegP: SU(12) %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %316
  UpdateRegP: SU(11) %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %314
  UpdateRegP: SU(10) %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @19c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %314:gr64 = NOT64r %314:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %314
  UpdateRegP: SU(9) %314:gr64 = NOT64r %314:gr64(tied-def 0)
              to GR16 -2
  Ready @20c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %314:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @24c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %328:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @23c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %310:gr64 = ADD64rm %310:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %310
  UpdateRegP: SU(6) %310:gr64 = ADD64rm %310:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %310:gr64 = SHL64ri %310:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %310
  UpdateRegP: SU(5) %310:gr64 = SHL64ri %310:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %310
  UpdateRegP: SU(4) %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %306
  UpdateRegP: SU(3) %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @24c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %306:gr64 = NOT64r %306:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %306
  UpdateRegP: SU(2) %306:gr64 = NOT64r %306:gr64(tied-def 0)
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(2) 25c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %306:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @29c
  BotQ.A BotLatency SU(1) 29c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %324:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @28c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %324:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %306:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
SU(2):   %306:gr64 = NOT64r %306:gr64(tied-def 0)
SU(3):   %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
SU(4):   %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %310:gr64 = SHL64ri %310:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %310:gr64 = ADD64rm %310:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %328:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %314:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
SU(9):   %314:gr64 = NOT64r %314:gr64(tied-def 0)
SU(10):   %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
SU(11):   %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
SU(13):   %318:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %321:gr64_nosp = LEA64r %318:gr64_nosp, 1, %318:gr64_nosp, 0, $noreg
SU(15):   %320:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
SU(16):   %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
SU(17):   %324:gr64_nosp = DEC64r %324:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(18):   %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(19):   %324:gr64_nosp = SHL64ri %324:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
SU(20):   %324:gr64_nosp = ADD64rm %324:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(21):   %328:gr64_nosp = DEC64r %328:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(22):   %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
SU(24):   %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
SU(25):   %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
SU(26):   %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
SU(27):   %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
SU(28):   MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
SU(29):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.47 for.cond450
  From: %218:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
    To: JCC_1 %bb.55, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %218:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%218
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %218:gr32 = DEC32r %218:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%218
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%218
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %218:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%218
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.55, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %218:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %218:gr32 = DEC32r %218:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %218:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %218:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(1):   %218:gr32 = DEC32r %218:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %218:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
interp:%bb.48 for.body453
  From: %220:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %220:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%220
  Single Issue       : false;
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %220:gr32 :: (store 4 into %ir.i1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%220
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %220:gr32 :: (store 4 into %ir.i1)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %220:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %220:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %220:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
interp:%bb.49 for.cond454
  From: %223:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.51, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %223:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%223
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %223:gr32 = DEC32r %223:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%223
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%223
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %223:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%223
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.51, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %223:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %223:gr32 = DEC32r %223:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %223:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %223:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %223:gr32 = DEC32r %223:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %223:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.50 for.body457
  From: %283:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.49
 RegionInstrs: 33
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=20
Live In: %562 %1 %354 %3 %338 
Live Out: %562 %1 %354 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %562
  UpdateRegP: SU(29) %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(26) %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %354
  UpdateRegP: SU(18) %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %283:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(17): Data Latency=4 Reg=%283
    SU(3): Data Latency=4 Reg=%283
    SU(17): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %265:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(2): Data Latency=4 Reg=%265
    SU(2): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %265:gr64 = NOT64r %265:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(1): Data Latency=4 Reg=%265
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%265
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(2): Data Latency=1 Reg=%265
    SU(0): Data Latency=4 Reg=%283
  Successors:
    SU(4): Data Latency=1 Reg=%269
    SU(4): Out  Latency=0
    SU(17): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%269
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%269
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %269:gr64 = SHL64ri %269:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%269
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%269
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %269:gr64 = ADD64rm %269:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%269
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%269
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %290:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(25): Data Latency=4 Reg=%290
    SU(21): Data Latency=4 Reg=%290
    SU(10): Data Latency=4 Reg=%290
    SU(25): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %273:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(9): Data Latency=4 Reg=%273
    SU(9): Out  Latency=0
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %273:gr64 = NOT64r %273:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(8): Data Latency=4 Reg=%273
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%273
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(9): Data Latency=1 Reg=%273
    SU(7): Data Latency=4 Reg=%290
  Successors:
    SU(11): Data Latency=1 Reg=%275
    SU(11): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%275
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%275
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%269
    SU(11): Data Latency=1 Reg=%275
  Successors:
    SU(31): Data Latency=1 Reg=%276
    SU(30): Data Latency=1 Reg=%276
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %277:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(28): Data Latency=4 Reg=%277
    SU(24): Data Latency=4 Reg=%277
    SU(14): Data Latency=4 Reg=%277
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %280:gr64_nosp = LEA64r %277:gr64_nosp, 1, %277:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%277
  Successors:
    SU(16): Data Latency=1 Reg=%280
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %279:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%279
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%280
    SU(15): Data Latency=4 Reg=%279
    SU(14): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%280
    SU(30): Data Latency=1 Reg=%280
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %283:gr64_nosp = DEC64r %283:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%283
    SU(0): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%283
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 23
  Predecessors:
    SU(17): Data Latency=1 Reg=%283
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%283
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %283:gr64_nosp = SHL64ri %283:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 22
  Predecessors:
    SU(18): Data Latency=1 Reg=%283
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%283
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %283:gr64_nosp = ADD64rm %283:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 21
  Predecessors:
    SU(19): Data Latency=1 Reg=%283
    SU(19): Out  Latency=0
  Successors:
    SU(27): Data Latency=4 Reg=%283
    SU(23): Data Latency=4 Reg=%283
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %286:gr64_nosp = COPY %290:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(7): Data Latency=4 Reg=%290
  Successors:
    SU(22): Data Latency=0 Reg=%286
    SU(22): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(21): Data Latency=0 Reg=%286
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%286
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(20): Data Latency=4 Reg=%283
    SU(22): Data Latency=1 Reg=%286
  Successors:
    SU(24): Data Latency=1 Reg=%287
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 16
  Predecessors:
    SU(23): Data Latency=1 Reg=%287
    SU(13): Data Latency=4 Reg=%277
  Successors:
    SU(28): Data Latency=4 Reg=%293
    SU(28): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %290:gr64_nosp = DEC64r %290:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(21): Anti Latency=0
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%290
    SU(7): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%290
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(25): Data Latency=1 Reg=%290
    SU(25): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%290
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 13
  Predecessors:
    SU(20): Data Latency=4 Reg=%283
    SU(26): Data Latency=1 Reg=%290
  Successors:
    SU(28): Data Latency=1 Reg=%291
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(24): Data Latency=4 Reg=%293
    SU(27): Data Latency=1 Reg=%291
    SU(24): Out  Latency=0
    SU(13): Data Latency=4 Reg=%277
  Successors:
    SU(29): Data Latency=4 Reg=%293
    SU(29): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(29):   %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 8
  Predecessors:
    SU(28): Data Latency=4 Reg=%293
    SU(28): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%293
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(29): Data Latency=1 Reg=%293
    SU(29): Out  Latency=0
    SU(16): Data Latency=1 Reg=%280
    SU(12): Data Latency=1 Reg=%276
  Successors:
    SU(31): Data Latency=4 Reg=%293
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 3
  Predecessors:
    SU(30): Data Latency=4 Reg=%293
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%280
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%276
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(32):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 3
  Predecessors:
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.49
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 29
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(32) 26c
  BotQ.A BotLatency SU(32) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %276
  UpdateRegP: SU(30) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
              to GR16 2
  UpdateRegP: SU(31) MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %280
  UpdateRegP: SU(30) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
              to 
  UpdateRegP: SU(31) MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
              to FR32 1    FR32X 1
  LiveReg: %293
  UpdateRegP: SU(31) MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %293
  UpdateRegP: SU(30) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(30) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 16 12 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %293
  UpdateRegP: SU(29) %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(29) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %293
  UpdateRegP: SU(28) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %291
  UpdateRegP: SU(28) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %277
  UpdateRegP: SU(14) %280:gr64_nosp = LEA64r %277:gr64_nosp, 1, %277:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(28) %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(28) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 27 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %283
  UpdateRegP: SU(23) %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
              to 
  LiveReg: %290
  UpdateRegP: SU(27) %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(27) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 26 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %290
  UpdateRegP: SU(26) %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(26) 14c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %290:gr64_nosp = DEC64r %290:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %290
  UpdateRegP: SU(10) %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %286:gr64_nosp = COPY %290:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(25) %290:gr64_nosp = DEC64r %290:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(25) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %287
  UpdateRegP: SU(24) %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(24) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %286
  UpdateRegP: SU(23) %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(23) 17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 22 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %286
  UpdateRegP: SU(22) %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(22) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %286:gr64_nosp = COPY %290:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %283:gr64_nosp = ADD64rm %283:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %283
  UpdateRegP: SU(20) %283:gr64_nosp = ADD64rm %283:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(20) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %283:gr64_nosp = SHL64ri %283:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %283
  UpdateRegP: SU(19) %283:gr64_nosp = SHL64ri %283:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(19) 22c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %283
  UpdateRegP: SU(18) %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(18) 23c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %283:gr64_nosp = DEC64r %283:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %283
  UpdateRegP: SU(3) %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(17) %283:gr64_nosp = DEC64r %283:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @24c
  BotQ.A BotLatency SU(17) 24c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %280
  UpdateRegP: SU(16) %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
              to 
  LiveReg: %279
  UpdateRegP: SU(16) %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(15) %279:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @12c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %280:gr64_nosp = LEA64r %277:gr64_nosp, 1, %277:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @9c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %277:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @20c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %269
  UpdateRegP: SU(12) %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
              to 
  LiveReg: %275
  UpdateRegP: SU(12) %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %275
  UpdateRegP: SU(11) %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %273
  UpdateRegP: SU(10) %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @15c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %273:gr64 = NOT64r %273:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %273
  UpdateRegP: SU(9) %273:gr64 = NOT64r %273:gr64(tied-def 0)
              to GR16 -2
  Ready @16c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %273:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @20c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %290:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @22c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %269:gr64 = ADD64rm %269:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %269
  UpdateRegP: SU(6) %269:gr64 = ADD64rm %269:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %269:gr64 = SHL64ri %269:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %269
  UpdateRegP: SU(5) %269:gr64 = SHL64ri %269:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %269
  UpdateRegP: SU(4) %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %265
  UpdateRegP: SU(3) %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @24c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %265:gr64 = NOT64r %265:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %265
  UpdateRegP: SU(2) %265:gr64 = NOT64r %265:gr64(tied-def 0)
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(2) 25c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %265:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @29c
  BotQ.A BotLatency SU(1) 29c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %283:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @28c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %283:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %265:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
SU(2):   %265:gr64 = NOT64r %265:gr64(tied-def 0)
SU(3):   %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
SU(4):   %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %269:gr64 = SHL64ri %269:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %269:gr64 = ADD64rm %269:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %290:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %273:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
SU(9):   %273:gr64 = NOT64r %273:gr64(tied-def 0)
SU(10):   %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
SU(11):   %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
SU(13):   %277:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %280:gr64_nosp = LEA64r %277:gr64_nosp, 1, %277:gr64_nosp, 0, $noreg
SU(15):   %279:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(16):   %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
SU(17):   %283:gr64_nosp = DEC64r %283:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(18):   %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(19):   %283:gr64_nosp = SHL64ri %283:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
SU(20):   %283:gr64_nosp = ADD64rm %283:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(21):   %286:gr64_nosp = COPY %290:gr64_nosp
SU(22):   %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
SU(24):   %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
SU(25):   %290:gr64_nosp = DEC64r %290:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(26):   %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(27):   %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
SU(28):   %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
SU(29):   %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
SU(30):   %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
SU(31):   MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
SU(32):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.52 for.cond511
  From: %227:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.54, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %227:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%227
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %227:gr32 = DEC32r %227:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%227
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%227
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %227:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%227
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.54, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %227:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %227:gr32 = DEC32r %227:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %227:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %227:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %227:gr32 = DEC32r %227:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %227:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.53 for.body514
  From: %249:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.52
 RegionInstrs: 35
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=20
Live In: %564 %1 %354 %3 %338 
Live Out: %564 %1 %354 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %564
  UpdateRegP: SU(31) %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(26) %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %354
  UpdateRegP: SU(18) %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %249:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
    SU(17): Data Latency=4 Reg=%249
    SU(3): Data Latency=4 Reg=%249
    SU(17): Out  Latency=0
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %231:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(2): Data Latency=4 Reg=%231
    SU(2): Out  Latency=0
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %231:gr64 = NOT64r %231:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 33
  Predecessors:
    SU(1): Data Latency=4 Reg=%231
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%231
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 32
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
    SU(0): Data Latency=4 Reg=%249
  Successors:
    SU(4): Data Latency=1 Reg=%235
    SU(4): Out  Latency=0
    SU(17): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%235
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%235
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %235:gr64 = SHL64ri %235:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%235
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%235
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %235:gr64 = ADD64rm %235:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%235
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%235
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %256:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(25): Data Latency=4 Reg=%256
    SU(21): Data Latency=4 Reg=%256
    SU(10): Data Latency=4 Reg=%256
    SU(25): Out  Latency=0
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %239:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(9): Data Latency=4 Reg=%239
    SU(9): Out  Latency=0
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %239:gr64 = NOT64r %239:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 24
  Predecessors:
    SU(8): Data Latency=4 Reg=%239
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%239
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(9): Data Latency=1 Reg=%239
    SU(7): Data Latency=4 Reg=%256
  Successors:
    SU(11): Data Latency=1 Reg=%241
    SU(11): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%241
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%241
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%235
    SU(11): Data Latency=1 Reg=%241
  Successors:
    SU(33): Data Latency=1 Reg=%242
    SU(32): Data Latency=1 Reg=%242
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %243:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(30): Data Latency=4 Reg=%243
    SU(29): Data Latency=4 Reg=%243
    SU(28): Data Latency=4 Reg=%243
    SU(24): Data Latency=4 Reg=%243
    SU(14): Data Latency=4 Reg=%243
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %246:gr64_nosp = LEA64r %243:gr64_nosp, 1, %243:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%243
  Successors:
    SU(16): Data Latency=1 Reg=%246
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %245:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%245
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%246
    SU(15): Data Latency=4 Reg=%245
    SU(14): Out  Latency=0
  Successors:
    SU(33): Data Latency=1 Reg=%246
    SU(32): Data Latency=1 Reg=%246
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %249:gr64_nosp = DEC64r %249:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 32
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%249
    SU(0): Out  Latency=0
  Successors:
    SU(18): Data Latency=1 Reg=%249
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 31
  Predecessors:
    SU(17): Data Latency=1 Reg=%249
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%249
    SU(19): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %249:gr64_nosp = SHL64ri %249:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(18): Data Latency=1 Reg=%249
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%249
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %249:gr64_nosp = ADD64rm %249:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 29
  Predecessors:
    SU(19): Data Latency=1 Reg=%249
    SU(19): Out  Latency=0
  Successors:
    SU(27): Data Latency=4 Reg=%249
    SU(23): Data Latency=4 Reg=%249
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %252:gr64_nosp = COPY %256:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(7): Data Latency=4 Reg=%256
  Successors:
    SU(22): Data Latency=0 Reg=%252
    SU(22): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(21): Data Latency=0 Reg=%252
    SU(21): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%252
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 25
  Predecessors:
    SU(20): Data Latency=4 Reg=%249
    SU(22): Data Latency=1 Reg=%252
  Successors:
    SU(29): Data Latency=1 Reg=%253
    SU(24): Data Latency=1 Reg=%253
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 24
  Predecessors:
    SU(23): Data Latency=1 Reg=%253
    SU(13): Data Latency=4 Reg=%243
  Successors:
    SU(28): Data Latency=4 Reg=%259
    SU(28): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %256:gr64_nosp = DEC64r %256:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(21): Anti Latency=0
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%256
    SU(7): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%256
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 22
  Predecessors:
    SU(25): Data Latency=1 Reg=%256
    SU(25): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%256
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 21
  Predecessors:
    SU(20): Data Latency=4 Reg=%249
    SU(26): Data Latency=1 Reg=%256
  Successors:
    SU(30): Data Latency=1 Reg=%257
    SU(28): Data Latency=1 Reg=%257
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 20
  Predecessors:
    SU(24): Data Latency=4 Reg=%259
    SU(27): Data Latency=1 Reg=%257
    SU(24): Out  Latency=0
    SU(13): Data Latency=4 Reg=%243
  Successors:
    SU(29): Data Latency=4 Reg=%259
    SU(29): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(29):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 16
  Predecessors:
    SU(28): Data Latency=4 Reg=%259
    SU(28): Out  Latency=0
    SU(23): Data Latency=1 Reg=%253
    SU(13): Data Latency=4 Reg=%243
  Successors:
    SU(30): Data Latency=4 Reg=%259
    SU(30): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(30):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 12
  Predecessors:
    SU(29): Data Latency=4 Reg=%259
    SU(29): Out  Latency=0
    SU(27): Data Latency=1 Reg=%257
    SU(13): Data Latency=4 Reg=%243
  Successors:
    SU(31): Data Latency=4 Reg=%259
    SU(31): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 8
  Predecessors:
    SU(30): Data Latency=4 Reg=%259
    SU(30): Out  Latency=0
  Successors:
    SU(32): Data Latency=1 Reg=%259
    SU(32): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 7
  Predecessors:
    SU(31): Data Latency=1 Reg=%259
    SU(31): Out  Latency=0
    SU(16): Data Latency=1 Reg=%246
    SU(12): Data Latency=1 Reg=%242
  Successors:
    SU(33): Data Latency=4 Reg=%259
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(33):   MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
  # preds left       : 16
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 3
  Predecessors:
    SU(32): Data Latency=4 Reg=%259
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%246
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%242
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(34):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 3
  Predecessors:
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.52
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 37
  Height             : 0
  Predecessors:
    SU(34): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 37
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(34) 34c
  BotQ.A BotLatency SU(34) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %242
  UpdateRegP: SU(32) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
              to GR16 2
  UpdateRegP: SU(33) MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %246
  UpdateRegP: SU(32) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
              to 
  UpdateRegP: SU(33) MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
              to FR32 1    FR32X 1
  LiveReg: %259
  UpdateRegP: SU(33) MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %259
  UpdateRegP: SU(32) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(32) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 16 12 
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %259
  UpdateRegP: SU(31) %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(31) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 30 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %259
  UpdateRegP: SU(30) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %257
  UpdateRegP: SU(28) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
              to GR16 2
  UpdateRegP: SU(30) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %243
  UpdateRegP: SU(14) %246:gr64_nosp = LEA64r %243:gr64_nosp, 1, %243:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(28) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
              to 
  UpdateRegP: SU(29) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
              to GR16 2
  UpdateRegP: SU(30) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(30) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 29 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %259
  UpdateRegP: SU(29) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %253
  UpdateRegP: SU(24) %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(29) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(29) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %259
  UpdateRegP: SU(28) %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
              to FR32 -1    FR32X -1
  Ready @20c
  BotQ.A BotLatency SU(28) 20c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 27 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %249
  UpdateRegP: SU(23) %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
              to 
  LiveReg: %256
  UpdateRegP: SU(27) %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(27) 21c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 26 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %256
  UpdateRegP: SU(26) %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(26) 22c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %256:gr64_nosp = DEC64r %256:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %256
  UpdateRegP: SU(10) %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %252:gr64_nosp = COPY %256:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(25) %256:gr64_nosp = DEC64r %256:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(25) 23c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  Ready @24c
  BotQ.A BotLatency SU(24) 24c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %252
  UpdateRegP: SU(23) %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(23) 25c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 22 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %252
  UpdateRegP: SU(22) %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(22) 26c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %252:gr64_nosp = COPY %256:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @26c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %249:gr64_nosp = ADD64rm %249:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %249
  UpdateRegP: SU(20) %249:gr64_nosp = ADD64rm %249:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @29c
  BotQ.A BotLatency SU(20) 29c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %249:gr64_nosp = SHL64ri %249:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %249
  UpdateRegP: SU(19) %249:gr64_nosp = SHL64ri %249:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @30c
  BotQ.A BotLatency SU(19) 30c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %249
  UpdateRegP: SU(18) %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @31c
  BotQ.A BotLatency SU(18) 31c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %249:gr64_nosp = DEC64r %249:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  LiveReg: %249
  UpdateRegP: SU(3) %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(17) %249:gr64_nosp = DEC64r %249:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @32c
  BotQ.A BotLatency SU(17) 32c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %246
  UpdateRegP: SU(16) %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
              to 
  LiveReg: %245
  UpdateRegP: SU(16) %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(15) %245:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @12c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %246:gr64_nosp = LEA64r %243:gr64_nosp, 1, %243:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @9c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %243:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @28c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %235
  UpdateRegP: SU(12) %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
              to 
  LiveReg: %241
  UpdateRegP: SU(12) %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %241
  UpdateRegP: SU(11) %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %239
  UpdateRegP: SU(10) %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @23c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %239:gr64 = NOT64r %239:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %239
  UpdateRegP: SU(9) %239:gr64 = NOT64r %239:gr64(tied-def 0)
              to GR16 -2
  Ready @24c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %239:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @28c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %256:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @30c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %235:gr64 = ADD64rm %235:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %235
  UpdateRegP: SU(6) %235:gr64 = ADD64rm %235:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %235:gr64 = SHL64ri %235:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %235
  UpdateRegP: SU(5) %235:gr64 = SHL64ri %235:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %235
  UpdateRegP: SU(4) %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %231
  UpdateRegP: SU(3) %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @32c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %231:gr64 = NOT64r %231:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %231
  UpdateRegP: SU(2) %231:gr64 = NOT64r %231:gr64(tied-def 0)
              to GR16 -2
  Ready @33c
  BotQ.A BotLatency SU(2) 33c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %231:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @37c
  BotQ.A BotLatency SU(1) 37c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %249:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @36c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %249:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %231:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
SU(2):   %231:gr64 = NOT64r %231:gr64(tied-def 0)
SU(3):   %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
SU(4):   %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %235:gr64 = SHL64ri %235:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %235:gr64 = ADD64rm %235:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %256:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %239:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
SU(9):   %239:gr64 = NOT64r %239:gr64(tied-def 0)
SU(10):   %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
SU(11):   %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
SU(13):   %243:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %246:gr64_nosp = LEA64r %243:gr64_nosp, 1, %243:gr64_nosp, 0, $noreg
SU(15):   %245:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
SU(16):   %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
SU(17):   %249:gr64_nosp = DEC64r %249:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(18):   %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(19):   %249:gr64_nosp = SHL64ri %249:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
SU(20):   %249:gr64_nosp = ADD64rm %249:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(21):   %252:gr64_nosp = COPY %256:gr64_nosp
SU(22):   %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
SU(24):   %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
SU(25):   %256:gr64_nosp = DEC64r %256:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(26):   %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(27):   %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
SU(28):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
SU(29):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
SU(30):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
SU(31):   %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
SU(32):   %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
SU(33):   MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
SU(34):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.56 for.end590
  From: MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %568:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %568:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(1):   %568:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
interp:%bb.57 for.cond591
  From: %34:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
    To: JCC_1 %bb.77, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %34:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%34
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%34
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%34
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%34
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.77, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %34:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
SU(1):   %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
interp:%bb.58 for.body594
  From: %36:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %36:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(1):   MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %36:gr32 :: (store 4 into %ir.i2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%36
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %36:gr32 :: (store 4 into %ir.i2)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %36:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %36:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
SU(1):   MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %36:gr32 :: (store 4 into %ir.i2)

********** MI Scheduling **********
interp:%bb.59 for.cond595
  From: %39:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
    To: JCC_1 %bb.67, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%39
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%39
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%39
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.67, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %39:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(1):   %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
interp:%bb.60 for.body598
  From: %134:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %134:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%134
  Single Issue       : false;
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %134:gr32 :: (store 4 into %ir.i1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%134
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %134:gr32 :: (store 4 into %ir.i1)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %134:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %134:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %134:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
interp:%bb.61 for.cond599
  From: %137:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.63, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %137:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%137
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%137
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%137
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %137:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%137
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %137:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %137:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %137:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %137:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.62 for.body602
  From: %205:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.61
 RegionInstrs: 34
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=22
Live In: %562 %354 %1 %3 %338 
Live Out: %562 %354 %1 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %562
  UpdateRegP: SU(30) %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
              to 
  LiveReg: %354
  UpdateRegP: SU(19) %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(26) %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %205:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(25): Data Latency=4 Reg=%205
    SU(18): Data Latency=4 Reg=%205
    SU(3): Data Latency=4 Reg=%205
    SU(25): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %180:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(2): Data Latency=4 Reg=%180
    SU(2): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %180:gr64 = NOT64r %180:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(1): Data Latency=4 Reg=%180
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%180
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(2): Data Latency=1 Reg=%180
    SU(0): Data Latency=4 Reg=%205
  Successors:
    SU(4): Data Latency=1 Reg=%184
    SU(4): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%184
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%184
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %184:gr64 = SHL64ri %184:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%184
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%184
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %184:gr64 = ADD64rm %184:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%184
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%184
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %201:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(21): Data Latency=4 Reg=%201
    SU(10): Data Latency=4 Reg=%201
    SU(21): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %188:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(9): Data Latency=4 Reg=%188
    SU(9): Out  Latency=0
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %188:gr64 = NOT64r %188:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 20
  Predecessors:
    SU(8): Data Latency=4 Reg=%188
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%188
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 19
  Predecessors:
    SU(9): Data Latency=1 Reg=%188
    SU(7): Data Latency=4 Reg=%201
  Successors:
    SU(11): Data Latency=1 Reg=%190
    SU(11): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%190
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%190
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%184
    SU(11): Data Latency=1 Reg=%190
  Successors:
    SU(32): Data Latency=1 Reg=%191
    SU(31): Data Latency=1 Reg=%191
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %192:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(29): Data Latency=4 Reg=%192
    SU(24): Data Latency=4 Reg=%192
    SU(14): Data Latency=4 Reg=%192
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %195:gr64_nosp = LEA64r %192:gr64_nosp, 1, %192:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%192
  Successors:
    SU(16): Data Latency=1 Reg=%195
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %194:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%194
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%195
    SU(15): Data Latency=4 Reg=%194
    SU(14): Out  Latency=0
  Successors:
    SU(32): Data Latency=1 Reg=%195
    SU(31): Data Latency=1 Reg=%195
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %196:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(27): Data Latency=4 Reg=%196
    SU(20): Data Latency=4 Reg=%196
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %198:gr64_nosp = COPY %205:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(0): Data Latency=4 Reg=%205
  Successors:
    SU(19): Data Latency=0 Reg=%198
    SU(19): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(18): Data Latency=0 Reg=%198
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%198
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 18
  Predecessors:
    SU(19): Data Latency=1 Reg=%198
    SU(17): Data Latency=4 Reg=%196
  Successors:
    SU(23): Data Latency=1 Reg=%199
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   %201:gr64_nosp = DEC64r %201:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 19
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%201
    SU(7): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%201
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 18
  Predecessors:
    SU(21): Data Latency=1 Reg=%201
    SU(21): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%201
    SU(23): Data Latency=1 Reg=%201
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 17
  Predecessors:
    SU(22): Data Latency=1 Reg=%201
    SU(20): Data Latency=1 Reg=%199
  Successors:
    SU(24): Data Latency=1 Reg=%202
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 16
  Predecessors:
    SU(23): Data Latency=1 Reg=%202
    SU(13): Data Latency=4 Reg=%192
  Successors:
    SU(29): Data Latency=4 Reg=%209
    SU(29): Out  Latency=0
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %205:gr64_nosp = DEC64r %205:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(18): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%205
    SU(0): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%205
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(25): Data Latency=1 Reg=%205
    SU(25): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%205
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(26): Data Latency=1 Reg=%205
    SU(17): Data Latency=4 Reg=%196
  Successors:
    SU(28): Data Latency=1 Reg=%206
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(27): Data Latency=1 Reg=%206
    SU(22): Data Latency=1 Reg=%201
  Successors:
    SU(29): Data Latency=1 Reg=%207
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(29):   %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(28): Data Latency=1 Reg=%207
    SU(24): Data Latency=4 Reg=%209
    SU(24): Out  Latency=0
    SU(13): Data Latency=4 Reg=%192
  Successors:
    SU(30): Data Latency=4 Reg=%209
    SU(30): Out  Latency=0
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(30):   %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 8
  Predecessors:
    SU(29): Data Latency=4 Reg=%209
    SU(29): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%209
    SU(31): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 7
  Predecessors:
    SU(30): Data Latency=1 Reg=%209
    SU(30): Out  Latency=0
    SU(16): Data Latency=1 Reg=%195
    SU(12): Data Latency=1 Reg=%191
  Successors:
    SU(32): Data Latency=4 Reg=%209
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(32):   MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 3
  Predecessors:
    SU(31): Data Latency=4 Reg=%209
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%195
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%191
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(33):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 3
  Predecessors:
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.61
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 24
  Height             : 0
  Predecessors:
    SU(33): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 24
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(33) 21c
  BotQ.A BotLatency SU(33) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %191
  UpdateRegP: SU(31) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
              to GR16 2
  UpdateRegP: SU(32) MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %195
  UpdateRegP: SU(31) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
              to 
  UpdateRegP: SU(32) MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
              to FR32 1    FR32X 1
  LiveReg: %209
  UpdateRegP: SU(32) MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 31 
Scheduling SU(31) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %209
  UpdateRegP: SU(31) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(31) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 16 12 
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %209
  UpdateRegP: SU(30) %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(30) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 29 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %209
  UpdateRegP: SU(29) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %207
  UpdateRegP: SU(29) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %192
  UpdateRegP: SU(14) %195:gr64_nosp = LEA64r %192:gr64_nosp, 1, %192:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(29) %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(29) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %206
  UpdateRegP: SU(28) %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
              to 
  LiveReg: %201
  UpdateRegP: SU(23) %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(28) %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(28) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 27 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %196
  UpdateRegP: SU(20) %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(27) %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
              to 
  LiveReg: %205
  UpdateRegP: SU(27) %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(27) 14c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 26 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %205
  UpdateRegP: SU(26) %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(26) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %205:gr64_nosp = DEC64r %205:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %205
  UpdateRegP: SU(3) %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %198:gr64_nosp = COPY %205:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(25) %205:gr64_nosp = DEC64r %205:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(25) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %202
  UpdateRegP: SU(24) %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
              to FR32 -1    FR32X -1
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %199
  UpdateRegP: SU(23) %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(23) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 22 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %201
  UpdateRegP: SU(22) %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(22) 18c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %201:gr64_nosp = DEC64r %201:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %201
  UpdateRegP: SU(10) %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %201:gr64_nosp = DEC64r %201:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @19c
  BotQ.A BotLatency SU(21) 19c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %198
  UpdateRegP: SU(20) %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @18c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(19) %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %198
  UpdateRegP: SU(19) %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @19c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) REG-MAX                            
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %198:gr64_nosp = COPY %205:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  Ready @19c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %196:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @22c
  BotQ.A BotLatency SU(17) 22c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %195
  UpdateRegP: SU(16) %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
              to 
  LiveReg: %194
  UpdateRegP: SU(16) %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %194:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @12c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %195:gr64_nosp = LEA64r %192:gr64_nosp, 1, %192:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @9c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %192:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @20c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %184
  UpdateRegP: SU(12) %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
              to 
  LiveReg: %190
  UpdateRegP: SU(12) %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %190
  UpdateRegP: SU(11) %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %188
  UpdateRegP: SU(10) %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @19c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %188:gr64 = NOT64r %188:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %188
  UpdateRegP: SU(9) %188:gr64 = NOT64r %188:gr64(tied-def 0)
              to GR16 -2
  Ready @20c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %188:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @24c
  BotQ.A BotLatency SU(8) 24c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %201:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @23c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %184:gr64 = ADD64rm %184:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %184
  UpdateRegP: SU(6) %184:gr64 = ADD64rm %184:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %184:gr64 = SHL64ri %184:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %184
  UpdateRegP: SU(5) %184:gr64 = SHL64ri %184:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %184
  UpdateRegP: SU(4) %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %180
  UpdateRegP: SU(3) %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @16c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %180:gr64 = NOT64r %180:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %180
  UpdateRegP: SU(2) %180:gr64 = NOT64r %180:gr64(tied-def 0)
              to GR16 -2
  Ready @17c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %180:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @21c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %205:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @23c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %205:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %180:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
SU(2):   %180:gr64 = NOT64r %180:gr64(tied-def 0)
SU(3):   %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
SU(4):   %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %184:gr64 = SHL64ri %184:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %184:gr64 = ADD64rm %184:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %201:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %188:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
SU(9):   %188:gr64 = NOT64r %188:gr64(tied-def 0)
SU(10):   %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
SU(11):   %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
SU(13):   %192:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %195:gr64_nosp = LEA64r %192:gr64_nosp, 1, %192:gr64_nosp, 0, $noreg
SU(15):   %194:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(16):   %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
SU(17):   %196:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(18):   %198:gr64_nosp = COPY %205:gr64_nosp
SU(19):   %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(20):   %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
SU(21):   %201:gr64_nosp = DEC64r %201:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(22):   %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
SU(24):   %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
SU(25):   %205:gr64_nosp = DEC64r %205:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(26):   %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(27):   %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
SU(28):   %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
SU(29):   %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
SU(30):   %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
SU(31):   %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
SU(32):   MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
SU(33):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.64 for.cond656
  From: %141:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.66, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %141:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%141
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %141:gr32 = DEC32r %141:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%141
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%141
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %141:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%141
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.66, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %141:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %141:gr32 = DEC32r %141:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %141:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %141:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %141:gr32 = DEC32r %141:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %141:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.65 for.body659
  From: %171:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.64
 RegionInstrs: 36
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=22
Live In: %564 %354 %1 %3 %338 
Live Out: %564 %354 %1 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %564
  UpdateRegP: SU(32) %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
              to 
  LiveReg: %354
  UpdateRegP: SU(19) %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(27) %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %171:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 31
  Successors:
    SU(26): Data Latency=4 Reg=%171
    SU(18): Data Latency=4 Reg=%171
    SU(3): Data Latency=4 Reg=%171
    SU(26): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %145:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(2): Data Latency=4 Reg=%145
    SU(2): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %145:gr64 = NOT64r %145:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(1): Data Latency=4 Reg=%145
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 20
  Predecessors:
    SU(2): Data Latency=1 Reg=%145
    SU(0): Data Latency=4 Reg=%171
  Successors:
    SU(4): Data Latency=1 Reg=%149
    SU(4): Out  Latency=0
    SU(26): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%149
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%149
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %149:gr64 = SHL64ri %149:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%149
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%149
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%149
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%149
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %166:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 31
  Successors:
    SU(21): Data Latency=4 Reg=%166
    SU(10): Data Latency=4 Reg=%166
    SU(21): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %153:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(9): Data Latency=4 Reg=%153
    SU(9): Out  Latency=0
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %153:gr64 = NOT64r %153:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(8): Data Latency=4 Reg=%153
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%153
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(9): Data Latency=1 Reg=%153
    SU(7): Data Latency=4 Reg=%166
  Successors:
    SU(11): Data Latency=1 Reg=%155
    SU(11): Out  Latency=0
    SU(21): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%155
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%155
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%149
    SU(11): Data Latency=1 Reg=%155
  Successors:
    SU(34): Data Latency=1 Reg=%156
    SU(33): Data Latency=1 Reg=%156
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %157:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(31): Data Latency=4 Reg=%157
    SU(30): Data Latency=4 Reg=%157
    SU(25): Data Latency=4 Reg=%157
    SU(24): Data Latency=4 Reg=%157
    SU(14): Data Latency=4 Reg=%157
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %160:gr64_nosp = LEA64r %157:gr64_nosp, 1, %157:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%157
  Successors:
    SU(16): Data Latency=1 Reg=%160
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %159:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%159
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%160
    SU(15): Data Latency=4 Reg=%159
    SU(14): Out  Latency=0
  Successors:
    SU(34): Data Latency=1 Reg=%160
    SU(33): Data Latency=1 Reg=%160
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %161:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(28): Data Latency=4 Reg=%161
    SU(20): Data Latency=4 Reg=%161
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %163:gr64_nosp = COPY %171:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 27
  Predecessors:
    SU(0): Data Latency=4 Reg=%171
  Successors:
    SU(19): Data Latency=0 Reg=%163
    SU(19): Out  Latency=0
    SU(26): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 27
  Predecessors:
    SU(18): Data Latency=0 Reg=%163
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%163
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 26
  Predecessors:
    SU(19): Data Latency=1 Reg=%163
    SU(17): Data Latency=4 Reg=%161
  Successors:
    SU(23): Data Latency=1 Reg=%164
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   %166:gr64_nosp = DEC64r %166:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 27
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%166
    SU(7): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%166
    SU(22): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 26
  Predecessors:
    SU(21): Data Latency=1 Reg=%166
    SU(21): Out  Latency=0
  Successors:
    SU(29): Data Latency=1 Reg=%166
    SU(23): Data Latency=1 Reg=%166
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 25
  Predecessors:
    SU(22): Data Latency=1 Reg=%166
    SU(20): Data Latency=1 Reg=%164
  Successors:
    SU(25): Data Latency=1 Reg=%167
    SU(24): Data Latency=1 Reg=%167
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 24
  Predecessors:
    SU(23): Data Latency=1 Reg=%167
    SU(13): Data Latency=4 Reg=%157
  Successors:
    SU(25): Data Latency=4 Reg=%174
    SU(25): Out  Latency=0
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 20
  Predecessors:
    SU(24): Data Latency=4 Reg=%174
    SU(24): Out  Latency=0
    SU(23): Data Latency=1 Reg=%167
    SU(13): Data Latency=4 Reg=%157
  Successors:
    SU(30): Data Latency=4 Reg=%174
    SU(30): Out  Latency=0
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(26):   %171:gr64_nosp = DEC64r %171:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 20
  Predecessors:
    SU(18): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%171
    SU(0): Out  Latency=0
  Successors:
    SU(27): Data Latency=1 Reg=%171
    SU(27): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 19
  Predecessors:
    SU(26): Data Latency=1 Reg=%171
    SU(26): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%171
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 18
  Predecessors:
    SU(27): Data Latency=1 Reg=%171
    SU(17): Data Latency=4 Reg=%161
  Successors:
    SU(29): Data Latency=1 Reg=%172
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(29):   %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(28): Data Latency=1 Reg=%172
    SU(22): Data Latency=1 Reg=%166
  Successors:
    SU(31): Data Latency=1 Reg=%173
    SU(30): Data Latency=1 Reg=%173
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(30):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 16
  Predecessors:
    SU(25): Data Latency=4 Reg=%174
    SU(29): Data Latency=1 Reg=%173
    SU(25): Out  Latency=0
    SU(13): Data Latency=4 Reg=%157
  Successors:
    SU(31): Data Latency=4 Reg=%174
    SU(31): Out  Latency=0
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 12
  Predecessors:
    SU(30): Data Latency=4 Reg=%174
    SU(30): Out  Latency=0
    SU(29): Data Latency=1 Reg=%173
    SU(13): Data Latency=4 Reg=%157
  Successors:
    SU(32): Data Latency=4 Reg=%174
    SU(32): Out  Latency=0
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(32):   %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 8
  Predecessors:
    SU(31): Data Latency=4 Reg=%174
    SU(31): Out  Latency=0
  Successors:
    SU(33): Data Latency=1 Reg=%174
    SU(33): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(33):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 7
  Predecessors:
    SU(32): Data Latency=1 Reg=%174
    SU(32): Out  Latency=0
    SU(16): Data Latency=1 Reg=%160
    SU(12): Data Latency=1 Reg=%156
  Successors:
    SU(34): Data Latency=4 Reg=%174
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(34):   MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
  # preds left       : 16
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 3
  Predecessors:
    SU(33): Data Latency=4 Reg=%174
    SU(33): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%160
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%156
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(35):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 3
  Predecessors:
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 32
  Height             : 0
  Predecessors:
    SU(35): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 32
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(35) 29c
  BotQ.A BotLatency SU(35) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %156
  UpdateRegP: SU(33) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
              to GR16 2
  UpdateRegP: SU(34) MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %160
  UpdateRegP: SU(33) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
              to 
  UpdateRegP: SU(34) MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
              to FR32 1    FR32X 1
  LiveReg: %174
  UpdateRegP: SU(34) MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %174
  UpdateRegP: SU(33) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(33) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 16 12 
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %174
  UpdateRegP: SU(32) %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(32) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 31 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %174
  UpdateRegP: SU(31) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %173
  UpdateRegP: SU(30) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
              to GR16 2
  UpdateRegP: SU(31) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %157
  UpdateRegP: SU(14) %160:gr64_nosp = LEA64r %157:gr64_nosp, 1, %157:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(25) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
              to GR16 2
  UpdateRegP: SU(30) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
              to 
  UpdateRegP: SU(31) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(31) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 30 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %174
  UpdateRegP: SU(30) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(30) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 29 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %172
  UpdateRegP: SU(29) %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
              to 
  LiveReg: %166
  UpdateRegP: SU(23) %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(29) %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(29) 17c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 25 28 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %161
  UpdateRegP: SU(20) %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(28) %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
              to 
  LiveReg: %171
  UpdateRegP: SU(28) %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(28) 18c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 25 27 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %171
  UpdateRegP: SU(27) %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @19c
  BotQ.A BotLatency SU(27) 19c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 25 26 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %171:gr64_nosp = DEC64r %171:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %171
  UpdateRegP: SU(3) %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %163:gr64_nosp = COPY %171:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(26) %171:gr64_nosp = DEC64r %171:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @20c
  BotQ.A BotLatency SU(26) 20c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %174
  UpdateRegP: SU(25) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %167
  UpdateRegP: SU(24) %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(25) %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
              to FR32 -1    FR32X -1
  Ready @20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  Ready @24c
  BotQ.A BotLatency SU(24) 24c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %164
  UpdateRegP: SU(23) %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(23) 25c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 22 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(22) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(22) %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %166
  UpdateRegP: SU(22) %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(22) 26c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %166:gr64_nosp = DEC64r %166:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %166
  UpdateRegP: SU(10) %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %166:gr64_nosp = DEC64r %166:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(21) 27c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %163
  UpdateRegP: SU(20) %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @26c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(19) %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %163
  UpdateRegP: SU(19) %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) REG-MAX                            
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %163:gr64_nosp = COPY %171:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  Ready @27c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %161:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @30c
  BotQ.A BotLatency SU(17) 30c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  LiveReg: %160
  UpdateRegP: SU(16) %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
              to 
  LiveReg: %159
  UpdateRegP: SU(16) %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %159:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  Ready @12c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %160:gr64_nosp = LEA64r %157:gr64_nosp, 1, %157:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  Ready @9c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %157:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @28c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %149
  UpdateRegP: SU(12) %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
              to 
  LiveReg: %155
  UpdateRegP: SU(12) %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %155
  UpdateRegP: SU(11) %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %153
  UpdateRegP: SU(10) %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @27c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %153:gr64 = NOT64r %153:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %153
  UpdateRegP: SU(9) %153:gr64 = NOT64r %153:gr64(tied-def 0)
              to GR16 -2
  Ready @28c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %153:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  Ready @32c
  BotQ.A BotLatency SU(8) 32c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %166:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  Ready @31c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %149
  UpdateRegP: SU(6) %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %149:gr64 = SHL64ri %149:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %149
  UpdateRegP: SU(5) %149:gr64 = SHL64ri %149:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %149
  UpdateRegP: SU(4) %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %145
  UpdateRegP: SU(3) %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @20c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %145:gr64 = NOT64r %145:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %145
  UpdateRegP: SU(2) %145:gr64 = NOT64r %145:gr64(tied-def 0)
              to GR16 -2
  Ready @21c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %145:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @25c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %171:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @31c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %171:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %145:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
SU(2):   %145:gr64 = NOT64r %145:gr64(tied-def 0)
SU(3):   %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
SU(4):   %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %149:gr64 = SHL64ri %149:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %166:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %153:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
SU(9):   %153:gr64 = NOT64r %153:gr64(tied-def 0)
SU(10):   %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
SU(11):   %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
SU(13):   %157:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %160:gr64_nosp = LEA64r %157:gr64_nosp, 1, %157:gr64_nosp, 0, $noreg
SU(15):   %159:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
SU(16):   %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
SU(17):   %161:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(18):   %163:gr64_nosp = COPY %171:gr64_nosp
SU(19):   %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(20):   %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
SU(21):   %166:gr64_nosp = DEC64r %166:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(22):   %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
SU(24):   %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
SU(25):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
SU(26):   %171:gr64_nosp = DEC64r %171:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(27):   %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(28):   %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
SU(29):   %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
SU(30):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
SU(31):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
SU(32):   %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
SU(33):   %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
SU(34):   MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
SU(35):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.68 for.cond733
  From: %43:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
    To: JCC_1 %bb.76, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%43
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%43
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%43
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%43
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.76, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   %43:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(1):   %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
interp:%bb.69 for.body736
  From: %45:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %45:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%45
  Single Issue       : false;
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.i1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%45
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.i1)
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %45:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.69 ***
SU(0):   %45:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(1):   MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.i1)

********** MI Scheduling **********
interp:%bb.70 for.cond737
  From: %48:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.72, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %48:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%48
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %48:gr32 = DEC32r %48:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%48
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%48
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%48
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.72, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %48:gr32 = DEC32r %48:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %48:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   %48:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %48:gr32 = DEC32r %48:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.71 for.body740
  From: %126:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.70
 RegionInstrs: 40
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=26
Live In: %564 %354 %1 %3 %338 
Live Out: %564 %354 %1 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %564
  UpdateRegP: SU(36) %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
              to 
  LiveReg: %354
  UpdateRegP: SU(19) %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(30) %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(26) %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %126:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 31
  Successors:
    SU(29): Data Latency=4 Reg=%126
    SU(18): Data Latency=4 Reg=%126
    SU(3): Data Latency=4 Reg=%126
    SU(29): Out  Latency=0
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %98:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(2): Data Latency=4 Reg=%98
    SU(2): Out  Latency=0
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %98:gr64 = NOT64r %98:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(1): Data Latency=4 Reg=%98
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%98
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 20
  Predecessors:
    SU(2): Data Latency=1 Reg=%98
    SU(0): Data Latency=4 Reg=%126
  Successors:
    SU(4): Data Latency=1 Reg=%102
    SU(4): Out  Latency=0
    SU(29): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%102
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%102
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%102
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%102
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%102
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%102
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %122:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(25): Data Latency=4 Reg=%122
    SU(21): Data Latency=4 Reg=%122
    SU(10): Data Latency=4 Reg=%122
    SU(25): Out  Latency=0
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %106:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(9): Data Latency=4 Reg=%106
    SU(9): Out  Latency=0
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %106:gr64 = NOT64r %106:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 24
  Predecessors:
    SU(8): Data Latency=4 Reg=%106
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%106
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(9): Data Latency=1 Reg=%106
    SU(7): Data Latency=4 Reg=%122
  Successors:
    SU(11): Data Latency=1 Reg=%108
    SU(11): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%108
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%108
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%102
    SU(11): Data Latency=1 Reg=%108
  Successors:
    SU(38): Data Latency=1 Reg=%109
    SU(37): Data Latency=1 Reg=%109
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %110:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(35): Data Latency=4 Reg=%110
    SU(33): Data Latency=4 Reg=%110
    SU(28): Data Latency=4 Reg=%110
    SU(24): Data Latency=4 Reg=%110
    SU(14): Data Latency=4 Reg=%110
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %113:gr64_nosp = LEA64r %110:gr64_nosp, 1, %110:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%110
  Successors:
    SU(16): Data Latency=1 Reg=%113
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %112:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%112
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%113
    SU(15): Data Latency=4 Reg=%112
    SU(14): Out  Latency=0
  Successors:
    SU(38): Data Latency=1 Reg=%113
    SU(37): Data Latency=1 Reg=%113
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %114:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(31): Data Latency=4 Reg=%114
    SU(20): Data Latency=4 Reg=%114
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %116:gr64_nosp = COPY %126:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 27
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Successors:
    SU(19): Data Latency=0 Reg=%116
    SU(19): Out  Latency=0
    SU(29): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 27
  Predecessors:
    SU(18): Data Latency=0 Reg=%116
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%116
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 26
  Predecessors:
    SU(19): Data Latency=1 Reg=%116
    SU(17): Data Latency=4 Reg=%114
  Successors:
    SU(27): Data Latency=1 Reg=%117
    SU(23): Data Latency=1 Reg=%117
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   %118:gr64_nosp = COPY %122:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(7): Data Latency=4 Reg=%122
  Successors:
    SU(22): Data Latency=0 Reg=%118
    SU(22): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(21): Data Latency=0 Reg=%118
    SU(21): Out  Latency=0
  Successors:
    SU(32): Data Latency=1 Reg=%118
    SU(23): Data Latency=1 Reg=%118
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 25
  Predecessors:
    SU(20): Data Latency=1 Reg=%117
    SU(22): Data Latency=1 Reg=%118
  Successors:
    SU(24): Data Latency=1 Reg=%119
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 24
  Predecessors:
    SU(23): Data Latency=1 Reg=%119
    SU(13): Data Latency=4 Reg=%110
  Successors:
    SU(28): Data Latency=4 Reg=%129
    SU(28): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %122:gr64_nosp = DEC64r %122:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(21): Anti Latency=0
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%122
    SU(7): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%122
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 22
  Predecessors:
    SU(25): Data Latency=1 Reg=%122
    SU(25): Out  Latency=0
  Successors:
    SU(34): Data Latency=1 Reg=%122
    SU(27): Data Latency=1 Reg=%122
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 21
  Predecessors:
    SU(26): Data Latency=1 Reg=%122
    SU(20): Data Latency=1 Reg=%117
  Successors:
    SU(28): Data Latency=1 Reg=%123
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 20
  Predecessors:
    SU(27): Data Latency=1 Reg=%123
    SU(24): Data Latency=4 Reg=%129
    SU(24): Out  Latency=0
    SU(13): Data Latency=4 Reg=%110
  Successors:
    SU(33): Data Latency=4 Reg=%129
    SU(33): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(29):   %126:gr64_nosp = DEC64r %126:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 20
  Predecessors:
    SU(18): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%126
    SU(0): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%126
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 19
  Predecessors:
    SU(29): Data Latency=1 Reg=%126
    SU(29): Out  Latency=0
  Successors:
    SU(31): Data Latency=1 Reg=%126
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 18
  Predecessors:
    SU(30): Data Latency=1 Reg=%126
    SU(17): Data Latency=4 Reg=%114
  Successors:
    SU(34): Data Latency=1 Reg=%127
    SU(32): Data Latency=1 Reg=%127
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(32):   %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(31): Data Latency=1 Reg=%127
    SU(22): Data Latency=1 Reg=%118
  Successors:
    SU(33): Data Latency=1 Reg=%128
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(33):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 16
  Predecessors:
    SU(28): Data Latency=4 Reg=%129
    SU(32): Data Latency=1 Reg=%128
    SU(28): Out  Latency=0
    SU(13): Data Latency=4 Reg=%110
  Successors:
    SU(35): Data Latency=4 Reg=%129
    SU(35): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(34):   %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(31): Data Latency=1 Reg=%127
    SU(26): Data Latency=1 Reg=%122
  Successors:
    SU(35): Data Latency=1 Reg=%130
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(35):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 12
  Predecessors:
    SU(33): Data Latency=4 Reg=%129
    SU(34): Data Latency=1 Reg=%130
    SU(33): Out  Latency=0
    SU(13): Data Latency=4 Reg=%110
  Successors:
    SU(36): Data Latency=4 Reg=%129
    SU(36): Out  Latency=0
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(36):   %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 8
  Predecessors:
    SU(35): Data Latency=4 Reg=%129
    SU(35): Out  Latency=0
  Successors:
    SU(37): Data Latency=1 Reg=%129
    SU(37): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 7
  Predecessors:
    SU(36): Data Latency=1 Reg=%129
    SU(36): Out  Latency=0
    SU(16): Data Latency=1 Reg=%113
    SU(12): Data Latency=1 Reg=%109
  Successors:
    SU(38): Data Latency=4 Reg=%129
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(38):   MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
  # preds left       : 16
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 3
  Predecessors:
    SU(37): Data Latency=4 Reg=%129
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%113
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%109
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(39): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(39):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 28
  Height             : 3
  Predecessors:
    SU(38): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.70
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 31
  Height             : 0
  Predecessors:
    SU(39): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 31
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 39 
Scheduling SU(39) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(39) 28c
  BotQ.A BotLatency SU(39) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 38 
Scheduling SU(38) MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %109
  UpdateRegP: SU(37) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
              to GR16 2
  UpdateRegP: SU(38) MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %113
  UpdateRegP: SU(37) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
              to 
  UpdateRegP: SU(38) MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
              to FR32 1    FR32X 1
  LiveReg: %129
  UpdateRegP: SU(38) MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 
Scheduling SU(37) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %129
  UpdateRegP: SU(37) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(37) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 16 12 
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %129
  UpdateRegP: SU(36) %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(36) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 35 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %129
  UpdateRegP: SU(35) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %130
  UpdateRegP: SU(35) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %110
  UpdateRegP: SU(14) %113:gr64_nosp = LEA64r %110:gr64_nosp, 1, %110:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(28) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
              to GR16 2
  UpdateRegP: SU(33) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
              to GR16 2
  UpdateRegP: SU(35) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(35) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 34 33 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %127
  UpdateRegP: SU(32) %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(34) %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
              to 
  LiveReg: %122
  UpdateRegP: SU(27) %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(34) %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(34) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 33 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %129
  UpdateRegP: SU(33) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %128
  UpdateRegP: SU(33) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(33) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 32 28 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %118
  UpdateRegP: SU(23) %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(32) %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(32) 17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 31 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %114
  UpdateRegP: SU(20) %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(31) %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
              to 
  LiveReg: %126
  UpdateRegP: SU(31) %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(31) 18c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 30 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %126
  UpdateRegP: SU(30) %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @19c
  BotQ.A BotLatency SU(30) 19c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 29 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %126:gr64_nosp = DEC64r %126:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %126
  UpdateRegP: SU(3) %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %116:gr64_nosp = COPY %126:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(29) %126:gr64_nosp = DEC64r %126:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @20c
  BotQ.A BotLatency SU(29) 20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
Bottom Pressure:
FR32=2
FR32X=2
GR16=24
  GR16: 24 <= 26(+ 8 livethru)
  LiveReg: %129
  UpdateRegP: SU(28) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %123
  UpdateRegP: SU(28) %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
              to FR32 -1    FR32X -1
  Ready @20c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 27 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=24
  LiveReg: %117
  UpdateRegP: SU(23) %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(27) %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(27) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 26 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=24
  LiveReg: %122
  UpdateRegP: SU(26) %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  BotQ.A BotLatency SU(26) 22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %122:gr64_nosp = DEC64r %122:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=24
  LiveReg: %122
  UpdateRegP: SU(10) %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %118:gr64_nosp = COPY %122:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(25) %122:gr64_nosp = DEC64r %122:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @23c
  BotQ.A BotLatency SU(25) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
Bottom Pressure:
FR32=1
FR32X=1
GR16=26
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %119
  UpdateRegP: SU(24) %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
              to FR32 -1    FR32X -1
  Ready @24c
  BotQ.A BotLatency SU(24) 24c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=24
  GR16: 26 <= 26(+ 8 livethru)
  Ready @25c
  BotQ.A BotLatency SU(23) 25c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 22 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=24
  LiveReg: %118
  UpdateRegP: SU(22) %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(22) 26c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %118:gr64_nosp = COPY %122:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  GR16: 26 <= 26(+ 8 livethru)
  Ready @26c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %116
  UpdateRegP: SU(20) %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @26c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %116
  UpdateRegP: SU(19) %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(19) 27c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %116:gr64_nosp = COPY %126:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  GR16: 26 <= 26(+ 8 livethru)
  Ready @27c
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %114:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  GR16: 26 <= 26(+ 8 livethru)
  Ready @30c
  BotQ.A BotLatency SU(17) 30c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %113
  UpdateRegP: SU(16) %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
              to 
  LiveReg: %112
  UpdateRegP: SU(16) %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %112:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  GR16: 26 <= 26(+ 8 livethru)
  Ready @12c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %113:gr64_nosp = LEA64r %110:gr64_nosp, 1, %110:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  GR16: 26 <= 26(+ 8 livethru)
  Ready @9c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %110:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  GR16: 26 <= 26(+ 8 livethru)
  Ready @28c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %102
  UpdateRegP: SU(12) %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
              to 
  LiveReg: %108
  UpdateRegP: SU(12) %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %108
  UpdateRegP: SU(11) %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %106
  UpdateRegP: SU(10) %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @23c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %106:gr64 = NOT64r %106:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %106
  UpdateRegP: SU(9) %106:gr64 = NOT64r %106:gr64(tied-def 0)
              to GR16 -2
  Ready @24c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %106:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  GR16: 26 <= 26(+ 8 livethru)
  Ready @28c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %122:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  GR16: 26 <= 26(+ 8 livethru)
  Ready @30c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %102
  UpdateRegP: SU(6) %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %102
  UpdateRegP: SU(5) %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %102
  UpdateRegP: SU(4) %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %98
  UpdateRegP: SU(3) %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @20c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %98:gr64 = NOT64r %98:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %98
  UpdateRegP: SU(2) %98:gr64 = NOT64r %98:gr64(tied-def 0)
              to GR16 -2
  Ready @21c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %98:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  GR16: 26 <= 26(+ 8 livethru)
  Ready @25c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %126:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  GR16: 26 <= 26(+ 8 livethru)
  Ready @31c
  BotQ.A BotLatency SU(0) 31c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %126:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %98:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
SU(2):   %98:gr64 = NOT64r %98:gr64(tied-def 0)
SU(3):   %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
SU(4):   %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %122:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %106:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
SU(9):   %106:gr64 = NOT64r %106:gr64(tied-def 0)
SU(10):   %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
SU(11):   %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
SU(13):   %110:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %113:gr64_nosp = LEA64r %110:gr64_nosp, 1, %110:gr64_nosp, 0, $noreg
SU(15):   %112:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
SU(16):   %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
SU(17):   %114:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(18):   %116:gr64_nosp = COPY %126:gr64_nosp
SU(19):   %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(20):   %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
SU(21):   %118:gr64_nosp = COPY %122:gr64_nosp
SU(22):   %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
SU(24):   %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
SU(25):   %122:gr64_nosp = DEC64r %122:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(26):   %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(27):   %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
SU(28):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
SU(29):   %126:gr64_nosp = DEC64r %126:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(30):   %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(31):   %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
SU(32):   %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
SU(33):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
SU(34):   %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
SU(35):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
SU(36):   %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
SU(37):   %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
SU(38):   MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
SU(39):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.73 for.cond811
  From: %52:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
    To: JCC_1 %bb.75, 15, implicit $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %52:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%52
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %52:gr32 = DEC32r %52:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%52
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%52
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %52:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%52
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.75, 15, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %52:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %52:gr32 = DEC32r %52:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %52:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %52:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(1):   %52:gr32 = DEC32r %52:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %52:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.74 for.body814
  From: %86:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.73
 RegionInstrs: 44
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=26
Live In: %568 %354 %1 %3 %338 
Live Out: %568 %354 %1 %3 %338 
Live Thru: FR32=1
FR32X=1
GR16=8
  LiveReg: %568
  UpdateRegP: SU(40) %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
              to 
  LiveReg: %354
  UpdateRegP: SU(19) %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(32) %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(22) %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  UpdateRegP: SU(26) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %3
  UpdateRegP: SU(11) %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %338
  UpdateRegP: SU(4) %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
FR32=1
FR32X=1
GR16=8
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
Excess PSets: 
SU(0):   %86:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 47
  Successors:
    SU(31): Data Latency=4 Reg=%86
    SU(18): Data Latency=4 Reg=%86
    SU(3): Data Latency=4 Reg=%86
    SU(31): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %56:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 33
  Successors:
    SU(2): Data Latency=4 Reg=%56
    SU(2): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %56:gr64 = NOT64r %56:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 29
  Predecessors:
    SU(1): Data Latency=4 Reg=%56
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%56
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 28
  Predecessors:
    SU(2): Data Latency=1 Reg=%56
    SU(0): Data Latency=4 Reg=%86
  Successors:
    SU(4): Data Latency=1 Reg=%60
    SU(4): Out  Latency=0
    SU(31): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(3): Data Latency=1 Reg=%60
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%60
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %60:gr64 = SHL64ri %60:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(4): Data Latency=1 Reg=%60
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%60
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %60:gr64 = ADD64rm %60:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%60
    SU(5): Out  Latency=0
  Successors:
    SU(12): Data Latency=4 Reg=%60
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %80:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 46
  Successors:
    SU(25): Data Latency=4 Reg=%80
    SU(21): Data Latency=4 Reg=%80
    SU(10): Data Latency=4 Reg=%80
    SU(25): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %64:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
    SU(9): Data Latency=4 Reg=%64
    SU(9): Out  Latency=0
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %64:gr64 = NOT64r %64:gr64(tied-def 0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 40
  Predecessors:
    SU(8): Data Latency=4 Reg=%64
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%64
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 39
  Predecessors:
    SU(9): Data Latency=1 Reg=%64
    SU(7): Data Latency=4 Reg=%80
  Successors:
    SU(11): Data Latency=1 Reg=%66
    SU(11): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(10): Data Latency=1 Reg=%66
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%66
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%60
    SU(11): Data Latency=1 Reg=%66
  Successors:
    SU(42): Data Latency=1 Reg=%67
    SU(41): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   %68:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 44
  Successors:
    SU(39): Data Latency=4 Reg=%68
    SU(38): Data Latency=4 Reg=%68
    SU(37): Data Latency=4 Reg=%68
    SU(35): Data Latency=4 Reg=%68
    SU(30): Data Latency=4 Reg=%68
    SU(29): Data Latency=4 Reg=%68
    SU(28): Data Latency=4 Reg=%68
    SU(24): Data Latency=4 Reg=%68
    SU(14): Data Latency=4 Reg=%68
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %71:gr64_nosp = LEA64r %68:gr64_nosp, 1, %68:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(16): Data Latency=1 Reg=%71
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %70:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(16): Data Latency=4 Reg=%70
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(16):   %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(14): Data Latency=1 Reg=%71
    SU(15): Data Latency=4 Reg=%70
    SU(14): Out  Latency=0
  Successors:
    SU(42): Data Latency=1 Reg=%71
    SU(41): Data Latency=1 Reg=%71
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %72:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 46
  Successors:
    SU(33): Data Latency=4 Reg=%72
    SU(20): Data Latency=4 Reg=%72
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %74:gr64_nosp = COPY %86:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 43
  Predecessors:
    SU(0): Data Latency=4 Reg=%86
  Successors:
    SU(19): Data Latency=0 Reg=%74
    SU(19): Out  Latency=0
    SU(31): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 43
  Predecessors:
    SU(18): Data Latency=0 Reg=%74
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%74
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 42
  Predecessors:
    SU(19): Data Latency=1 Reg=%74
    SU(17): Data Latency=4 Reg=%72
  Successors:
    SU(27): Data Latency=1 Reg=%75
    SU(23): Data Latency=1 Reg=%75
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   %76:gr64_nosp = COPY %80:gr64_nosp
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 42
  Predecessors:
    SU(7): Data Latency=4 Reg=%80
  Successors:
    SU(22): Data Latency=0 Reg=%76
    SU(22): Out  Latency=0
    SU(25): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 42
  Predecessors:
    SU(21): Data Latency=0 Reg=%76
    SU(21): Out  Latency=0
  Successors:
    SU(34): Data Latency=1 Reg=%76
    SU(23): Data Latency=1 Reg=%76
  Pressure Diff      : 
  Single Issue       : false;
SU(23):   %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 41
  Predecessors:
    SU(20): Data Latency=1 Reg=%75
    SU(22): Data Latency=1 Reg=%76
  Successors:
    SU(29): Data Latency=1 Reg=%77
    SU(24): Data Latency=1 Reg=%77
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 40
  Predecessors:
    SU(23): Data Latency=1 Reg=%77
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(28): Data Latency=4 Reg=%83
    SU(28): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(25):   %80:gr64_nosp = DEC64r %80:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 39
  Predecessors:
    SU(21): Anti Latency=0
    SU(10): Anti Latency=0
    SU(7): Data Latency=4 Reg=%80
    SU(7): Out  Latency=0
  Successors:
    SU(26): Data Latency=1 Reg=%80
    SU(26): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 38
  Predecessors:
    SU(25): Data Latency=1 Reg=%80
    SU(25): Out  Latency=0
  Successors:
    SU(36): Data Latency=1 Reg=%80
    SU(27): Data Latency=1 Reg=%80
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 37
  Predecessors:
    SU(26): Data Latency=1 Reg=%80
    SU(20): Data Latency=1 Reg=%75
  Successors:
    SU(30): Data Latency=1 Reg=%81
    SU(28): Data Latency=1 Reg=%81
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(28):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 36
  Predecessors:
    SU(27): Data Latency=1 Reg=%81
    SU(24): Data Latency=4 Reg=%83
    SU(24): Out  Latency=0
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(29): Data Latency=4 Reg=%83
    SU(29): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(29):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 32
  Predecessors:
    SU(28): Data Latency=4 Reg=%83
    SU(28): Out  Latency=0
    SU(23): Data Latency=1 Reg=%77
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(30): Data Latency=4 Reg=%83
    SU(30): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(30):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 28
  Predecessors:
    SU(29): Data Latency=4 Reg=%83
    SU(29): Out  Latency=0
    SU(27): Data Latency=1 Reg=%81
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(35): Data Latency=4 Reg=%83
    SU(35): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(31):   %86:gr64_nosp = DEC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 28
  Predecessors:
    SU(18): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%86
    SU(0): Out  Latency=0
  Successors:
    SU(32): Data Latency=1 Reg=%86
    SU(32): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 27
  Predecessors:
    SU(31): Data Latency=1 Reg=%86
    SU(31): Out  Latency=0
  Successors:
    SU(33): Data Latency=1 Reg=%86
  Pressure Diff      : 
  Single Issue       : false;
SU(33):   %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 26
  Predecessors:
    SU(32): Data Latency=1 Reg=%86
    SU(17): Data Latency=4 Reg=%72
  Successors:
    SU(36): Data Latency=1 Reg=%87
    SU(34): Data Latency=1 Reg=%87
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 25
  Predecessors:
    SU(33): Data Latency=1 Reg=%87
    SU(22): Data Latency=1 Reg=%76
  Successors:
    SU(38): Data Latency=1 Reg=%88
    SU(35): Data Latency=1 Reg=%88
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(35):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 24
  Predecessors:
    SU(30): Data Latency=4 Reg=%83
    SU(34): Data Latency=1 Reg=%88
    SU(30): Out  Latency=0
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(37): Data Latency=4 Reg=%83
    SU(37): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(36):   %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 21
  Predecessors:
    SU(33): Data Latency=1 Reg=%87
    SU(26): Data Latency=1 Reg=%80
  Successors:
    SU(39): Data Latency=1 Reg=%90
    SU(37): Data Latency=1 Reg=%90
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(37):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 27
  Height             : 20
  Predecessors:
    SU(35): Data Latency=4 Reg=%83
    SU(36): Data Latency=1 Reg=%90
    SU(35): Out  Latency=0
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(38): Data Latency=4 Reg=%83
    SU(38): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(38):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 16
  Predecessors:
    SU(37): Data Latency=4 Reg=%83
    SU(37): Out  Latency=0
    SU(34): Data Latency=1 Reg=%88
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(39): Data Latency=4 Reg=%83
    SU(39): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(39):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 12
  Predecessors:
    SU(38): Data Latency=4 Reg=%83
    SU(38): Out  Latency=0
    SU(36): Data Latency=1 Reg=%90
    SU(13): Data Latency=4 Reg=%68
  Successors:
    SU(40): Data Latency=4 Reg=%83
    SU(40): Out  Latency=0
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(40):   %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 8
  Predecessors:
    SU(39): Data Latency=4 Reg=%83
    SU(39): Out  Latency=0
  Successors:
    SU(41): Data Latency=1 Reg=%83
    SU(41): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(41):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 7
  Predecessors:
    SU(40): Data Latency=1 Reg=%83
    SU(40): Out  Latency=0
    SU(16): Data Latency=1 Reg=%71
    SU(12): Data Latency=1 Reg=%67
  Successors:
    SU(42): Data Latency=4 Reg=%83
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(42):   MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
  # preds left       : 20
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 3
  Predecessors:
    SU(41): Data Latency=4 Reg=%83
    SU(41): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=1 Reg=%71
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%67
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(43): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(43):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 11
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 44
  Height             : 3
  Predecessors:
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.73
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 47
  Height             : 0
  Predecessors:
    SU(43): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 47
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 43 
Scheduling SU(43) INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @3c
  BotQ.A TopLatency SU(43) 44c
  BotQ.A BotLatency SU(43) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 
Scheduling SU(42) MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %67
  UpdateRegP: SU(41) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
              to GR16 2
  UpdateRegP: SU(42) MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %71
  UpdateRegP: SU(41) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
              to 
  UpdateRegP: SU(42) MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
              to FR32 1    FR32X 1
  LiveReg: %83
  UpdateRegP: SU(42) MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 
Scheduling SU(41) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %83
  UpdateRegP: SU(41) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(41) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 16 12 
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %83
  UpdateRegP: SU(40) %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(40) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 39 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
Bottom Pressure:
FR32=2
FR32X=2
GR16=16
  LiveReg: %83
  UpdateRegP: SU(39) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %90
  UpdateRegP: SU(37) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
              to GR16 2
  UpdateRegP: SU(39) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %68
  UpdateRegP: SU(14) %71:gr64_nosp = LEA64r %68:gr64_nosp, 1, %68:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(24) %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(28) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
              to GR16 2
  UpdateRegP: SU(29) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
              to GR16 2
  UpdateRegP: SU(30) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
              to GR16 2
  UpdateRegP: SU(35) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
              to GR16 2
  UpdateRegP: SU(37) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
              to 
  UpdateRegP: SU(38) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
              to GR16 2
  UpdateRegP: SU(39) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(39) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 38 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %83
  UpdateRegP: SU(38) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %88
  UpdateRegP: SU(35) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
              to 
  UpdateRegP: SU(38) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(38) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 37 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
Bottom Pressure:
FR32=2
FR32X=2
GR16=18
  LiveReg: %83
  UpdateRegP: SU(37) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
              to FR32 -1    FR32X -1
  Ready @20c
  BotQ.A BotLatency SU(37) 20c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 36 35 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %87
  UpdateRegP: SU(34) %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(36) %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
              to 
  LiveReg: %80
  UpdateRegP: SU(27) %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(36) %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(36) 21c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 35 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %83
  UpdateRegP: SU(35) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
              to FR32 -1    FR32X -1
  Ready @24c
  BotQ.A BotLatency SU(35) 24c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 34 30 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=20
  LiveReg: %76
  UpdateRegP: SU(23) %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(34) %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @25c
  BotQ.A BotLatency SU(34) 25c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 30 33 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %72
  UpdateRegP: SU(20) %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(33) %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
              to 
  LiveReg: %86
  UpdateRegP: SU(33) %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @26c
  BotQ.A BotLatency SU(33) 26c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 30 32 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %86
  UpdateRegP: SU(32) %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(32) 27c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 30 31 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %86:gr64_nosp = DEC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=22
  LiveReg: %86
  UpdateRegP: SU(3) %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(18) %74:gr64_nosp = COPY %86:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(31) %86:gr64_nosp = DEC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @28c
  BotQ.A BotLatency SU(31) 28c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 30 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
Bottom Pressure:
FR32=2
FR32X=2
GR16=24
  GR16: 24 <= 26(+ 8 livethru)
  LiveReg: %83
  UpdateRegP: SU(30) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %81
  UpdateRegP: SU(28) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
              to 
  UpdateRegP: SU(30) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
              to FR32 -1    FR32X -1
  Ready @28c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 29 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
Bottom Pressure:
FR32=2
FR32X=2
GR16=26
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %83
  UpdateRegP: SU(29) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %77
  UpdateRegP: SU(24) %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(29) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
              to FR32 -1    FR32X -1
  Ready @32c
  BotQ.A BotLatency SU(29) 32c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 28 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(28) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(28) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
Bottom Pressure:
FR32=2
FR32X=2
GR16=26
  LiveReg: %83
  UpdateRegP: SU(28) %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
              to FR32 -1    FR32X -1
  Ready @36c
  BotQ.A BotLatency SU(28) 36c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 27 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(27) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(27) %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=2
FR32X=2
GR16=26
  LiveReg: %75
  UpdateRegP: SU(23) %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(27) %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @37c
  BotQ.A BotLatency SU(27) 37c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 26 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=26
  LiveReg: %80
  UpdateRegP: SU(26) %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @38c
  BotQ.A BotLatency SU(26) 38c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 38c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 25 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %80:gr64_nosp = DEC64r %80:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=26
  LiveReg: %80
  UpdateRegP: SU(10) %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %76:gr64_nosp = COPY %80:gr64_nosp
              to GR16 -2
  UpdateRegP: SU(25) %80:gr64_nosp = DEC64r %80:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @39c
  BotQ.A BotLatency SU(25) 39c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 39c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 24 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(24) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(24) %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
Bottom Pressure:
FR32=1
FR32X=1
GR16=26
  Ready @40c
  BotQ.A BotLatency SU(24) 40c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 40c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 23 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(23) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(23) %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=24
  GR16: 26 <= 26(+ 8 livethru)
  Ready @41c
  BotQ.A BotLatency SU(23) 41c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 22 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=24
  LiveReg: %76
  UpdateRegP: SU(22) %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @42c
  BotQ.A BotLatency SU(22) 42c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 21 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %76:gr64_nosp = COPY %80:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  GR16: 26 <= 26(+ 8 livethru)
  Ready @42c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 20 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %74
  UpdateRegP: SU(20) %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @42c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 19 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=22
  LiveReg: %74
  UpdateRegP: SU(19) %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @43c
  BotQ.A BotLatency SU(19) 43c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 18 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %74:gr64_nosp = COPY %86:gr64_nosp
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  GR16: 26 <= 26(+ 8 livethru)
  Ready @43c
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 43c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 17 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %72:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  GR16: 26 <= 26(+ 8 livethru)
  Ready @46c
  BotQ.A BotLatency SU(17) 46c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 16 
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=20
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %71
  UpdateRegP: SU(16) %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
              to 
  LiveReg: %70
  UpdateRegP: SU(16) %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 14 
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %70:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=18
  GR16: 26 <= 26(+ 8 livethru)
  Ready @12c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %71:gr64_nosp = LEA64r %68:gr64_nosp, 1, %68:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  GR16: 26 <= 26(+ 8 livethru)
  Ready @9c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %68:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  GR16: 26 <= 26(+ 8 livethru)
  Ready @44c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  GR16: 26 <= 26(+ 8 livethru)
  LiveReg: %60
  UpdateRegP: SU(12) %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
              to 
  LiveReg: %66
  UpdateRegP: SU(12) %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %66
  UpdateRegP: SU(11) %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %64
  UpdateRegP: SU(10) %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @39c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 7 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %64:gr64 = NOT64r %64:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=16
  LiveReg: %64
  UpdateRegP: SU(9) %64:gr64 = NOT64r %64:gr64(tied-def 0)
              to GR16 -2
  Ready @40c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %64:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=14
  GR16: 26 <= 26(+ 8 livethru)
  Ready @44c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %80:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  GR16: 26 <= 26(+ 8 livethru)
  Ready @46c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %60:gr64 = ADD64rm %60:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %60
  UpdateRegP: SU(6) %60:gr64 = ADD64rm %60:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %60:gr64 = SHL64ri %60:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %60
  UpdateRegP: SU(5) %60:gr64 = SHL64ri %60:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %60
  UpdateRegP: SU(4) %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %56
  UpdateRegP: SU(3) %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @28c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %56:gr64 = NOT64r %56:gr64(tied-def 0)
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %56
  UpdateRegP: SU(2) %56:gr64 = NOT64r %56:gr64(tied-def 0)
              to GR16 -2
  Ready @29c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %56:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  GR16: 26 <= 26(+ 8 livethru)
  Ready @33c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  GR16: 26 <= 26(+ 8 livethru)
  Ready @47c
  BotQ.A BotLatency SU(0) 47c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.74 ***
SU(0):   %86:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %56:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
SU(2):   %56:gr64 = NOT64r %56:gr64(tied-def 0)
SU(3):   %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
SU(4):   %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
SU(5):   %60:gr64 = SHL64ri %60:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(6):   %60:gr64 = ADD64rm %60:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(7):   %80:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(8):   %64:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
SU(9):   %64:gr64 = NOT64r %64:gr64(tied-def 0)
SU(10):   %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
SU(11):   %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
SU(12):   %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
SU(13):   %68:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(14):   %71:gr64_nosp = LEA64r %68:gr64_nosp, 1, %68:gr64_nosp, 0, $noreg
SU(15):   %70:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
SU(16):   %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
SU(17):   %72:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(18):   %74:gr64_nosp = COPY %86:gr64_nosp
SU(19):   %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(20):   %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
SU(21):   %76:gr64_nosp = COPY %80:gr64_nosp
SU(22):   %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(23):   %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
SU(24):   %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
SU(25):   %80:gr64_nosp = DEC64r %80:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(26):   %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(27):   %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
SU(28):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
SU(29):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
SU(30):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
SU(31):   %86:gr64_nosp = DEC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(32):   %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
SU(33):   %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
SU(34):   %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
SU(35):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
SU(36):   %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
SU(37):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
SU(38):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
SU(39):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
SU(40):   %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
SU(41):   %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
SU(42):   MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
SU(43):   INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
interp:%bb.80 if.then928
  From: $rdi = COPY %374:gr64
    To: CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %374:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %375:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %376:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %377:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @.str.57
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = COPY %378:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %378:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %377:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %376:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %375:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %374:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @.str.57
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.80 ***
SU(4):   $r8 = MOV32ri64 @.str.57
SU(0):   $rdi = COPY %374:gr64
SU(1):   $esi = COPY %375:gr32
SU(2):   $edx = COPY %376:gr32
SU(3):   $ecx = COPY %377:gr32
SU(5):   $r9d = COPY %378:gr32

********** MI Scheduling **********
interp:%bb.80 if.then928
  From: %374:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %374:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %375:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %376:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %377:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %378:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %378:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %377:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %376:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %375:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %374:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.80 ***
SU(0):   %374:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %375:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %376:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
SU(3):   %377:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
SU(4):   %378:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** MI Scheduling **********
interp:%bb.80 if.then928
  From: $rdi = COPY %367:gr64
    To: CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %367:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %368:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %369:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %370:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @.str.56
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(5):   $r9d = COPY %372:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %372:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %370:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %369:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %368:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %367:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) $r8 = MOV32ri64 @.str.56
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.80 ***
SU(4):   $r8 = MOV32ri64 @.str.56
SU(0):   $rdi = COPY %367:gr64
SU(1):   $esi = COPY %368:gr32
SU(2):   $edx = COPY %369:gr32
SU(3):   $ecx = COPY %370:gr32
SU(5):   $r9d = COPY %372:gr32

********** MI Scheduling **********
interp:%bb.80 if.then928
  From: %367:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %367:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %368:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %369:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %370:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %372:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=4 Reg=%372
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %372:gr32 = DEC32r %372:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%372
    SU(4): Out  Latency=0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %372:gr32 = DEC32r %372:gr32(tied-def 0), implicit-def dead $eflags
  Ready @0c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 4 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %372:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %370:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %369:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %368:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %367:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.80 ***
SU(0):   %367:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(1):   %368:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(2):   %369:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(3):   %370:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
SU(4):   %372:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
SU(5):   %372:gr32 = DEC32r %372:gr32(tied-def 0), implicit-def dead $eflags

********** MI Scheduling **********
interp:%bb.81 if.end930
  From: %380:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 20, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 5)`)
    To: JCC_1 %bb.83, 12, implicit $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %380:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 20, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 5)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%380
  Single Issue       : false;
SU(1):   CMP32rm %380:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%380
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.83, 12, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %380:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %380:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 20, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 5)`)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.81 ***
SU(0):   %380:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 20, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 5)`)
SU(1):   CMP32rm %380:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)

********** MI Scheduling **********
interp:%bb.82 if.then932
  From: $rdi = COPY %386:gr64
    To: CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %386:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %387:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %388:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %389:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %389:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %388:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %387:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %386:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.82 ***
SU(0):   $rdi = COPY %386:gr64
SU(1):   $esi = COPY %387:gr32
SU(2):   $edx = COPY %388:gr32
SU(3):   $ecx = COPY %389:gr32

********** MI Scheduling **********
interp:%bb.82 if.then932
  From: %386:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %386:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %387:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %388:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %389:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %389:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %388:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %387:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %386:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.82 ***
SU(0):   %386:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %387:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(2):   %388:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
SU(3):   %389:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)

********** MI Scheduling **********
interp:%bb.82 if.then932
  From: $rdi = COPY %382:gr64
    To: CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %382:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %383:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %384:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $ecx = COPY %385:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %385:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %384:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %383:gr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %382:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.82 ***
SU(0):   $rdi = COPY %382:gr64
SU(1):   $esi = COPY %383:gr32
SU(2):   $edx = COPY %384:gr32
SU(3):   $ecx = COPY %385:gr32

********** MI Scheduling **********
interp:%bb.82 if.then932
  From: %382:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %382:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %383:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %384:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %385:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %385:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %384:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %383:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %382:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.82 ***
SU(0):   %382:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
SU(1):   %383:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
SU(2):   %384:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
SU(3):   %385:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)

********** INTERVALS **********
CH [0B,48r:0)[16296r,16312r:4)[16536r,16552r:3)[16800r,16816r:2)[16976r,16992r:1)  0@0B-phi 1@16976r 2@16800r 3@16536r 4@16296r
CL [0B,48r:0)[16296r,16312r:4)[16536r,16552r:3)[16800r,16816r:2)[16976r,16992r:1)  0@0B-phi 1@16976r 2@16800r 3@16536r 4@16296r
DH [0B,64r:0)[16288r,16312r:4)[16528r,16552r:3)[16784r,16816r:2)[16960r,16992r:1)  0@0B-phi 1@16960r 2@16784r 3@16528r 4@16288r
DIL [0B,96r:0)[400r,416r:2)[15936r,15952r:1)[16276r,16312r:6)[16516r,16552r:5)[16752r,16816r:4)[16928r,16992r:3)  0@0B-phi 1@15936r 2@400r 3@16928r 4@16752r 5@16516r 6@16276r
DIH [0B,96r:0)[400r,416r:2)[15936r,15952r:1)[16276r,16312r:6)[16516r,16552r:5)[16752r,16816r:4)[16928r,16992r:3)  0@0B-phi 1@15936r 2@400r 3@16928r 4@16752r 5@16516r 6@16276r
DL [0B,64r:0)[16288r,16312r:4)[16528r,16552r:3)[16784r,16816r:2)[16960r,16992r:1)  0@0B-phi 1@16960r 2@16784r 3@16528r 4@16288r
HCX [0B,48r:0)[16296r,16312r:4)[16536r,16552r:3)[16800r,16816r:2)[16976r,16992r:1)  0@0B-phi 1@16976r 2@16800r 3@16536r 4@16296r
HDI [0B,96r:0)[400r,416r:2)[15936r,15952r:1)[16276r,16312r:6)[16516r,16552r:5)[16752r,16816r:4)[16928r,16992r:3)  0@0B-phi 1@15936r 2@400r 3@16928r 4@16752r 5@16516r 6@16276r
HDX [0B,64r:0)[16288r,16312r:4)[16528r,16552r:3)[16784r,16816r:2)[16960r,16992r:1)  0@0B-phi 1@16960r 2@16784r 3@16528r 4@16288r
EFLAGS [304r,320r:237)[368r,368d:236)[432r,432d:235)[528r,544r:25)[592r,608r:24)[656r,672r:23)[752r,752d:32)[784r,784d:56)[896r,896d:116)[912r,928r:22)[1040r,1040d:101)[1056r,1072r:21)[1168r,1184r:99)[1280r,1280d:31)[1360r,1360d:30)[1440r,1440d:29)[1536r,1536d:28)[1568r,1568d:27)[1792r,1792d:26)[1904r,1904d:98)[1920r,1936r:20)[2016r,2016d:55)[2048r,2048d:54)[2080r,2080d:53)[2128r,2128d:52)[2160r,2160d:51)[2192r,2192d:50)[2240r,2240d:49)[2288r,2288d:48)[2320r,2320d:47)[2352r,2352d:46)[2384r,2384d:45)[2496r,2496d:44)[2528r,2528d:43)[2560r,2560d:42)[2608r,2608d:41)[2640r,2640d:40)[2672r,2672d:39)[2752r,2752d:37)[2784r,2784d:36)[2816r,2816d:35)[2848r,2848d:34)[2920r,2920d:38)[3008r,3008d:33)[3120r,3120d:97)[3136r,3152r:19)[3232r,3232d:67)[3264r,3264d:66)[3296r,3296d:65)[3360r,3360d:64)[3472r,3472d:63)[3568r,3568d:62)[3600r,3600d:61)[3632r,3632d:60)[3696r,3696d:59)[3816r,3816d:58)[3904r,3904d:57)[4016r,4016d:96)[4032r,4048r:18)[4144r,4144d:82)[4176r,4176d:81)[4208r,4208d:80)[4256r,4256d:79)[4288r,4288d:78)[4320r,4320d:77)[4416r,4416d:76)[4528r,4528d:75)[4560r,4560d:74)[4592r,4592d:73)[4640r,4640d:72)[4672r,4672d:71)[4704r,4704d:70)[4808r,4808d:69)[4896r,4896d:68)[5008r,5008d:95)[5024r,5040r:17)[5136r,5136d:93)[5168r,5168d:92)[5200r,5200d:91)[5264r,5264d:90)[5376r,5376d:89)[5488r,5488d:88)[5520r,5520d:87)[5552r,5552d:86)[5616r,5616d:85)[5736r,5736d:84)[5824r,5824d:83)[5872r,5872d:94)[5920r,5920d:100)[5968r,5984r:16)[6144r,6160r:15)[6320r,6336r:14)[6544r,6544d:130)[6576r,6576d:123)[6672r,6672d:234)[6688r,6704r:13)[6832r,6832d:177)[6848r,6864r:12)[6992r,6992d:145)[7008r,7024r:11)[7168r,7168d:129)[7200r,7200d:128)[7232r,7232d:127)[7344r,7344d:126)[7440r,7440d:125)[7488r,7488d:124)[7520r,7520d:122)[7552r,7552d:121)[7584r,7584d:120)[7616r,7616d:119)[7648r,7648d:118)[7728r,7728d:117)[7840r,7840d:144)[7856r,7872r:10)[8016r,8016d:142)[8048r,8048d:141)[8080r,8080d:140)[8192r,8192d:139)[8288r,8288d:138)[8320r,8320d:137)[8352r,8352d:136)[8384r,8384d:135)[8416r,8416d:134)[8448r,8448d:133)[8480r,8480d:132)[8640r,8640d:131)[8688r,8688d:143)[8800r,8800d:176)[8816r,8832r:9)[8960r,8960d:174)[8976r,8992r:8)[9136r,9136d:158)[9168r,9168d:157)[9200r,9200d:156)[9312r,9312d:155)[9408r,9408d:154)[9440r,9440d:153)[9472r,9472d:152)[9504r,9504d:151)[9536r,9536d:150)[9568r,9568d:149)[9632r,9632d:148)[9664r,9664d:147)[9808r,9808d:146)[9920r,9920d:173)[9936r,9952r:7)[10096r,10096d:171)[10128r,10128d:170)[10160r,10160d:169)[10272r,10272d:168)[10368r,10368d:167)[10400r,10400d:166)[10432r,10432d:165)[10464r,10464d:164)[10496r,10496d:163)[10528r,10528d:162)[10592r,10592d:161)[10624r,10624d:160)[10832r,10832d:159)[10880r,10880d:172)[10928r,10928d:175)[11056r,11056d:233)[11072r,11088r:6)[11216r,11216d:232)[11232r,11248r:5)[11376r,11376d:202)[11392r,11408r:4)[11552r,11552d:188)[11584r,11584d:187)[11616r,11616d:186)[11728r,11728d:185)[11824r,11824d:184)[11872r,11872d:183)[11920r,11920d:182)[11952r,11952d:181)[12016r,12016d:180)[12048r,12048d:179)[12208r,12208d:178)[12320r,12320d:201)[12336r,12352r:3)[12496r,12496d:199)[12528r,12528d:198)[12560r,12560d:197)[12672r,12672d:196)[12768r,12768d:195)[12816r,12816d:194)[12864r,12864d:193)[12896r,12896d:192)[12992r,12992d:191)[13024r,13024d:190)[13216r,13216d:189)[13264r,13264d:200)[13376r,13376d:231)[13392r,13408r:2)[13536r,13536d:229)[13552r,13568r:1)[13712r,13712d:214)[13744r,13744d:213)[13776r,13776d:212)[13888r,13888d:211)[13984r,13984d:210)[14032r,14032d:209)[14080r,14080d:208)[14144r,14144d:207)[14176r,14176d:206)[14256r,14256d:205)[14288r,14288d:204)[14496r,14496d:203)[14608r,14608d:228)[14624r,14640r:0)[14784r,14784d:226)[14816r,14816d:225)[14848r,14848d:224)[14960r,14960d:223)[15056r,15056d:222)[15104r,15104d:221)[15152r,15152d:220)[15216r,15216d:219)[15248r,15248d:218)[15392r,15392d:217)[15424r,15424d:216)[15696r,15696d:215)[15744r,15744d:227)[15792r,15792d:230)[15840r,15856r:115)[15904r,15904d:114)[15968r,15968d:113)[16000r,16016r:112)[16160r,16160d:111)[16176r,16176d:110)[16320r,16320d:109)[16416r,16416d:108)[16560r,16560d:107)[16608r,16624r:106)[16736r,16736d:105)[16832r,16832d:104)[16912r,16912d:103)[17008r,17008d:102)  0@14624r 1@13552r 2@13392r 3@12336r 4@11392r 5@11232r 6@11072r 7@9936r 8@8976r 9@8816r 10@7856r 11@7008r 12@6848r 13@6688r 14@6320r 15@6144r 16@5968r 17@5024r 18@4032r 19@3136r 20@1920r 21@1056r 22@912r 23@656r 24@592r 25@528r 26@1792r 27@1568r 28@1536r 29@1440r 30@1360r 31@1280r 32@752r 33@3008r 34@2848r 35@2816r 36@2784r 37@2752r 38@2920r 39@2672r 40@2640r 41@2608r 42@2560r 43@2528r 44@2496r 45@2384r 46@2352r 47@2320r 48@2288r 49@2240r 50@2192r 51@2160r 52@2128r 53@2080r 54@2048r 55@2016r 56@784r 57@3904r 58@3816r 59@3696r 60@3632r 61@3600r 62@3568r 63@3472r 64@3360r 65@3296r 66@3264r 67@3232r 68@4896r 69@4808r 70@4704r 71@4672r 72@4640r 73@4592r 74@4560r 75@4528r 76@4416r 77@4320r 78@4288r 79@4256r 80@4208r 81@4176r 82@4144r 83@5824r 84@5736r 85@5616r 86@5552r 87@5520r 88@5488r 89@5376r 90@5264r 91@5200r 92@5168r 93@5136r 94@5872r 95@5008r 96@4016r 97@3120r 98@1904r 99@1168r 100@5920r 101@1040r 102@17008r 103@16912r 104@16832r 105@16736r 106@16608r 107@16560r 108@16416r 109@16320r 110@16176r 111@16160r 112@16000r 113@15968r 114@15904r 115@15840r 116@896r 117@7728r 118@7648r 119@7616r 120@7584r 121@7552r 122@7520r 123@6576r 124@7488r 125@7440r 126@7344r 127@7232r 128@7200r 129@7168r 130@6544r 131@8640r 132@8480r 133@8448r 134@8416r 135@8384r 136@8352r 137@8320r 138@8288r 139@8192r 140@8080r 141@8048r 142@8016r 143@8688r 144@7840r 145@6992r 146@9808r 147@9664r 148@9632r 149@9568r 150@9536r 151@9504r 152@9472r 153@9440r 154@9408r 155@9312r 156@9200r 157@9168r 158@9136r 159@10832r 160@10624r 161@10592r 162@10528r 163@10496r 164@10464r 165@10432r 166@10400r 167@10368r 168@10272r 169@10160r 170@10128r 171@10096r 172@10880r 173@9920r 174@8960r 175@10928r 176@8800r 177@6832r 178@12208r 179@12048r 180@12016r 181@11952r 182@11920r 183@11872r 184@11824r 185@11728r 186@11616r 187@11584r 188@11552r 189@13216r 190@13024r 191@12992r 192@12896r 193@12864r 194@12816r 195@12768r 196@12672r 197@12560r 198@12528r 199@12496r 200@13264r 201@12320r 202@11376r 203@14496r 204@14288r 205@14256r 206@14176r 207@14144r 208@14080r 209@14032r 210@13984r 211@13888r 212@13776r 213@13744r 214@13712r 215@15696r 216@15424r 217@15392r 218@15248r 219@15216r 220@15152r 221@15104r 222@15056r 223@14960r 224@14848r 225@14816r 226@14784r 227@15744r 228@14608r 229@13536r 230@15792r 231@13376r 232@11216r 233@11056r 234@6672r 235@432r 236@368r 237@304r
SIL [0B,80r:0)[16280r,16312r:4)[16520r,16552r:3)[16768r,16816r:2)[16944r,16992r:1)  0@0B-phi 1@16944r 2@16768r 3@16520r 4@16280r
SIH [0B,80r:0)[16280r,16312r:4)[16520r,16552r:3)[16768r,16816r:2)[16944r,16992r:1)  0@0B-phi 1@16944r 2@16768r 3@16520r 4@16280r
HSI [0B,80r:0)[16280r,16312r:4)[16520r,16552r:3)[16768r,16816r:2)[16944r,16992r:1)  0@0B-phi 1@16944r 2@16768r 3@16520r 4@16280r
R8B [0B,32r:0)[16272r,16312r:2)[16512r,16552r:1)  0@0B-phi 1@16512r 2@16272r
R8BH [0B,32r:0)[16272r,16312r:2)[16512r,16552r:1)  0@0B-phi 1@16512r 2@16272r
R8WH [0B,32r:0)[16272r,16312r:2)[16512r,16552r:1)  0@0B-phi 1@16512r 2@16272r
R9B [0B,16r:0)[16304r,16312r:2)[16544r,16552r:1)  0@0B-phi 1@16544r 2@16304r
R9BH [0B,16r:0)[16304r,16312r:2)[16544r,16552r:1)  0@0B-phi 1@16544r 2@16304r
R9WH [0B,16r:0)[16304r,16312r:2)[16544r,16552r:1)  0@0B-phi 1@16544r 2@16304r
%1 [224r,15824B:0)  0@224r weight:0.000000e+00
%3 [272r,15824B:0)  0@272r weight:0.000000e+00
%4 [96r,240r:0)  0@96r weight:0.000000e+00
%5 [80r,224r:0)  0@80r weight:0.000000e+00
%6 [64r,208r:0)  0@64r weight:0.000000e+00
%7 [48r,160r:0)  0@48r weight:0.000000e+00
%8 [32r,288r:0)  0@32r weight:0.000000e+00
%9 [16r,272r:0)  0@16r weight:0.000000e+00
%27 [6496r,6512r:0)  0@6496r weight:0.000000e+00
%30 [6640r,6672r:0)[6672r,6688r:1)  0@6640r 1@6672r weight:0.000000e+00
%34 [11024r,11056r:0)[11056r,11072r:1)  0@11024r 1@11056r weight:0.000000e+00
%36 [11136r,11152r:0)  0@11136r weight:0.000000e+00
%39 [11184r,11216r:0)[11216r,11232r:1)  0@11184r 1@11216r weight:0.000000e+00
%43 [13344r,13376r:0)[13376r,13392r:1)  0@13344r 1@13376r weight:0.000000e+00
%45 [13456r,13472r:0)  0@13456r weight:0.000000e+00
%48 [13504r,13536r:0)[13536r,13552r:1)  0@13504r 1@13536r weight:0.000000e+00
%52 [14576r,14608r:0)[14608r,14624r:1)  0@14576r 1@14608r weight:0.000000e+00
%56 [14704r,14736r:0)[14736r,14752r:1)  0@14704r 1@14736r weight:0.000000e+00
%60 [14752r,14784r:2)[14784r,14816r:0)[14816r,14848r:1)[14848r,14976r:3)  0@14784r 1@14816r 2@14752r 3@14848r weight:0.000000e+00
%64 [14880r,14912r:0)[14912r,14928r:1)  0@14880r 1@14912r weight:0.000000e+00
%66 [14928r,14960r:0)[14960r,14976r:1)  0@14928r 1@14960r weight:0.000000e+00
%67 [14976r,15680r:0)  0@14976r weight:0.000000e+00
%68 [14992r,15600r:0)  0@14992r weight:0.000000e+00
%70 [15024r,15056r:0)  0@15024r weight:0.000000e+00
%71 [15008r,15056r:0)[15056r,15680r:1)  0@15008r 1@15056r weight:0.000000e+00
%72 [15072r,15440r:0)  0@15072r weight:0.000000e+00
%74 [15088r,15104r:0)[15104r,15120r:1)  0@15088r 1@15104r weight:0.000000e+00
%75 [15120r,15264r:0)  0@15120r weight:0.000000e+00
%76 [15136r,15152r:0)[15152r,15456r:1)  0@15136r 1@15152r weight:0.000000e+00
%77 [15168r,15328r:0)  0@15168r weight:0.000000e+00
%80 [14864r,15216r:2)[15216r,15248r:0)[15248r,15504r:1)  0@15216r 1@15248r 2@14864r weight:0.000000e+00
%81 [15264r,15360r:0)  0@15264r weight:0.000000e+00
%83 [15184r,15296r:2)[15296r,15328r:0)[15328r,15360r:1)[15360r,15488r:3)[15488r,15536r:4)[15536r,15568r:5)[15568r,15600r:6)[15600r,15632r:7)[15632r,15664r:8)[15664r,15680r:9)  0@15296r 1@15328r 2@15184r 3@15360r 4@15488r 5@15536r 6@15568r 7@15600r 8@15632r 9@15664r weight:0.000000e+00
%86 [14688r,15392r:2)[15392r,15424r:0)[15424r,15440r:1)  0@15392r 1@15424r 2@14688r weight:0.000000e+00
%87 [15440r,15504r:0)  0@15440r weight:0.000000e+00
%88 [15456r,15568r:0)  0@15456r weight:0.000000e+00
%90 [15504r,15600r:0)  0@15504r weight:0.000000e+00
%98 [13632r,13664r:0)[13664r,13680r:1)  0@13632r 1@13664r weight:0.000000e+00
%102 [13680r,13712r:2)[13712r,13744r:0)[13744r,13776r:1)[13776r,13904r:3)  0@13712r 1@13744r 2@13680r 3@13776r weight:0.000000e+00
%106 [13808r,13840r:0)[13840r,13856r:1)  0@13808r 1@13840r weight:0.000000e+00
%108 [13856r,13888r:0)[13888r,13904r:1)  0@13856r 1@13888r weight:0.000000e+00
%109 [13904r,14480r:0)  0@13904r weight:0.000000e+00
%110 [13920r,14400r:0)  0@13920r weight:0.000000e+00
%112 [13952r,13984r:0)  0@13952r weight:0.000000e+00
%113 [13936r,13984r:0)[13984r,14480r:1)  0@13936r 1@13984r weight:0.000000e+00
%114 [14000r,14304r:0)  0@14000r weight:0.000000e+00
%116 [14016r,14032r:0)[14032r,14048r:1)  0@14016r 1@14032r weight:0.000000e+00
%117 [14048r,14192r:0)  0@14048r weight:0.000000e+00
%118 [14064r,14080r:0)[14080r,14320r:1)  0@14064r 1@14080r weight:0.000000e+00
%119 [14096r,14112r:0)  0@14096r weight:0.000000e+00
%122 [13792r,14144r:2)[14144r,14176r:0)[14176r,14368r:1)  0@14144r 1@14176r 2@13792r weight:0.000000e+00
%123 [14192r,14224r:0)  0@14192r weight:0.000000e+00
%126 [13616r,14256r:2)[14256r,14288r:0)[14288r,14304r:1)  0@14256r 1@14288r 2@13616r weight:0.000000e+00
%127 [14304r,14368r:0)  0@14304r weight:0.000000e+00
%128 [14320r,14352r:0)  0@14320r weight:0.000000e+00
%129 [14112r,14224r:2)[14224r,14352r:0)[14352r,14400r:1)[14400r,14432r:3)[14432r,14464r:4)[14464r,14480r:5)  0@14224r 1@14352r 2@14112r 3@14400r 4@14432r 5@14464r weight:0.000000e+00
%130 [14368r,14400r:0)  0@14368r weight:0.000000e+00
%134 [11296r,11312r:0)  0@11296r weight:0.000000e+00
%137 [11344r,11376r:0)[11376r,11392r:1)  0@11344r 1@11376r weight:0.000000e+00
%141 [12288r,12320r:0)[12320r,12336r:1)  0@12288r 1@12320r weight:0.000000e+00
%145 [12416r,12448r:0)[12448r,12464r:1)  0@12416r 1@12448r weight:0.000000e+00
%149 [12464r,12496r:2)[12496r,12528r:0)[12528r,12560r:1)[12560r,12688r:3)  0@12496r 1@12528r 2@12464r 3@12560r weight:0.000000e+00
%153 [12592r,12624r:0)[12624r,12640r:1)  0@12592r 1@12624r weight:0.000000e+00
%155 [12640r,12672r:0)[12672r,12688r:1)  0@12640r 1@12672r weight:0.000000e+00
%156 [12688r,13200r:0)  0@12688r weight:0.000000e+00
%157 [12704r,13120r:0)  0@12704r weight:0.000000e+00
%159 [12736r,12768r:0)  0@12736r weight:0.000000e+00
%160 [12720r,12768r:0)[12768r,13200r:1)  0@12720r 1@12768r weight:0.000000e+00
%161 [12784r,13040r:0)  0@12784r weight:0.000000e+00
%163 [12800r,12816r:0)[12816r,12832r:1)  0@12800r 1@12816r weight:0.000000e+00
%164 [12832r,12912r:0)  0@12832r weight:0.000000e+00
%166 [12576r,12864r:2)[12864r,12896r:0)[12896r,13056r:1)  0@12864r 1@12896r 2@12576r weight:0.000000e+00
%167 [12912r,12960r:0)  0@12912r weight:0.000000e+00
%171 [12400r,12992r:2)[12992r,13024r:0)[13024r,13040r:1)  0@12992r 1@13024r 2@12400r weight:0.000000e+00
%172 [13040r,13056r:0)  0@13040r weight:0.000000e+00
%173 [13056r,13120r:0)  0@13056r weight:0.000000e+00
%174 [12928r,12960r:2)[12960r,13088r:0)[13088r,13120r:1)[13120r,13152r:3)[13152r,13184r:4)[13184r,13200r:5)  0@12960r 1@13088r 2@12928r 3@13120r 4@13152r 5@13184r weight:0.000000e+00
%180 [11472r,11504r:0)[11504r,11520r:1)  0@11472r 1@11504r weight:0.000000e+00
%184 [11520r,11552r:2)[11552r,11584r:0)[11584r,11616r:1)[11616r,11744r:3)  0@11552r 1@11584r 2@11520r 3@11616r weight:0.000000e+00
%188 [11648r,11680r:0)[11680r,11696r:1)  0@11648r 1@11680r weight:0.000000e+00
%190 [11696r,11728r:0)[11728r,11744r:1)  0@11696r 1@11728r weight:0.000000e+00
%191 [11744r,12192r:0)  0@11744r weight:0.000000e+00
%192 [11760r,12112r:0)  0@11760r weight:0.000000e+00
%194 [11792r,11824r:0)  0@11792r weight:0.000000e+00
%195 [11776r,11824r:0)[11824r,12192r:1)  0@11776r 1@11824r weight:0.000000e+00
%196 [11840r,12064r:0)  0@11840r weight:0.000000e+00
%198 [11856r,11872r:0)[11872r,11888r:1)  0@11856r 1@11872r weight:0.000000e+00
%199 [11888r,11968r:0)  0@11888r weight:0.000000e+00
%201 [11632r,11920r:2)[11920r,11952r:0)[11952r,12080r:1)  0@11920r 1@11952r 2@11632r weight:0.000000e+00
%202 [11968r,11984r:0)  0@11968r weight:0.000000e+00
%205 [11456r,12016r:2)[12016r,12048r:0)[12048r,12064r:1)  0@12016r 1@12048r 2@11456r weight:0.000000e+00
%206 [12064r,12080r:0)  0@12064r weight:0.000000e+00
%207 [12080r,12112r:0)  0@12080r weight:0.000000e+00
%209 [11984r,12112r:2)[12112r,12144r:0)[12144r,12176r:1)[12176r,12192r:3)  0@12112r 1@12144r 2@11984r 3@12176r weight:0.000000e+00
%211 [6752r,6768r:0)  0@6752r weight:0.000000e+00
%214 [6800r,6832r:0)[6832r,6848r:1)  0@6800r 1@6832r weight:0.000000e+00
%218 [8768r,8800r:0)[8800r,8816r:1)  0@8768r 1@8800r weight:0.000000e+00
%220 [8880r,8896r:0)  0@8880r weight:0.000000e+00
%223 [8928r,8960r:0)[8960r,8976r:1)  0@8928r 1@8960r weight:0.000000e+00
%227 [9888r,9920r:0)[9920r,9936r:1)  0@9888r 1@9920r weight:0.000000e+00
%231 [10016r,10048r:0)[10048r,10064r:1)  0@10016r 1@10048r weight:0.000000e+00
%235 [10064r,10096r:2)[10096r,10128r:0)[10128r,10160r:1)[10160r,10288r:3)  0@10096r 1@10128r 2@10064r 3@10160r weight:0.000000e+00
%239 [10192r,10224r:0)[10224r,10240r:1)  0@10192r 1@10224r weight:0.000000e+00
%241 [10240r,10272r:0)[10272r,10288r:1)  0@10240r 1@10272r weight:0.000000e+00
%242 [10288r,10816r:0)  0@10288r weight:0.000000e+00
%243 [10304r,10736r:0)  0@10304r weight:0.000000e+00
%245 [10336r,10368r:0)  0@10336r weight:0.000000e+00
%246 [10320r,10368r:0)[10368r,10816r:1)  0@10320r 1@10368r weight:0.000000e+00
%249 [10000r,10400r:2)[10400r,10432r:0)[10432r,10464r:1)[10464r,10496r:3)[10496r,10640r:4)  0@10400r 1@10432r 2@10000r 3@10464r 4@10496r weight:0.000000e+00
%252 [10512r,10528r:0)[10528r,10544r:1)  0@10512r 1@10528r weight:0.000000e+00
%253 [10544r,10704r:0)  0@10544r weight:0.000000e+00
%256 [10176r,10592r:2)[10592r,10624r:0)[10624r,10640r:1)  0@10592r 1@10624r 2@10176r weight:0.000000e+00
%257 [10640r,10736r:0)  0@10640r weight:0.000000e+00
%259 [10560r,10672r:2)[10672r,10704r:0)[10704r,10736r:1)[10736r,10768r:3)[10768r,10800r:4)[10800r,10816r:5)  0@10672r 1@10704r 2@10560r 3@10736r 4@10768r 5@10800r weight:0.000000e+00
%265 [9056r,9088r:0)[9088r,9104r:1)  0@9056r 1@9088r weight:0.000000e+00
%269 [9104r,9136r:2)[9136r,9168r:0)[9168r,9200r:1)[9200r,9328r:3)  0@9136r 1@9168r 2@9104r 3@9200r weight:0.000000e+00
%273 [9232r,9264r:0)[9264r,9280r:1)  0@9232r 1@9264r weight:0.000000e+00
%275 [9280r,9312r:0)[9312r,9328r:1)  0@9280r 1@9312r weight:0.000000e+00
%276 [9328r,9792r:0)  0@9328r weight:0.000000e+00
%277 [9344r,9712r:0)  0@9344r weight:0.000000e+00
%279 [9376r,9408r:0)  0@9376r weight:0.000000e+00
%280 [9360r,9408r:0)[9408r,9792r:1)  0@9360r 1@9408r weight:0.000000e+00
%283 [9040r,9440r:2)[9440r,9472r:0)[9472r,9504r:1)[9504r,9536r:3)[9536r,9680r:4)  0@9440r 1@9472r 2@9040r 3@9504r 4@9536r weight:0.000000e+00
%286 [9552r,9568r:0)[9568r,9584r:1)  0@9552r 1@9568r weight:0.000000e+00
%287 [9584r,9600r:0)  0@9584r weight:0.000000e+00
%290 [9216r,9632r:2)[9632r,9664r:0)[9664r,9680r:1)  0@9632r 1@9664r 2@9216r weight:0.000000e+00
%291 [9680r,9712r:0)  0@9680r weight:0.000000e+00
%293 [9600r,9712r:2)[9712r,9744r:0)[9744r,9776r:1)[9776r,9792r:3)  0@9712r 1@9744r 2@9600r 3@9776r weight:0.000000e+00
%295 [6912r,6928r:0)  0@6912r weight:0.000000e+00
%298 [6960r,6992r:0)[6992r,7008r:1)  0@6960r 1@6992r weight:0.000000e+00
%302 [7808r,7840r:0)[7840r,7856r:1)  0@7808r 1@7840r weight:0.000000e+00
%306 [7936r,7968r:0)[7968r,7984r:1)  0@7936r 1@7968r weight:0.000000e+00
%310 [7984r,8016r:2)[8016r,8048r:0)[8048r,8080r:1)[8080r,8208r:3)  0@8016r 1@8048r 2@7984r 3@8080r weight:0.000000e+00
%314 [8112r,8144r:0)[8144r,8160r:1)  0@8112r 1@8144r weight:0.000000e+00
%316 [8160r,8192r:0)[8192r,8208r:1)  0@8160r 1@8192r weight:0.000000e+00
%317 [8208r,8624r:0)  0@8208r weight:0.000000e+00
%318 [8224r,8544r:0)  0@8224r weight:0.000000e+00
%320 [8256r,8288r:0)  0@8256r weight:0.000000e+00
%321 [8240r,8288r:0)[8288r,8624r:1)  0@8240r 1@8288r weight:0.000000e+00
%324 [7920r,8320r:2)[8320r,8352r:0)[8352r,8384r:1)[8384r,8416r:3)[8416r,8496r:4)  0@8320r 1@8352r 2@7920r 3@8384r 4@8416r weight:0.000000e+00
%328 [8096r,8448r:2)[8448r,8480r:0)[8480r,8496r:1)  0@8448r 1@8480r 2@8096r weight:0.000000e+00
%329 [8496r,8544r:0)  0@8496r weight:0.000000e+00
%332 [8512r,8544r:2)[8544r,8576r:0)[8576r,8608r:1)[8608r,8624r:3)  0@8544r 1@8576r 2@8512r 3@8608r weight:0.000000e+00
%336 [7088r,7120r:0)[7120r,7136r:1)  0@7088r 1@7120r weight:0.000000e+00
%338 [256r,784r:0)[784r,5952B:2)[5952B,6544r:0)[6544r,15824B:1)  0@256r 1@6544r 2@784r weight:0.000000e+00
%340 [7136r,7168r:2)[7168r,7200r:0)[7200r,7232r:1)[7232r,7360r:3)  0@7168r 1@7200r 2@7136r 3@7232r weight:0.000000e+00
%344 [7264r,7296r:0)[7296r,7312r:1)  0@7264r 1@7296r weight:0.000000e+00
%346 [7312r,7344r:0)[7344r,7360r:1)  0@7312r 1@7344r weight:0.000000e+00
%347 [7360r,7712r:0)  0@7360r weight:0.000000e+00
%348 [7376r,7696r:0)  0@7376r weight:0.000000e+00
%350 [7408r,7440r:0)  0@7408r weight:0.000000e+00
%351 [7392r,7440r:0)[7440r,7712r:1)  0@7392r 1@7440r weight:0.000000e+00
%354 [208r,752r:0)[752r,5952B:2)[5952B,6576r:0)[6576r,15824B:1)  0@208r 1@6576r 2@752r weight:0.000000e+00
%355 [7072r,7488r:2)[7488r,7520r:0)[7520r,7552r:1)[7552r,7584r:3)[7584r,7664r:4)  0@7488r 1@7520r 2@7072r 3@7552r 4@7584r weight:0.000000e+00
%359 [7248r,7616r:2)[7616r,7648r:0)[7648r,7664r:1)  0@7616r 1@7648r 2@7248r weight:0.000000e+00
%360 [7664r,7696r:0)  0@7664r weight:0.000000e+00
%361 [7456r,7696r:0)[7696r,7712r:1)  0@7456r 1@7696r weight:0.000000e+00
%364 [864r,896r:0)[896r,912r:1)  0@864r 1@896r weight:0.000000e+00
%367 [16064r,16276r:0)  0@16064r weight:0.000000e+00
%368 [16080r,16280r:0)  0@16080r weight:0.000000e+00
%369 [16096r,16288r:0)  0@16096r weight:0.000000e+00
%370 [16112r,16296r:0)  0@16112r weight:0.000000e+00
%372 [16128r,16160r:0)[16160r,16304r:1)  0@16128r 1@16160r weight:0.000000e+00
%374 [16336r,16516r:0)  0@16336r weight:0.000000e+00
%375 [16352r,16520r:0)  0@16352r weight:0.000000e+00
%376 [16368r,16528r:0)  0@16368r weight:0.000000e+00
%377 [16384r,16536r:0)  0@16384r weight:0.000000e+00
%378 [16400r,16544r:0)  0@16400r weight:0.000000e+00
%380 [16592r,16608r:0)  0@16592r weight:0.000000e+00
%382 [16672r,16752r:0)  0@16672r weight:0.000000e+00
%383 [16688r,16768r:0)  0@16688r weight:0.000000e+00
%384 [16704r,16784r:0)  0@16704r weight:0.000000e+00
%385 [16720r,16800r:0)  0@16720r weight:0.000000e+00
%386 [16848r,16928r:0)  0@16848r weight:0.000000e+00
%387 [16864r,16944r:0)  0@16864r weight:0.000000e+00
%388 [16880r,16960r:0)  0@16880r weight:0.000000e+00
%389 [16896r,16976r:0)  0@16896r weight:0.000000e+00
%392 [1008r,1040r:0)[1040r,1056r:1)  0@1008r 1@1040r weight:0.000000e+00
%394 [1152r,1168r:0)  0@1152r weight:0.000000e+00
%398 [1872r,1904r:0)[1904r,1920r:1)  0@1872r 1@1904r weight:0.000000e+00
%402 [3088r,3120r:0)[3120r,3136r:1)  0@3088r 1@3120r weight:0.000000e+00
%406 [3984r,4016r:0)[4016r,4032r:1)  0@3984r 1@4016r weight:0.000000e+00
%410 [4976r,5008r:0)[5008r,5024r:1)  0@4976r 1@5008r weight:0.000000e+00
%412 [5088r,5104r:0)  0@5088r weight:0.000000e+00
%416 [5104r,5136r:2)[5136r,5168r:0)[5168r,5200r:1)[5200r,5280r:3)  0@5136r 1@5168r 2@5104r 3@5200r weight:0.000000e+00
%418 [5216r,5232r:0)  0@5216r weight:0.000000e+00
%420 [5232r,5264r:0)[5264r,5280r:1)  0@5232r 1@5264r weight:0.000000e+00
%421 [5280r,5424r:0)  0@5280r weight:0.000000e+00
%423 [5296r,5376r:0)[5376r,5424r:1)  0@5296r 1@5376r weight:0.000000e+00
%426 [5312r,5344r:2)[5344r,5408r:0)[5408r,5424r:1)  0@5344r 1@5408r 2@5312r weight:0.000000e+00
%427 [5440r,5456r:0)  0@5440r weight:0.000000e+00
%430 [5456r,5488r:2)[5488r,5520r:0)[5520r,5552r:1)[5552r,5632r:3)  0@5488r 1@5520r 2@5456r 3@5552r weight:0.000000e+00
%432 [5568r,5584r:0)  0@5568r weight:0.000000e+00
%434 [5584r,5616r:0)[5616r,5632r:1)  0@5584r 1@5616r weight:0.000000e+00
%435 [5632r,5808r:0)  0@5632r weight:0.000000e+00
%436 [5648r,5732r:0)  0@5648r weight:0.000000e+00
%437 [5732r,5736r:0)[5736r,5808r:1)  0@5732r 1@5736r weight:0.000000e+00
%440 [5696r,5728r:2)[5728r,5760r:0)[5760r,5792r:1)[5792r,5808r:3)  0@5728r 1@5760r 2@5696r 3@5792r weight:0.000000e+00
%442 [4096r,4112r:0)  0@4096r weight:0.000000e+00
%446 [4112r,4144r:2)[4144r,4176r:0)[4176r,4208r:1)[4208r,4320r:3)  0@4144r 1@4176r 2@4112r 3@4208r weight:0.000000e+00
%450 [4224r,4256r:2)[4256r,4288r:0)[4288r,4320r:1)[4320r,4464r:3)  0@4256r 1@4288r 2@4224r 3@4320r weight:0.000000e+00
%453 [4336r,4416r:0)[4416r,4464r:1)  0@4336r 1@4416r weight:0.000000e+00
%456 [4352r,4384r:2)[4384r,4448r:0)[4448r,4464r:1)  0@4384r 1@4448r 2@4352r weight:0.000000e+00
%457 [4480r,4496r:0)  0@4480r weight:0.000000e+00
%460 [4496r,4528r:2)[4528r,4560r:0)[4560r,4592r:1)[4592r,4704r:3)  0@4528r 1@4560r 2@4496r 3@4592r weight:0.000000e+00
%464 [4608r,4640r:2)[4640r,4672r:0)[4672r,4704r:1)[4704r,4880r:3)  0@4640r 1@4672r 2@4608r 3@4704r weight:0.000000e+00
%466 [4720r,4804r:0)  0@4720r weight:0.000000e+00
%467 [4804r,4808r:0)[4808r,4880r:1)  0@4804r 1@4808r weight:0.000000e+00
%470 [4768r,4800r:2)[4800r,4832r:0)[4832r,4864r:1)[4864r,4880r:3)  0@4800r 1@4832r 2@4768r 3@4864r weight:0.000000e+00
%475 [3200r,3232r:2)[3232r,3264r:0)[3264r,3296r:1)[3296r,3376r:3)  0@3232r 1@3264r 2@3200r 3@3296r weight:0.000000e+00
%477 [3312r,3328r:0)  0@3312r weight:0.000000e+00
%479 [3328r,3360r:0)[3360r,3376r:1)  0@3328r 1@3360r weight:0.000000e+00
%480 [3376r,3520r:0)  0@3376r weight:0.000000e+00
%482 [3392r,3472r:0)[3472r,3520r:1)  0@3392r 1@3472r weight:0.000000e+00
%485 [3408r,3440r:2)[3440r,3504r:0)[3504r,3520r:1)  0@3440r 1@3504r 2@3408r weight:0.000000e+00
%488 [3536r,3568r:2)[3568r,3600r:0)[3600r,3632r:1)[3632r,3712r:3)  0@3568r 1@3600r 2@3536r 3@3632r weight:0.000000e+00
%490 [3648r,3664r:0)  0@3648r weight:0.000000e+00
%492 [3664r,3696r:0)[3696r,3712r:1)  0@3664r 1@3696r weight:0.000000e+00
%493 [3712r,3888r:0)  0@3712r weight:0.000000e+00
%494 [3728r,3812r:0)  0@3728r weight:0.000000e+00
%495 [3812r,3816r:0)[3816r,3888r:1)  0@3812r 1@3816r weight:0.000000e+00
%498 [3776r,3808r:2)[3808r,3840r:0)[3840r,3872r:1)[3872r,3888r:3)  0@3808r 1@3840r 2@3776r 3@3872r weight:0.000000e+00
%503 [2000r,2016r:2)[2016r,2048r:0)[2048r,2080r:1)[2080r,2192r:3)  0@2016r 1@2048r 2@2000r 3@2080r weight:0.000000e+00
%507 [2112r,2128r:2)[2128r,2160r:0)[2160r,2192r:1)[2192r,2448r:3)  0@2128r 1@2160r 2@2112r 3@2192r weight:0.000000e+00
%509 [2208r,2432r:0)  0@2208r weight:0.000000e+00
%510 [2224r,2240r:0)[2240r,2448r:1)  0@2224r 1@2240r weight:0.000000e+00
%514 [1984r,2288r:2)[2288r,2320r:0)[2320r,2352r:1)[2352r,2400r:3)  0@2288r 1@2320r 2@1984r 3@2352r weight:0.000000e+00
%516 [2096r,2384r:0)[2384r,2400r:1)  0@2096r 1@2384r weight:0.000000e+00
%517 [2400r,2432r:0)  0@2400r weight:0.000000e+00
%518 [2256r,2432r:0)[2432r,2448r:1)  0@2256r 1@2432r weight:0.000000e+00
%521 [2480r,2496r:2)[2496r,2528r:0)[2528r,2560r:1)[2560r,2672r:3)  0@2496r 1@2528r 2@2480r 3@2560r weight:0.000000e+00
%525 [2592r,2608r:2)[2608r,2640r:0)[2640r,2672r:1)[2672r,2992r:3)  0@2608r 1@2640r 2@2592r 3@2672r weight:0.000000e+00
%527 [2688r,2916r:0)  0@2688r weight:0.000000e+00
%528 [2916r,2920r:0)[2920r,2992r:1)  0@2916r 1@2920r weight:0.000000e+00
%530 [2464r,2752r:2)[2752r,2784r:0)[2784r,2816r:1)[2816r,2864r:3)  0@2752r 1@2784r 2@2464r 3@2816r weight:0.000000e+00
%532 [2576r,2848r:0)[2848r,2864r:1)  0@2576r 1@2848r weight:0.000000e+00
%533 [2864r,2912r:0)  0@2864r weight:0.000000e+00
%536 [2880r,2912r:2)[2912r,2944r:0)[2944r,2976r:1)[2976r,2992r:3)  0@2912r 1@2944r 2@2880r 3@2976r weight:0.000000e+00
%538 [1232r,1584r:0)  0@1232r weight:0.000000e+00
%541 [1264r,1280r:0)[1280r,1296r:1)  0@1264r 1@1280r weight:0.000000e+00
%542 [1296r,1456r:0)  0@1296r weight:0.000000e+00
%545 [1328r,1360r:0)[1360r,1680r:1)  0@1328r 1@1360r weight:0.000000e+00
%546 [1376r,1408r:0)  0@1376r weight:0.000000e+00
%547 [1392r,1776r:0)  0@1392r weight:0.000000e+00
%549 [1312r,1440r:0)[1440r,1600r:1)  0@1312r 1@1440r weight:0.000000e+00
%550 [1456r,1648r:0)  0@1456r weight:0.000000e+00
%551 [1408r,1488r:0)[1488r,1760r:1)  0@1408r 1@1488r weight:0.000000e+00
%553 [1248r,1536r:2)[1536r,1568r:0)[1568r,1584r:1)  0@1536r 1@1568r 2@1248r weight:0.000000e+00
%554 [1584r,1680r:0)  0@1584r weight:0.000000e+00
%555 [1600r,1728r:0)  0@1600r weight:0.000000e+00
%557 [1616r,1648r:0)[1648r,1664r:1)  0@1616r 1@1648r weight:0.000000e+00
%558 [1680r,1696r:0)  0@1680r weight:0.000000e+00
%561 [1696r,1728r:2)[1728r,1760r:0)[1760r,1776r:1)  0@1728r 1@1760r 2@1696r weight:0.000000e+00
%562 [6592r,15824B:0)  0@6592r weight:0.000000e+00
%564 [6608r,15824B:0)  0@6608r weight:0.000000e+00
%568 [10992r,15824B:0)  0@10992r weight:0.000000e+00
%569 [800r,5952B:0)  0@800r weight:0.000000e+00
%571 [816r,5952B:0)  0@816r weight:0.000000e+00
%575 [832r,5952B:0)  0@832r weight:0.000000e+00
RegMasks: 416r 15952r 16312r 16552r 16816r 16992r
********** MACHINEINSTRS **********
# Machine code for function interp: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=2072, align=16, at location [SP+8]
  fi#21: size=2072, align=16, at location [SP+8]
  fi#22: size=2072, align=16, at location [SP+8]
Constant Pool:
  cp#0: 1.250000e-01, align=8
  cp#1: 2.500000e-01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $rdi in %4, $esi in %5, $edx in %6, $ecx in %7, $r8 in %8, $r9d in %9

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9d
16B	  %9:gr32 = COPY $r9d
32B	  %8:gr64 = COPY $r8
48B	  %7:gr32 = COPY $ecx
64B	  %6:gr32 = COPY $edx
80B	  %5:gr32 = COPY $esi
96B	  %4:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.oz.addr)
128B	  MOV32mr %stack.1.mm1.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.mm1.addr)
144B	  MOV32mr %stack.2.mm2.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.mm2.addr)
160B	  MOV32mr %stack.3.mm3.addr, 1, $noreg, 0, $noreg, %7:gr32 :: (store 4 into %ir.mm3.addr)
176B	  MOV64mr %stack.4.ou.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.ou.addr)
192B	  MOV32mr %stack.5.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
208B	  undef %354.sub_32bit:gr64_with_sub_8bit = MOV32rr %6:gr32
224B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %5:gr32
240B	  MOV64mr %stack.9.z, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.z)
256B	  undef %338.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
272B	  undef %3.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
288B	  MOV64mr %stack.10.u, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.u)
304B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
320B	  JCC_1 %bb.2, 4, implicit $eflags
336B	  JMP_1 %bb.1

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

368B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  $edi = MOV32ri 7
416B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

448B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x40000000), %bb.26(0x40000000); %bb.3(50.00%), %bb.26(50.00%)

528B	  CMP32mi8 %stack.5.n1.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
544B	  JCC_1 %bb.26, 4, implicit $eflags
560B	  JMP_1 %bb.3

576B	bb.3.land.lhs.true:
	; predecessors: %bb.2
	  successors: %bb.4(0x40000000), %bb.26(0x40000000); %bb.4(50.00%), %bb.26(50.00%)

592B	  CMP32mi8 %fixed-stack.2, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr, align 16)
608B	  JCC_1 %bb.26, 4, implicit $eflags
624B	  JMP_1 %bb.4

640B	bb.4.land.lhs.true2:
	; predecessors: %bb.3
	  successors: %bb.5(0x40000000), %bb.26(0x40000000); %bb.5(50.00%), %bb.26(50.00%)

656B	  CMP32mi8 %fixed-stack.1, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr, align 8)
672B	  JCC_1 %bb.26, 4, implicit $eflags
688B	  JMP_1 %bb.5

704B	bb.5.if.then4:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

720B	  MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
752B	  %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
784B	  %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
800B	  %569:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
816B	  %571:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
832B	  %575:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

848B	bb.6.for.cond:
	; predecessors: %bb.5, %bb.25
	  successors: %bb.7(0x7c000000), %bb.77(0x04000000); %bb.7(96.88%), %bb.77(3.12%)

864B	  %364:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
896B	  %364:gr32 = DEC32r %364:gr32(tied-def 0), implicit-def dead $eflags
912B	  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %364:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
928B	  JCC_1 %bb.77, 13, implicit $eflags
944B	  JMP_1 %bb.7

960B	bb.7.for.body:
	; predecessors: %bb.6
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

976B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

992B	bb.8.for.cond6:
	; predecessors: %bb.7, %bb.24
	  successors: %bb.9(0x7c000000), %bb.25(0x04000000); %bb.9(96.88%), %bb.25(3.12%)

1008B	  %392:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
1040B	  %392:gr32 = DEC32r %392:gr32(tied-def 0), implicit-def dead $eflags
1056B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %392:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
1072B	  JCC_1 %bb.25, 13, implicit $eflags
1088B	  JMP_1 %bb.9

1104B	bb.9.for.body9:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1120B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

1136B	bb.10.for.cond10:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1152B	  %394:gr32 = MOV32rm %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1168B	  CMP32rm %394:gr32, %stack.1.mm1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.mm1.addr)
1184B	  JCC_1 %bb.12, 13, implicit $eflags
1200B	  JMP_1 %bb.11

1216B	bb.11.for.body12:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1232B	  %538:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
1248B	  %553:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1264B	  %541:gr64_nosp = COPY %553:gr64_nosp
1280B	  %541:gr64_nosp = nsw IMUL64rr %541:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
1296B	  %542:gr64 = LEA64r %538:gr64, 8, %541:gr64_nosp, 0, $noreg
1312B	  %549:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1328B	  %545:gr64_nosp = LEA64r %549:gr64_nosp, 1, $noreg, 1, $noreg
1360B	  %545:gr64_nosp = nsw IMUL64rr %545:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1376B	  %546:gr64 = LEA64r %542:gr64, 8, %545:gr64_nosp, 0, $noreg
1392B	  %547:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1408B	  %551:fr64 = MOVSDrm_alt %546:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx16)
1440B	  %549:gr64_nosp = nsw IMUL64rr %549:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1456B	  %550:gr64 = LEA64r %542:gr64, 8, %549:gr64_nosp, 0, $noreg
1488B	  %551:fr64 = ADDSDrm %551:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx22)
1504B	  MOVSDmr %stack.20.z1, 8, %547:gr64_nosp, 0, $noreg, %551:fr64 :: (store 8 into %ir.arrayidx25)
1536B	  %553:gr64_nosp = nsw INC64r %553:gr64_nosp(tied-def 0), implicit-def dead $eflags
1568B	  %553:gr64_nosp = nsw IMUL64rr %553:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
1584B	  %554:gr64 = LEA64r %538:gr64, 8, %553:gr64_nosp, 0, $noreg
1600B	  %555:gr64 = LEA64r %554:gr64, 8, %549:gr64_nosp, 0, $noreg
1616B	  %557:fr64 = MOVSDrm_alt %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx32)
1648B	  %557:fr64 = ADDSDrm %557:fr64(tied-def 0), %550:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx38)
1664B	  MOVSDmr %stack.21.z2, 8, %547:gr64_nosp, 0, $noreg, %557:fr64 :: (store 8 into %ir.arrayidx41)
1680B	  %558:gr64 = LEA64r %554:gr64, 8, %545:gr64_nosp, 0, $noreg
1696B	  %561:fr64 = MOVSDrm_alt %558:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx49)
1728B	  %561:fr64 = ADDSDrm %561:fr64(tied-def 0), %555:gr64, 8, %547:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx56)
1760B	  %561:fr64 = ADDSDrr %561:fr64(tied-def 0), %551:fr64
1776B	  MOVSDmr %stack.22.z3, 8, %547:gr64_nosp, 0, $noreg, %561:fr64 :: (store 8 into %ir.arrayidx62)
1792B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
1808B	  JMP_1 %bb.10

1824B	bb.12.for.end:
	; predecessors: %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1840B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

1856B	bb.13.for.cond63:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

1872B	  %398:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
1904B	  %398:gr32 = DEC32r %398:gr32(tied-def 0), implicit-def dead $eflags
1920B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %398:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
1936B	  JCC_1 %bb.15, 13, implicit $eflags
1952B	  JMP_1 %bb.14

1968B	bb.14.for.body66:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1984B	  %514:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
2000B	  %503:gr64 = COPY %514:gr64
2016B	  %503:gr64 = IMUL64rr %503:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
2048B	  %503:gr64 = SHL64ri %503:gr64(tied-def 0), 4, implicit-def dead $eflags
2080B	  %503:gr64 = ADD64rm %503:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
2096B	  %516:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2112B	  %507:gr64_nosp = COPY %516:gr64_nosp
2128B	  %507:gr64_nosp = IMUL64rr %507:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
2160B	  %507:gr64_nosp = SHL64ri %507:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
2192B	  %507:gr64_nosp = ADD64rr %507:gr64_nosp(tied-def 0), %503:gr64, implicit-def dead $eflags
2208B	  %509:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2224B	  %510:gr64_nosp = COPY %509:gr64_nosp
2240B	  %510:gr64_nosp = SHL64ri %510:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
2256B	  %518:fr64 = MOVSDrm_alt %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx74)
2288B	  %514:gr64 = nsw IMUL64rr %514:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
2320B	  %514:gr64 = SHL64ri %514:gr64(tied-def 0), 3, implicit-def dead $eflags
2352B	  %514:gr64 = ADD64rm %514:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
2384B	  %516:gr64_nosp = nsw IMUL64rr %516:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2400B	  %517:gr64 = LEA64r %514:gr64, 8, %516:gr64_nosp, 0, $noreg
2432B	  %518:fr64 = ADDSDrm %518:fr64(tied-def 0), %517:gr64, 8, %509:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx80)
2448B	  MOVSDmr %510:gr64_nosp, 1, %507:gr64_nosp, 0, $noreg, %518:fr64 :: (store 8 into %ir.arrayidx90)
2464B	  %530:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
2480B	  %521:gr64 = COPY %530:gr64
2496B	  %521:gr64 = IMUL64rr %521:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
2528B	  %521:gr64 = SHL64ri %521:gr64(tied-def 0), 4, implicit-def dead $eflags
2560B	  %521:gr64 = ADD64rm %521:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
2576B	  %532:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2592B	  %525:gr64_nosp = COPY %532:gr64_nosp
2608B	  %525:gr64_nosp = IMUL64rr %525:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
2640B	  %525:gr64_nosp = SHL64ri %525:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
2672B	  %525:gr64_nosp = ADD64rr %525:gr64_nosp(tied-def 0), %521:gr64, implicit-def dead $eflags
2688B	  %527:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2752B	  %530:gr64 = nsw IMUL64rr %530:gr64(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
2784B	  %530:gr64 = SHL64ri %530:gr64(tied-def 0), 3, implicit-def dead $eflags
2816B	  %530:gr64 = ADD64rm %530:gr64(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
2848B	  %532:gr64_nosp = nsw IMUL64rr %532:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
2864B	  %533:gr64 = LEA64r %530:gr64, 8, %532:gr64_nosp, 0, $noreg
2880B	  %536:fr64 = MOVSDrm_alt %533:gr64, 8, %527:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx107)
2912B	  %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %533:gr64, 8, %527:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx113)
2916B	  %528:gr64_nosp = COPY %527:gr64_nosp
2920B	  %528:gr64_nosp = SHL64ri %528:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
2944B	  %536:fr64 = MULSDrr %536:fr64(tied-def 0), %569:fr64
2976B	  %536:fr64 = ADDSDrm %536:fr64(tied-def 0), %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx100)
2992B	  MOVSDmr %528:gr64_nosp, 1, %525:gr64_nosp, 8, $noreg, %536:fr64 :: (store 8 into %ir.arrayidx126)
3008B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
3024B	  JMP_1 %bb.13

3040B	bb.15.for.end129:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3056B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

3072B	bb.16.for.cond130:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

3088B	  %402:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
3120B	  %402:gr32 = DEC32r %402:gr32(tied-def 0), implicit-def dead $eflags
3136B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %402:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
3152B	  JCC_1 %bb.18, 13, implicit $eflags
3168B	  JMP_1 %bb.17

3184B	bb.17.for.body133:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3200B	  %475:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
3232B	  %475:gr64 = IMUL64rr %475:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
3264B	  %475:gr64 = SHL64ri %475:gr64(tied-def 0), 4, implicit-def dead $eflags
3296B	  %475:gr64 = ADD64rm %475:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
3312B	  %477:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
3328B	  %479:gr64_nosp = LEA64r %477:gr64_nosp, 1, %477:gr64_nosp, 1, $noreg
3360B	  %479:gr64_nosp = nsw IMUL64rr %479:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
3376B	  %480:gr64_nosp = LEA64r %475:gr64, 8, %479:gr64_nosp, 0, $noreg
3392B	  %482:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
3408B	  %485:fr64 = MOVSDrm_alt %stack.20.z1, 8, %482:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx145)
3440B	  %485:fr64 = MULSDrr %485:fr64(tied-def 0), %569:fr64
3472B	  %482:gr64_nosp = SHL64ri %482:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
3504B	  %485:fr64 = ADDSDrm %485:fr64(tied-def 0), %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx143)
3520B	  MOVSDmr %482:gr64_nosp, 1, %480:gr64_nosp, 0, $noreg, %485:fr64 :: (store 8 into %ir.arrayidx157)
3536B	  %488:gr64 = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
3568B	  %488:gr64 = IMUL64rr %488:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
3600B	  %488:gr64 = SHL64ri %488:gr64(tied-def 0), 4, implicit-def dead $eflags
3632B	  %488:gr64 = ADD64rm %488:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
3648B	  %490:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
3664B	  %492:gr64_nosp = LEA64r %490:gr64_nosp, 1, %490:gr64_nosp, 1, $noreg
3696B	  %492:gr64_nosp = nsw IMUL64rr %492:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
3712B	  %493:gr64_nosp = LEA64r %488:gr64, 8, %492:gr64_nosp, 0, $noreg
3728B	  %494:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
3776B	  %498:fr64 = MOVSDrm_alt %stack.20.z1, 8, %494:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx170)
3808B	  %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %stack.20.z1, 8, %494:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx173)
3812B	  %495:gr64_nosp = COPY %494:gr64_nosp
3816B	  %495:gr64_nosp = SHL64ri %495:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
3840B	  %498:fr64 = MULSDrr %498:fr64(tied-def 0), %571:fr64
3872B	  %498:fr64 = ADDSDrm %498:fr64(tied-def 0), %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx168)
3888B	  MOVSDmr %495:gr64_nosp, 1, %493:gr64_nosp, 8, $noreg, %498:fr64 :: (store 8 into %ir.arrayidx187)
3904B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
3920B	  JMP_1 %bb.16

3936B	bb.18.for.end190:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

3952B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

3968B	bb.19.for.cond191:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

3984B	  %406:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
4016B	  %406:gr32 = DEC32r %406:gr32(tied-def 0), implicit-def dead $eflags
4032B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %406:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
4048B	  JCC_1 %bb.21, 13, implicit $eflags
4064B	  JMP_1 %bb.20

4080B	bb.20.for.body194:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

4096B	  %442:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
4112B	  %446:gr64 = LEA64r %442:gr64_nosp, 1, %442:gr64_nosp, 1, $noreg
4144B	  %446:gr64 = nsw IMUL64rr %446:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
4176B	  %446:gr64 = SHL64ri %446:gr64(tied-def 0), 3, implicit-def dead $eflags
4208B	  %446:gr64 = ADD64rm %446:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
4224B	  %450:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
4256B	  %450:gr64_nosp = IMUL64rr %450:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
4288B	  %450:gr64_nosp = SHL64ri %450:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
4320B	  %450:gr64_nosp = ADD64rr %450:gr64_nosp(tied-def 0), %446:gr64, implicit-def dead $eflags
4336B	  %453:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
4352B	  %456:fr64 = MOVSDrm_alt %stack.21.z2, 8, %453:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx206)
4384B	  %456:fr64 = MULSDrr %456:fr64(tied-def 0), %569:fr64
4416B	  %453:gr64_nosp = SHL64ri %453:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
4448B	  %456:fr64 = ADDSDrm %456:fr64(tied-def 0), %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx204)
4464B	  MOVSDmr %453:gr64_nosp, 1, %450:gr64_nosp, 0, $noreg, %456:fr64 :: (store 8 into %ir.arrayidx218)
4480B	  %457:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
4496B	  %460:gr64 = LEA64r %457:gr64_nosp, 1, %457:gr64_nosp, 1, $noreg
4528B	  %460:gr64 = nsw IMUL64rr %460:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
4560B	  %460:gr64 = SHL64ri %460:gr64(tied-def 0), 3, implicit-def dead $eflags
4592B	  %460:gr64 = ADD64rm %460:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
4608B	  %464:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
4640B	  %464:gr64_nosp = IMUL64rr %464:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
4672B	  %464:gr64_nosp = SHL64ri %464:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
4704B	  %464:gr64_nosp = ADD64rr %464:gr64_nosp(tied-def 0), %460:gr64, implicit-def dead $eflags
4720B	  %466:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
4768B	  %470:fr64 = MOVSDrm_alt %stack.21.z2, 8, %466:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx231)
4800B	  %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %stack.21.z2, 8, %466:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx234)
4804B	  %467:gr64_nosp = COPY %466:gr64_nosp
4808B	  %467:gr64_nosp = SHL64ri %467:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
4832B	  %470:fr64 = MULSDrr %470:fr64(tied-def 0), %571:fr64
4864B	  %470:fr64 = ADDSDrm %470:fr64(tied-def 0), %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx229)
4880B	  MOVSDmr %467:gr64_nosp, 1, %464:gr64_nosp, 8, $noreg, %470:fr64 :: (store 8 into %ir.arrayidx248)
4896B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
4912B	  JMP_1 %bb.19

4928B	bb.21.for.end251:
	; predecessors: %bb.19
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

4944B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

4960B	bb.22.for.cond252:
	; predecessors: %bb.21, %bb.23
	  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

4976B	  %410:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
5008B	  %410:gr32 = DEC32r %410:gr32(tied-def 0), implicit-def dead $eflags
5024B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %410:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
5040B	  JCC_1 %bb.24, 13, implicit $eflags
5056B	  JMP_1 %bb.23

5072B	bb.23.for.body255:
	; predecessors: %bb.22
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

5088B	  %412:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
5104B	  %416:gr64 = LEA64r %412:gr64_nosp, 1, %412:gr64_nosp, 1, $noreg
5136B	  %416:gr64 = nsw IMUL64rr %416:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
5168B	  %416:gr64 = SHL64ri %416:gr64(tied-def 0), 3, implicit-def dead $eflags
5200B	  %416:gr64 = ADD64rm %416:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
5216B	  %418:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
5232B	  %420:gr64_nosp = LEA64r %418:gr64_nosp, 1, %418:gr64_nosp, 1, $noreg
5264B	  %420:gr64_nosp = nsw IMUL64rr %420:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
5280B	  %421:gr64_nosp = LEA64r %416:gr64, 8, %420:gr64_nosp, 0, $noreg
5296B	  %423:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
5312B	  %426:fr64 = MOVSDrm_alt %stack.22.z3, 8, %423:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx268)
5344B	  %426:fr64 = MULSDrr %426:fr64(tied-def 0), %571:fr64
5376B	  %423:gr64_nosp = SHL64ri %423:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
5408B	  %426:fr64 = ADDSDrm %426:fr64(tied-def 0), %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx266)
5424B	  MOVSDmr %423:gr64_nosp, 1, %421:gr64_nosp, 0, $noreg, %426:fr64 :: (store 8 into %ir.arrayidx281)
5440B	  %427:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
5456B	  %430:gr64 = LEA64r %427:gr64_nosp, 1, %427:gr64_nosp, 1, $noreg
5488B	  %430:gr64 = nsw IMUL64rr %430:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
5520B	  %430:gr64 = SHL64ri %430:gr64(tied-def 0), 3, implicit-def dead $eflags
5552B	  %430:gr64 = ADD64rm %430:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
5568B	  %432:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
5584B	  %434:gr64_nosp = LEA64r %432:gr64_nosp, 1, %432:gr64_nosp, 1, $noreg
5616B	  %434:gr64_nosp = nsw IMUL64rr %434:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
5632B	  %435:gr64_nosp = LEA64r %430:gr64, 8, %434:gr64_nosp, 0, $noreg
5648B	  %436:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
5696B	  %440:fr64 = MOVSDrm_alt %stack.22.z3, 8, %436:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx295)
5728B	  %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %stack.22.z3, 8, %436:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx298)
5732B	  %437:gr64_nosp = COPY %436:gr64_nosp
5736B	  %437:gr64_nosp = SHL64ri %437:gr64_nosp(tied-def 0), 4, implicit-def dead $eflags
5760B	  %440:fr64 = MULSDrr %440:fr64(tied-def 0), %575:fr64
5792B	  %440:fr64 = ADDSDrm %440:fr64(tied-def 0), %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx293)
5808B	  MOVSDmr %437:gr64_nosp, 1, %435:gr64_nosp, 8, $noreg, %440:fr64 :: (store 8 into %ir.arrayidx313)
5824B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
5840B	  JMP_1 %bb.22

5856B	bb.24.for.end316:
	; predecessors: %bb.22
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

5872B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
5888B	  JMP_1 %bb.8

5904B	bb.25.for.end319:
	; predecessors: %bb.8
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

5920B	  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
5936B	  JMP_1 %bb.6

5952B	bb.26.if.else:
	; predecessors: %bb.2, %bb.3, %bb.4
	  successors: %bb.27(0x40000000), %bb.28(0x40000000); %bb.27(50.00%), %bb.28(50.00%)

5968B	  CMP32mi8 %stack.5.n1.addr, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
5984B	  JCC_1 %bb.28, 5, implicit $eflags
6000B	  JMP_1 %bb.27

6016B	bb.27.if.then324:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

6032B	  MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d1)
6048B	  MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t1)
6064B	  JMP_1 %bb.29

6080B	bb.28.if.else325:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

6096B	  MOV32mi %stack.14.d1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d1)
6112B	  MOV32mi %stack.17.t1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t1)

6128B	bb.29.if.end326:
	; predecessors: %bb.28, %bb.27
	  successors: %bb.30(0x40000000), %bb.31(0x40000000); %bb.30(50.00%), %bb.31(50.00%)

6144B	  CMP32mi8 %fixed-stack.2, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr, align 16)
6160B	  JCC_1 %bb.31, 5, implicit $eflags
6176B	  JMP_1 %bb.30

6192B	bb.30.if.then328:
	; predecessors: %bb.29
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

6208B	  MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d2)
6224B	  MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t2)
6240B	  JMP_1 %bb.32

6256B	bb.31.if.else329:
	; predecessors: %bb.29
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

6272B	  MOV32mi %stack.15.d2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d2)
6288B	  MOV32mi %stack.18.t2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t2)

6304B	bb.32.if.end330:
	; predecessors: %bb.31, %bb.30
	  successors: %bb.33(0x40000000), %bb.34(0x40000000); %bb.33(50.00%), %bb.34(50.00%)

6320B	  CMP32mi8 %fixed-stack.1, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr, align 8)
6336B	  JCC_1 %bb.34, 5, implicit $eflags
6352B	  JMP_1 %bb.33

6368B	bb.33.if.then332:
	; predecessors: %bb.32
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

6384B	  MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 2 :: (store 4 into %ir.d3)
6400B	  MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.t3)
6416B	  JMP_1 %bb.35

6432B	bb.34.if.else333:
	; predecessors: %bb.32
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

6448B	  MOV32mi %stack.16.d3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.d3)
6464B	  MOV32mi %stack.19.t3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.t3)

6480B	bb.35.if.end334:
	; predecessors: %bb.34, %bb.33
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

6496B	  %27:gr32 = MOV32rm %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
6512B	  MOV32mr %stack.11.i3, 1, $noreg, 0, $noreg, %27:gr32 :: (store 4 into %ir.i3)
6544B	  %338:gr64_with_sub_8bit = nuw IMUL64rr %338:gr64_with_sub_8bit(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
6576B	  %354:gr64_with_sub_8bit = nuw IMUL64rr %354:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
6592B	  %562:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
6608B	  %564:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)

6624B	bb.36.for.cond335:
	; predecessors: %bb.35, %bb.55
	  successors: %bb.37(0x7c000000), %bb.56(0x04000000); %bb.37(96.88%), %bb.56(3.12%)

6640B	  %30:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
6672B	  %30:gr32 = DEC32r %30:gr32(tied-def 0), implicit-def dead $eflags
6688B	  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %30:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
6704B	  JCC_1 %bb.56, 15, implicit $eflags
6720B	  JMP_1 %bb.37

6736B	bb.37.for.body338:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

6752B	  %211:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
6768B	  MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %211:gr32 :: (store 4 into %ir.i2)

6784B	bb.38.for.cond339:
	; predecessors: %bb.37, %bb.45
	  successors: %bb.39(0x7c000000), %bb.46(0x04000000); %bb.39(96.88%), %bb.46(3.12%)

6800B	  %214:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
6832B	  %214:gr32 = DEC32r %214:gr32(tied-def 0), implicit-def dead $eflags
6848B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %214:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
6864B	  JCC_1 %bb.46, 15, implicit $eflags
6880B	  JMP_1 %bb.39

6896B	bb.39.for.body342:
	; predecessors: %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

6912B	  %295:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
6928B	  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %295:gr32 :: (store 4 into %ir.i1)

6944B	bb.40.for.cond343:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

6960B	  %298:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
6992B	  %298:gr32 = DEC32r %298:gr32(tied-def 0), implicit-def dead $eflags
7008B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %298:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
7024B	  JCC_1 %bb.42, 15, implicit $eflags
7040B	  JMP_1 %bb.41

7056B	bb.41.for.body346:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

7072B	  %355:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
7088B	  %336:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
7120B	  %336:gr64 = NOT64r %336:gr64(tied-def 0)
7136B	  %340:gr64 = LEA64r %336:gr64, 2, %355:gr64_nosp, 0, $noreg
7168B	  %340:gr64 = nsw IMUL64rr %340:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
7200B	  %340:gr64 = SHL64ri %340:gr64(tied-def 0), 3, implicit-def dead $eflags
7232B	  %340:gr64 = ADD64rm %340:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
7248B	  %359:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
7264B	  %344:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
7296B	  %344:gr64 = NOT64r %344:gr64(tied-def 0)
7312B	  %346:gr64_nosp = LEA64r %344:gr64, 2, %359:gr64_nosp, 0, $noreg
7344B	  %346:gr64_nosp = nsw IMUL64rr %346:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
7360B	  %347:gr64 = LEA64r %340:gr64, 8, %346:gr64_nosp, 0, $noreg
7376B	  %348:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
7392B	  %351:gr64_nosp = LEA64r %348:gr64_nosp, 1, %348:gr64_nosp, 0, $noreg
7408B	  %350:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
7440B	  %351:gr64_nosp = nsw SUB64rr %351:gr64_nosp(tied-def 0), %350:gr64, implicit-def dead $eflags
7456B	  %361:fr64 = MOVSDrm_alt %347:gr64, 8, %351:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx361)
7488B	  %355:gr64_nosp = DEC64r %355:gr64_nosp(tied-def 0), implicit-def dead $eflags
7520B	  %355:gr64_nosp = nsw IMUL64rr %355:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
7552B	  %355:gr64_nosp = SHL64ri %355:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
7584B	  %355:gr64_nosp = ADD64rm %355:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
7616B	  %359:gr64_nosp = DEC64r %359:gr64_nosp(tied-def 0), implicit-def dead $eflags
7648B	  %359:gr64_nosp = nsw IMUL64rr %359:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
7664B	  %360:gr64 = LEA64r %355:gr64_nosp, 8, %359:gr64_nosp, 0, $noreg
7696B	  %361:fr64 = ADDSDrm %361:fr64(tied-def 0), %360:gr64, 8, %348:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx370)
7712B	  MOVSDmr %347:gr64, 8, %351:gr64_nosp, -8, $noreg, %361:fr64 :: (store 8 into %ir.arrayidx386)
7728B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
7744B	  JMP_1 %bb.40

7760B	bb.42.for.end389:
	; predecessors: %bb.40
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

7776B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

7792B	bb.43.for.cond390:
	; predecessors: %bb.42, %bb.44
	  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

7808B	  %302:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
7840B	  %302:gr32 = DEC32r %302:gr32(tied-def 0), implicit-def dead $eflags
7856B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %302:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
7872B	  JCC_1 %bb.45, 15, implicit $eflags
7888B	  JMP_1 %bb.44

7904B	bb.44.for.body393:
	; predecessors: %bb.43
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

7920B	  %324:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
7936B	  %306:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
7968B	  %306:gr64 = NOT64r %306:gr64(tied-def 0)
7984B	  %310:gr64 = LEA64r %306:gr64, 2, %324:gr64_nosp, 0, $noreg
8016B	  %310:gr64 = nsw IMUL64rr %310:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
8048B	  %310:gr64 = SHL64ri %310:gr64(tied-def 0), 3, implicit-def dead $eflags
8080B	  %310:gr64 = ADD64rm %310:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
8096B	  %328:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
8112B	  %314:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
8144B	  %314:gr64 = NOT64r %314:gr64(tied-def 0)
8160B	  %316:gr64_nosp = LEA64r %314:gr64, 2, %328:gr64_nosp, 0, $noreg
8192B	  %316:gr64_nosp = nsw IMUL64rr %316:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
8208B	  %317:gr64 = LEA64r %310:gr64, 8, %316:gr64_nosp, 0, $noreg
8224B	  %318:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
8240B	  %321:gr64_nosp = LEA64r %318:gr64_nosp, 1, %318:gr64_nosp, 0, $noreg
8256B	  %320:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
8288B	  %321:gr64_nosp = nsw SUB64rr %321:gr64_nosp(tied-def 0), %320:gr64, implicit-def dead $eflags
8320B	  %324:gr64_nosp = DEC64r %324:gr64_nosp(tied-def 0), implicit-def dead $eflags
8352B	  %324:gr64_nosp = nsw IMUL64rr %324:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
8384B	  %324:gr64_nosp = SHL64ri %324:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
8416B	  %324:gr64_nosp = ADD64rm %324:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
8448B	  %328:gr64_nosp = DEC64r %328:gr64_nosp(tied-def 0), implicit-def dead $eflags
8480B	  %328:gr64_nosp = nsw IMUL64rr %328:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
8496B	  %329:gr64 = LEA64r %324:gr64_nosp, 8, %328:gr64_nosp, 0, $noreg
8512B	  %332:fr64 = MOVSDrm_alt %329:gr64, 8, %318:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx416)
8544B	  %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %329:gr64, 8, %318:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx425)
8576B	  %332:fr64 = MULSDrr %332:fr64(tied-def 0), %562:fr64
8608B	  %332:fr64 = ADDSDrm %332:fr64(tied-def 0), %317:gr64, 8, %321:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx408)
8624B	  MOVSDmr %317:gr64, 8, %321:gr64_nosp, -8, $noreg, %332:fr64 :: (store 8 into %ir.arrayidx443)
8640B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
8656B	  JMP_1 %bb.43

8672B	bb.45.for.end446:
	; predecessors: %bb.43
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

8688B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
8704B	  JMP_1 %bb.38

8720B	bb.46.for.end449:
	; predecessors: %bb.38
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

8736B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

8752B	bb.47.for.cond450:
	; predecessors: %bb.46, %bb.54
	  successors: %bb.48(0x7c000000), %bb.55(0x04000000); %bb.48(96.88%), %bb.55(3.12%)

8768B	  %218:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
8800B	  %218:gr32 = DEC32r %218:gr32(tied-def 0), implicit-def dead $eflags
8816B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %218:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
8832B	  JCC_1 %bb.55, 15, implicit $eflags
8848B	  JMP_1 %bb.48

8864B	bb.48.for.body453:
	; predecessors: %bb.47
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

8880B	  %220:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
8896B	  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %220:gr32 :: (store 4 into %ir.i1)

8912B	bb.49.for.cond454:
	; predecessors: %bb.48, %bb.50
	  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

8928B	  %223:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
8960B	  %223:gr32 = DEC32r %223:gr32(tied-def 0), implicit-def dead $eflags
8976B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %223:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
8992B	  JCC_1 %bb.51, 15, implicit $eflags
9008B	  JMP_1 %bb.50

9024B	bb.50.for.body457:
	; predecessors: %bb.49
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

9040B	  %283:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
9056B	  %265:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
9088B	  %265:gr64 = NOT64r %265:gr64(tied-def 0)
9104B	  %269:gr64 = LEA64r %265:gr64, 2, %283:gr64_nosp, 0, $noreg
9136B	  %269:gr64 = nsw IMUL64rr %269:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
9168B	  %269:gr64 = SHL64ri %269:gr64(tied-def 0), 3, implicit-def dead $eflags
9200B	  %269:gr64 = ADD64rm %269:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
9216B	  %290:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
9232B	  %273:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
9264B	  %273:gr64 = NOT64r %273:gr64(tied-def 0)
9280B	  %275:gr64_nosp = LEA64r %273:gr64, 2, %290:gr64_nosp, 0, $noreg
9312B	  %275:gr64_nosp = nsw IMUL64rr %275:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
9328B	  %276:gr64 = LEA64r %269:gr64, 8, %275:gr64_nosp, 0, $noreg
9344B	  %277:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
9360B	  %280:gr64_nosp = LEA64r %277:gr64_nosp, 1, %277:gr64_nosp, 0, $noreg
9376B	  %279:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
9408B	  %280:gr64_nosp = nsw SUB64rr %280:gr64_nosp(tied-def 0), %279:gr64, implicit-def dead $eflags
9440B	  %283:gr64_nosp = DEC64r %283:gr64_nosp(tied-def 0), implicit-def dead $eflags
9472B	  %283:gr64_nosp = nsw IMUL64rr %283:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
9504B	  %283:gr64_nosp = SHL64ri %283:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
9536B	  %283:gr64_nosp = ADD64rm %283:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
9552B	  %286:gr64_nosp = COPY %290:gr64_nosp
9568B	  %286:gr64_nosp = nsw IMUL64rr %286:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
9584B	  %287:gr64 = LEA64r %283:gr64_nosp, 8, %286:gr64_nosp, 0, $noreg
9600B	  %293:fr64 = MOVSDrm_alt %287:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx480)
9632B	  %290:gr64_nosp = DEC64r %290:gr64_nosp(tied-def 0), implicit-def dead $eflags
9664B	  %290:gr64_nosp = nsw IMUL64rr %290:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
9680B	  %291:gr64 = LEA64r %283:gr64_nosp, 8, %290:gr64_nosp, 0, $noreg
9712B	  %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %291:gr64, 8, %277:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx489)
9744B	  %293:fr64 = MULSDrr %293:fr64(tied-def 0), %562:fr64
9776B	  %293:fr64 = ADDSDrm %293:fr64(tied-def 0), %276:gr64, 8, %280:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx472)
9792B	  MOVSDmr %276:gr64, 8, %280:gr64_nosp, -8, $noreg, %293:fr64 :: (store 8 into %ir.arrayidx507)
9808B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
9824B	  JMP_1 %bb.49

9840B	bb.51.for.end510:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

9856B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

9872B	bb.52.for.cond511:
	; predecessors: %bb.51, %bb.53
	  successors: %bb.53(0x7c000000), %bb.54(0x04000000); %bb.53(96.88%), %bb.54(3.12%)

9888B	  %227:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
9920B	  %227:gr32 = DEC32r %227:gr32(tied-def 0), implicit-def dead $eflags
9936B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %227:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
9952B	  JCC_1 %bb.54, 15, implicit $eflags
9968B	  JMP_1 %bb.53

9984B	bb.53.for.body514:
	; predecessors: %bb.52
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

10000B	  %249:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
10016B	  %231:gr64 = MOVSX64rm32 %stack.16.d3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d3)
10048B	  %231:gr64 = NOT64r %231:gr64(tied-def 0)
10064B	  %235:gr64 = LEA64r %231:gr64, 2, %249:gr64_nosp, 0, $noreg
10096B	  %235:gr64 = nsw IMUL64rr %235:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
10128B	  %235:gr64 = SHL64ri %235:gr64(tied-def 0), 3, implicit-def dead $eflags
10160B	  %235:gr64 = ADD64rm %235:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
10176B	  %256:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
10192B	  %239:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
10224B	  %239:gr64 = NOT64r %239:gr64(tied-def 0)
10240B	  %241:gr64_nosp = LEA64r %239:gr64, 2, %256:gr64_nosp, 0, $noreg
10272B	  %241:gr64_nosp = nsw IMUL64rr %241:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
10288B	  %242:gr64 = LEA64r %235:gr64, 8, %241:gr64_nosp, 0, $noreg
10304B	  %243:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
10320B	  %246:gr64_nosp = LEA64r %243:gr64_nosp, 1, %243:gr64_nosp, 0, $noreg
10336B	  %245:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
10368B	  %246:gr64_nosp = nsw SUB64rr %246:gr64_nosp(tied-def 0), %245:gr64, implicit-def dead $eflags
10400B	  %249:gr64_nosp = DEC64r %249:gr64_nosp(tied-def 0), implicit-def dead $eflags
10432B	  %249:gr64_nosp = nsw IMUL64rr %249:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
10464B	  %249:gr64_nosp = SHL64ri %249:gr64_nosp(tied-def 0), 3, implicit-def dead $eflags
10496B	  %249:gr64_nosp = ADD64rm %249:gr64_nosp(tied-def 0), %stack.9.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
10512B	  %252:gr64_nosp = COPY %256:gr64_nosp
10528B	  %252:gr64_nosp = nsw IMUL64rr %252:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
10544B	  %253:gr64 = LEA64r %249:gr64_nosp, 8, %252:gr64_nosp, 0, $noreg
10560B	  %259:fr64 = MOVSDrm_alt %253:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx536)
10592B	  %256:gr64_nosp = DEC64r %256:gr64_nosp(tied-def 0), implicit-def dead $eflags
10624B	  %256:gr64_nosp = nsw IMUL64rr %256:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
10640B	  %257:gr64 = LEA64r %249:gr64_nosp, 8, %256:gr64_nosp, 0, $noreg
10672B	  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx544)
10704B	  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %253:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx553)
10736B	  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %257:gr64, 8, %243:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx563)
10768B	  %259:fr64 = MULSDrr %259:fr64(tied-def 0), %564:fr64
10800B	  %259:fr64 = ADDSDrm %259:fr64(tied-def 0), %242:gr64, 8, %246:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx529)
10816B	  MOVSDmr %242:gr64, 8, %246:gr64_nosp, -8, $noreg, %259:fr64 :: (store 8 into %ir.arrayidx581)
10832B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
10848B	  JMP_1 %bb.52

10864B	bb.54.for.end584:
	; predecessors: %bb.52
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

10880B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
10896B	  JMP_1 %bb.47

10912B	bb.55.for.end587:
	; predecessors: %bb.47
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

10928B	  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
10944B	  JMP_1 %bb.36

10960B	bb.56.for.end590:
	; predecessors: %bb.36
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

10976B	  MOV32mi %stack.11.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
10992B	  %568:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

11008B	bb.57.for.cond591:
	; predecessors: %bb.56, %bb.76
	  successors: %bb.58(0x7c000000), %bb.77(0x04000000); %bb.58(96.88%), %bb.77(3.12%)

11024B	  %34:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
11056B	  %34:gr32 = DEC32r %34:gr32(tied-def 0), implicit-def dead $eflags
11072B	  CMP32mr %stack.11.i3, 1, $noreg, 0, $noreg, %34:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
11088B	  JCC_1 %bb.77, 15, implicit $eflags
11104B	  JMP_1 %bb.58

11120B	bb.58.for.body594:
	; predecessors: %bb.57
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

11136B	  %36:gr32 = MOV32rm %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
11152B	  MOV32mr %stack.12.i2, 1, $noreg, 0, $noreg, %36:gr32 :: (store 4 into %ir.i2)

11168B	bb.59.for.cond595:
	; predecessors: %bb.58, %bb.66
	  successors: %bb.60(0x7c000000), %bb.67(0x04000000); %bb.60(96.88%), %bb.67(3.12%)

11184B	  %39:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
11216B	  %39:gr32 = DEC32r %39:gr32(tied-def 0), implicit-def dead $eflags
11232B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %39:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
11248B	  JCC_1 %bb.67, 15, implicit $eflags
11264B	  JMP_1 %bb.60

11280B	bb.60.for.body598:
	; predecessors: %bb.59
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

11296B	  %134:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
11312B	  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %134:gr32 :: (store 4 into %ir.i1)

11328B	bb.61.for.cond599:
	; predecessors: %bb.60, %bb.62
	  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

11344B	  %137:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
11376B	  %137:gr32 = DEC32r %137:gr32(tied-def 0), implicit-def dead $eflags
11392B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %137:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
11408B	  JCC_1 %bb.63, 15, implicit $eflags
11424B	  JMP_1 %bb.62

11440B	bb.62.for.body602:
	; predecessors: %bb.61
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

11456B	  %205:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
11472B	  %180:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
11504B	  %180:gr64 = NOT64r %180:gr64(tied-def 0)
11520B	  %184:gr64 = LEA64r %180:gr64, 2, %205:gr64_nosp, 0, $noreg
11552B	  %184:gr64 = nsw IMUL64rr %184:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
11584B	  %184:gr64 = SHL64ri %184:gr64(tied-def 0), 3, implicit-def dead $eflags
11616B	  %184:gr64 = ADD64rm %184:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
11632B	  %201:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
11648B	  %188:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
11680B	  %188:gr64 = NOT64r %188:gr64(tied-def 0)
11696B	  %190:gr64_nosp = LEA64r %188:gr64, 2, %201:gr64_nosp, 0, $noreg
11728B	  %190:gr64_nosp = nsw IMUL64rr %190:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
11744B	  %191:gr64 = LEA64r %184:gr64, 8, %190:gr64_nosp, 0, $noreg
11760B	  %192:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
11776B	  %195:gr64_nosp = LEA64r %192:gr64_nosp, 1, %192:gr64_nosp, 0, $noreg
11792B	  %194:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
11824B	  %195:gr64_nosp = nsw SUB64rr %195:gr64_nosp(tied-def 0), %194:gr64, implicit-def dead $eflags
11840B	  %196:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
11856B	  %198:gr64_nosp = COPY %205:gr64_nosp
11872B	  %198:gr64_nosp = nsw IMUL64rr %198:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
11888B	  %199:gr64 = LEA64r %196:gr64, 8, %198:gr64_nosp, 0, $noreg
11920B	  %201:gr64_nosp = DEC64r %201:gr64_nosp(tied-def 0), implicit-def dead $eflags
11952B	  %201:gr64_nosp = nsw IMUL64rr %201:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
11968B	  %202:gr64 = LEA64r %199:gr64, 8, %201:gr64_nosp, 0, $noreg
11984B	  %209:fr64 = MOVSDrm_alt %202:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx625)
12016B	  %205:gr64_nosp = DEC64r %205:gr64_nosp(tied-def 0), implicit-def dead $eflags
12048B	  %205:gr64_nosp = nsw IMUL64rr %205:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
12064B	  %206:gr64 = LEA64r %196:gr64, 8, %205:gr64_nosp, 0, $noreg
12080B	  %207:gr64 = LEA64r %206:gr64, 8, %201:gr64_nosp, 0, $noreg
12112B	  %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %207:gr64, 8, %192:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx634)
12144B	  %209:fr64 = MULSDrr %209:fr64(tied-def 0), %562:fr64
12176B	  %209:fr64 = ADDSDrm %209:fr64(tied-def 0), %191:gr64, 8, %195:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx617)
12192B	  MOVSDmr %191:gr64, 8, %195:gr64_nosp, -8, $noreg, %209:fr64 :: (store 8 into %ir.arrayidx652)
12208B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
12224B	  JMP_1 %bb.61

12240B	bb.63.for.end655:
	; predecessors: %bb.61
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

12256B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

12272B	bb.64.for.cond656:
	; predecessors: %bb.63, %bb.65
	  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)

12288B	  %141:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
12320B	  %141:gr32 = DEC32r %141:gr32(tied-def 0), implicit-def dead $eflags
12336B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %141:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
12352B	  JCC_1 %bb.66, 15, implicit $eflags
12368B	  JMP_1 %bb.65

12384B	bb.65.for.body659:
	; predecessors: %bb.64
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

12400B	  %171:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
12416B	  %145:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
12448B	  %145:gr64 = NOT64r %145:gr64(tied-def 0)
12464B	  %149:gr64 = LEA64r %145:gr64, 2, %171:gr64_nosp, 0, $noreg
12496B	  %149:gr64 = nsw IMUL64rr %149:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
12528B	  %149:gr64 = SHL64ri %149:gr64(tied-def 0), 3, implicit-def dead $eflags
12560B	  %149:gr64 = ADD64rm %149:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
12576B	  %166:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
12592B	  %153:gr64 = MOVSX64rm32 %stack.15.d2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d2)
12624B	  %153:gr64 = NOT64r %153:gr64(tied-def 0)
12640B	  %155:gr64_nosp = LEA64r %153:gr64, 2, %166:gr64_nosp, 0, $noreg
12672B	  %155:gr64_nosp = nsw IMUL64rr %155:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
12688B	  %156:gr64 = LEA64r %149:gr64, 8, %155:gr64_nosp, 0, $noreg
12704B	  %157:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
12720B	  %160:gr64_nosp = LEA64r %157:gr64_nosp, 1, %157:gr64_nosp, 0, $noreg
12736B	  %159:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
12768B	  %160:gr64_nosp = nsw SUB64rr %160:gr64_nosp(tied-def 0), %159:gr64, implicit-def dead $eflags
12784B	  %161:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
12800B	  %163:gr64_nosp = COPY %171:gr64_nosp
12816B	  %163:gr64_nosp = nsw IMUL64rr %163:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
12832B	  %164:gr64 = LEA64r %161:gr64, 8, %163:gr64_nosp, 0, $noreg
12864B	  %166:gr64_nosp = DEC64r %166:gr64_nosp(tied-def 0), implicit-def dead $eflags
12896B	  %166:gr64_nosp = nsw IMUL64rr %166:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
12912B	  %167:gr64 = LEA64r %164:gr64, 8, %166:gr64_nosp, 0, $noreg
12928B	  %174:fr64 = MOVSDrm_alt %167:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx681)
12960B	  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %167:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx689)
12992B	  %171:gr64_nosp = DEC64r %171:gr64_nosp(tied-def 0), implicit-def dead $eflags
13024B	  %171:gr64_nosp = nsw IMUL64rr %171:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
13040B	  %172:gr64 = LEA64r %161:gr64, 8, %171:gr64_nosp, 0, $noreg
13056B	  %173:gr64 = LEA64r %172:gr64, 8, %166:gr64_nosp, 0, $noreg
13088B	  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx698)
13120B	  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %173:gr64, 8, %157:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx708)
13152B	  %174:fr64 = MULSDrr %174:fr64(tied-def 0), %564:fr64
13184B	  %174:fr64 = ADDSDrm %174:fr64(tied-def 0), %156:gr64, 8, %160:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx674)
13200B	  MOVSDmr %156:gr64, 8, %160:gr64_nosp, -8, $noreg, %174:fr64 :: (store 8 into %ir.arrayidx726)
13216B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
13232B	  JMP_1 %bb.64

13248B	bb.66.for.end729:
	; predecessors: %bb.64
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

13264B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
13280B	  JMP_1 %bb.59

13296B	bb.67.for.end732:
	; predecessors: %bb.59
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

13312B	  MOV32mi %stack.12.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

13328B	bb.68.for.cond733:
	; predecessors: %bb.67, %bb.75
	  successors: %bb.69(0x7c000000), %bb.76(0x04000000); %bb.69(96.88%), %bb.76(3.12%)

13344B	  %43:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
13376B	  %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags
13392B	  CMP32mr %stack.12.i2, 1, $noreg, 0, $noreg, %43:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
13408B	  JCC_1 %bb.76, 15, implicit $eflags
13424B	  JMP_1 %bb.69

13440B	bb.69.for.body736:
	; predecessors: %bb.68
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

13456B	  %45:gr32 = MOV32rm %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
13472B	  MOV32mr %stack.13.i1, 1, $noreg, 0, $noreg, %45:gr32 :: (store 4 into %ir.i1)

13488B	bb.70.for.cond737:
	; predecessors: %bb.69, %bb.71
	  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)

13504B	  %48:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
13536B	  %48:gr32 = DEC32r %48:gr32(tied-def 0), implicit-def dead $eflags
13552B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
13568B	  JCC_1 %bb.72, 15, implicit $eflags
13584B	  JMP_1 %bb.71

13600B	bb.71.for.body740:
	; predecessors: %bb.70
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

13616B	  %126:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
13632B	  %98:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
13664B	  %98:gr64 = NOT64r %98:gr64(tied-def 0)
13680B	  %102:gr64 = LEA64r %98:gr64, 2, %126:gr64_nosp, 0, $noreg
13712B	  %102:gr64 = nsw IMUL64rr %102:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
13744B	  %102:gr64 = SHL64ri %102:gr64(tied-def 0), 3, implicit-def dead $eflags
13776B	  %102:gr64 = ADD64rm %102:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
13792B	  %122:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
13808B	  %106:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
13840B	  %106:gr64 = NOT64r %106:gr64(tied-def 0)
13856B	  %108:gr64_nosp = LEA64r %106:gr64, 2, %122:gr64_nosp, 0, $noreg
13888B	  %108:gr64_nosp = nsw IMUL64rr %108:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
13904B	  %109:gr64 = LEA64r %102:gr64, 8, %108:gr64_nosp, 0, $noreg
13920B	  %110:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
13936B	  %113:gr64_nosp = LEA64r %110:gr64_nosp, 1, %110:gr64_nosp, 0, $noreg
13952B	  %112:gr64 = MOVSX64rm32 %stack.14.d1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.d1)
13984B	  %113:gr64_nosp = nsw SUB64rr %113:gr64_nosp(tied-def 0), %112:gr64, implicit-def dead $eflags
14000B	  %114:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
14016B	  %116:gr64_nosp = COPY %126:gr64_nosp
14032B	  %116:gr64_nosp = nsw IMUL64rr %116:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
14048B	  %117:gr64 = LEA64r %114:gr64, 8, %116:gr64_nosp, 0, $noreg
14064B	  %118:gr64_nosp = COPY %122:gr64_nosp
14080B	  %118:gr64_nosp = nsw IMUL64rr %118:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
14096B	  %119:gr64 = LEA64r %117:gr64, 8, %118:gr64_nosp, 0, $noreg
14112B	  %129:fr64 = MOVSDrm_alt %119:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx762)
14144B	  %122:gr64_nosp = DEC64r %122:gr64_nosp(tied-def 0), implicit-def dead $eflags
14176B	  %122:gr64_nosp = nsw IMUL64rr %122:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
14192B	  %123:gr64 = LEA64r %117:gr64, 8, %122:gr64_nosp, 0, $noreg
14224B	  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %123:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx770)
14256B	  %126:gr64_nosp = DEC64r %126:gr64_nosp(tied-def 0), implicit-def dead $eflags
14288B	  %126:gr64_nosp = nsw IMUL64rr %126:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
14304B	  %127:gr64 = LEA64r %114:gr64, 8, %126:gr64_nosp, 0, $noreg
14320B	  %128:gr64 = LEA64r %127:gr64, 8, %118:gr64_nosp, 0, $noreg
14352B	  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %128:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx779)
14368B	  %130:gr64 = LEA64r %127:gr64, 8, %122:gr64_nosp, 0, $noreg
14400B	  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %130:gr64, 8, %110:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx789)
14432B	  %129:fr64 = MULSDrr %129:fr64(tied-def 0), %564:fr64
14464B	  %129:fr64 = ADDSDrm %129:fr64(tied-def 0), %109:gr64, 8, %113:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx755)
14480B	  MOVSDmr %109:gr64, 8, %113:gr64_nosp, -8, $noreg, %129:fr64 :: (store 8 into %ir.arrayidx807)
14496B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
14512B	  JMP_1 %bb.70

14528B	bb.72.for.end810:
	; predecessors: %bb.70
	  successors: %bb.73(0x80000000); %bb.73(100.00%)

14544B	  MOV32mi %stack.13.i1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i1)

14560B	bb.73.for.cond811:
	; predecessors: %bb.72, %bb.74
	  successors: %bb.74(0x7c000000), %bb.75(0x04000000); %bb.74(96.88%), %bb.75(3.12%)

14576B	  %52:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
14608B	  %52:gr32 = DEC32r %52:gr32(tied-def 0), implicit-def dead $eflags
14624B	  CMP32mr %stack.13.i1, 1, $noreg, 0, $noreg, %52:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i1)
14640B	  JCC_1 %bb.75, 15, implicit $eflags
14656B	  JMP_1 %bb.74

14672B	bb.74.for.body814:
	; predecessors: %bb.73
	  successors: %bb.73(0x80000000); %bb.73(100.00%)

14688B	  %86:gr64_nosp = MOVSX64rm32 %stack.11.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
14704B	  %56:gr64 = MOVSX64rm32 %stack.19.t3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t3)
14736B	  %56:gr64 = NOT64r %56:gr64(tied-def 0)
14752B	  %60:gr64 = LEA64r %56:gr64, 2, %86:gr64_nosp, 0, $noreg
14784B	  %60:gr64 = nsw IMUL64rr %60:gr64(tied-def 0), %338:gr64_with_sub_8bit, implicit-def dead $eflags
14816B	  %60:gr64 = SHL64ri %60:gr64(tied-def 0), 3, implicit-def dead $eflags
14848B	  %60:gr64 = ADD64rm %60:gr64(tied-def 0), %stack.10.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
14864B	  %80:gr64_nosp = MOVSX64rm32 %stack.12.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
14880B	  %64:gr64 = MOVSX64rm32 %stack.18.t2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t2)
14912B	  %64:gr64 = NOT64r %64:gr64(tied-def 0)
14928B	  %66:gr64_nosp = LEA64r %64:gr64, 2, %80:gr64_nosp, 0, $noreg
14960B	  %66:gr64_nosp = nsw IMUL64rr %66:gr64_nosp(tied-def 0), %3:gr64_with_sub_8bit, implicit-def dead $eflags
14976B	  %67:gr64 = LEA64r %60:gr64, 8, %66:gr64_nosp, 0, $noreg
14992B	  %68:gr64_nosp = MOVSX64rm32 %stack.13.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
15008B	  %71:gr64_nosp = LEA64r %68:gr64_nosp, 1, %68:gr64_nosp, 0, $noreg
15024B	  %70:gr64 = MOVSX64rm32 %stack.17.t1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.t1)
15056B	  %71:gr64_nosp = nsw SUB64rr %71:gr64_nosp(tied-def 0), %70:gr64, implicit-def dead $eflags
15072B	  %72:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
15088B	  %74:gr64_nosp = COPY %86:gr64_nosp
15104B	  %74:gr64_nosp = nsw IMUL64rr %74:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
15120B	  %75:gr64 = LEA64r %72:gr64, 8, %74:gr64_nosp, 0, $noreg
15136B	  %76:gr64_nosp = COPY %80:gr64_nosp
15152B	  %76:gr64_nosp = nsw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
15168B	  %77:gr64 = LEA64r %75:gr64, 8, %76:gr64_nosp, 0, $noreg
15184B	  %83:fr64 = MOVSDrm_alt %77:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx835)
15216B	  %80:gr64_nosp = DEC64r %80:gr64_nosp(tied-def 0), implicit-def dead $eflags
15248B	  %80:gr64_nosp = nsw IMUL64rr %80:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
15264B	  %81:gr64 = LEA64r %75:gr64, 8, %80:gr64_nosp, 0, $noreg
15296B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx842)
15328B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %77:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx850)
15360B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %81:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx859)
15392B	  %86:gr64_nosp = DEC64r %86:gr64_nosp(tied-def 0), implicit-def dead $eflags
15424B	  %86:gr64_nosp = nsw IMUL64rr %86:gr64_nosp(tied-def 0), %354:gr64_with_sub_8bit, implicit-def dead $eflags
15440B	  %87:gr64 = LEA64r %72:gr64, 8, %86:gr64_nosp, 0, $noreg
15456B	  %88:gr64 = LEA64r %87:gr64, 8, %76:gr64_nosp, 0, $noreg
15488B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx867)
15504B	  %90:gr64 = LEA64r %87:gr64, 8, %80:gr64_nosp, 0, $noreg
15536B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx876)
15568B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %88:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx885)
15600B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %90:gr64, 8, %68:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx895)
15632B	  %83:fr64 = MULSDrr %83:fr64(tied-def 0), %568:fr64
15664B	  %83:fr64 = ADDSDrm %83:fr64(tied-def 0), %67:gr64, 8, %71:gr64_nosp, -8, $noreg :: (load 8 from %ir.arrayidx829)
15680B	  MOVSDmr %67:gr64, 8, %71:gr64_nosp, -8, $noreg, %83:fr64 :: (store 8 into %ir.arrayidx913)
15696B	  INC32m %stack.13.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
15712B	  JMP_1 %bb.73

15728B	bb.75.for.end916:
	; predecessors: %bb.73
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

15744B	  INC32m %stack.12.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
15760B	  JMP_1 %bb.68

15776B	bb.76.for.end919:
	; predecessors: %bb.68
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

15792B	  INC32m %stack.11.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
15808B	  JMP_1 %bb.57

15824B	bb.77.if.end923:
	; predecessors: %bb.57, %bb.6
	  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

15840B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
15856B	  JCC_1 %bb.79, 4, implicit $eflags
15872B	  JMP_1 %bb.78

15888B	bb.78.if.then925:
	; predecessors: %bb.77
	  successors: %bb.79(0x80000000); %bb.79(100.00%)

15904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
15936B	  $edi = MOV32ri 7
15952B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
15968B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

15984B	bb.79.if.end926:
	; predecessors: %bb.77, %bb.78
	  successors: %bb.80(0x40000000), %bb.81(0x40000000); %bb.80(50.00%), %bb.81(50.00%)

16000B	  CMP32mi8 $rip, 1, $noreg, @debug_vec, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 0)`, align 16)
16016B	  JCC_1 %bb.81, 14, implicit $eflags
16032B	  JMP_1 %bb.80

16048B	bb.80.if.then928:
	; predecessors: %bb.79
	  successors: %bb.81(0x80000000); %bb.81(100.00%)

16064B	  %367:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
16080B	  %368:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
16096B	  %369:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
16112B	  %370:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
16128B	  %372:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
16160B	  %372:gr32 = DEC32r %372:gr32(tied-def 0), implicit-def dead $eflags
16176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16272B	  $r8 = MOV32ri64 @.str.56
16276B	  $rdi = COPY %367:gr64
16280B	  $esi = COPY %368:gr32
16288B	  $edx = COPY %369:gr32
16296B	  $ecx = COPY %370:gr32
16304B	  $r9d = COPY %372:gr32
16312B	  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
16320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16336B	  %374:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
16352B	  %375:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
16368B	  %376:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
16384B	  %377:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
16400B	  %378:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.k.addr, align 16)
16416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16512B	  $r8 = MOV32ri64 @.str.57
16516B	  $rdi = COPY %374:gr64
16520B	  $esi = COPY %375:gr32
16528B	  $edx = COPY %376:gr32
16536B	  $ecx = COPY %377:gr32
16544B	  $r9d = COPY %378:gr32
16552B	  CALL64pcrel32 @rep_nrm, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9d, implicit-def $rsp, implicit-def $ssp
16560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

16576B	bb.81.if.end930:
	; predecessors: %bb.79, %bb.80
	  successors: %bb.82(0x40000000), %bb.83(0x40000000); %bb.82(50.00%), %bb.83(50.00%)

16592B	  %380:gr32 = MOV32rm $rip, 1, $noreg, @debug_vec + 20, $noreg :: (dereferenceable load 4 from `i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 5)`)
16608B	  CMP32rm %380:gr32, %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.k.addr, align 16)
16624B	  JCC_1 %bb.83, 12, implicit $eflags
16640B	  JMP_1 %bb.82

16656B	bb.82.if.then932:
	; predecessors: %bb.81
	  successors: %bb.83(0x80000000); %bb.83(100.00%)

16672B	  %382:gr64 = MOV64rm %stack.9.z, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.z)
16688B	  %383:gr32 = MOV32rm %stack.1.mm1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm1.addr)
16704B	  %384:gr32 = MOV32rm %stack.2.mm2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm2.addr)
16720B	  %385:gr32 = MOV32rm %stack.3.mm3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.mm3.addr)
16736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16752B	  $rdi = COPY %382:gr64
16768B	  $esi = COPY %383:gr32
16784B	  $edx = COPY %384:gr32
16800B	  $ecx = COPY %385:gr32
16816B	  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
16832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16848B	  %386:gr64 = MOV64rm %stack.10.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
16864B	  %387:gr32 = MOV32rm %stack.5.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
16880B	  %388:gr32 = MOV32rm %fixed-stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr, align 16)
16896B	  %389:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr, align 8)
16912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
16928B	  $rdi = COPY %386:gr64
16944B	  $esi = COPY %387:gr32
16960B	  $edx = COPY %388:gr32
16976B	  $ecx = COPY %389:gr32
16992B	  CALL64pcrel32 @showall, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
17008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

17024B	bb.83.if.end933:
	; predecessors: %bb.81, %bb.82

17040B	  RET 0

# End machine code for function interp.

Before MISched:
# Machine code for function comm3: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %2, $esi in %3, $edx in %4, $ecx in %5, $r8d in %6

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $rdi, $esi, $edx, $ecx, $r8d
  %6:gr32 = COPY $r8d
  %5:gr32 = COPY $ecx
  %4:gr32 = COPY $edx
  %3:gr32 = COPY $esi
  %2:gr64 = COPY $rdi
  MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.ou.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  MOV32mr %stack.4.kk.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.kk.addr)
  undef %76.sub_32bit:gr64_nosp = MOV32rr %4:gr32
  undef %1.sub_32bit:gr64_nosp = MOV32rr %3:gr32
  MOV64mr %stack.5.u, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.u)
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  %76:gr64_nosp = nuw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %12:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %12:gr32 = DEC32r %12:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.8, 13, implicit killed $eflags
  JMP_1 %bb.4

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.7.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

bb.5.for.cond1:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %73:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %73:gr32 = DEC32r %73:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.7.i2, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  JCC_1 %bb.7, 13, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body4:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %78:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  %78:gr64 = SHL64ri %78:gr64(tied-def 0), 3, implicit-def dead $eflags
  %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %81:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
  %83:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
  MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
  %87:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  %87:gr64 = SHL64ri %87:gr64(tied-def 0), 3, implicit-def dead $eflags
  %87:gr64 = ADD64rm %87:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %90:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
  %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
  %93:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
  INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.8.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.3

bb.8.for.end29:
; predecessors: %bb.3
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)

bb.9.for.cond30:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %16:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %16:gr32 = DEC32r %16:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %16:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  JCC_1 %bb.14, 13, implicit killed $eflags
  JMP_1 %bb.10

bb.10.for.body33:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  MOV32mi %stack.6.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.11.for.cond34:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %47:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %47:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.13, 13, implicit killed $eflags
  JMP_1 %bb.12

bb.12.for.body36:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %52:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  %52:gr64 = SHL64ri %52:gr64(tied-def 0), 3, implicit-def dead $eflags
  %52:gr64 = ADD64rm %52:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %56:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %56:gr64_nosp = ADD64ri8 %56:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
  %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
  %58:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
  MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
  %62:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  %62:gr64 = SHL64ri %62:gr64(tied-def 0), 3, implicit-def dead $eflags
  %62:gr64 = ADD64rm %62:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
  %65:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
  %69:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  %69:gr64_nosp = DEC64r %69:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
  MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
  INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.11

bb.13.for.end63:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  INC32m %stack.8.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.9

bb.14.for.end66:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  MOV32mi %stack.7.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

bb.15.for.cond67:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

  %18:gr32 = MOV32rm %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  CMP32rm %18:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  JCC_1 %bb.20, 13, implicit killed $eflags
  JMP_1 %bb.16

bb.16.for.body69:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  MOV32mi %stack.6.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.17.for.cond70:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %21:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %21:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  JCC_1 %bb.19, 13, implicit killed $eflags
  JMP_1 %bb.18

bb.18.for.body72:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %23:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %27:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %27:gr64_nosp = ADD64ri8 %27:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
  %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
  %30:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
  %32:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
  %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
  MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
  %35:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
  %38:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
  %40:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
  %44:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  %44:gr64_nosp = DEC64r %44:gr64_nosp(tied-def 0), implicit-def dead $eflags
  %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
  %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
  MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
  INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.17

bb.19.for.end99:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.15

bb.20.for.end102:
; predecessors: %bb.15
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.22, 4, implicit killed $eflags
  JMP_1 %bb.21

bb.21.if.then104:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.22.if.end105:
; predecessors: %bb.20, %bb.21

  RET 0

# End machine code for function comm3.

********** MI Scheduling **********
comm3:%bb.0 entry
  From: %6:gr32 = COPY $r8d
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=10
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH 
Live Out: %1 %76 
Live Thru: 
  LiveReg: %1
  LiveReg: %76
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=7
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %6:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%6
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %5:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(2):   %4:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
    SU(7): Data Latency=0 Reg=%4
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(3):   %3:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%3
    SU(6): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(4):   %2:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%2
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(5):   MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.ou.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %stack.4.kk.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.kk.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   undef %76.sub_32bit:gr64_nosp = MOV32rr %4:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   undef %1.sub_32bit:gr64_nosp = MOV32rr %3:gr32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   MOV64mr %stack.5.u, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.u)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 13 
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(13) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV64mr %stack.5.u, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.u)
Bottom Pressure:
GR16=6
  LiveReg: %2
  UpdateRegP: SU(5) MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.ou.addr)
              to 
  UpdateRegP: SU(12) MOV64mr %stack.5.u, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.u)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 10 9 8 7 6 
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) undef %1.sub_32bit:gr64_nosp = MOV32rr %3:gr32
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(6) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(11) undef %1.sub_32bit:gr64_nosp = MOV32rr %3:gr32
              to GR16 -2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 10 9 8 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) undef %76.sub_32bit:gr64_nosp = MOV32rr %4:gr32
Bottom Pressure:
GR16=6
  LiveReg: %4
  UpdateRegP: SU(7) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
              to 
  UpdateRegP: SU(10) undef %76.sub_32bit:gr64_nosp = MOV32rr %4:gr32
              to GR16 -2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 9 8 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.4.kk.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.kk.addr)
Bottom Pressure:
GR16=8
  LiveReg: %6
  UpdateRegP: SU(9) MOV32mr %stack.4.kk.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.kk.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 8 0 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=10
  LiveReg: %5
  UpdateRegP: SU(8) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 0 1 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 1 0 2 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=10
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 1 0 3 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.ou.addr)
Bottom Pressure:
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %2:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=9
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %3:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=8
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %4:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %5:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %6:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=7
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %6:gr32 = COPY $r8d
SU(1):   %5:gr32 = COPY $ecx
SU(2):   %4:gr32 = COPY $edx
SU(3):   %3:gr32 = COPY $esi
SU(4):   %2:gr64 = COPY $rdi
SU(5):   MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.ou.addr)
SU(6):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
SU(7):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
SU(8):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
SU(9):   MOV32mr %stack.4.kk.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.kk.addr)
SU(10):   undef %76.sub_32bit:gr64_nosp = MOV32rr %4:gr32
SU(11):   undef %1.sub_32bit:gr64_nosp = MOV32rr %3:gr32
SU(12):   MOV64mr %stack.5.u, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.u)
SU(13):   CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
comm3:%bb.2 if.end
  From: MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %76:gr64_nosp = nuw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %76:gr64_nosp = nuw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
SU(1):   %76:gr64_nosp = nuw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags

********** MI Scheduling **********
comm3:%bb.3 for.cond
  From: %12:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
    To: JCC_1 %bb.8, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%12
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %12:gr32 = DEC32r %12:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%12
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%12
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %12:gr32 = DEC32r %12:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %12:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(1):   %12:gr32 = DEC32r %12:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
comm3:%bb.5 for.cond1
  From: %73:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
    To: JCC_1 %bb.7, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %73:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%73
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %73:gr32 = DEC32r %73:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%73
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.7.i2, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%73
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.7.i2, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %73:gr32 = DEC32r %73:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %73:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(1):   %73:gr32 = DEC32r %73:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.7.i2, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
comm3:%bb.6 for.body4
  From: %78:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.5
 RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=12
Live In: %1 %76 
Live Out: %1 %76 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(5) %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to 
  UpdateRegP: SU(15) %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to 
  LiveReg: %76
  UpdateRegP: SU(1) %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to 
  UpdateRegP: SU(11) %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %78:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 33
  Successors:
    SU(1): Data Latency=4 Reg=%78
    SU(1): Out  Latency=0
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 29
  Predecessors:
    SU(0): Data Latency=4 Reg=%78
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%78
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %78:gr64 = SHL64ri %78:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 28
  Predecessors:
    SU(1): Data Latency=1 Reg=%78
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%78
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 27
  Predecessors:
    SU(2): Data Latency=1 Reg=%78
    SU(2): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%78
    SU(6): Data Latency=4 Reg=%78
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %81:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(5): Data Latency=4 Reg=%81
    SU(5): Out  Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 24
  Predecessors:
    SU(4): Data Latency=4 Reg=%81
    SU(4): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%81
    SU(6): Data Latency=1 Reg=%81
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 23
  Predecessors:
    SU(3): Data Latency=4 Reg=%78
    SU(5): Data Latency=1 Reg=%81
  Successors:
    SU(8): Data Latency=1 Reg=%82
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %83:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(8): Data Latency=4 Reg=%83
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 22
  Predecessors:
    SU(6): Data Latency=1 Reg=%82
    SU(7): Data Latency=4 Reg=%83
  Successors:
    SU(9): Data Latency=4 Reg=%84
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(9):   MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
  # preds left       : 8
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 18
  Predecessors:
    SU(8): Data Latency=4 Reg=%84
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%81
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%78
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(10):   %87:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 17
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%87
    SU(11): Out  Latency=0
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 13
  Predecessors:
    SU(10): Data Latency=4 Reg=%87
    SU(10): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%87
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %87:gr64 = SHL64ri %87:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 12
  Predecessors:
    SU(11): Data Latency=1 Reg=%87
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%87
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %87:gr64 = ADD64rm %87:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 11
  Predecessors:
    SU(12): Data Latency=1 Reg=%87
    SU(12): Out  Latency=0
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%87
    SU(16): Data Latency=4 Reg=%87
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %90:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 12
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%90
    SU(15): Out  Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 8
  Predecessors:
    SU(14): Data Latency=4 Reg=%90
    SU(14): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%90
    SU(16): Data Latency=1 Reg=%90
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 4
  Predecessors:
    SU(13): Data Latency=4 Reg=%87
    SU(15): Data Latency=1 Reg=%90
  Successors:
    SU(19): Data Latency=1 Reg=%91
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 26
  Height             : 7
  Predecessors:
    SU(13): Data Latency=4 Reg=%87
    SU(15): Data Latency=1 Reg=%90
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%92
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(18):   %93:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 7
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%93
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 3
  Predecessors:
    SU(16): Data Latency=1 Reg=%91
    SU(18): Ord  Latency=0 Memory
    SU(17): Data Latency=4 Reg=%92
    SU(17): Ord  Latency=0 Memory
    SU(18): Data Latency=4 Reg=%93
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(20):   INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 3
  Predecessors:
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 33
  Height             : 0
  Predecessors:
    SU(20): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 33
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(20) 30c
  BotQ.A BotLatency SU(20) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %91
  UpdateRegP: SU(19) MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %93
  UpdateRegP: SU(19) MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
              to FR32 1    FR32X 1
  LiveReg: %92
  UpdateRegP: SU(19) MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 17 18 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %93:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @7c
  BotQ.A BotLatency SU(18) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
Bottom Pressure:
GR16=10
  LiveReg: %87
  UpdateRegP: SU(16) %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(17) %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %90
  UpdateRegP: SU(16) %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(17) %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 15 
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %90
  UpdateRegP: SU(15) %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(15) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %90:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @12c
  BotQ.A BotLatency SU(14) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %87:gr64 = ADD64rm %87:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=6
  LiveReg: %87
  UpdateRegP: SU(13) %87:gr64 = ADD64rm %87:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %87:gr64 = SHL64ri %87:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %87
  UpdateRegP: SU(12) %87:gr64 = SHL64ri %87:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %87
  UpdateRegP: SU(11) %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(11) 13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %87:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @17c
  BotQ.A BotLatency SU(10) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %78
  UpdateRegP: SU(6) %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(9) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %81
  UpdateRegP: SU(6) %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(9) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
              to FR32 1    FR32X 1
  LiveReg: %84
  UpdateRegP: SU(9) MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
              to 
  Ready @18c
  BotQ.A BotLatency SU(9) 18c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
Bottom Pressure:
GR16=12
  LiveReg: %82
  UpdateRegP: SU(8) %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %83
  UpdateRegP: SU(8) %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
              to FR32 -1    FR32X -1
  Ready @22c
  BotQ.A BotLatency SU(8) 22c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %83:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
Bottom Pressure:
GR16=10
  Ready @26c
  BotQ.A BotLatency SU(7) 26c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  Ready @23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %81
  UpdateRegP: SU(5) %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @24c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %81:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @28c
  BotQ.A BotLatency SU(4) 28c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=6
  LiveReg: %78
  UpdateRegP: SU(3) %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @27c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %78:gr64 = SHL64ri %78:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %78
  UpdateRegP: SU(2) %78:gr64 = SHL64ri %78:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @28c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %78
  UpdateRegP: SU(1) %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @29c
  BotQ.A BotLatency SU(1) 29c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %78:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @33c
  BotQ.A BotLatency SU(0) 33c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 33c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %78:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
SU(2):   %78:gr64 = SHL64ri %78:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(4):   %81:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
SU(6):   %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
SU(7):   %83:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(8):   %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
SU(9):   MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
SU(10):   %87:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(11):   %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
SU(12):   %87:gr64 = SHL64ri %87:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(13):   %87:gr64 = ADD64rm %87:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(14):   %90:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(15):   %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
SU(16):   %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
SU(17):   %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
SU(18):   %93:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
SU(19):   MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
SU(20):   INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)

********** MI Scheduling **********
comm3:%bb.9 for.cond30
  From: %16:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
    To: JCC_1 %bb.14, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %16:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%16
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %16:gr32 = DEC32r %16:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%16
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %16:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%16
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %16:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %16:gr32 = DEC32r %16:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %16:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(1):   %16:gr32 = DEC32r %16:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %16:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)

********** MI Scheduling **********
comm3:%bb.11 for.cond34
  From: %47:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.13, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   CMP32rm %47:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %47:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %47:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %47:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)

********** MI Scheduling **********
comm3:%bb.12 for.body36
  From: %52:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JMP_1 %bb.11
 RegionInstrs: 24
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=10
Live In: %1 %76 
Live Out: %1 %76 
Live Thru: GR16=4
  LiveReg: %1
  UpdateRegP: SU(6) %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to 
  UpdateRegP: SU(15) %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(20) %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to 
  LiveReg: %76
  UpdateRegP: SU(1) %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to 
  UpdateRegP: SU(12) %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %52:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(1): Data Latency=4 Reg=%52
    SU(1): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(0): Data Latency=4 Reg=%52
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%52
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %52:gr64 = SHL64ri %52:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 29
  Predecessors:
    SU(1): Data Latency=1 Reg=%52
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%52
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %52:gr64 = ADD64rm %52:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 28
  Predecessors:
    SU(2): Data Latency=1 Reg=%52
    SU(2): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%52
    SU(7): Data Latency=4 Reg=%52
    SU(22): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %56:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(5): Data Latency=4 Reg=%56
    SU(5): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %56:gr64_nosp = ADD64ri8 %56:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=%56
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%56
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 25
  Predecessors:
    SU(5): Data Latency=1 Reg=%56
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%56
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 24
  Predecessors:
    SU(3): Data Latency=4 Reg=%52
    SU(6): Data Latency=1 Reg=%56
  Successors:
    SU(9): Data Latency=1 Reg=%57
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %58:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(10): Data Latency=4 Reg=%58
    SU(9): Data Latency=4 Reg=%58
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 23
  Predecessors:
    SU(7): Data Latency=1 Reg=%57
    SU(8): Data Latency=4 Reg=%58
  Successors:
    SU(10): Data Latency=4 Reg=%59
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(10):   MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
  # preds left       : 8
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 19
  Predecessors:
    SU(9): Data Latency=4 Reg=%59
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%58
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%52
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(11):   %62:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 18
  Predecessors:
    SU(10): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%62
    SU(12): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(11): Data Latency=4 Reg=%62
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%62
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %62:gr64 = SHL64ri %62:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 13
  Predecessors:
    SU(12): Data Latency=1 Reg=%62
    SU(12): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%62
    SU(14): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %62:gr64 = ADD64rm %62:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 12
  Predecessors:
    SU(13): Data Latency=1 Reg=%62
    SU(13): Out  Latency=0
    SU(10): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%62
    SU(15): Data Latency=4 Reg=%62
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 8
  Predecessors:
    SU(14): Data Latency=4 Reg=%62
  Successors:
    SU(17): Data Latency=1 Reg=%64
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %65:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 11
  Predecessors:
    SU(10): Ord  Latency=1 Memory
  Successors:
    SU(22): Data Latency=4 Reg=%65
    SU(17): Data Latency=4 Reg=%65
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 27
  Height             : 7
  Predecessors:
    SU(15): Data Latency=1 Reg=%64
    SU(16): Data Latency=4 Reg=%65
    SU(10): Ord  Latency=1 Memory
  Successors:
    SU(22): Data Latency=4 Reg=%66
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(18):   %69:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 10
  Predecessors:
    SU(10): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%69
    SU(19): Out  Latency=0
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(19):   %69:gr64_nosp = DEC64r %69:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 6
  Predecessors:
    SU(18): Data Latency=4 Reg=%69
    SU(18): Out  Latency=0
  Successors:
    SU(20): Data Latency=1 Reg=%69
    SU(20): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 5
  Predecessors:
    SU(19): Data Latency=1 Reg=%69
    SU(19): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%69
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 4
  Predecessors:
    SU(14): Data Latency=4 Reg=%62
    SU(20): Data Latency=1 Reg=%69
  Successors:
    SU(22): Data Latency=1 Reg=%70
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(22):   MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 3
  Predecessors:
    SU(17): Data Latency=4 Reg=%66
    SU(18): Ord  Latency=0 Memory
    SU(21): Data Latency=1 Reg=%70
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=4 Reg=%65
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(23): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(23):   INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 3
  Predecessors:
    SU(22): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 34
  Height             : 0
  Predecessors:
    SU(23): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 34
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 
Scheduling SU(23) INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(23) 31c
  BotQ.A BotLatency SU(23) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Scheduling SU(22) MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %70
  UpdateRegP: SU(22) MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %65
  UpdateRegP: SU(17) %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(22) MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
              to FR32 1    FR32X 1
  LiveReg: %66
  UpdateRegP: SU(22) MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 17 
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %62
  UpdateRegP: SU(15) %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(21) %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
              to 
  LiveReg: %69
  UpdateRegP: SU(21) %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(21) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 20 
  Cand SU(17) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %69
  UpdateRegP: SU(20) %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(20) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 19 
  Cand SU(17) ORDER                              
  Cand SU(19) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(19) %69:gr64_nosp = DEC64r %69:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %69
  UpdateRegP: SU(19) %69:gr64_nosp = DEC64r %69:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(19) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 18 
  Cand SU(17) ORDER                              
  Cand SU(18) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(18) %69:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  Ready @10c
  BotQ.A BotLatency SU(18) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
Bottom Pressure:
GR16=10
  LiveReg: %64
  UpdateRegP: SU(17) %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
              to FR32 -1    FR32X -1
  Ready @7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 16 
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %65:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=8
  Ready @11c
  BotQ.A BotLatency SU(16) 11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  Ready @8c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %62:gr64 = ADD64rm %62:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=6
  LiveReg: %62
  UpdateRegP: SU(14) %62:gr64 = ADD64rm %62:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(14) 12c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %62:gr64 = SHL64ri %62:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %62
  UpdateRegP: SU(13) %62:gr64 = SHL64ri %62:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(13) 13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %62
  UpdateRegP: SU(12) %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @14c
  BotQ.A BotLatency SU(12) 14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %62:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @18c
  BotQ.A BotLatency SU(11) 18c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %52
  UpdateRegP: SU(7) %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(10) MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %58
  UpdateRegP: SU(9) %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(10) MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
              to FR32 1    FR32X 1
  LiveReg: %59
  UpdateRegP: SU(10) MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
              to 
  Ready @19c
  BotQ.A BotLatency SU(10) 19c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
Bottom Pressure:
GR16=10
  LiveReg: %57
  UpdateRegP: SU(9) %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
              to FR32 -1    FR32X -1
  Ready @23c
  BotQ.A BotLatency SU(9) 23c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %58:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=8
  Ready @27c
  BotQ.A BotLatency SU(8) 27c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %56
  UpdateRegP: SU(7) %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @24c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %56
  UpdateRegP: SU(6) %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @25c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %56:gr64_nosp = ADD64ri8 %56:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %56
  UpdateRegP: SU(5) %56:gr64_nosp = ADD64ri8 %56:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
              to GR16 -2
  Ready @26c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %56:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
Bottom Pressure:
GR16=6
  Ready @30c
  BotQ.A BotLatency SU(4) 30c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %52:gr64 = ADD64rm %52:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=6
  LiveReg: %52
  UpdateRegP: SU(3) %52:gr64 = ADD64rm %52:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
              to GR16 -2
  Ready @28c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %52:gr64 = SHL64ri %52:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %52
  UpdateRegP: SU(2) %52:gr64 = SHL64ri %52:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @29c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %52
  UpdateRegP: SU(1) %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @30c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %52:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @34c
  BotQ.A BotLatency SU(0) 34c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %52:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
SU(2):   %52:gr64 = SHL64ri %52:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %52:gr64 = ADD64rm %52:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(4):   %56:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(5):   %56:gr64_nosp = ADD64ri8 %56:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
SU(6):   %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
SU(7):   %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
SU(8):   %58:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(9):   %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
SU(10):   MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
SU(11):   %62:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(12):   %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
SU(13):   %62:gr64 = SHL64ri %62:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(14):   %62:gr64 = ADD64rm %62:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
SU(15):   %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
SU(16):   %65:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(17):   %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
SU(18):   %69:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
SU(19):   %69:gr64_nosp = DEC64r %69:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(20):   %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
SU(21):   %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
SU(22):   MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
SU(23):   INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** MI Scheduling **********
comm3:%bb.15 for.cond67
  From: %18:gr32 = MOV32rm %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
    To: JCC_1 %bb.20, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr32 = MOV32rm %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   CMP32rm %18:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%18
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %18:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr32 = MOV32rm %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %18:gr32 = MOV32rm %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(1):   CMP32rm %18:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)

********** MI Scheduling **********
comm3:%bb.17 for.cond70
  From: %21:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.19, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %21:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(1):   CMP32rm %21:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%21
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.19, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %21:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %21:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %21:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %21:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)

********** MI Scheduling **********
comm3:%bb.18 for.body72
  From: %23:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
    To: JMP_1 %bb.17
 RegionInstrs: 26
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=12
Live In: %76 %1 
Live Out: %76 %1 
Live Thru: GR16=4
  LiveReg: %76
  UpdateRegP: SU(3) %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to 
  UpdateRegP: SU(13) %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(21) %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to 
  LiveReg: %1
  UpdateRegP: SU(6) %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to 
  UpdateRegP: SU(15) %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %23:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(10): Data Latency=4 Reg=%23
    SU(4): Data Latency=4 Reg=%23
    SU(24): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %27:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(2): Data Latency=4 Reg=%27
    SU(2): Out  Latency=0
    SU(24): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %27:gr64_nosp = ADD64ri8 %27:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(1): Data Latency=4 Reg=%27
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%27
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(2): Data Latency=1 Reg=%27
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%27
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(3): Data Latency=1 Reg=%27
    SU(0): Data Latency=4 Reg=%23
  Successors:
    SU(7): Data Latency=1 Reg=%28
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %30:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(6): Data Latency=4 Reg=%30
    SU(6): Out  Latency=0
    SU(24): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 20
  Predecessors:
    SU(5): Data Latency=4 Reg=%30
    SU(5): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%30
    SU(7): Data Latency=1 Reg=%30
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 19
  Predecessors:
    SU(4): Data Latency=1 Reg=%28
    SU(6): Data Latency=1 Reg=%30
  Successors:
    SU(9): Data Latency=1 Reg=%31
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %32:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(11): Data Latency=4 Reg=%32
    SU(9): Data Latency=4 Reg=%32
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 18
  Predecessors:
    SU(7): Data Latency=1 Reg=%31
    SU(8): Data Latency=4 Reg=%32
  Successors:
    SU(11): Data Latency=4 Reg=%33
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(10):   %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(6): Data Latency=1 Reg=%30
    SU(0): Data Latency=4 Reg=%23
  Successors:
    SU(11): Data Latency=1 Reg=%34
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
  # preds left       : 8
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 14
  Predecessors:
    SU(9): Data Latency=4 Reg=%33
    SU(10): Data Latency=1 Reg=%34
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%32
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(19): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(12):   %35:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 13
  Predecessors:
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(22): Data Latency=4 Reg=%35
    SU(13): Data Latency=4 Reg=%35
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 9
  Predecessors:
    SU(12): Data Latency=4 Reg=%35
  Successors:
    SU(16): Data Latency=1 Reg=%36
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %38:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 13
  Predecessors:
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%38
    SU(15): Out  Latency=0
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 9
  Predecessors:
    SU(14): Data Latency=4 Reg=%38
    SU(14): Out  Latency=0
  Successors:
    SU(23): Data Latency=1 Reg=%38
    SU(16): Data Latency=1 Reg=%38
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(15): Data Latency=1 Reg=%38
    SU(13): Data Latency=1 Reg=%36
  Successors:
    SU(18): Data Latency=1 Reg=%39
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(17):   %40:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 11
  Predecessors:
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%40
    SU(18): Data Latency=4 Reg=%40
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(16): Data Latency=1 Reg=%39
    SU(17): Data Latency=4 Reg=%40
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%41
    SU(25): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(19):   %44:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 11
  Predecessors:
    SU(11): Ord  Latency=1 Memory
  Successors:
    SU(20): Data Latency=4 Reg=%44
    SU(20): Out  Latency=0
    SU(24): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   %44:gr64_nosp = DEC64r %44:gr64_nosp(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 7
  Predecessors:
    SU(19): Data Latency=4 Reg=%44
    SU(19): Out  Latency=0
  Successors:
    SU(21): Data Latency=1 Reg=%44
    SU(21): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 6
  Predecessors:
    SU(20): Data Latency=1 Reg=%44
    SU(20): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%44
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 5
  Predecessors:
    SU(21): Data Latency=1 Reg=%44
    SU(12): Data Latency=4 Reg=%35
  Successors:
    SU(23): Data Latency=1 Reg=%45
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(23):   %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 4
  Predecessors:
    SU(22): Data Latency=1 Reg=%45
    SU(15): Data Latency=1 Reg=%38
  Successors:
    SU(24): Data Latency=1 Reg=%46
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(24):   MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
  # preds left       : 14
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 3
  Predecessors:
    SU(23): Data Latency=1 Reg=%46
    SU(19): Ord  Latency=0 Memory
    SU(18): Data Latency=4 Reg=%41
    SU(18): Ord  Latency=0 Memory
    SU(17): Data Latency=4 Reg=%40
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(25):   INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 3
  Predecessors:
    SU(24): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 26
  Height             : 0
  Predecessors:
    SU(25): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 26
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(25) 23c
  BotQ.A BotLatency SU(25) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %46
  UpdateRegP: SU(24) MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %40
  UpdateRegP: SU(18) %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(24) MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
              to FR32 1    FR32X 1
  LiveReg: %41
  UpdateRegP: SU(24) MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 18 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %45
  UpdateRegP: SU(23) %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
              to 
  LiveReg: %38
  UpdateRegP: SU(16) %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(23) %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(23) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 22 
  Cand SU(18) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %35
  UpdateRegP: SU(13) %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
              to GR16 -2
  UpdateRegP: SU(22) %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
              to 
  LiveReg: %44
  UpdateRegP: SU(22) %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(22) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 21 
  Cand SU(18) ORDER                              
  Cand SU(21) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(21) %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %44
  UpdateRegP: SU(21) %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(21) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 20 
  Cand SU(18) ORDER                              
  Cand SU(20) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(20) %44:gr64_nosp = DEC64r %44:gr64_nosp(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=12
  LiveReg: %44
  UpdateRegP: SU(20) %44:gr64_nosp = DEC64r %44:gr64_nosp(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(20) 7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 19 
  Cand SU(18) ORDER                              
  Cand SU(19) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(19) %44:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @11c
  BotQ.A BotLatency SU(19) 11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
Bottom Pressure:
GR16=12
  LiveReg: %39
  UpdateRegP: SU(18) %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %40:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=10
  Ready @11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %36
  UpdateRegP: SU(16) %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @8c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 13 
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %38
  UpdateRegP: SU(15) %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %38:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=8
  Ready @13c
  BotQ.A BotLatency SU(14) 13c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=6
  Ready @9c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %35:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=4
  Ready @13c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %34
  UpdateRegP: SU(11) MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %32
  UpdateRegP: SU(9) %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(11) MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
              to FR32 1    FR32X 1
  LiveReg: %33
  UpdateRegP: SU(11) MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
              to 
  Ready @14c
  BotQ.A BotLatency SU(11) 14c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %23
  UpdateRegP: SU(4) %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(10) %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
              to 
  LiveReg: %30
  UpdateRegP: SU(7) %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
              to 
  UpdateRegP: SU(10) %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @15c
  BotQ.A BotLatency SU(10) 15c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
Bottom Pressure:
GR16=12
  LiveReg: %31
  UpdateRegP: SU(9) %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
              to FR32 -1    FR32X -1
  Ready @18c
  BotQ.A BotLatency SU(9) 18c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %32:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=10
  Ready @22c
  BotQ.A BotLatency SU(8) 22c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=10
  LiveReg: %28
  UpdateRegP: SU(7) %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @19c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=10
  LiveReg: %30
  UpdateRegP: SU(6) %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @20c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %30:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=8
  Ready @24c
  BotQ.A BotLatency SU(5) 24c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %27
  UpdateRegP: SU(4) %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @20c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %27
  UpdateRegP: SU(3) %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
              to GR16 -2
  Ready @21c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %27:gr64_nosp = ADD64ri8 %27:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %27
  UpdateRegP: SU(2) %27:gr64_nosp = ADD64ri8 %27:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
              to GR16 -2
  Ready @22c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %27:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
Bottom Pressure:
GR16=6
  Ready @26c
  BotQ.A BotLatency SU(1) 26c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %23:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
Bottom Pressure:
GR16=4
  Ready @24c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %23:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(1):   %27:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(2):   %27:gr64_nosp = ADD64ri8 %27:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
SU(3):   %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
SU(4):   %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
SU(5):   %30:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(6):   %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
SU(7):   %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
SU(8):   %32:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(9):   %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
SU(10):   %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
SU(11):   MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
SU(12):   %35:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
SU(13):   %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
SU(14):   %38:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(15):   %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
SU(16):   %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
SU(17):   %40:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(18):   %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
SU(19):   %44:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
SU(20):   %44:gr64_nosp = DEC64r %44:gr64_nosp(tied-def 0), implicit-def dead $eflags
SU(21):   %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
SU(22):   %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
SU(23):   %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
SU(24):   MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
SU(25):   INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)

********** INTERVALS **********
CH [0B,32r:0)  0@0B-phi
CL [0B,32r:0)  0@0B-phi
DH [0B,48r:0)  0@0B-phi
DIL [0B,80r:0)[352r,368r:2)[3072r,3088r:1)  0@0B-phi 1@3072r 2@352r
DIH [0B,80r:0)[352r,368r:2)[3072r,3088r:1)  0@0B-phi 1@3072r 2@352r
DL [0B,48r:0)  0@0B-phi
HCX [0B,32r:0)  0@0B-phi
HDI [0B,80r:0)[352r,368r:2)[3072r,3088r:1)  0@0B-phi 1@3072r 2@352r
HDX [0B,48r:0)  0@0B-phi
SIL [0B,64r:0)  0@0B-phi
SIH [0B,64r:0)  0@0B-phi
HSI [0B,64r:0)  0@0B-phi
R8B [0B,16r:0)  0@0B-phi
R8BH [0B,16r:0)  0@0B-phi
R8WH [0B,16r:0)  0@0B-phi
%1 [208r,2960B:0)  0@208r weight:0.000000e+00
%2 [80r,240r:0)  0@80r weight:0.000000e+00
%3 [64r,208r:0)  0@64r weight:0.000000e+00
%4 [48r,176r:0)  0@48r weight:0.000000e+00
%5 [32r,144r:0)  0@32r weight:0.000000e+00
%6 [16r,160r:0)  0@16r weight:0.000000e+00
%12 [480r,512r:0)[512r,528r:1)  0@480r 1@512r weight:0.000000e+00
%16 [1312r,1344r:0)[1344r,1360r:1)  0@1312r 1@1344r weight:0.000000e+00
%18 [2192r,2208r:0)  0@2192r weight:0.000000e+00
%21 [2304r,2320r:0)  0@2304r weight:0.000000e+00
%23 [2384r,2592r:0)  0@2384r weight:0.000000e+00
%27 [2400r,2432r:2)[2432r,2464r:0)[2464r,2480r:1)  0@2432r 1@2464r 2@2400r weight:0.000000e+00
%28 [2480r,2544r:0)  0@2480r weight:0.000000e+00
%30 [2496r,2528r:0)[2528r,2592r:1)  0@2496r 1@2528r weight:0.000000e+00
%31 [2544r,2576r:0)  0@2544r weight:0.000000e+00
%32 [2560r,2608r:0)  0@2560r weight:0.000000e+00
%33 [2576r,2608r:0)  0@2576r weight:0.000000e+00
%34 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%35 [2624r,2832r:0)  0@2624r weight:0.000000e+00
%36 [2640r,2704r:0)  0@2640r weight:0.000000e+00
%38 [2656r,2688r:0)[2688r,2848r:1)  0@2656r 1@2688r weight:0.000000e+00
%39 [2704r,2736r:0)  0@2704r weight:0.000000e+00
%40 [2720r,2864r:0)  0@2720r weight:0.000000e+00
%41 [2736r,2864r:0)  0@2736r weight:0.000000e+00
%44 [2752r,2784r:2)[2784r,2816r:0)[2816r,2832r:1)  0@2784r 1@2816r 2@2752r weight:0.000000e+00
%45 [2832r,2848r:0)  0@2832r weight:0.000000e+00
%46 [2848r,2864r:0)  0@2848r weight:0.000000e+00
%47 [1456r,1472r:0)  0@1456r weight:0.000000e+00
%52 [1536r,1568r:2)[1568r,1600r:0)[1600r,1632r:1)[1632r,1776r:3)  0@1568r 1@1600r 2@1536r 3@1632r weight:0.000000e+00
%56 [1648r,1680r:2)[1680r,1712r:0)[1712r,1728r:1)  0@1680r 1@1712r 2@1648r weight:0.000000e+00
%57 [1728r,1760r:0)  0@1728r weight:0.000000e+00
%58 [1744r,1776r:0)  0@1744r weight:0.000000e+00
%59 [1760r,1776r:0)  0@1760r weight:0.000000e+00
%62 [1792r,1824r:2)[1824r,1856r:0)[1856r,1888r:1)[1888r,2032r:3)  0@1824r 1@1856r 2@1792r 3@1888r weight:0.000000e+00
%64 [1904r,1936r:0)  0@1904r weight:0.000000e+00
%65 [1920r,2048r:0)  0@1920r weight:0.000000e+00
%66 [1936r,2048r:0)  0@1936r weight:0.000000e+00
%69 [1952r,1984r:2)[1984r,2016r:0)[2016r,2032r:1)  0@1984r 1@2016r 2@1952r weight:0.000000e+00
%70 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%73 [624r,656r:0)[656r,672r:1)  0@624r 1@656r weight:0.000000e+00
%76 [176r,448r:0)[448r,2960B:1)  0@176r 1@448r weight:0.000000e+00
%78 [736r,768r:2)[768r,800r:0)[800r,832r:1)[832r,944r:3)  0@768r 1@800r 2@736r 3@832r weight:0.000000e+00
%81 [848r,880r:0)[880r,944r:1)  0@848r 1@880r weight:0.000000e+00
%82 [896r,928r:0)  0@896r weight:0.000000e+00
%83 [912r,928r:0)  0@912r weight:0.000000e+00
%84 [928r,944r:0)  0@928r weight:0.000000e+00
%87 [960r,992r:2)[992r,1024r:0)[1024r,1056r:1)[1056r,1136r:3)  0@992r 1@1024r 2@960r 3@1056r weight:0.000000e+00
%90 [1072r,1104r:0)[1104r,1136r:1)  0@1072r 1@1104r weight:0.000000e+00
%91 [1120r,1168r:0)  0@1120r weight:0.000000e+00
%92 [1136r,1168r:0)  0@1136r weight:0.000000e+00
%93 [1152r,1168r:0)  0@1152r weight:0.000000e+00
RegMasks: 368r 3088r
********** MACHINEINSTRS **********
# Machine code for function comm3: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %2, $esi in %3, $edx in %4, $ecx in %5, $r8d in %6

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $rdi, $esi, $edx, $ecx, $r8d
16B	  %6:gr32 = COPY $r8d
32B	  %5:gr32 = COPY $ecx
48B	  %4:gr32 = COPY $edx
64B	  %3:gr32 = COPY $esi
80B	  %2:gr64 = COPY $rdi
96B	  MOV64mr %stack.0.ou.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.ou.addr)
112B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n1.addr)
128B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.n2.addr)
144B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.n3.addr)
160B	  MOV32mr %stack.4.kk.addr, 1, $noreg, 0, $noreg, %6:gr32 :: (store 4 into %ir.kk.addr)
176B	  undef %76.sub_32bit:gr64_nosp = MOV32rr %4:gr32
208B	  undef %1.sub_32bit:gr64_nosp = MOV32rr %3:gr32
240B	  MOV64mr %stack.5.u, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.u)
256B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
272B	  JCC_1 %bb.2, 4, implicit killed $eflags
288B	  JMP_1 %bb.1

304B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $edi = MOV32ri 9
368B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

400B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

416B	  MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)
448B	  %76:gr64_nosp = nuw IMUL64rr %76:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags

464B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

480B	  %12:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
512B	  %12:gr32 = DEC32r %12:gr32(tied-def 0), implicit-def dead $eflags
528B	  CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
544B	  JCC_1 %bb.8, 13, implicit killed $eflags
560B	  JMP_1 %bb.4

576B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

592B	  MOV32mi %stack.7.i2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i2)

608B	bb.5.for.cond1:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

624B	  %73:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
656B	  %73:gr32 = DEC32r %73:gr32(tied-def 0), implicit-def dead $eflags
672B	  CMP32mr %stack.7.i2, 1, $noreg, 0, $noreg, %73:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i2)
688B	  JCC_1 %bb.7, 13, implicit killed $eflags
704B	  JMP_1 %bb.6

720B	bb.6.for.body4:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

736B	  %78:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
768B	  %78:gr64 = nsw IMUL64rr %78:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
800B	  %78:gr64 = SHL64ri %78:gr64(tied-def 0), 3, implicit-def dead $eflags
832B	  %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
848B	  %81:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
880B	  %81:gr64_nosp = nsw IMUL64rr %81:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
896B	  %82:gr64 = LEA64r %78:gr64, 8, %81:gr64_nosp, 0, $noreg
912B	  %83:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
928B	  %84:fr64 = MOVSDrm_alt %82:gr64, 8, %83:gr64_nosp, -16, $noreg :: (load 8 from %ir.arrayidx9)
944B	  MOVSDmr %78:gr64, 8, %81:gr64_nosp, 0, $noreg, %84:fr64 :: (store 8 into %ir.arrayidx141)
960B	  %87:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
992B	  %87:gr64 = nsw IMUL64rr %87:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
1024B	  %87:gr64 = SHL64ri %87:gr64(tied-def 0), 3, implicit-def dead $eflags
1056B	  %87:gr64 = ADD64rm %87:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
1072B	  %90:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1104B	  %90:gr64_nosp = nsw IMUL64rr %90:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
1120B	  %91:gr64 = LEA64r %87:gr64, 8, %90:gr64_nosp, 0, $noreg
1136B	  %92:fr64 = MOVSDrm_alt %87:gr64, 8, %90:gr64_nosp, 8, $noreg :: (load 8 from %ir.arrayidx19)
1152B	  %93:gr64_nosp = MOVSX64rm32 %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)
1168B	  MOVSDmr %91:gr64, 8, %93:gr64_nosp, -8, $noreg, %92:fr64 :: (store 8 into %ir.arrayidx26)
1184B	  INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
1200B	  JMP_1 %bb.5

1216B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1232B	  INC32m %stack.8.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
1248B	  JMP_1 %bb.3

1264B	bb.8.for.end29:
	; predecessors: %bb.3
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1280B	  MOV32mi %stack.8.i3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i3)

1296B	bb.9.for.cond30:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1312B	  %16:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
1344B	  %16:gr32 = DEC32r %16:gr32(tied-def 0), implicit-def dead $eflags
1360B	  CMP32mr %stack.8.i3, 1, $noreg, 0, $noreg, %16:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i3)
1376B	  JCC_1 %bb.14, 13, implicit killed $eflags
1392B	  JMP_1 %bb.10

1408B	bb.10.for.body33:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1424B	  MOV32mi %stack.6.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

1440B	bb.11.for.cond34:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1456B	  %47:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1472B	  CMP32rm %47:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
1488B	  JCC_1 %bb.13, 13, implicit killed $eflags
1504B	  JMP_1 %bb.12

1520B	bb.12.for.body36:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1536B	  %52:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1568B	  %52:gr64 = nsw IMUL64rr %52:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
1600B	  %52:gr64 = SHL64ri %52:gr64(tied-def 0), 3, implicit-def dead $eflags
1632B	  %52:gr64 = ADD64rm %52:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
1648B	  %56:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
1680B	  %56:gr64_nosp = ADD64ri8 %56:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
1712B	  %56:gr64_nosp = nsw IMUL64rr %56:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
1728B	  %57:gr64 = LEA64r %52:gr64, 8, %56:gr64_nosp, 0, $noreg
1744B	  %58:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1760B	  %59:fr64 = MOVSDrm_alt %57:gr64, 8, %58:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx43)
1776B	  MOVSDmr %52:gr64, 8, %58:gr64_nosp, 0, $noreg, %59:fr64 :: (store 8 into %ir.arrayidx48)
1792B	  %62:gr64 = MOVSX64rm32 %stack.8.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1824B	  %62:gr64 = nsw IMUL64rr %62:gr64(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
1856B	  %62:gr64 = SHL64ri %62:gr64(tied-def 0), 3, implicit-def dead $eflags
1888B	  %62:gr64 = ADD64rm %62:gr64(tied-def 0), %stack.5.u, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.u)
1904B	  %64:gr64 = LEA64r %62:gr64, 8, %1:gr64_nosp, 0, $noreg
1920B	  %65:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1936B	  %66:fr64 = MOVSDrm_alt %64:gr64, 8, %65:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx53)
1952B	  %69:gr64_nosp = MOVSX64rm32 %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)
1984B	  %69:gr64_nosp = DEC64r %69:gr64_nosp(tied-def 0), implicit-def dead $eflags
2016B	  %69:gr64_nosp = nsw IMUL64rr %69:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
2032B	  %70:gr64 = LEA64r %62:gr64, 8, %69:gr64_nosp, 0, $noreg
2048B	  MOVSDmr %70:gr64, 8, %65:gr64_nosp, 0, $noreg, %66:fr64 :: (store 8 into %ir.arrayidx60)
2064B	  INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
2080B	  JMP_1 %bb.11

2096B	bb.13.for.end63:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2112B	  INC32m %stack.8.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
2128B	  JMP_1 %bb.9

2144B	bb.14.for.end66:
	; predecessors: %bb.9
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2160B	  MOV32mi %stack.7.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

2176B	bb.15.for.cond67:
	; predecessors: %bb.14, %bb.19
	  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

2192B	  %18:gr32 = MOV32rm %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2208B	  CMP32rm %18:gr32, %stack.2.n2.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
2224B	  JCC_1 %bb.20, 13, implicit killed $eflags
2240B	  JMP_1 %bb.16

2256B	bb.16.for.body69:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2272B	  MOV32mi %stack.6.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

2288B	bb.17.for.cond70:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2304B	  %21:gr32 = MOV32rm %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2320B	  CMP32rm %21:gr32, %stack.1.n1.addr, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.n1.addr)
2336B	  JCC_1 %bb.19, 13, implicit killed $eflags
2352B	  JMP_1 %bb.18

2368B	bb.18.for.body72:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2384B	  %23:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
2400B	  %27:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
2432B	  %27:gr64_nosp = ADD64ri8 %27:gr64_nosp(tied-def 0), -2, implicit-def dead $eflags
2464B	  %27:gr64_nosp = nsw IMUL64rr %27:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
2480B	  %28:gr64 = LEA64r %23:gr64, 8, %27:gr64_nosp, 0, $noreg
2496B	  %30:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2528B	  %30:gr64_nosp = nsw IMUL64rr %30:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
2544B	  %31:gr64 = LEA64r %28:gr64, 8, %30:gr64_nosp, 0, $noreg
2560B	  %32:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2576B	  %33:fr64 = MOVSDrm_alt %31:gr64, 8, %32:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx79)
2592B	  %34:gr64 = LEA64r %23:gr64, 8, %30:gr64_nosp, 0, $noreg
2608B	  MOVSDmr %34:gr64, 8, %32:gr64_nosp, 0, $noreg, %33:fr64 :: (store 8 into %ir.arrayidx84)
2624B	  %35:gr64 = MOV64rm %stack.5.u, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.u)
2640B	  %36:gr64 = LEA64r %35:gr64, 8, %76:gr64_nosp, 0, $noreg
2656B	  %38:gr64_nosp = MOVSX64rm32 %stack.7.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
2688B	  %38:gr64_nosp = nsw IMUL64rr %38:gr64_nosp(tied-def 0), %1:gr64_nosp, implicit-def dead $eflags
2704B	  %39:gr64 = LEA64r %36:gr64, 8, %38:gr64_nosp, 0, $noreg
2720B	  %40:gr64_nosp = MOVSX64rm32 %stack.6.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
2736B	  %41:fr64 = MOVSDrm_alt %39:gr64, 8, %40:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx89)
2752B	  %44:gr64_nosp = MOVSX64rm32 %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)
2784B	  %44:gr64_nosp = DEC64r %44:gr64_nosp(tied-def 0), implicit-def dead $eflags
2816B	  %44:gr64_nosp = nsw IMUL64rr %44:gr64_nosp(tied-def 0), %76:gr64_nosp, implicit-def dead $eflags
2832B	  %45:gr64 = LEA64r %35:gr64, 8, %44:gr64_nosp, 0, $noreg
2848B	  %46:gr64 = LEA64r %45:gr64, 8, %38:gr64_nosp, 0, $noreg
2864B	  MOVSDmr %46:gr64, 8, %40:gr64_nosp, 0, $noreg, %41:fr64 :: (store 8 into %ir.arrayidx96)
2880B	  INC32m %stack.6.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
2896B	  JMP_1 %bb.17

2912B	bb.19.for.end99:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2928B	  INC32m %stack.7.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
2944B	  JMP_1 %bb.15

2960B	bb.20.for.end102:
	; predecessors: %bb.15
	  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

2976B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
2992B	  JCC_1 %bb.22, 4, implicit killed $eflags
3008B	  JMP_1 %bb.21

3024B	bb.21.if.then104:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

3040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3072B	  $edi = MOV32ri 9
3088B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
3104B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

3120B	bb.22.if.end105:
	; predecessors: %bb.20, %bb.21

3136B	  RET 0

# End machine code for function comm3.

Before MISched:
# Machine code for function rep_nrm: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $esi in %1, $edx in %2, $ecx in %3, $r8 in %4, $r9d in %5

bb.0.entry:
  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9d
  %5:gr32 = COPY $r9d
  %4:gr64 = COPY $r8
  %3:gr32 = COPY $ecx
  %2:gr32 = COPY $edx
  %1:gr32 = COPY $esi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n3.addr)
  MOV64mr %stack.4.title.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.title.addr)
  MOV32mr %stack.5.kk.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.kk.addr)
  %6:gr64_nosp = MOVSX64rr32 %5:gr32
  undef %25.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
  undef %23.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx2)
  undef %21.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx4)
  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr64 = LEA64r %stack.6.rnm2, 1, $noreg, 0, $noreg
  %12:gr64 = LEA64r %stack.7.rnmu, 1, $noreg, 0, $noreg
  $rdi = COPY %0:gr64
  $esi = COPY %1:gr32
  $edx = COPY %2:gr32
  $ecx = COPY %3:gr32
  $r8 = COPY %11:gr64
  $r9 = COPY %12:gr64
  PUSH64r %21:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %23:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64r %25:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = MOV32rm %stack.5.kk.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.kk.addr)
  %14:gr64 = MOV64rm %stack.4.title.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.title.addr)
  %15:fr64 = MOVSDrm_alt %stack.6.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  %16:fr64 = MOVSDrm_alt %stack.7.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.51
  $esi = COPY %13:gr32
  $rdx = COPY %14:gr64
  $xmm0 = COPY %15:fr64
  $xmm1 = COPY %16:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  RET 0

# End machine code for function rep_nrm.

********** MI Scheduling **********
rep_nrm:%bb.0 entry
  From: $rdi = MOV32ri64 @.str.51
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   $rdi = MOV32ri64 @.str.51
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %13:gr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %14:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm0 = COPY %15:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $xmm1 = COPY %16:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $xmm1 = COPY %16:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm0 = COPY %15:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %14:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %13:gr32
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.51
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = MOV32ri64 @.str.51
SU(1):   $esi = COPY %13:gr32
SU(2):   $rdx = COPY %14:gr64
SU(3):   $xmm0 = COPY %15:fr64
SU(4):   $xmm1 = COPY %16:fr64
SU(5):   $al = MOV8ri 2

********** MI Scheduling **********
rep_nrm:%bb.0 entry
  From: %13:gr32 = MOV32rm %stack.5.kk.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.kk.addr)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %13:gr32 = MOV32rm %stack.5.kk.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.kk.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %14:gr64 = MOV64rm %stack.4.title.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.title.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %15:fr64 = MOVSDrm_alt %stack.6.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %16:fr64 = MOVSDrm_alt %stack.7.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %16:fr64 = MOVSDrm_alt %stack.7.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %15:fr64 = MOVSDrm_alt %stack.6.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %14:gr64 = MOV64rm %stack.4.title.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.title.addr)
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %13:gr32 = MOV32rm %stack.5.kk.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.kk.addr)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %13:gr32 = MOV32rm %stack.5.kk.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.kk.addr)
SU(1):   %14:gr64 = MOV64rm %stack.4.title.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.title.addr)
SU(2):   %15:fr64 = MOVSDrm_alt %stack.6.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
SU(3):   %16:fr64 = MOVSDrm_alt %stack.7.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)

********** MI Scheduling **********
rep_nrm:%bb.0 entry
  From: %11:gr64 = LEA64r %stack.6.rnm2, 1, $noreg, 0, $noreg
    To: PUSH64r %21:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=14
Live In: %21 %3 %2 %1 %0 
Live Out: R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
  LiveReg: %21
Top Pressure:
GR16=10
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=10
Excess PSets: 
SU(0):   %11:gr64 = LEA64r %stack.6.rnm2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%11
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %12:gr64 = LEA64r %stack.7.rnmu, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%12
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   $rdi = COPY %0:gr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(3):   $esi = COPY %1:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $edx = COPY %2:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(5):   $ecx = COPY %3:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(6):   $r8 = COPY %11:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%11
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(7):   $r9 = COPY %12:gr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%12
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
ExitSU:   PUSH64r %21:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) $r9 = COPY %12:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=11
  LiveReg: %12
  UpdateRegP: SU(7) $r9 = COPY %12:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 4 3 1 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) $r8 = COPY %11:gr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=12
  LiveReg: %11
  UpdateRegP: SU(6) $r8 = COPY %11:gr64
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 5 4 3 0 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $ecx = COPY %3:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %3
  UpdateRegP: SU(5) $ecx = COPY %3:gr32
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $edx = COPY %2:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=12
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %2
  UpdateRegP: SU(4) $edx = COPY %2:gr32
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $esi = COPY %1:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=13
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %1
  UpdateRegP: SU(3) $esi = COPY %1:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $rdi = COPY %0:gr64
Bottom Pressure:
GR16=14
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  LiveReg: %0
  UpdateRegP: SU(2) $rdi = COPY %0:gr64
              to GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %12:gr64 = LEA64r %stack.7.rnmu, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=12
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr64 = LEA64r %stack.6.rnm2, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %11:gr64 = LEA64r %stack.6.rnm2, 1, $noreg, 0, $noreg
SU(1):   %12:gr64 = LEA64r %stack.7.rnmu, 1, $noreg, 0, $noreg
SU(2):   $rdi = COPY %0:gr64
SU(3):   $esi = COPY %1:gr32
SU(4):   $edx = COPY %2:gr32
SU(5):   $ecx = COPY %3:gr32
SU(6):   $r8 = COPY %11:gr64
SU(7):   $r9 = COPY %12:gr64

********** MI Scheduling **********
rep_nrm:%bb.0 entry
  From: %5:gr32 = COPY $r9d
    To: ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=14
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: %21 %23 %25 %3 %2 %1 %0 
Live Thru: 
  LiveReg: %21
  LiveReg: %23
  LiveReg: %25
  LiveReg: %3
  UpdateRegP: SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n3.addr)
              to 
  LiveReg: %2
  UpdateRegP: SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.n2.addr)
              to 
  LiveReg: %1
  UpdateRegP: SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n1.addr)
              to 
  LiveReg: %0
  UpdateRegP: SU(6) MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
              to 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:
GR16=14
Excess PSets: 
SU(0):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(12): Data Latency=0 Reg=%5
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %4:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %2:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %1:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.title.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.title.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.kk.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.kk.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %6:gr64_nosp = MOVSX64rr32 %5:gr32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Successors:
    SU(15): Data Latency=1 Reg=%6
    SU(14): Data Latency=1 Reg=%6
    SU(13): Data Latency=1 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   undef %25.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=%6
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   undef %23.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=%6
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   undef %21.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=%6
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=3 Artificial
    SU(14): Ord  Latency=3 Artificial
    SU(13): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 15 14 13 
  Cand SU(11) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) undef %21.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx4)
Bottom Pressure:
GR16=14
  LiveReg: %6
  UpdateRegP: SU(13) undef %25.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
              to GR16 -2
  UpdateRegP: SU(14) undef %23.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx2)
              to GR16 -2
  UpdateRegP: SU(15) undef %21.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx4)
              to GR16 -2
  Ready @3c
  BotQ.A TopLatency SU(15) 1c
  BotQ.A BotLatency SU(15) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 13 14 
  Cand SU(11) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) undef %23.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx2)
Bottom Pressure:
GR16=12
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 13 
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) undef %25.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
Bottom Pressure:
GR16=10
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %6:gr64_nosp = MOVSX64rr32 %5:gr32
Bottom Pressure:
GR16=10
  LiveReg: %5
  UpdateRegP: SU(11) MOV32mr %stack.5.kk.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.kk.addr)
              to 
  UpdateRegP: SU(12) %6:gr64_nosp = MOVSX64rr32 %5:gr32
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(12) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.kk.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.kk.addr)
Bottom Pressure:
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 9 8 7 0 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.title.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.title.addr)
Bottom Pressure:
GR16=12
  LiveReg: %4
  UpdateRegP: SU(10) MOV64mr %stack.4.title.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.title.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 9 8 7 1 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=12
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 8 7 2 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=12
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 7 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 3 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
Bottom Pressure:
GR16=12
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @4c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr32 = COPY $r9d
SU(1):   %4:gr64 = COPY $r8
SU(2):   %3:gr32 = COPY $ecx
SU(3):   %2:gr32 = COPY $edx
SU(4):   %1:gr32 = COPY $esi
SU(5):   %0:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
SU(7):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n1.addr)
SU(8):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.n2.addr)
SU(9):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n3.addr)
SU(10):   MOV64mr %stack.4.title.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.title.addr)
SU(11):   MOV32mr %stack.5.kk.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.kk.addr)
SU(12):   %6:gr64_nosp = MOVSX64rr32 %5:gr32
SU(13):   undef %25.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
SU(14):   undef %23.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx2)
SU(15):   undef %21.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx4)

********** INTERVALS **********
CH [0B,48r:0)[368r,512r:1)  0@0B-phi 1@368r
CL [0B,48r:0)[368r,512r:1)  0@0B-phi 1@368r
DH [0B,64r:0)[352r,512r:1)[688r,752r:2)  0@0B-phi 1@352r 2@688r
DIL [0B,96r:0)[320r,512r:2)[656r,752r:1)  0@0B-phi 1@656r 2@320r
DIH [0B,96r:0)[320r,512r:2)[656r,752r:1)  0@0B-phi 1@656r 2@320r
DL [0B,64r:0)[352r,512r:1)[688r,752r:2)  0@0B-phi 1@352r 2@688r
HCX [0B,48r:0)[368r,512r:1)  0@0B-phi 1@368r
HDI [0B,96r:0)[320r,512r:2)[656r,752r:1)  0@0B-phi 1@656r 2@320r
HDX [0B,64r:0)[352r,512r:1)[688r,752r:2)  0@0B-phi 1@352r 2@688r
SIL [0B,80r:0)[336r,512r:2)[672r,752r:1)  0@0B-phi 1@672r 2@336r
SIH [0B,80r:0)[336r,512r:2)[672r,752r:1)  0@0B-phi 1@672r 2@336r
HSI [0B,80r:0)[336r,512r:2)[672r,752r:1)  0@0B-phi 1@672r 2@336r
R8B [0B,32r:0)[384r,512r:1)  0@0B-phi 1@384r
R8BH [0B,32r:0)[384r,512r:1)  0@0B-phi 1@384r
R8WH [0B,32r:0)[384r,512r:1)  0@0B-phi 1@384r
R9B [0B,16r:0)[400r,512r:1)  0@0B-phi 1@400r
R9BH [0B,16r:0)[400r,512r:1)  0@0B-phi 1@400r
R9WH [0B,16r:0)[400r,512r:1)  0@0B-phi 1@400r
%0 [96r,320r:0)  0@96r weight:0.000000e+00
%1 [80r,336r:0)  0@80r weight:0.000000e+00
%2 [64r,352r:0)  0@64r weight:0.000000e+00
%3 [48r,368r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,208r:0)  0@16r weight:0.000000e+00
%6 [208r,256r:0)  0@208r weight:0.000000e+00
%11 [288r,384r:0)  0@288r weight:0.000000e+00
%12 [304r,400r:0)  0@304r weight:0.000000e+00
%13 [544r,672r:0)  0@544r weight:0.000000e+00
%14 [560r,688r:0)  0@560r weight:0.000000e+00
%15 [576r,704r:0)  0@576r weight:0.000000e+00
%16 [592r,720r:0)  0@592r weight:0.000000e+00
%21 [256r,432r:0)  0@256r weight:0.000000e+00
%23 [240r,464r:0)  0@240r weight:0.000000e+00
%25 [224r,496r:0)  0@224r weight:0.000000e+00
RegMasks: 512r 752r
********** MACHINEINSTRS **********
# Machine code for function rep_nrm: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $esi in %1, $edx in %2, $ecx in %3, $r8 in %4, $r9d in %5

0B	bb.0.entry:
	  liveins: $rdi, $esi, $edx, $ecx, $r8, $r9d
16B	  %5:gr32 = COPY $r9d
32B	  %4:gr64 = COPY $r8
48B	  %3:gr32 = COPY $ecx
64B	  %2:gr32 = COPY $edx
80B	  %1:gr32 = COPY $esi
96B	  %0:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.u.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.u.addr)
128B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n1.addr)
144B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.n2.addr)
160B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n3.addr)
176B	  MOV64mr %stack.4.title.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.title.addr)
192B	  MOV32mr %stack.5.kk.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.kk.addr)
208B	  %6:gr64_nosp = MOVSX64rr32 %5:gr32
224B	  undef %25.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nx, $noreg :: (load 4 from %ir.arrayidx)
240B	  undef %23.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @ny, $noreg :: (load 4 from %ir.arrayidx2)
256B	  undef %21.sub_32bit:gr64_with_sub_8bit = MOV32rm $noreg, 4, %6:gr64_nosp, @nz, $noreg :: (load 4 from %ir.arrayidx4)
272B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  %11:gr64 = LEA64r %stack.6.rnm2, 1, $noreg, 0, $noreg
304B	  %12:gr64 = LEA64r %stack.7.rnmu, 1, $noreg, 0, $noreg
320B	  $rdi = COPY %0:gr64
336B	  $esi = COPY %1:gr32
352B	  $edx = COPY %2:gr32
368B	  $ecx = COPY %3:gr32
384B	  $r8 = COPY %11:gr64
400B	  $r9 = COPY %12:gr64
432B	  PUSH64r %21:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
464B	  PUSH64r %23:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
496B	  PUSH64r %25:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
512B	  CALL64pcrel32 @norm2u3, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit $ecx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
528B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
544B	  %13:gr32 = MOV32rm %stack.5.kk.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.kk.addr)
560B	  %14:gr64 = MOV64rm %stack.4.title.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.title.addr)
576B	  %15:fr64 = MOVSDrm_alt %stack.6.rnm2, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnm2)
592B	  %16:fr64 = MOVSDrm_alt %stack.7.rnmu, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.rnmu)
608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.51
672B	  $esi = COPY %13:gr32
688B	  $rdx = COPY %14:gr64
704B	  $xmm0 = COPY %15:fr64
720B	  $xmm1 = COPY %16:fr64
736B	  $al = MOV8ri 2
752B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
768B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
784B	  RET 0

# End machine code for function rep_nrm.

Before MISched:
# Machine code for function showall: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %8, $esi in %9, $edx in %10, $ecx in %11

bb.0.entry:
  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)
  liveins: $rdi, $esi, $edx, $ecx
  %11:gr32 = COPY $ecx
  %10:gr32 = COPY $edx
  %9:gr32 = COPY $esi
  %8:gr64 = COPY $rdi
  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.oz.addr)
  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
  MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.z)
  %57:gr32 = MOV32ri 18
  CMP32ri8 %9:gr32, 17, implicit-def $eflags
  JCC_1 %bb.2, 15, implicit killed $eflags
  JMP_1 %bb.1

bb.1.cond.true:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %57:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)

bb.2.cond.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  undef %45.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  MOV32mr %stack.8.m1, 1, $noreg, 0, $noreg, %57:gr32 :: (store 4 into %ir.m1)
  %58:gr32 = MOV32ri 14
  CMP32mi8 %stack.2.n2.addr, 1, $noreg, 0, $noreg, 13, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  JCC_1 %bb.4, 15, implicit killed $eflags
  JMP_1 %bb.3

bb.3.cond.true2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %58:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)

bb.4.cond.end4:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x40000000), %bb.6(0x40000000); %bb.5(50.00%), %bb.6(50.00%)

  MOV32mr %stack.9.m2, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.m2)
  %59:gr32 = MOV32ri 18
  CMP32mi8 %stack.3.n3.addr, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  JCC_1 %bb.6, 15, implicit killed $eflags
  JMP_1 %bb.5

bb.5.cond.true7:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %59:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)

bb.6.cond.end9:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mr %stack.10.m3, 1, $noreg, 0, $noreg, %59:gr32 :: (store 4 into %ir.m3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.52
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  %45:gr64_with_sub_8bit = nuw IMUL64rr %45:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

bb.7.for.cond:
; predecessors: %bb.6, %bb.14
  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)

  %26:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  CMP32rm %26:gr32, %stack.10.m3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3)
  JCC_1 %bb.15, 13, implicit killed $eflags
  JMP_1 %bb.8

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  MOV32mi %stack.5.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

bb.9.for.cond12:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %32:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  CMP32rm %32:gr32, %stack.8.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
  JCC_1 %bb.14, 13, implicit killed $eflags
  JMP_1 %bb.10

bb.10.for.body14:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  MOV32mi %stack.6.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

bb.11.for.cond15:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %38:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  CMP32rm %38:gr32, %stack.9.m2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2)
  JCC_1 %bb.13, 13, implicit killed $eflags
  JMP_1 %bb.12

bb.12.for.body17:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %47:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
  %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
  %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  %50:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
  %52:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.53
  $xmm0 = COPY %53:fr64
  $al = MOV8ri 1
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.6.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
  JMP_1 %bb.11

bb.13.for.end:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.20
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
  JMP_1 %bb.9

bb.14.for.end26:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.54
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  INC32m %stack.7.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
  JMP_1 %bb.7

bb.15.for.end30:
; predecessors: %bb.7

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.52
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  RET 0

# End machine code for function showall.

********** MI Scheduling **********
showall:%bb.0 entry
  From: %11:gr32 = COPY $ecx
    To: JCC_1 %bb.2, 15, implicit killed $eflags
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=8
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX 
Live Out: %9 %57 %10 
Live Thru: 
  LiveReg: %9
  UpdateRegP: SU(5) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
              to 
  UpdateRegP: SU(10) CMP32ri8 %9:gr32, 17, implicit-def $eflags
              to 
  LiveReg: %57
  LiveReg: %10
  UpdateRegP: SU(6) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
              to 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=6
Bottom Pressure:
GR16=6
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %11:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%11
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(1):   %10:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%10
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(2):   %9:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=0 Reg=%9
    SU(5): Data Latency=0 Reg=%9
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(3):   %8:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%8
    SU(4): Data Latency=0 Reg=%8
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(4):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.oz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%9
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%10
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%11
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.z)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   %57:gr32 = MOV32ri 18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   CMP32ri8 %9:gr32, 17, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(2): Data Latency=0 Reg=%9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 4 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) CMP32ri8 %9:gr32, 17, implicit-def $eflags
Bottom Pressure:
GR16=6
  Ready @1c
  BotQ.A BotLatency SU(10) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 4 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %57:gr32 = MOV32ri 18
Bottom Pressure:
GR16=4
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 7 6 5 
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %8
  UpdateRegP: SU(4) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.oz.addr)
              to 
  UpdateRegP: SU(8) MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.z)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 7 6 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
Bottom Pressure:
GR16=8
  LiveReg: %11
  UpdateRegP: SU(7) MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 6 0 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 0 1 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 0 2 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.oz.addr)
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %8:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=7
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %9:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=6
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %10:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=6
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=6
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %11:gr32 = COPY $ecx
SU(1):   %10:gr32 = COPY $edx
SU(2):   %9:gr32 = COPY $esi
SU(3):   %8:gr64 = COPY $rdi
SU(4):   MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.oz.addr)
SU(5):   MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
SU(6):   MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
SU(7):   MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
SU(8):   MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.z)
SU(9):   %57:gr32 = MOV32ri 18
SU(10):   CMP32ri8 %9:gr32, 17, implicit-def $eflags

********** MI Scheduling **********
showall:%bb.2 cond.end
  From: undef %45.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
    To: JCC_1 %bb.4, 15, implicit killed $eflags
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   undef %45.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mr %stack.8.m1, 1, $noreg, 0, $noreg, %57:gr32 :: (store 4 into %ir.m1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %58:gr32 = MOV32ri 14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   CMP32mi8 %stack.2.n2.addr, 1, $noreg, 0, $noreg, 13, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.4, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) CMP32mi8 %stack.2.n2.addr, 1, $noreg, 0, $noreg, 13, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %58:gr32 = MOV32ri 14
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.8.m1, 1, $noreg, 0, $noreg, %57:gr32 :: (store 4 into %ir.m1)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) undef %45.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   undef %45.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
SU(1):   undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
SU(2):   MOV32mr %stack.8.m1, 1, $noreg, 0, $noreg, %57:gr32 :: (store 4 into %ir.m1)
SU(3):   %58:gr32 = MOV32ri 14
SU(4):   CMP32mi8 %stack.2.n2.addr, 1, $noreg, 0, $noreg, 13, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)

********** MI Scheduling **********
showall:%bb.4 cond.end4
  From: MOV32mr %stack.9.m2, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.m2)
    To: JCC_1 %bb.6, 15, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mr %stack.9.m2, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.m2)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %59:gr32 = MOV32ri 18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   CMP32mi8 %stack.3.n3.addr, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 15, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 %stack.3.n3.addr, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %59:gr32 = MOV32ri 18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mr %stack.9.m2, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.m2)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   MOV32mr %stack.9.m2, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.m2)
SU(1):   %59:gr32 = MOV32ri 18
SU(2):   CMP32mi8 %stack.3.n3.addr, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)

********** MI Scheduling **********
showall:%bb.6 cond.end9
  From: MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %45:gr64_with_sub_8bit = nuw IMUL64rr %45:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %45:gr64_with_sub_8bit = nuw IMUL64rr %45:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
SU(1):   %45:gr64_with_sub_8bit = nuw IMUL64rr %45:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

********** MI Scheduling **********
showall:%bb.6 cond.end9
  From: $rdi = MOV32ri64 @.str.52
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.52
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.52
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
showall:%bb.7 for.cond
  From: %26:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: JCC_1 %bb.15, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %26:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(1):   CMP32rm %26:gr32, %stack.10.m3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.15, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %26:gr32, %stack.10.m3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %26:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %26:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   CMP32rm %26:gr32, %stack.10.m3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3)

********** MI Scheduling **********
showall:%bb.9 for.cond12
  From: %32:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
    To: JCC_1 %bb.14, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %32:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%32
  Single Issue       : false;
SU(1):   CMP32rm %32:gr32, %stack.8.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %32:gr32, %stack.8.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %32:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %32:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(1):   CMP32rm %32:gr32, %stack.8.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)

********** MI Scheduling **********
showall:%bb.11 for.cond15
  From: %38:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
    To: JCC_1 %bb.13, 13, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %38:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%38
  Single Issue       : false;
SU(1):   CMP32rm %38:gr32, %stack.9.m2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%38
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %38:gr32, %stack.9.m2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2)
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %38:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %38:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(1):   CMP32rm %38:gr32, %stack.9.m2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2)

********** MI Scheduling **********
showall:%bb.12 for.body17
  From: $rdi = MOV32ri64 @.str.53
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %53:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %53:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.53
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = MOV32ri64 @.str.53
SU(1):   $xmm0 = COPY %53:fr64
SU(2):   $al = MOV8ri 1

********** MI Scheduling **********
showall:%bb.12 for.body17
  From: %47:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=8
Live In: %1 %45 
Live Out: %53 %1 %45 
Live Thru: GR16=4
  LiveReg: %53
  LiveReg: %1
  UpdateRegP: SU(5) %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
  LiveReg: %45
  UpdateRegP: SU(1) %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
              to 
Top Pressure:
GR16=4
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
Excess PSets: 
SU(0):   %47:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%47
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%47
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%47
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%47
    SU(3): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(2): Data Latency=1 Reg=%47
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%47
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %50:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%50
    SU(5): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%50
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%50
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%47
    SU(5): Data Latency=1 Reg=%50
  Successors:
    SU(8): Data Latency=1 Reg=%51
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %52:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(8): Data Latency=4 Reg=%52
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=%51
    SU(7): Data Latency=4 Reg=%52
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)
Bottom Pressure:
GR16=8
  LiveReg: %51
  UpdateRegP: SU(8) %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %52
  UpdateRegP: SU(8) %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A TopLatency SU(8) 11c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(7) %52:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
Bottom Pressure:
GR16=6
  Ready @7c
  BotQ.A BotLatency SU(7) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
Bottom Pressure:
GR16=8
  LiveReg: %47
  UpdateRegP: SU(6) %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
              to 
  LiveReg: %50
  UpdateRegP: SU(6) %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
              to GR16 -2
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=8
  LiveReg: %50
  UpdateRegP: SU(5) %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %50:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
Bottom Pressure:
GR16=6
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
Bottom Pressure:
GR16=6
  LiveReg: %47
  UpdateRegP: SU(3) %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
              to GR16 -2
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %47
  UpdateRegP: SU(2) %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
Bottom Pressure:
GR16=6
  LiveReg: %47
  UpdateRegP: SU(1) %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
Bottom Pressure:
GR16=4
  Ready @14c
  BotQ.A BotLatency SU(0) 14c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %47:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
SU(1):   %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
SU(2):   %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(3):   %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
SU(4):   %50:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
SU(5):   %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
SU(6):   %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
SU(7):   %52:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
SU(8):   %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)

********** MI Scheduling **********
showall:%bb.13 for.end
  From: $rdi = MOV32ri64 @.str.20
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.20
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = MOV32ri64 @.str.20
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
showall:%bb.14 for.end26
  From: $rdi = MOV32ri64 @.str.54
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.54
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   $rdi = MOV32ri64 @.str.54
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
showall:%bb.15 for.end30
  From: $rdi = MOV32ri64 @.str.52
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.52
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $rdi = MOV32ri64 @.str.52
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** INTERVALS **********
CH [0B,16r:0)  0@0B-phi
CL [0B,16r:0)  0@0B-phi
DH [0B,32r:0)  0@0B-phi
DIL [0B,64r:0)[816r,848r:5)[1536r,1584r:1)[1696r,1728r:2)[1840r,1872r:3)[2016r,2048r:4)  0@0B-phi 1@1536r 2@1696r 3@1840r 4@2016r 5@816r
DIH [0B,64r:0)[816r,848r:5)[1536r,1584r:1)[1696r,1728r:2)[1840r,1872r:3)[2016r,2048r:4)  0@0B-phi 1@1536r 2@1696r 3@1840r 4@2016r 5@816r
DL [0B,32r:0)  0@0B-phi
HCX [0B,16r:0)  0@0B-phi
HDI [0B,64r:0)[816r,848r:5)[1536r,1584r:1)[1696r,1728r:2)[1840r,1872r:3)[2016r,2048r:4)  0@0B-phi 1@1536r 2@1696r 3@1840r 4@2016r 5@816r
HDX [0B,32r:0)  0@0B-phi
SIL [0B,48r:0)  0@0B-phi
SIH [0B,48r:0)  0@0B-phi
HSI [0B,48r:0)  0@0B-phi
%1 [336r,1936B:0)  0@336r weight:0.000000e+00
%8 [64r,144r:0)  0@64r weight:0.000000e+00
%9 [48r,336r:0)  0@48r weight:0.000000e+00
%10 [32r,320r:0)  0@32r weight:0.000000e+00
%11 [16r,128r:0)  0@16r weight:0.000000e+00
%26 [1008r,1024r:0)  0@1008r weight:0.000000e+00
%32 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%38 [1232r,1248r:0)  0@1232r weight:0.000000e+00
%45 [320r,912r:0)[912r,1936B:1)  0@320r 1@912r weight:0.000000e+00
%47 [1312r,1344r:2)[1344r,1376r:0)[1376r,1408r:1)[1408r,1472r:3)  0@1344r 1@1376r 2@1312r 3@1408r weight:0.000000e+00
%50 [1424r,1456r:0)[1456r,1472r:1)  0@1424r 1@1456r weight:0.000000e+00
%51 [1472r,1504r:0)  0@1472r weight:0.000000e+00
%52 [1488r,1504r:0)  0@1488r weight:0.000000e+00
%53 [1504r,1552r:0)  0@1504r weight:0.000000e+00
%57 [160r,240B:0)[256r,288B:1)[288B,352r:2)  0@160r 1@256r 2@288B-phi weight:0.000000e+00
%58 [368r,448B:0)[464r,496B:1)[496B,560r:2)  0@368r 1@464r 2@496B-phi weight:0.000000e+00
%59 [576r,656B:0)[672r,704B:1)[704B,736r:2)  0@576r 1@672r 2@704B-phi weight:0.000000e+00
RegMasks: 848r 1584r 1728r 1872r 2048r
********** MACHINEINSTRS **********
# Machine code for function showall: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %8, $esi in %9, $edx in %10, $ecx in %11

0B	bb.0.entry:
	  successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)
	  liveins: $rdi, $esi, $edx, $ecx
16B	  %11:gr32 = COPY $ecx
32B	  %10:gr32 = COPY $edx
48B	  %9:gr32 = COPY $esi
64B	  %8:gr64 = COPY $rdi
80B	  MOV64mr %stack.0.oz.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.oz.addr)
96B	  MOV32mr %stack.1.n1.addr, 1, $noreg, 0, $noreg, %9:gr32 :: (store 4 into %ir.n1.addr)
112B	  MOV32mr %stack.2.n2.addr, 1, $noreg, 0, $noreg, %10:gr32 :: (store 4 into %ir.n2.addr)
128B	  MOV32mr %stack.3.n3.addr, 1, $noreg, 0, $noreg, %11:gr32 :: (store 4 into %ir.n3.addr)
144B	  MOV64mr %stack.4.z, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.z)
160B	  %57:gr32 = MOV32ri 18
176B	  CMP32ri8 %9:gr32, 17, implicit-def $eflags
208B	  JCC_1 %bb.2, 15, implicit killed $eflags
224B	  JMP_1 %bb.1

240B	bb.1.cond.true:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

256B	  %57:gr32 = MOV32rm %stack.1.n1.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n1.addr)

288B	bb.2.cond.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

320B	  undef %45.sub_32bit:gr64_with_sub_8bit = MOV32rr %10:gr32
336B	  undef %1.sub_32bit:gr64_with_sub_8bit = MOV32rr %9:gr32
352B	  MOV32mr %stack.8.m1, 1, $noreg, 0, $noreg, %57:gr32 :: (store 4 into %ir.m1)
368B	  %58:gr32 = MOV32ri 14
384B	  CMP32mi8 %stack.2.n2.addr, 1, $noreg, 0, $noreg, 13, implicit-def $eflags :: (dereferenceable load 4 from %ir.n2.addr)
416B	  JCC_1 %bb.4, 15, implicit killed $eflags
432B	  JMP_1 %bb.3

448B	bb.3.cond.true2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

464B	  %58:gr32 = MOV32rm %stack.2.n2.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n2.addr)

496B	bb.4.cond.end4:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x40000000), %bb.6(0x40000000); %bb.5(50.00%), %bb.6(50.00%)

560B	  MOV32mr %stack.9.m2, 1, $noreg, 0, $noreg, %58:gr32 :: (store 4 into %ir.m2)
576B	  %59:gr32 = MOV32ri 18
592B	  CMP32mi8 %stack.3.n3.addr, 1, $noreg, 0, $noreg, 17, implicit-def $eflags :: (dereferenceable load 4 from %ir.n3.addr)
624B	  JCC_1 %bb.6, 15, implicit killed $eflags
640B	  JMP_1 %bb.5

656B	bb.5.cond.true7:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

672B	  %59:gr32 = MOV32rm %stack.3.n3.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.n3.addr)

704B	bb.6.cond.end9:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

736B	  MOV32mr %stack.10.m3, 1, $noreg, 0, $noreg, %59:gr32 :: (store 4 into %ir.m3)
752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
816B	  $rdi = MOV32ri64 @.str.52
832B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
848B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  MOV32mi %stack.7.i3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i3)
912B	  %45:gr64_with_sub_8bit = nuw IMUL64rr %45:gr64_with_sub_8bit(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags

992B	bb.7.for.cond:
	; predecessors: %bb.6, %bb.14
	  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)

1008B	  %26:gr32 = MOV32rm %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1024B	  CMP32rm %26:gr32, %stack.10.m3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m3)
1040B	  JCC_1 %bb.15, 13, implicit killed $eflags
1056B	  JMP_1 %bb.8

1072B	bb.8.for.body:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1088B	  MOV32mi %stack.5.i1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i1)

1104B	bb.9.for.cond12:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1120B	  %32:gr32 = MOV32rm %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1136B	  CMP32rm %32:gr32, %stack.8.m1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m1)
1152B	  JCC_1 %bb.14, 13, implicit killed $eflags
1168B	  JMP_1 %bb.10

1184B	bb.10.for.body14:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1200B	  MOV32mi %stack.6.i2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i2)

1216B	bb.11.for.cond15:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1232B	  %38:gr32 = MOV32rm %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1248B	  CMP32rm %38:gr32, %stack.9.m2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.m2)
1264B	  JCC_1 %bb.13, 13, implicit killed $eflags
1280B	  JMP_1 %bb.12

1296B	bb.12.for.body17:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1312B	  %47:gr64 = MOVSX64rm32 %stack.7.i3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i3)
1344B	  %47:gr64 = nsw IMUL64rr %47:gr64(tied-def 0), %45:gr64_with_sub_8bit, implicit-def dead $eflags
1376B	  %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
1408B	  %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.4.z, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.z)
1424B	  %50:gr64_nosp = MOVSX64rm32 %stack.6.i2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i2)
1456B	  %50:gr64_nosp = nsw IMUL64rr %50:gr64_nosp(tied-def 0), %1:gr64_with_sub_8bit, implicit-def dead $eflags
1472B	  %51:gr64 = LEA64r %47:gr64, 8, %50:gr64_nosp, 0, $noreg
1488B	  %52:gr64_nosp = MOVSX64rm32 %stack.5.i1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i1)
1504B	  %53:fr64 = MOVSDrm_alt %51:gr64, 8, %52:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx21)
1520B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1536B	  $rdi = MOV32ri64 @.str.53
1552B	  $xmm0 = COPY %53:fr64
1568B	  $al = MOV8ri 1
1584B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1600B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1616B	  INC32m %stack.6.i2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i2), (dereferenceable load 4 from %ir.i2)
1632B	  JMP_1 %bb.11

1648B	bb.13.for.end:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1696B	  $rdi = MOV32ri64 @.str.20
1712B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1728B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1744B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1760B	  INC32m %stack.5.i1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i1), (dereferenceable load 4 from %ir.i1)
1776B	  JMP_1 %bb.9

1792B	bb.14.for.end26:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1840B	  $rdi = MOV32ri64 @.str.54
1856B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1872B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
1888B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1904B	  INC32m %stack.7.i3, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i3), (dereferenceable load 4 from %ir.i3)
1920B	  JMP_1 %bb.7

1936B	bb.15.for.end30:
	; predecessors: %bb.7

1952B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2016B	  $rdi = MOV32ri64 @.str.52
2032B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
2048B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
2064B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2080B	  RET 0

# End machine code for function showall.

Before MISched:
# Machine code for function power: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
Function Live Ins: $xmm0 in %0, $edi in %1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $xmm0, $edi
  %1:gr32 = COPY $edi
  %0:fr64 = COPY $xmm0
  MOVSDmr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.a.addr)
  MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n.addr)
  %2:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.5.power, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.power)
  MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nj)
  MOVSDmr %stack.2.aj, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.aj)
  %11:gr64 = LEA64r %stack.5.power, 1, $noreg, 0, $noreg
  %14:gr64 = LEA64r %stack.2.aj, 1, $noreg, 0, $noreg

bb.1.while.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

  CMP32mi8 %stack.3.nj, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.nj)
  JCC_1 %bb.5, 4, implicit killed $eflags
  JMP_1 %bb.2

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  %8:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
  %6:gr32 = COPY %8:gr32
  %6:gr32 = SHR32ri %6:gr32(tied-def 0), 31, implicit-def dead $eflags
  %6:gr32 = ADD32rr %6:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags
  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -2, implicit-def dead $eflags
  %8:gr32 = SUB32rr %8:gr32(tied-def 0), %6:gr32, implicit-def dead $eflags
  CMP32ri8 %8:gr32, 1, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit killed $eflags
  JMP_1 %bb.3

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %10:fr64 = MOVSDrm_alt %stack.2.aj, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.aj)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %11:gr64
  $xmm0 = COPY %10:fr64
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:fr64 = COPY $xmm0
  MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.rdummy)

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %13:fr64 = MOVSDrm_alt %stack.2.aj, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.aj)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %14:gr64
  $xmm0 = COPY %13:fr64
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:fr64 = COPY $xmm0
  MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.rdummy)
  %16:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
  %18:gr32 = COPY %16:gr32
  %18:gr32 = SHR32ri %18:gr32(tied-def 0), 31, implicit-def dead $eflags
  %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
  %18:gr32 = SAR32r1 %18:gr32(tied-def 0), implicit-def dead $eflags
  MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.nj)
  JMP_1 %bb.1

bb.5.while.end:
; predecessors: %bb.1

  %3:fr64 = MOVSDrm_alt %stack.5.power, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.power)
  $xmm0 = COPY %3:fr64
  RET 0, $xmm0

# End machine code for function power.

********** MI Scheduling **********
power:%bb.0 entry
  From: %1:gr32 = COPY $edi
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=4
Live In: XMM0 DIL DIH HDI 
Live Out: %14 %11 
Live Thru: 
  LiveReg: %14
  LiveReg: %11
Top Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=1
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%1
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %0:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%0
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %2:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.5.power, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.power)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nj)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOVSDmr %stack.2.aj, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.aj)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(8):   %11:gr64 = LEA64r %stack.5.power, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %14:gr64 = LEA64r %stack.2.aj, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 3 2 
  Cand SU(9) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(9) %14:gr64 = LEA64r %stack.2.aj, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 7 6 5 3 
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %11:gr64 = LEA64r %stack.5.power, 1, $noreg, 0, $noreg
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 7 6 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOVSDmr %stack.2.aj, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.aj)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %0
  UpdateRegP: SU(2) MOVSDmr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.a.addr)
              to 
  UpdateRegP: SU(7) MOVSDmr %stack.2.aj, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.aj)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 6 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nj)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %1
  UpdateRegP: SU(3) MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n.addr)
              to 
  UpdateRegP: SU(6) MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nj)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.5.power, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.power)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %2
  UpdateRegP: SU(5) MOV64mr %stack.5.power, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.power)
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %2:gr64 = MOV64ri 4607182418800017408
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOVSDmr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:fr64 = COPY $xmm0
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=1
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr32 = COPY $edi
SU(1):   %0:fr64 = COPY $xmm0
SU(2):   MOVSDmr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.a.addr)
SU(3):   MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n.addr)
SU(4):   %2:gr64 = MOV64ri 4607182418800017408
SU(5):   MOV64mr %stack.5.power, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.power)
SU(6):   MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nj)
SU(7):   MOVSDmr %stack.2.aj, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.aj)
SU(8):   %11:gr64 = LEA64r %stack.5.power, 1, $noreg, 0, $noreg
SU(9):   %14:gr64 = LEA64r %stack.2.aj, 1, $noreg, 0, $noreg

********** MI Scheduling **********
power:%bb.2 while.body
  From: %8:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
    To: JCC_1 %bb.4, 5, implicit killed $eflags
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %8:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%8
    SU(3): Data Latency=4 Reg=%8
    SU(1): Data Latency=4 Reg=%8
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(1):   %6:gr32 = COPY %8:gr32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%8
  Successors:
    SU(2): Data Latency=0 Reg=%6
    SU(2): Out  Latency=0
    SU(5): Anti Latency=0
  Single Issue       : false;
SU(2):   %6:gr32 = SHR32ri %6:gr32(tied-def 0), 31, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%6
    SU(3): Out  Latency=0
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(3):   %6:gr32 = ADD32rr %6:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%6
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%8
  Successors:
    SU(4): Data Latency=1 Reg=%6
    SU(4): Out  Latency=0
    SU(6): Out  Latency=0
    SU(5): Anti Latency=0
  Single Issue       : false;
SU(4):   %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -2, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%6
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%6
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(5):   %8:gr32 = SUB32rr %8:gr32(tied-def 0), %6:gr32, implicit-def dead $eflags
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%6
    SU(3): Anti Latency=0
    SU(1): Anti Latency=0
    SU(0): Data Latency=4 Reg=%8
    SU(0): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%8
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   CMP32ri8 %8:gr32, 1, implicit-def $eflags
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%8
    SU(5): Out  Latency=0
    SU(4): Out  Latency=0
    SU(3): Out  Latency=0
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.4, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) CMP32ri8 %8:gr32, 1, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(6) 8c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %8:gr32 = SUB32rr %8:gr32(tied-def 0), %6:gr32, implicit-def dead $eflags
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -2, implicit-def dead $eflags
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %6:gr32 = ADD32rr %6:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %6:gr32 = SHR32ri %6:gr32(tied-def 0), 31, implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %6:gr32 = COPY %8:gr32
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %8:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %8:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
SU(1):   %6:gr32 = COPY %8:gr32
SU(2):   %6:gr32 = SHR32ri %6:gr32(tied-def 0), 31, implicit-def dead $eflags
SU(3):   %6:gr32 = ADD32rr %6:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags
SU(4):   %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -2, implicit-def dead $eflags
SU(5):   %8:gr32 = SUB32rr %8:gr32(tied-def 0), %6:gr32, implicit-def dead $eflags
SU(6):   CMP32ri8 %8:gr32, 1, implicit-def $eflags

********** MI Scheduling **********
power:%bb.3 if.then
  From: %12:fr64 = COPY $xmm0
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.rdummy)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.rdummy)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:fr64 = COPY $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %12:fr64 = COPY $xmm0
SU(1):   MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.rdummy)

********** MI Scheduling **********
power:%bb.3 if.then
  From: $rdi = COPY %11:gr64
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %11:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %10:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %10:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %11:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = COPY %11:gr64
SU(1):   $xmm0 = COPY %10:fr64

********** MI Scheduling **********
power:%bb.4 if.end
  From: %15:fr64 = COPY $xmm0
    To: JMP_1 %bb.1
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: XMM0 
Live Out: 
Live Thru: 
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:

Excess PSets: 
SU(0):   %15:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%15
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.rdummy)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%15
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   %16:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(5): Data Latency=4 Reg=%16
    SU(3): Data Latency=4 Reg=%16
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %18:gr32 = COPY %16:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%16
  Successors:
    SU(4): Data Latency=0 Reg=%18
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %18:gr32 = SHR32ri %18:gr32(tied-def 0), 31, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Data Latency=0 Reg=%18
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%18
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%18
    SU(4): Out  Latency=0
    SU(2): Data Latency=4 Reg=%16
  Successors:
    SU(6): Data Latency=1 Reg=%18
    SU(6): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %18:gr32 = SAR32r1 %18:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%18
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%18
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.nj)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%18
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 1 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.nj)
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(7) MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.nj)
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 7c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %18:gr32 = SAR32r1 %18:gr32(tied-def 0), implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(6) %18:gr32 = SAR32r1 %18:gr32(tied-def 0), implicit-def dead $eflags
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %18
  UpdateRegP: SU(5) %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
              to 
  LiveReg: %16
  UpdateRegP: SU(3) %18:gr32 = COPY %16:gr32
              to GR16 -2
  UpdateRegP: SU(5) %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %18:gr32 = SHR32ri %18:gr32(tied-def 0), 31, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %18
  UpdateRegP: SU(4) %18:gr32 = SHR32ri %18:gr32(tied-def 0), 31, implicit-def dead $eflags
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %18:gr32 = COPY %16:gr32
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %16:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
Bottom Pressure:

  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.rdummy)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %15
  UpdateRegP: SU(1) MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.rdummy)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:fr64 = COPY $xmm0
Bottom Pressure:
FR32=1
FR32X=1
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %15:fr64 = COPY $xmm0
SU(1):   MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.rdummy)
SU(2):   %16:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
SU(3):   %18:gr32 = COPY %16:gr32
SU(4):   %18:gr32 = SHR32ri %18:gr32(tied-def 0), 31, implicit-def dead $eflags
SU(5):   %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
SU(6):   %18:gr32 = SAR32r1 %18:gr32(tied-def 0), implicit-def dead $eflags
SU(7):   MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.nj)

********** MI Scheduling **********
power:%bb.4 if.end
  From: $rdi = COPY %14:gr64
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %14:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %13:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %13:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %14:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $rdi = COPY %14:gr64
SU(1):   $xmm0 = COPY %13:fr64

********** MI Scheduling **********
power:%bb.5 while.end
  From: %3:fr64 = MOVSDrm_alt %stack.5.power, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.power)
    To: RET 0, $xmm0
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %3:fr64 = MOVSDrm_alt %stack.5.power, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.power)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%3
  Single Issue       : false;
SU(1):   $xmm0 = COPY %3:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%3
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, $xmm0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $xmm0 = COPY %3:fr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %3:fr64 = MOVSDrm_alt %stack.5.power, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.power)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %3:fr64 = MOVSDrm_alt %stack.5.power, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.power)
SU(1):   $xmm0 = COPY %3:fr64

********** INTERVALS **********
DIL [0B,16r:0)[496r,528r:2)[640r,672r:1)  0@0B-phi 1@640r 2@496r
DIH [0B,16r:0)[496r,528r:2)[640r,672r:1)  0@0B-phi 1@640r 2@496r
HDI [0B,16r:0)[496r,528r:2)[640r,672r:1)  0@0B-phi 1@640r 2@496r
XMM0 [0B,32r:0)[512r,528r:4)[528r,560r:3)[656r,672r:2)[672r,704r:1)[912r,928r:5)  0@0B-phi 1@672r 2@656r 3@528r 4@512r 5@912r
%0 [32r,128r:0)  0@32r weight:0.000000e+00
%1 [16r,112r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%3 [896r,912r:0)  0@896r weight:0.000000e+00
%6 [272r,288r:2)[288r,320r:0)[320r,352r:1)[352r,384r:3)  0@288r 1@320r 2@272r 3@352r weight:0.000000e+00
%8 [256r,384r:0)[384r,400r:1)  0@256r 1@384r weight:0.000000e+00
%10 [464r,512r:0)  0@464r weight:0.000000e+00
%11 [144r,880B:0)  0@144r weight:0.000000e+00
%12 [560r,576r:0)  0@560r weight:0.000000e+00
%13 [608r,656r:0)  0@608r weight:0.000000e+00
%14 [160r,880B:0)  0@160r weight:0.000000e+00
%15 [704r,720r:0)  0@704r weight:0.000000e+00
%16 [736r,800r:0)  0@736r weight:0.000000e+00
%18 [752r,768r:2)[768r,800r:0)[800r,832r:1)[832r,848r:3)  0@768r 1@800r 2@752r 3@832r weight:0.000000e+00
RegMasks: 528r 672r
********** MACHINEINSTRS **********
# Machine code for function power: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
Function Live Ins: $xmm0 in %0, $edi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $xmm0, $edi
16B	  %1:gr32 = COPY $edi
32B	  %0:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.a.addr)
64B	  MOV32mr %stack.1.n.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.n.addr)
80B	  %2:gr64 = MOV64ri 4607182418800017408
96B	  MOV64mr %stack.5.power, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.power)
112B	  MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nj)
128B	  MOVSDmr %stack.2.aj, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.aj)
144B	  %11:gr64 = LEA64r %stack.5.power, 1, $noreg, 0, $noreg
160B	  %14:gr64 = LEA64r %stack.2.aj, 1, $noreg, 0, $noreg

176B	bb.1.while.cond:
	; predecessors: %bb.0, %bb.4
	  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

192B	  CMP32mi8 %stack.3.nj, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from %ir.nj)
208B	  JCC_1 %bb.5, 4, implicit killed $eflags
224B	  JMP_1 %bb.2

240B	bb.2.while.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

256B	  %8:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
272B	  %6:gr32 = COPY %8:gr32
288B	  %6:gr32 = SHR32ri %6:gr32(tied-def 0), 31, implicit-def dead $eflags
320B	  %6:gr32 = ADD32rr %6:gr32(tied-def 0), %8:gr32, implicit-def dead $eflags
352B	  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -2, implicit-def dead $eflags
384B	  %8:gr32 = SUB32rr %8:gr32(tied-def 0), %6:gr32, implicit-def dead $eflags
400B	  CMP32ri8 %8:gr32, 1, implicit-def $eflags
416B	  JCC_1 %bb.4, 5, implicit killed $eflags
432B	  JMP_1 %bb.3

448B	bb.3.if.then:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

464B	  %10:fr64 = MOVSDrm_alt %stack.2.aj, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.aj)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
496B	  $rdi = COPY %11:gr64
512B	  $xmm0 = COPY %10:fr64
528B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
560B	  %12:fr64 = COPY $xmm0
576B	  MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %12:fr64 :: (store 8 into %ir.rdummy)

592B	bb.4.if.end:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

608B	  %13:fr64 = MOVSDrm_alt %stack.2.aj, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.aj)
624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  $rdi = COPY %14:gr64
656B	  $xmm0 = COPY %13:fr64
672B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
688B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
704B	  %15:fr64 = COPY $xmm0
720B	  MOVSDmr %stack.4.rdummy, 1, $noreg, 0, $noreg, %15:fr64 :: (store 8 into %ir.rdummy)
736B	  %16:gr32 = MOV32rm %stack.3.nj, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.nj)
752B	  %18:gr32 = COPY %16:gr32
768B	  %18:gr32 = SHR32ri %18:gr32(tied-def 0), 31, implicit-def dead $eflags
800B	  %18:gr32 = ADD32rr %18:gr32(tied-def 0), %16:gr32, implicit-def dead $eflags
832B	  %18:gr32 = SAR32r1 %18:gr32(tied-def 0), implicit-def dead $eflags
848B	  MOV32mr %stack.3.nj, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.nj)
864B	  JMP_1 %bb.1

880B	bb.5.while.end:
	; predecessors: %bb.1

896B	  %3:fr64 = MOVSDrm_alt %stack.5.power, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.power)
912B	  $xmm0 = COPY %3:fr64
928B	  RET 0, $xmm0

# End machine code for function power.

Before MISched:
# Machine code for function bubble: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8d in %4, $r9d in %5

bb.0.entry:
  successors: %bb.1(0x40000000), %bb.5(0x40000000); %bb.1(50.00%), %bb.5(50.00%)
  liveins: $rdi, $rsi, $rdx, $rcx, $r8d, $r9d
  %5:gr32 = COPY $r9d
  %4:gr32 = COPY $r8d
  %3:gr64 = COPY $rcx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.ten.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.ten.addr)
  MOV64mr %stack.1.j1.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.j1.addr)
  MOV64mr %stack.2.j2.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.j2.addr)
  MOV64mr %stack.3.j3.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.j3.addr)
  MOV32mr %stack.4.m.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.m.addr)
  MOV32mr %stack.5.ind.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.ind.addr)
  CMP32ri8 %5:gr32, 1, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  MOV32mi %stack.7.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

bb.2.for.cond:
; predecessors: %bb.1, %bb.4
  successors: %bb.3(0x7c000000), %bb.9(0x04000000); %bb.3(96.88%), %bb.9(3.12%)

  %62:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
  %62:gr32 = DEC32r %62:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %62:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.9, 13, implicit killed $eflags
  JMP_1 %bb.3

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.4(0x7c000000), %bb.9(0x04000000); %bb.4(96.88%), %bb.9(3.12%)

  %66:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %66:gr64 = SHL64ri %66:gr64(tied-def 0), 4, implicit-def dead $eflags
  %66:gr64 = ADD64rm %66:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  %67:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %68:fr64 = MOVSDrm_alt %66:gr64, 8, %67:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx3)
  UCOMISDrm %68:fr64, %66:gr64, 8, %67:gr64_nosp, 16, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx7)
  JCC_1 %bb.9, 6, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then9:
; predecessors: %bb.3
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %71:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %71:gr64 = SHL64ri %71:gr64(tied-def 0), 4, implicit-def dead $eflags
  %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  %72:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
  MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %73:fr64 :: (store 8 into %ir.temp)
  %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
  MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
  %75:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
  %78:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %78:gr64 = SHL64ri %78:gr64(tied-def 0), 4, implicit-def dead $eflags
  %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  %79:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
  %82:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %82:gr64 = SHL64ri %82:gr64(tied-def 0), 3, implicit-def dead $eflags
  %82:gr64 = ADD64rm %82:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  %83:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j_temp)
  %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
  MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
  %86:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  %89:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %89:gr64 = SHL64ri %89:gr64(tied-def 0), 3, implicit-def dead $eflags
  %89:gr64 = ADD64rm %89:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  %90:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
  %93:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %93:gr64 = SHL64ri %93:gr64(tied-def 0), 3, implicit-def dead $eflags
  %93:gr64 = ADD64rm %93:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  %94:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %95:gr32 :: (store 4 into %ir.j_temp)
  %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
  MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
  %97:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  %100:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %100:gr64 = SHL64ri %100:gr64(tied-def 0), 3, implicit-def dead $eflags
  %100:gr64 = ADD64rm %100:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  %101:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
  %104:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %104:gr64 = SHL64ri %104:gr64(tied-def 0), 3, implicit-def dead $eflags
  %104:gr64 = ADD64rm %104:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  %105:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %106:gr32 :: (store 4 into %ir.j_temp)
  %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
  MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
  %108:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  %111:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %111:gr64 = SHL64ri %111:gr64(tied-def 0), 3, implicit-def dead $eflags
  %111:gr64 = ADD64rm %111:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  %112:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
  INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.2

bb.5.if.else82:
; predecessors: %bb.0
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi %stack.7.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

bb.6.for.cond83:
; predecessors: %bb.5, %bb.8
  successors: %bb.7(0x7c000000), %bb.9(0x04000000); %bb.7(96.88%), %bb.9(3.12%)

  %9:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
  %9:gr32 = DEC32r %9:gr32(tied-def 0), implicit-def dead $eflags
  CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.9, 13, implicit killed $eflags
  JMP_1 %bb.7

bb.7.for.body86:
; predecessors: %bb.6
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %13:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %13:gr64 = SHL64ri %13:gr64(tied-def 0), 4, implicit-def dead $eflags
  %13:gr64 = ADD64rm %13:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  %14:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %15:fr64 = MOVSDrm_alt %13:gr64, 8, %14:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx95)
  UCOMISDrm %15:fr64, %13:gr64, 8, %14:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx90)
  JCC_1 %bb.9, 6, implicit killed $eflags
  JMP_1 %bb.8

bb.8.if.then97:
; predecessors: %bb.7
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %18:gr64 = SHL64ri %18:gr64(tied-def 0), 4, implicit-def dead $eflags
  %18:gr64 = ADD64rm %18:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  %19:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
  MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %20:fr64 :: (store 8 into %ir.temp)
  %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
  %22:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
  %25:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %25:gr64 = SHL64ri %25:gr64(tied-def 0), 4, implicit-def dead $eflags
  %25:gr64 = ADD64rm %25:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  %26:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
  %29:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %29:gr64 = SHL64ri %29:gr64(tied-def 0), 3, implicit-def dead $eflags
  %29:gr64 = ADD64rm %29:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  %30:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.j_temp)
  %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
  MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
  %33:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  %36:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %36:gr64 = SHL64ri %36:gr64(tied-def 0), 3, implicit-def dead $eflags
  %36:gr64 = ADD64rm %36:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  %37:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
  %40:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %40:gr64 = SHL64ri %40:gr64(tied-def 0), 3, implicit-def dead $eflags
  %40:gr64 = ADD64rm %40:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  %41:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %42:gr32 :: (store 4 into %ir.j_temp)
  %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
  MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
  %44:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  %47:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
  %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  %48:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
  %51:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %51:gr64 = SHL64ri %51:gr64(tied-def 0), 3, implicit-def dead $eflags
  %51:gr64 = ADD64rm %51:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  %52:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %53:gr32 :: (store 4 into %ir.j_temp)
  %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
  MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
  %55:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  %58:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %58:gr64 = SHL64ri %58:gr64(tied-def 0), 3, implicit-def dead $eflags
  %58:gr64 = ADD64rm %58:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  %59:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
  INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.6

bb.9.if.end175:
; predecessors: %bb.6, %bb.7, %bb.2, %bb.3

  RET 0

# End machine code for function bubble.

********** MI Scheduling **********
bubble:%bb.0 entry
  From: %5:gr32 = COPY $r9d
    To: JCC_1 %bb.5, 5, implicit killed $eflags
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=0 Reg=%5
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %4:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.ten.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.ten.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.j1.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.j1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.j2.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.j2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.j3.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.j3.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.m.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.m.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.ind.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.ind.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   CMP32ri8 %5:gr32, 1, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) CMP32ri8 %5:gr32, 1, implicit-def $eflags
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(11) MOV32mr %stack.5.ind.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.ind.addr)
              to 
  UpdateRegP: SU(12) CMP32ri8 %5:gr32, 1, implicit-def $eflags
              to 
  Ready @1c
  BotQ.A BotLatency SU(12) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 9 8 7 6 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.ind.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 10 9 8 7 0 
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.m.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.m.addr)
Bottom Pressure:
GR16=4
  LiveReg: %4
  UpdateRegP: SU(10) MOV32mr %stack.4.m.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.m.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 9 8 7 1 
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.j3.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.j3.addr)
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(9) MOV64mr %stack.3.j3.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.j3.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 8 7 2 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.j2.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.j2.addr)
Bottom Pressure:
GR16=8
  LiveReg: %2
  UpdateRegP: SU(8) MOV64mr %stack.2.j2.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.j2.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 7 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.j1.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.j1.addr)
Bottom Pressure:
GR16=10
  LiveReg: %1
  UpdateRegP: SU(7) MOV64mr %stack.1.j1.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.j1.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 3 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.ten.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.ten.addr)
Bottom Pressure:
GR16=12
  LiveReg: %0
  UpdateRegP: SU(6) MOV64mr %stack.0.ten.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.ten.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr32 = COPY $r9d
SU(1):   %4:gr32 = COPY $r8d
SU(2):   %3:gr64 = COPY $rcx
SU(3):   %2:gr64 = COPY $rdx
SU(4):   %1:gr64 = COPY $rsi
SU(5):   %0:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.ten.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.ten.addr)
SU(7):   MOV64mr %stack.1.j1.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.j1.addr)
SU(8):   MOV64mr %stack.2.j2.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.j2.addr)
SU(9):   MOV64mr %stack.3.j3.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.j3.addr)
SU(10):   MOV32mr %stack.4.m.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.m.addr)
SU(11):   MOV32mr %stack.5.ind.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.ind.addr)
SU(12):   CMP32ri8 %5:gr32, 1, implicit-def $eflags

********** MI Scheduling **********
bubble:%bb.2 for.cond
  From: %62:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
    To: JCC_1 %bb.9, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %62:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%62
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %62:gr32 = DEC32r %62:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%62
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%62
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %62:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%62
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %62:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %62:gr32 = DEC32r %62:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %62:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %62:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
SU(1):   %62:gr32 = DEC32r %62:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %62:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
bubble:%bb.3 for.body
  From: %66:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JCC_1 %bb.9, 6, implicit killed $eflags
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(1): Data Latency=4 Reg=%66
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %66:gr64 = SHL64ri %66:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%66
    SU(2): Out  Latency=0
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(2):   %66:gr64 = ADD64rm %66:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(1): Data Latency=1 Reg=%66
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%66
    SU(4): Data Latency=4 Reg=%66
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(3):   %67:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(5): Data Latency=4 Reg=%67
    SU(4): Data Latency=4 Reg=%67
  Single Issue       : false;
SU(4):   %68:fr64 = MOVSDrm_alt %66:gr64, 8, %67:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%66
    SU(3): Data Latency=4 Reg=%67
  Successors:
    SU(5): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(5):   UCOMISDrm %68:fr64, %66:gr64, 8, %67:gr64_nosp, 16, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx7)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%68
    SU(3): Data Latency=4 Reg=%67
    SU(2): Data Latency=4 Reg=%66
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 6, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) UCOMISDrm %68:fr64, %66:gr64, 8, %67:gr64_nosp, 16, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx7)
  Ready @4c
  BotQ.A TopLatency SU(5) 13c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %68:fr64 = MOVSDrm_alt %66:gr64, 8, %67:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx3)
  Ready @8c
  BotQ.A BotLatency SU(4) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %67:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  Ready @12c
  BotQ.A BotLatency SU(3) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %66:gr64 = ADD64rm %66:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %66:gr64 = SHL64ri %66:gr64(tied-def 0), 4, implicit-def dead $eflags
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @17c
  BotQ.A BotLatency SU(0) 17c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %66:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %66:gr64 = SHL64ri %66:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(2):   %66:gr64 = ADD64rm %66:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
SU(3):   %67:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(4):   %68:fr64 = MOVSDrm_alt %66:gr64, 8, %67:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx3)
SU(5):   UCOMISDrm %68:fr64, %66:gr64, 8, %67:gr64_nosp, 16, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx7)

********** MI Scheduling **********
bubble:%bb.4 if.then9
  From: %71:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.2
 RegionInstrs: 57
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %71:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 118
  Successors:
    SU(1): Data Latency=4 Reg=%71
    SU(1): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %71:gr64 = SHL64ri %71:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 114
  Predecessors:
    SU(0): Data Latency=4 Reg=%71
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%71
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  # preds left       : 2
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 113
  Predecessors:
    SU(1): Data Latency=1 Reg=%71
    SU(1): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%71
    SU(6): Data Latency=4 Reg=%71
    SU(4): Data Latency=4 Reg=%71
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %72:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 113
  Successors:
    SU(7): Data Latency=4 Reg=%72
    SU(6): Data Latency=4 Reg=%72
    SU(4): Data Latency=4 Reg=%72
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
  # preds left       : 2
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 109
  Predecessors:
    SU(2): Data Latency=4 Reg=%71
    SU(3): Data Latency=4 Reg=%72
  Successors:
    SU(5): Data Latency=4 Reg=%73
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(5):   MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %73:fr64 :: (store 8 into %ir.temp)
  # preds left       : 2
  # succs left       : 16
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 105
  Predecessors:
    SU(4): Data Latency=4 Reg=%73
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
  # preds left       : 3
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 104
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%72
    SU(2): Data Latency=4 Reg=%71
  Successors:
    SU(7): Data Latency=4 Reg=%74
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(7):   MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
  # preds left       : 9
  # succs left       : 42
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 100
  Predecessors:
    SU(6): Data Latency=4 Reg=%74
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%72
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=%71
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(8):   %75:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 94
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%75
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(9):   %78:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 99
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%78
    SU(10): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %78:gr64 = SHL64ri %78:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 95
  Predecessors:
    SU(9): Data Latency=4 Reg=%78
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%78
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  # preds left       : 3
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 94
  Predecessors:
    SU(10): Data Latency=1 Reg=%78
    SU(10): Out  Latency=0
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%78
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %79:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 94
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%79
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
  # preds left       : 14
  # succs left       : 37
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 90
  Predecessors:
    SU(11): Data Latency=4 Reg=%78
    SU(12): Ord  Latency=0 Memory
    SU(12): Data Latency=4 Reg=%79
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%75
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(14):   %82:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 89
  Predecessors:
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%82
    SU(15): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %82:gr64 = SHL64ri %82:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 85
  Predecessors:
    SU(14): Data Latency=4 Reg=%82
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%82
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %82:gr64 = ADD64rm %82:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  # preds left       : 4
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 84
  Predecessors:
    SU(15): Data Latency=1 Reg=%82
    SU(15): Out  Latency=0
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%82
    SU(20): Data Latency=4 Reg=%82
    SU(18): Data Latency=4 Reg=%82
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %83:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 84
  Predecessors:
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%83
    SU(20): Data Latency=4 Reg=%83
    SU(18): Data Latency=4 Reg=%83
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
  # preds left       : 5
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 38
  Height             : 80
  Predecessors:
    SU(16): Data Latency=4 Reg=%82
    SU(17): Data Latency=4 Reg=%83
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%84
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j_temp)
  # preds left       : 6
  # succs left       : 16
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 76
  Predecessors:
    SU(18): Data Latency=4 Reg=%84
    SU(18): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
  # preds left       : 6
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 43
  Height             : 75
  Predecessors:
    SU(19): Ord  Latency=1 Memory
    SU(17): Data Latency=4 Reg=%83
    SU(16): Data Latency=4 Reg=%82
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%85
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
  # preds left       : 21
  # succs left       : 30
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 71
  Predecessors:
    SU(20): Data Latency=4 Reg=%85
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Data Latency=4 Reg=%83
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=4 Reg=%82
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(22):   %86:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  # preds left       : 4
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 65
  Predecessors:
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%86
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   %89:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 3
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 70
  Predecessors:
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%89
    SU(24): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(24):   %89:gr64 = SHL64ri %89:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 52
  Height             : 66
  Predecessors:
    SU(23): Data Latency=4 Reg=%89
    SU(23): Out  Latency=0
  Successors:
    SU(25): Data Latency=1 Reg=%89
    SU(25): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %89:gr64 = ADD64rm %89:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 53
  Height             : 65
  Predecessors:
    SU(24): Data Latency=1 Reg=%89
    SU(24): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%89
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %90:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 65
  Predecessors:
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%90
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(27):   MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
  # preds left       : 26
  # succs left       : 25
  # rdefs left       : 0
  Latency            : 1
  Depth              : 57
  Height             : 61
  Predecessors:
    SU(25): Data Latency=4 Reg=%89
    SU(26): Ord  Latency=0 Memory
    SU(26): Data Latency=4 Reg=%90
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Data Latency=4 Reg=%86
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(28):   %93:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 58
  Height             : 60
  Predecessors:
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%93
    SU(29): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(29):   %93:gr64 = SHL64ri %93:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 62
  Height             : 56
  Predecessors:
    SU(28): Data Latency=4 Reg=%93
    SU(28): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%93
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %93:gr64 = ADD64rm %93:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  # preds left       : 6
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 63
  Height             : 55
  Predecessors:
    SU(29): Data Latency=1 Reg=%93
    SU(29): Out  Latency=0
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%93
    SU(34): Data Latency=4 Reg=%93
    SU(32): Data Latency=4 Reg=%93
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %94:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 58
  Height             : 55
  Predecessors:
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%94
    SU(34): Data Latency=4 Reg=%94
    SU(32): Data Latency=4 Reg=%94
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(32):   %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
  # preds left       : 8
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 67
  Height             : 51
  Predecessors:
    SU(30): Data Latency=4 Reg=%93
    SU(31): Data Latency=4 Reg=%94
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(33): Data Latency=4 Reg=%95
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(33):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %95:gr32 :: (store 4 into %ir.j_temp)
  # preds left       : 12
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 71
  Height             : 47
  Predecessors:
    SU(32): Data Latency=4 Reg=%95
    SU(32): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(47): Ord  Latency=0 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
  # preds left       : 9
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 72
  Height             : 46
  Predecessors:
    SU(33): Ord  Latency=1 Memory
    SU(31): Data Latency=4 Reg=%94
    SU(30): Data Latency=4 Reg=%93
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%96
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(35):   MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
  # preds left       : 33
  # succs left       : 18
  # rdefs left       : 0
  Latency            : 1
  Depth              : 76
  Height             : 42
  Predecessors:
    SU(34): Data Latency=4 Reg=%96
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Data Latency=4 Reg=%94
    SU(31): Ord  Latency=0 Memory
    SU(30): Data Latency=4 Reg=%93
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(36):   %97:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  # preds left       : 7
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 77
  Height             : 36
  Predecessors:
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%97
    SU(47): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(37):   %100:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 77
  Height             : 41
  Predecessors:
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(38): Data Latency=4 Reg=%100
    SU(38): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(38):   %100:gr64 = SHL64ri %100:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 81
  Height             : 37
  Predecessors:
    SU(37): Data Latency=4 Reg=%100
    SU(37): Out  Latency=0
  Successors:
    SU(39): Data Latency=1 Reg=%100
    SU(39): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(39):   %100:gr64 = ADD64rm %100:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 82
  Height             : 36
  Predecessors:
    SU(38): Data Latency=1 Reg=%100
    SU(38): Out  Latency=0
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%100
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(40):   %101:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 77
  Height             : 36
  Predecessors:
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%101
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(41):   MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
  # preds left       : 38
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 1
  Depth              : 86
  Height             : 32
  Predecessors:
    SU(39): Data Latency=4 Reg=%100
    SU(40): Ord  Latency=0 Memory
    SU(40): Data Latency=4 Reg=%101
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(36): Data Latency=4 Reg=%97
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(42):   %104:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 87
  Height             : 31
  Predecessors:
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(43): Data Latency=4 Reg=%104
    SU(43): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(43):   %104:gr64 = SHL64ri %104:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 91
  Height             : 27
  Predecessors:
    SU(42): Data Latency=4 Reg=%104
    SU(42): Out  Latency=0
  Successors:
    SU(44): Data Latency=1 Reg=%104
    SU(44): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(44):   %104:gr64 = ADD64rm %104:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  # preds left       : 8
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 92
  Height             : 26
  Predecessors:
    SU(43): Data Latency=1 Reg=%104
    SU(43): Out  Latency=0
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(49): Data Latency=4 Reg=%104
    SU(48): Data Latency=4 Reg=%104
    SU(46): Data Latency=4 Reg=%104
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(45):   %105:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 87
  Height             : 26
  Predecessors:
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(49): Data Latency=4 Reg=%105
    SU(48): Data Latency=4 Reg=%105
    SU(46): Data Latency=4 Reg=%105
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(46):   %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
  # preds left       : 11
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 96
  Height             : 22
  Predecessors:
    SU(44): Data Latency=4 Reg=%104
    SU(45): Data Latency=4 Reg=%105
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(47): Data Latency=4 Reg=%106
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(47):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %106:gr32 :: (store 4 into %ir.j_temp)
  # preds left       : 18
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 100
  Height             : 18
  Predecessors:
    SU(46): Data Latency=4 Reg=%106
    SU(46): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(50): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(48):   %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
  # preds left       : 12
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 101
  Height             : 17
  Predecessors:
    SU(47): Ord  Latency=1 Memory
    SU(45): Data Latency=4 Reg=%105
    SU(44): Data Latency=4 Reg=%104
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(49): Data Latency=4 Reg=%107
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(49):   MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
  # preds left       : 45
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 105
  Height             : 13
  Predecessors:
    SU(48): Data Latency=4 Reg=%107
    SU(48): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Data Latency=4 Reg=%105
    SU(45): Ord  Latency=0 Memory
    SU(44): Data Latency=4 Reg=%104
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(50):   %108:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 106
  Height             : 7
  Predecessors:
    SU(49): Ord  Latency=1 Memory
    SU(47): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%108
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(51):   %111:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 106
  Height             : 12
  Predecessors:
    SU(49): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(52): Data Latency=4 Reg=%111
    SU(52): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(52):   %111:gr64 = SHL64ri %111:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 110
  Height             : 8
  Predecessors:
    SU(51): Data Latency=4 Reg=%111
    SU(51): Out  Latency=0
  Successors:
    SU(53): Data Latency=1 Reg=%111
    SU(53): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(53):   %111:gr64 = ADD64rm %111:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 111
  Height             : 7
  Predecessors:
    SU(52): Data Latency=1 Reg=%111
    SU(52): Out  Latency=0
    SU(49): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%111
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(54):   %112:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 106
  Height             : 7
  Predecessors:
    SU(49): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%112
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(55):   MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
  # preds left       : 50
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 115
  Height             : 3
  Predecessors:
    SU(53): Data Latency=4 Reg=%111
    SU(54): Ord  Latency=0 Memory
    SU(54): Data Latency=4 Reg=%112
    SU(53): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(50): Data Latency=4 Reg=%108
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(56):   INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 24
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 115
  Height             : 3
  Predecessors:
    SU(55): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 118
  Height             : 0
  Predecessors:
    SU(56): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 118
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 56 
Scheduling SU(56) INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(56) 115c
  BotQ.A BotLatency SU(56) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 55 
Scheduling SU(55) MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
Bottom Pressure:
GR16=6
  LiveReg: %111
  UpdateRegP: SU(55) MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
              to GR16 4
  LiveReg: %112
  UpdateRegP: SU(55) MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
              to GR16 2
  LiveReg: %108
  UpdateRegP: SU(55) MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 54 53 50 
  Cand SU(54) ORDER                              
Pick Bot ORDER     
Scheduling SU(54) %112:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(54) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 53 
  Cand SU(50) ORDER                              
  Cand SU(53) ORDER                              
Pick Bot ORDER     
Scheduling SU(53) %111:gr64 = ADD64rm %111:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
Bottom Pressure:
GR16=4
  LiveReg: %111
  UpdateRegP: SU(53) %111:gr64 = ADD64rm %111:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
              to GR16 -2
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 52 
  Cand SU(50) ORDER                              
  Cand SU(52) ORDER                              
Pick Bot ORDER     
Scheduling SU(52) %111:gr64 = SHL64ri %111:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %111
  UpdateRegP: SU(52) %111:gr64 = SHL64ri %111:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(52) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 51 
  Cand SU(50) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) %111:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(51) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 
Scheduling SU(50) %108:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
Bottom Pressure:

  Ready @7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 
Scheduling SU(49) MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
Bottom Pressure:
GR16=6
  LiveReg: %104
  UpdateRegP: SU(46) %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
              to 
  UpdateRegP: SU(48) %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
              to 
  UpdateRegP: SU(49) MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
              to GR16 4
  LiveReg: %105
  UpdateRegP: SU(46) %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
              to GR16 -2
  UpdateRegP: SU(48) %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
              to GR16 -2
  UpdateRegP: SU(49) MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
              to GR16 2
  LiveReg: %107
  UpdateRegP: SU(49) MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
              to 
  Ready @13c
  BotQ.A BotLatency SU(49) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 
Scheduling SU(48) %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
Bottom Pressure:
GR16=4
  Ready @17c
  BotQ.A BotLatency SU(48) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 
Scheduling SU(47) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %106:gr32 :: (store 4 into %ir.j_temp)
Bottom Pressure:
GR16=6
  LiveReg: %106
  UpdateRegP: SU(47) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %106:gr32 :: (store 4 into %ir.j_temp)
              to 
  Ready @18c
  BotQ.A BotLatency SU(47) 18c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 
Scheduling SU(46) %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
Bottom Pressure:
GR16=4
  Ready @22c
  BotQ.A BotLatency SU(46) 22c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 45 
  Cand SU(44) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) %105:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @26c
  BotQ.A BotLatency SU(45) 26c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 
Scheduling SU(44) %104:gr64 = ADD64rm %104:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
Bottom Pressure:
GR16=2
  LiveReg: %104
  UpdateRegP: SU(44) %104:gr64 = ADD64rm %104:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
              to GR16 -2
  Ready @26c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 43 
Scheduling SU(43) %104:gr64 = SHL64ri %104:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %104
  UpdateRegP: SU(43) %104:gr64 = SHL64ri %104:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(43) 27c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 
Scheduling SU(42) %104:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @31c
  BotQ.A BotLatency SU(42) 31c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 
Scheduling SU(41) MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
Bottom Pressure:
GR16=6
  LiveReg: %100
  UpdateRegP: SU(41) MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
              to GR16 4
  LiveReg: %101
  UpdateRegP: SU(41) MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
              to GR16 2
  LiveReg: %97
  UpdateRegP: SU(41) MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
              to 
  Ready @32c
  BotQ.A BotLatency SU(41) 32c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 39 36 
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %101:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=4
  Ready @36c
  BotQ.A BotLatency SU(40) 36c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 39 
  Cand SU(36) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %100:gr64 = ADD64rm %100:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
Bottom Pressure:
GR16=4
  LiveReg: %100
  UpdateRegP: SU(39) %100:gr64 = ADD64rm %100:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
              to GR16 -2
  Ready @36c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 38 
  Cand SU(36) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %100:gr64 = SHL64ri %100:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %100
  UpdateRegP: SU(38) %100:gr64 = SHL64ri %100:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @37c
  BotQ.A BotLatency SU(38) 37c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 37 
  Cand SU(36) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %100:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @41c
  BotQ.A BotLatency SU(37) 41c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 
Scheduling SU(36) %97:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
Bottom Pressure:

  Ready @36c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
Bottom Pressure:
GR16=6
  LiveReg: %93
  UpdateRegP: SU(32) %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
              to 
  UpdateRegP: SU(34) %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
              to 
  UpdateRegP: SU(35) MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
              to GR16 4
  LiveReg: %94
  UpdateRegP: SU(32) %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
              to GR16 -2
  UpdateRegP: SU(34) %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
              to GR16 -2
  UpdateRegP: SU(35) MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
              to GR16 2
  LiveReg: %96
  UpdateRegP: SU(35) MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
              to 
  Ready @42c
  BotQ.A BotLatency SU(35) 42c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
Bottom Pressure:
GR16=4
  Ready @46c
  BotQ.A BotLatency SU(34) 46c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %95:gr32 :: (store 4 into %ir.j_temp)
Bottom Pressure:
GR16=6
  LiveReg: %95
  UpdateRegP: SU(33) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %95:gr32 :: (store 4 into %ir.j_temp)
              to 
  Ready @47c
  BotQ.A BotLatency SU(33) 47c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
Bottom Pressure:
GR16=4
  Ready @51c
  BotQ.A BotLatency SU(32) 51c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %94:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @55c
  BotQ.A BotLatency SU(31) 55c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %93:gr64 = ADD64rm %93:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
Bottom Pressure:
GR16=2
  LiveReg: %93
  UpdateRegP: SU(30) %93:gr64 = ADD64rm %93:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
              to GR16 -2
  Ready @55c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 
Scheduling SU(29) %93:gr64 = SHL64ri %93:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %93
  UpdateRegP: SU(29) %93:gr64 = SHL64ri %93:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @56c
  BotQ.A BotLatency SU(29) 56c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 56c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) %93:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @60c
  BotQ.A BotLatency SU(28) 60c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 60c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 
Scheduling SU(27) MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
Bottom Pressure:
GR16=6
  LiveReg: %89
  UpdateRegP: SU(27) MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
              to GR16 4
  LiveReg: %90
  UpdateRegP: SU(27) MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
              to GR16 2
  LiveReg: %86
  UpdateRegP: SU(27) MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
              to 
  Ready @61c
  BotQ.A BotLatency SU(27) 61c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 61c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 22 
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %90:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=4
  Ready @65c
  BotQ.A BotLatency SU(26) 65c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 65c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 25 
  Cand SU(22) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %89:gr64 = ADD64rm %89:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
Bottom Pressure:
GR16=4
  LiveReg: %89
  UpdateRegP: SU(25) %89:gr64 = ADD64rm %89:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
              to GR16 -2
  Ready @65c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 65c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 24 
  Cand SU(22) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %89:gr64 = SHL64ri %89:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %89
  UpdateRegP: SU(24) %89:gr64 = SHL64ri %89:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @66c
  BotQ.A BotLatency SU(24) 66c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 66c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 23 
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %89:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @70c
  BotQ.A BotLatency SU(23) 70c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 70c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Scheduling SU(22) %86:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
Bottom Pressure:

  Ready @65c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 70c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
Bottom Pressure:
GR16=6
  LiveReg: %82
  UpdateRegP: SU(18) %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
              to 
  UpdateRegP: SU(20) %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
              to 
  UpdateRegP: SU(21) MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
              to GR16 4
  LiveReg: %83
  UpdateRegP: SU(18) %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
              to GR16 -2
  UpdateRegP: SU(20) %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
              to GR16 -2
  UpdateRegP: SU(21) MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
              to GR16 2
  LiveReg: %85
  UpdateRegP: SU(21) MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
              to 
  Ready @71c
  BotQ.A BotLatency SU(21) 71c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 71c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
Bottom Pressure:
GR16=4
  Ready @75c
  BotQ.A BotLatency SU(20) 75c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 75c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j_temp)
Bottom Pressure:
GR16=6
  LiveReg: %84
  UpdateRegP: SU(19) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j_temp)
              to 
  Ready @76c
  BotQ.A BotLatency SU(19) 76c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 76c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
Bottom Pressure:
GR16=4
  Ready @80c
  BotQ.A BotLatency SU(18) 80c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 80c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %83:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @84c
  BotQ.A BotLatency SU(17) 84c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 84c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %82:gr64 = ADD64rm %82:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
Bottom Pressure:
GR16=2
  LiveReg: %82
  UpdateRegP: SU(16) %82:gr64 = ADD64rm %82:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
              to GR16 -2
  Ready @84c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 84c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %82:gr64 = SHL64ri %82:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %82
  UpdateRegP: SU(15) %82:gr64 = SHL64ri %82:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @85c
  BotQ.A BotLatency SU(15) 85c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 85c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %82:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @89c
  BotQ.A BotLatency SU(14) 89c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 89c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %78
  UpdateRegP: SU(13) MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %79
  UpdateRegP: SU(13) MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
              to FR32 1    FR32X 1
  LiveReg: %75
  UpdateRegP: SU(13) MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
              to 
  Ready @90c
  BotQ.A BotLatency SU(13) 90c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 90c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 8 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %79:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @94c
  BotQ.A BotLatency SU(12) 94c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 94c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %78
  UpdateRegP: SU(11) %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
              to GR16 -2
  Ready @94c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 94c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %78:gr64 = SHL64ri %78:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %78
  UpdateRegP: SU(10) %78:gr64 = SHL64ri %78:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @95c
  BotQ.A BotLatency SU(10) 95c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 95c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %78:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @99c
  BotQ.A BotLatency SU(9) 99c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 99c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %75:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
Bottom Pressure:

  Ready @94c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 99c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %71
  UpdateRegP: SU(4) %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(6) %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(7) MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %72
  UpdateRegP: SU(4) %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(6) %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(7) MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
              to FR32 1    FR32X 1
  LiveReg: %74
  UpdateRegP: SU(7) MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
              to 
  Ready @100c
  BotQ.A BotLatency SU(7) 100c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 100c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
Bottom Pressure:
GR16=4
  Ready @104c
  BotQ.A BotLatency SU(6) 104c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 104c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %73:fr64 :: (store 8 into %ir.temp)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %73
  UpdateRegP: SU(5) MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %73:fr64 :: (store 8 into %ir.temp)
              to 
  Ready @105c
  BotQ.A BotLatency SU(5) 105c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 105c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
Bottom Pressure:
GR16=4
  Ready @109c
  BotQ.A BotLatency SU(4) 109c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 109c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %72:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @113c
  BotQ.A BotLatency SU(3) 113c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 113c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
Bottom Pressure:
GR16=2
  LiveReg: %71
  UpdateRegP: SU(2) %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
              to GR16 -2
  Ready @113c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 113c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %71:gr64 = SHL64ri %71:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %71
  UpdateRegP: SU(1) %71:gr64 = SHL64ri %71:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @114c
  BotQ.A BotLatency SU(1) 114c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 114c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %71:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @118c
  BotQ.A BotLatency SU(0) 118c
BotQ.A @14c
  Retired: 57
  Executed: 14c
  Critical: 14c, 57 MOps
  ExpectedLatency: 118c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %71:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %71:gr64 = SHL64ri %71:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(2):   %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
SU(3):   %72:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(4):   %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
SU(5):   MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %73:fr64 :: (store 8 into %ir.temp)
SU(6):   %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
SU(7):   MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
SU(8):   %75:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
SU(9):   %78:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(10):   %78:gr64 = SHL64ri %78:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(11):   %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
SU(12):   %79:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(13):   MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
SU(14):   %82:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(15):   %82:gr64 = SHL64ri %82:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(16):   %82:gr64 = ADD64rm %82:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
SU(17):   %83:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(18):   %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
SU(19):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j_temp)
SU(20):   %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
SU(21):   MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
SU(22):   %86:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
SU(23):   %89:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(24):   %89:gr64 = SHL64ri %89:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(25):   %89:gr64 = ADD64rm %89:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
SU(26):   %90:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(27):   MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
SU(28):   %93:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(29):   %93:gr64 = SHL64ri %93:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(30):   %93:gr64 = ADD64rm %93:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
SU(31):   %94:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(32):   %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
SU(33):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %95:gr32 :: (store 4 into %ir.j_temp)
SU(34):   %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
SU(35):   MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
SU(36):   %97:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
SU(37):   %100:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(38):   %100:gr64 = SHL64ri %100:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(39):   %100:gr64 = ADD64rm %100:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
SU(40):   %101:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(41):   MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
SU(42):   %104:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(43):   %104:gr64 = SHL64ri %104:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(44):   %104:gr64 = ADD64rm %104:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
SU(45):   %105:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(46):   %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
SU(47):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %106:gr32 :: (store 4 into %ir.j_temp)
SU(48):   %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
SU(49):   MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
SU(50):   %108:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
SU(51):   %111:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(52):   %111:gr64 = SHL64ri %111:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(53):   %111:gr64 = ADD64rm %111:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
SU(54):   %112:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(55):   MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
SU(56):   INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
bubble:%bb.6 for.cond83
  From: %9:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
    To: JCC_1 %bb.9, 13, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%9
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %9:gr32 = DEC32r %9:gr32(tied-def 0), implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%9
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%9
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %9:gr32 = DEC32r %9:gr32(tied-def 0), implicit-def dead $eflags
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %9:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
SU(1):   %9:gr32 = DEC32r %9:gr32(tied-def 0), implicit-def dead $eflags
SU(2):   CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
bubble:%bb.7 for.body86
  From: %13:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JCC_1 %bb.9, 6, implicit killed $eflags
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %13:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(1): Data Latency=4 Reg=%13
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %13:gr64 = SHL64ri %13:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Data Latency=4 Reg=%13
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%13
    SU(2): Out  Latency=0
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(2):   %13:gr64 = ADD64rm %13:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(1): Data Latency=1 Reg=%13
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%13
    SU(4): Data Latency=4 Reg=%13
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(3):   %14:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(5): Data Latency=4 Reg=%14
    SU(4): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(4):   %15:fr64 = MOVSDrm_alt %13:gr64, 8, %14:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx95)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%13
    SU(3): Data Latency=4 Reg=%14
  Successors:
    SU(5): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(5):   UCOMISDrm %15:fr64, %13:gr64, 8, %14:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx90)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%15
    SU(3): Data Latency=4 Reg=%14
    SU(2): Data Latency=4 Reg=%13
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 6, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) UCOMISDrm %15:fr64, %13:gr64, 8, %14:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx90)
  Ready @4c
  BotQ.A TopLatency SU(5) 13c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %15:fr64 = MOVSDrm_alt %13:gr64, 8, %14:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx95)
  Ready @8c
  BotQ.A BotLatency SU(4) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %14:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  Ready @12c
  BotQ.A BotLatency SU(3) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %13:gr64 = ADD64rm %13:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %13:gr64 = SHL64ri %13:gr64(tied-def 0), 4, implicit-def dead $eflags
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %13:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @17c
  BotQ.A BotLatency SU(0) 17c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %13:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %13:gr64 = SHL64ri %13:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(2):   %13:gr64 = ADD64rm %13:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
SU(3):   %14:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(4):   %15:fr64 = MOVSDrm_alt %13:gr64, 8, %14:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx95)
SU(5):   UCOMISDrm %15:fr64, %13:gr64, 8, %14:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx90)

********** MI Scheduling **********
bubble:%bb.8 if.then97
  From: %18:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: JMP_1 %bb.6
 RegionInstrs: 57
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %18:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 118
  Successors:
    SU(1): Data Latency=4 Reg=%18
    SU(1): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %18:gr64 = SHL64ri %18:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 114
  Predecessors:
    SU(0): Data Latency=4 Reg=%18
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%18
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %18:gr64 = ADD64rm %18:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  # preds left       : 2
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 113
  Predecessors:
    SU(1): Data Latency=1 Reg=%18
    SU(1): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%18
    SU(6): Data Latency=4 Reg=%18
    SU(4): Data Latency=4 Reg=%18
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %19:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 0
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 113
  Successors:
    SU(7): Data Latency=4 Reg=%19
    SU(6): Data Latency=4 Reg=%19
    SU(4): Data Latency=4 Reg=%19
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
  # preds left       : 2
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 109
  Predecessors:
    SU(2): Data Latency=4 Reg=%18
    SU(3): Data Latency=4 Reg=%19
  Successors:
    SU(5): Data Latency=4 Reg=%20
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(5):   MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %20:fr64 :: (store 8 into %ir.temp)
  # preds left       : 2
  # succs left       : 16
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 105
  Predecessors:
    SU(4): Data Latency=4 Reg=%20
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
  # preds left       : 3
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 104
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%19
    SU(2): Data Latency=4 Reg=%18
  Successors:
    SU(7): Data Latency=4 Reg=%21
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(7):   MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
  # preds left       : 9
  # succs left       : 42
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 100
  Predecessors:
    SU(6): Data Latency=4 Reg=%21
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%19
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=%18
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(8):   %22:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 94
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%22
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(9):   %25:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 99
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%25
    SU(10): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %25:gr64 = SHL64ri %25:gr64(tied-def 0), 4, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 95
  Predecessors:
    SU(9): Data Latency=4 Reg=%25
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%25
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %25:gr64 = ADD64rm %25:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
  # preds left       : 3
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 94
  Predecessors:
    SU(10): Data Latency=1 Reg=%25
    SU(10): Out  Latency=0
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%25
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %26:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 94
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%26
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
  # preds left       : 14
  # succs left       : 37
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 90
  Predecessors:
    SU(11): Data Latency=4 Reg=%25
    SU(12): Ord  Latency=0 Memory
    SU(12): Data Latency=4 Reg=%26
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%22
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(18): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(14):   %29:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 89
  Predecessors:
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%29
    SU(15): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   %29:gr64 = SHL64ri %29:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 85
  Predecessors:
    SU(14): Data Latency=4 Reg=%29
    SU(14): Out  Latency=0
  Successors:
    SU(16): Data Latency=1 Reg=%29
    SU(16): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %29:gr64 = ADD64rm %29:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  # preds left       : 4
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 34
  Height             : 84
  Predecessors:
    SU(15): Data Latency=1 Reg=%29
    SU(15): Out  Latency=0
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%29
    SU(20): Data Latency=4 Reg=%29
    SU(18): Data Latency=4 Reg=%29
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %30:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 4
  Depth              : 29
  Height             : 84
  Predecessors:
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%30
    SU(20): Data Latency=4 Reg=%30
    SU(18): Data Latency=4 Reg=%30
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
  # preds left       : 5
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 38
  Height             : 80
  Predecessors:
    SU(16): Data Latency=4 Reg=%29
    SU(17): Data Latency=4 Reg=%30
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%31
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.j_temp)
  # preds left       : 6
  # succs left       : 16
  # rdefs left       : 0
  Latency            : 1
  Depth              : 42
  Height             : 76
  Predecessors:
    SU(18): Data Latency=4 Reg=%31
    SU(18): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(20): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
  # preds left       : 6
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 4
  Depth              : 43
  Height             : 75
  Predecessors:
    SU(19): Ord  Latency=1 Memory
    SU(17): Data Latency=4 Reg=%30
    SU(16): Data Latency=4 Reg=%29
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%32
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(21):   MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
  # preds left       : 21
  # succs left       : 30
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 71
  Predecessors:
    SU(20): Data Latency=4 Reg=%32
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Data Latency=4 Reg=%30
    SU(17): Ord  Latency=0 Memory
    SU(16): Data Latency=4 Reg=%29
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(26): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(23): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(22): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(22):   %33:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  # preds left       : 4
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 65
  Predecessors:
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%33
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(23):   %36:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 3
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 70
  Predecessors:
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%36
    SU(24): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(24):   %36:gr64 = SHL64ri %36:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 52
  Height             : 66
  Predecessors:
    SU(23): Data Latency=4 Reg=%36
    SU(23): Out  Latency=0
  Successors:
    SU(25): Data Latency=1 Reg=%36
    SU(25): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %36:gr64 = ADD64rm %36:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 53
  Height             : 65
  Predecessors:
    SU(24): Data Latency=1 Reg=%36
    SU(24): Out  Latency=0
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%36
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %37:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 65
  Predecessors:
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%37
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(27):   MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
  # preds left       : 26
  # succs left       : 25
  # rdefs left       : 0
  Latency            : 1
  Depth              : 57
  Height             : 61
  Predecessors:
    SU(25): Data Latency=4 Reg=%36
    SU(26): Ord  Latency=0 Memory
    SU(26): Data Latency=4 Reg=%37
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Data Latency=4 Reg=%33
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(31): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(28): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(32): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
    SU(30): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(28):   %40:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 58
  Height             : 60
  Predecessors:
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(29): Data Latency=4 Reg=%40
    SU(29): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(29):   %40:gr64 = SHL64ri %40:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 62
  Height             : 56
  Predecessors:
    SU(28): Data Latency=4 Reg=%40
    SU(28): Out  Latency=0
  Successors:
    SU(30): Data Latency=1 Reg=%40
    SU(30): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(30):   %40:gr64 = ADD64rm %40:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  # preds left       : 6
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 63
  Height             : 55
  Predecessors:
    SU(29): Data Latency=1 Reg=%40
    SU(29): Out  Latency=0
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%40
    SU(34): Data Latency=4 Reg=%40
    SU(32): Data Latency=4 Reg=%40
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %41:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 58
  Height             : 55
  Predecessors:
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%41
    SU(34): Data Latency=4 Reg=%41
    SU(32): Data Latency=4 Reg=%41
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(32):   %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
  # preds left       : 8
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 67
  Height             : 51
  Predecessors:
    SU(30): Data Latency=4 Reg=%40
    SU(31): Data Latency=4 Reg=%41
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(33): Data Latency=4 Reg=%42
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(33):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %42:gr32 :: (store 4 into %ir.j_temp)
  # preds left       : 12
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 71
  Height             : 47
  Predecessors:
    SU(32): Data Latency=4 Reg=%42
    SU(32): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(47): Ord  Latency=0 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(34): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
  # preds left       : 9
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 72
  Height             : 46
  Predecessors:
    SU(33): Ord  Latency=1 Memory
    SU(31): Data Latency=4 Reg=%41
    SU(30): Data Latency=4 Reg=%40
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(35): Data Latency=4 Reg=%43
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(35):   MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
  # preds left       : 33
  # succs left       : 18
  # rdefs left       : 0
  Latency            : 1
  Depth              : 76
  Height             : 42
  Predecessors:
    SU(34): Data Latency=4 Reg=%43
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Data Latency=4 Reg=%41
    SU(31): Ord  Latency=0 Memory
    SU(30): Data Latency=4 Reg=%40
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(40): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(37): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(36): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(39): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(36):   %44:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  # preds left       : 7
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 77
  Height             : 36
  Predecessors:
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%44
    SU(47): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(37):   %47:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 5
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 77
  Height             : 41
  Predecessors:
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(38): Data Latency=4 Reg=%47
    SU(38): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(38):   %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 81
  Height             : 37
  Predecessors:
    SU(37): Data Latency=4 Reg=%47
    SU(37): Out  Latency=0
  Successors:
    SU(39): Data Latency=1 Reg=%47
    SU(39): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(39):   %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 82
  Height             : 36
  Predecessors:
    SU(38): Data Latency=1 Reg=%47
    SU(38): Out  Latency=0
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%47
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(40):   %48:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 77
  Height             : 36
  Predecessors:
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%48
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(41):   MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
  # preds left       : 38
  # succs left       : 13
  # rdefs left       : 0
  Latency            : 1
  Depth              : 86
  Height             : 32
  Predecessors:
    SU(39): Data Latency=4 Reg=%47
    SU(40): Ord  Latency=0 Memory
    SU(40): Data Latency=4 Reg=%48
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(36): Data Latency=4 Reg=%44
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(45): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(44): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(42):   %51:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 87
  Height             : 31
  Predecessors:
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(43): Data Latency=4 Reg=%51
    SU(43): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(43):   %51:gr64 = SHL64ri %51:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 91
  Height             : 27
  Predecessors:
    SU(42): Data Latency=4 Reg=%51
    SU(42): Out  Latency=0
  Successors:
    SU(44): Data Latency=1 Reg=%51
    SU(44): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(44):   %51:gr64 = ADD64rm %51:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  # preds left       : 8
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 92
  Height             : 26
  Predecessors:
    SU(43): Data Latency=1 Reg=%51
    SU(43): Out  Latency=0
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(49): Data Latency=4 Reg=%51
    SU(48): Data Latency=4 Reg=%51
    SU(46): Data Latency=4 Reg=%51
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(45):   %52:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 87
  Height             : 26
  Predecessors:
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(49): Data Latency=4 Reg=%52
    SU(48): Data Latency=4 Reg=%52
    SU(46): Data Latency=4 Reg=%52
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(46):   %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
  # preds left       : 11
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 96
  Height             : 22
  Predecessors:
    SU(44): Data Latency=4 Reg=%51
    SU(45): Data Latency=4 Reg=%52
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(47): Data Latency=4 Reg=%53
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(47):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %53:gr32 :: (store 4 into %ir.j_temp)
  # preds left       : 18
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 100
  Height             : 18
  Predecessors:
    SU(46): Data Latency=4 Reg=%53
    SU(46): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(50): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(48):   %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
  # preds left       : 12
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 101
  Height             : 17
  Predecessors:
    SU(47): Ord  Latency=1 Memory
    SU(45): Data Latency=4 Reg=%52
    SU(44): Data Latency=4 Reg=%51
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Successors:
    SU(49): Data Latency=4 Reg=%54
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(49):   MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
  # preds left       : 45
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 105
  Height             : 13
  Predecessors:
    SU(48): Data Latency=4 Reg=%54
    SU(48): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Data Latency=4 Reg=%52
    SU(45): Ord  Latency=0 Memory
    SU(44): Data Latency=4 Reg=%51
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
    SU(54): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
    SU(51): Ord  Latency=1 Memory
    SU(50): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(50):   %55:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 106
  Height             : 7
  Predecessors:
    SU(49): Ord  Latency=1 Memory
    SU(47): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%55
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(51):   %58:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 106
  Height             : 12
  Predecessors:
    SU(49): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(52): Data Latency=4 Reg=%58
    SU(52): Out  Latency=0
    SU(56): Ord  Latency=0 Memory
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(52):   %58:gr64 = SHL64ri %58:gr64(tied-def 0), 3, implicit-def dead $eflags
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 110
  Height             : 8
  Predecessors:
    SU(51): Data Latency=4 Reg=%58
    SU(51): Out  Latency=0
  Successors:
    SU(53): Data Latency=1 Reg=%58
    SU(53): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(53):   %58:gr64 = ADD64rm %58:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 111
  Height             : 7
  Predecessors:
    SU(52): Data Latency=1 Reg=%58
    SU(52): Out  Latency=0
    SU(49): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%58
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(54):   %59:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 106
  Height             : 7
  Predecessors:
    SU(49): Ord  Latency=1 Memory
    SU(41): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(27): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%59
    SU(55): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(55):   MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
  # preds left       : 50
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 115
  Height             : 3
  Predecessors:
    SU(53): Data Latency=4 Reg=%58
    SU(54): Ord  Latency=0 Memory
    SU(54): Data Latency=4 Reg=%59
    SU(53): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(50): Data Latency=4 Reg=%55
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(47): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(45): Ord  Latency=0 Memory
    SU(44): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(31): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(56): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(56):   INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 24
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 115
  Height             : 3
  Predecessors:
    SU(55): Ord  Latency=0 Memory
    SU(51): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(32): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 118
  Height             : 0
  Predecessors:
    SU(56): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 118
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 56 
Scheduling SU(56) INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(56) 115c
  BotQ.A BotLatency SU(56) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 55 
Scheduling SU(55) MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
Bottom Pressure:
GR16=6
  LiveReg: %58
  UpdateRegP: SU(55) MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
              to GR16 4
  LiveReg: %59
  UpdateRegP: SU(55) MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
              to GR16 2
  LiveReg: %55
  UpdateRegP: SU(55) MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 54 53 50 
  Cand SU(54) ORDER                              
Pick Bot ORDER     
Scheduling SU(54) %59:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(54) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 53 
  Cand SU(50) ORDER                              
  Cand SU(53) ORDER                              
Pick Bot ORDER     
Scheduling SU(53) %58:gr64 = ADD64rm %58:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
Bottom Pressure:
GR16=4
  LiveReg: %58
  UpdateRegP: SU(53) %58:gr64 = ADD64rm %58:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
              to GR16 -2
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 52 
  Cand SU(50) ORDER                              
  Cand SU(52) ORDER                              
Pick Bot ORDER     
Scheduling SU(52) %58:gr64 = SHL64ri %58:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %58
  UpdateRegP: SU(52) %58:gr64 = SHL64ri %58:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(52) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 51 
  Cand SU(50) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) %58:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(51) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 
Scheduling SU(50) %55:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
Bottom Pressure:

  Ready @7c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 
Scheduling SU(49) MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
Bottom Pressure:
GR16=6
  LiveReg: %51
  UpdateRegP: SU(46) %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
              to 
  UpdateRegP: SU(48) %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
              to 
  UpdateRegP: SU(49) MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
              to GR16 4
  LiveReg: %52
  UpdateRegP: SU(46) %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
              to GR16 -2
  UpdateRegP: SU(48) %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
              to GR16 -2
  UpdateRegP: SU(49) MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
              to GR16 2
  LiveReg: %54
  UpdateRegP: SU(49) MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
              to 
  Ready @13c
  BotQ.A BotLatency SU(49) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 
Scheduling SU(48) %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
Bottom Pressure:
GR16=4
  Ready @17c
  BotQ.A BotLatency SU(48) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 
Scheduling SU(47) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %53:gr32 :: (store 4 into %ir.j_temp)
Bottom Pressure:
GR16=6
  LiveReg: %53
  UpdateRegP: SU(47) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %53:gr32 :: (store 4 into %ir.j_temp)
              to 
  Ready @18c
  BotQ.A BotLatency SU(47) 18c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 
Scheduling SU(46) %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
Bottom Pressure:
GR16=4
  Ready @22c
  BotQ.A BotLatency SU(46) 22c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 45 
  Cand SU(44) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) %52:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @26c
  BotQ.A BotLatency SU(45) 26c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 44 
Scheduling SU(44) %51:gr64 = ADD64rm %51:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
Bottom Pressure:
GR16=2
  LiveReg: %51
  UpdateRegP: SU(44) %51:gr64 = ADD64rm %51:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
              to GR16 -2
  Ready @26c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 43 
Scheduling SU(43) %51:gr64 = SHL64ri %51:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %51
  UpdateRegP: SU(43) %51:gr64 = SHL64ri %51:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @27c
  BotQ.A BotLatency SU(43) 27c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 
Scheduling SU(42) %51:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @31c
  BotQ.A BotLatency SU(42) 31c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 41 
Scheduling SU(41) MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
Bottom Pressure:
GR16=6
  LiveReg: %47
  UpdateRegP: SU(41) MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
              to GR16 4
  LiveReg: %48
  UpdateRegP: SU(41) MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
              to GR16 2
  LiveReg: %44
  UpdateRegP: SU(41) MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
              to 
  Ready @32c
  BotQ.A BotLatency SU(41) 32c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 40 39 36 
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %48:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=4
  Ready @36c
  BotQ.A BotLatency SU(40) 36c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 39 
  Cand SU(36) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
Bottom Pressure:
GR16=4
  LiveReg: %47
  UpdateRegP: SU(39) %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
              to GR16 -2
  Ready @36c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 38 
  Cand SU(36) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %47
  UpdateRegP: SU(38) %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @37c
  BotQ.A BotLatency SU(38) 37c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 37 
  Cand SU(36) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %47:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @41c
  BotQ.A BotLatency SU(37) 41c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 
Scheduling SU(36) %44:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
Bottom Pressure:

  Ready @36c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 35 
Scheduling SU(35) MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
Bottom Pressure:
GR16=6
  LiveReg: %40
  UpdateRegP: SU(32) %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
              to 
  UpdateRegP: SU(34) %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
              to 
  UpdateRegP: SU(35) MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
              to GR16 4
  LiveReg: %41
  UpdateRegP: SU(32) %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
              to GR16 -2
  UpdateRegP: SU(34) %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
              to GR16 -2
  UpdateRegP: SU(35) MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
              to GR16 2
  LiveReg: %43
  UpdateRegP: SU(35) MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
              to 
  Ready @42c
  BotQ.A BotLatency SU(35) 42c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 42c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 34 
Scheduling SU(34) %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
Bottom Pressure:
GR16=4
  Ready @46c
  BotQ.A BotLatency SU(34) 46c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 46c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 
Scheduling SU(33) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %42:gr32 :: (store 4 into %ir.j_temp)
Bottom Pressure:
GR16=6
  LiveReg: %42
  UpdateRegP: SU(33) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %42:gr32 :: (store 4 into %ir.j_temp)
              to 
  Ready @47c
  BotQ.A BotLatency SU(33) 47c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 47c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 
Scheduling SU(32) %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
Bottom Pressure:
GR16=4
  Ready @51c
  BotQ.A BotLatency SU(32) 51c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 31 
  Cand SU(30) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %41:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @55c
  BotQ.A BotLatency SU(31) 55c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 30 
Scheduling SU(30) %40:gr64 = ADD64rm %40:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
Bottom Pressure:
GR16=2
  LiveReg: %40
  UpdateRegP: SU(30) %40:gr64 = ADD64rm %40:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
              to GR16 -2
  Ready @55c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 55c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 
Scheduling SU(29) %40:gr64 = SHL64ri %40:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %40
  UpdateRegP: SU(29) %40:gr64 = SHL64ri %40:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @56c
  BotQ.A BotLatency SU(29) 56c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 56c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 
Scheduling SU(28) %40:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @60c
  BotQ.A BotLatency SU(28) 60c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 60c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 
Scheduling SU(27) MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
Bottom Pressure:
GR16=6
  LiveReg: %36
  UpdateRegP: SU(27) MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
              to GR16 4
  LiveReg: %37
  UpdateRegP: SU(27) MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
              to GR16 2
  LiveReg: %33
  UpdateRegP: SU(27) MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
              to 
  Ready @61c
  BotQ.A BotLatency SU(27) 61c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 61c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 25 22 
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %37:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=4
  Ready @65c
  BotQ.A BotLatency SU(26) 65c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 65c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 25 
  Cand SU(22) ORDER                              
  Cand SU(25) ORDER                              
Pick Bot ORDER     
Scheduling SU(25) %36:gr64 = ADD64rm %36:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
Bottom Pressure:
GR16=4
  LiveReg: %36
  UpdateRegP: SU(25) %36:gr64 = ADD64rm %36:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
              to GR16 -2
  Ready @65c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 65c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 24 
  Cand SU(22) ORDER                              
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %36:gr64 = SHL64ri %36:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=4
  LiveReg: %36
  UpdateRegP: SU(24) %36:gr64 = SHL64ri %36:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @66c
  BotQ.A BotLatency SU(24) 66c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 66c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 23 
  Cand SU(22) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %36:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GR16=2
  Ready @70c
  BotQ.A BotLatency SU(23) 70c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 70c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Scheduling SU(22) %33:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
Bottom Pressure:

  Ready @65c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 70c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
Bottom Pressure:
GR16=6
  LiveReg: %29
  UpdateRegP: SU(18) %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
              to 
  UpdateRegP: SU(20) %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
              to 
  UpdateRegP: SU(21) MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
              to GR16 4
  LiveReg: %30
  UpdateRegP: SU(18) %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
              to GR16 -2
  UpdateRegP: SU(20) %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
              to GR16 -2
  UpdateRegP: SU(21) MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
              to GR16 2
  LiveReg: %32
  UpdateRegP: SU(21) MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
              to 
  Ready @71c
  BotQ.A BotLatency SU(21) 71c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 71c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Scheduling SU(20) %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
Bottom Pressure:
GR16=4
  Ready @75c
  BotQ.A BotLatency SU(20) 75c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 75c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Scheduling SU(19) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.j_temp)
Bottom Pressure:
GR16=6
  LiveReg: %31
  UpdateRegP: SU(19) MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.j_temp)
              to 
  Ready @76c
  BotQ.A BotLatency SU(19) 76c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 76c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
Bottom Pressure:
GR16=4
  Ready @80c
  BotQ.A BotLatency SU(18) 80c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 80c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 17 
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %30:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @84c
  BotQ.A BotLatency SU(17) 84c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 84c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) %29:gr64 = ADD64rm %29:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
Bottom Pressure:
GR16=2
  LiveReg: %29
  UpdateRegP: SU(16) %29:gr64 = ADD64rm %29:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
              to GR16 -2
  Ready @84c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 84c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) %29:gr64 = SHL64ri %29:gr64(tied-def 0), 3, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %29
  UpdateRegP: SU(15) %29:gr64 = SHL64ri %29:gr64(tied-def 0), 3, implicit-def dead $eflags
              to GR16 -2
  Ready @85c
  BotQ.A BotLatency SU(15) 85c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 85c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %29:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @89c
  BotQ.A BotLatency SU(14) 89c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 89c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %25
  UpdateRegP: SU(13) MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %26
  UpdateRegP: SU(13) MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
              to FR32 1    FR32X 1
  LiveReg: %22
  UpdateRegP: SU(13) MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
              to 
  Ready @90c
  BotQ.A BotLatency SU(13) 90c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 90c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 8 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %26:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @94c
  BotQ.A BotLatency SU(12) 94c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 94c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 11 
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %25:gr64 = ADD64rm %25:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %25
  UpdateRegP: SU(11) %25:gr64 = ADD64rm %25:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
              to GR16 -2
  Ready @94c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 94c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %25:gr64 = SHL64ri %25:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %25
  UpdateRegP: SU(10) %25:gr64 = SHL64ri %25:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @95c
  BotQ.A BotLatency SU(10) 95c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 95c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %25:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @99c
  BotQ.A BotLatency SU(9) 99c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 99c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %22:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
Bottom Pressure:

  Ready @94c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 99c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %18
  UpdateRegP: SU(4) %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(6) %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(7) MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %19
  UpdateRegP: SU(4) %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(6) %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(7) MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
              to FR32 1    FR32X 1
  LiveReg: %21
  UpdateRegP: SU(7) MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
              to 
  Ready @100c
  BotQ.A BotLatency SU(7) 100c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 100c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
Bottom Pressure:
GR16=4
  Ready @104c
  BotQ.A BotLatency SU(6) 104c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 104c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %20:fr64 :: (store 8 into %ir.temp)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %20
  UpdateRegP: SU(5) MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %20:fr64 :: (store 8 into %ir.temp)
              to 
  Ready @105c
  BotQ.A BotLatency SU(5) 105c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 105c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
Bottom Pressure:
GR16=4
  Ready @109c
  BotQ.A BotLatency SU(4) 109c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 109c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %19:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
Bottom Pressure:
GR16=2
  Ready @113c
  BotQ.A BotLatency SU(3) 113c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 113c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %18:gr64 = ADD64rm %18:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(2) %18:gr64 = ADD64rm %18:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
              to GR16 -2
  Ready @113c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 113c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %18:gr64 = SHL64ri %18:gr64(tied-def 0), 4, implicit-def dead $eflags
Bottom Pressure:
GR16=2
  LiveReg: %18
  UpdateRegP: SU(1) %18:gr64 = SHL64ri %18:gr64(tied-def 0), 4, implicit-def dead $eflags
              to GR16 -2
  Ready @114c
  BotQ.A BotLatency SU(1) 114c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 114c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:

  Ready @118c
  BotQ.A BotLatency SU(0) 118c
BotQ.A @14c
  Retired: 57
  Executed: 14c
  Critical: 14c, 57 MOps
  ExpectedLatency: 118c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %18:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %18:gr64 = SHL64ri %18:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(2):   %18:gr64 = ADD64rm %18:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
SU(3):   %19:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(4):   %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
SU(5):   MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %20:fr64 :: (store 8 into %ir.temp)
SU(6):   %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
SU(7):   MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
SU(8):   %22:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
SU(9):   %25:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(10):   %25:gr64 = SHL64ri %25:gr64(tied-def 0), 4, implicit-def dead $eflags
SU(11):   %25:gr64 = ADD64rm %25:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
SU(12):   %26:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(13):   MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
SU(14):   %29:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(15):   %29:gr64 = SHL64ri %29:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(16):   %29:gr64 = ADD64rm %29:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
SU(17):   %30:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(18):   %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
SU(19):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.j_temp)
SU(20):   %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
SU(21):   MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
SU(22):   %33:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
SU(23):   %36:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(24):   %36:gr64 = SHL64ri %36:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(25):   %36:gr64 = ADD64rm %36:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
SU(26):   %37:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(27):   MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
SU(28):   %40:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(29):   %40:gr64 = SHL64ri %40:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(30):   %40:gr64 = ADD64rm %40:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
SU(31):   %41:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(32):   %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
SU(33):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %42:gr32 :: (store 4 into %ir.j_temp)
SU(34):   %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
SU(35):   MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
SU(36):   %44:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
SU(37):   %47:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(38):   %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(39):   %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
SU(40):   %48:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(41):   MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
SU(42):   %51:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(43):   %51:gr64 = SHL64ri %51:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(44):   %51:gr64 = ADD64rm %51:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
SU(45):   %52:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(46):   %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
SU(47):   MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %53:gr32 :: (store 4 into %ir.j_temp)
SU(48):   %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
SU(49):   MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
SU(50):   %55:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
SU(51):   %58:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(52):   %58:gr64 = SHL64ri %58:gr64(tied-def 0), 3, implicit-def dead $eflags
SU(53):   %58:gr64 = ADD64rm %58:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
SU(54):   %59:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
SU(55):   MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
SU(56):   INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)  0@0B-phi
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)  0@0B-phi
DIH [0B,96r:0)  0@0B-phi
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)  0@0B-phi
HDX [0B,64r:0)  0@0B-phi
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
R9B [0B,16r:0)  0@0B-phi
R9BH [0B,16r:0)  0@0B-phi
R9WH [0B,16r:0)  0@0B-phi
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,208r:0)  0@16r weight:0.000000e+00
%9 [1824r,1856r:0)[1856r,1872r:1)  0@1824r 1@1856r weight:0.000000e+00
%13 [1936r,1968r:2)[1968r,2000r:0)[2000r,2048r:1)  0@1968r 1@2000r 2@1936r weight:0.000000e+00
%14 [2016r,2048r:0)  0@2016r weight:0.000000e+00
%15 [2032r,2048r:0)  0@2032r weight:0.000000e+00
%18 [2112r,2144r:2)[2144r,2176r:0)[2176r,2256r:1)  0@2144r 1@2176r 2@2112r weight:0.000000e+00
%19 [2192r,2256r:0)  0@2192r weight:0.000000e+00
%20 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%21 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%22 [2272r,2384r:0)  0@2272r weight:0.000000e+00
%25 [2288r,2320r:2)[2320r,2352r:0)[2352r,2384r:1)  0@2320r 1@2352r 2@2288r weight:0.000000e+00
%26 [2368r,2384r:0)  0@2368r weight:0.000000e+00
%29 [2400r,2432r:2)[2432r,2464r:0)[2464r,2544r:1)  0@2432r 1@2464r 2@2400r weight:0.000000e+00
%30 [2480r,2544r:0)  0@2480r weight:0.000000e+00
%31 [2496r,2512r:0)  0@2496r weight:0.000000e+00
%32 [2528r,2544r:0)  0@2528r weight:0.000000e+00
%33 [2560r,2672r:0)  0@2560r weight:0.000000e+00
%36 [2576r,2608r:2)[2608r,2640r:0)[2640r,2672r:1)  0@2608r 1@2640r 2@2576r weight:0.000000e+00
%37 [2656r,2672r:0)  0@2656r weight:0.000000e+00
%40 [2688r,2720r:2)[2720r,2752r:0)[2752r,2832r:1)  0@2720r 1@2752r 2@2688r weight:0.000000e+00
%41 [2768r,2832r:0)  0@2768r weight:0.000000e+00
%42 [2784r,2800r:0)  0@2784r weight:0.000000e+00
%43 [2816r,2832r:0)  0@2816r weight:0.000000e+00
%44 [2848r,2960r:0)  0@2848r weight:0.000000e+00
%47 [2864r,2896r:2)[2896r,2928r:0)[2928r,2960r:1)  0@2896r 1@2928r 2@2864r weight:0.000000e+00
%48 [2944r,2960r:0)  0@2944r weight:0.000000e+00
%51 [2976r,3008r:2)[3008r,3040r:0)[3040r,3120r:1)  0@3008r 1@3040r 2@2976r weight:0.000000e+00
%52 [3056r,3120r:0)  0@3056r weight:0.000000e+00
%53 [3072r,3088r:0)  0@3072r weight:0.000000e+00
%54 [3104r,3120r:0)  0@3104r weight:0.000000e+00
%55 [3136r,3248r:0)  0@3136r weight:0.000000e+00
%58 [3152r,3184r:2)[3184r,3216r:0)[3216r,3248r:1)  0@3184r 1@3216r 2@3152r weight:0.000000e+00
%59 [3232r,3248r:0)  0@3232r weight:0.000000e+00
%62 [304r,336r:0)[336r,352r:1)  0@304r 1@336r weight:0.000000e+00
%66 [416r,448r:2)[448r,480r:0)[480r,528r:1)  0@448r 1@480r 2@416r weight:0.000000e+00
%67 [496r,528r:0)  0@496r weight:0.000000e+00
%68 [512r,528r:0)  0@512r weight:0.000000e+00
%71 [592r,624r:2)[624r,656r:0)[656r,736r:1)  0@624r 1@656r 2@592r weight:0.000000e+00
%72 [672r,736r:0)  0@672r weight:0.000000e+00
%73 [688r,704r:0)  0@688r weight:0.000000e+00
%74 [720r,736r:0)  0@720r weight:0.000000e+00
%75 [752r,864r:0)  0@752r weight:0.000000e+00
%78 [768r,800r:2)[800r,832r:0)[832r,864r:1)  0@800r 1@832r 2@768r weight:0.000000e+00
%79 [848r,864r:0)  0@848r weight:0.000000e+00
%82 [880r,912r:2)[912r,944r:0)[944r,1024r:1)  0@912r 1@944r 2@880r weight:0.000000e+00
%83 [960r,1024r:0)  0@960r weight:0.000000e+00
%84 [976r,992r:0)  0@976r weight:0.000000e+00
%85 [1008r,1024r:0)  0@1008r weight:0.000000e+00
%86 [1040r,1152r:0)  0@1040r weight:0.000000e+00
%89 [1056r,1088r:2)[1088r,1120r:0)[1120r,1152r:1)  0@1088r 1@1120r 2@1056r weight:0.000000e+00
%90 [1136r,1152r:0)  0@1136r weight:0.000000e+00
%93 [1168r,1200r:2)[1200r,1232r:0)[1232r,1312r:1)  0@1200r 1@1232r 2@1168r weight:0.000000e+00
%94 [1248r,1312r:0)  0@1248r weight:0.000000e+00
%95 [1264r,1280r:0)  0@1264r weight:0.000000e+00
%96 [1296r,1312r:0)  0@1296r weight:0.000000e+00
%97 [1328r,1440r:0)  0@1328r weight:0.000000e+00
%100 [1344r,1376r:2)[1376r,1408r:0)[1408r,1440r:1)  0@1376r 1@1408r 2@1344r weight:0.000000e+00
%101 [1424r,1440r:0)  0@1424r weight:0.000000e+00
%104 [1456r,1488r:2)[1488r,1520r:0)[1520r,1600r:1)  0@1488r 1@1520r 2@1456r weight:0.000000e+00
%105 [1536r,1600r:0)  0@1536r weight:0.000000e+00
%106 [1552r,1568r:0)  0@1552r weight:0.000000e+00
%107 [1584r,1600r:0)  0@1584r weight:0.000000e+00
%108 [1616r,1728r:0)  0@1616r weight:0.000000e+00
%111 [1632r,1664r:2)[1664r,1696r:0)[1696r,1728r:1)  0@1664r 1@1696r 2@1632r weight:0.000000e+00
%112 [1712r,1728r:0)  0@1712r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function bubble: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8d in %4, $r9d in %5

0B	bb.0.entry:
	  successors: %bb.1(0x40000000), %bb.5(0x40000000); %bb.1(50.00%), %bb.5(50.00%)
	  liveins: $rdi, $rsi, $rdx, $rcx, $r8d, $r9d
16B	  %5:gr32 = COPY $r9d
32B	  %4:gr32 = COPY $r8d
48B	  %3:gr64 = COPY $rcx
64B	  %2:gr64 = COPY $rdx
80B	  %1:gr64 = COPY $rsi
96B	  %0:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.ten.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.ten.addr)
128B	  MOV64mr %stack.1.j1.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.j1.addr)
144B	  MOV64mr %stack.2.j2.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.j2.addr)
160B	  MOV64mr %stack.3.j3.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.j3.addr)
176B	  MOV32mr %stack.4.m.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.m.addr)
192B	  MOV32mr %stack.5.ind.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.ind.addr)
208B	  CMP32ri8 %5:gr32, 1, implicit-def $eflags
224B	  JCC_1 %bb.5, 5, implicit killed $eflags
240B	  JMP_1 %bb.1

256B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

272B	  MOV32mi %stack.7.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

288B	bb.2.for.cond:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.3(0x7c000000), %bb.9(0x04000000); %bb.3(96.88%), %bb.9(3.12%)

304B	  %62:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
336B	  %62:gr32 = DEC32r %62:gr32(tied-def 0), implicit-def dead $eflags
352B	  CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %62:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
368B	  JCC_1 %bb.9, 13, implicit killed $eflags
384B	  JMP_1 %bb.3

400B	bb.3.for.body:
	; predecessors: %bb.2
	  successors: %bb.4(0x7c000000), %bb.9(0x04000000); %bb.4(96.88%), %bb.9(3.12%)

416B	  %66:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
448B	  %66:gr64 = SHL64ri %66:gr64(tied-def 0), 4, implicit-def dead $eflags
480B	  %66:gr64 = ADD64rm %66:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
496B	  %67:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
512B	  %68:fr64 = MOVSDrm_alt %66:gr64, 8, %67:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx3)
528B	  UCOMISDrm %68:fr64, %66:gr64, 8, %67:gr64_nosp, 16, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx7)
544B	  JCC_1 %bb.9, 6, implicit killed $eflags
560B	  JMP_1 %bb.4

576B	bb.4.if.then9:
	; predecessors: %bb.3
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

592B	  %71:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
624B	  %71:gr64 = SHL64ri %71:gr64(tied-def 0), 4, implicit-def dead $eflags
656B	  %71:gr64 = ADD64rm %71:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
672B	  %72:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
688B	  %73:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx14)
704B	  MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %73:fr64 :: (store 8 into %ir.temp)
720B	  %74:fr64 = MOVSDrm_alt %71:gr64, 8, %72:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx18)
736B	  MOVSDmr %71:gr64, 8, %72:gr64_nosp, 16, $noreg, %74:fr64 :: (store 8 into %ir.arrayidx23)
752B	  %75:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
768B	  %78:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
800B	  %78:gr64 = SHL64ri %78:gr64(tied-def 0), 4, implicit-def dead $eflags
832B	  %78:gr64 = ADD64rm %78:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
848B	  %79:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
864B	  MOVSDmr %78:gr64, 8, %79:gr64_nosp, 0, $noreg, %75:fr64 :: (store 8 into %ir.arrayidx27)
880B	  %82:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
912B	  %82:gr64 = SHL64ri %82:gr64(tied-def 0), 3, implicit-def dead $eflags
944B	  %82:gr64 = ADD64rm %82:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
960B	  %83:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
976B	  %84:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx32)
992B	  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %84:gr32 :: (store 4 into %ir.j_temp)
1008B	  %85:gr32 = MOV32rm %82:gr64, 4, %83:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx36)
1024B	  MOV32mr %82:gr64, 4, %83:gr64_nosp, 8, $noreg, %85:gr32 :: (store 4 into %ir.arrayidx41)
1040B	  %86:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
1056B	  %89:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
1088B	  %89:gr64 = SHL64ri %89:gr64(tied-def 0), 3, implicit-def dead $eflags
1120B	  %89:gr64 = ADD64rm %89:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
1136B	  %90:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
1152B	  MOV32mr %89:gr64, 4, %90:gr64_nosp, 0, $noreg, %86:gr32 :: (store 4 into %ir.arrayidx45)
1168B	  %93:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
1200B	  %93:gr64 = SHL64ri %93:gr64(tied-def 0), 3, implicit-def dead $eflags
1232B	  %93:gr64 = ADD64rm %93:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
1248B	  %94:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
1264B	  %95:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx50)
1280B	  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %95:gr32 :: (store 4 into %ir.j_temp)
1296B	  %96:gr32 = MOV32rm %93:gr64, 4, %94:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx54)
1312B	  MOV32mr %93:gr64, 4, %94:gr64_nosp, 8, $noreg, %96:gr32 :: (store 4 into %ir.arrayidx59)
1328B	  %97:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
1344B	  %100:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
1376B	  %100:gr64 = SHL64ri %100:gr64(tied-def 0), 3, implicit-def dead $eflags
1408B	  %100:gr64 = ADD64rm %100:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
1424B	  %101:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
1440B	  MOV32mr %100:gr64, 4, %101:gr64_nosp, 0, $noreg, %97:gr32 :: (store 4 into %ir.arrayidx63)
1456B	  %104:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
1488B	  %104:gr64 = SHL64ri %104:gr64(tied-def 0), 3, implicit-def dead $eflags
1520B	  %104:gr64 = ADD64rm %104:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
1536B	  %105:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
1552B	  %106:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx68)
1568B	  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %106:gr32 :: (store 4 into %ir.j_temp)
1584B	  %107:gr32 = MOV32rm %104:gr64, 4, %105:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx72)
1600B	  MOV32mr %104:gr64, 4, %105:gr64_nosp, 8, $noreg, %107:gr32 :: (store 4 into %ir.arrayidx77)
1616B	  %108:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
1632B	  %111:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
1664B	  %111:gr64 = SHL64ri %111:gr64(tied-def 0), 3, implicit-def dead $eflags
1696B	  %111:gr64 = ADD64rm %111:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
1712B	  %112:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
1728B	  MOV32mr %111:gr64, 4, %112:gr64_nosp, 0, $noreg, %108:gr32 :: (store 4 into %ir.arrayidx81)
1744B	  INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
1760B	  JMP_1 %bb.2

1776B	bb.5.if.else82:
	; predecessors: %bb.0
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1792B	  MOV32mi %stack.7.i, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.i)

1808B	bb.6.for.cond83:
	; predecessors: %bb.5, %bb.8
	  successors: %bb.7(0x7c000000), %bb.9(0x04000000); %bb.7(96.88%), %bb.9(3.12%)

1824B	  %9:gr32 = MOV32rm %stack.4.m.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.m.addr)
1856B	  %9:gr32 = DEC32r %9:gr32(tied-def 0), implicit-def dead $eflags
1872B	  CMP32mr %stack.7.i, 1, $noreg, 0, $noreg, %9:gr32, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
1888B	  JCC_1 %bb.9, 13, implicit killed $eflags
1904B	  JMP_1 %bb.7

1920B	bb.7.for.body86:
	; predecessors: %bb.6
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

1936B	  %13:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
1968B	  %13:gr64 = SHL64ri %13:gr64(tied-def 0), 4, implicit-def dead $eflags
2000B	  %13:gr64 = ADD64rm %13:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
2016B	  %14:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2032B	  %15:fr64 = MOVSDrm_alt %13:gr64, 8, %14:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx95)
2048B	  UCOMISDrm %15:fr64, %13:gr64, 8, %14:gr64_nosp, 0, $noreg, implicit-def $eflags :: (load 8 from %ir.arrayidx90)
2064B	  JCC_1 %bb.9, 6, implicit killed $eflags
2080B	  JMP_1 %bb.8

2096B	bb.8.if.then97:
	; predecessors: %bb.7
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

2112B	  %18:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2144B	  %18:gr64 = SHL64ri %18:gr64(tied-def 0), 4, implicit-def dead $eflags
2176B	  %18:gr64 = ADD64rm %18:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
2192B	  %19:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2208B	  %20:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 16, $noreg :: (load 8 from %ir.arrayidx102)
2224B	  MOVSDmr %stack.6.temp, 1, $noreg, 0, $noreg, %20:fr64 :: (store 8 into %ir.temp)
2240B	  %21:fr64 = MOVSDrm_alt %18:gr64, 8, %19:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx106)
2256B	  MOVSDmr %18:gr64, 8, %19:gr64_nosp, 16, $noreg, %21:fr64 :: (store 8 into %ir.arrayidx111)
2272B	  %22:fr64 = MOVSDrm_alt %stack.6.temp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.temp)
2288B	  %25:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2320B	  %25:gr64 = SHL64ri %25:gr64(tied-def 0), 4, implicit-def dead $eflags
2352B	  %25:gr64 = ADD64rm %25:gr64(tied-def 0), %stack.0.ten.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.ten.addr)
2368B	  %26:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2384B	  MOVSDmr %25:gr64, 8, %26:gr64_nosp, 0, $noreg, %22:fr64 :: (store 8 into %ir.arrayidx115)
2400B	  %29:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2432B	  %29:gr64 = SHL64ri %29:gr64(tied-def 0), 3, implicit-def dead $eflags
2464B	  %29:gr64 = ADD64rm %29:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
2480B	  %30:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2496B	  %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx120)
2512B	  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %31:gr32 :: (store 4 into %ir.j_temp)
2528B	  %32:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx124)
2544B	  MOV32mr %29:gr64, 4, %30:gr64_nosp, 8, $noreg, %32:gr32 :: (store 4 into %ir.arrayidx129)
2560B	  %33:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
2576B	  %36:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2608B	  %36:gr64 = SHL64ri %36:gr64(tied-def 0), 3, implicit-def dead $eflags
2640B	  %36:gr64 = ADD64rm %36:gr64(tied-def 0), %stack.1.j1.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j1.addr)
2656B	  %37:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2672B	  MOV32mr %36:gr64, 4, %37:gr64_nosp, 0, $noreg, %33:gr32 :: (store 4 into %ir.arrayidx133)
2688B	  %40:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2720B	  %40:gr64 = SHL64ri %40:gr64(tied-def 0), 3, implicit-def dead $eflags
2752B	  %40:gr64 = ADD64rm %40:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
2768B	  %41:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2784B	  %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx138)
2800B	  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %42:gr32 :: (store 4 into %ir.j_temp)
2816B	  %43:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx142)
2832B	  MOV32mr %40:gr64, 4, %41:gr64_nosp, 8, $noreg, %43:gr32 :: (store 4 into %ir.arrayidx147)
2848B	  %44:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
2864B	  %47:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
2896B	  %47:gr64 = SHL64ri %47:gr64(tied-def 0), 3, implicit-def dead $eflags
2928B	  %47:gr64 = ADD64rm %47:gr64(tied-def 0), %stack.2.j2.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j2.addr)
2944B	  %48:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
2960B	  MOV32mr %47:gr64, 4, %48:gr64_nosp, 0, $noreg, %44:gr32 :: (store 4 into %ir.arrayidx151)
2976B	  %51:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3008B	  %51:gr64 = SHL64ri %51:gr64(tied-def 0), 3, implicit-def dead $eflags
3040B	  %51:gr64 = ADD64rm %51:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
3056B	  %52:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
3072B	  %53:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 8, $noreg :: (load 4 from %ir.arrayidx156)
3088B	  MOV32mr %stack.8.j_temp, 1, $noreg, 0, $noreg, %53:gr32 :: (store 4 into %ir.j_temp)
3104B	  %54:gr32 = MOV32rm %51:gr64, 4, %52:gr64_nosp, 0, $noreg :: (load 4 from %ir.arrayidx160)
3120B	  MOV32mr %51:gr64, 4, %52:gr64_nosp, 8, $noreg, %54:gr32 :: (store 4 into %ir.arrayidx165)
3136B	  %55:gr32 = MOV32rm %stack.8.j_temp, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.j_temp)
3152B	  %58:gr64 = MOVSX64rm32 %stack.7.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3184B	  %58:gr64 = SHL64ri %58:gr64(tied-def 0), 3, implicit-def dead $eflags
3216B	  %58:gr64 = ADD64rm %58:gr64(tied-def 0), %stack.3.j3.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 8 from %ir.j3.addr)
3232B	  %59:gr64_nosp = MOVSX64rm32 %stack.5.ind.addr, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.ind.addr)
3248B	  MOV32mr %58:gr64, 4, %59:gr64_nosp, 0, $noreg, %55:gr32 :: (store 4 into %ir.arrayidx169)
3264B	  INC32m %stack.7.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
3280B	  JMP_1 %bb.6

3296B	bb.9.if.end175:
	; predecessors: %bb.6, %bb.7, %bb.2, %bb.3

3312B	  RET 0

# End machine code for function bubble.

