Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=4, align=4, at location [SP+8]
  fi#25: size=4, align=4, at location [SP+8]
  fi#26: size=4, align=4, at location [SP+8]
  fi#27: size=4, align=4, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
  fi#29: size=24, align=16, at location [SP+8]
  fi#30: size=16, align=16, at location [SP+8]
  fi#31: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#5: 1.000000e-08, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
  cp#8: -2.000000e+00, align=8

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  %13:vr128 = MOVAPSrm $rip, 1, $noreg, @__const.main.dum, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  %14:gr64 = MOV64rm $rip, 1, $noreg, @__const.main.dum + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
  $rdi = MOV32ri64 @.str, debug-location !106; ep.c:87:15
  $rsi = MOV32ri64 @.str.1, debug-location !106; ep.c:87:15
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
  %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
  MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
  JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; ep.c:87:9
  JMP_1 %bb.1, debug-location !110; ep.c:87:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
  JMP_1 %bb.3, debug-location !113; ep.c:89:5

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 1, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  %18:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
  $rdi = COPY %18:gr64, debug-location !117; ep.c:92:9
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !117; ep.c:92:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
  %20:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %20:fr64, debug-location !119; ep.c:102:30
  $xmm1 = COPY %21:fr64, debug-location !119; ep.c:102:30
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
  %22:fr64 = COPY killed $xmm0, debug-location !119; ep.c:102:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
  %24:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
  $rdi = COPY %24:gr64_nosp, debug-location !120; ep.c:102:5
  $rsi = MOV32ri64 @.str.2, debug-location !120; ep.c:102:5
  $xmm0 = COPY %22:fr64, debug-location !120; ep.c:102:5
  $al = MOV8ri 1, debug-location !120; ep.c:102:5
  CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
  MOV32mi %stack.26.j, 1, $noreg, 0, $noreg, 14, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
  JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !126; ep.c:104:9
  JMP_1 %bb.4, debug-location !126; ep.c:104:9

bb.4.if.then6:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  DEC32m %stack.26.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !127 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); ep.c:105:10

bb.5.if.end7:
; predecessors: %bb.3, %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %29:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  MOV8mi %29:gr64, 1, %24:gr64_nosp, 1, $noreg, 0, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
  $rdi = MOV32ri64 @.str.3, debug-location !133; ep.c:107:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
  $rdi = MOV32ri64 @.str.4, debug-location !135; ep.c:108:5
  $rsi = COPY %24:gr64_nosp, debug-location !135; ep.c:108:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
  MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  MOV32mi %stack.18.np, 1, $noreg, 0, $noreg, 16384, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  %37:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
  %38:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  %39:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
  %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
  $rsi = COPY %40:gr64, debug-location !141; ep.c:127:5
  $xmm0 = COPY %38:fr64, debug-location !141; ep.c:127:5
  $rdx = COPY %39:gr64, debug-location !141; ep.c:127:5
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
  %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
  $rdi = COPY %37:gr64, debug-location !144; ep.c:128:14
  $xmm0 = COPY %41:fr64, debug-location !144; ep.c:128:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
  %42:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
  MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  %237:gr64 = MOV64ri -3135276447761457362

bb.6.for.cond:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 131071, implicit-def $eflags, debug-location !152 :: (dereferenceable load 4 from %ir.i); ep.c:129:19
  JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !153; ep.c:129:5
  JMP_1 %bb.7, debug-location !153; ep.c:129:5

bb.7.for.body:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %249:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  MOV64mr $noreg, 8, %249:gr64_nosp, @x, $noreg, %237:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  %238:gr32 = LEA64_32r %249:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %238:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  JMP_1 %bb.6, debug-location !159; ep.c:129:5

bb.8.for.end:
; predecessors: %bb.6
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %45:gr8 = MOV8ri 1
  TEST8rr %45:gr8, %45:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
  JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !164; ep.c:132:12

bb.9:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %245:fr64 = SQRTSDr %0:fr64
  JMP_1 %bb.11

bb.10.call.sqrt:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  $xmm0 = COPY %0:fr64, debug-location !164; ep.c:132:12
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  %245:fr64 = COPY killed $xmm0, debug-location !164; ep.c:132:12

bb.11.for.end.split:
; predecessors: %bb.10, %bb.9
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  $xmm0 = COPY %245:fr64, debug-location !164; ep.c:132:12
  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
  %47:fr64 = COPY killed $xmm0, debug-location !164; ep.c:132:12
  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %47:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !166; ep.c:134:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !166; ep.c:134:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
  $edi = MOV32ri 1, debug-location !167; ep.c:135:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !167; ep.c:135:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
  $edi = MOV32ri 2, debug-location !168; ep.c:136:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !168; ep.c:136:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !169; ep.c:137:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !169; ep.c:137:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
  %51:gr64 = MOV64ri 4742906807993761792
  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !171; ep.c:142:5
  %53:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
  %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !171; ep.c:142:5
  $rsi = COPY %53:gr64, debug-location !171; ep.c:142:5
  $xmm0 = COPY %54:fr64, debug-location !171; ep.c:142:5
  $rdx = MOV32ri64 @x, debug-location !171; ep.c:142:5
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !171; ep.c:142:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !171; ep.c:142:5
  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

bb.12.for.cond26:
; predecessors: %bb.11, %bb.13
  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 16, implicit-def $eflags, debug-location !178 :: (dereferenceable load 4 from %ir.i); ep.c:150:19
  JCC_1 %bb.14, 15, implicit killed $eflags, debug-location !179; ep.c:150:5
  JMP_1 %bb.13, debug-location !179; ep.c:150:5

bb.13.for.body29:
; predecessors: %bb.12
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %232:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !180 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; ep.c:151:14
  $rdi = COPY %53:gr64, debug-location !182; ep.c:151:14
  $xmm0 = COPY %232:fr64, debug-location !182; ep.c:151:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !182; ep.c:151:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; ep.c:151:14
  %234:fr64 = COPY killed $xmm0, debug-location !182; ep.c:151:14
  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %234:fr64, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !184 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
  JMP_1 %bb.12, debug-location !185; ep.c:150:5

bb.14.for.end33:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %57:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %57:fr64, debug-location !189 :: (store 8 into %ir.an); ep.c:154:8
  %58:gr64 = MOV64ri 4733340128880099328
  MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %58:gr64, debug-location !190 :: (store 8 into %ir.tt); ep.c:155:8
  MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !191 :: (store 8 into %ir.gc); ep.c:156:8
  MOV64mi32 %stack.8.sx, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.sx); ep.c:157:8
  MOV64mi32 %stack.9.sy, 1, $noreg, 0, $noreg, 0, debug-location !193 :: (store 8 into %ir.sy); ep.c:158:8
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !194 :: (store 4 into %ir.i); ep.c:160:12

bb.15.for.cond34:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !199 :: (dereferenceable load 4 from %ir.i); ep.c:160:19
  JCC_1 %bb.17, 15, implicit killed $eflags, debug-location !200; ep.c:160:5
  JMP_1 %bb.16, debug-location !200; ep.c:160:5

bb.16.for.body37:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %250:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !201 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  MOV64mi32 $noreg, 8, %250:gr64_nosp, @q, $noreg, 0, debug-location !204 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  %231:gr32 = LEA64_32r %250:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !205; ep.c:160:26
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !205 :: (store 4 into %ir.i); ep.c:160:26
  JMP_1 %bb.15, debug-location !206; ep.c:160:5

bb.17.for.end42:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  MOV32mi %stack.25.k_offset, 1, $noreg, 0, $noreg, -1, debug-location !209 :: (store 4 into %ir.k_offset); ep.c:170:14
  MOV32mi %stack.23.k, 1, $noreg, 0, $noreg, 1, debug-location !210 :: (store 4 into %ir.k); ep.c:172:12
  %173:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
  %176:gr64 = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg
  %183:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %239:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
  %204:fr64 = FsFLD0SD
  %209:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  %240:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)

bb.18.for.cond43:
; predecessors: %bb.17, %bb.44
  successors: %bb.19(0x7c000000), %bb.45(0x04000000); %bb.19(96.88%), %bb.45(3.12%)

  %61:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  CMP32rm %61:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
  JCC_1 %bb.45, 15, implicit killed $eflags, debug-location !217; ep.c:172:5
  JMP_1 %bb.19, debug-location !217; ep.c:172:5

bb.19.for.body46:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %161:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !218 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  %161:gr32 = nsw ADD32rm %161:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %161:gr32, debug-location !222 :: (store 4 into %ir.kk); ep.c:173:12
  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %58:gr64, debug-location !223 :: (store 8 into %ir.t1); ep.c:174:12
  %163:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %163:fr64, debug-location !225 :: (store 8 into %ir.t2); ep.c:175:12
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 1, debug-location !226 :: (store 4 into %ir.i); ep.c:179:16

bb.20.for.cond48:
; predecessors: %bb.19, %bb.24
  successors: %bb.21(0x7c000000), %bb.25(0x04000000); %bb.21(96.88%), %bb.25(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 100, implicit-def $eflags, debug-location !231 :: (dereferenceable load 4 from %ir.i); ep.c:179:23
  JCC_1 %bb.25, 15, implicit killed $eflags, debug-location !232; ep.c:179:9
  JMP_1 %bb.21, debug-location !232; ep.c:179:9

bb.21.for.body51:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.23(0x40000000); %bb.22(50.00%), %bb.23(50.00%)

  %166:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !233 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  %168:gr32 = COPY %166:gr32, debug-location !235; ep.c:180:21
  %168:gr32 = SHR32ri %168:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !235; ep.c:180:21
  %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
  %169:gr32 = COPY %168:gr32, debug-location !235; ep.c:180:21
  %169:gr32 = SAR32r1 %169:gr32(tied-def 0), implicit-def dead $eflags, debug-location !235; ep.c:180:21
  MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %169:gr32, debug-location !236 :: (store 4 into %ir.ik); ep.c:180:16
  %168:gr32 = AND32ri8 %168:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !239; ep.c:181:20
  CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26
  JCC_1 %bb.23, 4, implicit killed $eflags, debug-location !242; ep.c:181:17
  JMP_1 %bb.22, debug-location !242; ep.c:181:17

bb.22.if.then54:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %172:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !243 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; ep.c:182:22
  $rdi = COPY %173:gr64, debug-location !244; ep.c:182:22
  $xmm0 = COPY %172:fr64, debug-location !244; ep.c:182:22
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !244; ep.c:182:22
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; ep.c:182:22
  %174:fr64 = COPY killed $xmm0, debug-location !244; ep.c:182:22
  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %174:fr64, debug-location !245 :: (store 8 into %ir.t3); ep.c:182:20

bb.23.if.end56:
; predecessors: %bb.21, %bb.22
  successors: %bb.25(0x04000000), %bb.24(0x7c000000); %bb.25(3.12%), %bb.24(96.88%)

  CMP32mi8 %stack.20.ik, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !249 :: (dereferenceable load 4 from %ir.ik); ep.c:183:20
  JCC_1 %bb.25, 4, implicit killed $eflags, debug-location !250; ep.c:183:17
  JMP_1 %bb.24, debug-location !250; ep.c:183:17

bb.24.if.end60:
; predecessors: %bb.23
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %175:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !251 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; ep.c:185:18
  $rdi = COPY %176:gr64, debug-location !252; ep.c:185:18
  $xmm0 = COPY %175:fr64, debug-location !252; ep.c:185:18
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !252; ep.c:185:18
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; ep.c:185:18
  %177:fr64 = COPY killed $xmm0, debug-location !252; ep.c:185:18
  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %177:fr64, debug-location !253 :: (store 8 into %ir.t3); ep.c:185:16
  %178:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !254 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %178:gr32, debug-location !255 :: (store 4 into %ir.kk); ep.c:186:16
  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !256 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
  JMP_1 %bb.20, debug-location !257; ep.c:179:9

bb.25.for.end64:
; predecessors: %bb.20, %bb.23
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !260 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
  JCC_1 %bb.27, 4, implicit killed $eflags, debug-location !262; ep.c:192:13
  JMP_1 %bb.26, debug-location !262; ep.c:192:13

bb.26.if.then65:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !263; ep.c:193:13
  $edi = MOV32ri 2, debug-location !263; ep.c:193:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !263; ep.c:193:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !263; ep.c:193:13

bb.27.if.end66:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:194:9
  $edi = MOV32ri 131072, debug-location !264; ep.c:194:9
  $rsi = COPY %173:gr64, debug-location !264; ep.c:194:9
  $xmm0 = COPY %183:fr64, debug-location !264; ep.c:194:9
  $rdx = MOV32ri64 @x, debug-location !264; ep.c:194:9
  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !264; ep.c:194:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:194:9
  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !265 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
  JCC_1 %bb.29, 4, implicit killed $eflags, debug-location !267; ep.c:195:13
  JMP_1 %bb.28, debug-location !267; ep.c:195:13

bb.28.if.then68:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; ep.c:196:13
  $edi = MOV32ri 2, debug-location !268; ep.c:196:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !268; ep.c:196:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; ep.c:196:13

bb.29.if.end69:
; predecessors: %bb.27, %bb.28
  successors: %bb.30(0x50000000), %bb.31(0x30000000); %bb.30(62.50%), %bb.31(37.50%)

  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !269 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !271; ep.c:203:13
  JMP_1 %bb.30, debug-location !271; ep.c:203:13

bb.30.if.then71:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; ep.c:204:13
  $edi = MOV32ri 1, debug-location !272; ep.c:204:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !272; ep.c:204:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; ep.c:204:13

bb.31.if.end72:
; predecessors: %bb.29, %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !273 :: (store 4 into %ir.i); ep.c:206:16

bb.32.for.cond73:
; predecessors: %bb.31, %bb.41
  successors: %bb.33(0x7c000000), %bb.42(0x04000000); %bb.33(96.88%), %bb.42(3.12%)

  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 65535, implicit-def $eflags, debug-location !278 :: (dereferenceable load 4 from %ir.i); ep.c:206:23
  JCC_1 %bb.42, 15, implicit killed $eflags, debug-location !279; ep.c:206:9
  JMP_1 %bb.33, debug-location !279; ep.c:206:9

bb.33.for.body76:
; predecessors: %bb.32
  successors: %bb.34(0x40000000), %bb.41(0x40000000); %bb.34(50.00%), %bb.41(50.00%)

  %190:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !280 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  %190:gr64 = SHL64ri %190:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !289; ep.c:208:32
  %194:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x, $noreg, debug-location !283 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  %194:fr64 = ADDSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !284; ep.c:207:22
  %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
  MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %194:fr64, debug-location !286 :: (store 8 into %ir.x1); ep.c:207:16
  %197:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x + 8, $noreg, debug-location !290 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !291; ep.c:208:22
  %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
  MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %197:fr64, debug-location !293 :: (store 8 into %ir.x2); ep.c:208:16
  %194:fr64 = MULSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !296; ep.c:209:21
  %197:fr64 = MULSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !299; ep.c:209:31
  %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
  MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %197:fr64, debug-location !301 :: (store 8 into %ir.t1); ep.c:209:16
  UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20
  JCC_1 %bb.41, 2, implicit killed $eflags, debug-location !305; ep.c:210:17
  JMP_1 %bb.34, debug-location !305; ep.c:210:17

bb.34.if.then92:
; predecessors: %bb.33
  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

  %201:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; ep.c:211:34
  $xmm0 = COPY %201:fr64, debug-location !308; ep.c:211:34
  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !308; ep.c:211:34
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; ep.c:211:34
  %4:fr64 = COPY killed $xmm0, debug-location !308; ep.c:211:34
  %4:fr64 = MULSDrr %4:fr64(tied-def 0), %239:fr64, debug-location !309; ep.c:211:32
  %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
  UCOMISDrr %4:fr64, %204:fr64, implicit-def $eflags, debug-location !313; ep.c:211:20
  JCC_1 %bb.36, 2, implicit killed $eflags, debug-location !313; ep.c:211:20

bb.35:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %246:vr128 = SQRTSDr %4:fr64
  JMP_1 %bb.37

bb.36.call.sqrt1:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; ep.c:211:20
  $xmm0 = COPY %4:fr64, debug-location !313; ep.c:211:20
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !313; ep.c:211:20
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; ep.c:211:20
  %246:vr128 = COPY killed $xmm0, debug-location !313; ep.c:211:20

bb.37.if.then92.split:
; predecessors: %bb.36, %bb.35
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
  %210:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
  %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %210:vr128, debug-location !317 :: (store 8 into %ir.t3); ep.c:212:20
  %246:vr128 = MULSDrm %246:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !320 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
  MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %246:vr128, debug-location !321 :: (store 8 into %ir.t4); ep.c:213:20
  %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
  %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
  UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21
  JCC_1 %bb.39, 6, implicit killed $eflags, debug-location !322; ep.c:214:21
  JMP_1 %bb.38, debug-location !322; ep.c:214:21

bb.38.cond.true:
; predecessors: %bb.37
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %247:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
  %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21
  JMP_1 %bb.40, debug-location !322; ep.c:214:21

bb.39.cond.false:
; predecessors: %bb.37
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %247:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
  %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21

bb.40.cond.end:
; predecessors: %bb.39, %bb.38
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
  MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %221:gr32, debug-location !323 :: (store 4 into %ir.l); ep.c:214:19
  %222:gr64_nosp = MOVSX64rr32 %221:gr32, debug-location !324; ep.c:215:26
  %224:fr64 = MOVSDrm_alt $noreg, 8, %222:gr64_nosp, @q, $noreg :: (load 8 from %ir.arrayidx103)
  %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
  MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  %226:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !330 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  %226:fr64 = ADDSDrm %226:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
  MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %226:fr64, debug-location !333 :: (store 8 into %ir.sx); ep.c:216:20
  %228:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !334 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  %228:fr64 = ADDSDrm %228:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !336 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
  MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %228:fr64, debug-location !337 :: (store 8 into %ir.sy); ep.c:217:20

bb.41.if.end109:
; predecessors: %bb.33, %bb.40
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !339 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:206:30
  JMP_1 %bb.32, debug-location !340; ep.c:206:9

bb.42.for.end112:
; predecessors: %bb.32
  successors: %bb.43(0x50000000), %bb.44(0x30000000); %bb.43(62.50%), %bb.44(37.50%)

  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !343 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
  JCC_1 %bb.44, 4, implicit killed $eflags, debug-location !345; ep.c:221:13
  JMP_1 %bb.43, debug-location !345; ep.c:221:13

bb.43.if.then114:
; predecessors: %bb.42
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !346; ep.c:222:13
  $edi = MOV32ri 1, debug-location !346; ep.c:222:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !346; ep.c:222:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !346; ep.c:222:13

bb.44.if.end115:
; predecessors: %bb.42, %bb.43
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  INC32m %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !347 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); ep.c:172:27
  JMP_1 %bb.18, debug-location !348; ep.c:172:5

bb.45.for.end118:
; predecessors: %bb.18
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !351 :: (store 4 into %ir.i); ep.c:225:12

bb.46.for.cond119:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !356 :: (dereferenceable load 4 from %ir.i); ep.c:225:19
  JCC_1 %bb.48, 15, implicit killed $eflags, debug-location !357; ep.c:225:5
  JMP_1 %bb.47, debug-location !357; ep.c:225:5

bb.47.for.body122:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %158:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  %253:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !360 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), $noreg, 8, %253:gr64_nosp, @q, $noreg, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:17
  MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %158:fr64, debug-location !363 :: (store 8 into %ir.gc); ep.c:226:12
  %159:gr32 = LEA64_32r %253:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !364; ep.c:225:26
  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %159:gr32, debug-location !364 :: (store 4 into %ir.i); ep.c:225:26
  JMP_1 %bb.46, debug-location !365; ep.c:225:5

bb.48.for.end128:
; predecessors: %bb.46
  successors: %bb.49(0x50000000), %bb.53(0x30000000); %bb.49(62.50%), %bb.53(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !368; ep.c:231:5
  %65:gr32 = MOV32r0 implicit-def dead $eflags
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !368; ep.c:231:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, debug-location !368; ep.c:231:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !368; ep.c:231:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:232:10
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:232:10
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !369; ep.c:232:10
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:232:10
  %66:fr64 = COPY killed $xmm0, debug-location !369; ep.c:232:10
  MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %66:fr64, debug-location !370 :: (store 8 into %ir.tm); ep.c:232:8
  MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !371 :: (store 4 into %ir.nit); ep.c:234:9
  MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 1, debug-location !372 :: (store 4 into %ir.verified); ep.c:235:14
  %67:gr64 = MOV64ri 4675776847449726827
  MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %67:gr64, debug-location !373 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  %68:gr64 = MOV64ri -4550329231111044107
  MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %68:gr64, debug-location !379 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  TEST8rr %65.sub_8bit:gr32, %65.sub_8bit:gr32, implicit-def $eflags, debug-location !382; ep.c:268:9
  JCC_1 %bb.53, 5, implicit killed $eflags, debug-location !382; ep.c:268:9
  JMP_1 %bb.49, debug-location !382; ep.c:268:9

bb.49.if.then133:
; predecessors: %bb.48
  successors: %bb.51(0x40000000), %bb.50(0x40000000); %bb.51(50.00%), %bb.50(50.00%)

  %74:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !383 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  %72:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !385 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
  %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
  %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
  MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %74:vr128, debug-location !390 :: (store 8 into %ir.sx_err); ep.c:269:16
  %82:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  %80:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
  %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
  %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
  MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !397 :: (store 8 into %ir.sy_err); ep.c:270:16
  %86:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29
  JCC_1 %bb.51, 3, implicit killed $eflags, debug-location !400; ep.c:271:41

bb.50:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %85:gr32 = MOV32r0 implicit-def dead $eflags
  JMP_1 %bb.52

bb.51.land.rhs:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  UCOMISDrm %86:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !402 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
  undef %85.sub_8bit:gr32 = SETCCr 3, implicit killed $eflags, debug-location !402; ep.c:271:52

bb.52.land.end:
; predecessors: %bb.51, %bb.50
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  %88:gr32 = MOVZX32rr8 %85.sub_8bit:gr32, debug-location !400; ep.c:271:41
  MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %88:gr32, debug-location !404 :: (store 4 into %ir.verified); ep.c:271:18

bb.53.if.end142:
; predecessors: %bb.48, %bb.52
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !406; ep.c:274:12
  %89:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %89:fr64, debug-location !406; ep.c:274:12
  $xmm1 = COPY %90:fr64, debug-location !406; ep.c:274:12
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !406; ep.c:274:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !406; ep.c:274:12
  %93:fr64 = COPY killed $xmm0, debug-location !406; ep.c:274:12
  %93:fr64 = DIVSDrm %93:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
  %93:fr64 = DIVSDrm %93:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !409 :: (load 8 from constant-pool); ep.c:274:33
  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %93:fr64, debug-location !410 :: (store 8 into %ir.Mops); ep.c:274:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !411; ep.c:276:5
  $rdi = MOV32ri64 @.str.5, debug-location !411; ep.c:276:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !411; ep.c:276:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !411; ep.c:276:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !411; ep.c:276:5
  %98:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:5
  $rdi = MOV32ri64 @.str.6, debug-location !413; ep.c:277:5
  $xmm0 = COPY %98:fr64, debug-location !413; ep.c:277:5
  $al = MOV8ri 1, debug-location !413; ep.c:277:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !413; ep.c:277:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:278:5
  $rdi = MOV32ri64 @.str.7, debug-location !414; ep.c:278:5
  $esi = MOV32ri 30, debug-location !414; ep.c:278:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !414; ep.c:278:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:278:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:278:5
  %105:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:5
  $rdi = MOV32ri64 @.str.8, debug-location !416; ep.c:279:5
  $xmm0 = COPY %105:fr64, debug-location !416; ep.c:279:5
  $al = MOV8ri 1, debug-location !416; ep.c:279:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !416; ep.c:279:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:5
  %108:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !417 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  %109:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !419; ep.c:280:5
  $rdi = MOV32ri64 @.str.9, debug-location !419; ep.c:280:5
  $xmm0 = COPY %108:fr64, debug-location !419; ep.c:280:5
  $xmm1 = COPY %109:fr64, debug-location !419; ep.c:280:5
  $al = MOV8ri 2, debug-location !419; ep.c:280:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !419; ep.c:280:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !419; ep.c:280:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:281:5
  $rdi = MOV32ri64 @.str.10, debug-location !420; ep.c:281:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !420; ep.c:281:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:281:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:281:5
  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !421 :: (store 4 into %ir.i); ep.c:282:12

bb.54.for.cond152:
; predecessors: %bb.53, %bb.55
  successors: %bb.55(0x7c000000), %bb.56(0x04000000); %bb.55(96.88%), %bb.56(3.12%)

  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:282:19
  JCC_1 %bb.56, 15, implicit killed $eflags, debug-location !427; ep.c:282:5
  JMP_1 %bb.55, debug-location !427; ep.c:282:5

bb.55.for.body155:
; predecessors: %bb.54
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  %149:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !428 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  %151:fr64 = MOVSDrm_alt $noreg, 8, %149:gr64_nosp, @q, $noreg, debug-location !431 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !432; ep.c:283:9
  $rdi = MOV32ri64 @.str.11, debug-location !432; ep.c:283:9
  $esi = COPY %149.sub_32bit:gr64_nosp, debug-location !432; ep.c:283:9
  $xmm0 = COPY %151:fr64, debug-location !432; ep.c:283:9
  $al = MOV8ri 1, debug-location !432; ep.c:283:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !432; ep.c:283:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !432; ep.c:283:9
  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !433 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:282:26
  JMP_1 %bb.54, debug-location !434; ep.c:282:5

bb.56.for.end161:
; predecessors: %bb.54
  successors: %bb.57(0x50000000), %bb.60(0x30000000); %bb.57(62.50%), %bb.60(37.50%)

  %117:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  %118:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  %119:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  undef %244.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; ep.c:286:5
  $rdi = MOV32ri64 @.str.12, debug-location !441; ep.c:286:5
  $esi = MOV32ri 66, debug-location !441; ep.c:286:5
  $edx = MOV32ri 31, debug-location !441; ep.c:286:5
  $ecx = MOV32ri 0, debug-location !441; ep.c:286:5
  $r8d = MOV32ri 0, debug-location !441; ep.c:286:5
  $r9d = COPY %117:gr32, debug-location !441; ep.c:286:5
  $xmm0 = COPY %118:fr64, debug-location !441; ep.c:286:5
  $xmm1 = COPY %119:fr64, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.21, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.20, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.19, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.17, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.16, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.15, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.14, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64r %244:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  PUSH64i32 @.str.13, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !441; ep.c:286:5
  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; ep.c:286:5
  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
  JCC_1 %bb.60, 4, implicit killed $eflags, debug-location !444; ep.c:290:9
  JMP_1 %bb.57, debug-location !444; ep.c:290:9

bb.57.if.then163:
; predecessors: %bb.56
  successors: %bb.58(0x40000000), %bb.59(0x40000000); %bb.58(50.00%), %bb.59(50.00%)

  %126:fr64 = FsFLD0SD
  UCOMISDrm %126:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !448 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
  JCC_1 %bb.59, 2, implicit killed $eflags, debug-location !449; ep.c:291:13
  JMP_1 %bb.58, debug-location !449; ep.c:291:13

bb.58.if.then166:
; predecessors: %bb.57
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  %127:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %127:gr64, debug-location !450 :: (store 8 into %ir.tm); ep.c:292:16

bb.59.if.end167:
; predecessors: %bb.57, %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !452; ep.c:293:14
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !452; ep.c:293:14
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !452; ep.c:293:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !452; ep.c:293:14
  %129:fr64 = COPY killed $xmm0, debug-location !452; ep.c:293:14
  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %129:fr64, debug-location !453 :: (store 8 into %ir.tt); ep.c:293:12
  %145:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  %132:fr64 = COPY %129:fr64, debug-location !456; ep.c:294:62
  %132:fr64 = MULSDrr %132:fr64(tied-def 0), %145:fr64, debug-location !456; ep.c:294:62
  %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !458 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !459; ep.c:294:9
  $rdi = MOV32ri64 @.str.23, debug-location !459; ep.c:294:9
  $xmm0 = COPY %129:fr64, debug-location !459; ep.c:294:9
  $xmm1 = COPY %132:fr64, debug-location !459; ep.c:294:9
  $al = MOV8ri 2, debug-location !459; ep.c:294:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !459; ep.c:294:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !459; ep.c:294:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !460; ep.c:295:14
  $edi = MOV32ri 1, debug-location !460; ep.c:295:14
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !460; ep.c:295:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !460; ep.c:295:14
  %137:fr64 = COPY killed $xmm0, debug-location !460; ep.c:295:14
  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %137:fr64, debug-location !461 :: (store 8 into %ir.tt); ep.c:295:12
  %139:fr64 = COPY %137:fr64, debug-location !464; ep.c:296:60
  %139:fr64 = MULSDrr %139:fr64(tied-def 0), %145:fr64, debug-location !464; ep.c:296:60
  %139:fr64 = DIVSDrm %139:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !466 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !467; ep.c:296:9
  $rdi = MOV32ri64 @.str.24, debug-location !467; ep.c:296:9
  $xmm0 = COPY %137:fr64, debug-location !467; ep.c:296:9
  $xmm1 = COPY %139:fr64, debug-location !467; ep.c:296:9
  $al = MOV8ri 2, debug-location !467; ep.c:296:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !467; ep.c:296:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !467; ep.c:296:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !468; ep.c:297:14
  $edi = MOV32ri 2, debug-location !468; ep.c:297:14
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !468; ep.c:297:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !468; ep.c:297:14
  %143:fr64 = COPY killed $xmm0, debug-location !468; ep.c:297:14
  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %143:fr64, debug-location !469 :: (store 8 into %ir.tt); ep.c:297:12
  %145:fr64 = MULSDrr %145:fr64(tied-def 0), %143:fr64, debug-location !472; ep.c:298:60
  %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !474 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !475; ep.c:298:9
  $rdi = MOV32ri64 @.str.25, debug-location !475; ep.c:298:9
  $xmm0 = COPY %143:fr64, debug-location !475; ep.c:298:9
  $xmm1 = COPY %145:fr64, debug-location !475; ep.c:298:9
  $al = MOV8ri 2, debug-location !475; ep.c:298:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !475; ep.c:298:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !475; ep.c:298:9

bb.60.if.end180:
; predecessors: %bb.56, %bb.59

  $eax = MOV32r0 implicit-def dead $eflags, debug-location !477; ep.c:301:5
  RET 0, killed $eax, debug-location !477; ep.c:301:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
    To: JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; ep.c:87:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%17
    SU(1): Data Latency=0 Reg=%17
  Single Issue       : false;
SU(1):   MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%17
  Single Issue       : false;
SU(2):   TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 5, implicit killed $eflags, debug-location !110; ep.c:87:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
SU(1):   MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
SU(2):   TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = MOV32ri64 @.str, debug-location !106; ep.c:87:15
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.1, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.1, debug-location !106; ep.c:87:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str, debug-location !106; ep.c:87:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = MOV32ri64 @.str, debug-location !106; ep.c:87:15
SU(1):   $rsi = MOV32ri64 @.str.1, debug-location !106; ep.c:87:15

********** MI Scheduling **********
main:%bb.0 entry
  From: MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %13:vr128 = MOVAPSrm $rip, 1, $noreg, @__const.main.dum, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(2):   MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(3):   %14:gr64 = MOV64rm $rip, 1, $noreg, @__const.main.dum + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(4):   MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%14
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %14:gr64 = MOV64rm $rip, 1, $noreg, @__const.main.dum + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %13:vr128 = MOVAPSrm $rip, 1, $noreg, @__const.main.dum, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(1):   %13:vr128 = MOVAPSrm $rip, 1, $noreg, @__const.main.dum, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
SU(2):   MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
SU(3):   %14:gr64 = MOV64rm $rip, 1, $noreg, @__const.main.dum + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
SU(4):   MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12

********** MI Scheduling **********
main:%bb.2 if.else
  From: MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 1, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 1, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %18:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %18:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 1, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 1, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
SU(1):   %18:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16

********** MI Scheduling **********
main:%bb.3 if.end
  From: MOV32mi %stack.26.j, 1, $noreg, 0, $noreg, 14, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
    To: JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !126; ep.c:104:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.26.j, 1, $noreg, 0, $noreg, 14, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags, debug-location !126; ep.c:104:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.26.j, 1, $noreg, 0, $noreg, 14, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.26.j, 1, $noreg, 0, $noreg, 14, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
SU(1):   CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17

********** MI Scheduling **********
main:%bb.3 if.end
  From: %24:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %24:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(1):   $rdi = COPY %24:gr64_nosp, debug-location !120; ep.c:102:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%24
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 @.str.2, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $xmm0 = COPY %22:fr64, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 1, debug-location !120; ep.c:102:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 1, debug-location !120; ep.c:102:5
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm0 = COPY %22:fr64, debug-location !120; ep.c:102:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $rdi = COPY %24:gr64_nosp, debug-location !120; ep.c:102:5
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = MOV32ri64 @.str.2, debug-location !120; ep.c:102:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %24:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %24:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
SU(2):   $rsi = MOV32ri64 @.str.2, debug-location !120; ep.c:102:5
SU(1):   $rdi = COPY %24:gr64_nosp, debug-location !120; ep.c:102:5
SU(3):   $xmm0 = COPY %22:fr64, debug-location !120; ep.c:102:5
SU(4):   $al = MOV8ri 1, debug-location !120; ep.c:102:5

********** MI Scheduling **********
main:%bb.3 if.end
  From: %20:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %20:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(1):   %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(2):   $xmm0 = COPY %20:fr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %21:fr64, debug-location !119; ep.c:102:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%21
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %21:fr64, debug-location !119; ep.c:102:30
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %20:fr64, debug-location !119; ep.c:102:30
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %20:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %20:fr64, debug-location !119; ep.c:102:30
SU(3):   $xmm1 = COPY %21:fr64, debug-location !119; ep.c:102:30

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %42:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %42:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(1):   MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(2):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %237:gr64 = MOV64ri -3135276447761457362
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %237:gr64 = MOV64ri -3135276447761457362
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %42:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %42:fr64 = COPY killed $xmm0, debug-location !144; ep.c:128:14
SU(1):   MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
SU(2):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
SU(3):   %237:gr64 = MOV64ri -3135276447761457362

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $rdi = COPY %37:gr64, debug-location !144; ep.c:128:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %37:gr64, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %41:fr64, debug-location !144; ep.c:128:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %41:fr64, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %37:gr64, debug-location !144; ep.c:128:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = COPY %37:gr64, debug-location !144; ep.c:128:14
SU(1):   $xmm0 = COPY %41:fr64, debug-location !144; ep.c:128:14

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%40
  Single Issue       : false;
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = COPY %40:gr64, debug-location !141; ep.c:127:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%40
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm0 = COPY %38:fr64, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $rdx = COPY %39:gr64, debug-location !141; ep.c:127:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $rdx = COPY %39:gr64, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm0 = COPY %38:fr64, debug-location !141; ep.c:127:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = COPY %40:gr64, debug-location !141; ep.c:127:5
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
SU(2):   $rsi = COPY %40:gr64, debug-location !141; ep.c:127:5
SU(3):   $xmm0 = COPY %38:fr64, debug-location !141; ep.c:127:5
SU(4):   $rdx = COPY %39:gr64, debug-location !141; ep.c:127:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.18.np, 1, $noreg, 0, $noreg, 16384, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %37:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %38:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %39:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 1 0 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %39:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %38:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %37:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.18.np, 1, $noreg, 0, $noreg, 16384, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
SU(1):   MOV32mi %stack.18.np, 1, $noreg, 0, $noreg, 16384, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
SU(2):   %37:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
SU(3):   %38:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
SU(4):   %39:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $rdi = MOV32ri64 @.str.4, debug-location !135; ep.c:108:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %24:gr64_nosp, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %24:gr64_nosp, debug-location !135; ep.c:108:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.4, debug-location !135; ep.c:108:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !135; ep.c:108:5
SU(1):   $rsi = COPY %24:gr64_nosp, debug-location !135; ep.c:108:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: $rdi = MOV32ri64 @.str.3, debug-location !133; ep.c:107:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.3, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.3, debug-location !133; ep.c:107:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = MOV32ri64 @.str.3, debug-location !133; ep.c:107:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5

********** MI Scheduling **********
main:%bb.5 if.end7
  From: %29:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(1):   MOV8mi %29:gr64, 1, %24:gr64_nosp, 1, $noreg, 0, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV8mi %29:gr64, 1, %24:gr64_nosp, 1, $noreg, 0, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %29:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
SU(1):   MOV8mi %29:gr64, 1, %24:gr64_nosp, 1, $noreg, 0, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17

********** MI Scheduling **********
main:%bb.7 for.body
  From: %249:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
    To: JMP_1 %bb.6, debug-location !159; ep.c:129:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %249:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%249
    SU(1): Data Latency=4 Reg=%249
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mr $noreg, 8, %249:gr64_nosp, @x, $noreg, %237:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%249
  Single Issue       : false;
SU(2):   %238:gr32 = LEA64_32r %249:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%249
  Successors:
    SU(3): Data Latency=1 Reg=%238
  Single Issue       : false;
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %238:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%238
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.6, debug-location !159; ep.c:129:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %238:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %238:gr32 = LEA64_32r %249:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $noreg, 8, %249:gr64_nosp, @x, $noreg, %237:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %249:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %249:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
SU(1):   MOV64mr $noreg, 8, %249:gr64_nosp, @x, $noreg, %237:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
SU(2):   %238:gr32 = LEA64_32r %249:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %238:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30

********** MI Scheduling **********
main:%bb.8 for.end
  From: %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
    To: JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !164; ep.c:132:12
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %45:gr8 = MOV8ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%45
  Single Issue       : false;
SU(2):   TEST8rr %45:gr8, %45:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%45
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !164; ep.c:132:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST8rr %45:gr8, %45:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %45:gr8 = MOV8ri 1
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(0) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(1):   %45:gr8 = MOV8ri 1
SU(2):   TEST8rr %45:gr8, %45:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
SU(1):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: %53:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !171; ep.c:142:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %53:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%53
  Single Issue       : false;
SU(1):   %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(2):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rsi = COPY %53:gr64, debug-location !171; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%53
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $xmm0 = COPY %54:fr64, debug-location !171; ep.c:142:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%54
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $rdx = MOV32ri64 @x, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit killed $rsi, implicit killed $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !171; ep.c:142:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
  Cand SU(5) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $xmm0 = COPY %54:fr64, debug-location !171; ep.c:142:5
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 3 1 
  Cand SU(5) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rsi = COPY %53:gr64, debug-location !171; ep.c:142:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 1 0 
  Cand SU(5) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edi = MOV32r0 implicit-def dead $eflags, debug-location !171; ep.c:142:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $rdx = MOV32ri64 @x, debug-location !171; ep.c:142:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %53:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %53:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
SU(1):   %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(5):   $rdx = MOV32ri64 @x, debug-location !171; ep.c:142:5
SU(2):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !171; ep.c:142:5
SU(3):   $rsi = COPY %53:gr64, debug-location !171; ep.c:142:5
SU(4):   $xmm0 = COPY %54:fr64, debug-location !171; ep.c:142:5

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: %51:gr64 = MOV64ri 4742906807993761792
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !171; ep.c:142:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %51:gr64 = MOV64ri 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(1):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%51
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !171; ep.c:142:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:gr64 = MOV64ri 4742906807993761792
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %51:gr64 = MOV64ri 4742906807993761792
SU(1):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8

********** MI Scheduling **********
main:%bb.11 for.end.split
  From: %47:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%47
  Single Issue       : false;
SU(1):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %47:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%47
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %47:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %47:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
SU(1):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %47:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10

********** MI Scheduling **********
main:%bb.13 for.body29
  From: %234:fr64 = COPY $xmm0, debug-location !182; ep.c:151:14
    To: JMP_1 %bb.12, debug-location !185; ep.c:150:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %234:fr64 = COPY $xmm0, debug-location !182; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%234
  Single Issue       : false;
SU(1):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %234:fr64, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%234
  Single Issue       : false;
SU(2):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !184 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.12, debug-location !185; ep.c:150:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !184 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %234:fr64, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %234:fr64 = COPY $xmm0, debug-location !182; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %234:fr64 = COPY $xmm0, debug-location !182; ep.c:151:14
SU(1):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %234:fr64, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
SU(2):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !184 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30

********** MI Scheduling **********
main:%bb.13 for.body29
  From: $rdi = COPY %53:gr64, debug-location !182; ep.c:151:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !182; ep.c:151:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %53:gr64, debug-location !182; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %232:fr64, debug-location !182; ep.c:151:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !182; ep.c:151:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %232:fr64, debug-location !182; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %53:gr64, debug-location !182; ep.c:151:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = COPY %53:gr64, debug-location !182; ep.c:151:14
SU(1):   $xmm0 = COPY %232:fr64, debug-location !182; ep.c:151:14

********** MI Scheduling **********
main:%bb.14 for.end33
  From: %57:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=2
Live In: 
Live Out: %58 
Live Thru: 
  LiveReg: %58
  UpdateRegP: SU(3) MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %58:gr64, debug-location !190 :: (store 8 into %ir.tt); ep.c:155:8
              to 
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %57:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%57
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %57:fr64, debug-location !189 :: (store 8 into %ir.an); ep.c:154:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%57
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   %58:gr64 = MOV64ri 4733340128880099328
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%58
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %58:gr64, debug-location !190 :: (store 8 into %ir.tt); ep.c:155:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%58
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !191 :: (store 8 into %ir.gc); ep.c:156:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.8.sx, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.sx); ep.c:157:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.9.sy, 1, $noreg, 0, $noreg, 0, debug-location !193 :: (store 8 into %ir.sy); ep.c:158:8
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !194 :: (store 4 into %ir.i); ep.c:160:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 1 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !194 :: (store 4 into %ir.i); ep.c:160:12
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 6 5 4 3 
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mi32 %stack.9.sy, 1, $noreg, 0, $noreg, 0, debug-location !193 :: (store 8 into %ir.sy); ep.c:158:8
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mi32 %stack.8.sx, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.sx); ep.c:157:8
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !191 :: (store 8 into %ir.gc); ep.c:156:8
Bottom Pressure:
GR16=2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %58:gr64, debug-location !190 :: (store 8 into %ir.tt); ep.c:155:8
Bottom Pressure:
GR16=2
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %58:gr64 = MOV64ri 4733340128880099328
Bottom Pressure:

  Ready @2c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %57:fr64, debug-location !189 :: (store 8 into %ir.an); ep.c:154:8
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %57
  UpdateRegP: SU(1) MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %57:fr64, debug-location !189 :: (store 8 into %ir.an); ep.c:154:8
              to 
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %57:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %57:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
SU(1):   MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %57:fr64, debug-location !189 :: (store 8 into %ir.an); ep.c:154:8
SU(2):   %58:gr64 = MOV64ri 4733340128880099328
SU(3):   MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %58:gr64, debug-location !190 :: (store 8 into %ir.tt); ep.c:155:8
SU(4):   MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !191 :: (store 8 into %ir.gc); ep.c:156:8
SU(5):   MOV64mi32 %stack.8.sx, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.sx); ep.c:157:8
SU(6):   MOV64mi32 %stack.9.sy, 1, $noreg, 0, $noreg, 0, debug-location !193 :: (store 8 into %ir.sy); ep.c:158:8
SU(7):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !194 :: (store 4 into %ir.i); ep.c:160:12

********** MI Scheduling **********
main:%bb.16 for.body37
  From: %250:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !201 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
    To: JMP_1 %bb.15, debug-location !206; ep.c:160:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %250:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !201 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%250
    SU(1): Data Latency=4 Reg=%250
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mi32 $noreg, 8, %250:gr64_nosp, @q, $noreg, 0, debug-location !204 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%250
  Single Issue       : false;
SU(2):   %231:gr32 = LEA64_32r %250:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !205; ep.c:160:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%250
  Successors:
    SU(3): Data Latency=1 Reg=%231
  Single Issue       : false;
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !205 :: (store 4 into %ir.i); ep.c:160:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !206; ep.c:160:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !205 :: (store 4 into %ir.i); ep.c:160:26
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %231:gr32 = LEA64_32r %250:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !205; ep.c:160:26
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mi32 $noreg, 8, %250:gr64_nosp, @q, $noreg, 0, debug-location !204 :: (store 8 into %ir.arrayidx39); ep.c:161:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %250:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !201 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %250:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !201 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
SU(1):   MOV64mi32 $noreg, 8, %250:gr64_nosp, @q, $noreg, 0, debug-location !204 :: (store 8 into %ir.arrayidx39); ep.c:161:14
SU(2):   %231:gr32 = LEA64_32r %250:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !205; ep.c:160:26
SU(3):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !205 :: (store 4 into %ir.i); ep.c:160:26

********** MI Scheduling **********
main:%bb.17 for.end42
  From: MOV32mi %stack.25.k_offset, 1, $noreg, 0, $noreg, -1, debug-location !209 :: (store 4 into %ir.k_offset); ep.c:170:14
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=5
FR32X=5
GR16=4
Live In: 
Live Out: %240 %209 %204 %239 %183 %176 %173 
Live Thru: 
  LiveReg: %240
  LiveReg: %209
  LiveReg: %204
  LiveReg: %239
  LiveReg: %183
  LiveReg: %176
  LiveReg: %173
Top Pressure:

Bottom Pressure:
FR32=5
FR32X=5
GR16=4
Excess PSets: 
SU(0):   MOV32mi %stack.25.k_offset, 1, $noreg, 0, $noreg, -1, debug-location !209 :: (store 4 into %ir.k_offset); ep.c:170:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV32mi %stack.23.k, 1, $noreg, 0, $noreg, 1, debug-location !210 :: (store 4 into %ir.k); ep.c:172:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %173:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %176:gr64 = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %183:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(5):   %239:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(6):   %204:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %209:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %240:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 8 7 5 4 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %240:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
GR16=4
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 7 5 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %209:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %204:fr64 = FsFLD0SD
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 1 0 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %239:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %183:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
GR16=4
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %176:gr64 = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %173:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.23.k, 1, $noreg, 0, $noreg, 1, debug-location !210 :: (store 4 into %ir.k); ep.c:172:12
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.25.k_offset, 1, $noreg, 0, $noreg, -1, debug-location !209 :: (store 4 into %ir.k_offset); ep.c:170:14
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   MOV32mi %stack.25.k_offset, 1, $noreg, 0, $noreg, -1, debug-location !209 :: (store 4 into %ir.k_offset); ep.c:170:14
SU(1):   MOV32mi %stack.23.k, 1, $noreg, 0, $noreg, 1, debug-location !210 :: (store 4 into %ir.k); ep.c:172:12
SU(2):   %173:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
SU(3):   %176:gr64 = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg
SU(4):   %183:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(5):   %239:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
SU(6):   %204:fr64 = FsFLD0SD
SU(7):   %209:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
SU(8):   %240:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)

********** MI Scheduling **********
main:%bb.18 for.cond43
  From: %61:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
    To: JCC_1 %bb.45, 15, implicit $eflags, debug-location !217; ep.c:172:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %61:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(1):   CMP32rm %61:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%61
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.45, 15, implicit $eflags, debug-location !217; ep.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %61:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %61:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %61:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
SU(1):   CMP32rm %61:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:19

********** MI Scheduling **********
main:%bb.19 for.body46
  From: %161:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !218 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %161:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !218 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%161
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %161:gr32 = nsw ADD32rm %161:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%161
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%161
  Single Issue       : false;
SU(2):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %161:gr32, debug-location !222 :: (store 4 into %ir.kk); ep.c:173:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%161
  Single Issue       : false;
SU(3):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %58:gr64, debug-location !223 :: (store 8 into %ir.t1); ep.c:174:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %163:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=4 Reg=%163
  Single Issue       : false;
SU(5):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %163:fr64, debug-location !225 :: (store 8 into %ir.t2); ep.c:175:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%163
  Single Issue       : false;
SU(6):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 1, debug-location !226 :: (store 4 into %ir.i); ep.c:179:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 3 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 1, debug-location !226 :: (store 4 into %ir.i); ep.c:179:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %163:fr64, debug-location !225 :: (store 8 into %ir.t2); ep.c:175:12
  Ready @0c
  BotQ.A TopLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %163:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %58:gr64, debug-location !223 :: (store 8 into %ir.t1); ep.c:174:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %161:gr32, debug-location !222 :: (store 4 into %ir.kk); ep.c:173:12
  Ready @1c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %161:gr32 = nsw ADD32rm %161:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %161:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !218 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
  Ready @9c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %161:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !218 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
SU(1):   %161:gr32 = nsw ADD32rm %161:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
SU(2):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %161:gr32, debug-location !222 :: (store 4 into %ir.kk); ep.c:173:12
SU(3):   MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %58:gr64, debug-location !223 :: (store 8 into %ir.t1); ep.c:174:12
SU(4):   %163:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
SU(5):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %163:fr64, debug-location !225 :: (store 8 into %ir.t2); ep.c:175:12
SU(6):   MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 1, debug-location !226 :: (store 4 into %ir.i); ep.c:179:16

********** MI Scheduling **********
main:%bb.21 for.body51
  From: %166:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !233 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
    To: JCC_1 %bb.23, 4, implicit $eflags, debug-location !242; ep.c:181:17
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %166:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !233 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(8): Data Latency=4 Reg=%166
    SU(3): Data Latency=4 Reg=%166
    SU(1): Data Latency=4 Reg=%166
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %168:gr32 = COPY %166:gr32, debug-location !235; ep.c:180:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(2): Data Latency=0 Reg=%168
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %168:gr32 = SHR32ri %168:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !235; ep.c:180:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%168
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%168
    SU(3): Out  Latency=0
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%168
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(7): Data Latency=1 Reg=%168
    SU(4): Data Latency=1 Reg=%168
    SU(7): Out  Latency=0
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %169:gr32 = COPY %168:gr32, debug-location !235; ep.c:180:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%168
  Successors:
    SU(5): Data Latency=0 Reg=%169
    SU(5): Out  Latency=0
    SU(7): Anti Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %169:gr32 = SAR32r1 %169:gr32(tied-def 0), implicit-def dead $eflags, debug-location !235; ep.c:180:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=0 Reg=%169
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%169
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %169:gr32, debug-location !236 :: (store 4 into %ir.ik); ep.c:180:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%169
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %168:gr32 = AND32ri8 %168:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !239; ep.c:181:20
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=1 Reg=%168
    SU(3): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%168
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%168
    SU(7): Out  Latency=0
    SU(5): Out  Latency=0
    SU(3): Out  Latency=0
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%166
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 4
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 4, implicit $eflags, debug-location !242; ep.c:181:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26
Bottom Pressure:
GR16=4
  LiveReg: %168
  UpdateRegP: SU(8) CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26
              to GR16 2
  LiveReg: %166
  UpdateRegP: SU(1) %168:gr32 = COPY %166:gr32, debug-location !235; ep.c:180:21
              to GR16 -2
  UpdateRegP: SU(3) %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
              to 
  UpdateRegP: SU(8) CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 7c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %168:gr32 = AND32ri8 %168:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !239; ep.c:181:20
Bottom Pressure:
GR16=4
  LiveReg: %168
  UpdateRegP: SU(4) %169:gr32 = COPY %168:gr32, debug-location !235; ep.c:180:21
              to GR16 -2
  UpdateRegP: SU(7) %168:gr32 = AND32ri8 %168:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !239; ep.c:181:20
              to GR16 -2
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %169:gr32, debug-location !236 :: (store 4 into %ir.ik); ep.c:180:16
Bottom Pressure:
GR16=6
  LiveReg: %169
  UpdateRegP: SU(6) MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %169:gr32, debug-location !236 :: (store 4 into %ir.ik); ep.c:180:16
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %169:gr32 = SAR32r1 %169:gr32(tied-def 0), implicit-def dead $eflags, debug-location !235; ep.c:180:21
Bottom Pressure:
GR16=6
  LiveReg: %169
  UpdateRegP: SU(5) %169:gr32 = SAR32r1 %169:gr32(tied-def 0), implicit-def dead $eflags, debug-location !235; ep.c:180:21
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %169:gr32 = COPY %168:gr32, debug-location !235; ep.c:180:21
Bottom Pressure:
GR16=4
  Ready @2c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
Bottom Pressure:
GR16=4
  LiveReg: %168
  UpdateRegP: SU(3) %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
              to GR16 -2
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %168:gr32 = SHR32ri %168:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !235; ep.c:180:21
Bottom Pressure:
GR16=4
  LiveReg: %168
  UpdateRegP: SU(2) %168:gr32 = SHR32ri %168:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !235; ep.c:180:21
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %168:gr32 = COPY %166:gr32, debug-location !235; ep.c:180:21
Bottom Pressure:
GR16=2
  Ready @4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %166:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !233 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
Bottom Pressure:

  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %166:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !233 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
SU(1):   %168:gr32 = COPY %166:gr32, debug-location !235; ep.c:180:21
SU(2):   %168:gr32 = SHR32ri %168:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !235; ep.c:180:21
SU(3):   %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
SU(4):   %169:gr32 = COPY %168:gr32, debug-location !235; ep.c:180:21
SU(5):   %169:gr32 = SAR32r1 %169:gr32(tied-def 0), implicit-def dead $eflags, debug-location !235; ep.c:180:21
SU(6):   MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %169:gr32, debug-location !236 :: (store 4 into %ir.ik); ep.c:180:16
SU(7):   %168:gr32 = AND32ri8 %168:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !239; ep.c:181:20
SU(8):   CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26

********** MI Scheduling **********
main:%bb.22 if.then54
  From: %174:fr64 = COPY $xmm0, debug-location !244; ep.c:182:22
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %174:fr64 = COPY $xmm0, debug-location !244; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%174
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %174:fr64, debug-location !245 :: (store 8 into %ir.t3); ep.c:182:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%174
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %174:fr64, debug-location !245 :: (store 8 into %ir.t3); ep.c:182:20
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %174:fr64 = COPY $xmm0, debug-location !244; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %174:fr64 = COPY $xmm0, debug-location !244; ep.c:182:22
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %174:fr64, debug-location !245 :: (store 8 into %ir.t3); ep.c:182:20

********** MI Scheduling **********
main:%bb.22 if.then54
  From: $rdi = COPY %173:gr64, debug-location !244; ep.c:182:22
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !244; ep.c:182:22
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %173:gr64, debug-location !244; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %172:fr64, debug-location !244; ep.c:182:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !244; ep.c:182:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %172:fr64, debug-location !244; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %173:gr64, debug-location !244; ep.c:182:22
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   $rdi = COPY %173:gr64, debug-location !244; ep.c:182:22
SU(1):   $xmm0 = COPY %172:fr64, debug-location !244; ep.c:182:22

********** MI Scheduling **********
main:%bb.24 if.end60
  From: %177:fr64 = COPY $xmm0, debug-location !252; ep.c:185:18
    To: JMP_1 %bb.20, debug-location !257; ep.c:179:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %177:fr64 = COPY $xmm0, debug-location !252; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%177
  Single Issue       : false;
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %177:fr64, debug-location !253 :: (store 8 into %ir.t3); ep.c:185:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%177
  Single Issue       : false;
SU(2):   %178:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !254 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%178
  Single Issue       : false;
SU(3):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %178:gr32, debug-location !255 :: (store 4 into %ir.kk); ep.c:186:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%178
  Single Issue       : false;
SU(4):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !256 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.20, debug-location !257; ep.c:179:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !256 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %178:gr32, debug-location !255 :: (store 4 into %ir.kk); ep.c:186:16
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %178:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !254 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %177:fr64, debug-location !253 :: (store 8 into %ir.t3); ep.c:185:16
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %177:fr64 = COPY $xmm0, debug-location !252; ep.c:185:18
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %177:fr64 = COPY $xmm0, debug-location !252; ep.c:185:18
SU(1):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %177:fr64, debug-location !253 :: (store 8 into %ir.t3); ep.c:185:16
SU(2):   %178:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !254 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
SU(3):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %178:gr32, debug-location !255 :: (store 4 into %ir.kk); ep.c:186:16
SU(4):   INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !256 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32

********** MI Scheduling **********
main:%bb.24 if.end60
  From: $rdi = COPY %176:gr64, debug-location !252; ep.c:185:18
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !252; ep.c:185:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %176:gr64, debug-location !252; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %175:fr64, debug-location !252; ep.c:185:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !252; ep.c:185:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm0 = COPY %175:fr64, debug-location !252; ep.c:185:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %176:gr64, debug-location !252; ep.c:185:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $rdi = COPY %176:gr64, debug-location !252; ep.c:185:18
SU(1):   $xmm0 = COPY %175:fr64, debug-location !252; ep.c:185:18

********** MI Scheduling **********
main:%bb.27 if.end66
  From: $edi = MOV32ri 131072, debug-location !264; ep.c:194:9
    To: CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !264; ep.c:194:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = MOV32ri 131072, debug-location !264; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %173:gr64, debug-location !264; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %183:fr64, debug-location !264; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rdx = MOV32ri64 @x, debug-location !264; ep.c:194:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !264; ep.c:194:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %183:fr64, debug-location !264; ep.c:194:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %173:gr64, debug-location !264; ep.c:194:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = MOV32ri 131072, debug-location !264; ep.c:194:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) $rdx = MOV32ri64 @x, debug-location !264; ep.c:194:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(3):   $rdx = MOV32ri64 @x, debug-location !264; ep.c:194:9
SU(0):   $edi = MOV32ri 131072, debug-location !264; ep.c:194:9
SU(1):   $rsi = COPY %173:gr64, debug-location !264; ep.c:194:9
SU(2):   $xmm0 = COPY %183:fr64, debug-location !264; ep.c:194:9

********** MI Scheduling **********
main:%bb.33 for.body76
  From: %190:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !280 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
    To: JCC_1 %bb.41, 2, implicit $eflags, debug-location !305; ep.c:210:17
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=2
Live In: %0 
Live Out: %0 
Live Thru: FR32=1
FR32X=1
  LiveReg: %0
  UpdateRegP: SU(4) %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
              to 
  UpdateRegP: SU(8) %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
              to 
  UpdateRegP: SU(14) UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20
              to FR32 1    FR32X 1
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %190:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !280 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(1): Data Latency=4 Reg=%190
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %190:gr64 = SHL64ri %190:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !289; ep.c:208:32
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=%190
    SU(0): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%190
    SU(2): Data Latency=1 Reg=%190
    SU(14): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %194:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x, $noreg, debug-location !283 :: (load 8 from %ir.arrayidx79); ep.c:207:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%190
  Successors:
    SU(3): Data Latency=4 Reg=%194
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %194:fr64 = ADDSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !284; ep.c:207:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%194
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%194
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%194
    SU(3): Out  Latency=0
  Successors:
    SU(10): Data Latency=1 Reg=%194
    SU(5): Data Latency=1 Reg=%194
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %194:fr64, debug-location !286 :: (store 8 into %ir.x1); ep.c:207:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%194
  Successors:
    SU(10): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %197:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x + 8, $noreg, debug-location !290 :: (load 8 from %ir.arrayidx84); ep.c:208:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=%190
  Successors:
    SU(7): Data Latency=4 Reg=%197
    SU(7): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(7):   %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !291; ep.c:208:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=%197
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%197
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=%197
    SU(7): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%197
    SU(9): Data Latency=1 Reg=%197
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %197:fr64, debug-location !293 :: (store 8 into %ir.x2); ep.c:208:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%197
  Successors:
    SU(11): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %194:fr64 = MULSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !296; ep.c:209:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=1 Reg=%194
    SU(4): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%194
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %197:fr64 = MULSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !299; ep.c:209:31
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Data Latency=1 Reg=%197
    SU(8): Out  Latency=0
  Successors:
    SU(12): Data Latency=1 Reg=%197
    SU(12): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(11): Data Latency=1 Reg=%197
    SU(11): Out  Latency=0
    SU(10): Data Latency=1 Reg=%194
  Successors:
    SU(14): Data Latency=1 Reg=%197
    SU(13): Data Latency=1 Reg=%197
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(13):   MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %197:fr64, debug-location !301 :: (store 8 into %ir.t1); ep.c:209:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%197
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(12): Data Latency=1 Reg=%197
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   JCC_1 %bb.41, 2, implicit $eflags, debug-location !305; ep.c:210:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %197
  UpdateRegP: SU(13) MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %197:fr64, debug-location !301 :: (store 8 into %ir.t1); ep.c:209:16
              to 
  UpdateRegP: SU(14) UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20
              to 
  Ready @1c
  BotQ.A TopLatency SU(14) 13c
  BotQ.A BotLatency SU(14) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %197:fr64, debug-location !301 :: (store 8 into %ir.t1); ep.c:209:16
Bottom Pressure:
FR32=2
FR32X=2
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %197
  UpdateRegP: SU(12) %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
              to 
  LiveReg: %194
  UpdateRegP: SU(12) %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
              to FR32 -1    FR32X -1
  Ready @2c
  BotQ.A BotLatency SU(12) 2c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %197:fr64 = MULSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !299; ep.c:209:31
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %197
  UpdateRegP: SU(9) MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %197:fr64, debug-location !293 :: (store 8 into %ir.x2); ep.c:208:16
              to 
  UpdateRegP: SU(11) %197:fr64 = MULSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !299; ep.c:209:31
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %194:fr64 = MULSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !296; ep.c:209:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %194
  UpdateRegP: SU(5) MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %194:fr64, debug-location !286 :: (store 8 into %ir.x1); ep.c:207:16
              to 
  UpdateRegP: SU(10) %194:fr64 = MULSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !296; ep.c:209:21
              to FR32 -1    FR32X -1
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 5 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %197:fr64, debug-location !293 :: (store 8 into %ir.x2); ep.c:208:16
Bottom Pressure:
FR32=3
FR32X=3
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %197
  UpdateRegP: SU(8) %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !291; ep.c:208:22
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %197
  UpdateRegP: SU(7) %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !291; ep.c:208:22
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %197:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x + 8, $noreg, debug-location !290 :: (load 8 from %ir.arrayidx84); ep.c:208:24
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %190
  UpdateRegP: SU(2) %194:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x, $noreg, debug-location !283 :: (load 8 from %ir.arrayidx79); ep.c:207:24
              to FR32 -1    FR32X -1
  UpdateRegP: SU(6) %197:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x + 8, $noreg, debug-location !290 :: (load 8 from %ir.arrayidx84); ep.c:208:24
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(6) 9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %194:fr64, debug-location !286 :: (store 8 into %ir.x1); ep.c:207:16
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %194
  UpdateRegP: SU(4) %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %194:fr64 = ADDSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !284; ep.c:207:22
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %194
  UpdateRegP: SU(3) %194:fr64 = ADDSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !284; ep.c:207:22
              to FR32 -1    FR32X -1
  Ready @5c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %194:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x, $noreg, debug-location !283 :: (load 8 from %ir.arrayidx79); ep.c:207:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @9c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %190:gr64 = SHL64ri %190:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !289; ep.c:208:32
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %190
  UpdateRegP: SU(1) %190:gr64 = SHL64ri %190:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !289; ep.c:208:32
              to GR16 -2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %190:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !280 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
Bottom Pressure:
FR32=1
FR32X=1
  Ready @14c
  BotQ.A BotLatency SU(0) 14c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %190:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !280 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
SU(1):   %190:gr64 = SHL64ri %190:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !289; ep.c:208:32
SU(2):   %194:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x, $noreg, debug-location !283 :: (load 8 from %ir.arrayidx79); ep.c:207:24
SU(3):   %194:fr64 = ADDSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !284; ep.c:207:22
SU(4):   %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
SU(5):   MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %194:fr64, debug-location !286 :: (store 8 into %ir.x1); ep.c:207:16
SU(6):   %197:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x + 8, $noreg, debug-location !290 :: (load 8 from %ir.arrayidx84); ep.c:208:24
SU(7):   %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !291; ep.c:208:22
SU(8):   %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
SU(9):   MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %197:fr64, debug-location !293 :: (store 8 into %ir.x2); ep.c:208:16
SU(10):   %194:fr64 = MULSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !296; ep.c:209:21
SU(11):   %197:fr64 = MULSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !299; ep.c:209:31
SU(12):   %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
SU(13):   MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %197:fr64, debug-location !301 :: (store 8 into %ir.t1); ep.c:209:16
SU(14):   UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20

********** MI Scheduling **********
main:%bb.34 if.then92
  From: %4:fr64 = COPY $xmm0, debug-location !308; ep.c:211:34
    To: JCC_1 %bb.36, 2, implicit $eflags, debug-location !313; ep.c:211:20
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %4:fr64 = COPY $xmm0, debug-location !308; ep.c:211:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=0 Reg=%4
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %4:fr64 = MULSDrr %4:fr64(tied-def 0), %239:fr64, debug-location !309; ep.c:211:32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%4
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%4
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%4
  Single Issue       : false;
SU(3):   UCOMISDrr %4:fr64, %204:fr64, implicit-def $eflags, debug-location !313; ep.c:211:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 2, implicit $eflags, debug-location !313; ep.c:211:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) UCOMISDrr %4:fr64, %204:fr64, implicit-def $eflags, debug-location !313; ep.c:211:20
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %4:fr64 = MULSDrr %4:fr64(tied-def 0), %239:fr64, debug-location !309; ep.c:211:32
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:fr64 = COPY $xmm0, debug-location !308; ep.c:211:34
  Ready @6c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %4:fr64 = COPY $xmm0, debug-location !308; ep.c:211:34
SU(1):   %4:fr64 = MULSDrr %4:fr64(tied-def 0), %239:fr64, debug-location !309; ep.c:211:32
SU(2):   %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
SU(3):   UCOMISDrr %4:fr64, %204:fr64, implicit-def $eflags, debug-location !313; ep.c:211:20

********** MI Scheduling **********
main:%bb.37 if.then92.split
  From: MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
    To: JCC_1 %bb.39, 6, implicit $eflags, debug-location !322; ep.c:214:21
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
Live In: %246 %209 
Live Out: %209 
Live Thru: FR32=1
FR32X=1
  LiveReg: %209
  UpdateRegP: SU(6) %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
              to 
  UpdateRegP: SU(7) %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
              to 
Top Pressure:
FR32=2
FR32X=2
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(1):   %210:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%210
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%210
    SU(1): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%210
    SU(3): Data Latency=1 Reg=%210
    SU(6): Out  Latency=0
    SU(4): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %210:vr128, debug-location !317 :: (store 8 into %ir.t3); ep.c:212:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%210
  Successors:
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %246:vr128 = MULSDrm %246:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !320 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%246
    SU(5): Data Latency=4 Reg=%246
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %246:vr128, debug-location !321 :: (store 8 into %ir.t4); ep.c:213:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%246
  Successors:
    SU(7): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Data Latency=1 Reg=%210
    SU(2): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%210
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%246
    SU(4): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%246
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%246
    SU(6): Data Latency=1 Reg=%210
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 6, implicit $eflags, debug-location !322; ep.c:214:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %210
  UpdateRegP: SU(8) UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21
              to FR32 1    FR32X 1
  LiveReg: %246
  UpdateRegP: SU(8) UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 9c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %246
  UpdateRegP: SU(5) MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %246:vr128, debug-location !321 :: (store 8 into %ir.t4); ep.c:213:20
              to 
  UpdateRegP: SU(7) %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
              to FR32 -1    FR32X -1
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %210
  UpdateRegP: SU(3) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %210:vr128, debug-location !317 :: (store 8 into %ir.t3); ep.c:212:20
              to 
  UpdateRegP: SU(6) %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %246:vr128, debug-location !321 :: (store 8 into %ir.t4); ep.c:213:20
Bottom Pressure:
FR32=3
FR32X=3
  Ready @2c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %246:vr128 = MULSDrm %246:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !320 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %246
  UpdateRegP: SU(0) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
              to 
  UpdateRegP: SU(2) %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
              to 
  UpdateRegP: SU(4) %246:vr128 = MULSDrm %246:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !320 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
              to FR32 -1    FR32X -1
  Ready @6c
  BotQ.A BotLatency SU(4) 6c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %210:vr128, debug-location !317 :: (store 8 into %ir.t3); ep.c:212:20
Bottom Pressure:
FR32=3
FR32X=3
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %210
  UpdateRegP: SU(2) %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
              to FR32 -1    FR32X -1
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %210:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
Bottom Pressure:
FR32=2
FR32X=2
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
SU(1):   %210:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
SU(2):   %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
SU(3):   MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %210:vr128, debug-location !317 :: (store 8 into %ir.t3); ep.c:212:20
SU(4):   %246:vr128 = MULSDrm %246:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !320 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
SU(5):   MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %246:vr128, debug-location !321 :: (store 8 into %ir.t4); ep.c:213:20
SU(6):   %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
SU(7):   %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
SU(8):   UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21

********** MI Scheduling **********
main:%bb.38 cond.true
  From: %247:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
    To: JMP_1 %bb.40, debug-location !322; ep.c:214:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %247:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%247
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%247
    SU(0): Out  Latency=0
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40, debug-location !322; ep.c:214:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %247:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %247:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
SU(1):   %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21

********** MI Scheduling **********
main:%bb.39 cond.false
  From: %247:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %247:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%247
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%247
    SU(0): Out  Latency=0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %247:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %247:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
SU(1):   %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21

********** MI Scheduling **********
main:%bb.40 cond.end
  From: %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=2
Live In: %0 %247 
Live Out: %0 
Live Thru: FR32=1
FR32X=1
  LiveReg: %0
  UpdateRegP: SU(4) %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
              to 
Top Pressure:
FR32=2
FR32X=2
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=1 Reg=%221
    SU(1): Data Latency=1 Reg=%221
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(1):   MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %221:gr32, debug-location !323 :: (store 4 into %ir.l); ep.c:214:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%221
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %222:gr64_nosp = MOVSX64rr32 %221:gr32, debug-location !324; ep.c:215:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=%221
  Successors:
    SU(5): Data Latency=1 Reg=%222
    SU(3): Data Latency=1 Reg=%222
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %224:fr64 = MOVSDrm_alt $noreg, 8, %222:gr64_nosp, @q, $noreg :: (load 8 from %ir.arrayidx103)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%222
  Successors:
    SU(4): Data Latency=4 Reg=%224
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(4):   %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%224
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%224
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%224
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%222
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(6):   %226:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !330 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(7): Data Latency=4 Reg=%226
    SU(7): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %226:fr64 = ADDSDrm %226:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%226
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%226
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %226:fr64, debug-location !333 :: (store 8 into %ir.sx); ep.c:216:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%226
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %228:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !334 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(10): Data Latency=4 Reg=%228
    SU(10): Out  Latency=0
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(10):   %228:fr64 = ADDSDrm %228:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !336 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(9): Data Latency=4 Reg=%228
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%228
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %228:fr64, debug-location !337 :: (store 8 into %ir.sy); ep.c:217:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Data Latency=4 Reg=%228
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 8 5 1 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %228:fr64, debug-location !337 :: (store 8 into %ir.sy); ep.c:217:20
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %228
  UpdateRegP: SU(11) MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %228:fr64, debug-location !337 :: (store 8 into %ir.sy); ep.c:217:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 10 
  Cand SU(1) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %228:fr64 = ADDSDrm %228:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !336 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %228
  UpdateRegP: SU(10) %228:fr64 = ADDSDrm %228:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !336 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(10) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 9 
  Cand SU(1) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %228:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !334 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
Bottom Pressure:
FR32=1
FR32X=1
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 8 5 
  Cand SU(1) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %226:fr64, debug-location !333 :: (store 8 into %ir.sx); ep.c:216:20
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %226
  UpdateRegP: SU(8) MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %226:fr64, debug-location !333 :: (store 8 into %ir.sx); ep.c:216:20
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 7 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %226:fr64 = ADDSDrm %226:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %226
  UpdateRegP: SU(7) %226:fr64 = ADDSDrm %226:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 6 
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %226:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !330 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
Bottom Pressure:
FR32=1
FR32X=1
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %222
  UpdateRegP: SU(3) %224:fr64 = MOVSDrm_alt $noreg, 8, %222:gr64_nosp, @q, $noreg :: (load 8 from %ir.arrayidx103)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(5) MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to FR32 1    FR32X 1
  LiveReg: %224
  UpdateRegP: SU(5) MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(4) %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %224
  UpdateRegP: SU(4) %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
              to FR32 -1    FR32X -1
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(3) %224:fr64 = MOVSDrm_alt $noreg, 8, %222:gr64_nosp, @q, $noreg :: (load 8 from %ir.arrayidx103)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @6c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %222:gr64_nosp = MOVSX64rr32 %221:gr32, debug-location !324; ep.c:215:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %221
  UpdateRegP: SU(1) MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %221:gr32, debug-location !323 :: (store 4 into %ir.l); ep.c:214:19
              to 
  UpdateRegP: SU(2) %222:gr64_nosp = MOVSX64rr32 %221:gr32, debug-location !324; ep.c:215:26
              to GR16 -2
  Ready @7c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %221:gr32, debug-location !323 :: (store 4 into %ir.l); ep.c:214:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %247
  UpdateRegP: SU(0) %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
              to GR16 -2
  Ready @8c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
SU(1):   MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %221:gr32, debug-location !323 :: (store 4 into %ir.l); ep.c:214:19
SU(2):   %222:gr64_nosp = MOVSX64rr32 %221:gr32, debug-location !324; ep.c:215:26
SU(3):   %224:fr64 = MOVSDrm_alt $noreg, 8, %222:gr64_nosp, @q, $noreg :: (load 8 from %ir.arrayidx103)
SU(4):   %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
SU(5):   MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
SU(6):   %226:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !330 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
SU(7):   %226:fr64 = ADDSDrm %226:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
SU(8):   MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %226:fr64, debug-location !333 :: (store 8 into %ir.sx); ep.c:216:20
SU(9):   %228:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !334 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
SU(10):   %228:fr64 = ADDSDrm %228:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !336 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
SU(11):   MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %228:fr64, debug-location !337 :: (store 8 into %ir.sy); ep.c:217:20

********** MI Scheduling **********
main:%bb.47 for.body122
  From: %158:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
    To: JMP_1 %bb.46, debug-location !365; ep.c:225:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %158:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%158
    SU(2): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %253:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !360 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%253
    SU(2): Data Latency=4 Reg=%253
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), $noreg, 8, %253:gr64_nosp, @q, $noreg, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%253
    SU(0): Data Latency=4 Reg=%158
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%158
  Single Issue       : false;
SU(3):   MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %158:fr64, debug-location !363 :: (store 8 into %ir.gc); ep.c:226:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%158
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %159:gr32 = LEA64_32r %253:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !364; ep.c:225:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%253
  Successors:
    SU(5): Data Latency=1 Reg=%159
  Single Issue       : false;
SU(5):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %159:gr32, debug-location !364 :: (store 4 into %ir.i); ep.c:225:26
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%159
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.46, debug-location !365; ep.c:225:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %159:gr32, debug-location !364 :: (store 4 into %ir.i); ep.c:225:26
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %159:gr32 = LEA64_32r %253:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !364; ep.c:225:26
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %158:fr64, debug-location !363 :: (store 8 into %ir.gc); ep.c:226:12
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %158:fr64 = ADDSDrm %158:fr64(tied-def 0), $noreg, 8, %253:gr64_nosp, @q, $noreg, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:17
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %253:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !360 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %158:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %158:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
SU(1):   %253:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !360 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
SU(2):   %158:fr64 = ADDSDrm %158:fr64(tied-def 0), $noreg, 8, %253:gr64_nosp, @q, $noreg, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:17
SU(3):   MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %158:fr64, debug-location !363 :: (store 8 into %ir.gc); ep.c:226:12
SU(4):   %159:gr32 = LEA64_32r %253:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !364; ep.c:225:26
SU(5):   MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %159:gr32, debug-location !364 :: (store 4 into %ir.i); ep.c:225:26

********** MI Scheduling **********
main:%bb.48 for.end128
  From: %66:fr64 = COPY $xmm0, debug-location !369; ep.c:232:10
    To: JCC_1 %bb.53, 5, implicit $eflags, debug-location !382; ep.c:268:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: %65 XMM0 
Live Out: 
Live Thru: 
Top Pressure:
FR32=1
FR32X=1
GR16=2
Bottom Pressure:

Excess PSets: 
SU(0):   %66:fr64 = COPY $xmm0, debug-location !369; ep.c:232:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%66
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %66:fr64, debug-location !370 :: (store 8 into %ir.tm); ep.c:232:8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%66
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !371 :: (store 4 into %ir.nit); ep.c:234:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 1, debug-location !372 :: (store 4 into %ir.verified); ep.c:235:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %67:gr64 = MOV64ri 4675776847449726827
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %67:gr64, debug-location !373 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%67
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %68:gr64 = MOV64ri -4550329231111044107
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%68
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %68:gr64, debug-location !379 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%68
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   TEST8rr %65.sub_8bit:gr32, %65.sub_8bit:gr32, implicit-def $eflags, debug-location !382; ep.c:268:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.53, 5, implicit $eflags, debug-location !382; ep.c:268:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 2 1 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) TEST8rr %65.sub_8bit:gr32, %65.sub_8bit:gr32, implicit-def $eflags, debug-location !382; ep.c:268:9
Bottom Pressure:
GR16=2
  LiveReg: %65
  UpdateRegP: SU(8) TEST8rr %65.sub_8bit:gr32, %65.sub_8bit:gr32, implicit-def $eflags, debug-location !382; ep.c:268:9
              to 
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 3 2 1 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %68:gr64, debug-location !379 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
Bottom Pressure:
GR16=4
  LiveReg: %68
  UpdateRegP: SU(7) MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %68:gr64, debug-location !379 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 3 2 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %68:gr64 = MOV64ri -4550329231111044107
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 3 2 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %67:gr64, debug-location !373 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
Bottom Pressure:
GR16=4
  LiveReg: %67
  UpdateRegP: SU(5) MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %67:gr64, debug-location !373 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %67:gr64 = MOV64ri 4675776847449726827
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 1, debug-location !372 :: (store 4 into %ir.verified); ep.c:235:14
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !371 :: (store 4 into %ir.nit); ep.c:234:9
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %66:fr64, debug-location !370 :: (store 8 into %ir.tm); ep.c:232:8
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %66
  UpdateRegP: SU(1) MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %66:fr64, debug-location !370 :: (store 8 into %ir.tm); ep.c:232:8
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:fr64 = COPY $xmm0, debug-location !369; ep.c:232:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %66:fr64 = COPY $xmm0, debug-location !369; ep.c:232:10
SU(1):   MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %66:fr64, debug-location !370 :: (store 8 into %ir.tm); ep.c:232:8
SU(2):   MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !371 :: (store 4 into %ir.nit); ep.c:234:9
SU(3):   MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 1, debug-location !372 :: (store 4 into %ir.verified); ep.c:235:14
SU(4):   %67:gr64 = MOV64ri 4675776847449726827
SU(5):   MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %67:gr64, debug-location !373 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
SU(6):   %68:gr64 = MOV64ri -4550329231111044107
SU(7):   MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %68:gr64, debug-location !379 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
SU(8):   TEST8rr %65.sub_8bit:gr32, %65.sub_8bit:gr32, implicit-def $eflags, debug-location !382; ep.c:268:9

********** MI Scheduling **********
main:%bb.48 for.end128
  From: %65:gr32 = MOV32r0 implicit-def dead $eflags
    To: CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !368; ep.c:231:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %65:gr32 = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !368; ep.c:231:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !368; ep.c:231:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32r0 implicit-def dead $eflags, debug-location !368; ep.c:231:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %65:gr32 = MOV32r0 implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %65:gr32 = MOV32r0 implicit-def dead $eflags
SU(1):   $edi = MOV32r0 implicit-def dead $eflags, debug-location !368; ep.c:231:5

********** MI Scheduling **********
main:%bb.49 if.then133
  From: %74:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !383 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
    To: JCC_1 %bb.51, 3, implicit $eflags, debug-location !400; ep.c:271:41
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
Live In: %209 
Live Out: %86 
Live Thru: 
  LiveReg: %86
  UpdateRegP: SU(13) UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29
              to FR32 1    FR32X 1
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %74:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !383 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%74
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %72:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !385 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Data Latency=4 Reg=%72
    SU(2): Data Latency=4 Reg=%72
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%72
    SU(0): Data Latency=4 Reg=%74
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%74
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%74
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%72
  Successors:
    SU(4): Data Latency=10 Reg=%74
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 2
  Predecessors:
    SU(3): Data Latency=10 Reg=%74
    SU(3): Out  Latency=0
  Successors:
    SU(13): Data Latency=1 Reg=%74
    SU(5): Data Latency=1 Reg=%74
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %74:vr128, debug-location !390 :: (store 8 into %ir.sx_err); ep.c:269:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%74
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %82:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(8): Data Latency=4 Reg=%82
    SU(8): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %80:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%80
    SU(8): Data Latency=4 Reg=%80
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(8):   %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(7): Data Latency=4 Reg=%80
    SU(6): Data Latency=4 Reg=%82
    SU(6): Out  Latency=0
  Successors:
    SU(9): Data Latency=1 Reg=%82
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(8): Data Latency=1 Reg=%82
    SU(8): Out  Latency=0
    SU(7): Data Latency=4 Reg=%80
  Successors:
    SU(10): Data Latency=10 Reg=%82
    SU(10): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(9): Data Latency=10 Reg=%82
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%82
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !397 :: (store 8 into %ir.sy_err); ep.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%82
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   %86:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Data Latency=4 Reg=%86
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(13):   UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%74
    SU(12): Data Latency=4 Reg=%86
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   JCC_1 %bb.51, 3, implicit $eflags, debug-location !400; ep.c:271:41
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 13 
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %74
  UpdateRegP: SU(5) MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %74:vr128, debug-location !390 :: (store 8 into %ir.sx_err); ep.c:269:16
              to 
  UpdateRegP: SU(13) UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29
              to 
  Ready @1c
  BotQ.A TopLatency SU(13) 16c
  BotQ.A BotLatency SU(13) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %86:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @5c
  BotQ.A BotLatency SU(12) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !397 :: (store 8 into %ir.sy_err); ep.c:270:16
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %82
  UpdateRegP: SU(11) MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !397 :: (store 8 into %ir.sy_err); ep.c:270:16
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 
  Cand SU(5) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %82
  UpdateRegP: SU(10) %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
              to 
  LiveReg: %209
  UpdateRegP: SU(4) %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
              to 
  UpdateRegP: SU(10) %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
              to FR32 -1    FR32X -1
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %82
  UpdateRegP: SU(9) %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
              to 
  LiveReg: %80
  UpdateRegP: SU(8) %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
              to 
  UpdateRegP: SU(9) %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(9) 11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %82
  UpdateRegP: SU(8) %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
              to FR32 -1    FR32X -1
  Ready @12c
  BotQ.A BotLatency SU(8) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 6 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %80:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
Bottom Pressure:
FR32=3
FR32X=3
  Ready @16c
  BotQ.A BotLatency SU(7) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %82:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
Bottom Pressure:
FR32=2
FR32X=2
  Ready @16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %74:vr128, debug-location !390 :: (store 8 into %ir.sx_err); ep.c:269:16
Bottom Pressure:
FR32=2
FR32X=2
  Ready @2c
  BotQ.A TopLatency SU(5) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %74
  UpdateRegP: SU(4) %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
              to FR32 -1    FR32X -1
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %74
  UpdateRegP: SU(3) %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
              to 
  LiveReg: %72
  UpdateRegP: SU(2) %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
              to 
  UpdateRegP: SU(3) %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
              to FR32 -1    FR32X -1
  Ready @13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %74
  UpdateRegP: SU(2) %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
              to FR32 -1    FR32X -1
  Ready @14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %72:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !385 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
Bottom Pressure:
FR32=2
FR32X=2
  Ready @18c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %74:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !383 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
Bottom Pressure:
FR32=1
FR32X=1
  Ready @18c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %74:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !383 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
SU(1):   %72:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !385 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
SU(2):   %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
SU(3):   %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
SU(4):   %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
SU(5):   MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %74:vr128, debug-location !390 :: (store 8 into %ir.sx_err); ep.c:269:16
SU(6):   %82:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
SU(7):   %80:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
SU(8):   %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
SU(9):   %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
SU(10):   %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
SU(11):   MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !397 :: (store 8 into %ir.sy_err); ep.c:270:16
SU(12):   %86:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(13):   UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29

********** MI Scheduling **********
main:%bb.51 land.rhs
  From: UCOMISDrm %86:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !402 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   UCOMISDrm %86:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !402 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=$eflags
  Single Issue       : false;
SU(1):   undef %85.sub_8bit:gr32 = SETCCr 3, implicit $eflags, debug-location !402; ep.c:271:52
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$eflags
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) undef %85.sub_8bit:gr32 = SETCCr 3, implicit $eflags, debug-location !402; ep.c:271:52
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) UCOMISDrm %86:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !402 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   UCOMISDrm %86:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !402 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
SU(1):   undef %85.sub_8bit:gr32 = SETCCr 3, implicit $eflags, debug-location !402; ep.c:271:52

********** MI Scheduling **********
main:%bb.52 land.end
  From: %88:gr32 = MOVZX32rr8 %85.sub_8bit:gr32, debug-location !400; ep.c:271:41
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %88:gr32 = MOVZX32rr8 %85.sub_8bit:gr32, debug-location !400; ep.c:271:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%88
  Single Issue       : false;
SU(1):   MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %88:gr32, debug-location !404 :: (store 4 into %ir.verified); ep.c:271:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%88
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %88:gr32, debug-location !404 :: (store 4 into %ir.verified); ep.c:271:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %88:gr32 = MOVZX32rr8 %85.sub_8bit:gr32, debug-location !400; ep.c:271:41
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %88:gr32 = MOVZX32rr8 %85.sub_8bit:gr32, debug-location !400; ep.c:271:41
SU(1):   MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %88:gr32, debug-location !404 :: (store 4 into %ir.verified); ep.c:271:18

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = MOV32ri64 @.str.10, debug-location !420; ep.c:281:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:281:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.10, debug-location !420; ep.c:281:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !420; ep.c:281:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:281:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !420; ep.c:281:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.10, debug-location !420; ep.c:281:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.10, debug-location !420; ep.c:281:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !420; ep.c:281:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = MOV32ri64 @.str.9, debug-location !419; ep.c:280:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !419; ep.c:280:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.9, debug-location !419; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %108:fr64, debug-location !419; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %109:fr64, debug-location !419; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !419; ep.c:280:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !419; ep.c:280:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !419; ep.c:280:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %109:fr64, debug-location !419; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %108:fr64, debug-location !419; ep.c:280:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.9, debug-location !419; ep.c:280:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.9, debug-location !419; ep.c:280:5
SU(1):   $xmm0 = COPY %108:fr64, debug-location !419; ep.c:280:5
SU(2):   $xmm1 = COPY %109:fr64, debug-location !419; ep.c:280:5
SU(3):   $al = MOV8ri 2, debug-location !419; ep.c:280:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: %108:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !417 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !419; ep.c:280:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %108:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !417 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %109:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !419; ep.c:280:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %109:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %108:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !417 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %108:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !417 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
SU(1):   %109:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = MOV32ri64 @.str.8, debug-location !416; ep.c:279:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !416; ep.c:279:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.8, debug-location !416; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %105:fr64, debug-location !416; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !416; ep.c:279:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !416; ep.c:279:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !416; ep.c:279:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %105:fr64, debug-location !416; ep.c:279:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.8, debug-location !416; ep.c:279:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.8, debug-location !416; ep.c:279:5
SU(1):   $xmm0 = COPY %105:fr64, debug-location !416; ep.c:279:5
SU(2):   $al = MOV8ri 1, debug-location !416; ep.c:279:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = MOV32ri64 @.str.7, debug-location !414; ep.c:278:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:278:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.7, debug-location !414; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 30, debug-location !414; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !414; ep.c:278:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:278:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !414; ep.c:278:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 30, debug-location !414; ep.c:278:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.7, debug-location !414; ep.c:278:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.7, debug-location !414; ep.c:278:5
SU(1):   $esi = MOV32ri 30, debug-location !414; ep.c:278:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !414; ep.c:278:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = MOV32ri64 @.str.6, debug-location !413; ep.c:277:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !413; ep.c:277:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.6, debug-location !413; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %98:fr64, debug-location !413; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !413; ep.c:277:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !413; ep.c:277:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !413; ep.c:277:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %98:fr64, debug-location !413; ep.c:277:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.6, debug-location !413; ep.c:277:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.6, debug-location !413; ep.c:277:5
SU(1):   $xmm0 = COPY %98:fr64, debug-location !413; ep.c:277:5
SU(2):   $al = MOV8ri 1, debug-location !413; ep.c:277:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: $rdi = MOV32ri64 @.str.5, debug-location !411; ep.c:276:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !411; ep.c:276:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.5, debug-location !411; ep.c:276:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !411; ep.c:276:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !411; ep.c:276:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !411; ep.c:276:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.5, debug-location !411; ep.c:276:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.5, debug-location !411; ep.c:276:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !411; ep.c:276:5

********** MI Scheduling **********
main:%bb.53 if.end142
  From: %93:fr64 = COPY $xmm0, debug-location !406; ep.c:274:12
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !411; ep.c:276:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %93:fr64 = COPY $xmm0, debug-location !406; ep.c:274:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=0 Reg=%93
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %93:fr64 = DIVSDrm %93:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Predecessors:
    SU(0): Data Latency=0 Reg=%93
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%93
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %93:fr64 = DIVSDrm %93:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !409 :: (load 8 from constant-pool); ep.c:274:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%93
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%93
  Single Issue       : false;
SU(3):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %93:fr64, debug-location !410 :: (store 8 into %ir.Mops); ep.c:274:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%93
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !411; ep.c:276:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %93:fr64, debug-location !410 :: (store 8 into %ir.Mops); ep.c:274:10
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %93:fr64 = DIVSDrm %93:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !409 :: (load 8 from constant-pool); ep.c:274:33
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %93:fr64 = DIVSDrm %93:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %93:fr64 = COPY $xmm0, debug-location !406; ep.c:274:12
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %93:fr64 = COPY $xmm0, debug-location !406; ep.c:274:12
SU(1):   %93:fr64 = DIVSDrm %93:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
SU(2):   %93:fr64 = DIVSDrm %93:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !409 :: (load 8 from constant-pool); ep.c:274:33
SU(3):   MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %93:fr64, debug-location !410 :: (store 8 into %ir.Mops); ep.c:274:10

********** MI Scheduling **********
main:%bb.53 if.end142
  From: %89:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !406; ep.c:274:12
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %89:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%89
  Single Issue       : false;
SU(1):   %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%90
  Single Issue       : false;
SU(2):   $xmm0 = COPY %89:fr64, debug-location !406; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%89
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %90:fr64, debug-location !406; ep.c:274:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%90
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !406; ep.c:274:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %90:fr64, debug-location !406; ep.c:274:12
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %89:fr64, debug-location !406; ep.c:274:12
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %89:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %89:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %89:fr64, debug-location !406; ep.c:274:12
SU(3):   $xmm1 = COPY %90:fr64, debug-location !406; ep.c:274:12

********** MI Scheduling **********
main:%bb.55 for.body155
  From: $rdi = MOV32ri64 @.str.11, debug-location !432; ep.c:283:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !432; ep.c:283:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.11, debug-location !432; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %149.sub_32bit:gr64_nosp, debug-location !432; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %151:fr64, debug-location !432; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !432; ep.c:283:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !432; ep.c:283:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !432; ep.c:283:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %151:fr64, debug-location !432; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %149.sub_32bit:gr64_nosp, debug-location !432; ep.c:283:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.11, debug-location !432; ep.c:283:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = MOV32ri64 @.str.11, debug-location !432; ep.c:283:9
SU(1):   $esi = COPY %149.sub_32bit:gr64_nosp, debug-location !432; ep.c:283:9
SU(2):   $xmm0 = COPY %151:fr64, debug-location !432; ep.c:283:9
SU(3):   $al = MOV8ri 1, debug-location !432; ep.c:283:9

********** MI Scheduling **********
main:%bb.55 for.body155
  From: %149:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !428 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !432; ep.c:283:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %149:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !428 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%149
  Single Issue       : false;
SU(1):   %151:fr64 = MOVSDrm_alt $noreg, 8, %149:gr64_nosp, @q, $noreg, debug-location !431 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%149
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !432; ep.c:283:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %151:fr64 = MOVSDrm_alt $noreg, 8, %149:gr64_nosp, @q, $noreg, debug-location !431 :: (load 8 from %ir.arrayidx157); ep.c:283:35
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %149:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !428 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %149:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !428 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
SU(1):   %151:fr64 = MOVSDrm_alt $noreg, 8, %149:gr64_nosp, @q, $noreg, debug-location !431 :: (load 8 from %ir.arrayidx157); ep.c:283:35

********** MI Scheduling **********
main:%bb.56 for.end161
  From: $rdi = MOV32ri64 @.str.12, debug-location !441; ep.c:286:5
    To: PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=9
Live In: %119 %118 %117 
Live Out: XMM1 XMM0 R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
Top Pressure:
FR32=2
FR32X=2
GR16=2
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Excess PSets: 
SU(0):   $rdi = MOV32ri64 @.str.12, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(1):   $esi = MOV32ri 66, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(2):   $edx = MOV32ri 31, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 0, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(4):   $r8d = MOV32ri 0, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(5):   $r9d = COPY %117:gr32, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(6):   $xmm0 = COPY %118:fr64, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $xmm1 = COPY %119:fr64, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $xmm1 = COPY %119:fr64, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %119
  UpdateRegP: SU(7) $xmm1 = COPY %119:fr64, debug-location !441; ep.c:286:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $xmm0 = COPY %118:fr64, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %118
  UpdateRegP: SU(6) $xmm0 = COPY %118:fr64, debug-location !441; ep.c:286:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %117:gr32, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=9
  LiveReg: %117
  UpdateRegP: SU(5) $r9d = COPY %117:gr32, debug-location !441; ep.c:286:5
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = MOV32ri 0, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=8
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = MOV32ri 0, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=6
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 31, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=4
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 66, debug-location !441; ep.c:286:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=3
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.12, debug-location !441; ep.c:286:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   $rdi = MOV32ri64 @.str.12, debug-location !441; ep.c:286:5
SU(1):   $esi = MOV32ri 66, debug-location !441; ep.c:286:5
SU(2):   $edx = MOV32ri 31, debug-location !441; ep.c:286:5
SU(3):   $ecx = MOV32ri 0, debug-location !441; ep.c:286:5
SU(4):   $r8d = MOV32ri 0, debug-location !441; ep.c:286:5
SU(5):   $r9d = COPY %117:gr32, debug-location !441; ep.c:286:5
SU(6):   $xmm0 = COPY %118:fr64, debug-location !441; ep.c:286:5
SU(7):   $xmm1 = COPY %119:fr64, debug-location !441; ep.c:286:5

********** MI Scheduling **********
main:%bb.56 for.end161
  From: %117:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
    To: ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; ep.c:286:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %117:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %118:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %119:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %244.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; ep.c:286:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %244.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %119:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %118:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %117:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %117:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
SU(1):   %118:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
SU(2):   %119:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
SU(3):   undef %244.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47

********** MI Scheduling **********
main:%bb.57 if.then163
  From: %126:fr64 = FsFLD0SD
    To: JCC_1 %bb.59, 2, implicit $eflags, debug-location !449; ep.c:291:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %126:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%126
  Single Issue       : false;
SU(1):   UCOMISDrm %126:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !448 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%126
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.59, 2, implicit $eflags, debug-location !449; ep.c:291:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrm %126:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !448 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %126:fr64 = FsFLD0SD
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %126:fr64 = FsFLD0SD
SU(1):   UCOMISDrm %126:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !448 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16

********** MI Scheduling **********
main:%bb.58 if.then166
  From: %127:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %127:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%127
  Single Issue       : false;
SU(1):   MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %127:gr64, debug-location !450 :: (store 8 into %ir.tm); ep.c:292:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%127
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %127:gr64, debug-location !450 :: (store 8 into %ir.tm); ep.c:292:16
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %127:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %127:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %127:gr64, debug-location !450 :: (store 8 into %ir.tm); ep.c:292:16

********** MI Scheduling **********
main:%bb.59 if.end167
  From: $rdi = MOV32ri64 @.str.25, debug-location !475; ep.c:298:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !475; ep.c:298:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.25, debug-location !475; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %143:fr64, debug-location !475; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %145:fr64, debug-location !475; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !475; ep.c:298:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !475; ep.c:298:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !475; ep.c:298:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %145:fr64, debug-location !475; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %143:fr64, debug-location !475; ep.c:298:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.25, debug-location !475; ep.c:298:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = MOV32ri64 @.str.25, debug-location !475; ep.c:298:9
SU(1):   $xmm0 = COPY %143:fr64, debug-location !475; ep.c:298:9
SU(2):   $xmm1 = COPY %145:fr64, debug-location !475; ep.c:298:9
SU(3):   $al = MOV8ri 2, debug-location !475; ep.c:298:9

********** MI Scheduling **********
main:%bb.59 if.end167
  From: %143:fr64 = COPY $xmm0, debug-location !468; ep.c:297:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !475; ep.c:298:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %143:fr64 = COPY $xmm0, debug-location !468; ep.c:297:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%143
    SU(1): Data Latency=0 Reg=%143
  Single Issue       : false;
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %143:fr64, debug-location !469 :: (store 8 into %ir.tt); ep.c:297:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%143
  Single Issue       : false;
SU(2):   %145:fr64 = MULSDrr %145:fr64(tied-def 0), %143:fr64, debug-location !472; ep.c:298:60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%143
  Successors:
    SU(3): Data Latency=1 Reg=%145
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !474 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%145
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !475; ep.c:298:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !474 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %145:fr64 = MULSDrr %145:fr64(tied-def 0), %143:fr64, debug-location !472; ep.c:298:60
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %143:fr64, debug-location !469 :: (store 8 into %ir.tt); ep.c:297:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %143:fr64 = COPY $xmm0, debug-location !468; ep.c:297:14
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %143:fr64 = COPY $xmm0, debug-location !468; ep.c:297:14
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %143:fr64, debug-location !469 :: (store 8 into %ir.tt); ep.c:297:12
SU(2):   %145:fr64 = MULSDrr %145:fr64(tied-def 0), %143:fr64, debug-location !472; ep.c:298:60
SU(3):   %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !474 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68

********** MI Scheduling **********
main:%bb.59 if.end167
  From: $rdi = MOV32ri64 @.str.24, debug-location !467; ep.c:296:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !467; ep.c:296:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.24, debug-location !467; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %137:fr64, debug-location !467; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %139:fr64, debug-location !467; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !467; ep.c:296:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !467; ep.c:296:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !467; ep.c:296:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %139:fr64, debug-location !467; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %137:fr64, debug-location !467; ep.c:296:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.24, debug-location !467; ep.c:296:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = MOV32ri64 @.str.24, debug-location !467; ep.c:296:9
SU(1):   $xmm0 = COPY %137:fr64, debug-location !467; ep.c:296:9
SU(2):   $xmm1 = COPY %139:fr64, debug-location !467; ep.c:296:9
SU(3):   $al = MOV8ri 2, debug-location !467; ep.c:296:9

********** MI Scheduling **********
main:%bb.59 if.end167
  From: %137:fr64 = COPY $xmm0, debug-location !460; ep.c:295:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !467; ep.c:296:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %137:fr64 = COPY $xmm0, debug-location !460; ep.c:295:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%137
    SU(1): Data Latency=0 Reg=%137
  Single Issue       : false;
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %137:fr64, debug-location !461 :: (store 8 into %ir.tt); ep.c:295:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%137
  Single Issue       : false;
SU(2):   %139:fr64 = COPY %137:fr64, debug-location !464; ep.c:296:60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%137
  Successors:
    SU(3): Data Latency=0 Reg=%139
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %139:fr64 = MULSDrr %139:fr64(tied-def 0), %145:fr64, debug-location !464; ep.c:296:60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(2): Data Latency=0 Reg=%139
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%139
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %139:fr64 = DIVSDrm %139:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !466 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%139
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !467; ep.c:296:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %139:fr64 = DIVSDrm %139:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !466 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
  Ready @3c
  BotQ.A TopLatency SU(4) 1c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %139:fr64 = MULSDrr %139:fr64(tied-def 0), %145:fr64, debug-location !464; ep.c:296:60
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %139:fr64 = COPY %137:fr64, debug-location !464; ep.c:296:60
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %137:fr64, debug-location !461 :: (store 8 into %ir.tt); ep.c:295:12
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %137:fr64 = COPY $xmm0, debug-location !460; ep.c:295:14
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %137:fr64 = COPY $xmm0, debug-location !460; ep.c:295:14
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %137:fr64, debug-location !461 :: (store 8 into %ir.tt); ep.c:295:12
SU(2):   %139:fr64 = COPY %137:fr64, debug-location !464; ep.c:296:60
SU(3):   %139:fr64 = MULSDrr %139:fr64(tied-def 0), %145:fr64, debug-location !464; ep.c:296:60
SU(4):   %139:fr64 = DIVSDrm %139:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !466 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68

********** MI Scheduling **********
main:%bb.59 if.end167
  From: $rdi = MOV32ri64 @.str.23, debug-location !459; ep.c:294:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !459; ep.c:294:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.23, debug-location !459; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %129:fr64, debug-location !459; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %132:fr64, debug-location !459; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !459; ep.c:294:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !459; ep.c:294:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !459; ep.c:294:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %132:fr64, debug-location !459; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %129:fr64, debug-location !459; ep.c:294:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.23, debug-location !459; ep.c:294:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = MOV32ri64 @.str.23, debug-location !459; ep.c:294:9
SU(1):   $xmm0 = COPY %129:fr64, debug-location !459; ep.c:294:9
SU(2):   $xmm1 = COPY %132:fr64, debug-location !459; ep.c:294:9
SU(3):   $al = MOV8ri 2, debug-location !459; ep.c:294:9

********** MI Scheduling **********
main:%bb.59 if.end167
  From: %129:fr64 = COPY $xmm0, debug-location !452; ep.c:293:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !459; ep.c:294:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %129:fr64 = COPY $xmm0, debug-location !452; ep.c:293:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=0 Reg=%129
    SU(1): Data Latency=0 Reg=%129
  Single Issue       : false;
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %129:fr64, debug-location !453 :: (store 8 into %ir.tt); ep.c:293:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%129
  Single Issue       : false;
SU(2):   %145:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%145
  Single Issue       : false;
SU(3):   %132:fr64 = COPY %129:fr64, debug-location !456; ep.c:294:62
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%129
  Successors:
    SU(4): Data Latency=0 Reg=%132
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %132:fr64 = MULSDrr %132:fr64(tied-def 0), %145:fr64, debug-location !456; ep.c:294:62
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%132
    SU(3): Out  Latency=0
    SU(2): Data Latency=4 Reg=%145
  Successors:
    SU(5): Data Latency=1 Reg=%132
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !458 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !459; ep.c:294:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !458 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %132:fr64 = MULSDrr %132:fr64(tied-def 0), %145:fr64, debug-location !456; ep.c:294:62
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %132:fr64 = COPY %129:fr64, debug-location !456; ep.c:294:62
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %145:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %129:fr64, debug-location !453 :: (store 8 into %ir.tt); ep.c:293:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %129:fr64 = COPY $xmm0, debug-location !452; ep.c:293:14
  Ready @4c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %129:fr64 = COPY $xmm0, debug-location !452; ep.c:293:14
SU(1):   MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %129:fr64, debug-location !453 :: (store 8 into %ir.tt); ep.c:293:12
SU(2):   %145:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
SU(3):   %132:fr64 = COPY %129:fr64, debug-location !456; ep.c:294:62
SU(4):   %132:fr64 = MULSDrr %132:fr64(tied-def 0), %145:fr64, debug-location !456; ep.c:294:62
SU(5):   %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !458 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70

********** INTERVALS **********
DIL [144r,176r:16)[400r,416r:35)[680r,720r:34)[960r,992r:28)[1056r,1104r:27)[1248r,1312r:10)[1376r,1408r:33)[2128r,2144r:9)[2208r,2224r:8)[2288r,2304r:7)[2352r,2368r:6)[2552r,2576r:5)[2736r,2768r:30)[3984r,4016r:32)[4192r,4224r:31)[4448r,4464r:14)[4584r,4608r:15)[4704r,4720r:13)[4848r,4864r:12)[6736r,6752r:11)[7152r,7168r:4)[7216r,7232r:3)[8304r,8336r:26)[8432r,8480r:25)[8560r,8608r:24)[8688r,8736r:23)[8848r,8912r:22)[8976r,9008r:21)[9216r,9280r:29)[9504r,9824r:20)[10080r,10096r:2)[10288r,10352r:19)[10416r,10432r:1)[10592r,10656r:18)[10720r,10736r:0)[10896r,10960r:17)  0@10720r 1@10416r 2@10080r 3@7216r 4@7152r 5@2552r 6@2352r 7@2288r 8@2208r 9@2128r 10@1248r 11@6736r 12@4848r 13@4704r 14@4448r 15@4584r 16@144r 17@10896r 18@10592r 19@10288r 20@9504r 21@8976r 22@8848r 23@8688r 24@8560r 25@8432r 26@8304r 27@1056r 28@960r 29@9216r 30@2736r 31@4192r 32@3984r 33@1376r 34@680r 35@400r
DIH [144r,176r:16)[400r,416r:35)[680r,720r:34)[960r,992r:28)[1056r,1104r:27)[1248r,1312r:10)[1376r,1408r:33)[2128r,2144r:9)[2208r,2224r:8)[2288r,2304r:7)[2352r,2368r:6)[2552r,2576r:5)[2736r,2768r:30)[3984r,4016r:32)[4192r,4224r:31)[4448r,4464r:14)[4584r,4608r:15)[4704r,4720r:13)[4848r,4864r:12)[6736r,6752r:11)[7152r,7168r:4)[7216r,7232r:3)[8304r,8336r:26)[8432r,8480r:25)[8560r,8608r:24)[8688r,8736r:23)[8848r,8912r:22)[8976r,9008r:21)[9216r,9280r:29)[9504r,9824r:20)[10080r,10096r:2)[10288r,10352r:19)[10416r,10432r:1)[10592r,10656r:18)[10720r,10736r:0)[10896r,10960r:17)  0@10720r 1@10416r 2@10080r 3@7216r 4@7152r 5@2552r 6@2352r 7@2288r 8@2208r 9@2128r 10@1248r 11@6736r 12@4848r 13@4704r 14@4448r 15@4584r 16@144r 17@10896r 18@10592r 19@10288r 20@9504r 21@8976r 22@8848r 23@8688r 24@8560r 25@8432r 26@8304r 27@1056r 28@960r 29@9216r 30@2736r 31@4192r 32@3984r 33@1376r 34@680r 35@400r
HDI [144r,176r:16)[400r,416r:35)[680r,720r:34)[960r,992r:28)[1056r,1104r:27)[1248r,1312r:10)[1376r,1408r:33)[2128r,2144r:9)[2208r,2224r:8)[2288r,2304r:7)[2352r,2368r:6)[2552r,2576r:5)[2736r,2768r:30)[3984r,4016r:32)[4192r,4224r:31)[4448r,4464r:14)[4584r,4608r:15)[4704r,4720r:13)[4848r,4864r:12)[6736r,6752r:11)[7152r,7168r:4)[7216r,7232r:3)[8304r,8336r:26)[8432r,8480r:25)[8560r,8608r:24)[8688r,8736r:23)[8848r,8912r:22)[8976r,9008r:21)[9216r,9280r:29)[9504r,9824r:20)[10080r,10096r:2)[10288r,10352r:19)[10416r,10432r:1)[10592r,10656r:18)[10720r,10736r:0)[10896r,10960r:17)  0@10720r 1@10416r 2@10080r 3@7216r 4@7152r 5@2552r 6@2352r 7@2288r 8@2208r 9@2128r 10@1248r 11@6736r 12@4848r 13@4704r 14@4448r 15@4584r 16@144r 17@10896r 18@10592r 19@10288r 20@9504r 21@8976r 22@8848r 23@8688r 24@8560r 25@8432r 26@8304r 27@1056r 28@960r 29@9216r 30@2736r 31@4192r 32@3984r 33@1376r 34@680r 35@400r
EFLAGS [96r,96d:135)[192r,192d:134)[240r,256r:133)[384r,384d:132)[432r,432d:131)[464r,464d:130)[560r,560d:129)[592r,592d:128)[736r,736d:127)[768r,784r:20)[832r,832d:126)[896r,896d:125)[976r,976d:4)[1008r,1008d:124)[1024r,1024d:123)[1088r,1088d:3)[1120r,1120d:122)[1216r,1216d:121)[1248r,1248d:12)[1328r,1328d:120)[1360r,1360d:119)[1424r,1424d:118)[1520r,1536r:19)[1744r,1760r:117)[1856r,1856d:116)[1904r,1904d:115)[2000r,2000d:114)[2048r,2048d:113)[2096r,2096d:112)[2128r,2128d:11)[2160r,2160d:111)[2176r,2176d:110)[2240r,2240d:109)[2256r,2256d:108)[2320r,2320d:107)[2336r,2336d:106)[2352r,2352d:10)[2384r,2384d:105)[2432r,2432d:104)[2552r,2552d:9)[2584r,2584d:103)[2640r,2656r:18)[2720r,2720d:23)[2784r,2784d:22)[2832r,2832d:21)[3024r,3040r:17)[3456r,3472r:102)[3552r,3552d:59)[3664r,3680r:16)[3760r,3760d:58)[3792r,3792d:57)[3824r,3824d:56)[3872r,3872d:55)[3888r,3904r:54)[3968r,3968d:53)[4032r,4032d:52)[4096r,4112r:51)[4176r,4176d:50)[4240r,4240d:49)[4320r,4320d:48)[4368r,4384r:47)[4432r,4432d:46)[4480r,4480d:45)[4512r,4512d:44)[4616r,4616d:43)[4624r,4640r:42)[4688r,4688d:41)[4736r,4736d:40)[4768r,4784r:39)[4832r,4832d:38)[4880r,4880d:37)[4944r,4960r:15)[5040r,5040d:32)[5360r,5376r:31)[5440r,5440d:30)[5488r,5488d:29)[5584r,5600r:28)[5696r,5696d:27)[5744r,5744d:26)[6032r,6048r:25)[6608r,6608d:24)[6656r,6672r:36)[6720r,6720d:35)[6768r,6768d:34)[6800r,6800d:33)[6880r,6896r:14)[7120r,7120d:101)[7136r,7136d:100)[7152r,7152d:8)[7184r,7184d:99)[7200r,7200d:98)[7216r,7216d:7)[7248r,7248d:97)[7408r,7424r:96)[7776r,7792r:94)[7824r,7824d:95)[7904r,7920r:93)[8032r,8032d:92)[8128r,8128d:91)[8240r,8240d:90)[8320r,8320d:2)[8352r,8352d:89)[8384r,8384d:88)[8496r,8496d:87)[8512r,8512d:86)[8592r,8592d:1)[8624r,8624d:85)[8656r,8656d:84)[8752r,8752d:83)[8800r,8800d:82)[8928r,8928d:81)[8944r,8944d:80)[8992r,8992d:0)[9024r,9024d:79)[9088r,9104r:13)[9200r,9200d:62)[9296r,9296d:61)[9312r,9312d:60)[9424r,9424d:78)[9840r,9840d:77)[9856r,9872r:76)[9936r,9952r:75)[10048r,10048d:74)[10080r,10080d:6)[10112r,10112d:73)[10240r,10240d:72)[10368r,10368d:71)[10384r,10384d:70)[10448r,10448d:69)[10560r,10560d:68)[10672r,10672d:67)[10688r,10688d:66)[10752r,10752d:65)[10864r,10864d:64)[10976r,10976d:63)[11024r,11024d:5)  0@8992r 1@8592r 2@8320r 3@1088r 4@976r 5@11024r 6@10080r 7@7216r 8@7152r 9@2552r 10@2352r 11@2128r 12@1248r 13@9088r 14@6880r 15@4944r 16@3664r 17@3024r 18@2640r 19@1520r 20@768r 21@2832r 22@2784r 23@2720r 24@6608r 25@6032r 26@5744r 27@5696r 28@5584r 29@5488r 30@5440r 31@5360r 32@5040r 33@6800r 34@6768r 35@6720r 36@6656r 37@4880r 38@4832r 39@4768r 40@4736r 41@4688r 42@4624r 43@4616r 44@4512r 45@4480r 46@4432r 47@4368r 48@4320r 49@4240r 50@4176r 51@4096r 52@4032r 53@3968r 54@3888r 55@3872r 56@3824r 57@3792r 58@3760r 59@3552r 60@9312r 61@9296r 62@9200r 63@10976r 64@10864r 65@10752r 66@10688r 67@10672r 68@10560r 69@10448r 70@10384r 71@10368r 72@10240r 73@10112r 74@10048r 75@9936r 76@9856r 77@9840r 78@9424r 79@9024r 80@8944r 81@8928r 82@8800r 83@8752r 84@8656r 85@8624r 86@8512r 87@8496r 88@8384r 89@8352r 90@8240r 91@8128r 92@8032r 93@7904r 94@7776r 95@7824r 96@7408r 97@7248r 98@7200r 99@7184r 100@7136r 101@7120r 102@3456r 103@2584r 104@2432r 105@2384r 106@2336r 107@2320r 108@2256r 109@2240r 110@2176r 111@2160r 112@2096r 113@2048r 114@2000r 115@1904r 116@1856r 117@1744r 118@1424r 119@1360r 120@1328r 121@1216r 122@1120r 123@1024r 124@1008r 125@896r 126@832r 127@736r 128@592r 129@560r 130@464r 131@432r 132@384r 133@240r 134@192r 135@96r
SIL [160r,176r:3)[672r,720r:4)[1072r,1104r:8)[1264r,1312r:7)[2560r,2576r:6)[4592r,4608r:5)[8576r,8608r:1)[9232r,9280r:2)[9520r,9824r:0)  0@9520r 1@8576r 2@9232r 3@160r 4@672r 5@4592r 6@2560r 7@1264r 8@1072r
SIH [160r,176r:3)[672r,720r:4)[1072r,1104r:8)[1264r,1312r:7)[2560r,2576r:6)[4592r,4608r:5)[8576r,8608r:1)[9232r,9280r:2)[9520r,9824r:0)  0@9520r 1@8576r 2@9232r 3@160r 4@672r 5@4592r 6@2560r 7@1264r 8@1072r
HSI [160r,176r:3)[672r,720r:4)[1072r,1104r:8)[1264r,1312r:7)[2560r,2576r:6)[4592r,4608r:5)[8576r,8608r:1)[9232r,9280r:2)[9520r,9824r:0)  0@9520r 1@8576r 2@9232r 3@160r 4@672r 5@4592r 6@2560r 7@1264r 8@1072r
XMM0 [512r,544r:35)[544r,576r:34)[688r,720r:33)[1280r,1312r:32)[1392r,1408r:31)[1408r,1440r:30)[1872r,1888r:29)[1888r,1920r:28)[2016r,2032r:27)[2032r,2064r:26)[2568r,2576r:25)[2752r,2768r:1)[2768r,2800r:0)[4000r,4016r:10)[4016r,4048r:9)[4208r,4224r:8)[4224r,4256r:7)[4600r,4608r:6)[5456r,5472r:5)[5472r,5504r:4)[5712r,5728r:3)[5728r,5760r:2)[7232r,7264r:24)[8080r,8112r:23)[8112r,8144r:22)[8448r,8480r:21)[8704r,8736r:20)[8864r,8912r:19)[9248r,9280r:11)[9600r,9824r:18)[10096r,10128r:17)[10304r,10352r:16)[10432r,10464r:15)[10608r,10656r:14)[10736r,10768r:13)[10912r,10960r:12)  0@2768r 1@2752r 2@5728r 3@5712r 4@5472r 5@5456r 6@4600r 7@4224r 8@4208r 9@4016r 10@4000r 11@9248r 12@10912r 13@10736r 14@10608r 15@10432r 16@10304r 17@10096r 18@9600r 19@8864r 20@8704r 21@8448r 22@8112r 23@8080r 24@7232r 25@2568r 26@2032r 27@2016r 28@1888r 29@1872r 30@1408r 31@1392r 32@1280r 33@688r 34@544r 35@512r
%0 [1712r,6832B:0)  0@1712r weight:0.000000e+00
%4 [5504r,5536r:2)[5536r,5568r:0)[5568r,5632r:1)[5680B,5712r:1)  0@5536r 1@5568r 2@5504r weight:0.000000e+00
%13 [32r,48r:0)  0@32r weight:0.000000e+00
%14 [64r,80r:0)  0@64r weight:0.000000e+00
%17 [208r,240r:0)  0@208r weight:0.000000e+00
%18 [368r,400r:0)  0@368r weight:0.000000e+00
%20 [480r,512r:0)  0@480r weight:0.000000e+00
%21 [496r,528r:0)  0@496r weight:0.000000e+00
%22 [576r,688r:0)  0@576r weight:0.000000e+00
%24 [624r,1072r:0)  0@624r weight:0.000000e+00
%29 [864r,880r:0)  0@864r weight:0.000000e+00
%37 [1168r,1376r:0)  0@1168r weight:0.000000e+00
%38 [1184r,1280r:0)  0@1184r weight:0.000000e+00
%39 [1200r,1296r:0)  0@1200r weight:0.000000e+00
%40 [1232r,1264r:0)  0@1232r weight:0.000000e+00
%41 [1344r,1392r:0)  0@1344r weight:0.000000e+00
%42 [1440r,1456r:0)  0@1440r weight:0.000000e+00
%45 [1728r,1744r:0)  0@1728r weight:0.000000e+00
%47 [2064r,2080r:0)  0@2064r weight:0.000000e+00
%51 [2400r,2592r:0)  0@2400r weight:0.000000e+00
%53 [2464r,2864B:0)  0@2464r weight:0.000000e+00
%54 [2480r,2568r:0)  0@2480r weight:0.000000e+00
%57 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%58 [2912r,6832B:0)  0@2912r weight:0.000000e+00
%61 [3440r,3456r:0)  0@3440r weight:0.000000e+00
%65 [7136r,7408r:0)  0@7136r weight:0.000000e+00
%66 [7264r,7280r:0)  0@7264r weight:0.000000e+00
%67 [7328r,7344r:0)  0@7328r weight:0.000000e+00
%68 [7360r,7376r:0)  0@7360r weight:0.000000e+00
%72 [7488r,7552r:0)  0@7488r weight:0.000000e+00
%74 [7472r,7520r:2)[7520r,7552r:0)[7552r,7584r:1)[7584r,7776r:3)  0@7520r 1@7552r 2@7472r 3@7584r weight:0.000000e+00
%80 [7632r,7696r:0)  0@7632r weight:0.000000e+00
%82 [7616r,7664r:2)[7664r,7696r:0)[7696r,7728r:1)[7728r,7744r:3)  0@7664r 1@7696r 2@7616r 3@7728r weight:0.000000e+00
%85 [7824r,7888B:0)[7920r,7952B:1)[7952B,7984r:2)  0@7824r 1@7920r 2@7952B-phi weight:0.000000e+00
%86 [7760r,7808B:0)[7888B,7904r:0)  0@7760r weight:0.000000e+00
%88 [7984r,8000r:0)  0@7984r weight:0.000000e+00
%89 [8048r,8080r:0)  0@8048r weight:0.000000e+00
%90 [8064r,8096r:0)  0@8064r weight:0.000000e+00
%93 [8144r,8176r:2)[8176r,8208r:0)[8208r,8224r:1)  0@8176r 1@8208r 2@8144r weight:0.000000e+00
%98 [8368r,8448r:0)  0@8368r weight:0.000000e+00
%105 [8640r,8704r:0)  0@8640r weight:0.000000e+00
%108 [8768r,8864r:0)  0@8768r weight:0.000000e+00
%109 [8784r,8880r:0)  0@8784r weight:0.000000e+00
%117 [9360r,9584r:0)  0@9360r weight:0.000000e+00
%118 [9376r,9600r:0)  0@9376r weight:0.000000e+00
%119 [9392r,9616r:0)  0@9392r weight:0.000000e+00
%126 [9920r,9936r:0)  0@9920r weight:0.000000e+00
%127 [10000r,10016r:0)  0@10000r weight:0.000000e+00
%129 [10128r,10304r:0)  0@10128r weight:0.000000e+00
%132 [10176r,10192r:2)[10192r,10224r:0)[10224r,10320r:1)  0@10192r 1@10224r 2@10176r weight:0.000000e+00
%137 [10464r,10608r:0)  0@10464r weight:0.000000e+00
%139 [10496r,10512r:2)[10512r,10544r:0)[10544r,10624r:1)  0@10512r 1@10544r 2@10496r weight:0.000000e+00
%143 [10768r,10912r:0)  0@10768r weight:0.000000e+00
%145 [10160r,10816r:2)[10816r,10848r:0)[10848r,10928r:1)  0@10816r 1@10848r 2@10160r weight:0.000000e+00
%149 [9152r,9232r:0)  0@9152r weight:0.000000e+00
%151 [9184r,9248r:0)  0@9184r weight:0.000000e+00
%158 [6944r,7008r:0)[7008r,7024r:1)  0@6944r 1@7008r weight:0.000000e+00
%159 [7056r,7072r:0)  0@7056r weight:0.000000e+00
%161 [3520r,3552r:0)[3552r,3568r:1)  0@3520r 1@3552r weight:0.000000e+00
%163 [3600r,3616r:0)  0@3600r weight:0.000000e+00
%166 [3728r,3888r:0)  0@3728r weight:0.000000e+00
%168 [3744r,3760r:2)[3760r,3792r:0)[3792r,3872r:1)[3872r,3888r:3)  0@3760r 1@3792r 2@3744r 3@3872r weight:0.000000e+00
%169 [3808r,3824r:0)[3824r,3840r:1)  0@3808r 1@3824r weight:0.000000e+00
%172 [3952r,4000r:0)  0@3952r weight:0.000000e+00
%173 [3248r,6832B:0)  0@3248r weight:0.000000e+00
%174 [4048r,4064r:0)  0@4048r weight:0.000000e+00
%175 [4160r,4208r:0)  0@4160r weight:0.000000e+00
%176 [3264r,6832B:0)  0@3264r weight:0.000000e+00
%177 [4256r,4272r:0)  0@4256r weight:0.000000e+00
%178 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%183 [3328r,6832B:0)  0@3328r weight:0.000000e+00
%190 [5008r,5040r:0)[5040r,5152r:1)  0@5008r 1@5040r weight:0.000000e+00
%194 [5056r,5088r:2)[5088r,5120r:0)[5120r,5264r:1)[5264r,5328r:3)  0@5088r 1@5120r 2@5056r 3@5264r weight:0.000000e+00
%197 [5152r,5184r:2)[5184r,5216r:0)[5216r,5296r:1)[5296r,5328r:3)[5328r,5360r:4)  0@5184r 1@5216r 2@5152r 3@5296r 4@5328r weight:0.000000e+00
%201 [5424r,5456r:0)  0@5424r weight:0.000000e+00
%204 [3376r,6832B:0)  0@3376r weight:0.000000e+00
%209 [3392r,7728r:0)  0@3392r weight:0.000000e+00
%210 [5856r,5888r:2)[5888r,5984r:0)[5984r,6032r:1)  0@5888r 1@5984r 2@5856r weight:0.000000e+00
%221 [6352r,6384r:0)  0@6352r weight:0.000000e+00
%222 [6384r,6448r:0)  0@6384r weight:0.000000e+00
%224 [6400r,6432r:0)[6432r,6448r:1)  0@6400r 1@6432r weight:0.000000e+00
%226 [6464r,6496r:0)[6496r,6512r:1)  0@6464r 1@6496r weight:0.000000e+00
%228 [6528r,6560r:0)[6560r,6576r:1)  0@6528r 1@6560r weight:0.000000e+00
%231 [3152r,3168r:0)  0@3152r weight:0.000000e+00
%232 [2704r,2752r:0)  0@2704r weight:0.000000e+00
%234 [2800r,2816r:0)  0@2800r weight:0.000000e+00
%237 [1488r,1696B:0)  0@1488r weight:0.000000e+00
%238 [1648r,1664r:0)  0@1648r weight:0.000000e+00
%239 [3360r,6832B:0)  0@3360r weight:0.000000e+00
%240 [3408r,6832B:0)  0@3408r weight:0.000000e+00
%244 [9408r,9792r:0)  0@9408r weight:0.000000e+00
%245 [1792r,1840B:0)[1920r,1968B:1)[1968B,2016r:2)  0@1792r 1@1920r 2@1968B-phi weight:0.000000e+00
%246 [5632r,5680B:0)[5760r,5808B:1)[5808B,5936r:2)[5936r,6016r:3)[6016r,6032r:4)  0@5632r 1@5760r 2@5808B-phi 3@5936r 4@6016r weight:0.000000e+00
%247 [6096r,6128r:3)[6128r,6208B:1)[6224r,6256r:4)[6256r,6320B:0)[6320B,6352r:2)  0@6256r 1@6128r 2@6320B-phi 3@6096r 4@6224r weight:0.000000e+00
%249 [1584r,1648r:0)  0@1584r weight:0.000000e+00
%250 [3088r,3152r:0)  0@3088r weight:0.000000e+00
%253 [6960r,7056r:0)  0@6960r weight:0.000000e+00
RegMasks: 176r 416r 544r 720r 992r 1104r 1312r 1408r 1888r 2032r 2144r 2224r 2304r 2368r 2576r 2768r 4016r 4224r 4464r 4608r 4720r 4864r 5472r 5728r 6752r 7168r 7232r 8112r 8336r 8480r 8608r 8736r 8912r 9008r 9280r 9824r 10096r 10352r 10432r 10656r 10736r 10960r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=4, align=4, at location [SP+8]
  fi#25: size=4, align=4, at location [SP+8]
  fi#26: size=4, align=4, at location [SP+8]
  fi#27: size=4, align=4, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
  fi#29: size=24, align=16, at location [SP+8]
  fi#30: size=16, align=16, at location [SP+8]
  fi#31: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 2.000000e+00, align=8
  cp#1: 3.100000e+01, align=8
  cp#2: 1.000000e+00, align=8
  cp#3: 0x41D2309CE5400000, align=8
  cp#4: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#5: 1.000000e-08, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
  cp#8: -2.000000e+00, align=8

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)

16B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
32B	  %13:vr128 = MOVAPSrm $rip, 1, $noreg, @__const.main.dum, $noreg, debug-location !93 :: (dereferenceable load 16 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)`); ep.c:82:12
48B	  MOVAPSmr %stack.29.dum, 1, $noreg, 0, $noreg, %13:vr128, debug-location !93 :: (store 16 into %ir.0); ep.c:82:12
64B	  %14:gr64 = MOV64rm $rip, 1, $noreg, @__const.main.dum + 16, $noreg, debug-location !93 :: (dereferenceable load 8 from `i8* bitcast ([3 x double]* @__const.main.dum to i8*)` + 16, align 16); ep.c:82:12
80B	  MOV64mr %stack.29.dum, 1, $noreg, 16, $noreg, %14:gr64, debug-location !93 :: (store 8 into %ir.0 + 16, align 16); ep.c:82:12
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
144B	  $rdi = MOV32ri64 @.str, debug-location !106; ep.c:87:15
160B	  $rsi = MOV32ri64 @.str.1, debug-location !106; ep.c:87:15
176B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !106; ep.c:87:15
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !106; ep.c:87:15
208B	  %17:gr64 = COPY killed $rax, debug-location !106; ep.c:87:15
224B	  MOV64mr %stack.31.fp, 1, $noreg, 0, $noreg, %17:gr64, debug-location !108 :: (store 8 into %ir.fp); ep.c:87:13
240B	  TEST64rr %17:gr64, %17:gr64, implicit-def $eflags, debug-location !109; ep.c:87:41
256B	  JCC_1 %bb.2, 5, implicit $eflags, debug-location !110; ep.c:87:9
272B	  JMP_1 %bb.1, debug-location !110; ep.c:87:9

288B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, debug-location !111 :: (store 4 into %ir.timers_enabled); ep.c:88:24
320B	  JMP_1 %bb.3, debug-location !113; ep.c:89:5

336B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

352B	  MOV32mi %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 1, debug-location !114 :: (store 4 into %ir.timers_enabled); ep.c:91:24
368B	  %18:gr64 = MOV64rm %stack.31.fp, 1, $noreg, 0, $noreg, debug-location !116 :: (dereferenceable load 8 from %ir.fp); ep.c:92:16
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9
400B	  $rdi = COPY %18:gr64, debug-location !117; ep.c:92:9
416B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !117; ep.c:92:9
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !117; ep.c:92:9

448B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
480B	  %20:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
496B	  %21:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
512B	  $xmm0 = COPY %20:fr64, debug-location !119; ep.c:102:30
528B	  $xmm1 = COPY %21:fr64, debug-location !119; ep.c:102:30
544B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !119; ep.c:102:30
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !119; ep.c:102:30
576B	  %22:fr64 = COPY $xmm0, debug-location !119; ep.c:102:30
592B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
624B	  %24:gr64_nosp = LEA64r %stack.30.size, 1, $noreg, 0, $noreg
672B	  $rsi = MOV32ri64 @.str.2, debug-location !120; ep.c:102:5
680B	  $rdi = COPY %24:gr64_nosp, debug-location !120; ep.c:102:5
688B	  $xmm0 = COPY %22:fr64, debug-location !120; ep.c:102:5
704B	  $al = MOV8ri 1, debug-location !120; ep.c:102:5
720B	  CALL64pcrel32 @sprintf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !120; ep.c:102:5
736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !120; ep.c:102:5
752B	  MOV32mi %stack.26.j, 1, $noreg, 0, $noreg, 14, debug-location !121 :: (store 4 into %ir.j); ep.c:103:7
768B	  CMP8mi %stack.30.size, 1, $noreg, 14, $noreg, 46, implicit-def $eflags, debug-location !125 :: (load 1 from %ir.arrayidx, align 2); ep.c:104:17
784B	  JCC_1 %bb.5, 5, implicit $eflags, debug-location !126; ep.c:104:9
800B	  JMP_1 %bb.4, debug-location !126; ep.c:104:9

816B	bb.4.if.then6:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

832B	  DEC32m %stack.26.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !127 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); ep.c:105:10

848B	bb.5.if.end7:
	; predecessors: %bb.3, %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

864B	  %29:gr64 = MOVSX64rm32 %stack.26.j, 1, $noreg, 0, $noreg, debug-location !129 :: (dereferenceable load 4 from %ir.j); ep.c:106:10
880B	  MOV8mi %29:gr64, 1, %24:gr64_nosp, 1, $noreg, 0, debug-location !132 :: (store 1 into %ir.arrayidx9); ep.c:106:17
896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
960B	  $rdi = MOV32ri64 @.str.3, debug-location !133; ep.c:107:5
976B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !133; ep.c:107:5
992B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !133; ep.c:107:5
1008B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !133; ep.c:107:5
1024B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
1056B	  $rdi = MOV32ri64 @.str.4, debug-location !135; ep.c:108:5
1072B	  $rsi = COPY %24:gr64_nosp, debug-location !135; ep.c:108:5
1088B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !135; ep.c:108:5
1104B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !135; ep.c:108:5
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !135; ep.c:108:5
1136B	  MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 0, debug-location !136 :: (store 4 into %ir.verified); ep.c:110:14
1152B	  MOV32mi %stack.18.np, 1, $noreg, 0, $noreg, 16384, debug-location !137 :: (store 4 into %ir.np); ep.c:118:8
1168B	  %37:gr64 = LEA64r %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139; ep.c:127:24
1184B	  %38:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 8, $noreg, debug-location !139 :: (dereferenceable load 8 from %ir.arrayidx14); ep.c:127:24
1200B	  %39:gr64 = nuw LEA64r %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !140; ep.c:127:33
1216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
1232B	  %40:gr64 = LEA64r %stack.29.dum, 1, $noreg, 0, $noreg
1248B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !141; ep.c:127:5
1264B	  $rsi = COPY %40:gr64, debug-location !141; ep.c:127:5
1280B	  $xmm0 = COPY %38:fr64, debug-location !141; ep.c:127:5
1296B	  $rdx = COPY %39:gr64, debug-location !141; ep.c:127:5
1312B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !141; ep.c:127:5
1328B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; ep.c:127:5
1344B	  %41:fr64 = MOVSDrm_alt %stack.29.dum, 1, $noreg, 16, $noreg, debug-location !143 :: (dereferenceable load 8 from %ir.arrayidx17, align 16); ep.c:128:30
1360B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
1376B	  $rdi = COPY %37:gr64, debug-location !144; ep.c:128:14
1392B	  $xmm0 = COPY %41:fr64, debug-location !144; ep.c:128:14
1408B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !144; ep.c:128:14
1424B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !144; ep.c:128:14
1440B	  %42:fr64 = COPY $xmm0, debug-location !144; ep.c:128:14
1456B	  MOVSDmr %stack.29.dum, 1, $noreg, 0, $noreg, %42:fr64, debug-location !146 :: (store 8 into %ir.arrayidx195, align 16); ep.c:128:12
1472B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !147 :: (store 4 into %ir.i); ep.c:129:12
1488B	  %237:gr64 = MOV64ri -3135276447761457362

1504B	bb.6.for.cond:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

1520B	  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 131071, implicit-def $eflags, debug-location !152 :: (dereferenceable load 4 from %ir.i); ep.c:129:19
1536B	  JCC_1 %bb.8, 15, implicit $eflags, debug-location !153; ep.c:129:5
1552B	  JMP_1 %bb.7, debug-location !153; ep.c:129:5

1568B	bb.7.for.body:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1584B	  %249:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !154 :: (dereferenceable load 4 from %ir.i); ep.c:130:11
1616B	  MOV64mr $noreg, 8, %249:gr64_nosp, @x, $noreg, %237:gr64, debug-location !157 :: (store 8 into %ir.arrayidx23); ep.c:130:14
1648B	  %238:gr32 = LEA64_32r %249:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !158; ep.c:129:30
1664B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %238:gr32, debug-location !158 :: (store 4 into %ir.i); ep.c:129:30
1680B	  JMP_1 %bb.6, debug-location !159; ep.c:129:5

1696B	bb.8.for.end:
	; predecessors: %bb.6
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

1712B	  %0:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
1728B	  %45:gr8 = MOV8ri 1
1744B	  TEST8rr %45:gr8, %45:gr8, implicit-def $eflags, debug-location !164; ep.c:132:12
1760B	  JCC_1 %bb.10, 4, implicit $eflags, debug-location !164; ep.c:132:12

1776B	bb.9:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1792B	  %245:fr64 = SQRTSDr %0:fr64
1824B	  JMP_1 %bb.11

1840B	bb.10.call.sqrt:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1856B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
1872B	  $xmm0 = COPY %0:fr64, debug-location !164; ep.c:132:12
1888B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
1904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
1920B	  %245:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12

1968B	bb.11.for.end.split:
	; predecessors: %bb.10, %bb.9
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2016B	  $xmm0 = COPY %245:fr64, debug-location !164; ep.c:132:12
2032B	  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !164; ep.c:132:12
2048B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !164; ep.c:132:12
2064B	  %47:fr64 = COPY $xmm0, debug-location !164; ep.c:132:12
2080B	  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %47:fr64, debug-location !165 :: (store 8 into %ir.Mops); ep.c:132:10
2096B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
2128B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !166; ep.c:134:5
2144B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !166; ep.c:134:5
2160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; ep.c:134:5
2176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
2208B	  $edi = MOV32ri 1, debug-location !167; ep.c:135:5
2224B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !167; ep.c:135:5
2240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !167; ep.c:135:5
2256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
2288B	  $edi = MOV32ri 2, debug-location !168; ep.c:136:5
2304B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !168; ep.c:136:5
2320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !168; ep.c:136:5
2336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
2352B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !169; ep.c:137:5
2368B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !169; ep.c:137:5
2384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !169; ep.c:137:5
2400B	  %51:gr64 = MOV64ri 4742906807993761792
2416B	  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !170 :: (store 8 into %ir.t1); ep.c:141:8
2432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !171; ep.c:142:5
2464B	  %53:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
2480B	  %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
2544B	  $rdx = MOV32ri64 @x, debug-location !171; ep.c:142:5
2552B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !171; ep.c:142:5
2560B	  $rsi = COPY %53:gr64, debug-location !171; ep.c:142:5
2568B	  $xmm0 = COPY %54:fr64, debug-location !171; ep.c:142:5
2576B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !171; ep.c:142:5
2584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !171; ep.c:142:5
2592B	  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %51:gr64, debug-location !172 :: (store 8 into %ir.t1); ep.c:148:8
2608B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !173 :: (store 4 into %ir.i); ep.c:150:12

2624B	bb.12.for.cond26:
	; predecessors: %bb.11, %bb.13
	  successors: %bb.13(0x7c000000), %bb.14(0x04000000); %bb.13(96.88%), %bb.14(3.12%)

2640B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 16, implicit-def $eflags, debug-location !178 :: (dereferenceable load 4 from %ir.i); ep.c:150:19
2656B	  JCC_1 %bb.14, 15, implicit $eflags, debug-location !179; ep.c:150:5
2672B	  JMP_1 %bb.13, debug-location !179; ep.c:150:5

2688B	bb.13.for.body29:
	; predecessors: %bb.12
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2704B	  %232:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !180 :: (dereferenceable load 8 from %ir.t1); ep.c:151:26
2720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; ep.c:151:14
2736B	  $rdi = COPY %53:gr64, debug-location !182; ep.c:151:14
2752B	  $xmm0 = COPY %232:fr64, debug-location !182; ep.c:151:14
2768B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !182; ep.c:151:14
2784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; ep.c:151:14
2800B	  %234:fr64 = COPY $xmm0, debug-location !182; ep.c:151:14
2816B	  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %234:fr64, debug-location !183 :: (store 8 into %ir.t2); ep.c:151:12
2832B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !184 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:150:30
2848B	  JMP_1 %bb.12, debug-location !185; ep.c:150:5

2864B	bb.14.for.end33:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2880B	  %57:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !188 :: (dereferenceable load 8 from %ir.t1); ep.c:154:10
2896B	  MOVSDmr %stack.11.an, 1, $noreg, 0, $noreg, %57:fr64, debug-location !189 :: (store 8 into %ir.an); ep.c:154:8
2912B	  %58:gr64 = MOV64ri 4733340128880099328
2928B	  MOV64mr %stack.12.tt, 1, $noreg, 0, $noreg, %58:gr64, debug-location !190 :: (store 8 into %ir.tt); ep.c:155:8
2944B	  MOV64mi32 %stack.13.gc, 1, $noreg, 0, $noreg, 0, debug-location !191 :: (store 8 into %ir.gc); ep.c:156:8
2960B	  MOV64mi32 %stack.8.sx, 1, $noreg, 0, $noreg, 0, debug-location !192 :: (store 8 into %ir.sx); ep.c:157:8
2976B	  MOV64mi32 %stack.9.sy, 1, $noreg, 0, $noreg, 0, debug-location !193 :: (store 8 into %ir.sy); ep.c:158:8
2992B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !194 :: (store 4 into %ir.i); ep.c:160:12

3008B	bb.15.for.cond34:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

3024B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !199 :: (dereferenceable load 4 from %ir.i); ep.c:160:19
3040B	  JCC_1 %bb.17, 15, implicit $eflags, debug-location !200; ep.c:160:5
3056B	  JMP_1 %bb.16, debug-location !200; ep.c:160:5

3072B	bb.16.for.body37:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

3088B	  %250:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !201 :: (dereferenceable load 4 from %ir.i); ep.c:161:11
3120B	  MOV64mi32 $noreg, 8, %250:gr64_nosp, @q, $noreg, 0, debug-location !204 :: (store 8 into %ir.arrayidx39); ep.c:161:14
3152B	  %231:gr32 = LEA64_32r %250:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !205; ep.c:160:26
3168B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %231:gr32, debug-location !205 :: (store 4 into %ir.i); ep.c:160:26
3184B	  JMP_1 %bb.15, debug-location !206; ep.c:160:5

3200B	bb.17.for.end42:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3216B	  MOV32mi %stack.25.k_offset, 1, $noreg, 0, $noreg, -1, debug-location !209 :: (store 4 into %ir.k_offset); ep.c:170:14
3232B	  MOV32mi %stack.23.k, 1, $noreg, 0, $noreg, 1, debug-location !210 :: (store 4 into %ir.k); ep.c:172:12
3248B	  %173:gr64 = LEA64r %stack.2.t1, 1, $noreg, 0, $noreg
3264B	  %176:gr64 = LEA64r %stack.3.t2, 1, $noreg, 0, $noreg
3328B	  %183:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
3360B	  %239:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.8, $noreg :: (load 8 from constant-pool)
3376B	  %204:fr64 = FsFLD0SD
3392B	  %209:vr128 = MOVAPDrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)
3408B	  %240:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load 16 from constant-pool)

3424B	bb.18.for.cond43:
	; predecessors: %bb.17, %bb.44
	  successors: %bb.19(0x7c000000), %bb.45(0x04000000); %bb.19(96.88%), %bb.45(3.12%)

3440B	  %61:gr32 = MOV32rm %stack.23.k, 1, $noreg, 0, $noreg, debug-location !213 :: (dereferenceable load 4 from %ir.k); ep.c:172:17
3456B	  CMP32rm %61:gr32, %stack.18.np, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !216 :: (dereferenceable load 4 from %ir.np); ep.c:172:19
3472B	  JCC_1 %bb.45, 15, implicit $eflags, debug-location !217; ep.c:172:5
3488B	  JMP_1 %bb.19, debug-location !217; ep.c:172:5

3504B	bb.19.for.body46:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3520B	  %161:gr32 = MOV32rm %stack.25.k_offset, 1, $noreg, 0, $noreg, debug-location !218 :: (dereferenceable load 4 from %ir.k_offset); ep.c:173:14
3552B	  %161:gr32 = nsw ADD32rm %161:gr32(tied-def 0), %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !221 :: (dereferenceable load 4 from %ir.k); ep.c:173:23
3568B	  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %161:gr32, debug-location !222 :: (store 4 into %ir.kk); ep.c:173:12
3584B	  MOV64mr %stack.2.t1, 1, $noreg, 0, $noreg, %58:gr64, debug-location !223 :: (store 8 into %ir.t1); ep.c:174:12
3600B	  %163:fr64 = MOVSDrm_alt %stack.11.an, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 8 from %ir.an); ep.c:175:14
3616B	  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %163:fr64, debug-location !225 :: (store 8 into %ir.t2); ep.c:175:12
3632B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 1, debug-location !226 :: (store 4 into %ir.i); ep.c:179:16

3648B	bb.20.for.cond48:
	; predecessors: %bb.19, %bb.24
	  successors: %bb.21(0x7c000000), %bb.25(0x04000000); %bb.21(96.88%), %bb.25(3.12%)

3664B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 100, implicit-def $eflags, debug-location !231 :: (dereferenceable load 4 from %ir.i); ep.c:179:23
3680B	  JCC_1 %bb.25, 15, implicit $eflags, debug-location !232; ep.c:179:9
3696B	  JMP_1 %bb.21, debug-location !232; ep.c:179:9

3712B	bb.21.for.body51:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.23(0x40000000); %bb.22(50.00%), %bb.23(50.00%)

3728B	  %166:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !233 :: (dereferenceable load 4 from %ir.kk); ep.c:180:18
3744B	  %168:gr32 = COPY %166:gr32, debug-location !235; ep.c:180:21
3760B	  %168:gr32 = SHR32ri %168:gr32(tied-def 0), 31, implicit-def dead $eflags, debug-location !235; ep.c:180:21
3792B	  %168:gr32 = ADD32rr %168:gr32(tied-def 0), %166:gr32, implicit-def dead $eflags, debug-location !235; ep.c:180:21
3808B	  %169:gr32 = COPY %168:gr32, debug-location !235; ep.c:180:21
3824B	  %169:gr32 = SAR32r1 %169:gr32(tied-def 0), implicit-def dead $eflags, debug-location !235; ep.c:180:21
3840B	  MOV32mr %stack.20.ik, 1, $noreg, 0, $noreg, %169:gr32, debug-location !236 :: (store 4 into %ir.ik); ep.c:180:16
3872B	  %168:gr32 = AND32ri8 %168:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !239; ep.c:181:20
3888B	  CMP32rr %168:gr32, %166:gr32, implicit-def $eflags, debug-location !241; ep.c:181:26
3904B	  JCC_1 %bb.23, 4, implicit $eflags, debug-location !242; ep.c:181:17
3920B	  JMP_1 %bb.22, debug-location !242; ep.c:181:17

3936B	bb.22.if.then54:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

3952B	  %172:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !243 :: (dereferenceable load 8 from %ir.t2); ep.c:182:34
3968B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; ep.c:182:22
3984B	  $rdi = COPY %173:gr64, debug-location !244; ep.c:182:22
4000B	  $xmm0 = COPY %172:fr64, debug-location !244; ep.c:182:22
4016B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !244; ep.c:182:22
4032B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !244; ep.c:182:22
4048B	  %174:fr64 = COPY $xmm0, debug-location !244; ep.c:182:22
4064B	  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %174:fr64, debug-location !245 :: (store 8 into %ir.t3); ep.c:182:20

4080B	bb.23.if.end56:
	; predecessors: %bb.21, %bb.22
	  successors: %bb.25(0x04000000), %bb.24(0x7c000000); %bb.25(3.12%), %bb.24(96.88%)

4096B	  CMP32mi8 %stack.20.ik, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !249 :: (dereferenceable load 4 from %ir.ik); ep.c:183:20
4112B	  JCC_1 %bb.25, 4, implicit $eflags, debug-location !250; ep.c:183:17
4128B	  JMP_1 %bb.24, debug-location !250; ep.c:183:17

4144B	bb.24.if.end60:
	; predecessors: %bb.23
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

4160B	  %175:fr64 = MOVSDrm_alt %stack.3.t2, 1, $noreg, 0, $noreg, debug-location !251 :: (dereferenceable load 8 from %ir.t2); ep.c:185:30
4176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; ep.c:185:18
4192B	  $rdi = COPY %176:gr64, debug-location !252; ep.c:185:18
4208B	  $xmm0 = COPY %175:fr64, debug-location !252; ep.c:185:18
4224B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !252; ep.c:185:18
4240B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !252; ep.c:185:18
4256B	  %177:fr64 = COPY $xmm0, debug-location !252; ep.c:185:18
4272B	  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %177:fr64, debug-location !253 :: (store 8 into %ir.t3); ep.c:185:16
4288B	  %178:gr32 = MOV32rm %stack.20.ik, 1, $noreg, 0, $noreg, debug-location !254 :: (dereferenceable load 4 from %ir.ik); ep.c:186:18
4304B	  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %178:gr32, debug-location !255 :: (store 4 into %ir.kk); ep.c:186:16
4320B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !256 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:179:32
4336B	  JMP_1 %bb.20, debug-location !257; ep.c:179:9

4352B	bb.25.for.end64:
	; predecessors: %bb.20, %bb.23
	  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

4368B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !260 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:192:13
4384B	  JCC_1 %bb.27, 4, implicit $eflags, debug-location !262; ep.c:192:13
4400B	  JMP_1 %bb.26, debug-location !262; ep.c:192:13

4416B	bb.26.if.then65:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !263; ep.c:193:13
4448B	  $edi = MOV32ri 2, debug-location !263; ep.c:193:13
4464B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !263; ep.c:193:13
4480B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !263; ep.c:193:13

4496B	bb.27.if.end66:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)

4512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:194:9
4576B	  $rdx = MOV32ri64 @x, debug-location !264; ep.c:194:9
4584B	  $edi = MOV32ri 131072, debug-location !264; ep.c:194:9
4592B	  $rsi = COPY %173:gr64, debug-location !264; ep.c:194:9
4600B	  $xmm0 = COPY %183:fr64, debug-location !264; ep.c:194:9
4608B	  CALL64pcrel32 @vranlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $xmm0, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !264; ep.c:194:9
4616B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; ep.c:194:9
4624B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !265 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:195:13
4640B	  JCC_1 %bb.29, 4, implicit $eflags, debug-location !267; ep.c:195:13
4656B	  JMP_1 %bb.28, debug-location !267; ep.c:195:13

4672B	bb.28.if.then68:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; ep.c:196:13
4704B	  $edi = MOV32ri 2, debug-location !268; ep.c:196:13
4720B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !268; ep.c:196:13
4736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !268; ep.c:196:13

4752B	bb.29.if.end69:
	; predecessors: %bb.27, %bb.28
	  successors: %bb.30(0x50000000), %bb.31(0x30000000); %bb.30(62.50%), %bb.31(37.50%)

4768B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !269 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:203:13
4784B	  JCC_1 %bb.31, 4, implicit $eflags, debug-location !271; ep.c:203:13
4800B	  JMP_1 %bb.30, debug-location !271; ep.c:203:13

4816B	bb.30.if.then71:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

4832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; ep.c:204:13
4848B	  $edi = MOV32ri 1, debug-location !272; ep.c:204:13
4864B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !272; ep.c:204:13
4880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !272; ep.c:204:13

4896B	bb.31.if.end72:
	; predecessors: %bb.29, %bb.30
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

4912B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !273 :: (store 4 into %ir.i); ep.c:206:16

4928B	bb.32.for.cond73:
	; predecessors: %bb.31, %bb.41
	  successors: %bb.33(0x7c000000), %bb.42(0x04000000); %bb.33(96.88%), %bb.42(3.12%)

4944B	  CMP32mi %stack.19.i, 1, $noreg, 0, $noreg, 65535, implicit-def $eflags, debug-location !278 :: (dereferenceable load 4 from %ir.i); ep.c:206:23
4960B	  JCC_1 %bb.42, 15, implicit $eflags, debug-location !279; ep.c:206:9
4976B	  JMP_1 %bb.33, debug-location !279; ep.c:206:9

4992B	bb.33.for.body76:
	; predecessors: %bb.32
	  successors: %bb.34(0x40000000), %bb.41(0x40000000); %bb.34(50.00%), %bb.41(50.00%)

5008B	  %190:gr64 = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !280 :: (dereferenceable load 4 from %ir.i); ep.c:207:30
5040B	  %190:gr64 = SHL64ri %190:gr64(tied-def 0), 4, implicit-def dead $eflags, debug-location !289; ep.c:208:32
5056B	  %194:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x, $noreg, debug-location !283 :: (load 8 from %ir.arrayidx79); ep.c:207:24
5088B	  %194:fr64 = ADDSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !284; ep.c:207:22
5120B	  %194:fr64 = SUBSDrr %194:fr64(tied-def 0), %0:fr64, debug-location !285; ep.c:207:33
5136B	  MOVSDmr %stack.6.x1, 1, $noreg, 0, $noreg, %194:fr64, debug-location !286 :: (store 8 into %ir.x1); ep.c:207:16
5152B	  %197:fr64 = MOVSDrm_alt %190:gr64, 1, $noreg, @x + 8, $noreg, debug-location !290 :: (load 8 from %ir.arrayidx84); ep.c:208:24
5184B	  %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !291; ep.c:208:22
5216B	  %197:fr64 = SUBSDrr %197:fr64(tied-def 0), %0:fr64, debug-location !292; ep.c:208:37
5232B	  MOVSDmr %stack.7.x2, 1, $noreg, 0, $noreg, %197:fr64, debug-location !293 :: (store 8 into %ir.x2); ep.c:208:16
5264B	  %194:fr64 = MULSDrr %194:fr64(tied-def 0), %194:fr64, debug-location !296; ep.c:209:21
5296B	  %197:fr64 = MULSDrr %197:fr64(tied-def 0), %197:fr64, debug-location !299; ep.c:209:31
5328B	  %197:fr64 = ADDSDrr %197:fr64(tied-def 0), %194:fr64, debug-location !300; ep.c:209:26
5344B	  MOVSDmr %stack.2.t1, 1, $noreg, 0, $noreg, %197:fr64, debug-location !301 :: (store 8 into %ir.t1); ep.c:209:16
5360B	  UCOMISDrr %0:fr64, %197:fr64, implicit-def $eflags, debug-location !304; ep.c:210:20
5376B	  JCC_1 %bb.41, 2, implicit $eflags, debug-location !305; ep.c:210:17
5392B	  JMP_1 %bb.34, debug-location !305; ep.c:210:17

5408B	bb.34.if.then92:
	; predecessors: %bb.33
	  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

5424B	  %201:fr64 = MOVSDrm_alt %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !306 :: (dereferenceable load 8 from %ir.t1); ep.c:211:38
5440B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; ep.c:211:34
5456B	  $xmm0 = COPY %201:fr64, debug-location !308; ep.c:211:34
5472B	  CALL64pcrel32 @log, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !308; ep.c:211:34
5488B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !308; ep.c:211:34
5504B	  %4:fr64 = COPY $xmm0, debug-location !308; ep.c:211:34
5536B	  %4:fr64 = MULSDrr %4:fr64(tied-def 0), %239:fr64, debug-location !309; ep.c:211:32
5568B	  %4:fr64 = DIVSDrm %4:fr64(tied-def 0), %stack.2.t1, 1, $noreg, 0, $noreg, debug-location !311 :: (dereferenceable load 8 from %ir.t1); ep.c:211:42
5584B	  UCOMISDrr %4:fr64, %204:fr64, implicit-def $eflags, debug-location !313; ep.c:211:20
5600B	  JCC_1 %bb.36, 2, implicit $eflags, debug-location !313; ep.c:211:20

5616B	bb.35:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

5632B	  %246:vr128 = SQRTSDr %4:fr64
5664B	  JMP_1 %bb.37

5680B	bb.36.call.sqrt1:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

5696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; ep.c:211:20
5712B	  $xmm0 = COPY %4:fr64, debug-location !313; ep.c:211:20
5728B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !313; ep.c:211:20
5744B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !313; ep.c:211:20
5760B	  %246:vr128 = COPY $xmm0, debug-location !313; ep.c:211:20

5808B	bb.37.if.then92.split:
	; predecessors: %bb.36, %bb.35
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

5840B	  MOVSDmr %stack.3.t2, 1, $noreg, 0, $noreg, %246:vr128, debug-location !313 :: (store 8 into %ir.t2); ep.c:211:20
5856B	  %210:vr128 = MOVSDrm_alt %stack.6.x1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.x1)
5888B	  %210:vr128 = MULSDrr %210:vr128(tied-def 0), %246:vr128, debug-location !316; ep.c:212:26
5904B	  MOVSDmr %stack.4.t3, 1, $noreg, 0, $noreg, %210:vr128, debug-location !317 :: (store 8 into %ir.t3); ep.c:212:20
5936B	  %246:vr128 = MULSDrm %246:vr128(tied-def 0), %stack.7.x2, 1, $noreg, 0, $noreg, debug-location !320 :: (dereferenceable load 8 from %ir.x2); ep.c:213:26
5952B	  MOVSDmr %stack.5.t4, 1, $noreg, 0, $noreg, %246:vr128, debug-location !321 :: (store 8 into %ir.t4); ep.c:213:20
5984B	  %210:vr128 = PANDrr %210:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
6016B	  %246:vr128 = PANDrr %246:vr128(tied-def 0), %209:vr128, debug-location !322; ep.c:214:21
6032B	  UCOMISDrr %210:vr128, %246:vr128, implicit-def $eflags, debug-location !322; ep.c:214:21
6048B	  JCC_1 %bb.39, 6, implicit $eflags, debug-location !322; ep.c:214:21
6064B	  JMP_1 %bb.38, debug-location !322; ep.c:214:21

6080B	bb.38.cond.true:
	; predecessors: %bb.37
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

6096B	  %247:vr128 = MOVSDrm %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t3); ep.c:214:21
6128B	  %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21
6192B	  JMP_1 %bb.40, debug-location !322; ep.c:214:21

6208B	bb.39.cond.false:
	; predecessors: %bb.37
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

6224B	  %247:vr128 = MOVSDrm %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !322 :: (dereferenceable load 8 from %ir.t4); ep.c:214:21
6256B	  %247:vr128 = PANDrr %247:vr128(tied-def 0), %240:vr128, debug-location !322; ep.c:214:21

6320B	bb.40.cond.end:
	; predecessors: %bb.39, %bb.38
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

6352B	  %221:gr32 = CVTTSD2SIrr %247:vr128, debug-location !322; ep.c:214:21
6368B	  MOV32mr %stack.22.l, 1, $noreg, 0, $noreg, %221:gr32, debug-location !323 :: (store 4 into %ir.l); ep.c:214:19
6384B	  %222:gr64_nosp = MOVSX64rr32 %221:gr32, debug-location !324; ep.c:215:26
6400B	  %224:fr64 = MOVSDrm_alt $noreg, 8, %222:gr64_nosp, @q, $noreg :: (load 8 from %ir.arrayidx103)
6432B	  %224:fr64 = ADDSDrr %224:fr64(tied-def 0), %0:fr64, debug-location !326; ep.c:215:29
6448B	  MOVSDmr $noreg, 8, %222:gr64_nosp, @q, $noreg, %224:fr64, debug-location !329 :: (store 8 into %ir.arrayidx106); ep.c:215:22
6464B	  %226:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !330 :: (dereferenceable load 8 from %ir.sx); ep.c:216:22
6496B	  %226:fr64 = ADDSDrm %226:fr64(tied-def 0), %stack.4.t3, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 8 from %ir.t3); ep.c:216:25
6512B	  MOVSDmr %stack.8.sx, 1, $noreg, 0, $noreg, %226:fr64, debug-location !333 :: (store 8 into %ir.sx); ep.c:216:20
6528B	  %228:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !334 :: (dereferenceable load 8 from %ir.sy); ep.c:217:22
6560B	  %228:fr64 = ADDSDrm %228:fr64(tied-def 0), %stack.5.t4, 1, $noreg, 0, $noreg, debug-location !336 :: (dereferenceable load 8 from %ir.t4); ep.c:217:25
6576B	  MOVSDmr %stack.9.sy, 1, $noreg, 0, $noreg, %228:fr64, debug-location !337 :: (store 8 into %ir.sy); ep.c:217:20

6592B	bb.41.if.end109:
	; predecessors: %bb.33, %bb.40
	  successors: %bb.32(0x80000000); %bb.32(100.00%)

6608B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !339 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:206:30
6624B	  JMP_1 %bb.32, debug-location !340; ep.c:206:9

6640B	bb.42.for.end112:
	; predecessors: %bb.32
	  successors: %bb.43(0x50000000), %bb.44(0x30000000); %bb.43(62.50%), %bb.44(37.50%)

6656B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !343 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:221:13
6672B	  JCC_1 %bb.44, 4, implicit $eflags, debug-location !345; ep.c:221:13
6688B	  JMP_1 %bb.43, debug-location !345; ep.c:221:13

6704B	bb.43.if.then114:
	; predecessors: %bb.42
	  successors: %bb.44(0x80000000); %bb.44(100.00%)

6720B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !346; ep.c:222:13
6736B	  $edi = MOV32ri 1, debug-location !346; ep.c:222:13
6752B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !346; ep.c:222:13
6768B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !346; ep.c:222:13

6784B	bb.44.if.end115:
	; predecessors: %bb.42, %bb.43
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

6800B	  INC32m %stack.23.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !347 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); ep.c:172:27
6816B	  JMP_1 %bb.18, debug-location !348; ep.c:172:5

6832B	bb.45.for.end118:
	; predecessors: %bb.18
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

6848B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !351 :: (store 4 into %ir.i); ep.c:225:12

6864B	bb.46.for.cond119:
	; predecessors: %bb.45, %bb.47
	  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

6880B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !356 :: (dereferenceable load 4 from %ir.i); ep.c:225:19
6896B	  JCC_1 %bb.48, 15, implicit $eflags, debug-location !357; ep.c:225:5
6912B	  JMP_1 %bb.47, debug-location !357; ep.c:225:5

6928B	bb.47.for.body122:
	; predecessors: %bb.46
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

6944B	  %158:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !358 :: (dereferenceable load 8 from %ir.gc); ep.c:226:14
6960B	  %253:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !360 :: (dereferenceable load 4 from %ir.i); ep.c:226:21
7008B	  %158:fr64 = ADDSDrm %158:fr64(tied-def 0), $noreg, 8, %253:gr64_nosp, @q, $noreg, debug-location !362 :: (load 8 from %ir.arrayidx124); ep.c:226:17
7024B	  MOVSDmr %stack.13.gc, 1, $noreg, 0, $noreg, %158:fr64, debug-location !363 :: (store 8 into %ir.gc); ep.c:226:12
7056B	  %159:gr32 = LEA64_32r %253:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !364; ep.c:225:26
7072B	  MOV32mr %stack.19.i, 1, $noreg, 0, $noreg, %159:gr32, debug-location !364 :: (store 4 into %ir.i); ep.c:225:26
7088B	  JMP_1 %bb.46, debug-location !365; ep.c:225:5

7104B	bb.48.for.end128:
	; predecessors: %bb.46
	  successors: %bb.49(0x50000000), %bb.53(0x30000000); %bb.49(62.50%), %bb.53(37.50%)

7120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !368; ep.c:231:5
7136B	  %65:gr32 = MOV32r0 implicit-def dead $eflags
7152B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !368; ep.c:231:5
7168B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !368; ep.c:231:5
7184B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !368; ep.c:231:5
7200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:232:10
7216B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !369; ep.c:232:10
7232B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !369; ep.c:232:10
7248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !369; ep.c:232:10
7264B	  %66:fr64 = COPY $xmm0, debug-location !369; ep.c:232:10
7280B	  MOVSDmr %stack.10.tm, 1, $noreg, 0, $noreg, %66:fr64, debug-location !370 :: (store 8 into %ir.tm); ep.c:232:8
7296B	  MOV32mi %stack.24.nit, 1, $noreg, 0, $noreg, 0, debug-location !371 :: (store 4 into %ir.nit); ep.c:234:9
7312B	  MOV32mi %stack.27.verified, 1, $noreg, 0, $noreg, 1, debug-location !372 :: (store 4 into %ir.verified); ep.c:235:14
7328B	  %67:gr64 = MOV64ri 4675776847449726827
7344B	  MOV64mr %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, %67:gr64, debug-location !373 :: (store 8 into %ir.sx_verify_value); ep.c:249:25
7360B	  %68:gr64 = MOV64ri -4550329231111044107
7376B	  MOV64mr %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, %68:gr64, debug-location !379 :: (store 8 into %ir.sy_verify_value); ep.c:250:25
7408B	  TEST8rr %65.sub_8bit:gr32, %65.sub_8bit:gr32, implicit-def $eflags, debug-location !382; ep.c:268:9
7424B	  JCC_1 %bb.53, 5, implicit $eflags, debug-location !382; ep.c:268:9
7440B	  JMP_1 %bb.49, debug-location !382; ep.c:268:9

7456B	bb.49.if.then133:
	; predecessors: %bb.48
	  successors: %bb.51(0x40000000), %bb.50(0x40000000); %bb.51(50.00%), %bb.50(50.00%)

7472B	  %74:vr128 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !383 :: (dereferenceable load 8 from %ir.sx); ep.c:269:24
7488B	  %72:fr64 = MOVSDrm_alt %stack.14.sx_verify_value, 1, $noreg, 0, $noreg, debug-location !385 :: (dereferenceable load 8 from %ir.sx_verify_value); ep.c:269:29
7520B	  %74:vr128 = SUBSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !386; ep.c:269:27
7552B	  %74:vr128 = DIVSDrr %74:vr128(tied-def 0), %72:fr64, debug-location !388; ep.c:269:46
7584B	  %74:vr128 = PANDrr %74:vr128(tied-def 0), %209:vr128, debug-location !389; ep.c:269:18
7600B	  MOVLPDmr %stack.16.sx_err, 1, $noreg, 0, $noreg, %74:vr128, debug-location !390 :: (store 8 into %ir.sx_err); ep.c:269:16
7616B	  %82:vr128 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !391 :: (dereferenceable load 8 from %ir.sy); ep.c:270:24
7632B	  %80:fr64 = MOVSDrm_alt %stack.15.sy_verify_value, 1, $noreg, 0, $noreg, debug-location !392 :: (dereferenceable load 8 from %ir.sy_verify_value); ep.c:270:29
7664B	  %82:vr128 = SUBSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !393; ep.c:270:27
7696B	  %82:vr128 = DIVSDrr %82:vr128(tied-def 0), %80:fr64, debug-location !395; ep.c:270:46
7728B	  %82:vr128 = PANDrr %82:vr128(tied-def 0), %209:vr128, debug-location !396; ep.c:270:18
7744B	  MOVLPDmr %stack.17.sy_err, 1, $noreg, 0, $noreg, %82:vr128, debug-location !397 :: (store 8 into %ir.sy_err); ep.c:270:16
7760B	  %86:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
7776B	  UCOMISDrr %86:fr64, %74:vr128, implicit-def $eflags, debug-location !399; ep.c:271:29
7792B	  JCC_1 %bb.51, 3, implicit $eflags, debug-location !400; ep.c:271:41

7808B	bb.50:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7824B	  %85:gr32 = MOV32r0 implicit-def dead $eflags
7872B	  JMP_1 %bb.52

7888B	bb.51.land.rhs:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7904B	  UCOMISDrm %86:fr64, %stack.17.sy_err, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !402 :: (dereferenceable load 8 from %ir.sy_err); ep.c:271:52
7920B	  undef %85.sub_8bit:gr32 = SETCCr 3, implicit $eflags, debug-location !402; ep.c:271:52

7952B	bb.52.land.end:
	; predecessors: %bb.51, %bb.50
	  successors: %bb.53(0x80000000); %bb.53(100.00%)

7984B	  %88:gr32 = MOVZX32rr8 %85.sub_8bit:gr32, debug-location !400; ep.c:271:41
8000B	  MOV32mr %stack.27.verified, 1, $noreg, 0, $noreg, %88:gr32, debug-location !404 :: (store 4 into %ir.verified); ep.c:271:18

8016B	bb.53.if.end142:
	; predecessors: %bb.48, %bb.52
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

8032B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !406; ep.c:274:12
8048B	  %89:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
8064B	  %90:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
8080B	  $xmm0 = COPY %89:fr64, debug-location !406; ep.c:274:12
8096B	  $xmm1 = COPY %90:fr64, debug-location !406; ep.c:274:12
8112B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !406; ep.c:274:12
8128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !406; ep.c:274:12
8144B	  %93:fr64 = COPY $xmm0, debug-location !406; ep.c:274:12
8176B	  %93:fr64 = DIVSDrm %93:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !408 :: (dereferenceable load 8 from %ir.tm); ep.c:274:28
8208B	  %93:fr64 = DIVSDrm %93:fr64(tied-def 0), $rip, 1, $noreg, %const.6, $noreg, debug-location !409 :: (load 8 from constant-pool); ep.c:274:33
8224B	  MOVSDmr %stack.1.Mops, 1, $noreg, 0, $noreg, %93:fr64, debug-location !410 :: (store 8 into %ir.Mops); ep.c:274:10
8240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !411; ep.c:276:5
8304B	  $rdi = MOV32ri64 @.str.5, debug-location !411; ep.c:276:5
8320B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !411; ep.c:276:5
8336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !411; ep.c:276:5
8352B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !411; ep.c:276:5
8368B	  %98:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !412 :: (dereferenceable load 8 from %ir.tm); ep.c:277:35
8384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:5
8432B	  $rdi = MOV32ri64 @.str.6, debug-location !413; ep.c:277:5
8448B	  $xmm0 = COPY %98:fr64, debug-location !413; ep.c:277:5
8464B	  $al = MOV8ri 1, debug-location !413; ep.c:277:5
8480B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !413; ep.c:277:5
8496B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !413; ep.c:277:5
8512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:278:5
8560B	  $rdi = MOV32ri64 @.str.7, debug-location !414; ep.c:278:5
8576B	  $esi = MOV32ri 30, debug-location !414; ep.c:278:5
8592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !414; ep.c:278:5
8608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !414; ep.c:278:5
8624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !414; ep.c:278:5
8640B	  %105:fr64 = MOVSDrm_alt %stack.13.gc, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.gc); ep.c:279:46
8656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:5
8688B	  $rdi = MOV32ri64 @.str.8, debug-location !416; ep.c:279:5
8704B	  $xmm0 = COPY %105:fr64, debug-location !416; ep.c:279:5
8720B	  $al = MOV8ri 1, debug-location !416; ep.c:279:5
8736B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !416; ep.c:279:5
8752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !416; ep.c:279:5
8768B	  %108:fr64 = MOVSDrm_alt %stack.8.sx, 1, $noreg, 0, $noreg, debug-location !417 :: (dereferenceable load 8 from %ir.sx); ep.c:280:42
8784B	  %109:fr64 = MOVSDrm_alt %stack.9.sy, 1, $noreg, 0, $noreg, debug-location !418 :: (dereferenceable load 8 from %ir.sy); ep.c:280:46
8800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !419; ep.c:280:5
8848B	  $rdi = MOV32ri64 @.str.9, debug-location !419; ep.c:280:5
8864B	  $xmm0 = COPY %108:fr64, debug-location !419; ep.c:280:5
8880B	  $xmm1 = COPY %109:fr64, debug-location !419; ep.c:280:5
8896B	  $al = MOV8ri 2, debug-location !419; ep.c:280:5
8912B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !419; ep.c:280:5
8928B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !419; ep.c:280:5
8944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:281:5
8976B	  $rdi = MOV32ri64 @.str.10, debug-location !420; ep.c:281:5
8992B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !420; ep.c:281:5
9008B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !420; ep.c:281:5
9024B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !420; ep.c:281:5
9040B	  MOV32mi %stack.19.i, 1, $noreg, 0, $noreg, 0, debug-location !421 :: (store 4 into %ir.i); ep.c:282:12

9072B	bb.54.for.cond152:
	; predecessors: %bb.53, %bb.55
	  successors: %bb.55(0x7c000000), %bb.56(0x04000000); %bb.55(96.88%), %bb.56(3.12%)

9088B	  CMP32mi8 %stack.19.i, 1, $noreg, 0, $noreg, 9, implicit-def $eflags, debug-location !426 :: (dereferenceable load 4 from %ir.i); ep.c:282:19
9104B	  JCC_1 %bb.56, 15, implicit $eflags, debug-location !427; ep.c:282:5
9120B	  JMP_1 %bb.55, debug-location !427; ep.c:282:5

9136B	bb.55.for.body155:
	; predecessors: %bb.54
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

9152B	  %149:gr64_nosp = MOVSX64rm32 %stack.19.i, 1, $noreg, 0, $noreg, debug-location !428 :: (dereferenceable load 4 from %ir.i); ep.c:283:32
9184B	  %151:fr64 = MOVSDrm_alt $noreg, 8, %149:gr64_nosp, @q, $noreg, debug-location !431 :: (load 8 from %ir.arrayidx157); ep.c:283:35
9200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !432; ep.c:283:9
9216B	  $rdi = MOV32ri64 @.str.11, debug-location !432; ep.c:283:9
9232B	  $esi = COPY %149.sub_32bit:gr64_nosp, debug-location !432; ep.c:283:9
9248B	  $xmm0 = COPY %151:fr64, debug-location !432; ep.c:283:9
9264B	  $al = MOV8ri 1, debug-location !432; ep.c:283:9
9280B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !432; ep.c:283:9
9296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !432; ep.c:283:9
9312B	  INC32m %stack.19.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !433 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); ep.c:282:26
9328B	  JMP_1 %bb.54, debug-location !434; ep.c:282:5

9344B	bb.56.for.end161:
	; predecessors: %bb.54
	  successors: %bb.57(0x50000000), %bb.60(0x30000000); %bb.57(62.50%), %bb.60(37.50%)

9360B	  %117:gr32 = MOV32rm %stack.24.nit, 1, $noreg, 0, $noreg, debug-location !437 :: (dereferenceable load 4 from %ir.nit); ep.c:286:45
9376B	  %118:fr64 = MOVSDrm_alt %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !438 :: (dereferenceable load 8 from %ir.tm); ep.c:286:50
9392B	  %119:fr64 = MOVSDrm_alt %stack.1.Mops, 1, $noreg, 0, $noreg, debug-location !439 :: (dereferenceable load 8 from %ir.Mops); ep.c:286:54
9408B	  undef %244.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.27.verified, 1, $noreg, 0, $noreg, debug-location !440 :: (dereferenceable load 4 from %ir.verified); ep.c:287:47
9424B	  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; ep.c:286:5
9504B	  $rdi = MOV32ri64 @.str.12, debug-location !441; ep.c:286:5
9520B	  $esi = MOV32ri 66, debug-location !441; ep.c:286:5
9536B	  $edx = MOV32ri 31, debug-location !441; ep.c:286:5
9552B	  $ecx = MOV32ri 0, debug-location !441; ep.c:286:5
9568B	  $r8d = MOV32ri 0, debug-location !441; ep.c:286:5
9584B	  $r9d = COPY %117:gr32, debug-location !441; ep.c:286:5
9600B	  $xmm0 = COPY %118:fr64, debug-location !441; ep.c:286:5
9616B	  $xmm1 = COPY %119:fr64, debug-location !441; ep.c:286:5
9632B	  PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9648B	  PUSH64i32 @.str.21, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9664B	  PUSH64i32 @.str.20, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9680B	  PUSH64i32 @.str.19, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9696B	  PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9712B	  PUSH64i32 @.str.17, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9728B	  PUSH64i32 @.str.16, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9744B	  PUSH64i32 @.str.15, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9760B	  PUSH64i32 @.str.14, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9792B	  PUSH64r %244:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9808B	  PUSH64i32 @.str.13, implicit-def $rsp, implicit $rsp, debug-location !441; ep.c:286:5
9824B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !441; ep.c:286:5
9840B	  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; ep.c:286:5
9856B	  CMP32mi8 %stack.28.timers_enabled, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !442 :: (dereferenceable load 4 from %ir.timers_enabled); ep.c:290:9
9872B	  JCC_1 %bb.60, 4, implicit $eflags, debug-location !444; ep.c:290:9
9888B	  JMP_1 %bb.57, debug-location !444; ep.c:290:9

9904B	bb.57.if.then163:
	; predecessors: %bb.56
	  successors: %bb.58(0x40000000), %bb.59(0x40000000); %bb.58(50.00%), %bb.59(50.00%)

9920B	  %126:fr64 = FsFLD0SD
9936B	  UCOMISDrm %126:fr64, %stack.10.tm, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !448 :: (dereferenceable load 8 from %ir.tm); ep.c:291:16
9952B	  JCC_1 %bb.59, 2, implicit $eflags, debug-location !449; ep.c:291:13
9968B	  JMP_1 %bb.58, debug-location !449; ep.c:291:13

9984B	bb.58.if.then166:
	; predecessors: %bb.57
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

10000B	  %127:gr64 = MOV64ri 4607182418800017408
10016B	  MOV64mr %stack.10.tm, 1, $noreg, 0, $noreg, %127:gr64, debug-location !450 :: (store 8 into %ir.tm); ep.c:292:16

10032B	bb.59.if.end167:
	; predecessors: %bb.57, %bb.58
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

10048B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !452; ep.c:293:14
10080B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !452; ep.c:293:14
10096B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !452; ep.c:293:14
10112B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !452; ep.c:293:14
10128B	  %129:fr64 = COPY $xmm0, debug-location !452; ep.c:293:14
10144B	  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %129:fr64, debug-location !453 :: (store 8 into %ir.tt); ep.c:293:12
10160B	  %145:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
10176B	  %132:fr64 = COPY %129:fr64, debug-location !456; ep.c:294:62
10192B	  %132:fr64 = MULSDrr %132:fr64(tied-def 0), %145:fr64, debug-location !456; ep.c:294:62
10224B	  %132:fr64 = DIVSDrm %132:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !458 :: (dereferenceable load 8 from %ir.tm); ep.c:294:70
10240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !459; ep.c:294:9
10288B	  $rdi = MOV32ri64 @.str.23, debug-location !459; ep.c:294:9
10304B	  $xmm0 = COPY %129:fr64, debug-location !459; ep.c:294:9
10320B	  $xmm1 = COPY %132:fr64, debug-location !459; ep.c:294:9
10336B	  $al = MOV8ri 2, debug-location !459; ep.c:294:9
10352B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !459; ep.c:294:9
10368B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !459; ep.c:294:9
10384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !460; ep.c:295:14
10416B	  $edi = MOV32ri 1, debug-location !460; ep.c:295:14
10432B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !460; ep.c:295:14
10448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !460; ep.c:295:14
10464B	  %137:fr64 = COPY $xmm0, debug-location !460; ep.c:295:14
10480B	  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %137:fr64, debug-location !461 :: (store 8 into %ir.tt); ep.c:295:12
10496B	  %139:fr64 = COPY %137:fr64, debug-location !464; ep.c:296:60
10512B	  %139:fr64 = MULSDrr %139:fr64(tied-def 0), %145:fr64, debug-location !464; ep.c:296:60
10544B	  %139:fr64 = DIVSDrm %139:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !466 :: (dereferenceable load 8 from %ir.tm); ep.c:296:68
10560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !467; ep.c:296:9
10592B	  $rdi = MOV32ri64 @.str.24, debug-location !467; ep.c:296:9
10608B	  $xmm0 = COPY %137:fr64, debug-location !467; ep.c:296:9
10624B	  $xmm1 = COPY %139:fr64, debug-location !467; ep.c:296:9
10640B	  $al = MOV8ri 2, debug-location !467; ep.c:296:9
10656B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !467; ep.c:296:9
10672B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !467; ep.c:296:9
10688B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !468; ep.c:297:14
10720B	  $edi = MOV32ri 2, debug-location !468; ep.c:297:14
10736B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !468; ep.c:297:14
10752B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !468; ep.c:297:14
10768B	  %143:fr64 = COPY $xmm0, debug-location !468; ep.c:297:14
10784B	  MOVSDmr %stack.12.tt, 1, $noreg, 0, $noreg, %143:fr64, debug-location !469 :: (store 8 into %ir.tt); ep.c:297:12
10816B	  %145:fr64 = MULSDrr %145:fr64(tied-def 0), %143:fr64, debug-location !472; ep.c:298:60
10848B	  %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.10.tm, 1, $noreg, 0, $noreg, debug-location !474 :: (dereferenceable load 8 from %ir.tm); ep.c:298:68
10864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !475; ep.c:298:9
10896B	  $rdi = MOV32ri64 @.str.25, debug-location !475; ep.c:298:9
10912B	  $xmm0 = COPY %143:fr64, debug-location !475; ep.c:298:9
10928B	  $xmm1 = COPY %145:fr64, debug-location !475; ep.c:298:9
10944B	  $al = MOV8ri 2, debug-location !475; ep.c:298:9
10960B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !475; ep.c:298:9
10976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !475; ep.c:298:9

10992B	bb.60.if.end180:
	; predecessors: %bb.56, %bb.59

11024B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !477; ep.c:301:5
11040B	  RET 0, killed $eax, debug-location !477; ep.c:301:5

# End machine code for function main.

