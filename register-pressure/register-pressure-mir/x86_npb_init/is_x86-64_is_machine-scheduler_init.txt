Before MISched:
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $rdi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
  liveins: $rdi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
  MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
  CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
  JMP_1 %bb.1, debug-location !114; is.c:264:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %2:gr64 = MOV64ri 4607182418800017408
  MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

bb.2.for.cond:
; predecessors: %bb.1, %bb.3
  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 23, implicit-def $eflags, debug-location !125 :: (dereferenceable load 4 from %ir.i); is.c:270:23
  JCC_1 %bb.4, 15, implicit killed $eflags, debug-location !126; is.c:270:9
  JMP_1 %bb.3, debug-location !126; is.c:270:9

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %48:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  %48:fr64 = MULSDrr %48:fr64(tied-def 0), %51:fr64, debug-location !129; is.c:271:24
  MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %48:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  %50:fr64 = ADDSDrr %50:fr64(tied-def 0), %50:fr64, debug-location !132; is.c:272:23
  MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %50:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
  JMP_1 %bb.2, debug-location !136; is.c:270:9

bb.4.for.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !139 :: (store 4 into %ir.i); is.c:274:16

bb.5.for.cond3:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 46, implicit-def $eflags, debug-location !144 :: (dereferenceable load 4 from %ir.i); is.c:274:23
  JCC_1 %bb.7, 15, implicit killed $eflags, debug-location !145; is.c:274:9
  JMP_1 %bb.6, debug-location !145; is.c:274:9

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %44:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  %44:fr64 = MULSDrr %44:fr64(tied-def 0), %51:fr64, debug-location !148; is.c:275:24
  MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %44:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
  %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %46:fr64, debug-location !151; is.c:276:23
  MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %46:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
  JMP_1 %bb.5, debug-location !155; is.c:274:9

bb.7.for.end10:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  MOV32mi $rip, 1, $noreg, @randlc.KS, $noreg, 1, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12

bb.8.if.end:
; predecessors: %bb.0, %bb.7

  %16:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  %8:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  %9:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
  %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %9:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
  %10:gr32 = CVTTSD2SIrr %9:fr64, debug-location !165; is.c:284:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %10:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
  %13:fr64 = CVTSI2SDrr %10:gr32, debug-location !167; is.c:285:10
  MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %13:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
  %24:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
  %13:fr64 = MULSDrm %13:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
  %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
  MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %24:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
  %15:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
  %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !181; is.c:293:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %17:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
  %21:fr64 = CVTSI2SDrr %17:gr32, debug-location !183; is.c:294:10
  MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %21:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
  %19:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  %32:fr64 = MOVSDrm_alt %19:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
  %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
  %21:fr64 = MULSDrm %21:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
  %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
  MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
  %25:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
  %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
  %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %25:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
  %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
  %27:gr32 = CVTTSD2SIrr %26:fr64, debug-location !200; is.c:298:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %27:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
  %29:fr64 = CVTSI2SDrr %27:gr32, debug-location !204; is.c:299:10
  MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %29:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
  %29:fr64 = MULSDrm %29:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
  %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
  MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %25:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
  %25:fr64 = MULSDrm %25:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
  %32:fr64 = MULSDrm %32:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
  %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
  MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %32:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
  %34:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
  %35:gr32 = CVTTSD2SIrr %34:fr64, debug-location !220; is.c:302:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %35:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
  %37:fr64 = CVTSI2SDrr %35:gr32, debug-location !224; is.c:303:10
  MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %37:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
  %37:fr64 = MULSDrm %37:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
  %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
  %39:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
  %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  %41:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
  $xmm0 = COPY %42:fr64, debug-location !237; is.c:305:5
  RET 0, killed $xmm0, debug-location !237; is.c:305:5

# End machine code for function randlc.

********** MI Scheduling **********
randlc:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr64 = COPY $rdi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr64 = COPY $rdi
SU(2):   MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
SU(3):   MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
SU(4):   CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12

********** MI Scheduling **********
randlc:%bb.1 if.then
  From: %2:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %2:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%2
    SU(3): Data Latency=1 Reg=%2
    SU(2): Data Latency=1 Reg=%2
    SU(1): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(1):   MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(2):   MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(3):   MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(4):   MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(5):   MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  Ready @0c
  BotQ.A TopLatency SU(4) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  Ready @1c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %2:gr64 = MOV64ri 4607182418800017408
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %2:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
SU(2):   MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
SU(3):   MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
SU(4):   MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
SU(5):   MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
SU(6):   %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
randlc:%bb.3 for.body
  From: %48:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
    To: JMP_1 %bb.2, debug-location !136; is.c:270:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %48:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%48
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %48:fr64 = MULSDrr %48:fr64(tied-def 0), %51:fr64, debug-location !129; is.c:271:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%48
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %48:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%48
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%50
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %50:fr64 = ADDSDrr %50:fr64(tied-def 0), %50:fr64, debug-location !132; is.c:272:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%50
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%50
  Single Issue       : false;
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %50:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%50
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.2, debug-location !136; is.c:270:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %50:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %50:fr64 = ADDSDrr %50:fr64(tied-def 0), %50:fr64, debug-location !132; is.c:272:23
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %48:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %48:fr64 = MULSDrr %48:fr64(tied-def 0), %51:fr64, debug-location !129; is.c:271:24
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %48:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %48:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
SU(1):   %48:fr64 = MULSDrr %48:fr64(tied-def 0), %51:fr64, debug-location !129; is.c:271:24
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %48:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
SU(3):   %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
SU(4):   %50:fr64 = ADDSDrr %50:fr64(tied-def 0), %50:fr64, debug-location !132; is.c:272:23
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %50:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31

********** MI Scheduling **********
randlc:%bb.6 for.body5
  From: %44:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
    To: JMP_1 %bb.5, debug-location !155; is.c:274:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %44:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%44
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %44:fr64 = MULSDrr %44:fr64(tied-def 0), %51:fr64, debug-location !148; is.c:275:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%44
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%44
  Single Issue       : false;
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %44:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%44
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%46
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %46:fr64, debug-location !151; is.c:276:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%46
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%46
  Single Issue       : false;
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %46:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%46
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5, debug-location !155; is.c:274:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %46:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %46:fr64, debug-location !151; is.c:276:23
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %44:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %44:fr64 = MULSDrr %44:fr64(tied-def 0), %51:fr64, debug-location !148; is.c:275:24
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %44:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %44:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
SU(1):   %44:fr64 = MULSDrr %44:fr64(tied-def 0), %51:fr64, debug-location !148; is.c:275:24
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %44:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
SU(3):   %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
SU(4):   %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %46:fr64, debug-location !151; is.c:276:23
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %46:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31

********** MI Scheduling **********
randlc:%bb.8 if.end
  From: %16:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
    To: RET 0, killed $xmm0, debug-location !237; is.c:305:5
 RegionInstrs: 57
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %16:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 58
  Successors:
    SU(14): Data Latency=4 Reg=%16
    SU(3): Data Latency=4 Reg=%16
    SU(14): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %8:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 62
  Successors:
    SU(9): Data Latency=4 Reg=%8
    SU(2): Data Latency=4 Reg=%8
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %9:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
  # preds left       : 1
  # succs left       : 18
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 58
  Predecessors:
    SU(1): Data Latency=4 Reg=%8
  Successors:
    SU(3): Data Latency=4 Reg=%9
    SU(3): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 54
  Predecessors:
    SU(2): Data Latency=4 Reg=%9
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%16
  Successors:
    SU(5): Data Latency=1 Reg=%9
    SU(4): Data Latency=1 Reg=%9
    SU(14): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %9:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 51
  Predecessors:
    SU(3): Data Latency=1 Reg=%9
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   %10:gr32 = CVTTSD2SIrr %9:fr64, debug-location !165; is.c:284:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 53
  Predecessors:
    SU(3): Data Latency=1 Reg=%9
  Successors:
    SU(7): Data Latency=1 Reg=%10
    SU(6): Data Latency=1 Reg=%10
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(6):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %10:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 51
  Predecessors:
    SU(5): Data Latency=1 Reg=%10
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %13:fr64 = CVTSI2SDrr %10:gr32, debug-location !167; is.c:285:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 52
  Predecessors:
    SU(5): Data Latency=1 Reg=%10
  Successors:
    SU(10): Data Latency=1 Reg=%13
    SU(8): Data Latency=1 Reg=%13
    SU(10): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(8):   MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %13:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 51
  Predecessors:
    SU(7): Data Latency=1 Reg=%13
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %24:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
  # preds left       : 4
  # succs left       : 15
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 50
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%8
  Successors:
    SU(11): Data Latency=4 Reg=%24
    SU(11): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(10):   %13:fr64 = MULSDrm %13:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 50
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Data Latency=1 Reg=%13
    SU(7): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%13
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 46
  Predecessors:
    SU(9): Data Latency=4 Reg=%24
    SU(10): Data Latency=4 Reg=%13
    SU(9): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%24
    SU(12): Data Latency=1 Reg=%24
    SU(22): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %24:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 45
  Predecessors:
    SU(11): Data Latency=1 Reg=%24
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(22): Anti Latency=0
    SU(40): Ord  Latency=1 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(13):   %15:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 48
  Successors:
    SU(14): Data Latency=4 Reg=%15
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
  # preds left       : 8
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 44
  Predecessors:
    SU(13): Data Latency=4 Reg=%15
    SU(12): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%16
    SU(0): Out  Latency=0
  Successors:
    SU(16): Data Latency=4 Reg=%16
    SU(15): Data Latency=4 Reg=%16
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 38
  Predecessors:
    SU(14): Data Latency=4 Reg=%16
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(29): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(16):   %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !181; is.c:293:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 40
  Predecessors:
    SU(14): Data Latency=4 Reg=%16
  Successors:
    SU(18): Data Latency=1 Reg=%17
    SU(17): Data Latency=1 Reg=%17
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(17):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %17:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 38
  Predecessors:
    SU(16): Data Latency=1 Reg=%17
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %21:fr64 = CVTSI2SDrr %17:gr32, debug-location !183; is.c:294:10
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 39
  Predecessors:
    SU(16): Data Latency=1 Reg=%17
  Successors:
    SU(23): Data Latency=1 Reg=%21
    SU(22): Data Latency=1 Reg=%21
    SU(19): Data Latency=1 Reg=%21
    SU(23): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(19):   MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %21:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 38
  Predecessors:
    SU(18): Data Latency=1 Reg=%21
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(23): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(20):   %19:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 41
  Successors:
    SU(21): Data Latency=4 Reg=%19
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   %32:fr64 = MOVSDrm_alt %19:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
  # preds left       : 8
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 37
  Predecessors:
    SU(20): Data Latency=4 Reg=%19
    SU(19): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%32
    SU(24): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(22):   %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 37
  Predecessors:
    SU(18): Data Latency=1 Reg=%21
    SU(12): Anti Latency=0
    SU(11): Data Latency=1 Reg=%24
    SU(11): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%24
    SU(23): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(23):   %21:fr64 = MULSDrm %21:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 37
  Predecessors:
    SU(22): Anti Latency=0
    SU(19): Anti Latency=0
    SU(18): Data Latency=1 Reg=%21
    SU(18): Out  Latency=0
  Successors:
    SU(24): Data Latency=4 Reg=%21
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 33
  Predecessors:
    SU(21): Data Latency=4 Reg=%32
    SU(23): Data Latency=4 Reg=%21
    SU(21): Out  Latency=0
  Successors:
    SU(40): Data Latency=1 Reg=%32
    SU(27): Data Latency=1 Reg=%32
    SU(25): Data Latency=1 Reg=%32
    SU(40): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(25):   MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 22
  Predecessors:
    SU(24): Data Latency=1 Reg=%32
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(40): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(26):   %25:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 36
  Predecessors:
    SU(8): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%25
    SU(27): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(27):   %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 32
  Predecessors:
    SU(24): Data Latency=1 Reg=%32
    SU(26): Out  Latency=0
    SU(26): Data Latency=4 Reg=%25
  Successors:
    SU(28): Data Latency=1 Reg=%25
    SU(28): Out  Latency=0
    SU(40): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(28):   %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 31
  Predecessors:
    SU(27): Data Latency=1 Reg=%25
    SU(27): Out  Latency=0
    SU(22): Data Latency=1 Reg=%24
  Successors:
    SU(37): Data Latency=1 Reg=%25
    SU(31): Data Latency=1 Reg=%25
    SU(29): Data Latency=1 Reg=%25
    SU(37): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(29):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %25:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 23
  Predecessors:
    SU(28): Data Latency=1 Reg=%25
    SU(21): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(37): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(30):   %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(31): Data Latency=4 Reg=%26
    SU(31): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(31):   %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 30
  Predecessors:
    SU(28): Data Latency=1 Reg=%25
    SU(30): Out  Latency=0
    SU(30): Data Latency=4 Reg=%26
  Successors:
    SU(32): Data Latency=1 Reg=%26
    SU(37): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(32):   %27:gr32 = CVTTSD2SIrr %26:fr64, debug-location !200; is.c:298:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 29
  Predecessors:
    SU(31): Data Latency=1 Reg=%26
  Successors:
    SU(34): Data Latency=1 Reg=%27
    SU(33): Data Latency=1 Reg=%27
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(33):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %27:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 9
  Predecessors:
    SU(32): Data Latency=1 Reg=%27
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(46): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %29:fr64 = CVTSI2SDrr %27:gr32, debug-location !204; is.c:299:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 28
  Predecessors:
    SU(32): Data Latency=1 Reg=%27
  Successors:
    SU(36): Data Latency=1 Reg=%29
    SU(35): Data Latency=1 Reg=%29
    SU(36): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(35):   MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %29:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 27
  Predecessors:
    SU(34): Data Latency=1 Reg=%29
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(36): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(36):   %29:fr64 = MULSDrm %29:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 27
  Predecessors:
    SU(35): Anti Latency=0
    SU(34): Data Latency=1 Reg=%29
    SU(34): Out  Latency=0
  Successors:
    SU(37): Data Latency=4 Reg=%29
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 23
  Predecessors:
    SU(36): Data Latency=4 Reg=%29
    SU(31): Anti Latency=0
    SU(29): Anti Latency=0
    SU(28): Data Latency=1 Reg=%25
    SU(28): Out  Latency=0
  Successors:
    SU(39): Data Latency=1 Reg=%25
    SU(38): Data Latency=1 Reg=%25
    SU(39): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(38):   MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %25:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 22
  Predecessors:
    SU(37): Data Latency=1 Reg=%25
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(39): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(39):   %25:fr64 = MULSDrm %25:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 22
  Predecessors:
    SU(38): Anti Latency=0
    SU(37): Data Latency=1 Reg=%25
    SU(37): Out  Latency=0
  Successors:
    SU(41): Data Latency=4 Reg=%25
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(40):   %32:fr64 = MULSDrm %32:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 22
  Predecessors:
    SU(27): Anti Latency=0
    SU(25): Anti Latency=0
    SU(24): Data Latency=1 Reg=%32
    SU(24): Out  Latency=0
    SU(12): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%32
    SU(41): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(41):   %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 18
  Predecessors:
    SU(39): Data Latency=4 Reg=%25
    SU(40): Out  Latency=0
    SU(40): Data Latency=4 Reg=%32
  Successors:
    SU(50): Data Latency=1 Reg=%32
    SU(44): Data Latency=1 Reg=%32
    SU(42): Data Latency=1 Reg=%32
    SU(50): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(42):   MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %32:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 10
  Predecessors:
    SU(41): Data Latency=1 Reg=%32
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(50): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(43):   %34:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(44): Data Latency=4 Reg=%34
    SU(44): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(44):   %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 17
  Predecessors:
    SU(41): Data Latency=1 Reg=%32
    SU(43): Out  Latency=0
    SU(43): Data Latency=4 Reg=%34
  Successors:
    SU(45): Data Latency=1 Reg=%34
    SU(50): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(45):   %35:gr32 = CVTTSD2SIrr %34:fr64, debug-location !220; is.c:302:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 46
  Height             : 16
  Predecessors:
    SU(44): Data Latency=1 Reg=%34
  Successors:
    SU(47): Data Latency=1 Reg=%35
    SU(46): Data Latency=1 Reg=%35
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(46):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %35:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 9
  Predecessors:
    SU(45): Data Latency=1 Reg=%35
    SU(33): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(47):   %37:fr64 = CVTSI2SDrr %35:gr32, debug-location !224; is.c:303:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 15
  Predecessors:
    SU(45): Data Latency=1 Reg=%35
  Successors:
    SU(49): Data Latency=1 Reg=%37
    SU(48): Data Latency=1 Reg=%37
    SU(49): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(48):   MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %37:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 48
  Height             : 14
  Predecessors:
    SU(47): Data Latency=1 Reg=%37
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(49): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(49):   %37:fr64 = MULSDrm %37:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 14
  Predecessors:
    SU(48): Anti Latency=0
    SU(47): Data Latency=1 Reg=%37
    SU(47): Out  Latency=0
  Successors:
    SU(50): Data Latency=4 Reg=%37
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(50):   %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 52
  Height             : 10
  Predecessors:
    SU(49): Data Latency=4 Reg=%37
    SU(44): Anti Latency=0
    SU(42): Anti Latency=0
    SU(41): Data Latency=1 Reg=%32
    SU(41): Out  Latency=0
  Successors:
    SU(52): Data Latency=1 Reg=%32
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(51):   %39:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(52): Data Latency=4 Reg=%39
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(52):   MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
  # preds left       : 35
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 53
  Height             : 9
  Predecessors:
    SU(50): Data Latency=1 Reg=%32
    SU(51): Ord  Latency=0 Memory
    SU(51): Data Latency=4 Reg=%39
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=1 Memory
    SU(54): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(53):   %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 54
  Height             : 8
  Predecessors:
    SU(52): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%42
    SU(55): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(54):   %41:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 54
  Height             : 8
  Predecessors:
    SU(52): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%41
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(55):   %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
  # preds left       : 19
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 58
  Height             : 4
  Predecessors:
    SU(54): Data Latency=4 Reg=%41
    SU(53): Data Latency=4 Reg=%42
    SU(53): Out  Latency=0
    SU(52): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(56): Data Latency=4 Reg=%42
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(56):   $xmm0 = COPY %42:fr64, debug-location !237; is.c:305:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 62
  Height             : 0
  Predecessors:
    SU(55): Data Latency=4 Reg=%42
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   RET 0, killed $xmm0, debug-location !237; is.c:305:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 62
  Height             : 0
  Predecessors:
    SU(56): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 62
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 56 
Scheduling SU(56) $xmm0 = COPY %42:fr64, debug-location !237; is.c:305:5
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %42
  UpdateRegP: SU(56) $xmm0 = COPY %42:fr64, debug-location !237; is.c:305:5
              to FR32 -1    FR32X -1
  Ready @0c
  BotQ.A TopLatency SU(56) 62c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 55 
Scheduling SU(55) %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %42
  UpdateRegP: SU(55) %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %41
  UpdateRegP: SU(55) %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(55) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 54 53 
  Cand SU(54) ORDER                              
Pick Bot ORDER     
Scheduling SU(54) %41:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
Bottom Pressure:
FR32=1
FR32X=1
  Ready @8c
  BotQ.A BotLatency SU(54) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 53 
Scheduling SU(53) %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
Bottom Pressure:

  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 52 
Scheduling SU(52) MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %39
  UpdateRegP: SU(52) MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
              to FR32 1    FR32X 1
  LiveReg: %32
  UpdateRegP: SU(52) MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
              to 
  Ready @9c
  BotQ.A BotLatency SU(52) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 51 46 
  Cand SU(50) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) %39:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
Bottom Pressure:
FR32=1
FR32X=1
  Ready @13c
  BotQ.A BotLatency SU(51) 13c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 46 
  Cand SU(50) ORDER                              
Pick Bot ORDER     
Scheduling SU(50) %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %32
  UpdateRegP: SU(42) MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %32:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
              to 
  UpdateRegP: SU(44) %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
              to 
  UpdateRegP: SU(50) %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
              to 
  LiveReg: %37
  UpdateRegP: SU(50) %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
              to FR32 -1    FR32X -1
  Ready @10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 49 42 
  Cand SU(46) ORDER                              
  Cand SU(49) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) %37:fr64 = MULSDrm %37:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %37
  UpdateRegP: SU(48) MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %37:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
              to 
  UpdateRegP: SU(49) %37:fr64 = MULSDrm %37:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
              to FR32 -1    FR32X -1
  Ready @14c
  BotQ.A BotLatency SU(49) 14c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 42 48 
  Cand SU(46) ORDER                              
  Cand SU(48) ORDER                              
Pick Bot ORDER     
Scheduling SU(48) MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %37:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @14c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 42 47 
  Cand SU(46) ORDER                              
  Cand SU(47) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) %37:fr64 = CVTSI2SDrr %35:gr32, debug-location !224; is.c:303:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %35
  UpdateRegP: SU(46) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %35:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
              to 
  UpdateRegP: SU(47) %37:fr64 = CVTSI2SDrr %35:gr32, debug-location !224; is.c:303:10
              to FR32 -1    FR32X -1
  Ready @15c
  BotQ.A BotLatency SU(47) 15c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 42 
  Cand SU(46) ORDER                              
Pick Bot ORDER     
Scheduling SU(46) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %35:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 45 33 
  Cand SU(42) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) %35:gr32 = CVTTSD2SIrr %34:fr64, debug-location !220; is.c:302:9
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %34
  UpdateRegP: SU(45) %35:gr32 = CVTTSD2SIrr %34:fr64, debug-location !220; is.c:302:9
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(45) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 33 44 
  Cand SU(42) ORDER                              
  Cand SU(44) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %34
  UpdateRegP: SU(44) %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
              to FR32 -1    FR32X -1
  Ready @17c
  BotQ.A BotLatency SU(44) 17c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 33 43 
  Cand SU(42) ORDER                              
  Cand SU(43) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %34:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @21c
  BotQ.A BotLatency SU(43) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 33 
  Cand SU(42) ORDER                              
Pick Bot ORDER     
Scheduling SU(42) MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %32:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
Bottom Pressure:
FR32=1
FR32X=1
  Ready @10c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 41 
  Cand SU(33) ORDER                              
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %32
  UpdateRegP: SU(41) %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
              to 
  LiveReg: %25
  UpdateRegP: SU(41) %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
              to FR32 -1    FR32X -1
  Ready @18c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 39 40 
  Cand SU(33) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %32:fr64 = MULSDrm %32:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %32
  UpdateRegP: SU(25) MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
              to 
  UpdateRegP: SU(27) %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
              to 
  UpdateRegP: SU(40) %32:fr64 = MULSDrm %32:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
              to FR32 -1    FR32X -1
  Ready @22c
  BotQ.A BotLatency SU(40) 22c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 39 25 
  Cand SU(33) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %25:fr64 = MULSDrm %25:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %25
  UpdateRegP: SU(38) MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %25:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
              to 
  UpdateRegP: SU(39) %25:fr64 = MULSDrm %25:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
              to FR32 -1    FR32X -1
  Ready @22c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 38 
  Cand SU(33) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %25:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
Bottom Pressure:
FR32=2
FR32X=2
  Ready @22c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 37 
  Cand SU(33) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %25
  UpdateRegP: SU(29) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %25:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
              to 
  UpdateRegP: SU(31) %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
              to 
  UpdateRegP: SU(37) %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
              to 
  LiveReg: %29
  UpdateRegP: SU(37) %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
              to FR32 -1    FR32X -1
  Ready @23c
  BotQ.A BotLatency SU(37) 23c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 36 29 
  Cand SU(33) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %29:fr64 = MULSDrm %29:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %29
  UpdateRegP: SU(35) MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %29:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
              to 
  UpdateRegP: SU(36) %29:fr64 = MULSDrm %29:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
              to FR32 -1    FR32X -1
  Ready @27c
  BotQ.A BotLatency SU(36) 27c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 29 35 
  Cand SU(33) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %29:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
Bottom Pressure:
FR32=3
FR32X=3
  Ready @27c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 29 34 
  Cand SU(33) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %29:fr64 = CVTSI2SDrr %27:gr32, debug-location !204; is.c:299:10
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %27
  UpdateRegP: SU(33) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %27:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
              to 
  UpdateRegP: SU(34) %29:fr64 = CVTSI2SDrr %27:gr32, debug-location !204; is.c:299:10
              to FR32 -1    FR32X -1
  Ready @28c
  BotQ.A BotLatency SU(34) 28c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 29 
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %27:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @9c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 32 
  Cand SU(29) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %27:gr32 = CVTTSD2SIrr %26:fr64, debug-location !200; is.c:298:9
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %26
  UpdateRegP: SU(32) %27:gr32 = CVTTSD2SIrr %26:fr64, debug-location !200; is.c:298:9
              to GR16 -2
  Ready @29c
  BotQ.A BotLatency SU(32) 29c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 31 
  Cand SU(29) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %26
  UpdateRegP: SU(31) %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
              to FR32 -1    FR32X -1
  Ready @30c
  BotQ.A BotLatency SU(31) 30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 30 
  Cand SU(29) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @34c
  BotQ.A BotLatency SU(30) 34c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %25:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @23c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 28 
  Cand SU(25) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %25
  UpdateRegP: SU(28) %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
              to 
  LiveReg: %24
  UpdateRegP: SU(28) %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
              to FR32 -1    FR32X -1
  Ready @31c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 27 
  Cand SU(25) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %25
  UpdateRegP: SU(27) %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
              to FR32 -1    FR32X -1
  Ready @32c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %25:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @36c
  BotQ.A BotLatency SU(26) 36c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @22c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %32
  UpdateRegP: SU(24) %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
              to 
  LiveReg: %21
  UpdateRegP: SU(24) %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
              to FR32 -1    FR32X -1
  Ready @33c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 21 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %21:fr64 = MULSDrm %21:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %21
  UpdateRegP: SU(19) MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %21:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
              to 
  UpdateRegP: SU(22) %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
              to 
  UpdateRegP: SU(23) %21:fr64 = MULSDrm %21:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
              to FR32 -1    FR32X -1
  Ready @37c
  BotQ.A BotLatency SU(23) 37c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 22 
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %24
  UpdateRegP: SU(12) MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %24:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
              to 
  UpdateRegP: SU(22) %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
              to FR32 -1    FR32X -1
  Ready @37c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) %32:fr64 = MOVSDrm_alt %19:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %19
  UpdateRegP: SU(21) %32:fr64 = MOVSDrm_alt %19:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
              to FR32 -1    FR32X -1
  Ready @37c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 17 15 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %19:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
Bottom Pressure:
FR32=2
FR32X=2
  Ready @41c
  BotQ.A BotLatency SU(20) 41c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 19 17 
  Cand SU(15) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %21:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @38c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 17 18 
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %21:fr64 = CVTSI2SDrr %17:gr32, debug-location !183; is.c:294:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %17
  UpdateRegP: SU(17) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %17:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
              to 
  UpdateRegP: SU(18) %21:fr64 = CVTSI2SDrr %17:gr32, debug-location !183; is.c:294:10
              to FR32 -1    FR32X -1
  Ready @39c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 17 
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %17:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @38c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 16 
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !181; is.c:293:9
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %16
  UpdateRegP: SU(15) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
              to 
  UpdateRegP: SU(16) %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !181; is.c:293:9
              to GR16 -2
  Ready @40c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @38c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %16
  UpdateRegP: SU(3) %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
              to 
  UpdateRegP: SU(14) %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %15
  UpdateRegP: SU(14) %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
              to FR32 -1    FR32X -1
  Ready @44c
  BotQ.A BotLatency SU(14) 44c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %15:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
Bottom Pressure:
FR32=2
FR32X=2
  Ready @48c
  BotQ.A BotLatency SU(13) 48c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %24:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @45c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %24
  UpdateRegP: SU(11) %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
              to 
  LiveReg: %13
  UpdateRegP: SU(11) %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
              to FR32 -1    FR32X -1
  Ready @46c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %13:fr64 = MULSDrm %13:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %13
  UpdateRegP: SU(8) MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %13:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
              to 
  UpdateRegP: SU(10) %13:fr64 = MULSDrm %13:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
              to FR32 -1    FR32X -1
  Ready @50c
  BotQ.A BotLatency SU(10) 50c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %24:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %8
  UpdateRegP: SU(2) %9:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %24:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
              to FR32 -1    FR32X -1
  Ready @50c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %13:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @51c
  BotQ.A BotLatency SU(8) 51c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 7 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %13:fr64 = CVTSI2SDrr %10:gr32, debug-location !167; is.c:285:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %10
  UpdateRegP: SU(6) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %10:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
              to 
  UpdateRegP: SU(7) %13:fr64 = CVTSI2SDrr %10:gr32, debug-location !167; is.c:285:10
              to FR32 -1    FR32X -1
  Ready @52c
  BotQ.A BotLatency SU(7) 52c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %10:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @51c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %10:gr32 = CVTTSD2SIrr %9:fr64, debug-location !165; is.c:284:9
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %9
  UpdateRegP: SU(4) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %9:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
              to 
  UpdateRegP: SU(5) %10:gr32 = CVTTSD2SIrr %9:fr64, debug-location !165; is.c:284:9
              to GR16 -2
  Ready @53c
  BotQ.A BotLatency SU(5) 53c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 53c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %9:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @51c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 53c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %9
  UpdateRegP: SU(3) %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
              to FR32 -1    FR32X -1
  Ready @54c
  BotQ.A BotLatency SU(3) 54c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 54c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %9:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @58c
  BotQ.A BotLatency SU(2) 58c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 58c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
Bottom Pressure:
FR32=1
FR32X=1
  Ready @62c
  BotQ.A BotLatency SU(1) 62c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 62c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
Bottom Pressure:

  Ready @58c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 62c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %16:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
SU(1):   %8:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
SU(2):   %9:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
SU(3):   %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
SU(4):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %9:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
SU(5):   %10:gr32 = CVTTSD2SIrr %9:fr64, debug-location !165; is.c:284:9
SU(6):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %10:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
SU(7):   %13:fr64 = CVTSI2SDrr %10:gr32, debug-location !167; is.c:285:10
SU(8):   MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %13:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
SU(9):   %24:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
SU(10):   %13:fr64 = MULSDrm %13:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
SU(11):   %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
SU(12):   MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %24:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
SU(13):   %15:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
SU(14):   %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
SU(15):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
SU(16):   %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !181; is.c:293:9
SU(17):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %17:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
SU(18):   %21:fr64 = CVTSI2SDrr %17:gr32, debug-location !183; is.c:294:10
SU(19):   MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %21:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
SU(20):   %19:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
SU(21):   %32:fr64 = MOVSDrm_alt %19:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
SU(22):   %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
SU(23):   %21:fr64 = MULSDrm %21:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
SU(24):   %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
SU(25):   MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
SU(26):   %25:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
SU(27):   %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
SU(28):   %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
SU(29):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %25:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
SU(30):   %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
SU(31):   %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
SU(32):   %27:gr32 = CVTTSD2SIrr %26:fr64, debug-location !200; is.c:298:9
SU(33):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %27:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
SU(34):   %29:fr64 = CVTSI2SDrr %27:gr32, debug-location !204; is.c:299:10
SU(35):   MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %29:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
SU(36):   %29:fr64 = MULSDrm %29:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
SU(37):   %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
SU(38):   MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %25:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
SU(39):   %25:fr64 = MULSDrm %25:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
SU(40):   %32:fr64 = MULSDrm %32:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
SU(41):   %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
SU(42):   MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %32:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
SU(43):   %34:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
SU(44):   %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
SU(45):   %35:gr32 = CVTTSD2SIrr %34:fr64, debug-location !220; is.c:302:9
SU(46):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %35:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
SU(47):   %37:fr64 = CVTSI2SDrr %35:gr32, debug-location !224; is.c:303:10
SU(48):   MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %37:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
SU(49):   %37:fr64 = MULSDrm %37:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
SU(50):   %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
SU(51):   %39:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
SU(52):   MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
SU(53):   %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
SU(54):   %41:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
SU(55):   %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
SU(56):   $xmm0 = COPY %42:fr64, debug-location !237; is.c:305:5

********** INTERVALS **********
DIL [0B,32r:0)  0@0B-phi
DIH [0B,32r:0)  0@0B-phi
HDI [0B,32r:0)  0@0B-phi
SIL [0B,16r:0)  0@0B-phi
SIH [0B,16r:0)  0@0B-phi
HSI [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%2 [144r,208r:0)  0@144r weight:0.000000e+00
%8 [832r,976r:0)  0@832r weight:0.000000e+00
%9 [848r,880r:0)[880r,912r:1)  0@848r 1@880r weight:0.000000e+00
%10 [912r,944r:0)  0@912r weight:0.000000e+00
%13 [944r,1008r:0)[1008r,1040r:1)  0@944r 1@1008r weight:0.000000e+00
%15 [1072r,1104r:0)  0@1072r weight:0.000000e+00
%16 [816r,1104r:0)[1104r,1136r:1)  0@816r 1@1104r weight:0.000000e+00
%17 [1136r,1168r:0)  0@1136r weight:0.000000e+00
%19 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%21 [1168r,1280r:0)[1280r,1312r:1)  0@1168r 1@1280r weight:0.000000e+00
%24 [976r,1040r:2)[1040r,1248r:0)[1248r,1408r:1)  0@1040r 1@1248r 2@976r weight:0.000000e+00
%25 [1344r,1376r:2)[1376r,1408r:0)[1408r,1600r:1)[1600r,1648r:3)[1648r,1712r:4)  0@1376r 1@1408r 2@1344r 3@1600r 4@1648r weight:0.000000e+00
%26 [1440r,1472r:0)[1472r,1488r:1)  0@1440r 1@1472r weight:0.000000e+00
%27 [1488r,1520r:0)  0@1488r weight:0.000000e+00
%29 [1520r,1568r:0)[1568r,1600r:1)  0@1520r 1@1568r weight:0.000000e+00
%32 [1216r,1312r:2)[1312r,1680r:0)[1680r,1712r:1)[1712r,1904r:3)[1904r,1936r:4)  0@1312r 1@1680r 2@1216r 3@1712r 4@1904r weight:0.000000e+00
%34 [1744r,1776r:0)[1776r,1792r:1)  0@1744r 1@1776r weight:0.000000e+00
%35 [1792r,1824r:0)  0@1792r weight:0.000000e+00
%37 [1824r,1872r:0)[1872r,1904r:1)  0@1824r 1@1872r weight:0.000000e+00
%39 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%41 [1968r,2000r:0)  0@1968r weight:0.000000e+00
%42 [1952r,2000r:0)[2000r,2016r:1)  0@1952r 1@2000r weight:0.000000e+00
%44 [608r,640r:0)[640r,656r:1)  0@608r 1@640r weight:0.000000e+00
%46 [672r,704r:0)[704r,720r:1)  0@672r 1@704r weight:0.000000e+00
%48 [336r,368r:0)[368r,384r:1)  0@336r 1@368r weight:0.000000e+00
%50 [400r,432r:0)[432r,448r:1)  0@400r 1@432r weight:0.000000e+00
%51 [240r,768B:0)  0@240r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $rdi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
	  liveins: $rdi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr64 = COPY $rdi
48B	  MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
64B	  MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
80B	  CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
96B	  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
112B	  JMP_1 %bb.1, debug-location !114; is.c:264:9

128B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  %2:gr64 = MOV64ri 4607182418800017408
160B	  MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
176B	  MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
192B	  MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
208B	  MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
224B	  MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
240B	  %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

256B	bb.2.for.cond:
	; predecessors: %bb.1, %bb.3
	  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

272B	  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 23, implicit-def $eflags, debug-location !125 :: (dereferenceable load 4 from %ir.i); is.c:270:23
288B	  JCC_1 %bb.4, 15, implicit killed $eflags, debug-location !126; is.c:270:9
304B	  JMP_1 %bb.3, debug-location !126; is.c:270:9

320B	bb.3.for.body:
	; predecessors: %bb.2
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

336B	  %48:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
368B	  %48:fr64 = MULSDrr %48:fr64(tied-def 0), %51:fr64, debug-location !129; is.c:271:24
384B	  MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %48:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
400B	  %50:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
432B	  %50:fr64 = ADDSDrr %50:fr64(tied-def 0), %50:fr64, debug-location !132; is.c:272:23
448B	  MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %50:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
464B	  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
480B	  JMP_1 %bb.2, debug-location !136; is.c:270:9

496B	bb.4.for.end:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

512B	  MOV32mi %stack.11.i, 1, $noreg, 0, $noreg, 1, debug-location !139 :: (store 4 into %ir.i); is.c:274:16

528B	bb.5.for.cond3:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

544B	  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 46, implicit-def $eflags, debug-location !144 :: (dereferenceable load 4 from %ir.i); is.c:274:23
560B	  JCC_1 %bb.7, 15, implicit killed $eflags, debug-location !145; is.c:274:9
576B	  JMP_1 %bb.6, debug-location !145; is.c:274:9

592B	bb.6.for.body5:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

608B	  %44:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
640B	  %44:fr64 = MULSDrr %44:fr64(tied-def 0), %51:fr64, debug-location !148; is.c:275:24
656B	  MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %44:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
672B	  %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
704B	  %46:fr64 = ADDSDrr %46:fr64(tied-def 0), %46:fr64, debug-location !151; is.c:276:23
720B	  MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %46:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
736B	  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
752B	  JMP_1 %bb.5, debug-location !155; is.c:274:9

768B	bb.7.for.end10:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

784B	  MOV32mi $rip, 1, $noreg, @randlc.KS, $noreg, 1, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12

800B	bb.8.if.end:
	; predecessors: %bb.0, %bb.7

816B	  %16:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
832B	  %8:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
848B	  %9:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
880B	  %9:fr64 = MULSDrr %9:fr64(tied-def 0), %16:fr64, debug-location !163; is.c:283:14
896B	  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %9:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
912B	  %10:gr32 = CVTTSD2SIrr %9:fr64, debug-location !165; is.c:284:9
928B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %10:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
944B	  %13:fr64 = CVTSI2SDrr %10:gr32, debug-location !167; is.c:285:10
960B	  MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %13:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
976B	  %24:fr64 = MOVSDrm_alt %8:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
1008B	  %13:fr64 = MULSDrm %13:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
1040B	  %24:fr64 = SUBSDrr %24:fr64(tied-def 0), %13:fr64, debug-location !174; is.c:286:13
1056B	  MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %24:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
1072B	  %15:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
1104B	  %16:fr64 = MULSDrm %16:fr64(tied-def 0), %15:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
1120B	  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
1136B	  %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !181; is.c:293:9
1152B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %17:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
1168B	  %21:fr64 = CVTSI2SDrr %17:gr32, debug-location !183; is.c:294:10
1184B	  MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %21:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
1200B	  %19:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
1216B	  %32:fr64 = MOVSDrm_alt %19:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
1248B	  %24:fr64 = MULSDrr %24:fr64(tied-def 0), %21:fr64, debug-location !197; is.c:296:23
1280B	  %21:fr64 = MULSDrm %21:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
1312B	  %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %21:fr64, debug-location !190; is.c:295:13
1328B	  MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
1344B	  %25:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
1376B	  %25:fr64 = MULSDrr %25:fr64(tied-def 0), %32:fr64, debug-location !194; is.c:296:13
1408B	  %25:fr64 = ADDSDrr %25:fr64(tied-def 0), %24:fr64, debug-location !198; is.c:296:18
1424B	  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %25:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
1440B	  %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
1472B	  %26:fr64 = MULSDrr %26:fr64(tied-def 0), %25:fr64, debug-location !202; is.c:298:13
1488B	  %27:gr32 = CVTTSD2SIrr %26:fr64, debug-location !200; is.c:298:9
1504B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %27:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
1520B	  %29:fr64 = CVTSI2SDrr %27:gr32, debug-location !204; is.c:299:10
1536B	  MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %29:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
1568B	  %29:fr64 = MULSDrm %29:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
1600B	  %25:fr64 = SUBSDrr %25:fr64(tied-def 0), %29:fr64, debug-location !210; is.c:300:12
1616B	  MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %25:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
1648B	  %25:fr64 = MULSDrm %25:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
1680B	  %32:fr64 = MULSDrm %32:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
1712B	  %32:fr64 = ADDSDrr %32:fr64(tied-def 0), %25:fr64, debug-location !218; is.c:301:18
1728B	  MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %32:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
1744B	  %34:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
1776B	  %34:fr64 = MULSDrr %34:fr64(tied-def 0), %32:fr64, debug-location !222; is.c:302:13
1792B	  %35:gr32 = CVTTSD2SIrr %34:fr64, debug-location !220; is.c:302:9
1808B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %35:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
1824B	  %37:fr64 = CVTSI2SDrr %35:gr32, debug-location !224; is.c:303:10
1840B	  MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %37:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
1872B	  %37:fr64 = MULSDrm %37:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
1904B	  %32:fr64 = SUBSDrr %32:fr64(tied-def 0), %37:fr64, debug-location !230; is.c:304:13
1920B	  %39:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
1936B	  MOVSDmr %39:gr64, 1, $noreg, 0, $noreg, %32:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
1952B	  %42:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
1968B	  %41:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
2000B	  %42:fr64 = MULSDrm %42:fr64(tied-def 0), %41:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
2016B	  $xmm0 = COPY %42:fr64, debug-location !237; is.c:305:5
2032B	  RET 0, killed $xmm0, debug-location !237; is.c:305:5

# End machine code for function randlc.

Before MISched:
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $xmm1 in %1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $xmm0, $xmm1
  %1:fr64 = COPY $xmm1
  %0:fr64 = COPY $xmm0
  MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
  MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
  MOV32mi %stack.4.k, 1, $noreg, 0, $noreg, 524288, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
  %4:gr64 = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg
  %5:gr64 = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !257 :: (dereferenceable load 4 from %ir.i); is.c:319:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !258; is.c:319:5
  JMP_1 %bb.2, debug-location !258; is.c:319:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
  $rdi = COPY %4:gr64, debug-location !259; is.c:320:13
  $rsi = COPY %5:gr64, debug-location !259; is.c:320:13
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
  %6:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %6:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
  $rdi = COPY %4:gr64, debug-location !262; is.c:321:14
  $rsi = COPY %5:gr64, debug-location !262; is.c:321:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
  %8:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
  %8:fr64 = ADDSDrm %8:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
  $rdi = COPY %4:gr64, debug-location !264; is.c:322:14
  $rsi = COPY %5:gr64, debug-location !264; is.c:322:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
  %10:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
  %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
  $rdi = COPY %4:gr64, debug-location !266; is.c:323:14
  $rsi = COPY %5:gr64, debug-location !266; is.c:323:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
  %12:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
  %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
  %14:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
  %15:gr32 = CVTTSD2SIrr %14:fr64, debug-location !268; is.c:325:24
  %16:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
  JMP_1 %bb.1, debug-location !276; is.c:319:5

bb.3.for.end:
; predecessors: %bb.1

  RET 0, debug-location !279; is.c:327:1

# End machine code for function create_seq.

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: %1:fr64 = COPY $xmm1
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=4
Live In: XMM0 XMM1 
Live Out: %5 %4 
Live Thru: 
  LiveReg: %5
  LiveReg: %4
Top Pressure:
FR32=2
FR32X=2
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:fr64 = COPY $xmm1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %0:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   MOV32mi %stack.4.k, 1, $noreg, 0, $noreg, 524288, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %4:gr64 = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %5:gr64 = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %5:gr64 = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %4:gr64 = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.4.k, 1, $noreg, 0, $noreg, 524288, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
Bottom Pressure:

  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %1
  UpdateRegP: SU(3) MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %0
  UpdateRegP: SU(2) MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:fr64 = COPY $xmm0
Bottom Pressure:
FR32=2
FR32X=2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:fr64 = COPY $xmm1
Bottom Pressure:
FR32=2
FR32X=2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:fr64 = COPY $xmm1
SU(1):   %0:fr64 = COPY $xmm0
SU(2):   MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
SU(3):   MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
SU(4):   MOV32mi %stack.4.k, 1, $noreg, 0, $noreg, 524288, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
SU(6):   %4:gr64 = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg
SU(7):   %5:gr64 = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %12:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
    To: JMP_1 %bb.1, debug-location !276; is.c:319:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=4
Live In: XMM0 
Live Out: 
Live Thru: 
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:

Excess PSets: 
SU(0):   %12:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=0 Reg=%12
    SU(1): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
    SU(0): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%12
    SU(2): Data Latency=4 Reg=%12
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%12
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %14:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%14
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(4):   %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%14
    SU(3): Out  Latency=0
    SU(1): Data Latency=4 Reg=%12
  Successors:
    SU(5): Data Latency=1 Reg=%14
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   %15:gr32 = CVTTSD2SIrr %14:fr64, debug-location !268; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%14
  Successors:
    SU(7): Data Latency=1 Reg=%15
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(6):   %16:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%16
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%15
    SU(6): Data Latency=4 Reg=%16
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(8):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(6): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !276; is.c:319:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
Bottom Pressure:
GR16=4
  LiveReg: %16
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
              to GR16 2
  LiveReg: %15
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 6 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %16:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
Bottom Pressure:
GR16=2
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %15:gr32 = CVTTSD2SIrr %14:fr64, debug-location !268; is.c:325:24
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %14
  UpdateRegP: SU(5) %15:gr32 = CVTTSD2SIrr %14:fr64, debug-location !268; is.c:325:24
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %14
  UpdateRegP: SU(4) %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
              to 
  LiveReg: %12
  UpdateRegP: SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
              to 
  UpdateRegP: SU(4) %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %14:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
Bottom Pressure:
FR32=1
FR32X=1
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
Bottom Pressure:
FR32=1
FR32X=1
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %12
  UpdateRegP: SU(1) %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
Bottom Pressure:
FR32=1
FR32X=1
  Ready @6c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %12:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
SU(1):   %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
SU(3):   %14:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
SU(4):   %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
SU(5):   %15:gr32 = CVTTSD2SIrr %14:fr64, debug-location !268; is.c:325:24
SU(6):   %16:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
SU(7):   MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
SU(8):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = COPY %4:gr64, debug-location !266; is.c:323:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %4:gr64, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %5:gr64, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %5:gr64, debug-location !266; is.c:323:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %4:gr64, debug-location !266; is.c:323:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = COPY %4:gr64, debug-location !266; is.c:323:14
SU(1):   $rsi = COPY %5:gr64, debug-location !266; is.c:323:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %10:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=0 Reg=%10
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%10
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%10
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %10:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
SU(1):   %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = COPY %4:gr64, debug-location !264; is.c:322:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %4:gr64, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %5:gr64, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %5:gr64, debug-location !264; is.c:322:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %4:gr64, debug-location !264; is.c:322:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = COPY %4:gr64, debug-location !264; is.c:322:14
SU(1):   $rsi = COPY %5:gr64, debug-location !264; is.c:322:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %8:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %8:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=0 Reg=%8
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %8:fr64 = ADDSDrm %8:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%8
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%8
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%8
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %8:fr64 = ADDSDrm %8:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %8:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %8:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
SU(1):   %8:fr64 = ADDSDrm %8:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = COPY %4:gr64, debug-location !262; is.c:321:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %4:gr64, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %5:gr64, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %5:gr64, debug-location !262; is.c:321:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %4:gr64, debug-location !262; is.c:321:14
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = COPY %4:gr64, debug-location !262; is.c:321:14
SU(1):   $rsi = COPY %5:gr64, debug-location !262; is.c:321:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %6:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %6:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%6
  Single Issue       : false;
SU(1):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %6:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %6:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %6:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %6:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
SU(1):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %6:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = COPY %4:gr64, debug-location !259; is.c:320:13
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %4:gr64, debug-location !259; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %5:gr64, debug-location !259; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %5:gr64, debug-location !259; is.c:320:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %4:gr64, debug-location !259; is.c:320:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = COPY %4:gr64, debug-location !259; is.c:320:13
SU(1):   $rsi = COPY %5:gr64, debug-location !259; is.c:320:13

********** INTERVALS **********
XMM0 [0B,32r:0)[272r,304r:4)[384r,416r:3)[528r,560r:2)[672r,704r:1)  0@0B-phi 1@672r 2@528r 3@384r 4@272r
XMM1 [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%4 [112r,896B:0)  0@112r weight:0.000000e+00
%5 [128r,896B:0)  0@128r weight:0.000000e+00
%6 [304r,320r:0)  0@304r weight:0.000000e+00
%8 [416r,448r:0)[448r,464r:1)  0@416r 1@448r weight:0.000000e+00
%10 [560r,592r:0)[592r,608r:1)  0@560r 1@592r weight:0.000000e+00
%12 [704r,736r:0)[736r,800r:1)  0@704r 1@736r weight:0.000000e+00
%14 [768r,800r:0)[800r,816r:1)  0@768r 1@800r weight:0.000000e+00
%15 [816r,848r:0)  0@816r weight:0.000000e+00
%16 [832r,848r:0)  0@832r weight:0.000000e+00
RegMasks: 272r 384r 528r 672r
********** MACHINEINSTRS **********
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $xmm1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $xmm0, $xmm1
16B	  %1:fr64 = COPY $xmm1
32B	  %0:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
64B	  MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
80B	  MOV32mi %stack.4.k, 1, $noreg, 0, $noreg, 524288, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
96B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
112B	  %4:gr64 = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg
128B	  %5:gr64 = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg

144B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

160B	  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !257 :: (dereferenceable load 4 from %ir.i); is.c:319:19
176B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !258; is.c:319:5
192B	  JMP_1 %bb.2, debug-location !258; is.c:319:5

208B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
240B	  $rdi = COPY %4:gr64, debug-location !259; is.c:320:13
256B	  $rsi = COPY %5:gr64, debug-location !259; is.c:320:13
272B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
304B	  %6:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
320B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %6:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
352B	  $rdi = COPY %4:gr64, debug-location !262; is.c:321:14
368B	  $rsi = COPY %5:gr64, debug-location !262; is.c:321:14
384B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
400B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
416B	  %8:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
448B	  %8:fr64 = ADDSDrm %8:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
464B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
496B	  $rdi = COPY %4:gr64, debug-location !264; is.c:322:14
512B	  $rsi = COPY %5:gr64, debug-location !264; is.c:322:14
528B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
560B	  %10:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
592B	  %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
608B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
640B	  $rdi = COPY %4:gr64, debug-location !266; is.c:323:14
656B	  $rsi = COPY %5:gr64, debug-location !266; is.c:323:14
672B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
688B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
704B	  %12:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
736B	  %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
752B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
768B	  %14:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
800B	  %14:fr64 = MULSDrr %14:fr64(tied-def 0), %12:fr64, debug-location !270; is.c:325:26
816B	  %15:gr32 = CVTTSD2SIrr %14:fr64, debug-location !268; is.c:325:24
832B	  %16:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
848B	  MOV32mr $noreg, 4, %16:gr64_nosp, @key_array, $noreg, %15:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
864B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
880B	  JMP_1 %bb.1, debug-location !276; is.c:319:5

896B	bb.3.for.end:
	; predecessors: %bb.1

912B	  RET 0, debug-location !279; is.c:327:1

# End machine code for function create_seq.

Before MISched:
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi %stack.0.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from %ir.i); is.c:351:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !293; is.c:351:5
  JMP_1 %bb.2, debug-location !293; is.c:351:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  %13:gr64_nosp = MOVSX64rm32 $noreg, 4, %12:gr64_nosp, @key_buff2, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
  %15:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
  %17:gr64_with_sub_8bit = LEA64r %16:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
  MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
  MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
  JMP_1 %bb.1, debug-location !303; is.c:351:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
  MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 1, debug-location !307 :: (store 4 into %ir.i); is.c:357:12

bb.4.for.cond7:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  CMP32mi %stack.0.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !312 :: (dereferenceable load 4 from %ir.i); is.c:357:19
  JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !313; is.c:357:5
  JMP_1 %bb.5, debug-location !313; is.c:357:5

bb.5.for.body9:
; predecessors: %bb.4
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

  %9:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @key_array - 4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
  CMP32rm %10:gr32, $noreg, 4, %9:gr64_nosp, @key_array, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
  JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
  JMP_1 %bb.6, debug-location !321; is.c:358:13

bb.6.if.then:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.1.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !322 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); is.c:359:14

bb.7.if.end:
; predecessors: %bb.5, %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !324 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:357:32
  JMP_1 %bb.4, debug-location !325; is.c:357:5

bb.8.for.end18:
; predecessors: %bb.4
  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

  CMP32mi8 %stack.1.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !330 :: (dereferenceable load 4 from %ir.j); is.c:361:11
  JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !331; is.c:361:9
  JMP_1 %bb.9, debug-location !331; is.c:361:9

bb.9.if.then20:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %4:gr64 = MOVSX64rm32 %stack.1.j, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
  $rdi = MOV32ri64 @.str, debug-location !335; is.c:362:9
  $rsi = COPY %4:gr64, debug-location !335; is.c:362:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
  JMP_1 %bb.11, debug-location !336; is.c:363:5

bb.10.if.else:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !337 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:365:28

bb.11.if.end22:
; predecessors: %bb.10, %bb.9

  RET 0, debug-location !338; is.c:366:1

# End machine code for function full_verify.

********** MI Scheduling **********
full_verify:%bb.2 for.body
  From: %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
    To: JMP_1 %bb.1, debug-location !303; is.c:351:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%12
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %13:gr64_nosp = MOVSX64rm32 $noreg, 4, %12:gr64_nosp, @key_buff2, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
  Successors:
    SU(6): Data Latency=4 Reg=%13
    SU(5): Data Latency=4 Reg=%13
    SU(3): Data Latency=4 Reg=%13
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %15:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(5): Data Latency=4 Reg=%15
    SU(3): Data Latency=4 Reg=%15
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%13
    SU(2): Data Latency=4 Reg=%15
  Successors:
    SU(6): Data Latency=4 Reg=%16
    SU(4): Data Latency=4 Reg=%16
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %17:gr64_with_sub_8bit = LEA64r %16:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%16
  Successors:
    SU(5): Data Latency=1 Reg=%17
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%17
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=%15
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%13
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(6):   MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%16
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%13
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !303; is.c:351:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(7) 13c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
Bottom Pressure:
GR16=4
  LiveReg: %16
  UpdateRegP: SU(4) %17:gr64_with_sub_8bit = LEA64r %16:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
              to GR16 -2
  UpdateRegP: SU(6) MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to GR16 2
  LiveReg: %13
  UpdateRegP: SU(3) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
              to 
  UpdateRegP: SU(5) MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to GR16 4
  UpdateRegP: SU(6) MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
Bottom Pressure:
GR16=8
  LiveReg: %15
  UpdateRegP: SU(3) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
              to GR16 -2
  UpdateRegP: SU(5) MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to GR16 2
  LiveReg: %17
  UpdateRegP: SU(5) MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to 
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %17:gr64_with_sub_8bit = LEA64r %16:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
Bottom Pressure:
GR16=6
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
Bottom Pressure:
GR16=4
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %15:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
Bottom Pressure:
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %13:gr64_nosp = MOVSX64rm32 $noreg, 4, %12:gr64_nosp, @key_buff2, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
Bottom Pressure:
GR16=2
  LiveReg: %12
  UpdateRegP: SU(1) %13:gr64_nosp = MOVSX64rm32 $noreg, 4, %12:gr64_nosp, @key_buff2, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
              to GR16 -2
  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
Bottom Pressure:

  Ready @16c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
SU(1):   %13:gr64_nosp = MOVSX64rm32 $noreg, 4, %12:gr64_nosp, @key_buff2, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
SU(2):   %15:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
SU(3):   %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
SU(4):   %17:gr64_with_sub_8bit = LEA64r %16:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
SU(5):   MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
SU(6):   MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
SU(7):   INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32

********** MI Scheduling **********
full_verify:%bb.3 for.end
  From: MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 1, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 1, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
SU(1):   MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 1, debug-location !307 :: (store 4 into %ir.i); is.c:357:12

********** MI Scheduling **********
full_verify:%bb.5 for.body9
  From: %9:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
    To: JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%9
    SU(1): Data Latency=4 Reg=%9
  Single Issue       : false;
SU(1):   %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @key_array - 4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%9
  Successors:
    SU(2): Data Latency=4 Reg=%10
  Single Issue       : false;
SU(2):   CMP32rm %10:gr32, $noreg, 4, %9:gr64_nosp, @key_array, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%10
    SU(0): Data Latency=4 Reg=%9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %10:gr32, $noreg, 4, %9:gr64_nosp, @key_array, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
  Ready @4c
  BotQ.A TopLatency SU(2) 8c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @key_array - 4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %9:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
SU(1):   %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @key_array - 4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
SU(2):   CMP32rm %10:gr32, $noreg, 4, %9:gr64_nosp, @key_array, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30

********** MI Scheduling **********
full_verify:%bb.9 if.then20
  From: $rdi = MOV32ri64 @.str, debug-location !335; is.c:362:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str, debug-location !335; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %4:gr64, debug-location !335; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %4:gr64, debug-location !335; is.c:362:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str, debug-location !335; is.c:362:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = MOV32ri64 @.str, debug-location !335; is.c:362:9
SU(1):   $rsi = COPY %4:gr64, debug-location !335; is.c:362:9
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9

********** INTERVALS **********
%4 [656r,752r:0)  0@656r weight:0.000000e+00
%9 [416r,448r:0)  0@416r weight:0.000000e+00
%10 [432r,448r:0)  0@432r weight:0.000000e+00
%12 [112r,128r:0)  0@112r weight:0.000000e+00
%13 [128r,240r:0)  0@128r weight:0.000000e+00
%15 [160r,224r:0)  0@160r weight:0.000000e+00
%16 [176r,240r:0)  0@176r weight:0.000000e+00
%17 [192r,224r:0)  0@192r weight:0.000000e+00
RegMasks: 784r
********** MACHINEINSTRS **********
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12

32B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

48B	  CMP32mi %stack.0.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from %ir.i); is.c:351:19
64B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !293; is.c:351:5
80B	  JMP_1 %bb.2, debug-location !293; is.c:351:5

96B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

112B	  %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
128B	  %13:gr64_nosp = MOVSX64rm32 $noreg, 4, %12:gr64_nosp, @key_buff2, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
160B	  %15:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
176B	  %16:gr64_nosp = MOVSX64rm32 %15:gr64, 4, %13:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
192B	  %17:gr64_with_sub_8bit = LEA64r %16:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
224B	  MOV32mr %15:gr64, 4, %13:gr64_nosp, 0, $noreg, %17.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
240B	  MOV32mr $noreg, 4, %16:gr64_nosp, @key_array - 4, $noreg, %13.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
256B	  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
272B	  JMP_1 %bb.1, debug-location !303; is.c:351:5

288B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

304B	  MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
320B	  MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 1, debug-location !307 :: (store 4 into %ir.i); is.c:357:12

336B	bb.4.for.cond7:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

352B	  CMP32mi %stack.0.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !312 :: (dereferenceable load 4 from %ir.i); is.c:357:19
368B	  JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !313; is.c:357:5
384B	  JMP_1 %bb.5, debug-location !313; is.c:357:5

400B	bb.5.for.body9:
	; predecessors: %bb.4
	  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

416B	  %9:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
432B	  %10:gr32 = MOV32rm $noreg, 4, %9:gr64_nosp, @key_array - 4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
448B	  CMP32rm %10:gr32, $noreg, 4, %9:gr64_nosp, @key_array, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
464B	  JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
480B	  JMP_1 %bb.6, debug-location !321; is.c:358:13

496B	bb.6.if.then:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

512B	  INC32m %stack.1.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !322 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); is.c:359:14

528B	bb.7.if.end:
	; predecessors: %bb.5, %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

544B	  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !324 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:357:32
560B	  JMP_1 %bb.4, debug-location !325; is.c:357:5

576B	bb.8.for.end18:
	; predecessors: %bb.4
	  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

592B	  CMP32mi8 %stack.1.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !330 :: (dereferenceable load 4 from %ir.j); is.c:361:11
608B	  JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !331; is.c:361:9
624B	  JMP_1 %bb.9, debug-location !331; is.c:361:9

640B	bb.9.if.then20:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

656B	  %4:gr64 = MOVSX64rm32 %stack.1.j, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 4 from %ir.j); is.c:362:72
672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
736B	  $rdi = MOV32ri64 @.str, debug-location !335; is.c:362:9
752B	  $rsi = COPY %4:gr64, debug-location !335; is.c:362:9
768B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
784B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
800B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
816B	  JMP_1 %bb.11, debug-location !336; is.c:363:5

832B	bb.10.if.else:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

848B	  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !337 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:365:28

864B	bb.11.if.end22:
	; predecessors: %bb.10, %bb.9

880B	  RET 0, debug-location !338; is.c:366:1

# End machine code for function full_verify.

Before MISched:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
  MOV32mi %stack.5.shift, 1, $noreg, 0, $noreg, 11, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
  %1:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
  MOV32mr $noreg, 4, %1:gr64_nosp, @key_array, $noreg, %1.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
  %3:gr32 = MOV32ri 2097152
  %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
  MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !371 :: (dereferenceable load 4 from %ir.i); is.c:389:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !372; is.c:389:5
  JMP_1 %bb.2, debug-location !372; is.c:389:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %98:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  %93:gr64_nosp = MOVSX64rm32 $noreg, 4, %98:gr64_nosp, @test_index_array, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
  %94:gr32 = MOV32rm $noreg, 4, %93:gr64_nosp, @key_array, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
  MOV32mr $noreg, 4, %98:gr64_nosp, @partial_verify_vals, $noreg, %94:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
  %95:gr32 = LEA64_32r %98:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %95:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
  JMP_1 %bb.1, debug-location !380; is.c:389:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12

bb.4.for.cond9:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !388 :: (dereferenceable load 4 from %ir.i); is.c:395:19
  JCC_1 %bb.6, 15, implicit killed $eflags, debug-location !389; is.c:395:5
  JMP_1 %bb.5, debug-location !389; is.c:395:5

bb.5.for.body11:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %99:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  MOV32mi $noreg, 4, %99:gr64_nosp, @bucket_size, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
  %90:gr32 = LEA64_32r %99:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %90:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
  JMP_1 %bb.4, debug-location !394; is.c:395:5

bb.6.for.end16:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12

bb.7.for.cond17:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !402 :: (dereferenceable load 4 from %ir.i); is.c:399:19
  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !403; is.c:399:5
  JMP_1 %bb.8, debug-location !403; is.c:399:5

bb.8.for.body19:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %100:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  %85:gr32 = MOV32rm $noreg, 4, %100:gr64_nosp, @key_array, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
  %84:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
  $cl = COPY %84:gr8, debug-location !407; is.c:400:34
  %85:gr32 = SAR32rCL %85:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
  %86:gr64_nosp = MOVSX64rr32 %85:gr32, debug-location !408; is.c:400:9
  INC32m $noreg, 4, %86:gr64_nosp, @bucket_size, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
  %87:gr32 = LEA64_32r %100:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %87:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
  JMP_1 %bb.7, debug-location !411; is.c:399:5

bb.9.for.end27:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 1, debug-location !415 :: (store 4 into %ir.i); is.c:404:12

bb.10.for.cond28:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !420 :: (dereferenceable load 4 from %ir.i); is.c:404:19
  JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !421; is.c:404:5
  JMP_1 %bb.11, debug-location !421; is.c:404:5

bb.11.for.body30:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %101:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  %79:gr32 = MOV32rm $noreg, 4, %101:gr64_nosp, @bucket_ptrs - 4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
  %79:gr32 = nsw ADD32rm %79:gr32(tied-def 0), $noreg, 4, %101:gr64_nosp, @bucket_size - 4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
  MOV32mr $noreg, 4, %101:gr64_nosp, @bucket_ptrs, $noreg, %79:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
  %80:gr32 = LEA64_32r %101:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %80:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
  JMP_1 %bb.10, debug-location !433; is.c:404:5

bb.12.for.end42:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12

bb.13.for.cond43:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !441 :: (dereferenceable load 4 from %ir.i); is.c:408:19
  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !442; is.c:408:5
  JMP_1 %bb.14, debug-location !442; is.c:408:5

bb.14.for.body45:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %103:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  %68:gr32 = MOV32rm $noreg, 4, %103:gr64_nosp, @key_array, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
  MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %68:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
  %69:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
  $cl = COPY %69:gr8, debug-location !450; is.c:410:35
  %70:gr32 = COPY %68:gr32, debug-location !450; is.c:410:35
  %70:gr32 = SAR32rCL %70:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
  %71:gr64_nosp = MOVSX64rr32 %70:gr32, debug-location !451; is.c:410:19
  %102:gr64_nosp = MOVSX64rm32 $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
  %74:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
  MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
  MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
  %75:gr32 = LEA64_32r %103:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %75:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
  JMP_1 %bb.13, debug-location !456; is.c:408:5

bb.15.for.end56:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  MOV64mi32 %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, @key_buff2, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12

bb.16.for.cond57:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 2097151, implicit-def $eflags, debug-location !465 :: (dereferenceable load 4 from %ir.i); is.c:422:19
  JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !466; is.c:422:5
  JMP_1 %bb.17, debug-location !466; is.c:422:5

bb.17.for.body59:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %104:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  MOV32mi $noreg, 4, %104:gr64_nosp, @key_buff1, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
  %65:gr32 = LEA64_32r %104:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %65:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
  JMP_1 %bb.16, debug-location !471; is.c:422:5

bb.18.for.end64:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  MOV64mi32 %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, @key_buff1, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12

bb.19.for.cond65:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !480 :: (dereferenceable load 4 from %ir.i); is.c:433:19
  JCC_1 %bb.21, 15, implicit killed $eflags, debug-location !481; is.c:433:5
  JMP_1 %bb.20, debug-location !481; is.c:433:5

bb.20.for.body67:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %59:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  %60:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  %61:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  %62:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %61:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
  INC32m %59:gr64, 4, %62:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
  JMP_1 %bb.19, debug-location !487; is.c:433:5

bb.21.for.end75:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12

bb.22.for.cond76:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 2097150, implicit-def $eflags, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:440:19
  JCC_1 %bb.24, 15, implicit killed $eflags, debug-location !496; is.c:440:5
  JMP_1 %bb.23, debug-location !496; is.c:440:5

bb.23.for.body78:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %56:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  %58:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
  ADD32mr %56:gr64, 4, %57:gr64_nosp, 4, $noreg, %58:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
  JMP_1 %bb.22, debug-location !504; is.c:440:5

bb.24.for.end87:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12

bb.25.for.cond88:
; predecessors: %bb.24, %bb.39
  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !512 :: (dereferenceable load 4 from %ir.i); is.c:446:19
  JCC_1 %bb.40, 15, implicit killed $eflags, debug-location !513; is.c:446:5
  JMP_1 %bb.26, debug-location !513; is.c:446:5

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.39(0x40000000); %bb.27(50.00%), %bb.39(50.00%)

  %25:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  %26:gr32 = MOV32rm $noreg, 4, %25:gr64_nosp, @partial_verify_vals, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
  MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %26:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
  TEST32rr %26:gr32, %26:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
  JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
  JMP_1 %bb.27, debug-location !521; is.c:448:19

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.39(0x40000000); %bb.28(50.00%), %bb.39(50.00%)

  CMP32mi %stack.2.k, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !523 :: (dereferenceable load 4 from %ir.k); is.c:448:24
  JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !524; is.c:448:13
  JMP_1 %bb.28, debug-location !524; is.c:448:13

bb.28.if.then:
; predecessors: %bb.27
  successors: %bb.31(0x40000000), %bb.29(0x40000000); %bb.31(50.00%), %bb.29(50.00%)

  %29:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  %30:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
  MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %31:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
  JMP_1 %bb.29, debug-location !536; is.c:496:28

bb.29.lor.lhs.false:
; predecessors: %bb.28
  successors: %bb.31(0x40000000), %bb.30(0x40000000); %bb.31(50.00%), %bb.30(50.00%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !538 :: (dereferenceable load 4 from %ir.i); is.c:496:33
  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !539; is.c:496:38
  JMP_1 %bb.30, debug-location !539; is.c:496:38

bb.30.lor.lhs.false100:
; predecessors: %bb.29
  successors: %bb.31(0x40000000), %bb.34(0x40000000); %bb.31(50.00%), %bb.34(50.00%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !541 :: (dereferenceable load 4 from %ir.i); is.c:496:43
  JCC_1 %bb.34, 5, implicit killed $eflags, debug-location !542; is.c:496:21
  JMP_1 %bb.31, debug-location !542; is.c:496:21

bb.31.if.then102:
; predecessors: %bb.28, %bb.29, %bb.30
  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

  %44:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  %46:gr32 = MOV32rm $noreg, 4, %44:gr64_nosp, @test_rank_array, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
  %46:gr32 = nsw ADD32rm %46:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %46:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
  JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
  JMP_1 %bb.32, debug-location !551; is.c:497:25

bb.32.if.then107:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 1, debug-location !552 :: (store 4 into %ir.failed); is.c:498:32
  JMP_1 %bb.37, debug-location !553; is.c:498:25

bb.33.if.else:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !554 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:500:44
  JMP_1 %bb.37

bb.34.if.else109:
; predecessors: %bb.30
  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

  %39:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  %41:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @test_rank_array, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
  %41:gr32 = nsw SUB32rm %41:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %41:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
  JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
  JMP_1 %bb.35, debug-location !563; is.c:503:25

bb.35.if.then114:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 1, debug-location !564 :: (store 4 into %ir.failed); is.c:504:32
  JMP_1 %bb.37, debug-location !565; is.c:504:25

bb.36.if.else115:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !566 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:506:44

bb.37.if.end118:
; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  CMP32mi8 %stack.8.failed, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.failed); is.c:538:24
  JCC_1 %bb.39, 5, implicit killed $eflags, debug-location !570; is.c:538:17
  JMP_1 %bb.38, debug-location !570; is.c:538:17

bb.38.if.then120:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %50:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  %51:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
  $rdi = MOV32ri64 @.str.1, debug-location !573; is.c:539:17
  $esi = COPY %50:gr32, debug-location !573; is.c:539:17
  $edx = COPY %51:gr32, debug-location !573; is.c:539:17
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17

bb.39.if.end122:
; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !574 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:446:39
  JMP_1 %bb.25, debug-location !575; is.c:446:5

bb.40.for.end125:
; predecessors: %bb.25
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

  CMP32mi8 %stack.0.iteration.addr, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !580 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:19
  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !581; is.c:549:9
  JMP_1 %bb.41, debug-location !581; is.c:549:9

bb.41.if.then127:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  %24:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %24:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29

bb.42.if.end128:
; predecessors: %bb.40, %bb.41

  RET 0, debug-location !585; is.c:551:1

# End machine code for function rank.

********** MI Scheduling **********
rank:%bb.0 entry
  From: %0:gr32 = COPY $edi
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=4
Live In: DIL DIH HDI 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=1
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%0
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   MOV32mi %stack.5.shift, 1, $noreg, 0, $noreg, 11, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %1:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    SU(7): Data Latency=1 Reg=%1
    SU(6): Data Latency=1 Reg=%1
    SU(4): Data Latency=1 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOV32mr $noreg, 4, %1:gr64_nosp, @key_array, $noreg, %1.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%1
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %3:gr32 = MOV32ri 2097152
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Data Latency=1 Reg=%3
    SU(6): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
    SU(5): Out  Latency=0
    SU(3): Data Latency=1 Reg=%1
  Successors:
    SU(7): Data Latency=1 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%3
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=%1
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(8):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 2 1 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 2 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
Bottom Pressure:
GR16=4
  LiveReg: %1
  UpdateRegP: SU(4) MOV32mr $noreg, 4, %1:gr64_nosp, @key_array, $noreg, %1.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
              to 
  UpdateRegP: SU(6) %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
              to 
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to GR16 2
  LiveReg: %3
  UpdateRegP: SU(7) MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 6 4 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
Bottom Pressure:
GR16=4
  LiveReg: %3
  UpdateRegP: SU(6) %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 5 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %3:gr32 = MOV32ri 2097152
Bottom Pressure:
GR16=2
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr $noreg, 4, %1:gr64_nosp, @key_array, $noreg, %1.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %1:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
Bottom Pressure:
GR16=2
  LiveReg: %0
  UpdateRegP: SU(1) MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
              to 
  UpdateRegP: SU(3) %1:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
              to GR16 -2
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.5.shift, 1, $noreg, 0, $noreg, 11, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
Bottom Pressure:
GR16=2
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=1
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr32 = COPY $edi
SU(1):   MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
SU(2):   MOV32mi %stack.5.shift, 1, $noreg, 0, $noreg, 11, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
SU(3):   %1:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
SU(4):   MOV32mr $noreg, 4, %1:gr64_nosp, @key_array, $noreg, %1.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
SU(5):   %3:gr32 = MOV32ri 2097152
SU(6):   %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
SU(7):   MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
SU(8):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12

********** MI Scheduling **********
rank:%bb.2 for.body
  From: %98:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
    To: JMP_1 %bb.1, debug-location !380; is.c:389:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %98:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%98
    SU(3): Data Latency=4 Reg=%98
    SU(1): Data Latency=4 Reg=%98
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %93:gr64_nosp = MOVSX64rm32 $noreg, 4, %98:gr64_nosp, @test_index_array, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%98
  Successors:
    SU(2): Data Latency=4 Reg=%93
  Single Issue       : false;
SU(2):   %94:gr32 = MOV32rm $noreg, 4, %93:gr64_nosp, @key_array, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%93
  Successors:
    SU(3): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(3):   MOV32mr $noreg, 4, %98:gr64_nosp, @partial_verify_vals, $noreg, %94:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%94
    SU(0): Data Latency=4 Reg=%98
  Single Issue       : false;
SU(4):   %95:gr32 = LEA64_32r %98:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%98
  Successors:
    SU(5): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %95:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%95
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !380; is.c:389:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %95:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %95:gr32 = LEA64_32r %98:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr $noreg, 4, %98:gr64_nosp, @partial_verify_vals, $noreg, %94:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %94:gr32 = MOV32rm $noreg, 4, %93:gr64_nosp, @key_array, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %93:gr64_nosp = MOVSX64rm32 $noreg, 4, %98:gr64_nosp, @test_index_array, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %98:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %98:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
SU(1):   %93:gr64_nosp = MOVSX64rm32 $noreg, 4, %98:gr64_nosp, @test_index_array, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
SU(2):   %94:gr32 = MOV32rm $noreg, 4, %93:gr64_nosp, @key_array, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
SU(3):   MOV32mr $noreg, 4, %98:gr64_nosp, @partial_verify_vals, $noreg, %94:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
SU(4):   %95:gr32 = LEA64_32r %98:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %95:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39

********** MI Scheduling **********
rank:%bb.5 for.body11
  From: %99:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
    To: JMP_1 %bb.4, debug-location !394; is.c:395:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %99:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%99
    SU(1): Data Latency=4 Reg=%99
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi $noreg, 4, %99:gr64_nosp, @bucket_size, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(2):   %90:gr32 = LEA64_32r %99:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%99
  Successors:
    SU(3): Data Latency=1 Reg=%90
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %90:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%90
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.4, debug-location !394; is.c:395:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %90:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %90:gr32 = LEA64_32r %99:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi $noreg, 4, %99:gr64_nosp, @bucket_size, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %99:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %99:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
SU(1):   MOV32mi $noreg, 4, %99:gr64_nosp, @bucket_size, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
SU(2):   %90:gr32 = LEA64_32r %99:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %90:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35

********** MI Scheduling **********
rank:%bb.8 for.body19
  From: %100:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
    To: JMP_1 %bb.7, debug-location !411; is.c:399:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=5
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %100:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Data Latency=4 Reg=%100
    SU(1): Data Latency=4 Reg=%100
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %85:gr32 = MOV32rm $noreg, 4, %100:gr64_nosp, @key_array, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%100
  Successors:
    SU(4): Data Latency=4 Reg=%85
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %84:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%84
  Pressure Diff      : GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(3):   $cl = COPY %84:gr8, debug-location !407; is.c:400:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%84
  Successors:
    SU(4): Data Latency=0 Reg=$cl
  Pressure Diff      : GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR64_TC+GR64_TCW64 -1    GR64_TC -1    GR8+GR64_TC 1    GR16 1
  Single Issue       : false;
SU(4):   %85:gr32 = SAR32rCL %85:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(3): Data Latency=0 Reg=$cl
    SU(1): Data Latency=4 Reg=%85
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%85
  Pressure Diff      : GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1
  Single Issue       : false;
SU(5):   %86:gr64_nosp = MOVSX64rr32 %85:gr32, debug-location !408; is.c:400:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%85
  Successors:
    SU(6): Data Latency=1 Reg=%86
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   INC32m $noreg, 4, %86:gr64_nosp, @bucket_size, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%86
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %87:gr32 = LEA64_32r %100:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%100
  Successors:
    SU(8): Data Latency=1 Reg=%87
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %87:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%87
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7, debug-location !411; is.c:399:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %87:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
Bottom Pressure:
GR16=2
  LiveReg: %87
  UpdateRegP: SU(8) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %87:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %87:gr32 = LEA64_32r %100:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
Bottom Pressure:
GR16=2
  LiveReg: %100
  UpdateRegP: SU(1) %85:gr32 = MOV32rm $noreg, 4, %100:gr64_nosp, @key_array, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
              to GR16 -2
  UpdateRegP: SU(7) %87:gr32 = LEA64_32r %100:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) INC32m $noreg, 4, %86:gr64_nosp, @bucket_size, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
Bottom Pressure:
GR16=4
  LiveReg: %86
  UpdateRegP: SU(6) INC32m $noreg, 4, %86:gr64_nosp, @bucket_size, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
              to 
  Ready @3c
  BotQ.A TopLatency SU(6) 10c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %86:gr64_nosp = MOVSX64rr32 %85:gr32, debug-location !408; is.c:400:9
Bottom Pressure:
GR16=4
  LiveReg: %85
  UpdateRegP: SU(5) %86:gr64_nosp = MOVSX64rr32 %85:gr32, debug-location !408; is.c:400:9
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %85:gr32 = SAR32rCL %85:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
Bottom Pressure:
GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=5
  LiveReg: %85
  UpdateRegP: SU(4) %85:gr32 = SAR32rCL %85:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
              to GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $cl = COPY %84:gr8, debug-location !407; is.c:400:34
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=5
  LiveReg: %84
  UpdateRegP: SU(3) $cl = COPY %84:gr8, debug-location !407; is.c:400:34
              to GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %84:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
Bottom Pressure:
GR16=4
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %85:gr32 = MOV32rm $noreg, 4, %100:gr64_nosp, @key_array, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
Bottom Pressure:
GR16=2
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %100:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
Bottom Pressure:

  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %100:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
SU(1):   %85:gr32 = MOV32rm $noreg, 4, %100:gr64_nosp, @key_array, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
SU(2):   %84:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
SU(3):   $cl = COPY %84:gr8, debug-location !407; is.c:400:34
SU(4):   %85:gr32 = SAR32rCL %85:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
SU(5):   %86:gr64_nosp = MOVSX64rr32 %85:gr32, debug-location !408; is.c:400:9
SU(6):   INC32m $noreg, 4, %86:gr64_nosp, @bucket_size, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
SU(7):   %87:gr32 = LEA64_32r %100:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
SU(8):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %87:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32

********** MI Scheduling **********
rank:%bb.9 for.end27
  From: MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 1, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 1, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
SU(1):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 1, debug-location !415 :: (store 4 into %ir.i); is.c:404:12

********** MI Scheduling **********
rank:%bb.11 for.body30
  From: %101:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
    To: JMP_1 %bb.10, debug-location !433; is.c:404:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %101:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%101
    SU(3): Data Latency=4 Reg=%101
    SU(2): Data Latency=4 Reg=%101
    SU(1): Data Latency=4 Reg=%101
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %79:gr32 = MOV32rm $noreg, 4, %101:gr64_nosp, @bucket_ptrs - 4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%101
  Successors:
    SU(2): Data Latency=4 Reg=%79
    SU(2): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %79:gr32 = nsw ADD32rm %79:gr32(tied-def 0), $noreg, 4, %101:gr64_nosp, @bucket_size - 4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%79
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%101
  Successors:
    SU(3): Data Latency=4 Reg=%79
  Single Issue       : false;
SU(3):   MOV32mr $noreg, 4, %101:gr64_nosp, @bucket_ptrs, $noreg, %79:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%79
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%101
  Single Issue       : false;
SU(4):   %80:gr32 = LEA64_32r %101:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%101
  Successors:
    SU(5): Data Latency=1 Reg=%80
  Single Issue       : false;
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %80:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%80
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10, debug-location !433; is.c:404:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %80:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %80:gr32 = LEA64_32r %101:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr $noreg, 4, %101:gr64_nosp, @bucket_ptrs, $noreg, %79:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %79:gr32 = nsw ADD32rm %79:gr32(tied-def 0), $noreg, 4, %101:gr64_nosp, @bucket_size - 4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %79:gr32 = MOV32rm $noreg, 4, %101:gr64_nosp, @bucket_ptrs - 4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %101:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %101:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
SU(1):   %79:gr32 = MOV32rm $noreg, 4, %101:gr64_nosp, @bucket_ptrs - 4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
SU(2):   %79:gr32 = nsw ADD32rm %79:gr32(tied-def 0), $noreg, 4, %101:gr64_nosp, @bucket_size - 4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
SU(3):   MOV32mr $noreg, 4, %101:gr64_nosp, @bucket_ptrs, $noreg, %79:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
SU(4):   %80:gr32 = LEA64_32r %101:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %80:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35

********** MI Scheduling **********
rank:%bb.14 for.body45
  From: %103:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
    To: JMP_1 %bb.13, debug-location !456; is.c:408:5
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=10
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %103:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(12): Data Latency=4 Reg=%103
    SU(1): Data Latency=4 Reg=%103
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %68:gr32 = MOV32rm $noreg, 4, %103:gr64_nosp, @key_array, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%103
  Successors:
    SU(11): Data Latency=4 Reg=%68
    SU(5): Data Latency=4 Reg=%68
    SU(2): Data Latency=4 Reg=%68
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %68:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%68
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %69:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=%69
  Pressure Diff      : GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(4):   $cl = COPY %69:gr8, debug-location !450; is.c:410:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=%69
  Successors:
    SU(6): Data Latency=0 Reg=$cl
  Pressure Diff      : GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR64_TC+GR64_TCW64 -1    GR64_TC -1    GR8+GR64_TC 1    GR16 1
  Single Issue       : false;
SU(5):   %70:gr32 = COPY %68:gr32, debug-location !450; is.c:410:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%68
  Successors:
    SU(6): Data Latency=0 Reg=%70
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %70:gr32 = SAR32rCL %70:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(5): Data Latency=0 Reg=%70
    SU(5): Out  Latency=0
    SU(4): Data Latency=0 Reg=$cl
  Successors:
    SU(7): Data Latency=1 Reg=%70
  Pressure Diff      : GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1
  Single Issue       : false;
SU(7):   %71:gr64_nosp = MOVSX64rr32 %70:gr32, debug-location !451; is.c:410:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%70
  Successors:
    SU(10): Data Latency=1 Reg=%71
    SU(8): Data Latency=1 Reg=%71
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %102:gr64_nosp = MOVSX64rm32 $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=%71
  Successors:
    SU(11): Data Latency=4 Reg=%102
    SU(9): Data Latency=4 Reg=%102
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %74:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%102
  Successors:
    SU(10): Data Latency=1 Reg=%74
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%74
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=1 Reg=%71
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(11):   MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%102
    SU(1): Data Latency=4 Reg=%68
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(12):   %75:gr32 = LEA64_32r %103:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%103
  Successors:
    SU(13): Data Latency=1 Reg=%75
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %75:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%75
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.13, debug-location !456; is.c:408:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 2 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %75:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
Bottom Pressure:
GR16=2
  LiveReg: %75
  UpdateRegP: SU(13) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %75:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 10 12 
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %75:gr32 = LEA64_32r %103:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
Bottom Pressure:
GR16=2
  LiveReg: %103
  UpdateRegP: SU(1) %68:gr32 = MOV32rm $noreg, 4, %103:gr64_nosp, @key_array, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
              to GR16 -2
  UpdateRegP: SU(12) %75:gr32 = LEA64_32r %103:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(12) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 10 
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
Bottom Pressure:
GR16=6
  LiveReg: %102
  UpdateRegP: SU(9) %74:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
              to GR16 -2
  UpdateRegP: SU(11) MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to GR16 2
  LiveReg: %68
  UpdateRegP: SU(2) MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %68:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
              to 
  UpdateRegP: SU(5) %70:gr32 = COPY %68:gr32, debug-location !450; is.c:410:35
              to GR16 -2
  UpdateRegP: SU(11) MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 14c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 10 
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
Bottom Pressure:
GR16=10
  LiveReg: %71
  UpdateRegP: SU(8) %102:gr64_nosp = MOVSX64rm32 $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
              to GR16 -2
  UpdateRegP: SU(10) MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to GR16 2
  LiveReg: %74
  UpdateRegP: SU(10) MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 15c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 
  Cand SU(2) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %74:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
Bottom Pressure:
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %102:gr64_nosp = MOVSX64rm32 $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
Bottom Pressure:
GR16=6
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %71:gr64_nosp = MOVSX64rr32 %70:gr32, debug-location !451; is.c:410:19
Bottom Pressure:
GR16=6
  LiveReg: %70
  UpdateRegP: SU(7) %71:gr64_nosp = MOVSX64rr32 %70:gr32, debug-location !451; is.c:410:19
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %70:gr32 = SAR32rCL %70:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
Bottom Pressure:
GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=7
  LiveReg: %70
  UpdateRegP: SU(6) %70:gr32 = SAR32rCL %70:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
              to GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 4 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $cl = COPY %69:gr8, debug-location !450; is.c:410:35
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=7
  LiveReg: %69
  UpdateRegP: SU(4) $cl = COPY %69:gr8, debug-location !450; is.c:410:35
              to GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1
  Ready @7c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %70:gr32 = COPY %68:gr32, debug-location !450; is.c:410:35
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=5
  Ready @7c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %69:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
Bottom Pressure:
GR16=4
  Ready @11c
  BotQ.A BotLatency SU(3) 11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %68:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
Bottom Pressure:
GR16=4
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %68:gr32 = MOV32rm $noreg, 4, %103:gr64_nosp, @key_array, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
Bottom Pressure:
GR16=2
  Ready @11c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %103:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
Bottom Pressure:

  Ready @15c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %103:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
SU(1):   %68:gr32 = MOV32rm $noreg, 4, %103:gr64_nosp, @key_array, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
SU(2):   MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %68:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
SU(3):   %69:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
SU(5):   %70:gr32 = COPY %68:gr32, debug-location !450; is.c:410:35
SU(4):   $cl = COPY %69:gr8, debug-location !450; is.c:410:35
SU(6):   %70:gr32 = SAR32rCL %70:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !450; is.c:410:35
SU(7):   %71:gr64_nosp = MOVSX64rr32 %70:gr32, debug-location !451; is.c:410:19
SU(8):   %102:gr64_nosp = MOVSX64rm32 $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
SU(9):   %74:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
SU(10):   MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
SU(11):   MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
SU(12):   %75:gr32 = LEA64_32r %103:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
SU(13):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %75:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32

********** MI Scheduling **********
rank:%bb.15 for.end56
  From: MOV64mi32 %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, @key_buff2, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, @key_buff2, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, @key_buff2, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   MOV64mi32 %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, @key_buff2, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
SU(1):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12

********** MI Scheduling **********
rank:%bb.17 for.body59
  From: %104:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
    To: JMP_1 %bb.16, debug-location !471; is.c:422:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %104:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%104
    SU(1): Data Latency=4 Reg=%104
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi $noreg, 4, %104:gr64_nosp, @key_buff1, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%104
  Single Issue       : false;
SU(2):   %65:gr32 = LEA64_32r %104:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%104
  Successors:
    SU(3): Data Latency=1 Reg=%65
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %65:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%65
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16, debug-location !471; is.c:422:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %65:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %65:gr32 = LEA64_32r %104:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi $noreg, 4, %104:gr64_nosp, @key_buff1, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %104:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %104:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
SU(1):   MOV32mi $noreg, 4, %104:gr64_nosp, @key_buff1, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
SU(2):   %65:gr32 = LEA64_32r %104:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %65:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31

********** MI Scheduling **********
rank:%bb.18 for.end64
  From: MOV64mi32 %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, @key_buff1, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, @key_buff1, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, @key_buff1, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   MOV64mi32 %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, @key_buff1, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
SU(1):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12

********** MI Scheduling **********
rank:%bb.20 for.body67
  From: %59:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
    To: JMP_1 %bb.19, debug-location !487; is.c:433:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %59:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%59
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %60:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%60
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %61:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%61
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %62:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %61:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%61
    SU(1): Data Latency=4 Reg=%60
  Successors:
    SU(4): Data Latency=4 Reg=%62
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %59:gr64, 4, %62:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%62
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%59
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.19, debug-location !487; is.c:433:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
  Ready @3c
  BotQ.A TopLatency SU(5) 8c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %59:gr64, 4, %62:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %62:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %61:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %61:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %60:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %59:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %59:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
SU(1):   %60:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
SU(2):   %61:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
SU(3):   %62:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %61:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
SU(4):   INC32m %59:gr64, 4, %62:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
SU(5):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32

********** MI Scheduling **********
rank:%bb.23 for.body78
  From: %56:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
    To: JMP_1 %bb.22, debug-location !504; is.c:440:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %56:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%56
    SU(2): Data Latency=4 Reg=%56
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%57
    SU(2): Data Latency=4 Reg=%57
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %58:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%57
    SU(0): Data Latency=4 Reg=%56
  Successors:
    SU(3): Data Latency=4 Reg=%58
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   ADD32mr %56:gr64, 4, %57:gr64_nosp, 4, $noreg, %58:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%58
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%57
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%56
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.22, debug-location !504; is.c:440:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
  Ready @3c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) ADD32mr %56:gr64, 4, %57:gr64_nosp, 4, $noreg, %58:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %58:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %56:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %56:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
SU(1):   %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
SU(2):   %58:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
SU(3):   ADD32mr %56:gr64, 4, %57:gr64_nosp, 4, $noreg, %58:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
SU(4):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35

********** MI Scheduling **********
rank:%bb.26 for.body90
  From: %25:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
    To: JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %25:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(1):   %26:gr32 = MOV32rm $noreg, 4, %25:gr64_nosp, @partial_verify_vals, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%25
  Successors:
    SU(3): Data Latency=4 Reg=%26
    SU(2): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(2):   MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %26:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(3):   TEST32rr %26:gr32, %26:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) TEST32rr %26:gr32, %26:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %26:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %26:gr32 = MOV32rm $noreg, 4, %25:gr64_nosp, @partial_verify_vals, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %25:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %25:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
SU(1):   %26:gr32 = MOV32rm $noreg, 4, %25:gr64_nosp, @partial_verify_vals, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
SU(2):   MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %26:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
SU(3):   TEST32rr %26:gr32, %26:gr32, implicit-def $eflags, debug-location !520; is.c:448:15

********** MI Scheduling **********
rank:%bb.28 if.then
  From: %29:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
    To: JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(1):   %30:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%30
  Single Issue       : false;
SU(2):   %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%30
    SU(0): Data Latency=4 Reg=%29
  Successors:
    SU(3): Data Latency=4 Reg=%31
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %31:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%31
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %31:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %30:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %29:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
SU(1):   %30:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
SU(2):   %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
SU(3):   MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %31:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
SU(4):   MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
SU(5):   CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23

********** MI Scheduling **********
rank:%bb.31 if.then102
  From: %44:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
    To: JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %44:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(1):   %46:gr32 = MOV32rm $noreg, 4, %44:gr64_nosp, @test_rank_array, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%44
  Successors:
    SU(2): Data Latency=4 Reg=%46
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %46:gr32 = nsw ADD32rm %46:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%46
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%46
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %46:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%46
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %46:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
  Ready @4c
  BotQ.A TopLatency SU(3) 12c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %46:gr32 = nsw ADD32rm %46:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %46:gr32 = MOV32rm $noreg, 4, %44:gr64_nosp, @test_rank_array, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %44:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %44:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
SU(1):   %46:gr32 = MOV32rm $noreg, 4, %44:gr64_nosp, @test_rank_array, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
SU(2):   %46:gr32 = nsw ADD32rm %46:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %46:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34

********** MI Scheduling **********
rank:%bb.34 if.else109
  From: %39:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
    To: JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   %41:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @test_rank_array, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    SU(2): Data Latency=4 Reg=%41
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %41:gr32 = nsw SUB32rm %41:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%41
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%41
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %41:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%41
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %41:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
  Ready @4c
  BotQ.A TopLatency SU(3) 12c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %41:gr32 = nsw SUB32rm %41:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %41:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @test_rank_array, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %39:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
SU(1):   %41:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @test_rank_array, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
SU(2):   %41:gr32 = nsw SUB32rm %41:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %41:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: $rdi = MOV32ri64 @.str.1, debug-location !573; is.c:539:17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %50:gr32, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %51:gr32, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %51:gr32, debug-location !573; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %50:gr32, debug-location !573; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.1, debug-location !573; is.c:539:17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $rdi = MOV32ri64 @.str.1, debug-location !573; is.c:539:17
SU(1):   $esi = COPY %50:gr32, debug-location !573; is.c:539:17
SU(2):   $edx = COPY %51:gr32, debug-location !573; is.c:539:17
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: %50:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %50:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %51:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %51:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %50:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
SU(1):   %51:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40

********** MI Scheduling **********
rank:%bb.41 if.then127
  From: %24:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %24:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %24:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%24
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %24:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %24:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %24:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
SU(1):   MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %24:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29

********** INTERVALS **********
CL [816r,848r:0)[1464r,1472r:1)  0@816r 1@1464r
DIL [0B,16r:0)[3504r,3568r:1)  0@0B-phi 1@3504r
DIH [0B,16r:0)[3504r,3568r:1)  0@0B-phi 1@3504r
HDI [0B,16r:0)[3504r,3568r:1)  0@0B-phi 1@3504r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [64r,160r:0)  0@64r weight:0.000000e+00
%3 [112r,144r:0)[144r,160r:1)  0@112r 1@144r weight:0.000000e+00
%24 [3728r,3744r:0)  0@3728r weight:0.000000e+00
%25 [2496r,2512r:0)  0@2496r weight:0.000000e+00
%26 [2512r,2544r:0)  0@2512r weight:0.000000e+00
%29 [2672r,2704r:0)  0@2672r weight:0.000000e+00
%30 [2688r,2704r:0)  0@2688r weight:0.000000e+00
%31 [2704r,2720r:0)  0@2704r weight:0.000000e+00
%39 [3168r,3184r:0)  0@3168r weight:0.000000e+00
%41 [3184r,3216r:0)[3216r,3232r:1)  0@3184r 1@3216r weight:0.000000e+00
%44 [2944r,2960r:0)  0@2944r weight:0.000000e+00
%46 [2960r,2992r:0)[2992r,3008r:1)  0@2960r 1@2992r weight:0.000000e+00
%50 [3440r,3520r:0)  0@3440r weight:0.000000e+00
%51 [3456r,3536r:0)  0@3456r weight:0.000000e+00
%56 [2256r,2304r:0)  0@2256r weight:0.000000e+00
%57 [2272r,2304r:0)  0@2272r weight:0.000000e+00
%58 [2288r,2304r:0)  0@2288r weight:0.000000e+00
%59 [2032r,2096r:0)  0@2032r weight:0.000000e+00
%60 [2048r,2080r:0)  0@2048r weight:0.000000e+00
%61 [2064r,2080r:0)  0@2064r weight:0.000000e+00
%62 [2080r,2096r:0)  0@2080r weight:0.000000e+00
%65 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%68 [1392r,1584r:0)  0@1392r weight:0.000000e+00
%69 [1424r,1464r:0)  0@1424r weight:0.000000e+00
%70 [1456r,1472r:0)[1472r,1488r:1)  0@1456r 1@1472r weight:0.000000e+00
%71 [1488r,1568r:0)  0@1488r weight:0.000000e+00
%74 [1552r,1568r:0)  0@1552r weight:0.000000e+00
%75 [1616r,1632r:0)  0@1616r weight:0.000000e+00
%79 [1120r,1152r:0)[1152r,1168r:1)  0@1120r 1@1152r weight:0.000000e+00
%80 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%84 [800r,816r:0)  0@800r weight:0.000000e+00
%85 [784r,848r:0)[848r,864r:1)  0@784r 1@848r weight:0.000000e+00
%86 [864r,880r:0)  0@864r weight:0.000000e+00
%87 [912r,928r:0)  0@912r weight:0.000000e+00
%90 [592r,608r:0)  0@592r weight:0.000000e+00
%93 [304r,320r:0)  0@304r weight:0.000000e+00
%94 [320r,336r:0)  0@320r weight:0.000000e+00
%95 [368r,384r:0)  0@368r weight:0.000000e+00
%98 [272r,368r:0)  0@272r weight:0.000000e+00
%99 [528r,592r:0)  0@528r weight:0.000000e+00
%100 [752r,912r:0)  0@752r weight:0.000000e+00
%101 [1088r,1200r:0)  0@1088r weight:0.000000e+00
%102 [1504r,1584r:0)  0@1504r weight:0.000000e+00
%103 [1360r,1616r:0)  0@1360r weight:0.000000e+00
%104 [1792r,1856r:0)  0@1792r weight:0.000000e+00
RegMasks: 3568r
********** MACHINEINSTRS **********
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
48B	  MOV32mi %stack.5.shift, 1, $noreg, 0, $noreg, 11, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
64B	  %1:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
96B	  MOV32mr $noreg, 4, %1:gr64_nosp, @key_array, $noreg, %1.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
112B	  %3:gr32 = MOV32ri 2097152
144B	  %3:gr32 = nsw SUB32rr %3:gr32(tied-def 0), %1.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
160B	  MOV32mr $noreg, 4, %1:gr64_nosp, @key_array + 40, $noreg, %3:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
176B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12

192B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

208B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !371 :: (dereferenceable load 4 from %ir.i); is.c:389:19
224B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !372; is.c:389:5
240B	  JMP_1 %bb.2, debug-location !372; is.c:389:5

256B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  %98:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
304B	  %93:gr64_nosp = MOVSX64rm32 $noreg, 4, %98:gr64_nosp, @test_index_array, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
320B	  %94:gr32 = MOV32rm $noreg, 4, %93:gr64_nosp, @key_array, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
336B	  MOV32mr $noreg, 4, %98:gr64_nosp, @partial_verify_vals, $noreg, %94:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
368B	  %95:gr32 = LEA64_32r %98:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
384B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %95:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
400B	  JMP_1 %bb.1, debug-location !380; is.c:389:5

416B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

432B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12

448B	bb.4.for.cond9:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

464B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !388 :: (dereferenceable load 4 from %ir.i); is.c:395:19
480B	  JCC_1 %bb.6, 15, implicit killed $eflags, debug-location !389; is.c:395:5
496B	  JMP_1 %bb.5, debug-location !389; is.c:395:5

512B	bb.5.for.body11:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

528B	  %99:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
560B	  MOV32mi $noreg, 4, %99:gr64_nosp, @bucket_size, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
592B	  %90:gr32 = LEA64_32r %99:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
608B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %90:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
624B	  JMP_1 %bb.4, debug-location !394; is.c:395:5

640B	bb.6.for.end16:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

656B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12

672B	bb.7.for.cond17:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

688B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !402 :: (dereferenceable load 4 from %ir.i); is.c:399:19
704B	  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !403; is.c:399:5
720B	  JMP_1 %bb.8, debug-location !403; is.c:399:5

736B	bb.8.for.body19:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

752B	  %100:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
784B	  %85:gr32 = MOV32rm $noreg, 4, %100:gr64_nosp, @key_array, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
800B	  %84:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
816B	  $cl = COPY %84:gr8, debug-location !407; is.c:400:34
848B	  %85:gr32 = SAR32rCL %85:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !407; is.c:400:34
864B	  %86:gr64_nosp = MOVSX64rr32 %85:gr32, debug-location !408; is.c:400:9
880B	  INC32m $noreg, 4, %86:gr64_nosp, @bucket_size, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
912B	  %87:gr32 = LEA64_32r %100:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
928B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %87:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
944B	  JMP_1 %bb.7, debug-location !411; is.c:399:5

960B	bb.9.for.end27:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

976B	  MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
992B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 1, debug-location !415 :: (store 4 into %ir.i); is.c:404:12

1008B	bb.10.for.cond28:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1024B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !420 :: (dereferenceable load 4 from %ir.i); is.c:404:19
1040B	  JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !421; is.c:404:5
1056B	  JMP_1 %bb.11, debug-location !421; is.c:404:5

1072B	bb.11.for.body30:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1088B	  %101:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
1120B	  %79:gr32 = MOV32rm $noreg, 4, %101:gr64_nosp, @bucket_ptrs - 4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
1152B	  %79:gr32 = nsw ADD32rm %79:gr32(tied-def 0), $noreg, 4, %101:gr64_nosp, @bucket_size - 4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
1168B	  MOV32mr $noreg, 4, %101:gr64_nosp, @bucket_ptrs, $noreg, %79:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
1200B	  %80:gr32 = LEA64_32r %101:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
1216B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %80:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
1232B	  JMP_1 %bb.10, debug-location !433; is.c:404:5

1248B	bb.12.for.end42:
	; predecessors: %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1264B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12

1280B	bb.13.for.cond43:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

1296B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !441 :: (dereferenceable load 4 from %ir.i); is.c:408:19
1312B	  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !442; is.c:408:5
1328B	  JMP_1 %bb.14, debug-location !442; is.c:408:5

1344B	bb.14.for.body45:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1360B	  %103:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
1392B	  %68:gr32 = MOV32rm $noreg, 4, %103:gr64_nosp, @key_array, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
1408B	  MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %68:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
1424B	  %69:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
1456B	  %70:gr32 = COPY %68:gr32, debug-location !450; is.c:410:35
1464B	  $cl = COPY %69:gr8, debug-location !450; is.c:410:35
1472B	  %70:gr32 = SAR32rCL %70:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !450; is.c:410:35
1488B	  %71:gr64_nosp = MOVSX64rr32 %70:gr32, debug-location !451; is.c:410:19
1504B	  %102:gr64_nosp = MOVSX64rm32 $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
1552B	  %74:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
1568B	  MOV32mr $noreg, 4, %71:gr64_nosp, @bucket_ptrs, $noreg, %74:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
1584B	  MOV32mr $noreg, 4, %102:gr64_nosp, @key_buff2, $noreg, %68:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
1616B	  %75:gr32 = LEA64_32r %103:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
1632B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %75:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
1648B	  JMP_1 %bb.13, debug-location !456; is.c:408:5

1664B	bb.15.for.end56:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

1680B	  MOV64mi32 %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, @key_buff2, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
1696B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12

1712B	bb.16.for.cond57:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

1728B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 2097151, implicit-def $eflags, debug-location !465 :: (dereferenceable load 4 from %ir.i); is.c:422:19
1744B	  JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !466; is.c:422:5
1760B	  JMP_1 %bb.17, debug-location !466; is.c:422:5

1776B	bb.17.for.body59:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

1792B	  %104:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
1824B	  MOV32mi $noreg, 4, %104:gr64_nosp, @key_buff1, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
1856B	  %65:gr32 = LEA64_32r %104:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
1872B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %65:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
1888B	  JMP_1 %bb.16, debug-location !471; is.c:422:5

1904B	bb.18.for.end64:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

1920B	  MOV64mi32 %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, @key_buff1, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
1936B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12

1952B	bb.19.for.cond65:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

1968B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !480 :: (dereferenceable load 4 from %ir.i); is.c:433:19
1984B	  JCC_1 %bb.21, 15, implicit killed $eflags, debug-location !481; is.c:433:5
2000B	  JMP_1 %bb.20, debug-location !481; is.c:433:5

2016B	bb.20.for.body67:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2032B	  %59:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
2048B	  %60:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
2064B	  %61:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
2080B	  %62:gr64_nosp = MOVSX64rm32 %60:gr64, 4, %61:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
2096B	  INC32m %59:gr64, 4, %62:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
2112B	  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
2128B	  JMP_1 %bb.19, debug-location !487; is.c:433:5

2144B	bb.21.for.end75:
	; predecessors: %bb.19
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2160B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12

2176B	bb.22.for.cond76:
	; predecessors: %bb.21, %bb.23
	  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

2192B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 2097150, implicit-def $eflags, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:440:19
2208B	  JCC_1 %bb.24, 15, implicit killed $eflags, debug-location !496; is.c:440:5
2224B	  JMP_1 %bb.23, debug-location !496; is.c:440:5

2240B	bb.23.for.body78:
	; predecessors: %bb.22
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2256B	  %56:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
2272B	  %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
2288B	  %58:gr32 = MOV32rm %56:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
2304B	  ADD32mr %56:gr64, 4, %57:gr64_nosp, 4, $noreg, %58:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
2320B	  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
2336B	  JMP_1 %bb.22, debug-location !504; is.c:440:5

2352B	bb.24.for.end87:
	; predecessors: %bb.22
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

2368B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12

2416B	bb.25.for.cond88:
	; predecessors: %bb.24, %bb.39
	  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

2432B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !512 :: (dereferenceable load 4 from %ir.i); is.c:446:19
2448B	  JCC_1 %bb.40, 15, implicit killed $eflags, debug-location !513; is.c:446:5
2464B	  JMP_1 %bb.26, debug-location !513; is.c:446:5

2480B	bb.26.for.body90:
	; predecessors: %bb.25
	  successors: %bb.27(0x40000000), %bb.39(0x40000000); %bb.27(50.00%), %bb.39(50.00%)

2496B	  %25:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
2512B	  %26:gr32 = MOV32rm $noreg, 4, %25:gr64_nosp, @partial_verify_vals, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
2528B	  MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %26:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
2544B	  TEST32rr %26:gr32, %26:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
2560B	  JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
2576B	  JMP_1 %bb.27, debug-location !521; is.c:448:19

2592B	bb.27.land.lhs.true:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.39(0x40000000); %bb.28(50.00%), %bb.39(50.00%)

2608B	  CMP32mi %stack.2.k, 1, $noreg, 0, $noreg, 33554431, implicit-def $eflags, debug-location !523 :: (dereferenceable load 4 from %ir.k); is.c:448:24
2624B	  JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !524; is.c:448:13
2640B	  JMP_1 %bb.28, debug-location !524; is.c:448:13

2656B	bb.28.if.then:
	; predecessors: %bb.27
	  successors: %bb.31(0x40000000), %bb.29(0x40000000); %bb.31(50.00%), %bb.29(50.00%)

2672B	  %29:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
2688B	  %30:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
2704B	  %31:gr32 = MOV32rm %29:gr64, 4, %30:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
2720B	  MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %31:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
2736B	  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
2752B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
2768B	  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
2784B	  JMP_1 %bb.29, debug-location !536; is.c:496:28

2800B	bb.29.lor.lhs.false:
	; predecessors: %bb.28
	  successors: %bb.31(0x40000000), %bb.30(0x40000000); %bb.31(50.00%), %bb.30(50.00%)

2816B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !538 :: (dereferenceable load 4 from %ir.i); is.c:496:33
2832B	  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !539; is.c:496:38
2848B	  JMP_1 %bb.30, debug-location !539; is.c:496:38

2864B	bb.30.lor.lhs.false100:
	; predecessors: %bb.29
	  successors: %bb.31(0x40000000), %bb.34(0x40000000); %bb.31(50.00%), %bb.34(50.00%)

2880B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !541 :: (dereferenceable load 4 from %ir.i); is.c:496:43
2896B	  JCC_1 %bb.34, 5, implicit killed $eflags, debug-location !542; is.c:496:21
2912B	  JMP_1 %bb.31, debug-location !542; is.c:496:21

2928B	bb.31.if.then102:
	; predecessors: %bb.28, %bb.29, %bb.30
	  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

2944B	  %44:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
2960B	  %46:gr32 = MOV32rm $noreg, 4, %44:gr64_nosp, @test_rank_array, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
2992B	  %46:gr32 = nsw ADD32rm %46:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
3008B	  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %46:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
3024B	  JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
3040B	  JMP_1 %bb.32, debug-location !551; is.c:497:25

3056B	bb.32.if.then107:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3072B	  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 1, debug-location !552 :: (store 4 into %ir.failed); is.c:498:32
3088B	  JMP_1 %bb.37, debug-location !553; is.c:498:25

3104B	bb.33.if.else:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3120B	  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !554 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:500:44
3136B	  JMP_1 %bb.37

3152B	bb.34.if.else109:
	; predecessors: %bb.30
	  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

3168B	  %39:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
3184B	  %41:gr32 = MOV32rm $noreg, 4, %39:gr64_nosp, @test_rank_array, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
3216B	  %41:gr32 = nsw SUB32rm %41:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
3232B	  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %41:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
3248B	  JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
3264B	  JMP_1 %bb.35, debug-location !563; is.c:503:25

3280B	bb.35.if.then114:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3296B	  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 1, debug-location !564 :: (store 4 into %ir.failed); is.c:504:32
3312B	  JMP_1 %bb.37, debug-location !565; is.c:504:25

3328B	bb.36.if.else115:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3344B	  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !566 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:506:44

3360B	bb.37.if.end118:
	; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

3376B	  CMP32mi8 %stack.8.failed, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.failed); is.c:538:24
3392B	  JCC_1 %bb.39, 5, implicit killed $eflags, debug-location !570; is.c:538:17
3408B	  JMP_1 %bb.38, debug-location !570; is.c:538:17

3424B	bb.38.if.then120:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

3440B	  %50:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
3456B	  %51:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
3472B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
3504B	  $rdi = MOV32ri64 @.str.1, debug-location !573; is.c:539:17
3520B	  $esi = COPY %50:gr32, debug-location !573; is.c:539:17
3536B	  $edx = COPY %51:gr32, debug-location !573; is.c:539:17
3552B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
3568B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
3584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17

3600B	bb.39.if.end122:
	; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3616B	  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !574 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:446:39
3632B	  JMP_1 %bb.25, debug-location !575; is.c:446:5

3648B	bb.40.for.end125:
	; predecessors: %bb.25
	  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

3664B	  CMP32mi8 %stack.0.iteration.addr, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !580 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:19
3680B	  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !581; is.c:549:9
3696B	  JMP_1 %bb.41, debug-location !581; is.c:549:9

3712B	bb.41.if.then127:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

3728B	  %24:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
3744B	  MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %24:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29

3760B	bb.42.if.end128:
	; predecessors: %bb.40, %bb.41

3776B	  RET 0, debug-location !585; is.c:551:1

# End machine code for function rank.

Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
  $rdi = MOV32ri64 @.str.2, debug-location !611; is.c:573:15
  $rsi = MOV32ri64 @.str.3, debug-location !611; is.c:573:15
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
  %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
  MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
  JMP_1 %bb.1, debug-location !615; is.c:573:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %5:gr64 = MOV64rm %stack.7.fp, 1, $noreg, 0, $noreg, debug-location !616 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
  $rdi = COPY %5:gr64, debug-location !618; is.c:574:9
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !618; is.c:574:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
  MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 1, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !621; is.c:577:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !621; is.c:577:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !622 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !624; is.c:578:9
  JMP_1 %bb.3, debug-location !624; is.c:578:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
  $edi = MOV32ri 1, debug-location !625; is.c:579:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !625; is.c:579:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
  $edi = MOV32ri 2, debug-location !627; is.c:580:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !627; is.c:580:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
  $edi = MOV32ri 3, debug-location !628; is.c:581:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !628; is.c:581:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !630 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !632; is.c:584:9
  JMP_1 %bb.5, debug-location !632; is.c:584:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
  $edi = MOV32ri 3, debug-location !633; is.c:585:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !633; is.c:585:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9

bb.6.if.end6:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12

bb.7.for.cond:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !639 :: (dereferenceable load 4 from %ir.i); is.c:588:19
  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !640; is.c:588:5
  JMP_1 %bb.8, debug-location !640; is.c:588:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %102:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  %97:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_index_array, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
  MOV32mr $noreg, 4, %102:gr64_nosp, @test_index_array, $noreg, %97:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
  %98:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_rank_array, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
  MOV32mr $noreg, 4, %102:gr64_nosp, @test_rank_array, $noreg, %98:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
  %99:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %99:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
  JMP_1 %bb.7, debug-location !652; is.c:588:5

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
  $rdi = MOV32ri64 @.str.4, debug-location !655; is.c:617:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
  $rdi = MOV32ri64 @.str.5, debug-location !656; is.c:618:5
  $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
  $edx = MOV32ri 66, debug-location !656; is.c:618:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
  $rdi = MOV32ri64 @.str.6, debug-location !657; is.c:619:5
  $esi = MOV32ri 10, debug-location !657; is.c:619:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !658 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
  JCC_1 %bb.11, 4, implicit killed $eflags, debug-location !660; is.c:621:9
  JMP_1 %bb.10, debug-location !660; is.c:621:9

bb.10.if.then18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
  $edi = MOV32ri 1, debug-location !661; is.c:622:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !661; is.c:622:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9

bb.11.if.end19:
; predecessors: %bb.9, %bb.10
  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
  %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %26:fr64, debug-location !662; is.c:625:5
  $xmm1 = COPY %27:fr64, debug-location !662; is.c:625:5
  CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !663 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
  JCC_1 %bb.13, 4, implicit killed $eflags, debug-location !665; is.c:627:9
  JMP_1 %bb.12, debug-location !665; is.c:627:9

bb.12.if.then21:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
  $edi = MOV32ri 1, debug-location !666; is.c:628:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !666; is.c:628:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9

bb.13.if.end22:
; predecessors: %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
  $edi = MOV32ri 1, debug-location !667; is.c:632:5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !667; is.c:632:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !668 :: (store 4 into @passed_verification); is.c:635:25
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
  $rdi = MOV32ri64 @.str.7, debug-location !669; is.c:638:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !671; is.c:641:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !671; is.c:641:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
  MOV32mi %stack.4.iteration, 1, $noreg, 0, $noreg, 1, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:20

bb.14.for.cond28:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  CMP32mi8 %stack.4.iteration, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !677 :: (dereferenceable load 4 from %ir.iteration); is.c:646:35
  JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !678; is.c:646:5
  JMP_1 %bb.15, debug-location !678; is.c:646:5

bb.15.for.body30:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %89:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !682; is.c:648:13
  $rdi = MOV32ri64 @.str.8, debug-location !682; is.c:648:13
  $esi = COPY %89:gr32, debug-location !682; is.c:648:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !682; is.c:648:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !682; is.c:648:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !682; is.c:648:13
  %94:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !683 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:9
  $edi = COPY %94:gr32, debug-location !684; is.c:650:9
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !684; is.c:650:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:9
  INC32m %stack.4.iteration, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !685 :: (store 4 into %ir.iteration), (dereferenceable load 4 from %ir.iteration); is.c:646:63
  JMP_1 %bb.14, debug-location !686; is.c:646:5

bb.16.for.end34:
; predecessors: %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !689; is.c:657:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !689; is.c:657:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !689; is.c:657:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !689; is.c:657:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !690; is.c:658:19
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !690; is.c:658:19
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !690; is.c:658:19
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !690; is.c:658:19
  %37:fr64 = COPY killed $xmm0, debug-location !690; is.c:658:19
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %37:fr64, debug-location !691 :: (store 8 into %ir.timecounter); is.c:658:17
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !692 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !694; is.c:662:9
  JMP_1 %bb.17, debug-location !694; is.c:662:9

bb.17.if.then41:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !695; is.c:663:9
  $edi = MOV32ri 2, debug-location !695; is.c:663:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !695; is.c:663:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !695; is.c:663:9

bb.18.if.end42:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !696; is.c:664:5
  CALL64pcrel32 @full_verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !696; is.c:664:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !696; is.c:664:5
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !697 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
  JCC_1 %bb.20, 4, implicit killed $eflags, debug-location !699; is.c:665:9
  JMP_1 %bb.19, debug-location !699; is.c:665:9

bb.19.if.then44:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !700; is.c:666:9
  $edi = MOV32ri 2, debug-location !700; is.c:666:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !700; is.c:666:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !700; is.c:666:9

bb.20.if.end45:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !701 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
  JCC_1 %bb.22, 4, implicit killed $eflags, debug-location !703; is.c:668:9
  JMP_1 %bb.21, debug-location !703; is.c:668:9

bb.21.if.then47:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !704; is.c:669:9
  $edi = MOV32ri 3, debug-location !704; is.c:669:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !704; is.c:669:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !704; is.c:669:9

bb.22.if.end48:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

  CMP32mi8 $rip, 1, $noreg, @passed_verification, $noreg, 51, implicit-def $eflags, debug-location !707 :: (dereferenceable load 4 from @passed_verification); is.c:672:29
  JCC_1 %bb.24, 4, implicit killed $eflags, debug-location !708; is.c:672:9
  JMP_1 %bb.23, debug-location !708; is.c:672:9

bb.23.if.then50:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !709 :: (store 4 into @passed_verification); is.c:673:29

bb.24.if.end51:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

  %43:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %46:fr64 = DIVSDrr %46:fr64(tied-def 0), %43:fr64, debug-location !713; is.c:676:49
  %46:fr64 = DIVSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !714 :: (load 8 from constant-pool); is.c:676:63
  undef %101.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !715 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  ADJCALLSTACKDOWN64 80, 0, 80, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !716; is.c:674:5
  $rdi = MOV32ri64 @.str.9, debug-location !716; is.c:674:5
  $esi = MOV32ri 66, debug-location !716; is.c:674:5
  $edx = MOV32ri 524288, debug-location !716; is.c:674:5
  $ecx = MOV32ri 64, debug-location !716; is.c:674:5
  $r8d = MOV32ri 0, debug-location !716; is.c:674:5
  $r9d = MOV32ri 10, debug-location !716; is.c:674:5
  $xmm0 = COPY %43:fr64, debug-location !716; is.c:674:5
  $xmm1 = COPY %46:fr64, debug-location !716; is.c:674:5
  PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.17, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.16, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.15, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.14, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.13, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.12, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.11, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64r %101:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  PUSH64i32 @.str.10, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  CALL64pcrel32 @c_print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !716; is.c:674:5
  ADJCALLSTACKUP64 80, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !716; is.c:674:5
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !717 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !719; is.c:681:9
  JMP_1 %bb.25, debug-location !719; is.c:681:9

bb.25.if.then54:
; predecessors: %bb.24
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !725; is.c:684:19
  $edi = MOV32ri 3, debug-location !725; is.c:684:19
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !725; is.c:684:19
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !725; is.c:684:19
  %56:fr64 = COPY killed $xmm0, debug-location !725; is.c:684:19
  MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %56:fr64, debug-location !726 :: (store 8 into %ir.t_total); is.c:684:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:685:9
  $rdi = MOV32ri64 @.str.19, debug-location !727; is.c:685:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !727; is.c:685:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !727; is.c:685:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:685:9
  %61:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !728 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:686:9
  $rdi = MOV32ri64 @.str.20, debug-location !729; is.c:686:9
  $xmm0 = COPY %61:fr64, debug-location !729; is.c:686:9
  $al = MOV8ri 1, debug-location !729; is.c:686:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:686:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:686:9
  %65:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  %66:fr64 = FsFLD0SD
  UCOMISDrr %65:fr64, %66:fr64, implicit-def $eflags, debug-location !733; is.c:687:13
  JCC_1 %bb.27, 5, implicit $eflags, debug-location !733; is.c:687:13
  JCC_1 %bb.27, 10, implicit killed $eflags, debug-location !733; is.c:687:13
  JMP_1 %bb.26, debug-location !733; is.c:687:13

bb.26.if.then59:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %67:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %67:gr64, debug-location !734 :: (store 8 into %ir.t_total); is.c:688:21

bb.27.if.end60:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !736; is.c:689:23
  $edi = MOV32ri 1, debug-location !736; is.c:689:23
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !736; is.c:689:23
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !736; is.c:689:23
  %69:fr64 = COPY killed $xmm0, debug-location !736; is.c:689:23
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %69:fr64, debug-location !737 :: (store 8 into %ir.timecounter); is.c:689:21
  %72:fr64 = COPY %69:fr64, debug-location !740; is.c:690:33
  %72:fr64 = DIVSDrm %72:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !740 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
  %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  %72:fr64 = MULSDrr %72:fr64(tied-def 0), %71:fr64, debug-location !741; is.c:690:43
  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %72:fr64, debug-location !742 :: (store 8 into %ir.t_percent); is.c:690:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !745; is.c:691:9
  $rdi = MOV32ri64 @.str.21, debug-location !745; is.c:691:9
  $xmm0 = COPY %69:fr64, debug-location !745; is.c:691:9
  $xmm1 = COPY %72:fr64, debug-location !745; is.c:691:9
  $al = MOV8ri 2, debug-location !745; is.c:691:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !745; is.c:691:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !745; is.c:691:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !746; is.c:692:23
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !746; is.c:692:23
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !746; is.c:692:23
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !746; is.c:692:23
  %77:fr64 = COPY killed $xmm0, debug-location !746; is.c:692:23
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %77:fr64, debug-location !747 :: (store 8 into %ir.timecounter); is.c:692:21
  %79:fr64 = COPY %77:fr64, debug-location !750; is.c:693:33
  %79:fr64 = DIVSDrm %79:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !750 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
  %79:fr64 = MULSDrr %79:fr64(tied-def 0), %71:fr64, debug-location !751; is.c:693:43
  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %79:fr64, debug-location !752 :: (store 8 into %ir.t_percent); is.c:693:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !755; is.c:694:9
  $rdi = MOV32ri64 @.str.22, debug-location !755; is.c:694:9
  $xmm0 = COPY %77:fr64, debug-location !755; is.c:694:9
  $xmm1 = COPY %79:fr64, debug-location !755; is.c:694:9
  $al = MOV8ri 2, debug-location !755; is.c:694:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !755; is.c:694:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !755; is.c:694:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !756; is.c:695:23
  $edi = MOV32ri 2, debug-location !756; is.c:695:23
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !756; is.c:695:23
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !756; is.c:695:23
  %83:fr64 = COPY killed $xmm0, debug-location !756; is.c:695:23
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %83:fr64, debug-location !757 :: (store 8 into %ir.timecounter); is.c:695:21
  %85:fr64 = COPY %83:fr64, debug-location !760; is.c:696:33
  %85:fr64 = DIVSDrm %85:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !760 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
  %85:fr64 = MULSDrr %85:fr64(tied-def 0), %71:fr64, debug-location !761; is.c:696:43
  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %85:fr64, debug-location !762 :: (store 8 into %ir.t_percent); is.c:696:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !765; is.c:697:9
  $rdi = MOV32ri64 @.str.23, debug-location !765; is.c:697:9
  $xmm0 = COPY %83:fr64, debug-location !765; is.c:697:9
  $xmm1 = COPY %85:fr64, debug-location !765; is.c:697:9
  $al = MOV8ri 2, debug-location !765; is.c:697:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !765; is.c:697:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !765; is.c:697:9

bb.28.if.end72:
; predecessors: %bb.24, %bb.27

  $eax = MOV32r0 implicit-def dead $eflags, debug-location !767; is.c:703:5
  RET 0, killed $eax, debug-location !767; is.c:703:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
    To: JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
SU(1):   MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = MOV32ri64 @.str.2, debug-location !611; is.c:573:15
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.2, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.3, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.3, debug-location !611; is.c:573:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.2, debug-location !611; is.c:573:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = MOV32ri64 @.str.2, debug-location !611; is.c:573:15
SU(1):   $rsi = MOV32ri64 @.str.3, debug-location !611; is.c:573:15

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
SU(5):   MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14

********** MI Scheduling **********
main:%bb.8 for.body
  From: %102:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
    To: JMP_1 %bb.7, debug-location !652; is.c:588:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %102:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%102
    SU(4): Data Latency=4 Reg=%102
    SU(3): Data Latency=4 Reg=%102
    SU(2): Data Latency=4 Reg=%102
    SU(1): Data Latency=4 Reg=%102
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %97:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_index_array, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
  Successors:
    SU(2): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(2):   MOV32mr $noreg, 4, %102:gr64_nosp, @test_index_array, $noreg, %97:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%97
    SU(0): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(3):   %98:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_rank_array, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
  Successors:
    SU(4): Data Latency=4 Reg=%98
  Single Issue       : false;
SU(4):   MOV32mr $noreg, 4, %102:gr64_nosp, @test_rank_array, $noreg, %98:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%98
    SU(0): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(5):   %99:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
  Successors:
    SU(6): Data Latency=1 Reg=%99
  Single Issue       : false;
SU(6):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %99:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%99
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7, debug-location !652; is.c:588:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %99:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 5 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %99:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr $noreg, 4, %102:gr64_nosp, @test_rank_array, $noreg, %98:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %98:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_rank_array, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr $noreg, 4, %102:gr64_nosp, @test_index_array, $noreg, %97:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
  Ready @1c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %97:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_index_array, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %102:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  Ready @9c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %102:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
SU(1):   %97:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_index_array, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
SU(2):   MOV32mr $noreg, 4, %102:gr64_nosp, @test_index_array, $noreg, %97:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
SU(3):   %98:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_rank_array, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
SU(4):   MOV32mr $noreg, 4, %102:gr64_nosp, @test_rank_array, $noreg, %98:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
SU(5):   %99:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
SU(6):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %99:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39

********** MI Scheduling **********
main:%bb.9 for.end
  From: $rdi = MOV32ri64 @.str.6, debug-location !657; is.c:619:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.6, debug-location !657; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 10, debug-location !657; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 10, debug-location !657; is.c:619:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.6, debug-location !657; is.c:619:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = MOV32ri64 @.str.6, debug-location !657; is.c:619:5
SU(1):   $esi = MOV32ri 10, debug-location !657; is.c:619:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $rdi = MOV32ri64 @.str.5, debug-location !656; is.c:618:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.5, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 66, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 66, debug-location !656; is.c:618:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.5, debug-location !656; is.c:618:5
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = MOV32ri64 @.str.5, debug-location !656; is.c:618:5
SU(1):   $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
SU(2):   $edx = MOV32ri 66, debug-location !656; is.c:618:5
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $rdi = MOV32ri64 @.str.4, debug-location !655; is.c:617:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !655; is.c:617:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.4, debug-location !655; is.c:617:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !655; is.c:617:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5

********** MI Scheduling **********
main:%bb.11 if.end19
  From: %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(1):   %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(2):   $xmm0 = COPY %26:fr64, debug-location !662; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %27:fr64, debug-location !662; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%27
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %27:fr64, debug-location !662; is.c:625:5
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %26:fr64, debug-location !662; is.c:625:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %26:fr64, debug-location !662; is.c:625:5
SU(3):   $xmm1 = COPY %27:fr64, debug-location !662; is.c:625:5

********** MI Scheduling **********
main:%bb.13 if.end22
  From: $rdi = MOV32ri64 @.str.7, debug-location !669; is.c:638:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.7, debug-location !669; is.c:638:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.7, debug-location !669; is.c:638:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = MOV32ri64 @.str.7, debug-location !669; is.c:638:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9

********** MI Scheduling **********
main:%bb.15 for.body30
  From: $rdi = MOV32ri64 @.str.8, debug-location !682; is.c:648:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !682; is.c:648:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.8, debug-location !682; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %89:gr32, debug-location !682; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !682; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !682; is.c:648:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !682; is.c:648:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %89:gr32, debug-location !682; is.c:648:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.8, debug-location !682; is.c:648:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $rdi = MOV32ri64 @.str.8, debug-location !682; is.c:648:13
SU(1):   $esi = COPY %89:gr32, debug-location !682; is.c:648:13
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !682; is.c:648:13

********** MI Scheduling **********
main:%bb.16 for.end34
  From: %37:fr64 = COPY killed $xmm0, debug-location !690; is.c:658:19
    To: JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !694; is.c:662:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %37:fr64 = COPY killed $xmm0, debug-location !690; is.c:658:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%37
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %37:fr64, debug-location !691 :: (store 8 into %ir.timecounter); is.c:658:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%37
  Single Issue       : false;
SU(2):   CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !692 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !694; is.c:662:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !692 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %37:fr64, debug-location !691 :: (store 8 into %ir.timecounter); is.c:658:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %37:fr64 = COPY killed $xmm0, debug-location !690; is.c:658:19
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %37:fr64 = COPY killed $xmm0, debug-location !690; is.c:658:19
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %37:fr64, debug-location !691 :: (store 8 into %ir.timecounter); is.c:658:17
SU(2):   CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !692 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9

********** MI Scheduling **********
main:%bb.24 if.end51
  From: $rdi = MOV32ri64 @.str.9, debug-location !716; is.c:674:5
    To: PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Live In: %46 %43 
Live Out: XMM1 XMM0 R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
Top Pressure:
FR32=2
FR32X=2
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Excess PSets: 
SU(0):   $rdi = MOV32ri64 @.str.9, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(1):   $esi = MOV32ri 66, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(2):   $edx = MOV32ri 524288, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 64, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(4):   $r8d = MOV32ri 0, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(5):   $r9d = MOV32ri 10, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(6):   $xmm0 = COPY %43:fr64, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $xmm1 = COPY %46:fr64, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $xmm1 = COPY %46:fr64, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %46
  UpdateRegP: SU(7) $xmm1 = COPY %46:fr64, debug-location !716; is.c:674:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $xmm0 = COPY %43:fr64, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %43
  UpdateRegP: SU(6) $xmm0 = COPY %43:fr64, debug-location !716; is.c:674:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = MOV32ri 10, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=7
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = MOV32ri 0, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=6
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = MOV32ri 64, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=4
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 524288, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=2
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 66, debug-location !716; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=1
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.9, debug-location !716; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $rdi = MOV32ri64 @.str.9, debug-location !716; is.c:674:5
SU(1):   $esi = MOV32ri 66, debug-location !716; is.c:674:5
SU(2):   $edx = MOV32ri 524288, debug-location !716; is.c:674:5
SU(3):   $ecx = MOV32ri 64, debug-location !716; is.c:674:5
SU(4):   $r8d = MOV32ri 0, debug-location !716; is.c:674:5
SU(5):   $r9d = MOV32ri 10, debug-location !716; is.c:674:5
SU(6):   $xmm0 = COPY %43:fr64, debug-location !716; is.c:674:5
SU(7):   $xmm1 = COPY %46:fr64, debug-location !716; is.c:674:5

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %43:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
    To: ADJCALLSTACKDOWN64 80, 0, 80, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !716; is.c:674:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%43
  Single Issue       : false;
SU(1):   %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%46
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %46:fr64 = DIVSDrr %46:fr64(tied-def 0), %43:fr64, debug-location !713; is.c:676:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%46
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%43
  Successors:
    SU(3): Data Latency=10 Reg=%46
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %46:fr64 = DIVSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !714 :: (load 8 from constant-pool); is.c:676:63
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 3
  Predecessors:
    SU(2): Data Latency=10 Reg=%46
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   undef %101.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !715 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 80, 0, 80, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !716; is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %101.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !715 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %46:fr64 = DIVSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !714 :: (load 8 from constant-pool); is.c:676:63
  Ready @3c
  BotQ.A TopLatency SU(3) 14c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %46:fr64 = DIVSDrr %46:fr64(tied-def 0), %43:fr64, debug-location !713; is.c:676:49
  Ready @13c
  BotQ.A BotLatency SU(2) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  Ready @17c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %43:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
SU(1):   %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(2):   %46:fr64 = DIVSDrr %46:fr64(tied-def 0), %43:fr64, debug-location !713; is.c:676:49
SU(3):   %46:fr64 = DIVSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !714 :: (load 8 from constant-pool); is.c:676:63
SU(4):   undef %101.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !715 :: (dereferenceable load 4 from @passed_verification); is.c:677:24

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %65:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
    To: JCC_1 %bb.27, 5, implicit $eflags, debug-location !733; is.c:687:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %65:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%65
  Single Issue       : false;
SU(1):   %66:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(2):   UCOMISDrr %65:fr64, %66:fr64, implicit-def $eflags, debug-location !733; is.c:687:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%66
    SU(0): Data Latency=4 Reg=%65
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 5, implicit $eflags, debug-location !733; is.c:687:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %65:fr64, %66:fr64, implicit-def $eflags, debug-location !733; is.c:687:13
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %66:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %65:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %65:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
SU(1):   %66:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %65:fr64, %66:fr64, implicit-def $eflags, debug-location !733; is.c:687:13

********** MI Scheduling **********
main:%bb.25 if.then54
  From: $rdi = MOV32ri64 @.str.20, debug-location !729; is.c:686:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:686:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.20, debug-location !729; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %61:fr64, debug-location !729; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !729; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:686:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !729; is.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %61:fr64, debug-location !729; is.c:686:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.20, debug-location !729; is.c:686:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $rdi = MOV32ri64 @.str.20, debug-location !729; is.c:686:9
SU(1):   $xmm0 = COPY %61:fr64, debug-location !729; is.c:686:9
SU(2):   $al = MOV8ri 1, debug-location !729; is.c:686:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: $rdi = MOV32ri64 @.str.19, debug-location !727; is.c:685:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !727; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.19, debug-location !727; is.c:685:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !727; is.c:685:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !727; is.c:685:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !727; is.c:685:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.19, debug-location !727; is.c:685:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $rdi = MOV32ri64 @.str.19, debug-location !727; is.c:685:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !727; is.c:685:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %56:fr64 = COPY killed $xmm0, debug-location !725; is.c:684:19
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %56:fr64 = COPY killed $xmm0, debug-location !725; is.c:684:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%56
  Single Issue       : false;
SU(1):   MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %56:fr64, debug-location !726 :: (store 8 into %ir.t_total); is.c:684:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%56
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:685:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %56:fr64, debug-location !726 :: (store 8 into %ir.t_total); is.c:684:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %56:fr64 = COPY killed $xmm0, debug-location !725; is.c:684:19
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %56:fr64 = COPY killed $xmm0, debug-location !725; is.c:684:19
SU(1):   MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %56:fr64, debug-location !726 :: (store 8 into %ir.t_total); is.c:684:17

********** MI Scheduling **********
main:%bb.26 if.then59
  From: %67:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %67:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%67
  Single Issue       : false;
SU(1):   MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %67:gr64, debug-location !734 :: (store 8 into %ir.t_total); is.c:688:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%67
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %67:gr64, debug-location !734 :: (store 8 into %ir.t_total); is.c:688:21
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %67:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %67:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %67:gr64, debug-location !734 :: (store 8 into %ir.t_total); is.c:688:21

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $rdi = MOV32ri64 @.str.23, debug-location !765; is.c:697:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !765; is.c:697:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.23, debug-location !765; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %83:fr64, debug-location !765; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %85:fr64, debug-location !765; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !765; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !765; is.c:697:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !765; is.c:697:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %85:fr64, debug-location !765; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %83:fr64, debug-location !765; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.23, debug-location !765; is.c:697:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $rdi = MOV32ri64 @.str.23, debug-location !765; is.c:697:9
SU(1):   $xmm0 = COPY %83:fr64, debug-location !765; is.c:697:9
SU(2):   $xmm1 = COPY %85:fr64, debug-location !765; is.c:697:9
SU(3):   $al = MOV8ri 2, debug-location !765; is.c:697:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %83:fr64 = COPY killed $xmm0, debug-location !756; is.c:695:23
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !765; is.c:697:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %83:fr64 = COPY killed $xmm0, debug-location !756; is.c:695:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%83
    SU(1): Data Latency=0 Reg=%83
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %83:fr64, debug-location !757 :: (store 8 into %ir.timecounter); is.c:695:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%83
  Single Issue       : false;
SU(2):   %85:fr64 = COPY %83:fr64, debug-location !760; is.c:696:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%83
  Successors:
    SU(3): Data Latency=0 Reg=%85
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %85:fr64 = DIVSDrm %85:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !760 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%85
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%85
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %85:fr64 = MULSDrr %85:fr64(tied-def 0), %71:fr64, debug-location !761; is.c:696:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%85
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%85
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %85:fr64, debug-location !762 :: (store 8 into %ir.t_percent); is.c:696:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%85
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !765; is.c:697:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %85:fr64, debug-location !762 :: (store 8 into %ir.t_percent); is.c:696:19
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %85:fr64 = MULSDrr %85:fr64(tied-def 0), %71:fr64, debug-location !761; is.c:696:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %85:fr64 = DIVSDrm %85:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !760 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %85:fr64 = COPY %83:fr64, debug-location !760; is.c:696:33
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %83:fr64, debug-location !757 :: (store 8 into %ir.timecounter); is.c:695:21
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %83:fr64 = COPY killed $xmm0, debug-location !756; is.c:695:23
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %83:fr64 = COPY killed $xmm0, debug-location !756; is.c:695:23
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %83:fr64, debug-location !757 :: (store 8 into %ir.timecounter); is.c:695:21
SU(2):   %85:fr64 = COPY %83:fr64, debug-location !760; is.c:696:33
SU(3):   %85:fr64 = DIVSDrm %85:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !760 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
SU(4):   %85:fr64 = MULSDrr %85:fr64(tied-def 0), %71:fr64, debug-location !761; is.c:696:43
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %85:fr64, debug-location !762 :: (store 8 into %ir.t_percent); is.c:696:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $rdi = MOV32ri64 @.str.22, debug-location !755; is.c:694:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !755; is.c:694:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.22, debug-location !755; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %77:fr64, debug-location !755; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %79:fr64, debug-location !755; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !755; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !755; is.c:694:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !755; is.c:694:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %79:fr64, debug-location !755; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %77:fr64, debug-location !755; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.22, debug-location !755; is.c:694:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $rdi = MOV32ri64 @.str.22, debug-location !755; is.c:694:9
SU(1):   $xmm0 = COPY %77:fr64, debug-location !755; is.c:694:9
SU(2):   $xmm1 = COPY %79:fr64, debug-location !755; is.c:694:9
SU(3):   $al = MOV8ri 2, debug-location !755; is.c:694:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %77:fr64 = COPY killed $xmm0, debug-location !746; is.c:692:23
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !755; is.c:694:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %77:fr64 = COPY killed $xmm0, debug-location !746; is.c:692:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%77
    SU(1): Data Latency=0 Reg=%77
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %77:fr64, debug-location !747 :: (store 8 into %ir.timecounter); is.c:692:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%77
  Single Issue       : false;
SU(2):   %79:fr64 = COPY %77:fr64, debug-location !750; is.c:693:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%77
  Successors:
    SU(3): Data Latency=0 Reg=%79
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %79:fr64 = DIVSDrm %79:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !750 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%79
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%79
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %79:fr64 = MULSDrr %79:fr64(tied-def 0), %71:fr64, debug-location !751; is.c:693:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%79
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%79
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %79:fr64, debug-location !752 :: (store 8 into %ir.t_percent); is.c:693:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%79
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !755; is.c:694:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %79:fr64, debug-location !752 :: (store 8 into %ir.t_percent); is.c:693:19
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %79:fr64 = MULSDrr %79:fr64(tied-def 0), %71:fr64, debug-location !751; is.c:693:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %79:fr64 = DIVSDrm %79:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !750 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %79:fr64 = COPY %77:fr64, debug-location !750; is.c:693:33
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %77:fr64, debug-location !747 :: (store 8 into %ir.timecounter); is.c:692:21
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %77:fr64 = COPY killed $xmm0, debug-location !746; is.c:692:23
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %77:fr64 = COPY killed $xmm0, debug-location !746; is.c:692:23
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %77:fr64, debug-location !747 :: (store 8 into %ir.timecounter); is.c:692:21
SU(2):   %79:fr64 = COPY %77:fr64, debug-location !750; is.c:693:33
SU(3):   %79:fr64 = DIVSDrm %79:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !750 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
SU(4):   %79:fr64 = MULSDrr %79:fr64(tied-def 0), %71:fr64, debug-location !751; is.c:693:43
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %79:fr64, debug-location !752 :: (store 8 into %ir.t_percent); is.c:693:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $rdi = MOV32ri64 @.str.21, debug-location !745; is.c:691:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !745; is.c:691:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.21, debug-location !745; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %69:fr64, debug-location !745; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %72:fr64, debug-location !745; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !745; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !745; is.c:691:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !745; is.c:691:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %72:fr64, debug-location !745; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %69:fr64, debug-location !745; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.21, debug-location !745; is.c:691:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $rdi = MOV32ri64 @.str.21, debug-location !745; is.c:691:9
SU(1):   $xmm0 = COPY %69:fr64, debug-location !745; is.c:691:9
SU(2):   $xmm1 = COPY %72:fr64, debug-location !745; is.c:691:9
SU(3):   $al = MOV8ri 2, debug-location !745; is.c:691:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %69:fr64 = COPY killed $xmm0, debug-location !736; is.c:689:23
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !745; is.c:691:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %69:fr64 = COPY killed $xmm0, debug-location !736; is.c:689:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%69
    SU(1): Data Latency=0 Reg=%69
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %69:fr64, debug-location !737 :: (store 8 into %ir.timecounter); is.c:689:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%69
  Single Issue       : false;
SU(2):   %72:fr64 = COPY %69:fr64, debug-location !740; is.c:690:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%69
  Successors:
    SU(3): Data Latency=0 Reg=%72
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %72:fr64 = DIVSDrm %72:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !740 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%72
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%72
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(4):   %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%71
  Single Issue       : false;
SU(5):   %72:fr64 = MULSDrr %72:fr64(tied-def 0), %71:fr64, debug-location !741; is.c:690:43
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%71
    SU(3): Data Latency=4 Reg=%72
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%72
  Single Issue       : false;
SU(6):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %72:fr64, debug-location !742 :: (store 8 into %ir.t_percent); is.c:690:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%72
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !745; is.c:691:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %72:fr64, debug-location !742 :: (store 8 into %ir.t_percent); is.c:690:19
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %72:fr64 = MULSDrr %72:fr64(tied-def 0), %71:fr64, debug-location !741; is.c:690:43
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %72:fr64 = DIVSDrm %72:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !740 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
  Ready @5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %72:fr64 = COPY %69:fr64, debug-location !740; is.c:690:33
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %69:fr64, debug-location !737 :: (store 8 into %ir.timecounter); is.c:689:21
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %69:fr64 = COPY killed $xmm0, debug-location !736; is.c:689:23
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %69:fr64 = COPY killed $xmm0, debug-location !736; is.c:689:23
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %69:fr64, debug-location !737 :: (store 8 into %ir.timecounter); is.c:689:21
SU(2):   %72:fr64 = COPY %69:fr64, debug-location !740; is.c:690:33
SU(3):   %72:fr64 = DIVSDrm %72:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !740 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
SU(4):   %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
SU(5):   %72:fr64 = MULSDrr %72:fr64(tied-def 0), %71:fr64, debug-location !741; is.c:690:43
SU(6):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %72:fr64, debug-location !742 :: (store 8 into %ir.t_percent); is.c:690:19

********** INTERVALS **********
DIL [0B,32r:0)[160r,192r:32)[352r,368r:31)[464r,480r:19)[608r,624r:18)[688r,704r:17)[768r,784r:16)[928r,944r:15)[1328r,1360r:30)[1456r,1520r:29)[1600r,1648r:28)[1776r,1792r:14)[2048r,2064r:13)[2144r,2160r:12)[2272r,2304r:27)[2352r,2368r:11)[2560r,2608r:20)[2672r,2688r:1)[2800r,2816r:10)[2864r,2880r:9)[3040r,3056r:8)[3248r,3264r:7)[3408r,3424r:6)[3792r,4096r:26)[4224r,4240r:5)[4368r,4400r:25)[4496r,4544r:24)[4768r,4784r:4)[4992r,5056r:23)[5120r,5136r:3)[5312r,5376r:22)[5440r,5456r:2)[5632r,5696r:21)  0@0B-phi 1@2672r 2@5440r 3@5120r 4@4768r 5@4224r 6@3408r 7@3248r 8@3040r 9@2864r 10@2800r 11@2352r 12@2144r 13@2048r 14@1776r 15@928r 16@768r 17@688r 18@608r 19@464r 20@2560r 21@5632r 22@5312r 23@4992r 24@4496r 25@4368r 26@3792r 27@2272r 28@1600r 29@1456r 30@1328r 31@352r 32@160r
DIH [0B,32r:0)[160r,192r:32)[352r,368r:31)[464r,480r:19)[608r,624r:18)[688r,704r:17)[768r,784r:16)[928r,944r:15)[1328r,1360r:30)[1456r,1520r:29)[1600r,1648r:28)[1776r,1792r:14)[2048r,2064r:13)[2144r,2160r:12)[2272r,2304r:27)[2352r,2368r:11)[2560r,2608r:20)[2672r,2688r:1)[2800r,2816r:10)[2864r,2880r:9)[3040r,3056r:8)[3248r,3264r:7)[3408r,3424r:6)[3792r,4096r:26)[4224r,4240r:5)[4368r,4400r:25)[4496r,4544r:24)[4768r,4784r:4)[4992r,5056r:23)[5120r,5136r:3)[5312r,5376r:22)[5440r,5456r:2)[5632r,5696r:21)  0@0B-phi 1@2672r 2@5440r 3@5120r 4@4768r 5@4224r 6@3408r 7@3248r 8@3040r 9@2864r 10@2800r 11@2352r 12@2144r 13@2048r 14@1776r 15@928r 16@768r 17@688r 18@608r 19@464r 20@2560r 21@5632r 22@5312r 23@4992r 24@4496r 25@4368r 26@3792r 27@2272r 28@1600r 29@1456r 30@1328r 31@352r 32@160r
HDI [0B,32r:0)[160r,192r:32)[352r,368r:31)[464r,480r:19)[608r,624r:18)[688r,704r:17)[768r,784r:16)[928r,944r:15)[1328r,1360r:30)[1456r,1520r:29)[1600r,1648r:28)[1776r,1792r:14)[2048r,2064r:13)[2144r,2160r:12)[2272r,2304r:27)[2352r,2368r:11)[2560r,2608r:20)[2672r,2688r:1)[2800r,2816r:10)[2864r,2880r:9)[3040r,3056r:8)[3248r,3264r:7)[3408r,3424r:6)[3792r,4096r:26)[4224r,4240r:5)[4368r,4400r:25)[4496r,4544r:24)[4768r,4784r:4)[4992r,5056r:23)[5120r,5136r:3)[5312r,5376r:22)[5440r,5456r:2)[5632r,5696r:21)  0@0B-phi 1@2672r 2@5440r 3@5120r 4@4768r 5@4224r 6@3408r 7@3248r 8@3040r 9@2864r 10@2800r 11@2352r 12@2144r 13@2048r 14@1776r 15@928r 16@768r 17@688r 18@608r 19@464r 20@2560r 21@5632r 22@5312r 23@4992r 24@4496r 25@4368r 26@3792r 27@2272r 28@1600r 29@1456r 30@1328r 31@352r 32@160r
SIL [0B,16r:0)[176r,192r:5)[1472r,1520r:4)[1616r,1648r:3)[2576r,2608r:1)[3808r,4096r:2)  0@0B-phi 1@2576r 2@3808r 3@1616r 4@1472r 5@176r
SIH [0B,16r:0)[176r,192r:5)[1472r,1520r:4)[1616r,1648r:3)[2576r,2608r:1)[3808r,4096r:2)  0@0B-phi 1@2576r 2@3808r 3@1616r 4@1472r 5@176r
HSI [0B,16r:0)[176r,192r:5)[1472r,1520r:4)[1616r,1648r:3)[2576r,2608r:1)[3808r,4096r:2)  0@0B-phi 1@2576r 2@3808r 3@1616r 4@1472r 5@176r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [224r,256r:0)  0@224r weight:0.000000e+00
%5 [320r,352r:0)  0@320r weight:0.000000e+00
%26 [1856r,1888r:0)  0@1856r weight:0.000000e+00
%27 [1872r,1904r:0)  0@1872r weight:0.000000e+00
%37 [2912r,2928r:0)  0@2912r weight:0.000000e+00
%43 [3568r,3888r:0)  0@3568r weight:0.000000e+00
%46 [3584r,3616r:2)[3616r,3648r:0)[3648r,3904r:1)  0@3616r 1@3648r 2@3584r weight:0.000000e+00
%56 [4272r,4288r:0)  0@4272r weight:0.000000e+00
%61 [4432r,4512r:0)  0@4432r weight:0.000000e+00
%65 [4576r,4608r:0)  0@4576r weight:0.000000e+00
%66 [4592r,4608r:0)  0@4592r weight:0.000000e+00
%67 [4688r,4704r:0)  0@4688r weight:0.000000e+00
%69 [4816r,5008r:0)  0@4816r weight:0.000000e+00
%71 [4880r,5568r:0)  0@4880r weight:0.000000e+00
%72 [4848r,4864r:2)[4864r,4912r:0)[4912r,5024r:1)  0@4864r 1@4912r 2@4848r weight:0.000000e+00
%77 [5168r,5328r:0)  0@5168r weight:0.000000e+00
%79 [5200r,5216r:2)[5216r,5248r:0)[5248r,5344r:1)  0@5216r 1@5248r 2@5200r weight:0.000000e+00
%83 [5488r,5648r:0)  0@5488r weight:0.000000e+00
%85 [5520r,5536r:2)[5536r,5568r:0)[5568r,5664r:1)  0@5536r 1@5568r 2@5520r weight:0.000000e+00
%89 [2512r,2576r:0)  0@2512r weight:0.000000e+00
%94 [2640r,2672r:0)  0@2640r weight:0.000000e+00
%97 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%98 [1152r,1168r:0)  0@1152r weight:0.000000e+00
%99 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%101 [3664r,4064r:0)  0@3664r weight:0.000000e+00
%102 [1088r,1200r:0)  0@1088r weight:0.000000e+00
RegMasks: 192r 368r 480r 624r 704r 784r 944r 1360r 1520r 1648r 1792r 1920r 2064r 2160r 2304r 2368r 2608r 2688r 2816r 2880r 3056r 3120r 3264r 3424r 4096r 4240r 4400r 4544r 4784r 5056r 5136r 5376r 5456r 5696r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
160B	  $rdi = MOV32ri64 @.str.2, debug-location !611; is.c:573:15
176B	  $rsi = MOV32ri64 @.str.3, debug-location !611; is.c:573:15
192B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
208B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
224B	  %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
240B	  MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
256B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
272B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
288B	  JMP_1 %bb.1, debug-location !615; is.c:573:9

304B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

320B	  %5:gr64 = MOV64rm %stack.7.fp, 1, $noreg, 0, $noreg, debug-location !616 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
352B	  $rdi = COPY %5:gr64, debug-location !618; is.c:574:9
368B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !618; is.c:574:9
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
400B	  MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 1, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18

416B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
464B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !621; is.c:577:5
480B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !621; is.c:577:5
496B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
512B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !622 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
528B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !624; is.c:578:9
544B	  JMP_1 %bb.3, debug-location !624; is.c:578:9

560B	bb.3.if.then2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
608B	  $edi = MOV32ri 1, debug-location !625; is.c:579:9
624B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !625; is.c:579:9
640B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
688B	  $edi = MOV32ri 2, debug-location !627; is.c:580:9
704B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !627; is.c:580:9
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
768B	  $edi = MOV32ri 3, debug-location !628; is.c:581:9
784B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !628; is.c:581:9
800B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9

816B	bb.4.if.end3:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

832B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !630 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
848B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !632; is.c:584:9
864B	  JMP_1 %bb.5, debug-location !632; is.c:584:9

880B	bb.5.if.then5:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
928B	  $edi = MOV32ri 3, debug-location !633; is.c:585:9
944B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !633; is.c:585:9
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9

976B	bb.6.if.end6:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

992B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12

1008B	bb.7.for.cond:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

1024B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !639 :: (dereferenceable load 4 from %ir.i); is.c:588:19
1040B	  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !640; is.c:588:5
1056B	  JMP_1 %bb.8, debug-location !640; is.c:588:5

1072B	bb.8.for.body:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1088B	  %102:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
1120B	  %97:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_index_array, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
1136B	  MOV32mr $noreg, 4, %102:gr64_nosp, @test_index_array, $noreg, %97:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
1152B	  %98:gr32 = MOV32rm $noreg, 4, %102:gr64_nosp, @B_test_rank_array, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
1168B	  MOV32mr $noreg, 4, %102:gr64_nosp, @test_rank_array, $noreg, %98:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
1200B	  %99:gr32 = LEA64_32r %102:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
1216B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %99:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
1232B	  JMP_1 %bb.7, debug-location !652; is.c:588:5

1248B	bb.9.for.end:
	; predecessors: %bb.7
	  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

1264B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
1328B	  $rdi = MOV32ri64 @.str.4, debug-location !655; is.c:617:5
1344B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
1360B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
1392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
1456B	  $rdi = MOV32ri64 @.str.5, debug-location !656; is.c:618:5
1472B	  $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
1488B	  $edx = MOV32ri 66, debug-location !656; is.c:618:5
1504B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
1520B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
1600B	  $rdi = MOV32ri64 @.str.6, debug-location !657; is.c:619:5
1616B	  $esi = MOV32ri 10, debug-location !657; is.c:619:5
1632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
1648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
1680B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !658 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
1696B	  JCC_1 %bb.11, 4, implicit killed $eflags, debug-location !660; is.c:621:9
1712B	  JMP_1 %bb.10, debug-location !660; is.c:621:9

1728B	bb.10.if.then18:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1744B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
1776B	  $edi = MOV32ri 1, debug-location !661; is.c:622:9
1792B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !661; is.c:622:9
1808B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9

1824B	bb.11.if.end19:
	; predecessors: %bb.9, %bb.10
	  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

1840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
1856B	  %26:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
1872B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
1888B	  $xmm0 = COPY %26:fr64, debug-location !662; is.c:625:5
1904B	  $xmm1 = COPY %27:fr64, debug-location !662; is.c:625:5
1920B	  CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
1936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
1952B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !663 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
1968B	  JCC_1 %bb.13, 4, implicit killed $eflags, debug-location !665; is.c:627:9
1984B	  JMP_1 %bb.12, debug-location !665; is.c:627:9

2000B	bb.12.if.then21:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
2048B	  $edi = MOV32ri 1, debug-location !666; is.c:628:9
2064B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !666; is.c:628:9
2080B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9

2096B	bb.13.if.end22:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
2144B	  $edi = MOV32ri 1, debug-location !667; is.c:632:5
2160B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !667; is.c:632:5
2176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
2192B	  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !668 :: (store 4 into @passed_verification); is.c:635:25
2208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
2272B	  $rdi = MOV32ri64 @.str.7, debug-location !669; is.c:638:9
2288B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
2304B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
2320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
2336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
2352B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !671; is.c:641:5
2368B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !671; is.c:641:5
2384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
2400B	  MOV32mi %stack.4.iteration, 1, $noreg, 0, $noreg, 1, debug-location !672 :: (store 4 into %ir.iteration); is.c:646:20

2432B	bb.14.for.cond28:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

2448B	  CMP32mi8 %stack.4.iteration, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !677 :: (dereferenceable load 4 from %ir.iteration); is.c:646:35
2464B	  JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !678; is.c:646:5
2480B	  JMP_1 %bb.15, debug-location !678; is.c:646:5

2496B	bb.15.for.body30:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2512B	  %89:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
2528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !682; is.c:648:13
2560B	  $rdi = MOV32ri64 @.str.8, debug-location !682; is.c:648:13
2576B	  $esi = COPY %89:gr32, debug-location !682; is.c:648:13
2592B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !682; is.c:648:13
2608B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !682; is.c:648:13
2624B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !682; is.c:648:13
2640B	  %94:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !683 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
2656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:9
2672B	  $edi = COPY %94:gr32, debug-location !684; is.c:650:9
2688B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !684; is.c:650:9
2704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:9
2720B	  INC32m %stack.4.iteration, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !685 :: (store 4 into %ir.iteration), (dereferenceable load 4 from %ir.iteration); is.c:646:63
2736B	  JMP_1 %bb.14, debug-location !686; is.c:646:5

2752B	bb.16.for.end34:
	; predecessors: %bb.14
	  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

2768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !689; is.c:657:5
2800B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !689; is.c:657:5
2816B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !689; is.c:657:5
2832B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !689; is.c:657:5
2848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !690; is.c:658:19
2864B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !690; is.c:658:19
2880B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !690; is.c:658:19
2896B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !690; is.c:658:19
2912B	  %37:fr64 = COPY killed $xmm0, debug-location !690; is.c:658:19
2928B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %37:fr64, debug-location !691 :: (store 8 into %ir.timecounter); is.c:658:17
2944B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !692 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
2960B	  JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !694; is.c:662:9
2976B	  JMP_1 %bb.17, debug-location !694; is.c:662:9

2992B	bb.17.if.then41:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !695; is.c:663:9
3040B	  $edi = MOV32ri 2, debug-location !695; is.c:663:9
3056B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !695; is.c:663:9
3072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !695; is.c:663:9

3088B	bb.18.if.end42:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

3104B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !696; is.c:664:5
3120B	  CALL64pcrel32 @full_verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !696; is.c:664:5
3136B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !696; is.c:664:5
3152B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !697 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
3168B	  JCC_1 %bb.20, 4, implicit killed $eflags, debug-location !699; is.c:665:9
3184B	  JMP_1 %bb.19, debug-location !699; is.c:665:9

3200B	bb.19.if.then44:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !700; is.c:666:9
3248B	  $edi = MOV32ri 2, debug-location !700; is.c:666:9
3264B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !700; is.c:666:9
3280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !700; is.c:666:9

3296B	bb.20.if.end45:
	; predecessors: %bb.18, %bb.19
	  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

3312B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !701 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
3328B	  JCC_1 %bb.22, 4, implicit killed $eflags, debug-location !703; is.c:668:9
3344B	  JMP_1 %bb.21, debug-location !703; is.c:668:9

3360B	bb.21.if.then47:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

3376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !704; is.c:669:9
3408B	  $edi = MOV32ri 3, debug-location !704; is.c:669:9
3424B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !704; is.c:669:9
3440B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !704; is.c:669:9

3456B	bb.22.if.end48:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

3472B	  CMP32mi8 $rip, 1, $noreg, @passed_verification, $noreg, 51, implicit-def $eflags, debug-location !707 :: (dereferenceable load 4 from @passed_verification); is.c:672:29
3488B	  JCC_1 %bb.24, 4, implicit killed $eflags, debug-location !708; is.c:672:9
3504B	  JMP_1 %bb.23, debug-location !708; is.c:672:9

3520B	bb.23.if.then50:
	; predecessors: %bb.22
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3536B	  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !709 :: (store 4 into @passed_verification); is.c:673:29

3552B	bb.24.if.end51:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

3568B	  %43:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !711 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
3584B	  %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
3616B	  %46:fr64 = DIVSDrr %46:fr64(tied-def 0), %43:fr64, debug-location !713; is.c:676:49
3648B	  %46:fr64 = DIVSDrm %46:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !714 :: (load 8 from constant-pool); is.c:676:63
3664B	  undef %101.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !715 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
3680B	  ADJCALLSTACKDOWN64 80, 0, 80, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !716; is.c:674:5
3792B	  $rdi = MOV32ri64 @.str.9, debug-location !716; is.c:674:5
3808B	  $esi = MOV32ri 66, debug-location !716; is.c:674:5
3824B	  $edx = MOV32ri 524288, debug-location !716; is.c:674:5
3840B	  $ecx = MOV32ri 64, debug-location !716; is.c:674:5
3856B	  $r8d = MOV32ri 0, debug-location !716; is.c:674:5
3872B	  $r9d = MOV32ri 10, debug-location !716; is.c:674:5
3888B	  $xmm0 = COPY %43:fr64, debug-location !716; is.c:674:5
3904B	  $xmm1 = COPY %46:fr64, debug-location !716; is.c:674:5
3920B	  PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
3936B	  PUSH64i32 @.str.17, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
3952B	  PUSH64i32 @.str.16, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
3968B	  PUSH64i32 @.str.15, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
3984B	  PUSH64i32 @.str.14, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
4000B	  PUSH64i32 @.str.13, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
4016B	  PUSH64i32 @.str.12, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
4032B	  PUSH64i32 @.str.11, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
4064B	  PUSH64r %101:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
4080B	  PUSH64i32 @.str.10, implicit-def $rsp, implicit $rsp, debug-location !716; is.c:674:5
4096B	  CALL64pcrel32 @c_print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !716; is.c:674:5
4112B	  ADJCALLSTACKUP64 80, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !716; is.c:674:5
4128B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !717 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
4144B	  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !719; is.c:681:9
4160B	  JMP_1 %bb.25, debug-location !719; is.c:681:9

4176B	bb.25.if.then54:
	; predecessors: %bb.24
	  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

4192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !725; is.c:684:19
4224B	  $edi = MOV32ri 3, debug-location !725; is.c:684:19
4240B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !725; is.c:684:19
4256B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !725; is.c:684:19
4272B	  %56:fr64 = COPY killed $xmm0, debug-location !725; is.c:684:19
4288B	  MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %56:fr64, debug-location !726 :: (store 8 into %ir.t_total); is.c:684:17
4304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:685:9
4368B	  $rdi = MOV32ri64 @.str.19, debug-location !727; is.c:685:9
4384B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !727; is.c:685:9
4400B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !727; is.c:685:9
4416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:685:9
4432B	  %61:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !728 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
4448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:686:9
4496B	  $rdi = MOV32ri64 @.str.20, debug-location !729; is.c:686:9
4512B	  $xmm0 = COPY %61:fr64, debug-location !729; is.c:686:9
4528B	  $al = MOV8ri 1, debug-location !729; is.c:686:9
4544B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:686:9
4560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:686:9
4576B	  %65:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
4592B	  %66:fr64 = FsFLD0SD
4608B	  UCOMISDrr %65:fr64, %66:fr64, implicit-def $eflags, debug-location !733; is.c:687:13
4624B	  JCC_1 %bb.27, 5, implicit $eflags, debug-location !733; is.c:687:13
4640B	  JCC_1 %bb.27, 10, implicit killed $eflags, debug-location !733; is.c:687:13
4656B	  JMP_1 %bb.26, debug-location !733; is.c:687:13

4672B	bb.26.if.then59:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4688B	  %67:gr64 = MOV64ri 4607182418800017408
4704B	  MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %67:gr64, debug-location !734 :: (store 8 into %ir.t_total); is.c:688:21

4720B	bb.27.if.end60:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !736; is.c:689:23
4768B	  $edi = MOV32ri 1, debug-location !736; is.c:689:23
4784B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !736; is.c:689:23
4800B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !736; is.c:689:23
4816B	  %69:fr64 = COPY killed $xmm0, debug-location !736; is.c:689:23
4832B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %69:fr64, debug-location !737 :: (store 8 into %ir.timecounter); is.c:689:21
4848B	  %72:fr64 = COPY %69:fr64, debug-location !740; is.c:690:33
4864B	  %72:fr64 = DIVSDrm %72:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !740 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
4880B	  %71:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
4912B	  %72:fr64 = MULSDrr %72:fr64(tied-def 0), %71:fr64, debug-location !741; is.c:690:43
4928B	  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %72:fr64, debug-location !742 :: (store 8 into %ir.t_percent); is.c:690:19
4944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !745; is.c:691:9
4992B	  $rdi = MOV32ri64 @.str.21, debug-location !745; is.c:691:9
5008B	  $xmm0 = COPY %69:fr64, debug-location !745; is.c:691:9
5024B	  $xmm1 = COPY %72:fr64, debug-location !745; is.c:691:9
5040B	  $al = MOV8ri 2, debug-location !745; is.c:691:9
5056B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !745; is.c:691:9
5072B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !745; is.c:691:9
5088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !746; is.c:692:23
5120B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !746; is.c:692:23
5136B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !746; is.c:692:23
5152B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !746; is.c:692:23
5168B	  %77:fr64 = COPY killed $xmm0, debug-location !746; is.c:692:23
5184B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %77:fr64, debug-location !747 :: (store 8 into %ir.timecounter); is.c:692:21
5200B	  %79:fr64 = COPY %77:fr64, debug-location !750; is.c:693:33
5216B	  %79:fr64 = DIVSDrm %79:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !750 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
5248B	  %79:fr64 = MULSDrr %79:fr64(tied-def 0), %71:fr64, debug-location !751; is.c:693:43
5264B	  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %79:fr64, debug-location !752 :: (store 8 into %ir.t_percent); is.c:693:19
5280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !755; is.c:694:9
5312B	  $rdi = MOV32ri64 @.str.22, debug-location !755; is.c:694:9
5328B	  $xmm0 = COPY %77:fr64, debug-location !755; is.c:694:9
5344B	  $xmm1 = COPY %79:fr64, debug-location !755; is.c:694:9
5360B	  $al = MOV8ri 2, debug-location !755; is.c:694:9
5376B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !755; is.c:694:9
5392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !755; is.c:694:9
5408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !756; is.c:695:23
5440B	  $edi = MOV32ri 2, debug-location !756; is.c:695:23
5456B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !756; is.c:695:23
5472B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !756; is.c:695:23
5488B	  %83:fr64 = COPY killed $xmm0, debug-location !756; is.c:695:23
5504B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %83:fr64, debug-location !757 :: (store 8 into %ir.timecounter); is.c:695:21
5520B	  %85:fr64 = COPY %83:fr64, debug-location !760; is.c:696:33
5536B	  %85:fr64 = DIVSDrm %85:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !760 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
5568B	  %85:fr64 = MULSDrr %85:fr64(tied-def 0), %71:fr64, debug-location !761; is.c:696:43
5584B	  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %85:fr64, debug-location !762 :: (store 8 into %ir.t_percent); is.c:696:19
5600B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !765; is.c:697:9
5632B	  $rdi = MOV32ri64 @.str.23, debug-location !765; is.c:697:9
5648B	  $xmm0 = COPY %83:fr64, debug-location !765; is.c:697:9
5664B	  $xmm1 = COPY %85:fr64, debug-location !765; is.c:697:9
5680B	  $al = MOV8ri 2, debug-location !765; is.c:697:9
5696B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !765; is.c:697:9
5712B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !765; is.c:697:9

5728B	bb.28.if.end72:
	; predecessors: %bb.24, %bb.27

5760B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !767; is.c:703:5
5776B	  RET 0, killed $eax, debug-location !767; is.c:703:5

# End machine code for function main.

