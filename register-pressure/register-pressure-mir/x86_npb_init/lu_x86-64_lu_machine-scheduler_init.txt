Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=1, align=1, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=96, align=16, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=96, align=16, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $rsi = MOV32ri64 @.str.1
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr64 = COPY killed $rax
  MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 8, $noreg, @.str.2 :: (store 8 into %ir.arrayidx)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 16, $noreg, @.str.3 :: (store 8 into %ir.arrayidx1, align 16)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 24, $noreg, @.str.4 :: (store 8 into %ir.arrayidx2)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 32, $noreg, @.str.5 :: (store 8 into %ir.arrayidx3, align 16)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 40, $noreg, @.str.6 :: (store 8 into %ir.arrayidx4)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx5, align 16)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx6)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx7, align 16)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx8)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 80, $noreg, @.str.11 :: (store 8 into %ir.arrayidx9, align 16)
  MOV64mi32 %stack.10.t_names, 1, $noreg, 88, $noreg, @.str.12 :: (store 8 into %ir.arrayidx10)
  %5:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @read_input, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @domain, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setcoeff, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @erhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 1
  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %10:gr32
  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @error, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @pintgr, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, @frc, $noreg :: (dereferenceable load 8 from @frc)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr64 = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
  %15:gr64 = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @rsdnm
  $rsi = MOV32ri64 @errnm
  $xmm0 = COPY %11:fr64
  $rdx = COPY %14:gr64
  $rcx = COPY %15:gr64
  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %16:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  %27:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  %19:fr64 = CVTSI2SDrr %27:gr32
  %19:fr64 = MULSDrm %19:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %20:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  %22:fr64 = CVTSI2SDrr %20:gr32
  %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
  %23:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  %25:fr64 = CVTSI2SDrr %23:gr32
  %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
  %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
  %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
  %30:fr64 = CVTSI2SDrr %27:gr32
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %31:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %30:fr64
  $xmm1 = COPY %31:fr64
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %34:fr64 = COPY killed $xmm0
  %34:fr64 = MULSDrm %34:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
  undef %99.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  undef %100.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
  %38:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
  %42:fr64 = CVTSI2SDrr %39:gr32
  %42:fr64 = MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
  %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
  %42:fr64 = ADDSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
  %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
  MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %42:fr64 :: (store 8 into %ir.mflops)
  %49:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class)
  %50:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  undef %98.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.13
  $esi = COPY %49:gr32
  $edx = COPY %99.sub_32bit:gr64_with_sub_8bit
  $ecx = COPY %100.sub_32bit:gr64_nosp
  $r8d = COPY %38:gr32
  $r9d = COPY %50:gr32
  $xmm0 = COPY %46:fr64
  $xmm1 = COPY %42:fr64
  PUSH64i32 @.str.23, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.21, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.20, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.19, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.17, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.16, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.15, implicit-def $rsp, implicit $rsp
  PUSH64r %98:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
  PUSH64i32 @.str.14, implicit-def $rsp, implicit $rsp
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
  JCC_1 %bb.14, 4, implicit killed $eflags
  JMP_1 %bb.4

bb.4.if.then31:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)

bb.5.for.cond:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.7, 15, implicit killed $eflags
  JMP_1 %bb.6

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %93:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %93:gr32
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %94:fr64 = COPY killed $xmm0
  %95:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  MOVSDmr %stack.8.trecs, 8, %95:gr64_nosp, 0, $noreg, %94:fr64 :: (store 8 into %ir.arrayidx35)
  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

  %56:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %56:fr64 :: (store 8 into %ir.tmax)
  %57:fr64 = FsFLD0SD
  UCOMISDrr %56:fr64, %57:fr64, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit $eflags
  JCC_1 %bb.9, 10, implicit killed $eflags
  JMP_1 %bb.8

bb.8.if.then38:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %58:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %58:gr64 :: (store 8 into %ir.tmax)

bb.9.if.end39:
; predecessors: %bb.7, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.24
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
  %96:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)

bb.10.for.cond41:
; predecessors: %bb.9, %bb.13
  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.14, 15, implicit killed $eflags
  JMP_1 %bb.11

bb.11.for.body44:
; predecessors: %bb.10
  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

  %66:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %67:gr64 = MOV64rm %stack.10.t_names, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
  %68:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
  %70:fr64 = COPY %68:fr64
  %70:fr64 = MULSDrr %70:fr64(tied-def 0), %96:fr64
  %70:fr64 = DIVSDrm %70:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.25
  $rsi = COPY %67:gr64
  $xmm0 = COPY %68:fr64
  $xmm1 = COPY %70:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.12

bb.12.if.then56:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %78:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
  %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %78:fr64 :: (store 8 into %ir.t)
  %81:fr64 = COPY %78:fr64
  %81:fr64 = MULSDrr %81:fr64(tied-def 0), %96:fr64
  %81:fr64 = DIVSDrm %81:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.26
  $rsi = MOV32ri64 @.str.27
  $xmm0 = COPY %78:fr64
  $xmm1 = COPY %81:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %86:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  %88:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %86:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
  %88:fr64 = SUBSDrm %88:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %88:fr64 :: (store 8 into %ir.t)
  %90:fr64 = COPY %88:fr64
  %90:fr64 = MULSDrr %90:fr64(tied-def 0), %96:fr64
  %90:fr64 = DIVSDrm %90:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.26
  $rsi = MOV32ri64 @.str.28
  $xmm0 = COPY %88:fr64
  $xmm1 = COPY %90:fr64
  $al = MOV8ri 2
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

bb.13.if.end71:
; predecessors: %bb.11, %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  JMP_1 %bb.10

bb.14.if.end75:
; predecessors: %bb.3, %bb.10

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax
SU(1):   MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = MOV32ri64 @.str
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = MOV32ri64 @.str
SU(1):   $rsi = MOV32ri64 @.str.1

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=2
Live In: 
Live Out: %5 
Live Thru: 
  LiveReg: %5
Top Pressure:

Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOV64mi32 %stack.10.t_names, 1, $noreg, 8, $noreg, @.str.2 :: (store 8 into %ir.arrayidx)
  # preds left       : 0
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV64mi32 %stack.10.t_names, 1, $noreg, 16, $noreg, @.str.3 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   MOV64mi32 %stack.10.t_names, 1, $noreg, 24, $noreg, @.str.4 :: (store 8 into %ir.arrayidx2)
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOV64mi32 %stack.10.t_names, 1, $noreg, 32, $noreg, @.str.5 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 3
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.10.t_names, 1, $noreg, 40, $noreg, @.str.6 :: (store 8 into %ir.arrayidx4)
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV64mi32 %stack.10.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV64mi32 %stack.10.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx6)
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV64mi32 %stack.10.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV64mi32 %stack.10.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx8)
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV64mi32 %stack.10.t_names, 1, $noreg, 80, $noreg, @.str.11 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   MOV64mi32 %stack.10.t_names, 1, $noreg, 88, $noreg, @.str.12 :: (store 8 into %ir.arrayidx10)
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %5:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 0 12 
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %5:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(12) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 0 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mi32 %stack.10.t_names, 1, $noreg, 88, $noreg, @.str.12 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 10 
  Cand SU(0) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV64mi32 %stack.10.t_names, 1, $noreg, 80, $noreg, @.str.11 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 9 
  Cand SU(0) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mi32 %stack.10.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:

  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 8 
  Cand SU(0) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV64mi32 %stack.10.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mi32 %stack.10.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mi32 %stack.10.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:

  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mi32 %stack.10.t_names, 1, $noreg, 40, $noreg, @.str.6 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:

  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mi32 %stack.10.t_names, 1, $noreg, 32, $noreg, @.str.5 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mi32 %stack.10.t_names, 1, $noreg, 24, $noreg, @.str.4 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mi32 %stack.10.t_names, 1, $noreg, 16, $noreg, @.str.3 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:

  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mi32 %stack.10.t_names, 1, $noreg, 8, $noreg, @.str.2 :: (store 8 into %ir.arrayidx)
Bottom Pressure:

  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
SU(1):   MOV64mi32 %stack.10.t_names, 1, $noreg, 8, $noreg, @.str.2 :: (store 8 into %ir.arrayidx)
SU(2):   MOV64mi32 %stack.10.t_names, 1, $noreg, 16, $noreg, @.str.3 :: (store 8 into %ir.arrayidx1, align 16)
SU(3):   MOV64mi32 %stack.10.t_names, 1, $noreg, 24, $noreg, @.str.4 :: (store 8 into %ir.arrayidx2)
SU(4):   MOV64mi32 %stack.10.t_names, 1, $noreg, 32, $noreg, @.str.5 :: (store 8 into %ir.arrayidx3, align 16)
SU(5):   MOV64mi32 %stack.10.t_names, 1, $noreg, 40, $noreg, @.str.6 :: (store 8 into %ir.arrayidx4)
SU(6):   MOV64mi32 %stack.10.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx5, align 16)
SU(7):   MOV64mi32 %stack.10.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx6)
SU(8):   MOV64mi32 %stack.10.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx7, align 16)
SU(9):   MOV64mi32 %stack.10.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx8)
SU(10):   MOV64mi32 %stack.10.t_names, 1, $noreg, 80, $noreg, @.str.11 :: (store 8 into %ir.arrayidx9, align 16)
SU(11):   MOV64mi32 %stack.10.t_names, 1, $noreg, 88, $noreg, @.str.12 :: (store 8 into %ir.arrayidx10)
SU(12):   %5:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $rdi = MOV32ri64 @.str.13
    To: PUSH64i32 @.str.23, implicit-def $rsp, implicit $rsp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=11
Live In: %42 %46 %50 %38 %100 %99 %49 
Live Out: XMM1 XMM0 R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
Top Pressure:
FR32=2
FR32X=2
GR16=10
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Excess PSets: 
SU(0):   $rdi = MOV32ri64 @.str.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(1):   $esi = COPY %49:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(2):   $edx = COPY %99.sub_32bit:gr64_with_sub_8bit
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   $ecx = COPY %100.sub_32bit:gr64_nosp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(4):   $r8d = COPY %38:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(5):   $r9d = COPY %50:gr32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(6):   $xmm0 = COPY %46:fr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $xmm1 = COPY %42:fr64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   PUSH64i32 @.str.23, implicit-def $rsp, implicit $rsp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $xmm1 = COPY %42:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %42
  UpdateRegP: SU(7) $xmm1 = COPY %42:fr64
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $xmm0 = COPY %46:fr64
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %46
  UpdateRegP: SU(6) $xmm0 = COPY %46:fr64
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = COPY %50:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=9
  LiveReg: %50
  UpdateRegP: SU(5) $r9d = COPY %50:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %38:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=10
  LiveReg: %38
  UpdateRegP: SU(4) $r8d = COPY %38:gr32
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = COPY %100.sub_32bit:gr64_nosp
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %100
  UpdateRegP: SU(3) $ecx = COPY %100.sub_32bit:gr64_nosp
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %99.sub_32bit:gr64_with_sub_8bit
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %99
  UpdateRegP: SU(2) $edx = COPY %99.sub_32bit:gr64_with_sub_8bit
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %49:gr32
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=11
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %49
  UpdateRegP: SU(1) $esi = COPY %49:gr32
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.13
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = MOV32ri64 @.str.13
SU(1):   $esi = COPY %49:gr32
SU(2):   $edx = COPY %99.sub_32bit:gr64_with_sub_8bit
SU(3):   $ecx = COPY %100.sub_32bit:gr64_nosp
SU(4):   $r8d = COPY %38:gr32
SU(5):   $r9d = COPY %50:gr32
SU(6):   $xmm0 = COPY %46:fr64
SU(7):   $xmm1 = COPY %42:fr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %34:fr64 = COPY killed $xmm0
    To: ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
GR16=12
Live In: %16 %29 %25 XMM0 
Live Out: %98 %50 %49 %42 %46 %38 %99 %100 
Live Thru: 
  LiveReg: %98
  LiveReg: %50
  LiveReg: %49
  LiveReg: %42
  UpdateRegP: SU(18) MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %42:fr64 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %46
  UpdateRegP: SU(16) %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
              to 
  LiveReg: %38
  UpdateRegP: SU(7) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
              to 
  LiveReg: %99
  UpdateRegP: SU(5) %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
              to 
  LiveReg: %100
  UpdateRegP: SU(5) %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
              to GR16 -2
Top Pressure:
FR32=4
FR32X=4
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
Excess PSets: 
SU(0):   %34:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 21
  Successors:
    SU(1): Data Latency=0 Reg=%34
    SU(1): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %34:fr64 = MULSDrm %34:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Predecessors:
    SU(0): Data Latency=0 Reg=%34
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%34
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(1): Data Latency=4 Reg=%34
    SU(1): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%34
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   undef %99.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(5): Data Latency=4 Reg=%99
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   undef %100.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 37
  Successors:
    SU(5): Data Latency=4 Reg=%100
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 33
  Predecessors:
    SU(4): Data Latency=4 Reg=%100
    SU(3): Data Latency=4 Reg=%99
  Successors:
    SU(7): Data Latency=1 Reg=%39
    SU(7): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %38:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
    SU(7): Data Latency=4 Reg=%38
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 32
  Predecessors:
    SU(5): Data Latency=1 Reg=%39
    SU(6): Data Latency=4 Reg=%38
    SU(5): Out  Latency=0
  Successors:
    SU(8): Data Latency=1 Reg=%39
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %42:fr64 = CVTSI2SDrr %39:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 31
  Predecessors:
    SU(7): Data Latency=1 Reg=%39
  Successors:
    SU(9): Data Latency=1 Reg=%42
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(9):   %42:fr64 = MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 30
  Predecessors:
    SU(8): Data Latency=1 Reg=%42
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%42
    SU(10): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 11
  Height             : 26
  Predecessors:
    SU(9): Data Latency=4 Reg=%42
    SU(9): Out  Latency=0
  Successors:
    SU(11): Data Latency=10 Reg=%42
    SU(11): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 16
  Predecessors:
    SU(10): Data Latency=10 Reg=%42
    SU(10): Out  Latency=0
    SU(2): Data Latency=1 Reg=%34
  Successors:
    SU(12): Data Latency=1 Reg=%42
    SU(12): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   %42:fr64 = ADDSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 15
  Predecessors:
    SU(11): Data Latency=1 Reg=%42
    SU(11): Out  Latency=0
  Successors:
    SU(13): Data Latency=4 Reg=%42
    SU(13): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 11
  Predecessors:
    SU(12): Data Latency=4 Reg=%42
    SU(12): Out  Latency=0
  Successors:
    SU(17): Data Latency=1 Reg=%42
    SU(17): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(16): Data Latency=4 Reg=%46
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(15):   %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(16): Data Latency=4 Reg=%47
    SU(16): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(16):   %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(15): Data Latency=4 Reg=%47
    SU(15): Out  Latency=0
    SU(14): Data Latency=4 Reg=%46
  Successors:
    SU(17): Data Latency=1 Reg=%47
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 27
  Height             : 10
  Predecessors:
    SU(13): Data Latency=1 Reg=%42
    SU(16): Data Latency=1 Reg=%47
    SU(13): Out  Latency=0
  Successors:
    SU(18): Data Latency=10 Reg=%42
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(18):   MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %42:fr64 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 37
  Height             : 0
  Predecessors:
    SU(17): Data Latency=10 Reg=%42
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %49:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(20):   %50:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   undef %98.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(21): Ord  Latency=3 Artificial
    SU(20): Ord  Latency=3 Artificial
    SU(19): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 37
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 21 20 19 
  Cand SU(18) ORDER                              
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) undef %98.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(21) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 19 20 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %50:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 19 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) %49:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Scheduling SU(18) MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %42:fr64 :: (store 8 into %ir.mflops)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @0c
  BotQ.A TopLatency SU(18) 37c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Scheduling SU(17) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %42
  UpdateRegP: SU(17) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
              to 
  LiveReg: %47
  UpdateRegP: SU(17) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
              to FR32 -1    FR32X -1
  Ready @10c
  BotQ.A BotLatency SU(17) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 13 
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %47
  UpdateRegP: SU(16) %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(16) 11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 15 14 
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @15c
  BotQ.A BotLatency SU(15) 15c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 14 
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  Ready @15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %42
  UpdateRegP: SU(13) %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
              to 
  LiveReg: %16
  UpdateRegP: SU(13) %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
              to FR32 -1    FR32X -1
  Ready @11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) %42:fr64 = ADDSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %42
  UpdateRegP: SU(12) %42:fr64 = ADDSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @15c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %42
  UpdateRegP: SU(11) %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
              to 
  LiveReg: %34
  UpdateRegP: SU(11) %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(11) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 2 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
Bottom Pressure:
FR32=4
FR32X=4
GR16=6
  LiveReg: %42
  UpdateRegP: SU(10) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
              to 
  LiveReg: %29
  UpdateRegP: SU(10) %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
              to FR32 -1    FR32X -1
  Ready @26c
  BotQ.A BotLatency SU(10) 26c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 
  Cand SU(2) ORDER                              
  Cand SU(9) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(9) %42:fr64 = MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
GR16=6
  LiveReg: %42
  UpdateRegP: SU(9) %42:fr64 = MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @30c
  BotQ.A BotLatency SU(9) 30c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 
  Cand SU(2) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %42:fr64 = CVTSI2SDrr %39:gr32
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %39
  UpdateRegP: SU(8) %42:fr64 = CVTSI2SDrr %39:gr32
              to FR32 -1    FR32X -1
  Ready @31c
  BotQ.A BotLatency SU(8) 31c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=3
FR32X=3
GR16=8
  LiveReg: %39
  UpdateRegP: SU(7) %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @32c
  BotQ.A BotLatency SU(7) 32c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 32c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 5 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %38:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  Ready @36c
  BotQ.A BotLatency SU(6) 36c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  Ready @33c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) undef %100.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
FR32=3
FR32X=3
GR16=2
  Ready @37c
  BotQ.A BotLatency SU(4) 37c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %99.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
FR32=3
FR32X=3
  Ready @37c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %34
  UpdateRegP: SU(2) %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
              to 
  LiveReg: %25
  UpdateRegP: SU(2) %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
              to FR32 -1    FR32X -1
  Ready @17c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %34:fr64 = MULSDrm %34:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %34
  UpdateRegP: SU(1) %34:fr64 = MULSDrm %34:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @21c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:fr64 = COPY killed $xmm0
Bottom Pressure:
FR32=4
FR32X=4
  Ready @21c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %34:fr64 = COPY killed $xmm0
SU(1):   %34:fr64 = MULSDrm %34:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
SU(2):   %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
SU(3):   undef %99.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
SU(4):   undef %100.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
SU(5):   %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
SU(6):   %38:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
SU(7):   %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
SU(8):   %42:fr64 = CVTSI2SDrr %39:gr32
SU(9):   %42:fr64 = MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
SU(10):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
SU(11):   %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
SU(12):   %42:fr64 = ADDSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
SU(13):   %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
SU(14):   %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
SU(15):   %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
SU(16):   %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
SU(17):   %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
SU(18):   MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %42:fr64 :: (store 8 into %ir.mflops)
SU(19):   %49:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class)
SU(20):   %50:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
SU(21):   undef %98.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %31:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%31
  Single Issue       : false;
SU(1):   $xmm0 = COPY %30:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %31:fr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm1 = COPY %31:fr64
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %30:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %31:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(1):   $xmm0 = COPY %30:fr64
SU(2):   $xmm1 = COPY %31:fr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %16:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
GR16=6
Live In: 
Live Out: %30 %29 %25 %16 
Live Thru: 
  LiveReg: %30
  LiveReg: %29
  UpdateRegP: SU(14) %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64
              to 
  LiveReg: %25
  LiveReg: %16
Top Pressure:

Bottom Pressure:
FR32=4
FR32X=4
Excess PSets: 
SU(0):   %16:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %27:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(10): Data Latency=4 Reg=%27
    SU(2): Data Latency=4 Reg=%27
    SU(10): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %19:fr64 = CVTSI2SDrr %27:gr32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%27
  Successors:
    SU(3): Data Latency=1 Reg=%19
    SU(3): Out  Latency=0
    SU(10): Anti Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %19:fr64 = MULSDrm %19:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%19
    SU(2): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%19
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %20:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(10): Data Latency=4 Reg=%20
    SU(5): Data Latency=4 Reg=%20
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %22:fr64 = CVTSI2SDrr %20:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%20
  Successors:
    SU(6): Data Latency=1 Reg=%22
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(6):   %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%19
    SU(5): Out  Latency=0
    SU(5): Data Latency=1 Reg=%22
  Successors:
    SU(9): Data Latency=1 Reg=%22
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %23:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=4 Reg=%23
    SU(8): Data Latency=4 Reg=%23
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %25:fr64 = CVTSI2SDrr %23:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%23
  Successors:
    SU(9): Data Latency=1 Reg=%25
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(9):   %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%22
    SU(8): Out  Latency=0
    SU(8): Data Latency=1 Reg=%25
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(10):   %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%20
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=%27
    SU(1): Out  Latency=0
  Successors:
    SU(11): Data Latency=1 Reg=%27
    SU(11): Out  Latency=0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(10): Data Latency=1 Reg=%27
    SU(10): Out  Latency=0
    SU(7): Data Latency=4 Reg=%23
  Successors:
    SU(12): Data Latency=1 Reg=%27
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %30:fr64 = CVTSI2SDrr %27:gr32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(11): Data Latency=1 Reg=%27
  Successors:
    SU(14): Data Latency=1 Reg=%30
    SU(14): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(13):   %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(14): Data Latency=4 Reg=%29
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(14):   %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(12): Data Latency=1 Reg=%30
    SU(13): Data Latency=4 Reg=%29
    SU(12): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=9 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=9 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 14 0 
  Cand SU(9) ORDER                              
  Cand SU(14) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(14) %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %30
  UpdateRegP: SU(14) %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A TopLatency SU(14) 7c
  BotQ.A BotLatency SU(14) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 13 12 
  Cand SU(9) ORDER                              
  Cand SU(0) REG-MAX                            
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=3
FR32X=3
  Ready @13c
  BotQ.A BotLatency SU(13) 13c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 12 
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %30:fr64 = CVTSI2SDrr %27:gr32
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %27
  UpdateRegP: SU(12) %30:fr64 = CVTSI2SDrr %27:gr32
              to FR32 -1    FR32X -1
  Ready @10c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 11 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %27
  UpdateRegP: SU(11) %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
              to 
  LiveReg: %23
  UpdateRegP: SU(8) %25:fr64 = CVTSI2SDrr %23:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(11) %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %27
  UpdateRegP: SU(2) %19:fr64 = CVTSI2SDrr %27:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(10) %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
              to 
  LiveReg: %20
  UpdateRegP: SU(5) %22:fr64 = CVTSI2SDrr %20:gr32
              to FR32 -1    FR32X -1
  UpdateRegP: SU(10) %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
              to GR16 -2
  Ready @12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=6
  LiveReg: %25
  UpdateRegP: SU(9) %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
              to 
  LiveReg: %22
  UpdateRegP: SU(9) %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
              to FR32 -1    FR32X -1
  Ready @1c
  BotQ.A TopLatency SU(9) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 8 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %25:fr64 = CVTSI2SDrr %23:gr32
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  Ready @2c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 7 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %23:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(7) 15c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
Bottom Pressure:
FR32=3
FR32X=3
GR16=4
  LiveReg: %22
  UpdateRegP: SU(6) %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
              to 
  LiveReg: %19
  UpdateRegP: SU(6) %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 5 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %22:fr64 = CVTSI2SDrr %20:gr32
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @3c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 4 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %20:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %19:fr64 = MULSDrm %19:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %19
  UpdateRegP: SU(3) %19:fr64 = MULSDrm %19:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %19:fr64 = CVTSI2SDrr %27:gr32
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %27:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @16c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
Bottom Pressure:

  Ready @3c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %16:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
SU(1):   %27:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
SU(2):   %19:fr64 = CVTSI2SDrr %27:gr32
SU(3):   %19:fr64 = MULSDrm %19:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(4):   %20:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
SU(5):   %22:fr64 = CVTSI2SDrr %20:gr32
SU(6):   %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
SU(7):   %23:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
SU(8):   %25:fr64 = CVTSI2SDrr %23:gr32
SU(9):   %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
SU(10):   %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
SU(11):   %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
SU(12):   %30:fr64 = CVTSI2SDrr %27:gr32
SU(13):   %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(14):   %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %14:gr64 = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %14:gr64 = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%14
  Single Issue       : false;
SU(1):   %15:gr64 = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(2):   $rdi = MOV32ri64 @rsdnm
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rsi = MOV32ri64 @errnm
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $xmm0 = COPY %11:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $rdx = COPY %14:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%14
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(6):   $rcx = COPY %15:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%15
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) $rcx = COPY %15:gr64
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 4 3 1 
  Cand SU(2) ORDER                              
  Cand SU(5) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $rdx = COPY %14:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 4 3 0 
  Cand SU(2) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $xmm0 = COPY %11:fr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rsi = MOV32ri64 @errnm
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdi = MOV32ri64 @rsdnm
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %15:gr64 = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr64 = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %14:gr64 = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
SU(1):   %15:gr64 = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
SU(2):   $rdi = MOV32ri64 @rsdnm
SU(3):   $rsi = MOV32ri64 @errnm
SU(4):   $xmm0 = COPY %11:fr64
SU(5):   $rdx = COPY %14:gr64
SU(6):   $rcx = COPY %15:gr64

********** MI Scheduling **********
main:%bb.6 for.body
  From: %94:fr64 = COPY killed $xmm0
    To: JMP_1 %bb.5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %94:fr64 = COPY killed $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%94
  Single Issue       : false;
SU(1):   %95:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%95
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.8.trecs, 8, %95:gr64_nosp, 0, $noreg, %94:fr64 :: (store 8 into %ir.arrayidx35)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%95
    SU(0): Data Latency=0 Reg=%94
  Single Issue       : false;
SU(3):   INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.8.trecs, 8, %95:gr64_nosp, 0, $noreg, %94:fr64 :: (store 8 into %ir.arrayidx35)
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %95:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %94:fr64 = COPY killed $xmm0
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %94:fr64 = COPY killed $xmm0
SU(1):   %95:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(2):   MOVSDmr %stack.8.trecs, 8, %95:gr64_nosp, 0, $noreg, %94:fr64 :: (store 8 into %ir.arrayidx35)
SU(3):   INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)

********** MI Scheduling **********
main:%bb.7 for.end
  From: %56:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
    To: JCC_1 %bb.9, 5, implicit $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %56:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%56
    SU(1): Data Latency=4 Reg=%56
  Single Issue       : false;
SU(1):   MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %56:fr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%56
  Single Issue       : false;
SU(2):   %57:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%57
  Single Issue       : false;
SU(3):   UCOMISDrr %56:fr64, %57:fr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%57
    SU(0): Data Latency=4 Reg=%56
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 5, implicit $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) UCOMISDrr %56:fr64, %57:fr64, implicit-def $eflags
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %57:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %56:fr64 :: (store 8 into %ir.tmax)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %56:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %56:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
SU(1):   MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %56:fr64 :: (store 8 into %ir.tmax)
SU(2):   %57:fr64 = FsFLD0SD
SU(3):   UCOMISDrr %56:fr64, %57:fr64, implicit-def $eflags

********** MI Scheduling **********
main:%bb.8 if.then38
  From: %58:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %58:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%58
  Single Issue       : false;
SU(1):   MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %58:gr64 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%58
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %58:gr64 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %58:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %58:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %58:gr64 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %96:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %96:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
SU(1):   %96:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: $rdi = MOV32ri64 @.str.24
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.24
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = MOV32ri64 @.str.24
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al

********** MI Scheduling **********
main:%bb.11 for.body44
  From: $rdi = MOV32ri64 @.str.25
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %67:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %68:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %70:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %70:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %68:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %67:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.25
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $rdi = MOV32ri64 @.str.25
SU(1):   $rsi = COPY %67:gr64
SU(2):   $xmm0 = COPY %68:fr64
SU(3):   $xmm1 = COPY %70:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.11 for.body44
  From: %66:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%66
    SU(1): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(1):   %67:gr64 = MOV64rm %stack.10.t_names, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %68:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
  Successors:
    SU(3): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(3):   %70:fr64 = COPY %68:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%68
  Successors:
    SU(4): Data Latency=0 Reg=%70
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %70:fr64 = MULSDrr %70:fr64(tied-def 0), %96:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%70
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%70
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %70:fr64 = DIVSDrm %70:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%70
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %70:fr64 = DIVSDrm %70:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %70:fr64 = MULSDrr %70:fr64(tied-def 0), %96:fr64
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %70:fr64 = COPY %68:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %68:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %67:gr64 = MOV64rm %stack.10.t_names, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %66:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %67:gr64 = MOV64rm %stack.10.t_names, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
SU(2):   %68:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
SU(3):   %70:fr64 = COPY %68:fr64
SU(4):   %70:fr64 = MULSDrr %70:fr64(tied-def 0), %96:fr64
SU(5):   %70:fr64 = DIVSDrm %70:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $rdi = MOV32ri64 @.str.26
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %88:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %90:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %90:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %88:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.28
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.26
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = MOV32ri64 @.str.26
SU(1):   $rsi = MOV32ri64 @.str.28
SU(2):   $xmm0 = COPY %88:fr64
SU(3):   $xmm1 = COPY %90:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %86:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %86:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%86
  Single Issue       : false;
SU(1):   %88:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %86:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%86
  Successors:
    SU(2): Data Latency=4 Reg=%88
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %88:fr64 = SUBSDrm %88:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%88
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%88
    SU(3): Data Latency=4 Reg=%88
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %88:fr64 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%88
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %90:fr64 = COPY %88:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%88
  Successors:
    SU(5): Data Latency=0 Reg=%90
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %90:fr64 = MULSDrr %90:fr64(tied-def 0), %96:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%90
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%90
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %90:fr64 = DIVSDrm %90:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%90
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %90:fr64 = DIVSDrm %90:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %90:fr64 = MULSDrr %90:fr64(tied-def 0), %96:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %90:fr64 = COPY %88:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %88:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %88:fr64 = SUBSDrm %88:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %88:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %86:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %86:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
SU(1):   %88:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %86:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
SU(2):   %88:fr64 = SUBSDrm %88:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %88:fr64 :: (store 8 into %ir.t)
SU(4):   %90:fr64 = COPY %88:fr64
SU(5):   %90:fr64 = MULSDrr %90:fr64(tied-def 0), %96:fr64
SU(6):   %90:fr64 = DIVSDrm %90:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $rdi = MOV32ri64 @.str.26
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %78:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %81:fr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %81:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %78:fr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.27
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.26
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $rdi = MOV32ri64 @.str.26
SU(1):   $rsi = MOV32ri64 @.str.27
SU(2):   $xmm0 = COPY %78:fr64
SU(3):   $xmm1 = COPY %81:fr64
SU(4):   $al = MOV8ri 2

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %78:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %78:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%78
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%78
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%78
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%78
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%78
    SU(3): Data Latency=4 Reg=%78
  Single Issue       : false;
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %78:fr64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%78
  Single Issue       : false;
SU(4):   %81:fr64 = COPY %78:fr64
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%78
  Successors:
    SU(5): Data Latency=0 Reg=%81
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %81:fr64 = MULSDrr %81:fr64(tied-def 0), %96:fr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%81
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%81
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %81:fr64 = DIVSDrm %81:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%81
    SU(5): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %81:fr64 = DIVSDrm %81:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  BotQ.A TopLatency SU(6) 13c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %81:fr64 = MULSDrr %81:fr64(tied-def 0), %96:fr64
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %81:fr64 = COPY %78:fr64
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %78:fr64 :: (store 8 into %ir.t)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %78:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %78:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
SU(1):   %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
SU(2):   %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
SU(3):   MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %78:fr64 :: (store 8 into %ir.t)
SU(4):   %81:fr64 = COPY %78:fr64
SU(5):   %81:fr64 = MULSDrr %81:fr64(tied-def 0), %96:fr64
SU(6):   %81:fr64 = DIVSDrm %81:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)

********** INTERVALS **********
DIL [0B,32r:0)[144r,176r:11)[528r,544r:10)[1088r,1104r:3)[1296r,1312r:2)[1568r,1648r:9)[2688r,3008r:8)[3232r,3248r:1)[3616r,3648r:7)[4000r,4080r:6)[4352r,4432r:5)[4624r,4704r:4)  0@0B-phi 1@3232r 2@1296r 3@1088r 4@4624r 5@4352r 6@4000r 7@3616r 8@2688r 9@1568r 10@528r 11@144r
DIH [0B,32r:0)[144r,176r:11)[528r,544r:10)[1088r,1104r:3)[1296r,1312r:2)[1568r,1648r:9)[2688r,3008r:8)[3232r,3248r:1)[3616r,3648r:7)[4000r,4080r:6)[4352r,4432r:5)[4624r,4704r:4)  0@0B-phi 1@3232r 2@1296r 3@1088r 4@4624r 5@4352r 6@4000r 7@3616r 8@2688r 9@1568r 10@528r 11@144r
HDI [0B,32r:0)[144r,176r:11)[528r,544r:10)[1088r,1104r:3)[1296r,1312r:2)[1568r,1648r:9)[2688r,3008r:8)[3232r,3248r:1)[3616r,3648r:7)[4000r,4080r:6)[4352r,4432r:5)[4624r,4704r:4)  0@0B-phi 1@3232r 2@1296r 3@1088r 4@4624r 5@4352r 6@4000r 7@3616r 8@2688r 9@1568r 10@528r 11@144r
SIL [0B,16r:0)[160r,176r:6)[1584r,1648r:5)[2704r,3008r:1)[4016r,4080r:4)[4368r,4432r:3)[4640r,4704r:2)  0@0B-phi 1@2704r 2@4640r 3@4368r 4@4016r 5@1584r 6@160r
SIH [0B,16r:0)[160r,176r:6)[1584r,1648r:5)[2704r,3008r:1)[4016r,4080r:4)[4368r,4432r:3)[4640r,4704r:2)  0@0B-phi 1@2704r 2@4640r 3@4368r 4@4016r 5@1584r 6@160r
HSI [0B,16r:0)[160r,176r:6)[1584r,1648r:5)[2704r,3008r:1)[4016r,4080r:4)[4368r,4432r:3)[4640r,4704r:2)  0@0B-phi 1@2704r 2@4640r 3@4368r 4@4016r 5@1584r 6@160r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [208r,240r:0)  0@208r weight:0.000000e+00
%5 [496r,528r:0)  0@496r weight:0.000000e+00
%10 [1264r,1296r:0)  0@1264r weight:0.000000e+00
%11 [1472r,1600r:0)  0@1472r weight:0.000000e+00
%14 [1536r,1616r:0)  0@1536r weight:0.000000e+00
%15 [1552r,1632r:0)  0@1552r weight:0.000000e+00
%16 [1680r,2480r:0)  0@1680r weight:0.000000e+00
%19 [1712r,1744r:0)[1744r,1808r:1)  0@1712r 1@1744r weight:0.000000e+00
%20 [1760r,1904r:0)  0@1760r weight:0.000000e+00
%22 [1776r,1808r:0)[1808r,1872r:1)  0@1776r 1@1808r weight:0.000000e+00
%23 [1824r,1936r:0)  0@1824r weight:0.000000e+00
%25 [1840r,1872r:0)[1872r,2176r:1)  0@1840r 1@1872r weight:0.000000e+00
%27 [1696r,1904r:2)[1904r,1936r:0)[1936r,1952r:1)  0@1904r 1@1936r 2@1696r weight:0.000000e+00
%29 [1968r,2384r:0)  0@1968r weight:0.000000e+00
%30 [1952r,2000r:0)[2000r,2048r:1)  0@1952r 1@2000r weight:0.000000e+00
%31 [2032r,2064r:0)  0@2032r weight:0.000000e+00
%34 [2112r,2144r:2)[2144r,2176r:0)[2176r,2416r:1)  0@2144r 1@2176r 2@2112r weight:0.000000e+00
%38 [2272r,2752r:0)  0@2272r weight:0.000000e+00
%39 [2256r,2304r:0)[2304r,2320r:1)  0@2256r 1@2304r weight:0.000000e+00
%42 [2320r,2352r:2)[2352r,2384r:0)[2384r,2416r:1)[2416r,2448r:3)[2448r,2480r:4)[2480r,2576r:5)[2576r,2800r:6)  0@2352r 1@2384r 2@2320r 3@2416r 4@2448r 5@2480r 6@2576r weight:0.000000e+00
%46 [2496r,2784r:0)  0@2496r weight:0.000000e+00
%47 [2512r,2544r:0)[2544r,2576r:1)  0@2512r 1@2544r weight:0.000000e+00
%49 [2608r,2704r:0)  0@2608r weight:0.000000e+00
%50 [2624r,2768r:0)  0@2624r weight:0.000000e+00
%56 [3376r,3424r:0)  0@3376r weight:0.000000e+00
%57 [3408r,3424r:0)  0@3408r weight:0.000000e+00
%58 [3504r,3520r:0)  0@3504r weight:0.000000e+00
%66 [3872r,3904r:0)  0@3872r weight:0.000000e+00
%67 [3888r,4016r:0)  0@3888r weight:0.000000e+00
%68 [3904r,4032r:0)  0@3904r weight:0.000000e+00
%70 [3920r,3936r:2)[3936r,3968r:0)[3968r,4048r:1)  0@3936r 1@3968r 2@3920r weight:0.000000e+00
%78 [4176r,4208r:2)[4208r,4240r:0)[4240r,4384r:1)  0@4208r 1@4240r 2@4176r weight:0.000000e+00
%81 [4272r,4288r:2)[4288r,4320r:0)[4320r,4400r:1)  0@4288r 1@4320r 2@4272r weight:0.000000e+00
%86 [4464r,4480r:0)  0@4464r weight:0.000000e+00
%88 [4480r,4512r:0)[4512r,4656r:1)  0@4480r 1@4512r weight:0.000000e+00
%90 [4544r,4560r:2)[4560r,4592r:0)[4592r,4672r:1)  0@4560r 1@4592r 2@4544r weight:0.000000e+00
%93 [3200r,3232r:0)  0@3200r weight:0.000000e+00
%94 [3280r,3312r:0)  0@3280r weight:0.000000e+00
%95 [3296r,3312r:0)  0@3296r weight:0.000000e+00
%96 [3696r,4784B:0)  0@3696r weight:0.000000e+00
%98 [2640r,2976r:0)  0@2640r weight:0.000000e+00
%99 [2192r,2720r:0)  0@2192r weight:0.000000e+00
%100 [2208r,2736r:0)  0@2208r weight:0.000000e+00
RegMasks: 176r 544r 704r 768r 832r 896r 960r 1024r 1104r 1168r 1232r 1312r 1376r 1440r 1648r 2080r 3008r 3248r 3648r 4080r 4432r 4704r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=1, align=1, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=96, align=16, at location [SP+8]
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=96, align=16, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
144B	  $rdi = MOV32ri64 @.str
160B	  $rsi = MOV32ri64 @.str.1
176B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %4:gr64 = COPY killed $rax
224B	  MOV64mr %stack.11.fp, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.fp)
240B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags
256B	  JCC_1 %bb.2, 4, implicit killed $eflags
272B	  JMP_1 %bb.1

288B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

304B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1 :: (store 4 into @timeron)
320B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 8, $noreg, @.str.2 :: (store 8 into %ir.arrayidx)
336B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 16, $noreg, @.str.3 :: (store 8 into %ir.arrayidx1, align 16)
352B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 24, $noreg, @.str.4 :: (store 8 into %ir.arrayidx2)
368B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 32, $noreg, @.str.5 :: (store 8 into %ir.arrayidx3, align 16)
384B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 40, $noreg, @.str.6 :: (store 8 into %ir.arrayidx4)
400B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 48, $noreg, @.str.7 :: (store 8 into %ir.arrayidx5, align 16)
416B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 56, $noreg, @.str.8 :: (store 8 into %ir.arrayidx6)
432B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 64, $noreg, @.str.9 :: (store 8 into %ir.arrayidx7, align 16)
448B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 72, $noreg, @.str.10 :: (store 8 into %ir.arrayidx8)
464B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 80, $noreg, @.str.11 :: (store 8 into %ir.arrayidx9, align 16)
480B	  MOV64mi32 %stack.10.t_names, 1, $noreg, 88, $noreg, @.str.12 :: (store 8 into %ir.arrayidx10)
496B	  %5:gr64 = MOV64rm %stack.11.fp, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.fp)
512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
528B	  $rdi = COPY %5:gr64
544B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  JMP_1 %bb.3

592B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

608B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0 :: (store 4 into @timeron)

624B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 @read_input, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
768B	  CALL64pcrel32 @domain, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
816B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
832B	  CALL64pcrel32 @setcoeff, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
896B	  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
944B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
960B	  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1008B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1024B	  CALL64pcrel32 @erhs, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1056B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1088B	  $edi = MOV32ri 1
1104B	  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
1120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1152B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1168B	  CALL64pcrel32 @setbv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1184B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1216B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1232B	  CALL64pcrel32 @setiv, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1264B	  %10:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1296B	  $edi = COPY %10:gr32
1312B	  CALL64pcrel32 @ssor, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp
1328B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1360B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1376B	  CALL64pcrel32 @error, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1424B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
1440B	  CALL64pcrel32 @pintgr, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit-def $rsp, implicit-def $ssp
1456B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1472B	  %11:fr64 = MOVSDrm_alt $rip, 1, $noreg, @frc, $noreg :: (dereferenceable load 8 from @frc)
1488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1536B	  %14:gr64 = LEA64r %stack.3.Class, 1, $noreg, 0, $noreg
1552B	  %15:gr64 = LEA64r %stack.4.verified, 1, $noreg, 0, $noreg
1568B	  $rdi = MOV32ri64 @rsdnm
1584B	  $rsi = MOV32ri64 @errnm
1600B	  $xmm0 = COPY %11:fr64
1616B	  $rdx = COPY %14:gr64
1632B	  $rcx = COPY %15:gr64
1648B	  CALL64pcrel32 @verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $rdx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp
1664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
1680B	  %16:fr64 = CVTSI2SDrm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
1696B	  %27:gr32 = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
1712B	  %19:fr64 = CVTSI2SDrr %27:gr32
1744B	  %19:fr64 = MULSDrm %19:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
1760B	  %20:gr32 = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
1776B	  %22:fr64 = CVTSI2SDrr %20:gr32
1808B	  %22:fr64 = MULSDrr %22:fr64(tied-def 0), %19:fr64
1824B	  %23:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
1840B	  %25:fr64 = CVTSI2SDrr %23:gr32
1872B	  %25:fr64 = MULSDrr %25:fr64(tied-def 0), %22:fr64
1904B	  %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %20:gr32, implicit-def dead $eflags
1936B	  %27:gr32 = nsw ADD32rr %27:gr32(tied-def 0), %23:gr32, implicit-def dead $eflags
1952B	  %30:fr64 = CVTSI2SDrr %27:gr32
1968B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
2000B	  %30:fr64 = DIVSDrr %30:fr64(tied-def 0), %29:fr64
2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2032B	  %31:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
2048B	  $xmm0 = COPY %30:fr64
2064B	  $xmm1 = COPY %31:fr64
2080B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
2096B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2112B	  %34:fr64 = COPY killed $xmm0
2144B	  %34:fr64 = MULSDrm %34:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load 8 from constant-pool)
2176B	  %34:fr64 = ADDSDrr %34:fr64(tied-def 0), %25:fr64
2192B	  undef %99.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @nx0, $noreg :: (dereferenceable load 4 from @nx0)
2208B	  undef %100.sub_32bit:gr64_nosp = MOV32rm $rip, 1, $noreg, @ny0, $noreg :: (dereferenceable load 4 from @ny0)
2256B	  %39:gr32 = LEA64_32r %99:gr64_with_sub_8bit, 1, %100:gr64_nosp, 0, $noreg
2272B	  %38:gr32 = MOV32rm $rip, 1, $noreg, @nz0, $noreg :: (dereferenceable load 4 from @nz0)
2304B	  %39:gr32 = nsw ADD32rr %39:gr32(tied-def 0), %38:gr32, implicit-def dead $eflags
2320B	  %42:fr64 = CVTSI2SDrr %39:gr32
2352B	  %42:fr64 = MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
2384B	  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %29:fr64
2416B	  %42:fr64 = ADDSDrr %42:fr64(tied-def 0), %34:fr64
2448B	  %42:fr64 = ADDSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
2480B	  %42:fr64 = MULSDrr %42:fr64(tied-def 0), %16:fr64
2496B	  %46:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
2512B	  %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
2544B	  %47:fr64 = MULSDrr %47:fr64(tied-def 0), %46:fr64
2576B	  %42:fr64 = DIVSDrr %42:fr64(tied-def 0), %47:fr64
2592B	  MOVSDmr %stack.5.mflops, 1, $noreg, 0, $noreg, %42:fr64 :: (store 8 into %ir.mflops)
2608B	  %49:gr32 = MOVSX32rm8 %stack.3.Class, 1, $noreg, 0, $noreg :: (dereferenceable load 1 from %ir.Class)
2624B	  %50:gr32 = MOV32rm $rip, 1, $noreg, @itmax, $noreg :: (dereferenceable load 4 from @itmax)
2640B	  undef %98.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.4.verified, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.verified)
2656B	  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2688B	  $rdi = MOV32ri64 @.str.13
2704B	  $esi = COPY %49:gr32
2720B	  $edx = COPY %99.sub_32bit:gr64_with_sub_8bit
2736B	  $ecx = COPY %100.sub_32bit:gr64_nosp
2752B	  $r8d = COPY %38:gr32
2768B	  $r9d = COPY %50:gr32
2784B	  $xmm0 = COPY %46:fr64
2800B	  $xmm1 = COPY %42:fr64
2816B	  PUSH64i32 @.str.23, implicit-def $rsp, implicit $rsp
2832B	  PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp
2848B	  PUSH64i32 @.str.21, implicit-def $rsp, implicit $rsp
2864B	  PUSH64i32 @.str.20, implicit-def $rsp, implicit $rsp
2880B	  PUSH64i32 @.str.19, implicit-def $rsp, implicit $rsp
2896B	  PUSH64i32 @.str.18, implicit-def $rsp, implicit $rsp
2912B	  PUSH64i32 @.str.17, implicit-def $rsp, implicit $rsp
2928B	  PUSH64i32 @.str.16, implicit-def $rsp, implicit $rsp
2944B	  PUSH64i32 @.str.15, implicit-def $rsp, implicit $rsp
2976B	  PUSH64r %98:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp
2992B	  PUSH64i32 @.str.14, implicit-def $rsp, implicit $rsp
3008B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp
3024B	  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3040B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags :: (dereferenceable load 4 from @timeron)
3056B	  JCC_1 %bb.14, 4, implicit killed $eflags
3072B	  JMP_1 %bb.4

3088B	bb.4.if.then31:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

3104B	  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)

3120B	bb.5.for.cond:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

3136B	  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
3152B	  JCC_1 %bb.7, 15, implicit killed $eflags
3168B	  JMP_1 %bb.6

3184B	bb.6.for.body:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

3200B	  %93:gr32 = MOV32rm %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3216B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3232B	  $edi = COPY %93:gr32
3248B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
3264B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3280B	  %94:fr64 = COPY killed $xmm0
3296B	  %95:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3312B	  MOVSDmr %stack.8.trecs, 8, %95:gr64_nosp, 0, $noreg, %94:fr64 :: (store 8 into %ir.arrayidx35)
3328B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
3344B	  JMP_1 %bb.5

3360B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

3376B	  %56:fr64 = MOVSDrm_alt $rip, 1, $noreg, @maxtime, $noreg :: (dereferenceable load 8 from @maxtime)
3392B	  MOVSDmr %stack.7.tmax, 1, $noreg, 0, $noreg, %56:fr64 :: (store 8 into %ir.tmax)
3408B	  %57:fr64 = FsFLD0SD
3424B	  UCOMISDrr %56:fr64, %57:fr64, implicit-def $eflags
3440B	  JCC_1 %bb.9, 5, implicit $eflags
3456B	  JCC_1 %bb.9, 10, implicit killed $eflags
3472B	  JMP_1 %bb.8

3488B	bb.8.if.then38:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

3504B	  %58:gr64 = MOV64ri 4607182418800017408
3520B	  MOV64mr %stack.7.tmax, 1, $noreg, 0, $noreg, %58:gr64 :: (store 8 into %ir.tmax)

3536B	bb.9.if.end39:
	; predecessors: %bb.7, %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

3552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3616B	  $rdi = MOV32ri64 @.str.24
3632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
3648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
3664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
3680B	  MOV32mi %stack.9.i, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.i)
3696B	  %96:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.7, $noreg :: (load 8 from constant-pool)

3792B	bb.10.for.cond41:
	; predecessors: %bb.9, %bb.13
	  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

3808B	  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 11, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
3824B	  JCC_1 %bb.14, 15, implicit killed $eflags
3840B	  JMP_1 %bb.11

3856B	bb.11.for.body44:
	; predecessors: %bb.10
	  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

3872B	  %66:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
3888B	  %67:gr64 = MOV64rm %stack.10.t_names, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx46)
3904B	  %68:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %66:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx50)
3920B	  %70:fr64 = COPY %68:fr64
3936B	  %70:fr64 = MULSDrr %70:fr64(tied-def 0), %96:fr64
3968B	  %70:fr64 = DIVSDrm %70:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
3984B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4000B	  $rdi = MOV32ri64 @.str.25
4016B	  $rsi = COPY %67:gr64
4032B	  $xmm0 = COPY %68:fr64
4048B	  $xmm1 = COPY %70:fr64
4064B	  $al = MOV8ri 2
4080B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4096B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4112B	  CMP32mi8 %stack.9.i, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (dereferenceable load 4 from %ir.i)
4128B	  JCC_1 %bb.13, 5, implicit killed $eflags
4144B	  JMP_1 %bb.12

4160B	bb.12.if.then56:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

4176B	  %78:fr64 = MOVSDrm_alt %stack.8.trecs, 1, $noreg, 16, $noreg :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
4208B	  %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 24, $noreg :: (dereferenceable load 8 from %ir.arrayidx58)
4240B	  %78:fr64 = ADDSDrm %78:fr64(tied-def 0), %stack.8.trecs, 1, $noreg, 32, $noreg :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
4256B	  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %78:fr64 :: (store 8 into %ir.t)
4272B	  %81:fr64 = COPY %78:fr64
4288B	  %81:fr64 = MULSDrr %81:fr64(tied-def 0), %96:fr64
4320B	  %81:fr64 = DIVSDrm %81:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
4336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4352B	  $rdi = MOV32ri64 @.str.26
4368B	  $rsi = MOV32ri64 @.str.27
4384B	  $xmm0 = COPY %78:fr64
4400B	  $xmm1 = COPY %81:fr64
4416B	  $al = MOV8ri 2
4432B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4448B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4464B	  %86:gr64_nosp = MOVSX64rm32 %stack.9.i, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.i)
4480B	  %88:fr64 = MOVSDrm_alt %stack.8.trecs, 8, %86:gr64_nosp, 0, $noreg :: (load 8 from %ir.arrayidx66)
4512B	  %88:fr64 = SUBSDrm %88:fr64(tied-def 0), %stack.6.t, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.t)
4528B	  MOVSDmr %stack.6.t, 1, $noreg, 0, $noreg, %88:fr64 :: (store 8 into %ir.t)
4544B	  %90:fr64 = COPY %88:fr64
4560B	  %90:fr64 = MULSDrr %90:fr64(tied-def 0), %96:fr64
4592B	  %90:fr64 = DIVSDrm %90:fr64(tied-def 0), %stack.7.tmax, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.tmax)
4608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4624B	  $rdi = MOV32ri64 @.str.26
4640B	  $rsi = MOV32ri64 @.str.28
4656B	  $xmm0 = COPY %88:fr64
4672B	  $xmm1 = COPY %90:fr64
4688B	  $al = MOV8ri 2
4704B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

4736B	bb.13.if.end71:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

4752B	  INC32m %stack.9.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i)
4768B	  JMP_1 %bb.10

4784B	bb.14.if.end75:
	; predecessors: %bb.3, %bb.10

4816B	  $eax = MOV32r0 implicit-def dead $eflags
4832B	  RET 0, killed $eax

# End machine code for function main.

