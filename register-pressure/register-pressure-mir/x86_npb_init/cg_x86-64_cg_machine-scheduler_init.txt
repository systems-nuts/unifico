Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=1, align=1, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=24, align=16, at location [SP+8]
  fi#20: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#2: 0x422979CA8D600000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
  cp#5: 1.000000e+00, align=8
  cp#6: 6.000000e+01, align=8
Function Live Ins: $edi in %8, $rsi in %9

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $rsi
  %9:gr64 = COPY $rsi
  %8:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.argv.addr)
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.i); cg.c:117:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !138; cg.c:117:5
  JMP_1 %bb.2, debug-location !138; cg.c:117:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %271:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
  $edi = COPY %271:gr32, debug-location !141; cg.c:118:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !141; cg.c:118:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !142 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:117:30
  JMP_1 %bb.1, debug-location !143; cg.c:117:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !152; cg.c:122:15
  $rdi = MOV32ri64 @.str, debug-location !152; cg.c:122:15
  $rsi = MOV32ri64 @.str.1, debug-location !152; cg.c:122:15
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !152; cg.c:122:15
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !152; cg.c:122:15
  %14:gr64 = COPY killed $rax, debug-location !152; cg.c:122:15
  MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %14:gr64, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  TEST64rr %14:gr64, %14:gr64, implicit-def $eflags, debug-location !155; cg.c:122:41
  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !156; cg.c:122:9
  JMP_1 %bb.4, debug-location !156; cg.c:122:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  MOV64mi32 %stack.19.t_names, 1, $noreg, 0, $noreg, @.str.2, debug-location !160 :: (store 8 into %ir.arrayidx4, align 16); cg.c:124:25
  MOV64mi32 %stack.19.t_names, 1, $noreg, 8, $noreg, @.str.3, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  MOV64mi32 %stack.19.t_names, 1, $noreg, 16, $noreg, @.str.4, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  %15:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; cg.c:127:9
  $rdi = COPY %15:gr64, debug-location !166; cg.c:127:9
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !166; cg.c:127:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; cg.c:127:9
  JMP_1 %bb.6, debug-location !167; cg.c:128:5

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0, debug-location !168 :: (store 4 into @timeron); cg.c:130:17

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !170; cg.c:133:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !170; cg.c:133:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !170; cg.c:133:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !170; cg.c:133:5
  MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !171 :: (store 4 into @firstrow); cg.c:135:14
  MOV32mi $rip, 1, $noreg, @lastrow, $noreg, 74999, debug-location !172 :: (store 4 into @lastrow); cg.c:136:13
  MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !173 :: (store 4 into @firstcol); cg.c:137:14
  MOV32mi $rip, 1, $noreg, @lastcol, $noreg, 74999, debug-location !174 :: (store 4 into @lastcol); cg.c:138:13
  MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !175 :: (store 1 into %ir.Class); cg.c:153:15
  %18:gr64 = MOV64ri 4627086287187887514
  MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %18:gr64, debug-location !181 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; cg.c:172:5
  $rdi = MOV32ri64 @.str.5, debug-location !182; cg.c:172:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !182; cg.c:172:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !182; cg.c:172:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; cg.c:172:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !183; cg.c:173:5
  $rdi = MOV32ri64 @.str.6, debug-location !183; cg.c:173:5
  $esi = MOV32ri 75000, debug-location !183; cg.c:173:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !183; cg.c:173:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !183; cg.c:173:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !183; cg.c:173:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:174:5
  $rdi = MOV32ri64 @.str.7, debug-location !184; cg.c:174:5
  $esi = MOV32ri 75, debug-location !184; cg.c:174:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:174:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:174:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:174:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:175:5
  $rdi = MOV32ri64 @.str.8, debug-location !185; cg.c:175:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:175:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:175:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:175:5
  MOV32mi $rip, 1, $noreg, @naa, $noreg, 75000, debug-location !186 :: (store 4 into @naa); cg.c:177:9
  MOV32mi $rip, 1, $noreg, @nzz, $noreg, 14700000, debug-location !187 :: (store 4 into @nzz); cg.c:178:9
  %30:gr64 = MOV64ri 4734050326586327040
  MOV64mr $rip, 1, $noreg, @tran, $noreg, %30:gr64, debug-location !188 :: (store 8 into @tran); cg.c:183:10
  %32:gr64 = MOV64ri 4742906807993761792
  MOV64mr $rip, 1, $noreg, @amult, $noreg, %32:gr64, debug-location !189 :: (store 8 into @amult); cg.c:184:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !191; cg.c:185:12
  %33:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  $rdi = MOV32ri64 @tran, debug-location !191; cg.c:185:12
  $xmm0 = COPY %33:fr64, debug-location !191; cg.c:185:12
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !191; cg.c:185:12
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !191; cg.c:185:12
  %34:fr64 = COPY killed $xmm0, debug-location !191; cg.c:185:12
  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %34:fr64, debug-location !192 :: (store 8 into %ir.zeta); cg.c:185:10
  %35:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !193 :: (dereferenceable load 4 from @naa); cg.c:190:11
  %36:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !194 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  %37:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !195 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  undef %280.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !196 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  undef %278.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  undef %276.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  ADJCALLSTACKDOWN64 56, 0, 56, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !199; cg.c:190:5
  $edi = COPY %35:gr32, debug-location !199; cg.c:190:5
  $esi = COPY %36:gr32, debug-location !199; cg.c:190:5
  $rdx = MOV32ri64 @a, debug-location !199; cg.c:190:5
  $rcx = MOV32ri64 @colidx, debug-location !199; cg.c:190:5
  $r8 = MOV32ri64 @rowstr, debug-location !199; cg.c:190:5
  $r9d = COPY %37:gr32, debug-location !199; cg.c:190:5
  PUSH64i32 @iv, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  PUSH64i32 @aelt, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  PUSH64i32 @acol, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  PUSH64i32 @arow, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  PUSH64r %276:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  PUSH64r %278:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  PUSH64r %280:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  CALL64pcrel32 @makea, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp, debug-location !199; cg.c:190:5
  ADJCALLSTACKUP64 56, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !199; cg.c:190:5
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !200 :: (store 4 into %ir.j); cg.c:202:12

bb.7.for.cond10:
; predecessors: %bb.6, %bb.11
  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

  %48:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !205 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
  %48:gr32 = nsw INC32r %48:gr32(tied-def 0), implicit-def dead $eflags, debug-location !208; cg.c:202:40
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags, debug-location !209 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !210; cg.c:202:5
  JMP_1 %bb.8, debug-location !210; cg.c:202:5

bb.8.for.body12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %262:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  %263:gr32 = MOV32rm $noreg, 4, %262:gr64_nosp, @rowstr, $noreg, debug-location !214 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %263:gr32, debug-location !215 :: (store 4 into %ir.k); cg.c:203:16

bb.9.for.cond14:
; predecessors: %bb.8, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

  %264:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  %265:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  CMP32rm %264:gr32, $noreg, 4, %265:gr64_nosp, @rowstr + 4, $noreg, implicit-def $eflags, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:31
  JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !223; cg.c:203:9
  JMP_1 %bb.10, debug-location !223; cg.c:203:9

bb.10.for.body19:
; predecessors: %bb.9
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %285:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  %269:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !227 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  SUB32mr $noreg, 4, %285:gr64_nosp, @colidx, $noreg, %269:gr32, implicit-def dead $eflags, debug-location !231 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
  %270:gr32 = LEA64_32r %285:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !232; cg.c:203:49
  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %270:gr32, debug-location !232 :: (store 4 into %ir.k); cg.c:203:49
  JMP_1 %bb.9, debug-location !233; cg.c:203:9

bb.11.for.end27:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !236 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:202:46
  JMP_1 %bb.7, debug-location !237; cg.c:202:5

bb.12.for.end30:
; predecessors: %bb.7
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !240 :: (store 4 into %ir.i); cg.c:211:12
  %260:gr64 = MOV64ri 4607182418800017408

bb.13.for.cond31:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 75000, implicit-def $eflags, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:19
  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !246; cg.c:211:5
  JMP_1 %bb.14, debug-location !246; cg.c:211:5

bb.14.for.body33:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %286:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  MOV64mr $noreg, 8, %286:gr64_nosp, @x, $noreg, %260:gr64, debug-location !250 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  %261:gr32 = LEA64_32r %286:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !251; cg.c:211:30
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %261:gr32, debug-location !251 :: (store 4 into %ir.i); cg.c:211:30
  JMP_1 %bb.13, debug-location !252; cg.c:211:5

bb.15.for.end38:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !255 :: (store 4 into %ir.j); cg.c:214:12

bb.16.for.cond39:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %55:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !260 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  %55:gr32 = nsw SUB32rm %55:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
  %55:gr32 = nsw INC32r %55:gr32(tied-def 0), implicit-def dead $eflags, debug-location !263; cg.c:214:40
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %55:gr32, implicit-def $eflags, debug-location !264 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
  JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !265; cg.c:214:5
  JMP_1 %bb.17, debug-location !265; cg.c:214:5

bb.17.for.body43:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %287:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  MOV64mi32 $noreg, 8, %287:gr64_nosp, @q, $noreg, 0, debug-location !269 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  MOV64mi32 $noreg, 8, %287:gr64_nosp, @z, $noreg, 0, debug-location !272 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  MOV64mi32 $noreg, 8, %287:gr64_nosp, @r, $noreg, 0, debug-location !275 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  MOV64mi32 $noreg, 8, %287:gr64_nosp, @p, $noreg, 0, debug-location !278 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  %257:gr32 = LEA64_32r %287:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !279; cg.c:214:46
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %257:gr32, debug-location !279 :: (store 4 into %ir.j); cg.c:214:46
  JMP_1 %bb.16, debug-location !280; cg.c:214:5

bb.18.for.end54:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !283 :: (store 8 into %ir.zeta); cg.c:221:10
  MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !284 :: (store 4 into %ir.it); cg.c:228:13
  %221:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  %233:fr64 = FsFLD0SD
  %235:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

bb.19.for.cond55:
; predecessors: %bb.18, %bb.29
  successors: %bb.20(0x7c000000), %bb.30(0x04000000); %bb.20(96.88%), %bb.30(3.12%)

  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:21
  JCC_1 %bb.30, 15, implicit killed $eflags, debug-location !290; cg.c:228:5
  JMP_1 %bb.20, debug-location !290; cg.c:228:5

bb.20.for.body57:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !291; cg.c:232:9
  $rdi = MOV32ri64 @colidx, debug-location !291; cg.c:232:9
  $rsi = MOV32ri64 @rowstr, debug-location !291; cg.c:232:9
  $rdx = MOV32ri64 @x, debug-location !291; cg.c:232:9
  $rcx = MOV32ri64 @z, debug-location !291; cg.c:232:9
  $r8 = MOV32ri64 @a, debug-location !291; cg.c:232:9
  $r9 = MOV32ri64 @p, debug-location !291; cg.c:232:9
  PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
  PUSH64i32 @r, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
  PUSH64i32 @q, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !291; cg.c:232:9
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !291; cg.c:232:9
  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !293 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !294 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 4 into %ir.j); cg.c:242:16

bb.21.for.cond58:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !300 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
  %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !303; cg.c:242:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !304 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !305; cg.c:242:9
  JMP_1 %bb.22, debug-location !305; cg.c:242:9

bb.22.for.body62:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %289:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !308 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  %253:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @z, $noreg, debug-location !317 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  %251:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx64)
  %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
  %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !313 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %251:fr64, debug-location !314 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  %253:fr64 = MULSDrr %253:fr64(tied-def 0), %253:fr64, debug-location !320; cg.c:244:44
  %253:fr64 = ADDSDrm %253:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %253:fr64, debug-location !322 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  %254:gr32 = LEA64_32r %289:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !323; cg.c:242:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %254:gr32, debug-location !323 :: (store 4 into %ir.j); cg.c:242:50
  JMP_1 %bb.21, debug-location !324; cg.c:242:9

bb.23.for.end76:
; predecessors: %bb.21
  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

  %0:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !327 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  UCOMISDrr %0:fr64, %233:fr64, implicit-def $eflags, debug-location !329; cg.c:247:26
  JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !329; cg.c:247:26

bb.24:
; predecessors: %bb.23
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %283:fr64 = SQRTSDr %0:fr64
  JMP_1 %bb.26

bb.25.call.sqrt:
; predecessors: %bb.23
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !329; cg.c:247:26
  $xmm0 = COPY %0:fr64, debug-location !329; cg.c:247:26
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !329; cg.c:247:26
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !329; cg.c:247:26
  %283:fr64 = COPY killed $xmm0, debug-location !329; cg.c:247:26

bb.26.for.end76.split:
; predecessors: %bb.25, %bb.24
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %236:fr64 = COPY %235:fr64, debug-location !329; cg.c:247:26
  %236:fr64 = DIVSDrr %236:fr64(tied-def 0), %283:fr64, debug-location !329; cg.c:247:26
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %236:fr64, debug-location !330 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !331 :: (store 4 into %ir.j); cg.c:252:16

bb.27.for.cond78:
; predecessors: %bb.26, %bb.28
  successors: %bb.28(0x7c000000), %bb.29(0x04000000); %bb.28(96.88%), %bb.29(3.12%)

  %240:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !336 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  %240:gr32 = nsw SUB32rm %240:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
  %240:gr32 = nsw INC32r %240:gr32(tied-def 0), implicit-def dead $eflags, debug-location !339; cg.c:252:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %240:gr32, implicit-def $eflags, debug-location !340 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
  JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !341; cg.c:252:9
  JMP_1 %bb.28, debug-location !341; cg.c:252:9

bb.28.for.body82:
; predecessors: %bb.27
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %245:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !342 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  %290:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  %245:fr64 = MULSDrm %245:fr64(tied-def 0), $noreg, 8, %290:gr64_nosp, @z, $noreg, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:31
  MOVSDmr $noreg, 8, %290:gr64_nosp, @x, $noreg, %245:fr64, debug-location !349 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  %246:gr32 = LEA64_32r %290:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !350; cg.c:252:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %246:gr32, debug-location !350 :: (store 4 into %ir.j); cg.c:252:50
  JMP_1 %bb.27, debug-location !351; cg.c:252:9

bb.29.for.end90:
; predecessors: %bb.27
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !354 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:228:29
  JMP_1 %bb.19, debug-location !355; cg.c:228:5

bb.30.for.end93:
; predecessors: %bb.19
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !358 :: (store 4 into %ir.i); cg.c:260:12

bb.31.for.cond94:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 75000, implicit-def $eflags, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:19
  JCC_1 %bb.33, 15, implicit killed $eflags, debug-location !364; cg.c:260:5
  JMP_1 %bb.32, debug-location !364; cg.c:260:5

bb.32.for.body96:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %291:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  MOV64mr $noreg, 8, %291:gr64_nosp, @x, $noreg, %260:gr64, debug-location !368 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  %219:gr32 = LEA64_32r %291:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !369; cg.c:260:30
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %219:gr32, debug-location !369 :: (store 4 into %ir.i); cg.c:260:30
  JMP_1 %bb.31, debug-location !370; cg.c:260:5

bb.33.for.end101:
; predecessors: %bb.31
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !373 :: (store 8 into %ir.zeta); cg.c:264:10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !374; cg.c:266:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !374; cg.c:266:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !374; cg.c:266:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !374; cg.c:266:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !375; cg.c:268:55
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !375; cg.c:268:55
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !375; cg.c:268:55
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !375; cg.c:268:55
  %62:fr64 = COPY killed $xmm0, debug-location !375; cg.c:268:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:268:5
  $rdi = MOV32ri64 @.str.9, debug-location !376; cg.c:268:5
  $xmm0 = COPY %62:fr64, debug-location !376; cg.c:268:5
  $al = MOV8ri 1, debug-location !376; cg.c:268:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !376; cg.c:268:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:268:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:270:5
  $edi = MOV32ri 1, debug-location !377; cg.c:270:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !377; cg.c:270:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:270:5
  MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !378 :: (store 4 into %ir.it); cg.c:279:13
  %180:fr64 = FsFLD0SD
  %272:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

bb.34.for.cond108:
; predecessors: %bb.33, %bb.50
  successors: %bb.35(0x7c000000), %bb.51(0x04000000); %bb.35(96.88%), %bb.51(3.12%)

  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 75, implicit-def $eflags, debug-location !383 :: (dereferenceable load 4 from %ir.it); cg.c:279:21
  JCC_1 %bb.51, 15, implicit killed $eflags, debug-location !384; cg.c:279:5
  JMP_1 %bb.35, debug-location !384; cg.c:279:5

bb.35.for.body110:
; predecessors: %bb.34
  successors: %bb.36(0x50000000), %bb.37(0x30000000); %bb.36(62.50%), %bb.37(37.50%)

  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !385 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  JCC_1 %bb.37, 4, implicit killed $eflags, debug-location !388; cg.c:284:13
  JMP_1 %bb.36, debug-location !388; cg.c:284:13

bb.36.if.then111:
; predecessors: %bb.35
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !389; cg.c:285:13
  $edi = MOV32ri 2, debug-location !389; cg.c:285:13
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !389; cg.c:285:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !389; cg.c:285:13

bb.37.if.end112:
; predecessors: %bb.35, %bb.36
  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !390; cg.c:286:9
  $rdi = MOV32ri64 @colidx, debug-location !390; cg.c:286:9
  $rsi = MOV32ri64 @rowstr, debug-location !390; cg.c:286:9
  $rdx = MOV32ri64 @x, debug-location !390; cg.c:286:9
  $rcx = MOV32ri64 @z, debug-location !390; cg.c:286:9
  $r8 = MOV32ri64 @a, debug-location !390; cg.c:286:9
  $r9 = MOV32ri64 @p, debug-location !390; cg.c:286:9
  PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
  PUSH64i32 @r, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
  PUSH64i32 @q, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !390; cg.c:286:9
  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !390; cg.c:286:9
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !391 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  JCC_1 %bb.39, 4, implicit killed $eflags, debug-location !393; cg.c:287:13
  JMP_1 %bb.38, debug-location !393; cg.c:287:13

bb.38.if.then114:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:288:13
  $edi = MOV32ri 2, debug-location !394; cg.c:288:13
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !394; cg.c:288:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:288:13

bb.39.if.end115:
; predecessors: %bb.37, %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !395 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !396 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.j); cg.c:299:16

bb.40.for.cond116:
; predecessors: %bb.39, %bb.41
  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

  %178:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !402 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  %178:gr32 = nsw SUB32rm %178:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
  %178:gr32 = nsw INC32r %178:gr32(tied-def 0), implicit-def dead $eflags, debug-location !405; cg.c:299:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %178:gr32, implicit-def $eflags, debug-location !406 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
  JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !407; cg.c:299:9
  JMP_1 %bb.41, debug-location !407; cg.c:299:9

bb.41.for.body120:
; predecessors: %bb.40
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  %293:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !410 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  %214:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @z, $noreg, debug-location !419 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  %212:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx122)
  %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
  %212:fr64 = ADDSDrm %212:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %212:fr64, debug-location !416 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  %214:fr64 = MULSDrr %214:fr64(tied-def 0), %214:fr64, debug-location !422; cg.c:301:44
  %214:fr64 = ADDSDrm %214:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %214:fr64, debug-location !424 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  %215:gr32 = LEA64_32r %293:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !425; cg.c:299:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %215:gr32, debug-location !425 :: (store 4 into %ir.j); cg.c:299:50
  JMP_1 %bb.40, debug-location !426; cg.c:299:9

bb.42.for.end135:
; predecessors: %bb.40
  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

  %4:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  UCOMISDrr %4:fr64, %180:fr64, implicit-def $eflags, debug-location !431; cg.c:304:26
  JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !431; cg.c:304:26

bb.43:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %284:fr64 = SQRTSDr %4:fr64
  JMP_1 %bb.45

bb.44.call.sqrt1:
; predecessors: %bb.42
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !431; cg.c:304:26
  $xmm0 = COPY %4:fr64, debug-location !431; cg.c:304:26
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !431; cg.c:304:26
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !431; cg.c:304:26
  %284:fr64 = COPY killed $xmm0, debug-location !431; cg.c:304:26

bb.45.for.end135.split:
; predecessors: %bb.44, %bb.43
  successors: %bb.46(0x40000000), %bb.47(0x40000000); %bb.46(50.00%), %bb.47(50.00%)

  %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
  %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !432 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  %185:fr64 = COPY %235:fr64, debug-location !434; cg.c:306:28
  %185:fr64 = DIVSDrm %185:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
  %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %185:fr64, debug-location !436 :: (store 8 into %ir.zeta); cg.c:306:14
  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !439 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
  JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !440; cg.c:307:13
  JMP_1 %bb.46, debug-location !440; cg.c:307:13

bb.46.if.then141:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; cg.c:308:13
  $rdi = MOV32ri64 @.str.10, debug-location !441; cg.c:308:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !441; cg.c:308:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !441; cg.c:308:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; cg.c:308:13

bb.47.if.end143:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  %192:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  %193:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  %194:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !444 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !445; cg.c:309:9
  $rdi = MOV32ri64 @.str.11, debug-location !445; cg.c:309:9
  $esi = COPY %192:gr32, debug-location !445; cg.c:309:9
  $xmm0 = COPY %193:fr64, debug-location !445; cg.c:309:9
  $xmm1 = COPY %194:fr64, debug-location !445; cg.c:309:9
  $al = MOV8ri 2, debug-location !445; cg.c:309:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !445; cg.c:309:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !445; cg.c:309:9
  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !446 :: (store 4 into %ir.j); cg.c:314:16

bb.48.for.cond145:
; predecessors: %bb.47, %bb.49
  successors: %bb.49(0x7c000000), %bb.50(0x04000000); %bb.49(96.88%), %bb.50(3.12%)

  %201:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !451 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  %201:gr32 = nsw SUB32rm %201:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
  %201:gr32 = nsw INC32r %201:gr32(tied-def 0), implicit-def dead $eflags, debug-location !454; cg.c:314:44
  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %201:gr32, implicit-def $eflags, debug-location !455 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
  JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !456; cg.c:314:9
  JMP_1 %bb.49, debug-location !456; cg.c:314:9

bb.49.for.body149:
; predecessors: %bb.48
  successors: %bb.48(0x80000000); %bb.48(100.00%)

  %206:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !457 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  %295:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !459 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  %206:fr64 = MULSDrm %206:fr64(tied-def 0), $noreg, 8, %295:gr64_nosp, @z, $noreg, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:31
  MOVSDmr $noreg, 8, %295:gr64_nosp, @x, $noreg, %206:fr64, debug-location !464 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  %207:gr32 = LEA64_32r %295:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !465; cg.c:314:50
  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %207:gr32, debug-location !465 :: (store 4 into %ir.j); cg.c:314:50
  JMP_1 %bb.48, debug-location !466; cg.c:314:9

bb.50.for.end157:
; predecessors: %bb.48
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !469 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:279:33
  JMP_1 %bb.34, debug-location !470; cg.c:279:5

bb.51.for.end160:
; predecessors: %bb.34
  successors: %bb.52(0x40000000), %bb.55(0x40000000); %bb.52(50.00%), %bb.55(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !473; cg.c:321:5
  $edi = MOV32ri 1, debug-location !473; cg.c:321:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !473; cg.c:321:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !473; cg.c:321:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !474; cg.c:327:9
  $edi = MOV32ri 1, debug-location !474; cg.c:327:9
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !474; cg.c:327:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !474; cg.c:327:9
  %70:fr64 = COPY killed $xmm0, debug-location !474; cg.c:327:9
  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %70:fr64, debug-location !475 :: (store 8 into %ir.t); cg.c:327:7
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:329:5
  $rdi = MOV32ri64 @.str.12, debug-location !476; cg.c:329:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !476; cg.c:329:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !476; cg.c:329:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:329:5
  %75:gr64 = MOV64ri 4457293557087583675
  MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %75:gr64, debug-location !477 :: (store 8 into %ir.epsilon); cg.c:331:13
  CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !480 :: (dereferenceable load 1 from %ir.Class); cg.c:332:15
  JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !481; cg.c:332:9
  JMP_1 %bb.52, debug-location !481; cg.c:332:9

bb.52.if.then169:
; predecessors: %bb.51
  successors: %bb.53(0x40000000), %bb.54(0x40000000); %bb.53(50.00%), %bb.54(50.00%)

  %88:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  %85:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
  %88:vr128 = PANDrm %88:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !486 :: (load 16 from constant-pool); cg.c:333:15
  %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
  MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %88:vr128, debug-location !489 :: (store 8 into %ir.err); cg.c:333:13
  %91:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !492 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17
  JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !494; cg.c:334:13
  JMP_1 %bb.53, debug-location !494; cg.c:334:13

bb.53.if.then174:
; predecessors: %bb.52
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 1, debug-location !495 :: (store 4 into %ir.verified); cg.c:335:22
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !497; cg.c:336:13
  $rdi = MOV32ri64 @.str.13, debug-location !497; cg.c:336:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !497; cg.c:336:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !497; cg.c:336:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !497; cg.c:336:13
  %107:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !499; cg.c:337:13
  $rdi = MOV32ri64 @.str.14, debug-location !499; cg.c:337:13
  $xmm0 = COPY %107:fr64, debug-location !499; cg.c:337:13
  $al = MOV8ri 1, debug-location !499; cg.c:337:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !499; cg.c:337:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !499; cg.c:337:13
  %111:fr64 = MOVSDrm_alt %stack.18.err, 1, $noreg, 0, $noreg, debug-location !500 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:338:13
  $rdi = MOV32ri64 @.str.15, debug-location !501; cg.c:338:13
  $xmm0 = COPY %111:fr64, debug-location !501; cg.c:338:13
  $al = MOV8ri 1, debug-location !501; cg.c:338:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !501; cg.c:338:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:338:13
  JMP_1 %bb.56, debug-location !502; cg.c:339:9

bb.54.if.else178:
; predecessors: %bb.52
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !503 :: (store 4 into %ir.verified); cg.c:341:22
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:342:13
  $rdi = MOV32ri64 @.str.16, debug-location !505; cg.c:342:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !505; cg.c:342:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !505; cg.c:342:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:342:13
  %96:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !506 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !507; cg.c:343:13
  $rdi = MOV32ri64 @.str.17, debug-location !507; cg.c:343:13
  $xmm0 = COPY %96:fr64, debug-location !507; cg.c:343:13
  $al = MOV8ri 1, debug-location !507; cg.c:343:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !507; cg.c:343:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !507; cg.c:343:13
  %100:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !508 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:344:13
  $rdi = MOV32ri64 @.str.18, debug-location !509; cg.c:344:13
  $xmm0 = COPY %100:fr64, debug-location !509; cg.c:344:13
  $al = MOV8ri 1, debug-location !509; cg.c:344:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !509; cg.c:344:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:344:13
  JMP_1 %bb.56

bb.55.if.else183:
; predecessors: %bb.51
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !510 :: (store 4 into %ir.verified); cg.c:348:18
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:349:9
  $rdi = MOV32ri64 @.str.19, debug-location !512; cg.c:349:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !512; cg.c:349:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:349:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:349:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !513; cg.c:350:9
  $rdi = MOV32ri64 @.str.20, debug-location !513; cg.c:350:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !513; cg.c:350:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !513; cg.c:350:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !513; cg.c:350:9

bb.56.if.end186:
; predecessors: %bb.55, %bb.54, %bb.53
  successors: %bb.57(0x50000000), %bb.58(0x30000000); %bb.57(62.50%), %bb.58(37.50%)

  %114:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  %115:fr64 = FsFLD0SD
  UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags, debug-location !517; cg.c:353:9
  JCC_1 %bb.57, 5, implicit $eflags, debug-location !517; cg.c:353:9
  JCC_1 %bb.57, 10, implicit killed $eflags, debug-location !517; cg.c:353:9
  JMP_1 %bb.58, debug-location !517; cg.c:353:9

bb.57.if.then189:
; predecessors: %bb.56
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  %118:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !520 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
  %118:fr64 = DIVSDrm %118:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !521 :: (load 8 from constant-pool); cg.c:357:20
  MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %118:fr64, debug-location !522 :: (store 8 into %ir.mflops); cg.c:354:16
  JMP_1 %bb.59, debug-location !523; cg.c:358:5

bb.58.if.else192:
; predecessors: %bb.56
  successors: %bb.59(0x80000000); %bb.59(100.00%)

  MOV64mi32 %stack.12.mflops, 1, $noreg, 0, $noreg, 0, debug-location !524 :: (store 8 into %ir.mflops); cg.c:360:16

bb.59.if.end193:
; predecessors: %bb.58, %bb.57
  successors: %bb.60(0x50000000), %bb.69(0x30000000); %bb.60(62.50%), %bb.69(37.50%)

  %119:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !526 :: (dereferenceable load 1 from %ir.Class); cg.c:363:25
  %120:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !527 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  %121:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  undef %282.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !530; cg.c:363:5
  $rdi = MOV32ri64 @.str.21, debug-location !530; cg.c:363:5
  $esi = COPY %119:gr32, debug-location !530; cg.c:363:5
  $edx = MOV32ri 75000, debug-location !530; cg.c:363:5
  $ecx = MOV32ri 0, debug-location !530; cg.c:363:5
  $r8d = MOV32ri 0, debug-location !530; cg.c:363:5
  $r9d = MOV32ri 75, debug-location !530; cg.c:363:5
  $xmm0 = COPY %120:fr64, debug-location !530; cg.c:363:5
  $xmm1 = COPY %121:fr64, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.31, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.30, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.29, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.28, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.27, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.26, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.25, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.24, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.23, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64r %282:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !530; cg.c:363:5
  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !530; cg.c:363:5
  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !531 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  JCC_1 %bb.69, 4, implicit killed $eflags, debug-location !533; cg.c:370:9
  JMP_1 %bb.60, debug-location !533; cg.c:370:9

bb.60.if.then195:
; predecessors: %bb.59
  successors: %bb.61(0x50000000), %bb.62(0x30000000); %bb.61(62.50%), %bb.62(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:371:16
  $edi = MOV32ri 1, debug-location !534; cg.c:371:16
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !534; cg.c:371:16
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:371:16
  %129:fr64 = COPY killed $xmm0, debug-location !534; cg.c:371:16
  MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %129:fr64, debug-location !536 :: (store 8 into %ir.tmax); cg.c:371:14
  %130:fr64 = FsFLD0SD
  UCOMISDrr %129:fr64, %130:fr64, implicit-def $eflags, debug-location !540; cg.c:372:13
  JCC_1 %bb.62, 5, implicit $eflags, debug-location !540; cg.c:372:13
  JCC_1 %bb.62, 10, implicit killed $eflags, debug-location !540; cg.c:372:13
  JMP_1 %bb.61, debug-location !540; cg.c:372:13

bb.61.if.then199:
; predecessors: %bb.60
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %260:gr64, debug-location !541 :: (store 8 into %ir.tmax); cg.c:373:18

bb.62.if.end200:
; predecessors: %bb.60, %bb.61
  successors: %bb.63(0x80000000); %bb.63(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !543; cg.c:374:9
  $rdi = MOV32ri64 @.str.32, debug-location !543; cg.c:374:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !543; cg.c:374:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !543; cg.c:374:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !543; cg.c:374:9
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !544 :: (store 4 into %ir.i); cg.c:375:16
  %273:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

bb.63.for.cond202:
; predecessors: %bb.62, %bb.68
  successors: %bb.64(0x7c000000), %bb.69(0x04000000); %bb.64(96.88%), %bb.69(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.i); cg.c:375:23
  JCC_1 %bb.69, 15, implicit killed $eflags, debug-location !550; cg.c:375:9
  JMP_1 %bb.64, debug-location !550; cg.c:375:9

bb.64.for.body205:
; predecessors: %bb.63
  successors: %bb.65(0x30000000), %bb.66(0x50000000); %bb.65(37.50%), %bb.66(62.50%)

  %139:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !551 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !553; cg.c:376:17
  $edi = COPY %139:gr32, debug-location !553; cg.c:376:17
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !553; cg.c:376:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !553; cg.c:376:17
  %140:fr64 = COPY killed $xmm0, debug-location !553; cg.c:376:17
  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %140:fr64, debug-location !554 :: (store 8 into %ir.t); cg.c:376:15
  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !557 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
  JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !558; cg.c:377:17
  JMP_1 %bb.65, debug-location !558; cg.c:377:17

bb.65.if.then209:
; predecessors: %bb.64
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  %159:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !559 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  %160:gr64 = MOV64rm %stack.19.t_names, 8, %159:gr64_nosp, 0, $noreg, debug-location !561 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  %161:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !563; cg.c:378:17
  $rdi = MOV32ri64 @.str.33, debug-location !563; cg.c:378:17
  $rsi = COPY %160:gr64, debug-location !563; cg.c:378:17
  $xmm0 = COPY %161:fr64, debug-location !563; cg.c:378:17
  $al = MOV8ri 1, debug-location !563; cg.c:378:17
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !563; cg.c:378:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !563; cg.c:378:17
  JMP_1 %bb.68, debug-location !564; cg.c:379:13

bb.66.if.else213:
; predecessors: %bb.64
  successors: %bb.67(0x40000000), %bb.68(0x40000000); %bb.67(50.00%), %bb.68(50.00%)

  %141:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  %142:gr64 = MOV64rm %stack.19.t_names, 8, %141:gr64_nosp, 0, $noreg, debug-location !567 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  %143:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  %145:fr64 = COPY %143:fr64, debug-location !570; cg.c:382:26
  %145:fr64 = MULSDrr %145:fr64(tied-def 0), %273:fr64, debug-location !570; cg.c:382:26
  %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; cg.c:381:17
  $rdi = MOV32ri64 @.str.34, debug-location !573; cg.c:381:17
  $rsi = COPY %142:gr64, debug-location !573; cg.c:381:17
  $xmm0 = COPY %143:fr64, debug-location !573; cg.c:381:17
  $xmm1 = COPY %145:fr64, debug-location !573; cg.c:381:17
  $al = MOV8ri 2, debug-location !573; cg.c:381:17
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; cg.c:381:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; cg.c:381:17
  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !576 :: (dereferenceable load 4 from %ir.i); cg.c:383:23
  JCC_1 %bb.68, 5, implicit killed $eflags, debug-location !577; cg.c:383:21
  JMP_1 %bb.67, debug-location !577; cg.c:383:21

bb.67.if.then221:
; predecessors: %bb.66
  successors: %bb.68(0x80000000); %bb.68(100.00%)

  %151:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !578 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  %152:fr64 = COPY %151:fr64, debug-location !581; cg.c:384:30
  %152:fr64 = SUBSDrm %152:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %152:fr64, debug-location !582 :: (store 8 into %ir.t); cg.c:384:23
  %154:fr64 = COPY %152:fr64, debug-location !585; cg.c:386:30
  %154:fr64 = MULSDrr %154:fr64(tied-def 0), %273:fr64, debug-location !585; cg.c:386:30
  %154:fr64 = DIVSDrr %154:fr64(tied-def 0), %151:fr64, debug-location !587; cg.c:386:38
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !588; cg.c:385:21
  $rdi = MOV32ri64 @.str.35, debug-location !588; cg.c:385:21
  $rsi = MOV32ri64 @.str.36, debug-location !588; cg.c:385:21
  $xmm0 = COPY %152:fr64, debug-location !588; cg.c:385:21
  $xmm1 = COPY %154:fr64, debug-location !588; cg.c:385:21
  $al = MOV8ri 2, debug-location !588; cg.c:385:21
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !588; cg.c:385:21
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !588; cg.c:385:21

bb.68.if.end227:
; predecessors: %bb.66, %bb.67, %bb.65
  successors: %bb.63(0x80000000); %bb.63(100.00%)

  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !590 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:375:34
  JMP_1 %bb.63, debug-location !591; cg.c:375:9

bb.69.if.end231:
; predecessors: %bb.59, %bb.63

  $eax = MOV32r0 implicit-def dead $eflags, debug-location !594; cg.c:394:5
  RET 0, killed $eax, debug-location !594; cg.c:394:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %9:gr64 = COPY $rsi
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(1):   %8:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%8
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr32 = COPY $edi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64 = COPY $rsi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gr64 = COPY $rsi
SU(1):   %8:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.argv.addr)
SU(5):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

********** MI Scheduling **********
main:%bb.3 for.end
  From: %14:gr64 = COPY killed $rax, debug-location !152; cg.c:122:15
    To: JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !156; cg.c:122:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %14:gr64 = COPY killed $rax, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%14
    SU(1): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(1):   MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %14:gr64, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(2):   TEST64rr %14:gr64, %14:gr64, implicit-def $eflags, debug-location !155; cg.c:122:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !156; cg.c:122:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %14:gr64, %14:gr64, implicit-def $eflags, debug-location !155; cg.c:122:41
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %14:gr64, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr64 = COPY killed $rax, debug-location !152; cg.c:122:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %14:gr64 = COPY killed $rax, debug-location !152; cg.c:122:15
SU(1):   MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %14:gr64, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
SU(2):   TEST64rr %14:gr64, %14:gr64, implicit-def $eflags, debug-location !155; cg.c:122:41

********** MI Scheduling **********
main:%bb.3 for.end
  From: $rdi = MOV32ri64 @.str, debug-location !152; cg.c:122:15
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !152; cg.c:122:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.1, debug-location !152; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !152; cg.c:122:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.1, debug-location !152; cg.c:122:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str, debug-location !152; cg.c:122:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $rdi = MOV32ri64 @.str, debug-location !152; cg.c:122:15
SU(1):   $rsi = MOV32ri64 @.str.1, debug-location !152; cg.c:122:15

********** MI Scheduling **********
main:%bb.4 if.then
  From: MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; cg.c:127:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV64mi32 %stack.19.t_names, 1, $noreg, 0, $noreg, @.str.2, debug-location !160 :: (store 8 into %ir.arrayidx4, align 16); cg.c:124:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV64mi32 %stack.19.t_names, 1, $noreg, 8, $noreg, @.str.3, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV64mi32 %stack.19.t_names, 1, $noreg, 16, $noreg, @.str.4, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %15:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; cg.c:127:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %15:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mi32 %stack.19.t_names, 1, $noreg, 16, $noreg, @.str.4, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mi32 %stack.19.t_names, 1, $noreg, 8, $noreg, @.str.3, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mi32 %stack.19.t_names, 1, $noreg, 0, $noreg, @.str.2, debug-location !160 :: (store 8 into %ir.arrayidx4, align 16); cg.c:124:25
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
SU(1):   MOV64mi32 %stack.19.t_names, 1, $noreg, 0, $noreg, @.str.2, debug-location !160 :: (store 8 into %ir.arrayidx4, align 16); cg.c:124:25
SU(2):   MOV64mi32 %stack.19.t_names, 1, $noreg, 8, $noreg, @.str.3, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
SU(3):   MOV64mi32 %stack.19.t_names, 1, $noreg, 16, $noreg, @.str.4, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
SU(4):   %15:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16

********** MI Scheduling **********
main:%bb.6 if.end
  From: $edi = COPY %35:gr32, debug-location !199; cg.c:190:5
    To: PUSH64i32 @iv, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %35:gr32, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $esi = COPY %36:gr32, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @a, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @colidx, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @rowstr, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9d = COPY %37:gr32, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64i32 @iv, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) $r9d = COPY %37:gr32, debug-location !199; cg.c:190:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = COPY %36:gr32, debug-location !199; cg.c:190:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(0) $edi = COPY %35:gr32, debug-location !199; cg.c:190:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = MOV32ri64 @rowstr, debug-location !199; cg.c:190:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = MOV32ri64 @colidx, debug-location !199; cg.c:190:5
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) $rdx = MOV32ri64 @a, debug-location !199; cg.c:190:5
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   $rdx = MOV32ri64 @a, debug-location !199; cg.c:190:5
SU(3):   $rcx = MOV32ri64 @colidx, debug-location !199; cg.c:190:5
SU(4):   $r8 = MOV32ri64 @rowstr, debug-location !199; cg.c:190:5
SU(0):   $edi = COPY %35:gr32, debug-location !199; cg.c:190:5
SU(1):   $esi = COPY %36:gr32, debug-location !199; cg.c:190:5
SU(5):   $r9d = COPY %37:gr32, debug-location !199; cg.c:190:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %34:fr64 = COPY killed $xmm0, debug-location !191; cg.c:185:12
    To: ADJCALLSTACKDOWN64 56, 0, 56, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !199; cg.c:190:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=12
Live In: XMM0 
Live Out: %276 %278 %280 %37 %36 %35 
Live Thru: 
  LiveReg: %276
  LiveReg: %278
  LiveReg: %280
  LiveReg: %37
  LiveReg: %36
  LiveReg: %35
Top Pressure:
FR32=1
FR32X=1
Bottom Pressure:
GR16=12
Excess PSets: 
SU(0):   %34:fr64 = COPY killed $xmm0, debug-location !191; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%34
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %34:fr64, debug-location !192 :: (store 8 into %ir.zeta); cg.c:185:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%34
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   %35:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !193 :: (dereferenceable load 4 from @naa); cg.c:190:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %36:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !194 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %37:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !195 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   undef %280.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !196 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   undef %278.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   undef %276.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 -2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 56, 0, 56, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !199; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 6 5 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) undef %276.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
Bottom Pressure:
GR16=10
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 6 5 4 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %278.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
Bottom Pressure:
GR16=8
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 5 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %280.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !196 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
Bottom Pressure:
GR16=6
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 4 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %37:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !195 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
Bottom Pressure:
GR16=4
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %36:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !194 :: (dereferenceable load 4 from @nzz); cg.c:190:16
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %35:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !193 :: (dereferenceable load 4 from @naa); cg.c:190:11
Bottom Pressure:

  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %34:fr64, debug-location !192 :: (store 8 into %ir.zeta); cg.c:185:10
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %34
  UpdateRegP: SU(1) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %34:fr64, debug-location !192 :: (store 8 into %ir.zeta); cg.c:185:10
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:fr64 = COPY killed $xmm0, debug-location !191; cg.c:185:12
Bottom Pressure:
FR32=1
FR32X=1
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %34:fr64 = COPY killed $xmm0, debug-location !191; cg.c:185:12
SU(1):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %34:fr64, debug-location !192 :: (store 8 into %ir.zeta); cg.c:185:10
SU(2):   %35:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !193 :: (dereferenceable load 4 from @naa); cg.c:190:11
SU(3):   %36:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !194 :: (dereferenceable load 4 from @nzz); cg.c:190:16
SU(4):   %37:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !195 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
SU(5):   undef %280.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !196 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
SU(6):   undef %278.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
SU(7):   undef %276.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastcol); cg.c:190:69

********** MI Scheduling **********
main:%bb.6 if.end
  From: %33:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !191; cg.c:185:12
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %33:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%33
  Single Issue       : false;
SU(1):   $rdi = MOV32ri64 @tran, debug-location !191; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %33:fr64, debug-location !191; cg.c:185:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%33
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !191; cg.c:185:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %33:fr64, debug-location !191; cg.c:185:12
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rdi = MOV32ri64 @tran, debug-location !191; cg.c:185:12
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %33:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %33:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   $rdi = MOV32ri64 @tran, debug-location !191; cg.c:185:12
SU(2):   $xmm0 = COPY %33:fr64, debug-location !191; cg.c:185:12

********** MI Scheduling **********
main:%bb.6 if.end
  From: MOV32mi $rip, 1, $noreg, @naa, $noreg, 75000, debug-location !186 :: (store 4 into @naa); cg.c:177:9
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !191; cg.c:185:12
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @naa, $noreg, 75000, debug-location !186 :: (store 4 into @naa); cg.c:177:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi $rip, 1, $noreg, @nzz, $noreg, 14700000, debug-location !187 :: (store 4 into @nzz); cg.c:178:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %30:gr64 = MOV64ri 4734050326586327040
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(3):   MOV64mr $rip, 1, $noreg, @tran, $noreg, %30:gr64, debug-location !188 :: (store 8 into @tran); cg.c:183:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(4):   %32:gr64 = MOV64ri 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(5):   MOV64mr $rip, 1, $noreg, @amult, $noreg, %32:gr64, debug-location !189 :: (store 8 into @amult); cg.c:184:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%32
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !191; cg.c:185:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rip, 1, $noreg, @amult, $noreg, %32:gr64, debug-location !189 :: (store 8 into @amult); cg.c:184:11
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 1 4 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %32:gr64 = MOV64ri 4742906807993761792
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rip, 1, $noreg, @tran, $noreg, %30:gr64, debug-location !188 :: (store 8 into @tran); cg.c:183:10
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %30:gr64 = MOV64ri 4734050326586327040
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi $rip, 1, $noreg, @nzz, $noreg, 14700000, debug-location !187 :: (store 4 into @nzz); cg.c:178:9
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @naa, $noreg, 75000, debug-location !186 :: (store 4 into @naa); cg.c:177:9
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi $rip, 1, $noreg, @naa, $noreg, 75000, debug-location !186 :: (store 4 into @naa); cg.c:177:9
SU(1):   MOV32mi $rip, 1, $noreg, @nzz, $noreg, 14700000, debug-location !187 :: (store 4 into @nzz); cg.c:178:9
SU(2):   %30:gr64 = MOV64ri 4734050326586327040
SU(3):   MOV64mr $rip, 1, $noreg, @tran, $noreg, %30:gr64, debug-location !188 :: (store 8 into @tran); cg.c:183:10
SU(4):   %32:gr64 = MOV64ri 4742906807993761792
SU(5):   MOV64mr $rip, 1, $noreg, @amult, $noreg, %32:gr64, debug-location !189 :: (store 8 into @amult); cg.c:184:11

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = MOV32ri64 @.str.8, debug-location !185; cg.c:175:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:175:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.8, debug-location !185; cg.c:175:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:175:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:175:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:175:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.8, debug-location !185; cg.c:175:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.8, debug-location !185; cg.c:175:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:175:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = MOV32ri64 @.str.7, debug-location !184; cg.c:174:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:174:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.7, debug-location !184; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 75, debug-location !184; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:174:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:174:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 75, debug-location !184; cg.c:174:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.7, debug-location !184; cg.c:174:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.7, debug-location !184; cg.c:174:5
SU(1):   $esi = MOV32ri 75, debug-location !184; cg.c:174:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:174:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = MOV32ri64 @.str.6, debug-location !183; cg.c:173:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !183; cg.c:173:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.6, debug-location !183; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 75000, debug-location !183; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !183; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !183; cg.c:173:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !183; cg.c:173:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 75000, debug-location !183; cg.c:173:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.6, debug-location !183; cg.c:173:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.6, debug-location !183; cg.c:173:5
SU(1):   $esi = MOV32ri 75000, debug-location !183; cg.c:173:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !183; cg.c:173:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $rdi = MOV32ri64 @.str.5, debug-location !182; cg.c:172:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !182; cg.c:172:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.5, debug-location !182; cg.c:172:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !182; cg.c:172:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !182; cg.c:172:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !182; cg.c:172:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.5, debug-location !182; cg.c:172:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @.str.5, debug-location !182; cg.c:172:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !182; cg.c:172:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !171 :: (store 4 into @firstrow); cg.c:135:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; cg.c:172:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !171 :: (store 4 into @firstrow); cg.c:135:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi $rip, 1, $noreg, @lastrow, $noreg, 74999, debug-location !172 :: (store 4 into @lastrow); cg.c:136:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !173 :: (store 4 into @firstcol); cg.c:137:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mi $rip, 1, $noreg, @lastcol, $noreg, 74999, debug-location !174 :: (store 4 into @lastcol); cg.c:138:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !175 :: (store 1 into %ir.Class); cg.c:153:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %18:gr64 = MOV64ri 4627086287187887514
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%18
  Single Issue       : false;
SU(6):   MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %18:gr64, debug-location !181 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%18
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; cg.c:172:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %18:gr64, debug-location !181 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 5 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %18:gr64 = MOV64ri 4627086287187887514
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !175 :: (store 1 into %ir.Class); cg.c:153:15
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi $rip, 1, $noreg, @lastcol, $noreg, 74999, debug-location !174 :: (store 4 into @lastcol); cg.c:138:13
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !173 :: (store 4 into @firstcol); cg.c:137:14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi $rip, 1, $noreg, @lastrow, $noreg, 74999, debug-location !172 :: (store 4 into @lastrow); cg.c:136:13
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !171 :: (store 4 into @firstrow); cg.c:135:14
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !171 :: (store 4 into @firstrow); cg.c:135:14
SU(1):   MOV32mi $rip, 1, $noreg, @lastrow, $noreg, 74999, debug-location !172 :: (store 4 into @lastrow); cg.c:136:13
SU(2):   MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !173 :: (store 4 into @firstcol); cg.c:137:14
SU(3):   MOV32mi $rip, 1, $noreg, @lastcol, $noreg, 74999, debug-location !174 :: (store 4 into @lastcol); cg.c:138:13
SU(4):   MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !175 :: (store 1 into %ir.Class); cg.c:153:15
SU(5):   %18:gr64 = MOV64ri 4627086287187887514
SU(6):   MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %18:gr64, debug-location !181 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27

********** MI Scheduling **********
main:%bb.7 for.cond10
  From: %48:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !205 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
    To: JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !210; cg.c:202:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %48:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !205 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%48
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%48
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%48
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %48:gr32 = nsw INC32r %48:gr32(tied-def 0), implicit-def dead $eflags, debug-location !208; cg.c:202:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%48
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%48
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags, debug-location !209 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%48
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !210; cg.c:202:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags, debug-location !209 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %48:gr32 = nsw INC32r %48:gr32(tied-def 0), implicit-def dead $eflags, debug-location !208; cg.c:202:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %48:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !205 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %48:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !205 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
SU(1):   %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
SU(2):   %48:gr32 = nsw INC32r %48:gr32(tied-def 0), implicit-def dead $eflags, debug-location !208; cg.c:202:40
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags, debug-location !209 :: (dereferenceable load 4 from %ir.j); cg.c:202:19

********** MI Scheduling **********
main:%bb.8 for.body12
  From: %262:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %262:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%262
  Single Issue       : false;
SU(1):   %263:gr32 = MOV32rm $noreg, 4, %262:gr64_nosp, @rowstr, $noreg, debug-location !214 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%262
  Successors:
    SU(2): Data Latency=4 Reg=%263
  Single Issue       : false;
SU(2):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %263:gr32, debug-location !215 :: (store 4 into %ir.k); cg.c:203:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%263
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %263:gr32, debug-location !215 :: (store 4 into %ir.k); cg.c:203:16
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %263:gr32 = MOV32rm $noreg, 4, %262:gr64_nosp, @rowstr, $noreg, debug-location !214 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %262:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %262:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
SU(1):   %263:gr32 = MOV32rm $noreg, 4, %262:gr64_nosp, @rowstr, $noreg, debug-location !214 :: (load 4 from %ir.arrayidx13); cg.c:203:18
SU(2):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %263:gr32, debug-location !215 :: (store 4 into %ir.k); cg.c:203:16

********** MI Scheduling **********
main:%bb.9 for.cond14
  From: %264:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
    To: JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !223; cg.c:203:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %264:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%264
  Single Issue       : false;
SU(1):   %265:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%265
  Single Issue       : false;
SU(2):   CMP32rm %264:gr32, $noreg, 4, %265:gr64_nosp, @rowstr + 4, $noreg, implicit-def $eflags, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%265
    SU(0): Data Latency=4 Reg=%264
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !223; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %264:gr32, $noreg, 4, %265:gr64_nosp, @rowstr + 4, $noreg, implicit-def $eflags, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:31
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %265:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %264:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %264:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
SU(1):   %265:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
SU(2):   CMP32rm %264:gr32, $noreg, 4, %265:gr64_nosp, @rowstr + 4, $noreg, implicit-def $eflags, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:31

********** MI Scheduling **********
main:%bb.10 for.body19
  From: %285:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
    To: JMP_1 %bb.9, debug-location !233; cg.c:203:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %285:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%285
    SU(2): Data Latency=4 Reg=%285
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %269:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !227 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%269
  Single Issue       : false;
SU(2):   SUB32mr $noreg, 4, %285:gr64_nosp, @colidx, $noreg, %269:gr32, implicit-def dead $eflags, debug-location !231 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%269
    SU(0): Data Latency=4 Reg=%285
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %270:gr32 = LEA64_32r %285:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !232; cg.c:203:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%285
  Successors:
    SU(4): Data Latency=1 Reg=%270
  Single Issue       : false;
SU(4):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %270:gr32, debug-location !232 :: (store 4 into %ir.k); cg.c:203:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%270
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.9, debug-location !233; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %270:gr32, debug-location !232 :: (store 4 into %ir.k); cg.c:203:49
  Ready @0c
  BotQ.A TopLatency SU(4) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %270:gr32 = LEA64_32r %285:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !232; cg.c:203:49
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) SUB32mr $noreg, 4, %285:gr64_nosp, @colidx, $noreg, %269:gr32, implicit-def dead $eflags, debug-location !231 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %269:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !227 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %285:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %285:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
SU(1):   %269:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !227 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
SU(2):   SUB32mr $noreg, 4, %285:gr64_nosp, @colidx, $noreg, %269:gr32, implicit-def dead $eflags, debug-location !231 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
SU(3):   %270:gr32 = LEA64_32r %285:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !232; cg.c:203:49
SU(4):   MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %270:gr32, debug-location !232 :: (store 4 into %ir.k); cg.c:203:49

********** MI Scheduling **********
main:%bb.12 for.end30
  From: MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !240 :: (store 4 into %ir.i); cg.c:211:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !240 :: (store 4 into %ir.i); cg.c:211:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %260:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %260:gr64 = MOV64ri 4607182418800017408
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !240 :: (store 4 into %ir.i); cg.c:211:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !240 :: (store 4 into %ir.i); cg.c:211:12
SU(1):   %260:gr64 = MOV64ri 4607182418800017408

********** MI Scheduling **********
main:%bb.14 for.body33
  From: %286:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
    To: JMP_1 %bb.13, debug-location !252; cg.c:211:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %286:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%286
    SU(1): Data Latency=4 Reg=%286
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mr $noreg, 8, %286:gr64_nosp, @x, $noreg, %260:gr64, debug-location !250 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%286
  Single Issue       : false;
SU(2):   %261:gr32 = LEA64_32r %286:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !251; cg.c:211:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%286
  Successors:
    SU(3): Data Latency=1 Reg=%261
  Single Issue       : false;
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %261:gr32, debug-location !251 :: (store 4 into %ir.i); cg.c:211:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%261
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.13, debug-location !252; cg.c:211:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %261:gr32, debug-location !251 :: (store 4 into %ir.i); cg.c:211:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %261:gr32 = LEA64_32r %286:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !251; cg.c:211:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $noreg, 8, %286:gr64_nosp, @x, $noreg, %260:gr64, debug-location !250 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %286:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %286:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
SU(1):   MOV64mr $noreg, 8, %286:gr64_nosp, @x, $noreg, %260:gr64, debug-location !250 :: (store 8 into %ir.arrayidx35); cg.c:212:14
SU(2):   %261:gr32 = LEA64_32r %286:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !251; cg.c:211:30
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %261:gr32, debug-location !251 :: (store 4 into %ir.i); cg.c:211:30

********** MI Scheduling **********
main:%bb.16 for.cond39
  From: %55:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !260 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
    To: JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !265; cg.c:214:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %55:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !260 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%55
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %55:gr32 = nsw SUB32rm %55:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%55
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%55
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %55:gr32 = nsw INC32r %55:gr32(tied-def 0), implicit-def dead $eflags, debug-location !263; cg.c:214:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%55
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%55
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %55:gr32, implicit-def $eflags, debug-location !264 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%55
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !265; cg.c:214:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %55:gr32, implicit-def $eflags, debug-location !264 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %55:gr32 = nsw INC32r %55:gr32(tied-def 0), implicit-def dead $eflags, debug-location !263; cg.c:214:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %55:gr32 = nsw SUB32rm %55:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %55:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !260 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %55:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !260 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
SU(1):   %55:gr32 = nsw SUB32rm %55:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
SU(2):   %55:gr32 = nsw INC32r %55:gr32(tied-def 0), implicit-def dead $eflags, debug-location !263; cg.c:214:40
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %55:gr32, implicit-def $eflags, debug-location !264 :: (dereferenceable load 4 from %ir.j); cg.c:214:19

********** MI Scheduling **********
main:%bb.17 for.body43
  From: %287:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
    To: JMP_1 %bb.16, debug-location !280; cg.c:214:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %287:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%287
    SU(4): Data Latency=4 Reg=%287
    SU(3): Data Latency=4 Reg=%287
    SU(2): Data Latency=4 Reg=%287
    SU(1): Data Latency=4 Reg=%287
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @q, $noreg, 0, debug-location !269 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Single Issue       : false;
SU(2):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @z, $noreg, 0, debug-location !272 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Single Issue       : false;
SU(3):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @r, $noreg, 0, debug-location !275 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Single Issue       : false;
SU(4):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @p, $noreg, 0, debug-location !278 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Single Issue       : false;
SU(5):   %257:gr32 = LEA64_32r %287:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !279; cg.c:214:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%287
  Successors:
    SU(6): Data Latency=1 Reg=%257
  Single Issue       : false;
SU(6):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %257:gr32, debug-location !279 :: (store 4 into %ir.j); cg.c:214:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%257
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16, debug-location !280; cg.c:214:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 3 2 1 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %257:gr32, debug-location !279 :: (store 4 into %ir.j); cg.c:214:46
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 5 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %257:gr32 = LEA64_32r %287:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !279; cg.c:214:46
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mi32 $noreg, 8, %287:gr64_nosp, @p, $noreg, 0, debug-location !278 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mi32 $noreg, 8, %287:gr64_nosp, @r, $noreg, 0, debug-location !275 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mi32 $noreg, 8, %287:gr64_nosp, @z, $noreg, 0, debug-location !272 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mi32 $noreg, 8, %287:gr64_nosp, @q, $noreg, 0, debug-location !269 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %287:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %287:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
SU(1):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @q, $noreg, 0, debug-location !269 :: (store 8 into %ir.arrayidx45); cg.c:215:14
SU(2):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @z, $noreg, 0, debug-location !272 :: (store 8 into %ir.arrayidx47); cg.c:216:14
SU(3):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @r, $noreg, 0, debug-location !275 :: (store 8 into %ir.arrayidx49); cg.c:217:14
SU(4):   MOV64mi32 $noreg, 8, %287:gr64_nosp, @p, $noreg, 0, debug-location !278 :: (store 8 into %ir.arrayidx51); cg.c:218:14
SU(5):   %257:gr32 = LEA64_32r %287:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !279; cg.c:214:46
SU(6):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %257:gr32, debug-location !279 :: (store 4 into %ir.j); cg.c:214:46

********** MI Scheduling **********
main:%bb.18 for.end54
  From: MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !283 :: (store 8 into %ir.zeta); cg.c:221:10
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !283 :: (store 8 into %ir.zeta); cg.c:221:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !284 :: (store 4 into %ir.it); cg.c:228:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %221:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %233:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %235:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %235:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %233:fr64 = FsFLD0SD
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %221:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !284 :: (store 4 into %ir.it); cg.c:228:13
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !283 :: (store 8 into %ir.zeta); cg.c:221:10
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !283 :: (store 8 into %ir.zeta); cg.c:221:10
SU(1):   MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !284 :: (store 4 into %ir.it); cg.c:228:13
SU(2):   %221:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
SU(3):   %233:fr64 = FsFLD0SD
SU(4):   %235:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.20 for.body57
  From: MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !293 :: (store 8 into %ir.norm_temp1); cg.c:240:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !293 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !294 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 4 into %ir.j); cg.c:242:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 4 into %ir.j); cg.c:242:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !294 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !293 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !293 :: (store 8 into %ir.norm_temp1); cg.c:240:20
SU(1):   MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !294 :: (store 8 into %ir.norm_temp2); cg.c:241:20
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 4 into %ir.j); cg.c:242:16

********** MI Scheduling **********
main:%bb.20 for.body57
  From: $rdi = MOV32ri64 @colidx, debug-location !291; cg.c:232:9
    To: PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @colidx, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @rowstr, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @x, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @z, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @a, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @p, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = MOV32ri64 @p, debug-location !291; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = MOV32ri64 @a, debug-location !291; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = MOV32ri64 @z, debug-location !291; cg.c:232:9
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @x, debug-location !291; cg.c:232:9
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @rowstr, debug-location !291; cg.c:232:9
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @colidx, debug-location !291; cg.c:232:9
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $rdi = MOV32ri64 @colidx, debug-location !291; cg.c:232:9
SU(1):   $rsi = MOV32ri64 @rowstr, debug-location !291; cg.c:232:9
SU(2):   $rdx = MOV32ri64 @x, debug-location !291; cg.c:232:9
SU(3):   $rcx = MOV32ri64 @z, debug-location !291; cg.c:232:9
SU(4):   $r8 = MOV32ri64 @a, debug-location !291; cg.c:232:9
SU(5):   $r9 = MOV32ri64 @p, debug-location !291; cg.c:232:9

********** MI Scheduling **********
main:%bb.21 for.cond58
  From: %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !300 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
    To: JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !305; cg.c:242:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !300 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%231
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%231
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%231
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !303; cg.c:242:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%231
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%231
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !304 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !305; cg.c:242:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !304 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !303; cg.c:242:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !300 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !300 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
SU(1):   %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
SU(2):   %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !303; cg.c:242:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !304 :: (dereferenceable load 4 from %ir.j); cg.c:242:23

********** MI Scheduling **********
main:%bb.22 for.body62
  From: %289:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !308 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
    To: JMP_1 %bb.21, debug-location !324; cg.c:242:9
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %289:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !308 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Data Latency=4 Reg=%289
    SU(2): Data Latency=4 Reg=%289
    SU(1): Data Latency=4 Reg=%289
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %253:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @z, $noreg, debug-location !317 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%289
  Successors:
    SU(6): Data Latency=4 Reg=%253
    SU(3): Data Latency=4 Reg=%253
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(2):   %251:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx64)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%289
  Successors:
    SU(3): Data Latency=4 Reg=%251
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%251
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%253
  Successors:
    SU(4): Data Latency=1 Reg=%251
    SU(4): Out  Latency=0
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !313 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%251
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%251
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %251:fr64, debug-location !314 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%251
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %253:fr64 = MULSDrr %253:fr64(tied-def 0), %253:fr64, debug-location !320; cg.c:244:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=%253
    SU(1): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%253
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %253:fr64 = ADDSDrm %253:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%253
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%253
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %253:fr64, debug-location !322 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%253
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %254:gr32 = LEA64_32r %289:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !323; cg.c:242:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%289
  Successors:
    SU(10): Data Latency=1 Reg=%254
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %254:gr32, debug-location !323 :: (store 4 into %ir.j); cg.c:242:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%254
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !324; cg.c:242:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 5 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %254:gr32, debug-location !323 :: (store 4 into %ir.j); cg.c:242:50
Bottom Pressure:
GR16=2
  LiveReg: %254
  UpdateRegP: SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %254:gr32, debug-location !323 :: (store 4 into %ir.j); cg.c:242:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 9 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %254:gr32 = LEA64_32r %289:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !323; cg.c:242:50
Bottom Pressure:
GR16=2
  LiveReg: %289
  UpdateRegP: SU(1) %253:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @z, $noreg, debug-location !317 :: (load 8 from %ir.arrayidx71); cg.c:244:39
              to FR32 -1    FR32X -1
  UpdateRegP: SU(2) %251:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx64)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %254:gr32 = LEA64_32r %289:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !323; cg.c:242:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %253:fr64, debug-location !322 :: (store 8 into %ir.norm_temp2); cg.c:244:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %253
  UpdateRegP: SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %253:fr64, debug-location !322 :: (store 8 into %ir.norm_temp2); cg.c:244:24
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %253:fr64 = ADDSDrm %253:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %253
  UpdateRegP: SU(7) %253:fr64 = ADDSDrm %253:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %253:fr64 = MULSDrr %253:fr64(tied-def 0), %253:fr64, debug-location !320; cg.c:244:44
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %253
  UpdateRegP: SU(3) %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
              to 
  UpdateRegP: SU(6) %253:fr64 = MULSDrr %253:fr64(tied-def 0), %253:fr64, debug-location !320; cg.c:244:44
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %251:fr64, debug-location !314 :: (store 8 into %ir.norm_temp1); cg.c:243:24
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %251
  UpdateRegP: SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %251:fr64, debug-location !314 :: (store 8 into %ir.norm_temp1); cg.c:243:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !313 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %251
  UpdateRegP: SU(4) %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !313 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %251
  UpdateRegP: SU(3) %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %251:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx64)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %253:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @z, $noreg, debug-location !317 :: (load 8 from %ir.arrayidx71); cg.c:244:39
Bottom Pressure:
GR16=2
  Ready @10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %289:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !308 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
Bottom Pressure:

  Ready @14c
  BotQ.A BotLatency SU(0) 13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %289:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !308 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
SU(1):   %253:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @z, $noreg, debug-location !317 :: (load 8 from %ir.arrayidx71); cg.c:244:39
SU(2):   %251:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx64)
SU(3):   %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
SU(4):   %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !313 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %251:fr64, debug-location !314 :: (store 8 into %ir.norm_temp1); cg.c:243:24
SU(6):   %253:fr64 = MULSDrr %253:fr64(tied-def 0), %253:fr64, debug-location !320; cg.c:244:44
SU(7):   %253:fr64 = ADDSDrm %253:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %253:fr64, debug-location !322 :: (store 8 into %ir.norm_temp2); cg.c:244:24
SU(9):   %254:gr32 = LEA64_32r %289:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !323; cg.c:242:50
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %254:gr32, debug-location !323 :: (store 4 into %ir.j); cg.c:242:50

********** MI Scheduling **********
main:%bb.23 for.end76
  From: %0:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !327 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
    To: JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !329; cg.c:247:26
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %0:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !327 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%0
  Single Issue       : false;
SU(1):   UCOMISDrr %0:fr64, %233:fr64, implicit-def $eflags, debug-location !329; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !329; cg.c:247:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrr %0:fr64, %233:fr64, implicit-def $eflags, debug-location !329; cg.c:247:26
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !327 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %0:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !327 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
SU(1):   UCOMISDrr %0:fr64, %233:fr64, implicit-def $eflags, debug-location !329; cg.c:247:26

********** MI Scheduling **********
main:%bb.26 for.end76.split
  From: %236:fr64 = COPY %235:fr64, debug-location !329; cg.c:247:26
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %236:fr64 = COPY %235:fr64, debug-location !329; cg.c:247:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=0 Reg=%236
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %236:fr64 = DIVSDrr %236:fr64(tied-def 0), %283:fr64, debug-location !329; cg.c:247:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Data Latency=0 Reg=%236
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=10 Reg=%236
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %236:fr64, debug-location !330 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(1): Data Latency=10 Reg=%236
  Single Issue       : false;
SU(3):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !331 :: (store 4 into %ir.j); cg.c:252:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !331 :: (store 4 into %ir.j); cg.c:252:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %236:fr64, debug-location !330 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  Ready @0c
  BotQ.A TopLatency SU(2) 10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %236:fr64 = DIVSDrr %236:fr64(tied-def 0), %283:fr64, debug-location !329; cg.c:247:26
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %236:fr64 = COPY %235:fr64, debug-location !329; cg.c:247:26
  Ready @10c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %236:fr64 = COPY %235:fr64, debug-location !329; cg.c:247:26
SU(1):   %236:fr64 = DIVSDrr %236:fr64(tied-def 0), %283:fr64, debug-location !329; cg.c:247:26
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %236:fr64, debug-location !330 :: (store 8 into %ir.norm_temp2); cg.c:247:20
SU(3):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !331 :: (store 4 into %ir.j); cg.c:252:16

********** MI Scheduling **********
main:%bb.27 for.cond78
  From: %240:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !336 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
    To: JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !341; cg.c:252:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %240:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !336 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%240
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %240:gr32 = nsw SUB32rm %240:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%240
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%240
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %240:gr32 = nsw INC32r %240:gr32(tied-def 0), implicit-def dead $eflags, debug-location !339; cg.c:252:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%240
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%240
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %240:gr32, implicit-def $eflags, debug-location !340 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%240
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !341; cg.c:252:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %240:gr32, implicit-def $eflags, debug-location !340 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %240:gr32 = nsw INC32r %240:gr32(tied-def 0), implicit-def dead $eflags, debug-location !339; cg.c:252:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %240:gr32 = nsw SUB32rm %240:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %240:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !336 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %240:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !336 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
SU(1):   %240:gr32 = nsw SUB32rm %240:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
SU(2):   %240:gr32 = nsw INC32r %240:gr32(tied-def 0), implicit-def dead $eflags, debug-location !339; cg.c:252:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %240:gr32, implicit-def $eflags, debug-location !340 :: (dereferenceable load 4 from %ir.j); cg.c:252:23

********** MI Scheduling **********
main:%bb.28 for.body82
  From: %245:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !342 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
    To: JMP_1 %bb.27, debug-location !351; cg.c:252:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %245:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !342 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%245
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(1):   %290:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%290
    SU(3): Data Latency=4 Reg=%290
    SU(2): Data Latency=4 Reg=%290
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %245:fr64 = MULSDrm %245:fr64(tied-def 0), $noreg, 8, %290:gr64_nosp, @z, $noreg, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%290
    SU(0): Data Latency=4 Reg=%245
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%245
  Single Issue       : false;
SU(3):   MOVSDmr $noreg, 8, %290:gr64_nosp, @x, $noreg, %245:fr64, debug-location !349 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%245
    SU(1): Data Latency=4 Reg=%290
  Single Issue       : false;
SU(4):   %246:gr32 = LEA64_32r %290:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !350; cg.c:252:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%290
  Successors:
    SU(5): Data Latency=1 Reg=%246
  Single Issue       : false;
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %246:gr32, debug-location !350 :: (store 4 into %ir.j); cg.c:252:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%246
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.27, debug-location !351; cg.c:252:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %246:gr32, debug-location !350 :: (store 4 into %ir.j); cg.c:252:50
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %246:gr32 = LEA64_32r %290:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !350; cg.c:252:50
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr $noreg, 8, %290:gr64_nosp, @x, $noreg, %245:fr64, debug-location !349 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %245:fr64 = MULSDrm %245:fr64(tied-def 0), $noreg, 8, %290:gr64_nosp, @z, $noreg, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:31
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %290:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %245:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !342 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %245:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !342 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
SU(1):   %290:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
SU(2):   %245:fr64 = MULSDrm %245:fr64(tied-def 0), $noreg, 8, %290:gr64_nosp, @z, $noreg, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:31
SU(3):   MOVSDmr $noreg, 8, %290:gr64_nosp, @x, $noreg, %245:fr64, debug-location !349 :: (store 8 into %ir.arrayidx87); cg.c:253:18
SU(4):   %246:gr32 = LEA64_32r %290:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !350; cg.c:252:50
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %246:gr32, debug-location !350 :: (store 4 into %ir.j); cg.c:252:50

********** MI Scheduling **********
main:%bb.32 for.body96
  From: %291:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
    To: JMP_1 %bb.31, debug-location !370; cg.c:260:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %291:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%291
    SU(1): Data Latency=4 Reg=%291
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV64mr $noreg, 8, %291:gr64_nosp, @x, $noreg, %260:gr64, debug-location !368 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%291
  Single Issue       : false;
SU(2):   %219:gr32 = LEA64_32r %291:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !369; cg.c:260:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%291
  Successors:
    SU(3): Data Latency=1 Reg=%219
  Single Issue       : false;
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %219:gr32, debug-location !369 :: (store 4 into %ir.i); cg.c:260:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%219
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.31, debug-location !370; cg.c:260:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %219:gr32, debug-location !369 :: (store 4 into %ir.i); cg.c:260:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %219:gr32 = LEA64_32r %291:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !369; cg.c:260:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $noreg, 8, %291:gr64_nosp, @x, $noreg, %260:gr64, debug-location !368 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %291:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %291:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
SU(1):   MOV64mr $noreg, 8, %291:gr64_nosp, @x, $noreg, %260:gr64, debug-location !368 :: (store 8 into %ir.arrayidx98); cg.c:261:14
SU(2):   %219:gr32 = LEA64_32r %291:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !369; cg.c:260:30
SU(3):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %219:gr32, debug-location !369 :: (store 4 into %ir.i); cg.c:260:30

********** MI Scheduling **********
main:%bb.33 for.end101
  From: MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !378 :: (store 4 into %ir.it); cg.c:279:13
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !378 :: (store 4 into %ir.it); cg.c:279:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %180:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %272:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %272:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %180:fr64 = FsFLD0SD
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !378 :: (store 4 into %ir.it); cg.c:279:13
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !378 :: (store 4 into %ir.it); cg.c:279:13
SU(1):   %180:fr64 = FsFLD0SD
SU(2):   %272:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.33 for.end101
  From: $rdi = MOV32ri64 @.str.9, debug-location !376; cg.c:268:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !376; cg.c:268:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.9, debug-location !376; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %62:fr64, debug-location !376; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !376; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !376; cg.c:268:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !376; cg.c:268:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %62:fr64, debug-location !376; cg.c:268:5
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.9, debug-location !376; cg.c:268:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   $rdi = MOV32ri64 @.str.9, debug-location !376; cg.c:268:5
SU(1):   $xmm0 = COPY %62:fr64, debug-location !376; cg.c:268:5
SU(2):   $al = MOV8ri 1, debug-location !376; cg.c:268:5

********** MI Scheduling **********
main:%bb.37 if.end112
  From: $rdi = MOV32ri64 @colidx, debug-location !390; cg.c:286:9
    To: PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @colidx, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @rowstr, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @x, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @z, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   $r8 = MOV32ri64 @a, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   $r9 = MOV32ri64 @p, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9 = MOV32ri64 @p, debug-location !390; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = MOV32ri64 @a, debug-location !390; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = MOV32ri64 @z, debug-location !390; cg.c:286:9
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @x, debug-location !390; cg.c:286:9
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @rowstr, debug-location !390; cg.c:286:9
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @colidx, debug-location !390; cg.c:286:9
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $rdi = MOV32ri64 @colidx, debug-location !390; cg.c:286:9
SU(1):   $rsi = MOV32ri64 @rowstr, debug-location !390; cg.c:286:9
SU(2):   $rdx = MOV32ri64 @x, debug-location !390; cg.c:286:9
SU(3):   $rcx = MOV32ri64 @z, debug-location !390; cg.c:286:9
SU(4):   $r8 = MOV32ri64 @a, debug-location !390; cg.c:286:9
SU(5):   $r9 = MOV32ri64 @p, debug-location !390; cg.c:286:9

********** MI Scheduling **********
main:%bb.39 if.end115
  From: MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !395 :: (store 8 into %ir.norm_temp1); cg.c:297:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !395 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !396 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.j); cg.c:299:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.j); cg.c:299:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !396 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !395 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !395 :: (store 8 into %ir.norm_temp1); cg.c:297:20
SU(1):   MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !396 :: (store 8 into %ir.norm_temp2); cg.c:298:20
SU(2):   MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.j); cg.c:299:16

********** MI Scheduling **********
main:%bb.40 for.cond116
  From: %178:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !402 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
    To: JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !407; cg.c:299:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %178:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !402 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%178
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %178:gr32 = nsw SUB32rm %178:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%178
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%178
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %178:gr32 = nsw INC32r %178:gr32(tied-def 0), implicit-def dead $eflags, debug-location !405; cg.c:299:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%178
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%178
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %178:gr32, implicit-def $eflags, debug-location !406 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%178
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !407; cg.c:299:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %178:gr32, implicit-def $eflags, debug-location !406 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %178:gr32 = nsw INC32r %178:gr32(tied-def 0), implicit-def dead $eflags, debug-location !405; cg.c:299:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %178:gr32 = nsw SUB32rm %178:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %178:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !402 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %178:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !402 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
SU(1):   %178:gr32 = nsw SUB32rm %178:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
SU(2):   %178:gr32 = nsw INC32r %178:gr32(tied-def 0), implicit-def dead $eflags, debug-location !405; cg.c:299:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %178:gr32, implicit-def $eflags, debug-location !406 :: (dereferenceable load 4 from %ir.j); cg.c:299:23

********** MI Scheduling **********
main:%bb.41 for.body120
  From: %293:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !410 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
    To: JMP_1 %bb.40, debug-location !426; cg.c:299:9
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %293:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !410 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Data Latency=4 Reg=%293
    SU(2): Data Latency=4 Reg=%293
    SU(1): Data Latency=4 Reg=%293
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %214:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @z, $noreg, debug-location !419 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%293
  Successors:
    SU(6): Data Latency=4 Reg=%214
    SU(3): Data Latency=4 Reg=%214
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(2):   %212:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx122)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%293
  Successors:
    SU(3): Data Latency=4 Reg=%212
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%212
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%214
  Successors:
    SU(4): Data Latency=1 Reg=%212
    SU(4): Out  Latency=0
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %212:fr64 = ADDSDrm %212:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%212
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%212
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %212:fr64, debug-location !416 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%212
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %214:fr64 = MULSDrr %214:fr64(tied-def 0), %214:fr64, debug-location !422; cg.c:301:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=%214
    SU(1): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%214
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %214:fr64 = ADDSDrm %214:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%214
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%214
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %214:fr64, debug-location !424 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%214
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %215:gr32 = LEA64_32r %293:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !425; cg.c:299:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%293
  Successors:
    SU(10): Data Latency=1 Reg=%215
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %215:gr32, debug-location !425 :: (store 4 into %ir.j); cg.c:299:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%215
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.40, debug-location !426; cg.c:299:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 5 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %215:gr32, debug-location !425 :: (store 4 into %ir.j); cg.c:299:50
Bottom Pressure:
GR16=2
  LiveReg: %215
  UpdateRegP: SU(10) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %215:gr32, debug-location !425 :: (store 4 into %ir.j); cg.c:299:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 9 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %215:gr32 = LEA64_32r %293:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !425; cg.c:299:50
Bottom Pressure:
GR16=2
  LiveReg: %293
  UpdateRegP: SU(1) %214:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @z, $noreg, debug-location !419 :: (load 8 from %ir.arrayidx130); cg.c:301:39
              to FR32 -1    FR32X -1
  UpdateRegP: SU(2) %212:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx122)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %215:gr32 = LEA64_32r %293:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !425; cg.c:299:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %214:fr64, debug-location !424 :: (store 8 into %ir.norm_temp2); cg.c:301:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %214
  UpdateRegP: SU(8) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %214:fr64, debug-location !424 :: (store 8 into %ir.norm_temp2); cg.c:301:24
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %214:fr64 = ADDSDrm %214:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %214
  UpdateRegP: SU(7) %214:fr64 = ADDSDrm %214:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %214:fr64 = MULSDrr %214:fr64(tied-def 0), %214:fr64, debug-location !422; cg.c:301:44
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %214
  UpdateRegP: SU(3) %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
              to 
  UpdateRegP: SU(6) %214:fr64 = MULSDrr %214:fr64(tied-def 0), %214:fr64, debug-location !422; cg.c:301:44
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %212:fr64, debug-location !416 :: (store 8 into %ir.norm_temp1); cg.c:300:24
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %212
  UpdateRegP: SU(5) MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %212:fr64, debug-location !416 :: (store 8 into %ir.norm_temp1); cg.c:300:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %212:fr64 = ADDSDrm %212:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %212
  UpdateRegP: SU(4) %212:fr64 = ADDSDrm %212:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
              to FR32 -1    FR32X -1
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %212
  UpdateRegP: SU(3) %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %212:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx122)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @10c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %214:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @z, $noreg, debug-location !419 :: (load 8 from %ir.arrayidx130); cg.c:301:39
Bottom Pressure:
GR16=2
  Ready @10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %293:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !410 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
Bottom Pressure:

  Ready @14c
  BotQ.A BotLatency SU(0) 13c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %293:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !410 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
SU(1):   %214:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @z, $noreg, debug-location !419 :: (load 8 from %ir.arrayidx130); cg.c:301:39
SU(2):   %212:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx122)
SU(3):   %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
SU(4):   %212:fr64 = ADDSDrm %212:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
SU(5):   MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %212:fr64, debug-location !416 :: (store 8 into %ir.norm_temp1); cg.c:300:24
SU(6):   %214:fr64 = MULSDrr %214:fr64(tied-def 0), %214:fr64, debug-location !422; cg.c:301:44
SU(7):   %214:fr64 = ADDSDrm %214:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
SU(8):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %214:fr64, debug-location !424 :: (store 8 into %ir.norm_temp2); cg.c:301:24
SU(9):   %215:gr32 = LEA64_32r %293:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !425; cg.c:299:50
SU(10):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %215:gr32, debug-location !425 :: (store 4 into %ir.j); cg.c:299:50

********** MI Scheduling **********
main:%bb.42 for.end135
  From: %4:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
    To: JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !431; cg.c:304:26
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %4:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%4
  Single Issue       : false;
SU(1):   UCOMISDrr %4:fr64, %180:fr64, implicit-def $eflags, debug-location !431; cg.c:304:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !431; cg.c:304:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) UCOMISDrr %4:fr64, %180:fr64, implicit-def $eflags, debug-location !431; cg.c:304:26
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %4:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
SU(1):   UCOMISDrr %4:fr64, %180:fr64, implicit-def $eflags, debug-location !431; cg.c:304:26

********** MI Scheduling **********
main:%bb.45 for.end135.split
  From: %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
    To: JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !440; cg.c:307:13
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=4
FR32X=4
Live In: %272 %235 %284 
Live Out: %272 %235 
Live Thru: FR32=2
FR32X=2
  LiveReg: %272
  UpdateRegP: SU(5) %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
              to 
  LiveReg: %235
  UpdateRegP: SU(0) %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
              to FR32 -1    FR32X -1
  UpdateRegP: SU(3) %185:fr64 = COPY %235:fr64, debug-location !434; cg.c:306:28
              to FR32 -1    FR32X -1
Top Pressure:
FR32=3
FR32X=3
Bottom Pressure:
FR32=2
FR32X=2
Excess PSets: 
SU(0):   %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=0 Reg=%183
    SU(1): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Data Latency=0 Reg=%183
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=10 Reg=%183
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !432 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(1): Data Latency=10 Reg=%183
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %185:fr64 = COPY %235:fr64, debug-location !434; cg.c:306:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=0 Reg=%185
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(4):   %185:fr64 = DIVSDrm %185:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(3): Data Latency=0 Reg=%185
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%185
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%185
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%185
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %185:fr64, debug-location !436 :: (store 8 into %ir.zeta); cg.c:306:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%185
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !439 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !440; cg.c:307:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 2 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !439 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
Bottom Pressure:
FR32=2
FR32X=2
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %185:fr64, debug-location !436 :: (store 8 into %ir.zeta); cg.c:306:14
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %185
  UpdateRegP: SU(6) MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %185:fr64, debug-location !436 :: (store 8 into %ir.zeta); cg.c:306:14
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %185
  UpdateRegP: SU(5) %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
              to FR32 -1    FR32X -1
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %185:fr64 = DIVSDrm %185:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %185
  UpdateRegP: SU(4) %185:fr64 = DIVSDrm %185:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %185:fr64 = COPY %235:fr64, debug-location !434; cg.c:306:28
Bottom Pressure:
FR32=2
FR32X=2
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !432 :: (store 8 into %ir.norm_temp2); cg.c:304:20
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %183
  UpdateRegP: SU(2) MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !432 :: (store 8 into %ir.norm_temp2); cg.c:304:20
              to 
  Ready @1c
  BotQ.A TopLatency SU(2) 10c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
Bottom Pressure:
FR32=4
FR32X=4
  LiveReg: %183
  UpdateRegP: SU(1) %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
              to 
  LiveReg: %284
  UpdateRegP: SU(1) %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
Bottom Pressure:
FR32=3
FR32X=3
  Ready @11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
SU(1):   %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
SU(2):   MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !432 :: (store 8 into %ir.norm_temp2); cg.c:304:20
SU(3):   %185:fr64 = COPY %235:fr64, debug-location !434; cg.c:306:28
SU(4):   %185:fr64 = DIVSDrm %185:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
SU(5):   %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
SU(6):   MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %185:fr64, debug-location !436 :: (store 8 into %ir.zeta); cg.c:306:14
SU(7):   CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !439 :: (dereferenceable load 4 from %ir.it); cg.c:307:16

********** MI Scheduling **********
main:%bb.46 if.then141
  From: $rdi = MOV32ri64 @.str.10, debug-location !441; cg.c:308:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !441; cg.c:308:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.10, debug-location !441; cg.c:308:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !441; cg.c:308:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !441; cg.c:308:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !441; cg.c:308:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.10, debug-location !441; cg.c:308:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   $rdi = MOV32ri64 @.str.10, debug-location !441; cg.c:308:13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !441; cg.c:308:13

********** MI Scheduling **********
main:%bb.47 if.end143
  From: $rdi = MOV32ri64 @.str.11, debug-location !445; cg.c:309:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !445; cg.c:309:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.11, debug-location !445; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %192:gr32, debug-location !445; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %193:fr64, debug-location !445; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %194:fr64, debug-location !445; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2, debug-location !445; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !445; cg.c:309:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2, debug-location !445; cg.c:309:9
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %194:fr64, debug-location !445; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %193:fr64, debug-location !445; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %192:gr32, debug-location !445; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.11, debug-location !445; cg.c:309:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $rdi = MOV32ri64 @.str.11, debug-location !445; cg.c:309:9
SU(1):   $esi = COPY %192:gr32, debug-location !445; cg.c:309:9
SU(2):   $xmm0 = COPY %193:fr64, debug-location !445; cg.c:309:9
SU(3):   $xmm1 = COPY %194:fr64, debug-location !445; cg.c:309:9
SU(4):   $al = MOV8ri 2, debug-location !445; cg.c:309:9

********** MI Scheduling **********
main:%bb.47 if.end143
  From: %192:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !445; cg.c:309:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %192:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %193:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %194:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !444 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !445; cg.c:309:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %194:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !444 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %193:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %192:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %192:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
SU(1):   %193:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
SU(2):   %194:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !444 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61

********** MI Scheduling **********
main:%bb.48 for.cond145
  From: %201:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !451 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
    To: JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !456; cg.c:314:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %201:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !451 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%201
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %201:gr32 = nsw SUB32rm %201:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%201
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%201
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %201:gr32 = nsw INC32r %201:gr32(tied-def 0), implicit-def dead $eflags, debug-location !454; cg.c:314:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%201
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%201
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %201:gr32, implicit-def $eflags, debug-location !455 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%201
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !456; cg.c:314:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %201:gr32, implicit-def $eflags, debug-location !455 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %201:gr32 = nsw INC32r %201:gr32(tied-def 0), implicit-def dead $eflags, debug-location !454; cg.c:314:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %201:gr32 = nsw SUB32rm %201:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %201:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !451 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %201:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !451 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
SU(1):   %201:gr32 = nsw SUB32rm %201:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
SU(2):   %201:gr32 = nsw INC32r %201:gr32(tied-def 0), implicit-def dead $eflags, debug-location !454; cg.c:314:44
SU(3):   CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %201:gr32, implicit-def $eflags, debug-location !455 :: (dereferenceable load 4 from %ir.j); cg.c:314:23

********** MI Scheduling **********
main:%bb.49 for.body149
  From: %206:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !457 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
    To: JMP_1 %bb.48, debug-location !466; cg.c:314:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %206:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !457 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%206
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(1):   %295:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !459 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%295
    SU(3): Data Latency=4 Reg=%295
    SU(2): Data Latency=4 Reg=%295
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %206:fr64 = MULSDrm %206:fr64(tied-def 0), $noreg, 8, %295:gr64_nosp, @z, $noreg, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%295
    SU(0): Data Latency=4 Reg=%206
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%206
  Single Issue       : false;
SU(3):   MOVSDmr $noreg, 8, %295:gr64_nosp, @x, $noreg, %206:fr64, debug-location !464 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%206
    SU(1): Data Latency=4 Reg=%295
  Single Issue       : false;
SU(4):   %207:gr32 = LEA64_32r %295:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !465; cg.c:314:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%295
  Successors:
    SU(5): Data Latency=1 Reg=%207
  Single Issue       : false;
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %207:gr32, debug-location !465 :: (store 4 into %ir.j); cg.c:314:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%207
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.48, debug-location !466; cg.c:314:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %207:gr32, debug-location !465 :: (store 4 into %ir.j); cg.c:314:50
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %207:gr32 = LEA64_32r %295:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !465; cg.c:314:50
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr $noreg, 8, %295:gr64_nosp, @x, $noreg, %206:fr64, debug-location !464 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %206:fr64 = MULSDrm %206:fr64(tied-def 0), $noreg, 8, %295:gr64_nosp, @z, $noreg, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:31
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %295:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !459 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %206:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !457 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %206:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !457 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
SU(1):   %295:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !459 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
SU(2):   %206:fr64 = MULSDrm %206:fr64(tied-def 0), $noreg, 8, %295:gr64_nosp, @z, $noreg, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:31
SU(3):   MOVSDmr $noreg, 8, %295:gr64_nosp, @x, $noreg, %206:fr64, debug-location !464 :: (store 8 into %ir.arrayidx154); cg.c:315:18
SU(4):   %207:gr32 = LEA64_32r %295:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !465; cg.c:314:50
SU(5):   MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %207:gr32, debug-location !465 :: (store 4 into %ir.j); cg.c:314:50

********** MI Scheduling **********
main:%bb.51 for.end160
  From: %75:gr64 = MOV64ri 4457293557087583675
    To: JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !481; cg.c:332:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %75:gr64 = MOV64ri 4457293557087583675
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%75
  Single Issue       : false;
SU(1):   MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %75:gr64, debug-location !477 :: (store 8 into %ir.epsilon); cg.c:331:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%75
  Single Issue       : false;
SU(2):   CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !480 :: (dereferenceable load 1 from %ir.Class); cg.c:332:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !481; cg.c:332:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !480 :: (dereferenceable load 1 from %ir.Class); cg.c:332:15
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %75:gr64, debug-location !477 :: (store 8 into %ir.epsilon); cg.c:331:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:gr64 = MOV64ri 4457293557087583675
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %75:gr64 = MOV64ri 4457293557087583675
SU(1):   MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %75:gr64, debug-location !477 :: (store 8 into %ir.epsilon); cg.c:331:13
SU(2):   CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !480 :: (dereferenceable load 1 from %ir.Class); cg.c:332:15

********** MI Scheduling **********
main:%bb.51 for.end160
  From: $rdi = MOV32ri64 @.str.12, debug-location !476; cg.c:329:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !476; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.12, debug-location !476; cg.c:329:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !476; cg.c:329:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !476; cg.c:329:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !476; cg.c:329:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.12, debug-location !476; cg.c:329:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $rdi = MOV32ri64 @.str.12, debug-location !476; cg.c:329:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !476; cg.c:329:5

********** MI Scheduling **********
main:%bb.51 for.end160
  From: %70:fr64 = COPY killed $xmm0, debug-location !474; cg.c:327:9
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %70:fr64 = COPY killed $xmm0, debug-location !474; cg.c:327:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%70
  Single Issue       : false;
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %70:fr64, debug-location !475 :: (store 8 into %ir.t); cg.c:327:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%70
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:329:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %70:fr64, debug-location !475 :: (store 8 into %ir.t); cg.c:327:7
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %70:fr64 = COPY killed $xmm0, debug-location !474; cg.c:327:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %70:fr64 = COPY killed $xmm0, debug-location !474; cg.c:327:9
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %70:fr64, debug-location !475 :: (store 8 into %ir.t); cg.c:327:7

********** MI Scheduling **********
main:%bb.52 if.then169
  From: %88:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
    To: JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !494; cg.c:334:13
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %88:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Data Latency=4 Reg=%88
    SU(2): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %85:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%85
    SU(2): Data Latency=4 Reg=%85
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=%85
    SU(0): Data Latency=4 Reg=%88
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%88
    SU(3): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %88:vr128 = PANDrm %88:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !486 :: (load 16 from constant-pool); cg.c:333:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%88
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%88
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=%88
    SU(3): Out  Latency=0
    SU(1): Data Latency=4 Reg=%85
  Successors:
    SU(7): Data Latency=10 Reg=%88
    SU(5): Data Latency=10 Reg=%88
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %88:vr128, debug-location !489 :: (store 8 into %ir.err); cg.c:333:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(4): Data Latency=10 Reg=%88
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %91:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !492 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%91
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 1
  Predecessors:
    SU(4): Data Latency=10 Reg=%88
    SU(6): Data Latency=4 Reg=%91
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : FR32 2    FR32X 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !494; cg.c:334:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %91
  UpdateRegP: SU(7) UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17
              to FR32 1    FR32X 1
  LiveReg: %88
  UpdateRegP: SU(5) MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %88:vr128, debug-location !489 :: (store 8 into %ir.err); cg.c:333:13
              to 
  UpdateRegP: SU(7) UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(7) 19c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %91:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !492 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
Bottom Pressure:
FR32=1
FR32X=1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %88:vr128, debug-location !489 :: (store 8 into %ir.err); cg.c:333:13
Bottom Pressure:
FR32=1
FR32X=1
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %88
  UpdateRegP: SU(4) %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
              to 
  LiveReg: %85
  UpdateRegP: SU(2) %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
              to 
  UpdateRegP: SU(4) %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %88:vr128 = PANDrm %88:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !486 :: (load 16 from constant-pool); cg.c:333:15
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %88
  UpdateRegP: SU(3) %88:vr128 = PANDrm %88:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !486 :: (load 16 from constant-pool); cg.c:333:15
              to FR32 -1    FR32X -1
  Ready @15c
  BotQ.A BotLatency SU(3) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %88
  UpdateRegP: SU(2) %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
              to FR32 -1    FR32X -1
  Ready @16c
  BotQ.A BotLatency SU(2) 16c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %85:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
Bottom Pressure:
FR32=1
FR32X=1
  Ready @20c
  BotQ.A BotLatency SU(1) 20c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %88:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
Bottom Pressure:

  Ready @20c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %88:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
SU(1):   %85:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
SU(2):   %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
SU(3):   %88:vr128 = PANDrm %88:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !486 :: (load 16 from constant-pool); cg.c:333:15
SU(4):   %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
SU(5):   MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %88:vr128, debug-location !489 :: (store 8 into %ir.err); cg.c:333:13
SU(6):   %91:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !492 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
SU(7):   UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17

********** MI Scheduling **********
main:%bb.53 if.then174
  From: $rdi = MOV32ri64 @.str.15, debug-location !501; cg.c:338:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !501; cg.c:338:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.15, debug-location !501; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %111:fr64, debug-location !501; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !501; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !501; cg.c:338:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !501; cg.c:338:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %111:fr64, debug-location !501; cg.c:338:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.15, debug-location !501; cg.c:338:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.15, debug-location !501; cg.c:338:13
SU(1):   $xmm0 = COPY %111:fr64, debug-location !501; cg.c:338:13
SU(2):   $al = MOV8ri 1, debug-location !501; cg.c:338:13

********** MI Scheduling **********
main:%bb.53 if.then174
  From: $rdi = MOV32ri64 @.str.14, debug-location !499; cg.c:337:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !499; cg.c:337:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.14, debug-location !499; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %107:fr64, debug-location !499; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !499; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !499; cg.c:337:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !499; cg.c:337:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %107:fr64, debug-location !499; cg.c:337:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.14, debug-location !499; cg.c:337:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.14, debug-location !499; cg.c:337:13
SU(1):   $xmm0 = COPY %107:fr64, debug-location !499; cg.c:337:13
SU(2):   $al = MOV8ri 1, debug-location !499; cg.c:337:13

********** MI Scheduling **********
main:%bb.53 if.then174
  From: $rdi = MOV32ri64 @.str.13, debug-location !497; cg.c:336:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !497; cg.c:336:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.13, debug-location !497; cg.c:336:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !497; cg.c:336:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !497; cg.c:336:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !497; cg.c:336:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.13, debug-location !497; cg.c:336:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $rdi = MOV32ri64 @.str.13, debug-location !497; cg.c:336:13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !497; cg.c:336:13

********** MI Scheduling **********
main:%bb.54 if.else178
  From: $rdi = MOV32ri64 @.str.18, debug-location !509; cg.c:344:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !509; cg.c:344:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.18, debug-location !509; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %100:fr64, debug-location !509; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !509; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !509; cg.c:344:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !509; cg.c:344:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %100:fr64, debug-location !509; cg.c:344:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.18, debug-location !509; cg.c:344:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $rdi = MOV32ri64 @.str.18, debug-location !509; cg.c:344:13
SU(1):   $xmm0 = COPY %100:fr64, debug-location !509; cg.c:344:13
SU(2):   $al = MOV8ri 1, debug-location !509; cg.c:344:13

********** MI Scheduling **********
main:%bb.54 if.else178
  From: $rdi = MOV32ri64 @.str.17, debug-location !507; cg.c:343:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !507; cg.c:343:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.17, debug-location !507; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %96:fr64, debug-location !507; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !507; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !507; cg.c:343:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !507; cg.c:343:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %96:fr64, debug-location !507; cg.c:343:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.17, debug-location !507; cg.c:343:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $rdi = MOV32ri64 @.str.17, debug-location !507; cg.c:343:13
SU(1):   $xmm0 = COPY %96:fr64, debug-location !507; cg.c:343:13
SU(2):   $al = MOV8ri 1, debug-location !507; cg.c:343:13

********** MI Scheduling **********
main:%bb.54 if.else178
  From: $rdi = MOV32ri64 @.str.16, debug-location !505; cg.c:342:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !505; cg.c:342:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.16, debug-location !505; cg.c:342:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !505; cg.c:342:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !505; cg.c:342:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !505; cg.c:342:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.16, debug-location !505; cg.c:342:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $rdi = MOV32ri64 @.str.16, debug-location !505; cg.c:342:13
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !505; cg.c:342:13

********** MI Scheduling **********
main:%bb.55 if.else183
  From: $rdi = MOV32ri64 @.str.20, debug-location !513; cg.c:350:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !513; cg.c:350:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.20, debug-location !513; cg.c:350:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !513; cg.c:350:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !513; cg.c:350:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !513; cg.c:350:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.20, debug-location !513; cg.c:350:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = MOV32ri64 @.str.20, debug-location !513; cg.c:350:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !513; cg.c:350:9

********** MI Scheduling **********
main:%bb.55 if.else183
  From: $rdi = MOV32ri64 @.str.19, debug-location !512; cg.c:349:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:349:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.19, debug-location !512; cg.c:349:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !512; cg.c:349:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:349:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !512; cg.c:349:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.19, debug-location !512; cg.c:349:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   $rdi = MOV32ri64 @.str.19, debug-location !512; cg.c:349:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !512; cg.c:349:9

********** MI Scheduling **********
main:%bb.56 if.end186
  From: %114:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
    To: JCC_1 %bb.57, 5, implicit $eflags, debug-location !517; cg.c:353:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %114:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(1):   %115:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(2):   UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags, debug-location !517; cg.c:353:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%115
    SU(0): Data Latency=4 Reg=%114
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.57, 5, implicit $eflags, debug-location !517; cg.c:353:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags, debug-location !517; cg.c:353:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %115:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %114:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %114:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
SU(1):   %115:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags, debug-location !517; cg.c:353:9

********** MI Scheduling **********
main:%bb.57 if.then189
  From: %118:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
    To: JMP_1 %bb.59, debug-location !523; cg.c:358:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %118:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%118
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !520 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%118
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%118
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %118:fr64 = DIVSDrm %118:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !521 :: (load 8 from constant-pool); cg.c:357:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(3):   MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %118:fr64, debug-location !522 :: (store 8 into %ir.mflops); cg.c:354:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%118
  Single Issue       : false;
ExitSU:   JMP_1 %bb.59, debug-location !523; cg.c:358:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %118:fr64, debug-location !522 :: (store 8 into %ir.mflops); cg.c:354:16
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %118:fr64 = DIVSDrm %118:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !521 :: (load 8 from constant-pool); cg.c:357:20
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !520 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %118:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %118:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(1):   %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !520 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
SU(2):   %118:fr64 = DIVSDrm %118:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !521 :: (load 8 from constant-pool); cg.c:357:20
SU(3):   MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %118:fr64, debug-location !522 :: (store 8 into %ir.mflops); cg.c:354:16

********** MI Scheduling **********
main:%bb.59 if.end193
  From: $rdi = MOV32ri64 @.str.21, debug-location !530; cg.c:363:5
    To: PUSH64i32 @.str.31, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Live In: %121 %120 %119 
Live Out: XMM1 XMM0 R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
Top Pressure:
FR32=2
FR32X=2
GR16=2
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Excess PSets: 
SU(0):   $rdi = MOV32ri64 @.str.21, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(1):   $esi = COPY %119:gr32, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(2):   $edx = MOV32ri 75000, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(3):   $ecx = MOV32ri 0, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(4):   $r8d = MOV32ri 0, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(5):   $r9d = MOV32ri 75, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(6):   $xmm0 = COPY %120:fr64, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $xmm1 = COPY %121:fr64, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   PUSH64i32 @.str.31, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 5 4 3 2 1 0 
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $xmm1 = COPY %121:fr64, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %121
  UpdateRegP: SU(7) $xmm1 = COPY %121:fr64, debug-location !530; cg.c:363:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 6 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(6) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(6) $xmm0 = COPY %120:fr64, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %120
  UpdateRegP: SU(6) $xmm0 = COPY %120:fr64, debug-location !530; cg.c:363:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 5 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $r9d = MOV32ri 75, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=7
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = MOV32ri 0, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=6
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $ecx = MOV32ri 0, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=4
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = MOV32ri 75000, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=2
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %119:gr32, debug-location !530; cg.c:363:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=3
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %119
  UpdateRegP: SU(1) $esi = COPY %119:gr32, debug-location !530; cg.c:363:5
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.21, debug-location !530; cg.c:363:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $rdi = MOV32ri64 @.str.21, debug-location !530; cg.c:363:5
SU(1):   $esi = COPY %119:gr32, debug-location !530; cg.c:363:5
SU(2):   $edx = MOV32ri 75000, debug-location !530; cg.c:363:5
SU(3):   $ecx = MOV32ri 0, debug-location !530; cg.c:363:5
SU(4):   $r8d = MOV32ri 0, debug-location !530; cg.c:363:5
SU(5):   $r9d = MOV32ri 75, debug-location !530; cg.c:363:5
SU(6):   $xmm0 = COPY %120:fr64, debug-location !530; cg.c:363:5
SU(7):   $xmm1 = COPY %121:fr64, debug-location !530; cg.c:363:5

********** MI Scheduling **********
main:%bb.59 if.end193
  From: %119:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !526 :: (dereferenceable load 1 from %ir.Class); cg.c:363:25
    To: ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !530; cg.c:363:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %119:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !526 :: (dereferenceable load 1 from %ir.Class); cg.c:363:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %120:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !527 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %121:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   undef %282.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !530; cg.c:363:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) undef %282.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %121:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %120:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !527 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %119:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !526 :: (dereferenceable load 1 from %ir.Class); cg.c:363:25
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %119:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !526 :: (dereferenceable load 1 from %ir.Class); cg.c:363:25
SU(1):   %120:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !527 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
SU(2):   %121:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
SU(3):   undef %282.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47

********** MI Scheduling **********
main:%bb.60 if.then195
  From: %129:fr64 = COPY killed $xmm0, debug-location !534; cg.c:371:16
    To: JCC_1 %bb.62, 5, implicit $eflags, debug-location !540; cg.c:372:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %129:fr64 = COPY killed $xmm0, debug-location !534; cg.c:371:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%129
    SU(1): Data Latency=0 Reg=%129
  Single Issue       : false;
SU(1):   MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %129:fr64, debug-location !536 :: (store 8 into %ir.tmax); cg.c:371:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%129
  Single Issue       : false;
SU(2):   %130:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=%130
  Single Issue       : false;
SU(3):   UCOMISDrr %129:fr64, %130:fr64, implicit-def $eflags, debug-location !540; cg.c:372:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%130
    SU(0): Data Latency=0 Reg=%129
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.62, 5, implicit $eflags, debug-location !540; cg.c:372:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) UCOMISDrr %129:fr64, %130:fr64, implicit-def $eflags, debug-location !540; cg.c:372:13
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %130:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %129:fr64, debug-location !536 :: (store 8 into %ir.tmax); cg.c:371:14
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %129:fr64 = COPY killed $xmm0, debug-location !534; cg.c:371:16
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %129:fr64 = COPY killed $xmm0, debug-location !534; cg.c:371:16
SU(1):   MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %129:fr64, debug-location !536 :: (store 8 into %ir.tmax); cg.c:371:14
SU(2):   %130:fr64 = FsFLD0SD
SU(3):   UCOMISDrr %129:fr64, %130:fr64, implicit-def $eflags, debug-location !540; cg.c:372:13

********** MI Scheduling **********
main:%bb.62 if.end200
  From: MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !544 :: (store 4 into %ir.i); cg.c:375:16
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !544 :: (store 4 into %ir.i); cg.c:375:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %273:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %273:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !544 :: (store 4 into %ir.i); cg.c:375:16
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !544 :: (store 4 into %ir.i); cg.c:375:16
SU(1):   %273:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
main:%bb.62 if.end200
  From: $rdi = MOV32ri64 @.str.32, debug-location !543; cg.c:374:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !543; cg.c:374:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.32, debug-location !543; cg.c:374:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !543; cg.c:374:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !543; cg.c:374:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !543; cg.c:374:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.32, debug-location !543; cg.c:374:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   $rdi = MOV32ri64 @.str.32, debug-location !543; cg.c:374:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !543; cg.c:374:9

********** MI Scheduling **********
main:%bb.64 for.body205
  From: %140:fr64 = COPY killed $xmm0, debug-location !553; cg.c:376:17
    To: JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !558; cg.c:377:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %140:fr64 = COPY killed $xmm0, debug-location !553; cg.c:376:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%140
  Single Issue       : false;
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %140:fr64, debug-location !554 :: (store 8 into %ir.t); cg.c:376:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%140
  Single Issue       : false;
SU(2):   CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !557 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !558; cg.c:377:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !557 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %140:fr64, debug-location !554 :: (store 8 into %ir.t); cg.c:376:15
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %140:fr64 = COPY killed $xmm0, debug-location !553; cg.c:376:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %140:fr64 = COPY killed $xmm0, debug-location !553; cg.c:376:17
SU(1):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %140:fr64, debug-location !554 :: (store 8 into %ir.t); cg.c:376:15
SU(2):   CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !557 :: (dereferenceable load 4 from %ir.i); cg.c:377:19

********** MI Scheduling **********
main:%bb.65 if.then209
  From: $rdi = MOV32ri64 @.str.33, debug-location !563; cg.c:378:17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !563; cg.c:378:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.33, debug-location !563; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %160:gr64, debug-location !563; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %161:fr64, debug-location !563; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 1, debug-location !563; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !563; cg.c:378:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 1, debug-location !563; cg.c:378:17
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %161:fr64, debug-location !563; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %160:gr64, debug-location !563; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.33, debug-location !563; cg.c:378:17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $rdi = MOV32ri64 @.str.33, debug-location !563; cg.c:378:17
SU(1):   $rsi = COPY %160:gr64, debug-location !563; cg.c:378:17
SU(2):   $xmm0 = COPY %161:fr64, debug-location !563; cg.c:378:17
SU(3):   $al = MOV8ri 1, debug-location !563; cg.c:378:17

********** MI Scheduling **********
main:%bb.65 if.then209
  From: %159:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !559 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !563; cg.c:378:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %159:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !559 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%159
  Single Issue       : false;
SU(1):   %160:gr64 = MOV64rm %stack.19.t_names, 8, %159:gr64_nosp, 0, $noreg, debug-location !561 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%159
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %161:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !563; cg.c:378:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %161:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %160:gr64 = MOV64rm %stack.19.t_names, 8, %159:gr64_nosp, 0, $noreg, debug-location !561 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %159:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !559 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %159:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !559 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
SU(1):   %160:gr64 = MOV64rm %stack.19.t_names, 8, %159:gr64_nosp, 0, $noreg, debug-location !561 :: (load 8 from %ir.arrayidx211); cg.c:378:41
SU(2):   %161:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 8 from %ir.t); cg.c:378:53

********** MI Scheduling **********
main:%bb.66 if.else213
  From: $rdi = MOV32ri64 @.str.34, debug-location !573; cg.c:381:17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; cg.c:381:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.34, debug-location !573; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %142:gr64, debug-location !573; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %143:fr64, debug-location !573; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %145:fr64, debug-location !573; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2, debug-location !573; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; cg.c:381:17
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2, debug-location !573; cg.c:381:17
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %145:fr64, debug-location !573; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $xmm0 = COPY %143:fr64, debug-location !573; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %142:gr64, debug-location !573; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.34, debug-location !573; cg.c:381:17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   $rdi = MOV32ri64 @.str.34, debug-location !573; cg.c:381:17
SU(1):   $rsi = COPY %142:gr64, debug-location !573; cg.c:381:17
SU(2):   $xmm0 = COPY %143:fr64, debug-location !573; cg.c:381:17
SU(3):   $xmm1 = COPY %145:fr64, debug-location !573; cg.c:381:17
SU(4):   $al = MOV8ri 2, debug-location !573; cg.c:381:17

********** MI Scheduling **********
main:%bb.66 if.else213
  From: %141:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; cg.c:381:17
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %141:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%141
  Single Issue       : false;
SU(1):   %142:gr64 = MOV64rm %stack.19.t_names, 8, %141:gr64_nosp, 0, $noreg, debug-location !567 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%141
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %143:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%143
  Single Issue       : false;
SU(3):   %145:fr64 = COPY %143:fr64, debug-location !570; cg.c:382:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%143
  Successors:
    SU(4): Data Latency=0 Reg=%145
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %145:fr64 = MULSDrr %145:fr64(tied-def 0), %273:fr64, debug-location !570; cg.c:382:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%145
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%145
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%145
    SU(4): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; cg.c:381:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
  Ready @3c
  BotQ.A TopLatency SU(5) 5c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %145:fr64 = MULSDrr %145:fr64(tied-def 0), %273:fr64, debug-location !570; cg.c:382:26
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %145:fr64 = COPY %143:fr64, debug-location !570; cg.c:382:26
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %143:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %142:gr64 = MOV64rm %stack.19.t_names, 8, %141:gr64_nosp, 0, $noreg, debug-location !567 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %141:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %141:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
SU(1):   %142:gr64 = MOV64rm %stack.19.t_names, 8, %141:gr64_nosp, 0, $noreg, debug-location !567 :: (load 8 from %ir.arrayidx215); cg.c:381:52
SU(2):   %143:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
SU(3):   %145:fr64 = COPY %143:fr64, debug-location !570; cg.c:382:26
SU(4):   %145:fr64 = MULSDrr %145:fr64(tied-def 0), %273:fr64, debug-location !570; cg.c:382:26
SU(5):   %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34

********** MI Scheduling **********
main:%bb.67 if.then221
  From: $rdi = MOV32ri64 @.str.35, debug-location !588; cg.c:385:21
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !588; cg.c:385:21
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.35, debug-location !588; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.36, debug-location !588; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $xmm0 = COPY %152:fr64, debug-location !588; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %154:fr64, debug-location !588; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $al = MOV8ri 2, debug-location !588; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !588; cg.c:385:21
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $al = MOV8ri 2, debug-location !588; cg.c:385:21
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(3) $xmm1 = COPY %154:fr64, debug-location !588; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %152:fr64, debug-location !588; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.36, debug-location !588; cg.c:385:21
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.35, debug-location !588; cg.c:385:21
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   $rdi = MOV32ri64 @.str.35, debug-location !588; cg.c:385:21
SU(1):   $rsi = MOV32ri64 @.str.36, debug-location !588; cg.c:385:21
SU(2):   $xmm0 = COPY %152:fr64, debug-location !588; cg.c:385:21
SU(3):   $xmm1 = COPY %154:fr64, debug-location !588; cg.c:385:21
SU(4):   $al = MOV8ri 2, debug-location !588; cg.c:385:21

********** MI Scheduling **********
main:%bb.67 if.then221
  From: %151:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !578 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !588; cg.c:385:21
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %151:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !578 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(6): Data Latency=4 Reg=%151
    SU(1): Data Latency=4 Reg=%151
  Single Issue       : false;
SU(1):   %152:fr64 = COPY %151:fr64, debug-location !581; cg.c:384:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%151
  Successors:
    SU(2): Data Latency=0 Reg=%152
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %152:fr64 = SUBSDrm %152:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=0 Reg=%152
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%152
    SU(3): Data Latency=4 Reg=%152
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %152:fr64, debug-location !582 :: (store 8 into %ir.t); cg.c:384:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%152
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %154:fr64 = COPY %152:fr64, debug-location !585; cg.c:386:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(2): Data Latency=4 Reg=%152
  Successors:
    SU(5): Data Latency=0 Reg=%154
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %154:fr64 = MULSDrr %154:fr64(tied-def 0), %273:fr64, debug-location !585; cg.c:386:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(4): Data Latency=0 Reg=%154
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%154
    SU(6): Out  Latency=0
  Single Issue       : false;
SU(6):   %154:fr64 = DIVSDrr %154:fr64(tied-def 0), %151:fr64, debug-location !587; cg.c:386:38
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(5): Data Latency=1 Reg=%154
    SU(5): Out  Latency=0
    SU(0): Data Latency=4 Reg=%151
  Successors:
    ExitSU: Ord  Latency=9 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !588; cg.c:385:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=9 Artificial
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %154:fr64 = DIVSDrr %154:fr64(tied-def 0), %151:fr64, debug-location !587; cg.c:386:38
  Ready @9c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %154:fr64 = MULSDrr %154:fr64(tied-def 0), %273:fr64, debug-location !585; cg.c:386:30
  Ready @10c
  BotQ.A BotLatency SU(5) 10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %154:fr64 = COPY %152:fr64, debug-location !585; cg.c:386:30
  Ready @10c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %152:fr64, debug-location !582 :: (store 8 into %ir.t); cg.c:384:23
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %152:fr64 = SUBSDrm %152:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
  Ready @14c
  BotQ.A BotLatency SU(2) 14c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %152:fr64 = COPY %151:fr64, debug-location !581; cg.c:384:30
  Ready @14c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %151:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !578 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  Ready @18c
  BotQ.A BotLatency SU(0) 18c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   %151:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !578 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
SU(1):   %152:fr64 = COPY %151:fr64, debug-location !581; cg.c:384:30
SU(2):   %152:fr64 = SUBSDrm %152:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
SU(3):   MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %152:fr64, debug-location !582 :: (store 8 into %ir.t); cg.c:384:23
SU(4):   %154:fr64 = COPY %152:fr64, debug-location !585; cg.c:386:30
SU(5):   %154:fr64 = MULSDrr %154:fr64(tied-def 0), %273:fr64, debug-location !585; cg.c:386:30
SU(6):   %154:fr64 = DIVSDrr %154:fr64(tied-def 0), %151:fr64, debug-location !587; cg.c:386:38

********** INTERVALS **********
DIL [0B,32r:0)[224r,240r:1)[368r,400r:38)[624r,640r:37)[768r,784r:12)[976r,1008r:36)[1088r,1136r:35)[1216r,1264r:34)[1328r,1360r:33)[1536r,1568r:32)[1860r,2048r:11)[3472r,3616r:13)[5152r,5168r:10)[5216r,5232r:9)[5328r,5376r:31)[5440r,5456r:8)[5856r,5872r:3)[5936r,6080r:16)[6192r,6208r:2)[7264r,7296r:15)[7408r,7488r:14)[7952r,7968r:7)[8016r,8032r:6)[8160r,8192r:30)[8624r,8656r:24)[8752r,8800r:23)[8880r,8928r:22)[9072r,9104r:27)[9200r,9248r:26)[9328r,9376r:25)[9520r,9552r:29)[9616r,9648r:28)[10112r,10432r:21)[10560r,10576r:5)[10832r,10864r:20)[11136r,11152r:4)[11344r,11408r:17)[11600r,11680r:19)[11920r,12000r:18)  0@0B-phi 1@224r 2@6192r 3@5856r 4@11136r 5@10560r 6@8016r 7@7952r 8@5440r 9@5216r 10@5152r 11@1860r 12@768r 13@3472r 14@7408r 15@7264r 16@5936r 17@11344r 18@11920r 19@11600r 20@10832r 21@10112r 22@8880r 23@8752r 24@8624r 25@9328r 26@9200r 27@9072r 28@9616r 29@9520r 30@8160r 31@5328r 32@1536r 33@1328r 34@1216r 35@1088r 36@976r 37@624r 38@368r
DIH [0B,32r:0)[224r,240r:1)[368r,400r:38)[624r,640r:37)[768r,784r:12)[976r,1008r:36)[1088r,1136r:35)[1216r,1264r:34)[1328r,1360r:33)[1536r,1568r:32)[1860r,2048r:11)[3472r,3616r:13)[5152r,5168r:10)[5216r,5232r:9)[5328r,5376r:31)[5440r,5456r:8)[5856r,5872r:3)[5936r,6080r:16)[6192r,6208r:2)[7264r,7296r:15)[7408r,7488r:14)[7952r,7968r:7)[8016r,8032r:6)[8160r,8192r:30)[8624r,8656r:24)[8752r,8800r:23)[8880r,8928r:22)[9072r,9104r:27)[9200r,9248r:26)[9328r,9376r:25)[9520r,9552r:29)[9616r,9648r:28)[10112r,10432r:21)[10560r,10576r:5)[10832r,10864r:20)[11136r,11152r:4)[11344r,11408r:17)[11600r,11680r:19)[11920r,12000r:18)  0@0B-phi 1@224r 2@6192r 3@5856r 4@11136r 5@10560r 6@8016r 7@7952r 8@5440r 9@5216r 10@5152r 11@1860r 12@768r 13@3472r 14@7408r 15@7264r 16@5936r 17@11344r 18@11920r 19@11600r 20@10832r 21@10112r 22@8880r 23@8752r 24@8624r 25@9328r 26@9200r 27@9072r 28@9616r 29@9520r 30@8160r 31@5328r 32@1536r 33@1328r 34@1216r 35@1088r 36@976r 37@624r 38@368r
HDI [0B,32r:0)[224r,240r:1)[368r,400r:38)[624r,640r:37)[768r,784r:12)[976r,1008r:36)[1088r,1136r:35)[1216r,1264r:34)[1328r,1360r:33)[1536r,1568r:32)[1860r,2048r:11)[3472r,3616r:13)[5152r,5168r:10)[5216r,5232r:9)[5328r,5376r:31)[5440r,5456r:8)[5856r,5872r:3)[5936r,6080r:16)[6192r,6208r:2)[7264r,7296r:15)[7408r,7488r:14)[7952r,7968r:7)[8016r,8032r:6)[8160r,8192r:30)[8624r,8656r:24)[8752r,8800r:23)[8880r,8928r:22)[9072r,9104r:27)[9200r,9248r:26)[9328r,9376r:25)[9520r,9552r:29)[9616r,9648r:28)[10112r,10432r:21)[10560r,10576r:5)[10832r,10864r:20)[11136r,11152r:4)[11344r,11408r:17)[11600r,11680r:19)[11920r,12000r:18)  0@0B-phi 1@224r 2@6192r 3@5856r 4@11136r 5@10560r 6@8016r 7@7952r 8@5440r 9@5216r 10@5152r 11@1860r 12@768r 13@3472r 14@7408r 15@7264r 16@5936r 17@11344r 18@11920r 19@11600r 20@10832r 21@10112r 22@8880r 23@8752r 24@8624r 25@9328r 26@9200r 27@9072r 28@9616r 29@9520r 30@8160r 31@5328r 32@1536r 33@1328r 34@1216r 35@1088r 36@976r 37@624r 38@368r
SIL [0B,16r:0)[384r,400r:11)[1104r,1136r:5)[1232r,1264r:4)[1864r,2048r:3)[3488r,3616r:6)[5952r,6080r:7)[7424r,7488r:1)[10128r,10432r:2)[11360r,11408r:8)[11616r,11680r:10)[11936r,12000r:9)  0@0B-phi 1@7424r 2@10128r 3@1864r 4@1232r 5@1104r 6@3488r 7@5952r 8@11360r 9@11936r 10@11616r 11@384r
SIH [0B,16r:0)[384r,400r:11)[1104r,1136r:5)[1232r,1264r:4)[1864r,2048r:3)[3488r,3616r:6)[5952r,6080r:7)[7424r,7488r:1)[10128r,10432r:2)[11360r,11408r:8)[11616r,11680r:10)[11936r,12000r:9)  0@0B-phi 1@7424r 2@10128r 3@1864r 4@1232r 5@1104r 6@3488r 7@5952r 8@11360r 9@11936r 10@11616r 11@384r
HSI [0B,16r:0)[384r,400r:11)[1104r,1136r:5)[1232r,1264r:4)[1864r,2048r:3)[3488r,3616r:6)[5952r,6080r:7)[7424r,7488r:1)[10128r,10432r:2)[11360r,11408r:8)[11616r,11680r:10)[11936r,12000r:9)  0@0B-phi 1@7424r 2@10128r 3@1864r 4@1232r 5@1104r 6@3488r 7@5952r 8@11360r 9@11936r 10@11616r 11@384r
%0 [4160r,4224r:0)[4272B,4304r:0)  0@4160r weight:0.000000e+00
%4 [6768r,6832r:0)[6880B,6912r:0)  0@6768r weight:0.000000e+00
%8 [32r,64r:0)  0@32r weight:0.000000e+00
%9 [16r,80r:0)  0@16r weight:0.000000e+00
%14 [432r,464r:0)  0@432r weight:0.000000e+00
%15 [592r,624r:0)  0@592r weight:0.000000e+00
%18 [896r,912r:0)  0@896r weight:0.000000e+00
%30 [1424r,1440r:0)  0@1424r weight:0.000000e+00
%32 [1472r,1488r:0)  0@1472r weight:0.000000e+00
%33 [1520r,1552r:0)  0@1520r weight:0.000000e+00
%34 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%35 [1632r,1860r:0)  0@1632r weight:0.000000e+00
%36 [1648r,1864r:0)  0@1648r weight:0.000000e+00
%37 [1664r,1872r:0)  0@1664r weight:0.000000e+00
%48 [2112r,2144r:2)[2144r,2176r:0)[2176r,2192r:1)  0@2144r 1@2176r 2@2112r weight:0.000000e+00
%55 [2880r,2912r:2)[2912r,2944r:0)[2944r,2960r:1)  0@2912r 1@2944r 2@2880r weight:0.000000e+00
%62 [5264r,5344r:0)  0@5264r weight:0.000000e+00
%70 [8064r,8080r:0)  0@8064r weight:0.000000e+00
%75 [8224r,8240r:0)  0@8224r weight:0.000000e+00
%85 [8336r,8432r:0)  0@8336r weight:0.000000e+00
%88 [8320r,8368r:2)[8368r,8400r:0)[8400r,8432r:1)[8432r,8480r:3)  0@8368r 1@8400r 2@8320r 3@8432r weight:0.000000e+00
%91 [8464r,8480r:0)  0@8464r weight:0.000000e+00
%96 [9136r,9216r:0)  0@9136r weight:0.000000e+00
%100 [9280r,9344r:0)  0@9280r weight:0.000000e+00
%107 [8688r,8768r:0)  0@8688r weight:0.000000e+00
%111 [8832r,8896r:0)  0@8832r weight:0.000000e+00
%114 [9696r,9728r:0)  0@9696r weight:0.000000e+00
%115 [9712r,9728r:0)  0@9712r weight:0.000000e+00
%118 [9808r,9840r:2)[9840r,9872r:0)[9872r,9888r:1)  0@9840r 1@9872r 2@9808r weight:0.000000e+00
%119 [9968r,10128r:0)  0@9968r weight:0.000000e+00
%120 [9984r,10208r:0)  0@9984r weight:0.000000e+00
%121 [10000r,10224r:0)  0@10000r weight:0.000000e+00
%129 [10608r,10656r:0)  0@10608r weight:0.000000e+00
%130 [10640r,10656r:0)  0@10640r weight:0.000000e+00
%139 [11104r,11136r:0)  0@11104r weight:0.000000e+00
%140 [11184r,11200r:0)  0@11184r weight:0.000000e+00
%141 [11472r,11488r:0)  0@11472r weight:0.000000e+00
%142 [11488r,11616r:0)  0@11488r weight:0.000000e+00
%143 [11504r,11632r:0)  0@11504r weight:0.000000e+00
%145 [11520r,11536r:2)[11536r,11568r:0)[11568r,11648r:1)  0@11536r 1@11568r 2@11520r weight:0.000000e+00
%151 [11776r,11888r:0)  0@11776r weight:0.000000e+00
%152 [11792r,11808r:0)[11808r,11952r:1)  0@11792r 1@11808r weight:0.000000e+00
%154 [11840r,11856r:2)[11856r,11888r:0)[11888r,11968r:1)  0@11856r 1@11888r 2@11840r weight:0.000000e+00
%159 [11280r,11296r:0)  0@11280r weight:0.000000e+00
%160 [11296r,11360r:0)  0@11296r weight:0.000000e+00
%161 [11312r,11376r:0)  0@11312r weight:0.000000e+00
%178 [6320r,6352r:2)[6352r,6384r:0)[6384r,6400r:1)  0@6352r 1@6384r 2@6320r weight:0.000000e+00
%180 [5616r,7904B:0)  0@5616r weight:0.000000e+00
%183 [7040r,7056r:0)[7056r,7072r:1)  0@7040r 1@7056r weight:0.000000e+00
%185 [7088r,7104r:2)[7104r,7136r:0)[7136r,7152r:1)  0@7104r 1@7136r 2@7088r weight:0.000000e+00
%192 [7344r,7424r:0)  0@7344r weight:0.000000e+00
%193 [7360r,7440r:0)  0@7360r weight:0.000000e+00
%194 [7376r,7456r:0)  0@7376r weight:0.000000e+00
%201 [7552r,7584r:2)[7584r,7616r:0)[7616r,7632r:1)  0@7584r 1@7616r 2@7552r weight:0.000000e+00
%206 [7696r,7760r:0)[7760r,7776r:1)  0@7696r 1@7760r weight:0.000000e+00
%207 [7808r,7824r:0)  0@7808r weight:0.000000e+00
%212 [6512r,6544r:2)[6544r,6576r:0)[6576r,6592r:1)  0@6544r 1@6576r 2@6512r weight:0.000000e+00
%214 [6496r,6624r:2)[6624r,6656r:0)[6656r,6672r:1)  0@6624r 1@6656r 2@6496r weight:0.000000e+00
%215 [6704r,6720r:0)  0@6704r weight:0.000000e+00
%219 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%221 [3232r,7904B:0)  0@3232r weight:0.000000e+00
%231 [3712r,3744r:2)[3744r,3776r:0)[3776r,3792r:1)  0@3744r 1@3776r 2@3712r weight:0.000000e+00
%233 [3344r,4864B:0)  0@3344r weight:0.000000e+00
%235 [3360r,7904B:0)  0@3360r weight:0.000000e+00
%236 [4432r,4448r:0)[4448r,4464r:1)  0@4432r 1@4448r weight:0.000000e+00
%240 [4512r,4544r:2)[4544r,4576r:0)[4576r,4592r:1)  0@4544r 1@4576r 2@4512r weight:0.000000e+00
%245 [4656r,4720r:0)[4720r,4736r:1)  0@4656r 1@4720r weight:0.000000e+00
%246 [4768r,4784r:0)  0@4768r weight:0.000000e+00
%251 [3904r,3936r:2)[3936r,3968r:0)[3968r,3984r:1)  0@3936r 1@3968r 2@3904r weight:0.000000e+00
%253 [3888r,4016r:2)[4016r,4048r:0)[4048r,4064r:1)  0@4016r 1@4048r 2@3888r weight:0.000000e+00
%254 [4096r,4112r:0)  0@4096r weight:0.000000e+00
%257 [3136r,3152r:0)  0@3136r weight:0.000000e+00
%260 [2624r,10736r:0)  0@2624r weight:0.000000e+00
%261 [2784r,2800r:0)  0@2784r weight:0.000000e+00
%262 [2256r,2272r:0)  0@2256r weight:0.000000e+00
%263 [2272r,2288r:0)  0@2272r weight:0.000000e+00
%264 [2320r,2352r:0)  0@2320r weight:0.000000e+00
%265 [2336r,2352r:0)  0@2336r weight:0.000000e+00
%269 [2448r,2464r:0)  0@2448r weight:0.000000e+00
%270 [2496r,2512r:0)  0@2496r weight:0.000000e+00
%271 [192r,224r:0)  0@192r weight:0.000000e+00
%272 [5632r,7904B:0)  0@5632r weight:0.000000e+00
%273 [10944r,12080B:0)  0@10944r weight:0.000000e+00
%276 [1712r,1968r:0)  0@1712r weight:0.000000e+00
%278 [1696r,2000r:0)  0@1696r weight:0.000000e+00
%280 [1680r,2032r:0)  0@1680r weight:0.000000e+00
%282 [10016r,10400r:0)  0@10016r weight:0.000000e+00
%283 [4224r,4272B:0)[4352r,4400B:1)[4400B,4448r:2)  0@4224r 1@4352r 2@4400B-phi weight:0.000000e+00
%284 [6832r,6880B:0)[6960r,7008B:1)[7008B,7056r:2)  0@6832r 1@6960r 2@7008B-phi weight:0.000000e+00
%285 [2416r,2496r:0)  0@2416r weight:0.000000e+00
%286 [2720r,2784r:0)  0@2720r weight:0.000000e+00
%287 [3024r,3136r:0)  0@3024r weight:0.000000e+00
%289 [3856r,4096r:0)  0@3856r weight:0.000000e+00
%290 [4672r,4768r:0)  0@4672r weight:0.000000e+00
%291 [4976r,5040r:0)  0@4976r weight:0.000000e+00
%293 [6464r,6704r:0)  0@6464r weight:0.000000e+00
%295 [7712r,7808r:0)  0@7712r weight:0.000000e+00
RegMasks: 240r 400r 640r 784r 1008r 1136r 1264r 1360r 1568r 2048r 3616r 4320r 5168r 5232r 5376r 5456r 5872r 6080r 6208r 6928r 7296r 7488r 7968r 8032r 8192r 8656r 8800r 8928r 9104r 9248r 9376r 9552r 9648r 10432r 10576r 10864r 11152r 11408r 11680r 12000r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=8, align=8, at location [SP+8]
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=1, align=1, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
  fi#19: size=24, align=16, at location [SP+8]
  fi#20: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
  cp#2: 0x422979CA8D600000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
  cp#5: 1.000000e+00, align=8
  cp#6: 6.000000e+01, align=8
Function Live Ins: $edi in %8, $rsi in %9

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $rsi
16B	  %9:gr64 = COPY $rsi
32B	  %8:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %8:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.argv.addr)
96B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

112B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

128B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !137 :: (dereferenceable load 4 from %ir.i); cg.c:117:19
144B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !138; cg.c:117:5
160B	  JMP_1 %bb.2, debug-location !138; cg.c:117:5

176B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

192B	  %271:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
224B	  $edi = COPY %271:gr32, debug-location !141; cg.c:118:9
240B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !141; cg.c:118:9
256B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !141; cg.c:118:9
272B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !142 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:117:30
288B	  JMP_1 %bb.1, debug-location !143; cg.c:117:5

304B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !152; cg.c:122:15
368B	  $rdi = MOV32ri64 @.str, debug-location !152; cg.c:122:15
384B	  $rsi = MOV32ri64 @.str.1, debug-location !152; cg.c:122:15
400B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !152; cg.c:122:15
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !152; cg.c:122:15
432B	  %14:gr64 = COPY killed $rax, debug-location !152; cg.c:122:15
448B	  MOV64mr %stack.20.fp, 1, $noreg, 0, $noreg, %14:gr64, debug-location !154 :: (store 8 into %ir.fp); cg.c:122:13
464B	  TEST64rr %14:gr64, %14:gr64, implicit-def $eflags, debug-location !155; cg.c:122:41
480B	  JCC_1 %bb.5, 4, implicit killed $eflags, debug-location !156; cg.c:122:9
496B	  JMP_1 %bb.4, debug-location !156; cg.c:122:9

512B	bb.4.if.then:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

528B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 1, debug-location !157 :: (store 4 into @timeron); cg.c:123:17
544B	  MOV64mi32 %stack.19.t_names, 1, $noreg, 0, $noreg, @.str.2, debug-location !160 :: (store 8 into %ir.arrayidx4, align 16); cg.c:124:25
560B	  MOV64mi32 %stack.19.t_names, 1, $noreg, 8, $noreg, @.str.3, debug-location !162 :: (store 8 into %ir.arrayidx2); cg.c:125:26
576B	  MOV64mi32 %stack.19.t_names, 1, $noreg, 16, $noreg, @.str.4, debug-location !164 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
592B	  %15:gr64 = MOV64rm %stack.20.fp, 1, $noreg, 0, $noreg, debug-location !165 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; cg.c:127:9
624B	  $rdi = COPY %15:gr64, debug-location !166; cg.c:127:9
640B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !166; cg.c:127:9
656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !166; cg.c:127:9
672B	  JMP_1 %bb.6, debug-location !167; cg.c:128:5

688B	bb.5.if.else:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

704B	  MOV32mi $rip, 1, $noreg, @timeron, $noreg, 0, debug-location !168 :: (store 4 into @timeron); cg.c:130:17

720B	bb.6.if.end:
	; predecessors: %bb.5, %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !170; cg.c:133:5
768B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !170; cg.c:133:5
784B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !170; cg.c:133:5
800B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !170; cg.c:133:5
816B	  MOV32mi $rip, 1, $noreg, @firstrow, $noreg, 0, debug-location !171 :: (store 4 into @firstrow); cg.c:135:14
832B	  MOV32mi $rip, 1, $noreg, @lastrow, $noreg, 74999, debug-location !172 :: (store 4 into @lastrow); cg.c:136:13
848B	  MOV32mi $rip, 1, $noreg, @firstcol, $noreg, 0, debug-location !173 :: (store 4 into @firstcol); cg.c:137:14
864B	  MOV32mi $rip, 1, $noreg, @lastcol, $noreg, 74999, debug-location !174 :: (store 4 into @lastcol); cg.c:138:13
880B	  MOV8mi %stack.14.Class, 1, $noreg, 0, $noreg, 66, debug-location !175 :: (store 1 into %ir.Class); cg.c:153:15
896B	  %18:gr64 = MOV64ri 4627086287187887514
912B	  MOV64mr %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, %18:gr64, debug-location !181 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
928B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; cg.c:172:5
976B	  $rdi = MOV32ri64 @.str.5, debug-location !182; cg.c:172:5
992B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !182; cg.c:172:5
1008B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !182; cg.c:172:5
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !182; cg.c:172:5
1040B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !183; cg.c:173:5
1088B	  $rdi = MOV32ri64 @.str.6, debug-location !183; cg.c:173:5
1104B	  $esi = MOV32ri 75000, debug-location !183; cg.c:173:5
1120B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !183; cg.c:173:5
1136B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !183; cg.c:173:5
1152B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !183; cg.c:173:5
1168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:174:5
1216B	  $rdi = MOV32ri64 @.str.7, debug-location !184; cg.c:174:5
1232B	  $esi = MOV32ri 75, debug-location !184; cg.c:174:5
1248B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !184; cg.c:174:5
1264B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !184; cg.c:174:5
1280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !184; cg.c:174:5
1296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:175:5
1328B	  $rdi = MOV32ri64 @.str.8, debug-location !185; cg.c:175:5
1344B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !185; cg.c:175:5
1360B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !185; cg.c:175:5
1376B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !185; cg.c:175:5
1392B	  MOV32mi $rip, 1, $noreg, @naa, $noreg, 75000, debug-location !186 :: (store 4 into @naa); cg.c:177:9
1408B	  MOV32mi $rip, 1, $noreg, @nzz, $noreg, 14700000, debug-location !187 :: (store 4 into @nzz); cg.c:178:9
1424B	  %30:gr64 = MOV64ri 4734050326586327040
1440B	  MOV64mr $rip, 1, $noreg, @tran, $noreg, %30:gr64, debug-location !188 :: (store 8 into @tran); cg.c:183:10
1472B	  %32:gr64 = MOV64ri 4742906807993761792
1488B	  MOV64mr $rip, 1, $noreg, @amult, $noreg, %32:gr64, debug-location !189 :: (store 8 into @amult); cg.c:184:11
1504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !191; cg.c:185:12
1520B	  %33:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
1536B	  $rdi = MOV32ri64 @tran, debug-location !191; cg.c:185:12
1552B	  $xmm0 = COPY %33:fr64, debug-location !191; cg.c:185:12
1568B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !191; cg.c:185:12
1584B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !191; cg.c:185:12
1600B	  %34:fr64 = COPY killed $xmm0, debug-location !191; cg.c:185:12
1616B	  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %34:fr64, debug-location !192 :: (store 8 into %ir.zeta); cg.c:185:10
1632B	  %35:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !193 :: (dereferenceable load 4 from @naa); cg.c:190:11
1648B	  %36:gr32 = MOV32rm $rip, 1, $noreg, @nzz, $noreg, debug-location !194 :: (dereferenceable load 4 from @nzz); cg.c:190:16
1664B	  %37:gr32 = MOV32rm $rip, 1, $noreg, @firstrow, $noreg, debug-location !195 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
1680B	  undef %280.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !196 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
1696B	  undef %278.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !197 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
1712B	  undef %276.sub_32bit:gr64_with_sub_8bit = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !198 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
1728B	  ADJCALLSTACKDOWN64 56, 0, 56, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !199; cg.c:190:5
1824B	  $rdx = MOV32ri64 @a, debug-location !199; cg.c:190:5
1840B	  $rcx = MOV32ri64 @colidx, debug-location !199; cg.c:190:5
1856B	  $r8 = MOV32ri64 @rowstr, debug-location !199; cg.c:190:5
1860B	  $edi = COPY %35:gr32, debug-location !199; cg.c:190:5
1864B	  $esi = COPY %36:gr32, debug-location !199; cg.c:190:5
1872B	  $r9d = COPY %37:gr32, debug-location !199; cg.c:190:5
1888B	  PUSH64i32 @iv, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
1904B	  PUSH64i32 @aelt, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
1920B	  PUSH64i32 @acol, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
1936B	  PUSH64i32 @arow, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
1968B	  PUSH64r %276:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
2000B	  PUSH64r %278:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
2032B	  PUSH64r %280:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !199; cg.c:190:5
2048B	  CALL64pcrel32 @makea, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9d, implicit-def $rsp, implicit-def $ssp, debug-location !199; cg.c:190:5
2064B	  ADJCALLSTACKUP64 56, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !199; cg.c:190:5
2080B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !200 :: (store 4 into %ir.j); cg.c:202:12

2096B	bb.7.for.cond10:
	; predecessors: %bb.6, %bb.11
	  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

2112B	  %48:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !205 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
2144B	  %48:gr32 = nsw SUB32rm %48:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !207 :: (dereferenceable load 4 from @firstrow); cg.c:202:29
2176B	  %48:gr32 = nsw INC32r %48:gr32(tied-def 0), implicit-def dead $eflags, debug-location !208; cg.c:202:40
2192B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %48:gr32, implicit-def $eflags, debug-location !209 :: (dereferenceable load 4 from %ir.j); cg.c:202:19
2208B	  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !210; cg.c:202:5
2224B	  JMP_1 %bb.8, debug-location !210; cg.c:202:5

2240B	bb.8.for.body12:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2256B	  %262:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !211 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
2272B	  %263:gr32 = MOV32rm $noreg, 4, %262:gr64_nosp, @rowstr, $noreg, debug-location !214 :: (load 4 from %ir.arrayidx13); cg.c:203:18
2288B	  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %263:gr32, debug-location !215 :: (store 4 into %ir.k); cg.c:203:16

2304B	bb.9.for.cond14:
	; predecessors: %bb.8, %bb.10
	  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

2320B	  %264:gr32 = MOV32rm %stack.5.k, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
2336B	  %265:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !219 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
2352B	  CMP32rm %264:gr32, $noreg, 4, %265:gr64_nosp, @rowstr + 4, $noreg, implicit-def $eflags, debug-location !222 :: (load 4 from %ir.arrayidx17); cg.c:203:31
2368B	  JCC_1 %bb.11, 13, implicit killed $eflags, debug-location !223; cg.c:203:9
2384B	  JMP_1 %bb.10, debug-location !223; cg.c:203:9

2400B	bb.10.for.body19:
	; predecessors: %bb.9
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2416B	  %285:gr64_nosp = MOVSX64rm32 %stack.5.k, 1, $noreg, 0, $noreg, debug-location !224 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
2448B	  %269:gr32 = MOV32rm $rip, 1, $noreg, @firstcol, $noreg, debug-location !227 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
2464B	  SUB32mr $noreg, 4, %285:gr64_nosp, @colidx, $noreg, %269:gr32, implicit-def dead $eflags, debug-location !231 :: (store 4 into %ir.arrayidx24), (load 4 from %ir.arrayidx21); cg.c:204:23
2496B	  %270:gr32 = LEA64_32r %285:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !232; cg.c:203:49
2512B	  MOV32mr %stack.5.k, 1, $noreg, 0, $noreg, %270:gr32, debug-location !232 :: (store 4 into %ir.k); cg.c:203:49
2528B	  JMP_1 %bb.9, debug-location !233; cg.c:203:9

2544B	bb.11.for.end27:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2560B	  INC32m %stack.4.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !236 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:202:46
2576B	  JMP_1 %bb.7, debug-location !237; cg.c:202:5

2592B	bb.12.for.end30:
	; predecessors: %bb.7
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2608B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !240 :: (store 4 into %ir.i); cg.c:211:12
2624B	  %260:gr64 = MOV64ri 4607182418800017408

2640B	bb.13.for.cond31:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

2656B	  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 75000, implicit-def $eflags, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:19
2672B	  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !246; cg.c:211:5
2688B	  JMP_1 %bb.14, debug-location !246; cg.c:211:5

2704B	bb.14.for.body33:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2720B	  %286:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !247 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
2752B	  MOV64mr $noreg, 8, %286:gr64_nosp, @x, $noreg, %260:gr64, debug-location !250 :: (store 8 into %ir.arrayidx35); cg.c:212:14
2784B	  %261:gr32 = LEA64_32r %286:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !251; cg.c:211:30
2800B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %261:gr32, debug-location !251 :: (store 4 into %ir.i); cg.c:211:30
2816B	  JMP_1 %bb.13, debug-location !252; cg.c:211:5

2832B	bb.15.for.end38:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2848B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !255 :: (store 4 into %ir.j); cg.c:214:12

2864B	bb.16.for.cond39:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

2880B	  %55:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !260 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
2912B	  %55:gr32 = nsw SUB32rm %55:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !262 :: (dereferenceable load 4 from @firstcol); cg.c:214:29
2944B	  %55:gr32 = nsw INC32r %55:gr32(tied-def 0), implicit-def dead $eflags, debug-location !263; cg.c:214:40
2960B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %55:gr32, implicit-def $eflags, debug-location !264 :: (dereferenceable load 4 from %ir.j); cg.c:214:19
2976B	  JCC_1 %bb.18, 13, implicit killed $eflags, debug-location !265; cg.c:214:5
2992B	  JMP_1 %bb.17, debug-location !265; cg.c:214:5

3008B	bb.17.for.body43:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3024B	  %287:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !266 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
3056B	  MOV64mi32 $noreg, 8, %287:gr64_nosp, @q, $noreg, 0, debug-location !269 :: (store 8 into %ir.arrayidx45); cg.c:215:14
3072B	  MOV64mi32 $noreg, 8, %287:gr64_nosp, @z, $noreg, 0, debug-location !272 :: (store 8 into %ir.arrayidx47); cg.c:216:14
3088B	  MOV64mi32 $noreg, 8, %287:gr64_nosp, @r, $noreg, 0, debug-location !275 :: (store 8 into %ir.arrayidx49); cg.c:217:14
3104B	  MOV64mi32 $noreg, 8, %287:gr64_nosp, @p, $noreg, 0, debug-location !278 :: (store 8 into %ir.arrayidx51); cg.c:218:14
3136B	  %257:gr32 = LEA64_32r %287:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !279; cg.c:214:46
3152B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %257:gr32, debug-location !279 :: (store 4 into %ir.j); cg.c:214:46
3168B	  JMP_1 %bb.16, debug-location !280; cg.c:214:5

3184B	bb.18.for.end54:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

3200B	  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !283 :: (store 8 into %ir.zeta); cg.c:221:10
3216B	  MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !284 :: (store 4 into %ir.it); cg.c:228:13
3232B	  %221:gr64 = LEA64r %stack.8.rnorm, 1, $noreg, 0, $noreg
3344B	  %233:fr64 = FsFLD0SD
3360B	  %235:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.5, $noreg :: (load 8 from constant-pool)

3376B	bb.19.for.cond55:
	; predecessors: %bb.18, %bb.29
	  successors: %bb.20(0x7c000000), %bb.30(0x04000000); %bb.20(96.88%), %bb.30(3.12%)

3392B	  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:21
3408B	  JCC_1 %bb.30, 15, implicit killed $eflags, debug-location !290; cg.c:228:5
3424B	  JMP_1 %bb.20, debug-location !290; cg.c:228:5

3440B	bb.20.for.body57:
	; predecessors: %bb.19
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3456B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !291; cg.c:232:9
3472B	  $rdi = MOV32ri64 @colidx, debug-location !291; cg.c:232:9
3488B	  $rsi = MOV32ri64 @rowstr, debug-location !291; cg.c:232:9
3504B	  $rdx = MOV32ri64 @x, debug-location !291; cg.c:232:9
3520B	  $rcx = MOV32ri64 @z, debug-location !291; cg.c:232:9
3536B	  $r8 = MOV32ri64 @a, debug-location !291; cg.c:232:9
3552B	  $r9 = MOV32ri64 @p, debug-location !291; cg.c:232:9
3568B	  PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
3584B	  PUSH64i32 @r, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
3600B	  PUSH64i32 @q, implicit-def $rsp, implicit $rsp, debug-location !291; cg.c:232:9
3616B	  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !291; cg.c:232:9
3632B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !291; cg.c:232:9
3648B	  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !293 :: (store 8 into %ir.norm_temp1); cg.c:240:20
3664B	  MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !294 :: (store 8 into %ir.norm_temp2); cg.c:241:20
3680B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !295 :: (store 4 into %ir.j); cg.c:242:16

3696B	bb.21.for.cond58:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

3712B	  %231:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !300 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
3744B	  %231:gr32 = nsw SUB32rm %231:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !302 :: (dereferenceable load 4 from @firstcol); cg.c:242:33
3776B	  %231:gr32 = nsw INC32r %231:gr32(tied-def 0), implicit-def dead $eflags, debug-location !303; cg.c:242:44
3792B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %231:gr32, implicit-def $eflags, debug-location !304 :: (dereferenceable load 4 from %ir.j); cg.c:242:23
3808B	  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !305; cg.c:242:9
3824B	  JMP_1 %bb.22, debug-location !305; cg.c:242:9

3840B	bb.22.for.body62:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3856B	  %289:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !308 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
3888B	  %253:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @z, $noreg, debug-location !317 :: (load 8 from %ir.arrayidx71); cg.c:244:39
3904B	  %251:fr64 = MOVSDrm_alt $noreg, 8, %289:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx64)
3936B	  %251:fr64 = MULSDrr %251:fr64(tied-def 0), %253:fr64, debug-location !312; cg.c:243:44
3968B	  %251:fr64 = ADDSDrm %251:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !313 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:37
3984B	  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %251:fr64, debug-location !314 :: (store 8 into %ir.norm_temp1); cg.c:243:24
4016B	  %253:fr64 = MULSDrr %253:fr64(tied-def 0), %253:fr64, debug-location !320; cg.c:244:44
4048B	  %253:fr64 = ADDSDrm %253:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !321 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:37
4064B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %253:fr64, debug-location !322 :: (store 8 into %ir.norm_temp2); cg.c:244:24
4096B	  %254:gr32 = LEA64_32r %289:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !323; cg.c:242:50
4112B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %254:gr32, debug-location !323 :: (store 4 into %ir.j); cg.c:242:50
4128B	  JMP_1 %bb.21, debug-location !324; cg.c:242:9

4144B	bb.23.for.end76:
	; predecessors: %bb.21
	  successors: %bb.24(0x40000000), %bb.25(0x40000000); %bb.24(50.00%), %bb.25(50.00%)

4160B	  %0:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !327 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
4176B	  UCOMISDrr %0:fr64, %233:fr64, implicit-def $eflags, debug-location !329; cg.c:247:26
4192B	  JCC_1 %bb.25, 2, implicit killed $eflags, debug-location !329; cg.c:247:26

4208B	bb.24:
	; predecessors: %bb.23
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

4224B	  %283:fr64 = SQRTSDr %0:fr64
4256B	  JMP_1 %bb.26

4272B	bb.25.call.sqrt:
	; predecessors: %bb.23
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

4288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !329; cg.c:247:26
4304B	  $xmm0 = COPY %0:fr64, debug-location !329; cg.c:247:26
4320B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !329; cg.c:247:26
4336B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !329; cg.c:247:26
4352B	  %283:fr64 = COPY killed $xmm0, debug-location !329; cg.c:247:26

4400B	bb.26.for.end76.split:
	; predecessors: %bb.25, %bb.24
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4432B	  %236:fr64 = COPY %235:fr64, debug-location !329; cg.c:247:26
4448B	  %236:fr64 = DIVSDrr %236:fr64(tied-def 0), %283:fr64, debug-location !329; cg.c:247:26
4464B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %236:fr64, debug-location !330 :: (store 8 into %ir.norm_temp2); cg.c:247:20
4480B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !331 :: (store 4 into %ir.j); cg.c:252:16

4496B	bb.27.for.cond78:
	; predecessors: %bb.26, %bb.28
	  successors: %bb.28(0x7c000000), %bb.29(0x04000000); %bb.28(96.88%), %bb.29(3.12%)

4512B	  %240:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !336 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
4544B	  %240:gr32 = nsw SUB32rm %240:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !338 :: (dereferenceable load 4 from @firstcol); cg.c:252:33
4576B	  %240:gr32 = nsw INC32r %240:gr32(tied-def 0), implicit-def dead $eflags, debug-location !339; cg.c:252:44
4592B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %240:gr32, implicit-def $eflags, debug-location !340 :: (dereferenceable load 4 from %ir.j); cg.c:252:23
4608B	  JCC_1 %bb.29, 13, implicit killed $eflags, debug-location !341; cg.c:252:9
4624B	  JMP_1 %bb.28, debug-location !341; cg.c:252:9

4640B	bb.28.for.body82:
	; predecessors: %bb.27
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4656B	  %245:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !342 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
4672B	  %290:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !344 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
4720B	  %245:fr64 = MULSDrm %245:fr64(tied-def 0), $noreg, 8, %290:gr64_nosp, @z, $noreg, debug-location !346 :: (load 8 from %ir.arrayidx84); cg.c:253:31
4736B	  MOVSDmr $noreg, 8, %290:gr64_nosp, @x, $noreg, %245:fr64, debug-location !349 :: (store 8 into %ir.arrayidx87); cg.c:253:18
4768B	  %246:gr32 = LEA64_32r %290:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !350; cg.c:252:50
4784B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %246:gr32, debug-location !350 :: (store 4 into %ir.j); cg.c:252:50
4800B	  JMP_1 %bb.27, debug-location !351; cg.c:252:9

4816B	bb.29.for.end90:
	; predecessors: %bb.27
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

4832B	  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !354 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:228:29
4848B	  JMP_1 %bb.19, debug-location !355; cg.c:228:5

4864B	bb.30.for.end93:
	; predecessors: %bb.19
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

4880B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !358 :: (store 4 into %ir.i); cg.c:260:12

4896B	bb.31.for.cond94:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

4912B	  CMP32mi %stack.3.i, 1, $noreg, 0, $noreg, 75000, implicit-def $eflags, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:19
4928B	  JCC_1 %bb.33, 15, implicit killed $eflags, debug-location !364; cg.c:260:5
4944B	  JMP_1 %bb.32, debug-location !364; cg.c:260:5

4960B	bb.32.for.body96:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

4976B	  %291:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !365 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
5008B	  MOV64mr $noreg, 8, %291:gr64_nosp, @x, $noreg, %260:gr64, debug-location !368 :: (store 8 into %ir.arrayidx98); cg.c:261:14
5040B	  %219:gr32 = LEA64_32r %291:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !369; cg.c:260:30
5056B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %219:gr32, debug-location !369 :: (store 4 into %ir.i); cg.c:260:30
5072B	  JMP_1 %bb.31, debug-location !370; cg.c:260:5

5088B	bb.33.for.end101:
	; predecessors: %bb.31
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

5104B	  MOV64mi32 %stack.7.zeta, 1, $noreg, 0, $noreg, 0, debug-location !373 :: (store 8 into %ir.zeta); cg.c:264:10
5120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !374; cg.c:266:5
5152B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !374; cg.c:266:5
5168B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !374; cg.c:266:5
5184B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !374; cg.c:266:5
5200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !375; cg.c:268:55
5216B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !375; cg.c:268:55
5232B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !375; cg.c:268:55
5248B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !375; cg.c:268:55
5264B	  %62:fr64 = COPY killed $xmm0, debug-location !375; cg.c:268:55
5280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:268:5
5328B	  $rdi = MOV32ri64 @.str.9, debug-location !376; cg.c:268:5
5344B	  $xmm0 = COPY %62:fr64, debug-location !376; cg.c:268:5
5360B	  $al = MOV8ri 1, debug-location !376; cg.c:268:5
5376B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !376; cg.c:268:5
5392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !376; cg.c:268:5
5408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:270:5
5440B	  $edi = MOV32ri 1, debug-location !377; cg.c:270:5
5456B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !377; cg.c:270:5
5472B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !377; cg.c:270:5
5488B	  MOV32mi %stack.6.it, 1, $noreg, 0, $noreg, 1, debug-location !378 :: (store 4 into %ir.it); cg.c:279:13
5616B	  %180:fr64 = FsFLD0SD
5632B	  %272:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.6, $noreg :: (load 8 from constant-pool)

5696B	bb.34.for.cond108:
	; predecessors: %bb.33, %bb.50
	  successors: %bb.35(0x7c000000), %bb.51(0x04000000); %bb.35(96.88%), %bb.51(3.12%)

5712B	  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 75, implicit-def $eflags, debug-location !383 :: (dereferenceable load 4 from %ir.it); cg.c:279:21
5728B	  JCC_1 %bb.51, 15, implicit killed $eflags, debug-location !384; cg.c:279:5
5744B	  JMP_1 %bb.35, debug-location !384; cg.c:279:5

5760B	bb.35.for.body110:
	; predecessors: %bb.34
	  successors: %bb.36(0x50000000), %bb.37(0x30000000); %bb.36(62.50%), %bb.37(37.50%)

5776B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !385 :: (dereferenceable load 4 from @timeron); cg.c:284:13
5792B	  JCC_1 %bb.37, 4, implicit killed $eflags, debug-location !388; cg.c:284:13
5808B	  JMP_1 %bb.36, debug-location !388; cg.c:284:13

5824B	bb.36.if.then111:
	; predecessors: %bb.35
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

5840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !389; cg.c:285:13
5856B	  $edi = MOV32ri 2, debug-location !389; cg.c:285:13
5872B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !389; cg.c:285:13
5888B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !389; cg.c:285:13

5904B	bb.37.if.end112:
	; predecessors: %bb.35, %bb.36
	  successors: %bb.38(0x50000000), %bb.39(0x30000000); %bb.38(62.50%), %bb.39(37.50%)

5920B	  ADJCALLSTACKDOWN64 24, 0, 24, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !390; cg.c:286:9
5936B	  $rdi = MOV32ri64 @colidx, debug-location !390; cg.c:286:9
5952B	  $rsi = MOV32ri64 @rowstr, debug-location !390; cg.c:286:9
5968B	  $rdx = MOV32ri64 @x, debug-location !390; cg.c:286:9
5984B	  $rcx = MOV32ri64 @z, debug-location !390; cg.c:286:9
6000B	  $r8 = MOV32ri64 @a, debug-location !390; cg.c:286:9
6016B	  $r9 = MOV32ri64 @p, debug-location !390; cg.c:286:9
6032B	  PUSH64r %221:gr64, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
6048B	  PUSH64i32 @r, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
6064B	  PUSH64i32 @q, implicit-def $rsp, implicit $rsp, debug-location !390; cg.c:286:9
6080B	  CALL64pcrel32 @conj_grad, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit killed $rcx, implicit killed $r8, implicit killed $r9, implicit-def $rsp, implicit-def $ssp, debug-location !390; cg.c:286:9
6096B	  ADJCALLSTACKUP64 24, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !390; cg.c:286:9
6112B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !391 :: (dereferenceable load 4 from @timeron); cg.c:287:13
6128B	  JCC_1 %bb.39, 4, implicit killed $eflags, debug-location !393; cg.c:287:13
6144B	  JMP_1 %bb.38, debug-location !393; cg.c:287:13

6160B	bb.38.if.then114:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

6176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:288:13
6192B	  $edi = MOV32ri 2, debug-location !394; cg.c:288:13
6208B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !394; cg.c:288:13
6224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !394; cg.c:288:13

6240B	bb.39.if.end115:
	; predecessors: %bb.37, %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

6256B	  MOV64mi32 %stack.9.norm_temp1, 1, $noreg, 0, $noreg, 0, debug-location !395 :: (store 8 into %ir.norm_temp1); cg.c:297:20
6272B	  MOV64mi32 %stack.10.norm_temp2, 1, $noreg, 0, $noreg, 0, debug-location !396 :: (store 8 into %ir.norm_temp2); cg.c:298:20
6288B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.j); cg.c:299:16

6304B	bb.40.for.cond116:
	; predecessors: %bb.39, %bb.41
	  successors: %bb.41(0x7c000000), %bb.42(0x04000000); %bb.41(96.88%), %bb.42(3.12%)

6320B	  %178:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !402 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
6352B	  %178:gr32 = nsw SUB32rm %178:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !404 :: (dereferenceable load 4 from @firstcol); cg.c:299:33
6384B	  %178:gr32 = nsw INC32r %178:gr32(tied-def 0), implicit-def dead $eflags, debug-location !405; cg.c:299:44
6400B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %178:gr32, implicit-def $eflags, debug-location !406 :: (dereferenceable load 4 from %ir.j); cg.c:299:23
6416B	  JCC_1 %bb.42, 13, implicit killed $eflags, debug-location !407; cg.c:299:9
6432B	  JMP_1 %bb.41, debug-location !407; cg.c:299:9

6448B	bb.41.for.body120:
	; predecessors: %bb.40
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

6464B	  %293:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !410 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
6496B	  %214:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @z, $noreg, debug-location !419 :: (load 8 from %ir.arrayidx130); cg.c:301:39
6512B	  %212:fr64 = MOVSDrm_alt $noreg, 8, %293:gr64_nosp, @x, $noreg :: (load 8 from %ir.arrayidx122)
6544B	  %212:fr64 = MULSDrr %212:fr64(tied-def 0), %214:fr64, debug-location !414; cg.c:300:44
6576B	  %212:fr64 = ADDSDrm %212:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !415 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:37
6592B	  MOVSDmr %stack.9.norm_temp1, 1, $noreg, 0, $noreg, %212:fr64, debug-location !416 :: (store 8 into %ir.norm_temp1); cg.c:300:24
6624B	  %214:fr64 = MULSDrr %214:fr64(tied-def 0), %214:fr64, debug-location !422; cg.c:301:44
6656B	  %214:fr64 = ADDSDrm %214:fr64(tied-def 0), %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !423 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:37
6672B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %214:fr64, debug-location !424 :: (store 8 into %ir.norm_temp2); cg.c:301:24
6704B	  %215:gr32 = LEA64_32r %293:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !425; cg.c:299:50
6720B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %215:gr32, debug-location !425 :: (store 4 into %ir.j); cg.c:299:50
6736B	  JMP_1 %bb.40, debug-location !426; cg.c:299:9

6752B	bb.42.for.end135:
	; predecessors: %bb.40
	  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

6768B	  %4:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !429 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
6784B	  UCOMISDrr %4:fr64, %180:fr64, implicit-def $eflags, debug-location !431; cg.c:304:26
6800B	  JCC_1 %bb.44, 2, implicit killed $eflags, debug-location !431; cg.c:304:26

6816B	bb.43:
	; predecessors: %bb.42
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

6832B	  %284:fr64 = SQRTSDr %4:fr64
6864B	  JMP_1 %bb.45

6880B	bb.44.call.sqrt1:
	; predecessors: %bb.42
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

6896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !431; cg.c:304:26
6912B	  $xmm0 = COPY %4:fr64, debug-location !431; cg.c:304:26
6928B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !431; cg.c:304:26
6944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !431; cg.c:304:26
6960B	  %284:fr64 = COPY killed $xmm0, debug-location !431; cg.c:304:26

7008B	bb.45.for.end135.split:
	; predecessors: %bb.44, %bb.43
	  successors: %bb.46(0x40000000), %bb.47(0x40000000); %bb.46(50.00%), %bb.47(50.00%)

7040B	  %183:fr64 = COPY %235:fr64, debug-location !431; cg.c:304:26
7056B	  %183:fr64 = DIVSDrr %183:fr64(tied-def 0), %284:fr64, debug-location !431; cg.c:304:26
7072B	  MOVSDmr %stack.10.norm_temp2, 1, $noreg, 0, $noreg, %183:fr64, debug-location !432 :: (store 8 into %ir.norm_temp2); cg.c:304:20
7088B	  %185:fr64 = COPY %235:fr64, debug-location !434; cg.c:306:28
7104B	  %185:fr64 = DIVSDrm %185:fr64(tied-def 0), %stack.9.norm_temp1, 1, $noreg, 0, $noreg, debug-location !434 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:28
7136B	  %185:fr64 = ADDSDrr %185:fr64(tied-def 0), %272:fr64, debug-location !435; cg.c:306:22
7152B	  MOVSDmr %stack.7.zeta, 1, $noreg, 0, $noreg, %185:fr64, debug-location !436 :: (store 8 into %ir.zeta); cg.c:306:14
7168B	  CMP32mi8 %stack.6.it, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !439 :: (dereferenceable load 4 from %ir.it); cg.c:307:16
7184B	  JCC_1 %bb.47, 5, implicit killed $eflags, debug-location !440; cg.c:307:13
7200B	  JMP_1 %bb.46, debug-location !440; cg.c:307:13

7216B	bb.46.if.then141:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

7232B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; cg.c:308:13
7264B	  $rdi = MOV32ri64 @.str.10, debug-location !441; cg.c:308:13
7280B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !441; cg.c:308:13
7296B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !441; cg.c:308:13
7312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !441; cg.c:308:13

7328B	bb.47.if.end143:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

7344B	  %192:gr32 = MOV32rm %stack.6.it, 1, $noreg, 0, $noreg, debug-location !442 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
7360B	  %193:fr64 = MOVSDrm_alt %stack.8.rnorm, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
7376B	  %194:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !444 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
7392B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !445; cg.c:309:9
7408B	  $rdi = MOV32ri64 @.str.11, debug-location !445; cg.c:309:9
7424B	  $esi = COPY %192:gr32, debug-location !445; cg.c:309:9
7440B	  $xmm0 = COPY %193:fr64, debug-location !445; cg.c:309:9
7456B	  $xmm1 = COPY %194:fr64, debug-location !445; cg.c:309:9
7472B	  $al = MOV8ri 2, debug-location !445; cg.c:309:9
7488B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !445; cg.c:309:9
7504B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !445; cg.c:309:9
7520B	  MOV32mi %stack.4.j, 1, $noreg, 0, $noreg, 0, debug-location !446 :: (store 4 into %ir.j); cg.c:314:16

7536B	bb.48.for.cond145:
	; predecessors: %bb.47, %bb.49
	  successors: %bb.49(0x7c000000), %bb.50(0x04000000); %bb.49(96.88%), %bb.50(3.12%)

7552B	  %201:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !451 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
7584B	  %201:gr32 = nsw SUB32rm %201:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !453 :: (dereferenceable load 4 from @firstcol); cg.c:314:33
7616B	  %201:gr32 = nsw INC32r %201:gr32(tied-def 0), implicit-def dead $eflags, debug-location !454; cg.c:314:44
7632B	  CMP32mr %stack.4.j, 1, $noreg, 0, $noreg, %201:gr32, implicit-def $eflags, debug-location !455 :: (dereferenceable load 4 from %ir.j); cg.c:314:23
7648B	  JCC_1 %bb.50, 13, implicit killed $eflags, debug-location !456; cg.c:314:9
7664B	  JMP_1 %bb.49, debug-location !456; cg.c:314:9

7680B	bb.49.for.body149:
	; predecessors: %bb.48
	  successors: %bb.48(0x80000000); %bb.48(100.00%)

7696B	  %206:fr64 = MOVSDrm_alt %stack.10.norm_temp2, 1, $noreg, 0, $noreg, debug-location !457 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
7712B	  %295:gr64_nosp = MOVSX64rm32 %stack.4.j, 1, $noreg, 0, $noreg, debug-location !459 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
7760B	  %206:fr64 = MULSDrm %206:fr64(tied-def 0), $noreg, 8, %295:gr64_nosp, @z, $noreg, debug-location !461 :: (load 8 from %ir.arrayidx151); cg.c:315:31
7776B	  MOVSDmr $noreg, 8, %295:gr64_nosp, @x, $noreg, %206:fr64, debug-location !464 :: (store 8 into %ir.arrayidx154); cg.c:315:18
7808B	  %207:gr32 = LEA64_32r %295:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !465; cg.c:314:50
7824B	  MOV32mr %stack.4.j, 1, $noreg, 0, $noreg, %207:gr32, debug-location !465 :: (store 4 into %ir.j); cg.c:314:50
7840B	  JMP_1 %bb.48, debug-location !466; cg.c:314:9

7856B	bb.50.for.end157:
	; predecessors: %bb.48
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

7872B	  INC32m %stack.6.it, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !469 :: (store 4 into %ir.it), (dereferenceable load 4 from %ir.it); cg.c:279:33
7888B	  JMP_1 %bb.34, debug-location !470; cg.c:279:5

7904B	bb.51.for.end160:
	; predecessors: %bb.34
	  successors: %bb.52(0x40000000), %bb.55(0x40000000); %bb.52(50.00%), %bb.55(50.00%)

7920B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !473; cg.c:321:5
7952B	  $edi = MOV32ri 1, debug-location !473; cg.c:321:5
7968B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !473; cg.c:321:5
7984B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !473; cg.c:321:5
8000B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !474; cg.c:327:9
8016B	  $edi = MOV32ri 1, debug-location !474; cg.c:327:9
8032B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !474; cg.c:327:9
8048B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !474; cg.c:327:9
8064B	  %70:fr64 = COPY killed $xmm0, debug-location !474; cg.c:327:9
8080B	  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %70:fr64, debug-location !475 :: (store 8 into %ir.t); cg.c:327:7
8096B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:329:5
8160B	  $rdi = MOV32ri64 @.str.12, debug-location !476; cg.c:329:5
8176B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !476; cg.c:329:5
8192B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !476; cg.c:329:5
8208B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !476; cg.c:329:5
8224B	  %75:gr64 = MOV64ri 4457293557087583675
8240B	  MOV64mr %stack.17.epsilon, 1, $noreg, 0, $noreg, %75:gr64, debug-location !477 :: (store 8 into %ir.epsilon); cg.c:331:13
8256B	  CMP8mi %stack.14.Class, 1, $noreg, 0, $noreg, 85, implicit-def $eflags, debug-location !480 :: (dereferenceable load 1 from %ir.Class); cg.c:332:15
8272B	  JCC_1 %bb.55, 4, implicit killed $eflags, debug-location !481; cg.c:332:9
8288B	  JMP_1 %bb.52, debug-location !481; cg.c:332:9

8304B	bb.52.if.then169:
	; predecessors: %bb.51
	  successors: %bb.53(0x40000000), %bb.54(0x40000000); %bb.53(50.00%), %bb.54(50.00%)

8320B	  %88:vr128 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
8336B	  %85:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
8368B	  %88:vr128 = SUBSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !485; cg.c:333:25
8400B	  %88:vr128 = PANDrm %88:vr128(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, debug-location !486 :: (load 16 from constant-pool); cg.c:333:15
8432B	  %88:vr128 = DIVSDrr %88:vr128(tied-def 0), %85:fr64, debug-location !488; cg.c:333:46
8448B	  MOVSDmr %stack.18.err, 1, $noreg, 0, $noreg, %88:vr128, debug-location !489 :: (store 8 into %ir.err); cg.c:333:13
8464B	  %91:fr64 = MOVSDrm_alt %stack.17.epsilon, 1, $noreg, 0, $noreg, debug-location !492 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
8480B	  UCOMISDrr %91:fr64, %88:vr128, implicit-def $eflags, debug-location !493; cg.c:334:17
8496B	  JCC_1 %bb.54, 2, implicit killed $eflags, debug-location !494; cg.c:334:13
8512B	  JMP_1 %bb.53, debug-location !494; cg.c:334:13

8528B	bb.53.if.then174:
	; predecessors: %bb.52
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

8544B	  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 1, debug-location !495 :: (store 4 into %ir.verified); cg.c:335:22
8560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !497; cg.c:336:13
8624B	  $rdi = MOV32ri64 @.str.13, debug-location !497; cg.c:336:13
8640B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !497; cg.c:336:13
8656B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !497; cg.c:336:13
8672B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !497; cg.c:336:13
8688B	  %107:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
8704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !499; cg.c:337:13
8752B	  $rdi = MOV32ri64 @.str.14, debug-location !499; cg.c:337:13
8768B	  $xmm0 = COPY %107:fr64, debug-location !499; cg.c:337:13
8784B	  $al = MOV8ri 1, debug-location !499; cg.c:337:13
8800B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !499; cg.c:337:13
8816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !499; cg.c:337:13
8832B	  %111:fr64 = MOVSDrm_alt %stack.18.err, 1, $noreg, 0, $noreg, debug-location !500 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
8848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:338:13
8880B	  $rdi = MOV32ri64 @.str.15, debug-location !501; cg.c:338:13
8896B	  $xmm0 = COPY %111:fr64, debug-location !501; cg.c:338:13
8912B	  $al = MOV8ri 1, debug-location !501; cg.c:338:13
8928B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !501; cg.c:338:13
8944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !501; cg.c:338:13
8960B	  JMP_1 %bb.56, debug-location !502; cg.c:339:9

8976B	bb.54.if.else178:
	; predecessors: %bb.52
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

8992B	  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !503 :: (store 4 into %ir.verified); cg.c:341:22
9008B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:342:13
9072B	  $rdi = MOV32ri64 @.str.16, debug-location !505; cg.c:342:13
9088B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !505; cg.c:342:13
9104B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !505; cg.c:342:13
9120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !505; cg.c:342:13
9136B	  %96:fr64 = MOVSDrm_alt %stack.7.zeta, 1, $noreg, 0, $noreg, debug-location !506 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
9152B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !507; cg.c:343:13
9200B	  $rdi = MOV32ri64 @.str.17, debug-location !507; cg.c:343:13
9216B	  $xmm0 = COPY %96:fr64, debug-location !507; cg.c:343:13
9232B	  $al = MOV8ri 1, debug-location !507; cg.c:343:13
9248B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !507; cg.c:343:13
9264B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !507; cg.c:343:13
9280B	  %100:fr64 = MOVSDrm_alt %stack.16.zeta_verify_value, 1, $noreg, 0, $noreg, debug-location !508 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
9296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:344:13
9328B	  $rdi = MOV32ri64 @.str.18, debug-location !509; cg.c:344:13
9344B	  $xmm0 = COPY %100:fr64, debug-location !509; cg.c:344:13
9360B	  $al = MOV8ri 1, debug-location !509; cg.c:344:13
9376B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !509; cg.c:344:13
9392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !509; cg.c:344:13
9408B	  JMP_1 %bb.56

9424B	bb.55.if.else183:
	; predecessors: %bb.51
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

9440B	  MOV32mi %stack.15.verified, 1, $noreg, 0, $noreg, 0, debug-location !510 :: (store 4 into %ir.verified); cg.c:348:18
9456B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:349:9
9520B	  $rdi = MOV32ri64 @.str.19, debug-location !512; cg.c:349:9
9536B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !512; cg.c:349:9
9552B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !512; cg.c:349:9
9568B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !512; cg.c:349:9
9584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !513; cg.c:350:9
9616B	  $rdi = MOV32ri64 @.str.20, debug-location !513; cg.c:350:9
9632B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !513; cg.c:350:9
9648B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !513; cg.c:350:9
9664B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !513; cg.c:350:9

9680B	bb.56.if.end186:
	; predecessors: %bb.55, %bb.54, %bb.53
	  successors: %bb.57(0x50000000), %bb.58(0x30000000); %bb.57(62.50%), %bb.58(37.50%)

9696B	  %114:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
9712B	  %115:fr64 = FsFLD0SD
9728B	  UCOMISDrr %114:fr64, %115:fr64, implicit-def $eflags, debug-location !517; cg.c:353:9
9744B	  JCC_1 %bb.57, 5, implicit $eflags, debug-location !517; cg.c:353:9
9760B	  JCC_1 %bb.57, 10, implicit killed $eflags, debug-location !517; cg.c:353:9
9776B	  JMP_1 %bb.58, debug-location !517; cg.c:353:9

9792B	bb.57.if.then189:
	; predecessors: %bb.56
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

9808B	  %118:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
9840B	  %118:fr64 = DIVSDrm %118:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !520 :: (dereferenceable load 8 from %ir.t); cg.c:356:73
9872B	  %118:fr64 = DIVSDrm %118:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !521 :: (load 8 from constant-pool); cg.c:357:20
9888B	  MOVSDmr %stack.12.mflops, 1, $noreg, 0, $noreg, %118:fr64, debug-location !522 :: (store 8 into %ir.mflops); cg.c:354:16
9904B	  JMP_1 %bb.59, debug-location !523; cg.c:358:5

9920B	bb.58.if.else192:
	; predecessors: %bb.56
	  successors: %bb.59(0x80000000); %bb.59(100.00%)

9936B	  MOV64mi32 %stack.12.mflops, 1, $noreg, 0, $noreg, 0, debug-location !524 :: (store 8 into %ir.mflops); cg.c:360:16

9952B	bb.59.if.end193:
	; predecessors: %bb.58, %bb.57
	  successors: %bb.60(0x50000000), %bb.69(0x30000000); %bb.60(62.50%), %bb.69(37.50%)

9968B	  %119:gr32 = MOVSX32rm8 %stack.14.Class, 1, $noreg, 0, $noreg, debug-location !526 :: (dereferenceable load 1 from %ir.Class); cg.c:363:25
9984B	  %120:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !527 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
10000B	  %121:fr64 = MOVSDrm_alt %stack.12.mflops, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
10016B	  undef %282.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.15.verified, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
10032B	  ADJCALLSTACKDOWN64 88, 0, 88, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !530; cg.c:363:5
10112B	  $rdi = MOV32ri64 @.str.21, debug-location !530; cg.c:363:5
10128B	  $esi = COPY %119:gr32, debug-location !530; cg.c:363:5
10144B	  $edx = MOV32ri 75000, debug-location !530; cg.c:363:5
10160B	  $ecx = MOV32ri 0, debug-location !530; cg.c:363:5
10176B	  $r8d = MOV32ri 0, debug-location !530; cg.c:363:5
10192B	  $r9d = MOV32ri 75, debug-location !530; cg.c:363:5
10208B	  $xmm0 = COPY %120:fr64, debug-location !530; cg.c:363:5
10224B	  $xmm1 = COPY %121:fr64, debug-location !530; cg.c:363:5
10240B	  PUSH64i32 @.str.31, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10256B	  PUSH64i32 @.str.30, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10272B	  PUSH64i32 @.str.29, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10288B	  PUSH64i32 @.str.28, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10304B	  PUSH64i32 @.str.27, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10320B	  PUSH64i32 @.str.26, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10336B	  PUSH64i32 @.str.25, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10352B	  PUSH64i32 @.str.24, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10368B	  PUSH64i32 @.str.23, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10400B	  PUSH64r %282:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10416B	  PUSH64i32 @.str.22, implicit-def $rsp, implicit $rsp, debug-location !530; cg.c:363:5
10432B	  CALL64pcrel32 @print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !530; cg.c:363:5
10448B	  ADJCALLSTACKUP64 88, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !530; cg.c:363:5
10464B	  CMP32mi8 $rip, 1, $noreg, @timeron, $noreg, 0, implicit-def $eflags, debug-location !531 :: (dereferenceable load 4 from @timeron); cg.c:370:9
10480B	  JCC_1 %bb.69, 4, implicit killed $eflags, debug-location !533; cg.c:370:9
10496B	  JMP_1 %bb.60, debug-location !533; cg.c:370:9

10512B	bb.60.if.then195:
	; predecessors: %bb.59
	  successors: %bb.61(0x50000000), %bb.62(0x30000000); %bb.61(62.50%), %bb.62(37.50%)

10528B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:371:16
10560B	  $edi = MOV32ri 1, debug-location !534; cg.c:371:16
10576B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !534; cg.c:371:16
10592B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !534; cg.c:371:16
10608B	  %129:fr64 = COPY killed $xmm0, debug-location !534; cg.c:371:16
10624B	  MOVSDmr %stack.13.tmax, 1, $noreg, 0, $noreg, %129:fr64, debug-location !536 :: (store 8 into %ir.tmax); cg.c:371:14
10640B	  %130:fr64 = FsFLD0SD
10656B	  UCOMISDrr %129:fr64, %130:fr64, implicit-def $eflags, debug-location !540; cg.c:372:13
10672B	  JCC_1 %bb.62, 5, implicit $eflags, debug-location !540; cg.c:372:13
10688B	  JCC_1 %bb.62, 10, implicit killed $eflags, debug-location !540; cg.c:372:13
10704B	  JMP_1 %bb.61, debug-location !540; cg.c:372:13

10720B	bb.61.if.then199:
	; predecessors: %bb.60
	  successors: %bb.62(0x80000000); %bb.62(100.00%)

10736B	  MOV64mr %stack.13.tmax, 1, $noreg, 0, $noreg, %260:gr64, debug-location !541 :: (store 8 into %ir.tmax); cg.c:373:18

10752B	bb.62.if.end200:
	; predecessors: %bb.60, %bb.61
	  successors: %bb.63(0x80000000); %bb.63(100.00%)

10768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !543; cg.c:374:9
10832B	  $rdi = MOV32ri64 @.str.32, debug-location !543; cg.c:374:9
10848B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !543; cg.c:374:9
10864B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !543; cg.c:374:9
10880B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !543; cg.c:374:9
10896B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !544 :: (store 4 into %ir.i); cg.c:375:16
10944B	  %273:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)

11024B	bb.63.for.cond202:
	; predecessors: %bb.62, %bb.68
	  successors: %bb.64(0x7c000000), %bb.69(0x04000000); %bb.64(96.88%), %bb.69(3.12%)

11040B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.i); cg.c:375:23
11056B	  JCC_1 %bb.69, 15, implicit killed $eflags, debug-location !550; cg.c:375:9
11072B	  JMP_1 %bb.64, debug-location !550; cg.c:375:9

11088B	bb.64.for.body205:
	; predecessors: %bb.63
	  successors: %bb.65(0x30000000), %bb.66(0x50000000); %bb.65(37.50%), %bb.66(62.50%)

11104B	  %139:gr32 = MOV32rm %stack.3.i, 1, $noreg, 0, $noreg, debug-location !551 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
11120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !553; cg.c:376:17
11136B	  $edi = COPY %139:gr32, debug-location !553; cg.c:376:17
11152B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !553; cg.c:376:17
11168B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !553; cg.c:376:17
11184B	  %140:fr64 = COPY killed $xmm0, debug-location !553; cg.c:376:17
11200B	  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %140:fr64, debug-location !554 :: (store 8 into %ir.t); cg.c:376:15
11216B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !557 :: (dereferenceable load 4 from %ir.i); cg.c:377:19
11232B	  JCC_1 %bb.66, 5, implicit killed $eflags, debug-location !558; cg.c:377:17
11248B	  JMP_1 %bb.65, debug-location !558; cg.c:377:17

11264B	bb.65.if.then209:
	; predecessors: %bb.64
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

11280B	  %159:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !559 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
11296B	  %160:gr64 = MOV64rm %stack.19.t_names, 8, %159:gr64_nosp, 0, $noreg, debug-location !561 :: (load 8 from %ir.arrayidx211); cg.c:378:41
11312B	  %161:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !562 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
11328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !563; cg.c:378:17
11344B	  $rdi = MOV32ri64 @.str.33, debug-location !563; cg.c:378:17
11360B	  $rsi = COPY %160:gr64, debug-location !563; cg.c:378:17
11376B	  $xmm0 = COPY %161:fr64, debug-location !563; cg.c:378:17
11392B	  $al = MOV8ri 1, debug-location !563; cg.c:378:17
11408B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !563; cg.c:378:17
11424B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !563; cg.c:378:17
11440B	  JMP_1 %bb.68, debug-location !564; cg.c:379:13

11456B	bb.66.if.else213:
	; predecessors: %bb.64
	  successors: %bb.67(0x40000000), %bb.68(0x40000000); %bb.67(50.00%), %bb.68(50.00%)

11472B	  %141:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !565 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
11488B	  %142:gr64 = MOV64rm %stack.19.t_names, 8, %141:gr64_nosp, 0, $noreg, debug-location !567 :: (load 8 from %ir.arrayidx215); cg.c:381:52
11504B	  %143:fr64 = MOVSDrm_alt %stack.11.t, 1, $noreg, 0, $noreg, debug-location !568 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
11520B	  %145:fr64 = COPY %143:fr64, debug-location !570; cg.c:382:26
11536B	  %145:fr64 = MULSDrr %145:fr64(tied-def 0), %273:fr64, debug-location !570; cg.c:382:26
11568B	  %145:fr64 = DIVSDrm %145:fr64(tied-def 0), %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:34
11584B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; cg.c:381:17
11600B	  $rdi = MOV32ri64 @.str.34, debug-location !573; cg.c:381:17
11616B	  $rsi = COPY %142:gr64, debug-location !573; cg.c:381:17
11632B	  $xmm0 = COPY %143:fr64, debug-location !573; cg.c:381:17
11648B	  $xmm1 = COPY %145:fr64, debug-location !573; cg.c:381:17
11664B	  $al = MOV8ri 2, debug-location !573; cg.c:381:17
11680B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; cg.c:381:17
11696B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; cg.c:381:17
11712B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !576 :: (dereferenceable load 4 from %ir.i); cg.c:383:23
11728B	  JCC_1 %bb.68, 5, implicit killed $eflags, debug-location !577; cg.c:383:21
11744B	  JMP_1 %bb.67, debug-location !577; cg.c:383:21

11760B	bb.67.if.then221:
	; predecessors: %bb.66
	  successors: %bb.68(0x80000000); %bb.68(100.00%)

11776B	  %151:fr64 = MOVSDrm_alt %stack.13.tmax, 1, $noreg, 0, $noreg, debug-location !578 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
11792B	  %152:fr64 = COPY %151:fr64, debug-location !581; cg.c:384:30
11808B	  %152:fr64 = SUBSDrm %152:fr64(tied-def 0), %stack.11.t, 1, $noreg, 0, $noreg, debug-location !581 :: (dereferenceable load 8 from %ir.t); cg.c:384:30
11824B	  MOVSDmr %stack.11.t, 1, $noreg, 0, $noreg, %152:fr64, debug-location !582 :: (store 8 into %ir.t); cg.c:384:23
11840B	  %154:fr64 = COPY %152:fr64, debug-location !585; cg.c:386:30
11856B	  %154:fr64 = MULSDrr %154:fr64(tied-def 0), %273:fr64, debug-location !585; cg.c:386:30
11888B	  %154:fr64 = DIVSDrr %154:fr64(tied-def 0), %151:fr64, debug-location !587; cg.c:386:38
11904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !588; cg.c:385:21
11920B	  $rdi = MOV32ri64 @.str.35, debug-location !588; cg.c:385:21
11936B	  $rsi = MOV32ri64 @.str.36, debug-location !588; cg.c:385:21
11952B	  $xmm0 = COPY %152:fr64, debug-location !588; cg.c:385:21
11968B	  $xmm1 = COPY %154:fr64, debug-location !588; cg.c:385:21
11984B	  $al = MOV8ri 2, debug-location !588; cg.c:385:21
12000B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !588; cg.c:385:21
12016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !588; cg.c:385:21

12032B	bb.68.if.end227:
	; predecessors: %bb.66, %bb.67, %bb.65
	  successors: %bb.63(0x80000000); %bb.63(100.00%)

12048B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !590 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:375:34
12064B	  JMP_1 %bb.63, debug-location !591; cg.c:375:9

12080B	bb.69.if.end231:
	; predecessors: %bb.59, %bb.63

12112B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !594; cg.c:394:5
12128B	  RET 0, killed $eax, debug-location !594; cg.c:394:5

# End machine code for function main.

Before MISched:
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+56]
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=8, align=16, fixed, at location [SP+40]
  fi#-4: size=8, align=8, fixed, at location [SP+32]
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=56, align=16, at location [SP+8]
  fi#18: size=112, align=16, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $edi in %0, $esi in %1, $rdx in %2, $rcx in %3, $r8 in %4, $r9d in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi, $rdx, $rcx, $r8, $r9d
  %5:gr32 = COPY $r9d
  %4:gr64 = COPY $r8
  %3:gr64 = COPY $rcx
  %2:gr64 = COPY $rdx
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
  MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
  MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
  MOV32mi %stack.16.nn1, 1, $noreg, 0, $noreg, 1, debug-location !638 :: (store 4 into %ir.nn1); cg.c:609:9

bb.1.do.body:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

  %7:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !642; cg.c:611:17
  MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %7:gr32, debug-location !643 :: (store 4 into %ir.nn1); cg.c:611:13
  CMP32rm %7:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !646 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
  JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !647; cg.c:612:5
  JMP_1 %bb.2, debug-location !647; cg.c:612:5

bb.2.do.end:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !650 :: (store 4 into %ir.iouter); cg.c:617:17
  %29:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
  %30:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
  %34:gr64 = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg
  %35:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %9:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !653 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  CMP32rm %9:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !657; cg.c:617:5
  JMP_1 %bb.4, debug-location !657; cg.c:617:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  MOV32mi %stack.15.nzv, 1, $noreg, 0, $noreg, 13, debug-location !658 :: (store 4 into %ir.nzv); cg.c:618:13
  %26:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  %27:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !662 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !665; cg.c:619:9
  $edi = COPY %26:gr32, debug-location !665; cg.c:619:9
  $esi = MOV32ri 13, debug-location !665; cg.c:619:9
  $edx = COPY %27:gr32, debug-location !665; cg.c:619:9
  $rcx = COPY %29:gr64, debug-location !665; cg.c:619:9
  $r8 = COPY %30:gr64, debug-location !665; cg.c:619:9
  CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !665; cg.c:619:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !665; cg.c:619:9
  %31:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !666 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  %33:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  %33:gr32 = nsw INC32r %33:gr32(tied-def 0), implicit-def dead $eflags, debug-location !670; cg.c:620:41
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; cg.c:620:9
  $edi = COPY %31:gr32, debug-location !671; cg.c:620:9
  $rsi = COPY %29:gr64, debug-location !671; cg.c:620:9
  $rdx = COPY %30:gr64, debug-location !671; cg.c:620:9
  $rcx = COPY %34:gr64, debug-location !671; cg.c:620:9
  $r8d = COPY %33:gr32, debug-location !671; cg.c:620:9
  $xmm0 = COPY %35:fr64, debug-location !671; cg.c:620:9
  CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !671; cg.c:620:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; cg.c:620:9
  %36:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  %37:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  %38:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !674 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  MOV32mr %37:gr64, 4, %38:gr64_nosp, 0, $noreg, %36:gr32, debug-location !675 :: (store 4 into %ir.arrayidx); cg.c:621:22
  MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !676 :: (store 4 into %ir.ivelt); cg.c:623:20

bb.5.for.cond5:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %39:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  CMP32rm %39:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !682 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
  JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !683; cg.c:623:9
  JMP_1 %bb.6, debug-location !683; cg.c:623:9

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %41:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  %43:gr32 = MOV32rm %stack.17.ivc, 4, %41:gr64_nosp, 0, $noreg, debug-location !686 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags, debug-location !687; cg.c:624:46
  %44:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !689 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  %46:gr64 = IMUL64rri8 %44:gr64, 56, implicit-def dead $eflags, debug-location !688; cg.c:624:13
  %46:gr64 = ADD64rm %46:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !688 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  %47:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  %48:fr64 = MOVSDrm_alt %stack.18.vc, 8, %47:gr64_nosp, 0, $noreg, debug-location !693 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  %51:gr64 = IMUL64rri8 %49:gr64, 112, implicit-def dead $eflags, debug-location !694; cg.c:625:13
  %51:gr64 = ADD64rm %51:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !694 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !698 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  JMP_1 %bb.5, debug-location !699; cg.c:623:9

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  INC32m %stack.13.iouter, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !702 :: (store 4 into %ir.iouter), (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  JMP_1 %bb.3, debug-location !703; cg.c:617:5

bb.8.for.end22:
; predecessors: %bb.3

  %11:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !706 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  %12:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !707 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  %13:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !708 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  %14:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  %15:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  undef %55.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  undef %53.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  ADJCALLSTACKDOWN64 48, 0, 48, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !717; cg.c:633:5
  %24:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $rdi = COPY %11:gr64, debug-location !717; cg.c:633:5
  $rsi = COPY %12:gr64, debug-location !717; cg.c:633:5
  $rdx = COPY %13:gr64, debug-location !717; cg.c:633:5
  $ecx = COPY %14:gr32, debug-location !717; cg.c:633:5
  $r8d = COPY %15:gr32, debug-location !717; cg.c:633:5
  $r9d = MOV32ri 13, debug-location !717; cg.c:633:5
  $xmm0 = COPY %24:fr64, debug-location !717; cg.c:633:5
  $xmm1 = COPY %25:fr64, debug-location !717; cg.c:633:5
  PUSH64rmm %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  PUSH64r %53:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  PUSH64r %55:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  PUSH64rmm %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  PUSH64rmm %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  PUSH64rmm %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  CALL64pcrel32 @sparse, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !717; cg.c:633:5
  ADJCALLSTACKUP64 48, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !717; cg.c:633:5
  RET 0, debug-location !718; cg.c:635:1

# End machine code for function makea.

********** MI Scheduling **********
makea:%bb.0 entry
  From: %5:gr32 = COPY $r9d
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %4:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %1:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   MOV32mi %stack.16.nn1, 1, $noreg, 0, $noreg, 1, debug-location !638 :: (store 4 into %ir.nn1); cg.c:609:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mi %stack.16.nn1, 1, $noreg, 0, $noreg, 1, debug-location !638 :: (store 4 into %ir.nn1); cg.c:609:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
Bottom Pressure:
GR16=2
  LiveReg: %5
  UpdateRegP: SU(11) MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 10 9 8 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GR16=4
  LiveReg: %4
  UpdateRegP: SU(10) MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 9 8 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(9) MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 1 8 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GR16=8
  LiveReg: %2
  UpdateRegP: SU(8) MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 0 1 2 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GR16=10
  LiveReg: %1
  UpdateRegP: SU(7) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 0 1 2 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GR16=12
  LiveReg: %0
  UpdateRegP: SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 2 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 0 1 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 1 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr32 = COPY $r9d
SU(1):   %4:gr64 = COPY $r8
SU(2):   %3:gr64 = COPY $rcx
SU(3):   %2:gr64 = COPY $rdx
SU(4):   %1:gr32 = COPY $esi
SU(5):   %0:gr32 = COPY $edi
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
SU(7):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
SU(8):   MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
SU(9):   MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
SU(10):   MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
SU(11):   MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
SU(12):   MOV32mi %stack.16.nn1, 1, $noreg, 0, $noreg, 1, debug-location !638 :: (store 4 into %ir.nn1); cg.c:609:9

********** MI Scheduling **********
makea:%bb.1 do.body
  From: %7:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
    To: JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !647; cg.c:612:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %7:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%7
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %7:gr32 = ADD32rr %7:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !642; cg.c:611:17
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%7
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%7
    SU(2): Data Latency=1 Reg=%7
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %7:gr32, debug-location !643 :: (store 4 into %ir.nn1); cg.c:611:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%7
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   CMP32rm %7:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !646 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%7
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !647; cg.c:612:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
Cyclic Critical Path: 0c
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CMP32rm %7:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !646 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
  Ready @4c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %7:gr32, debug-location !643 :: (store 4 into %ir.nn1); cg.c:611:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %7:gr32 = ADD32rr %7:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !642; cg.c:611:17
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %7:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %7:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
SU(1):   %7:gr32 = ADD32rr %7:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !642; cg.c:611:17
SU(2):   MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %7:gr32, debug-location !643 :: (store 4 into %ir.nn1); cg.c:611:13
SU(3):   CMP32rm %7:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !646 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18

********** MI Scheduling **********
makea:%bb.2 do.end
  From: MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !650 :: (store 4 into %ir.iouter); cg.c:617:17
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !650 :: (store 4 into %ir.iouter); cg.c:617:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %29:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %30:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %34:gr64 = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %35:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %35:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %34:gr64 = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %30:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %29:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !650 :: (store 4 into %ir.iouter); cg.c:617:17
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !650 :: (store 4 into %ir.iouter); cg.c:617:17
SU(1):   %29:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
SU(2):   %30:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
SU(3):   %34:gr64 = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg
SU(4):   %35:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
makea:%bb.3 for.cond
  From: %9:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !653 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
    To: JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !657; cg.c:617:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !653 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%9
  Single Issue       : false;
SU(1):   CMP32rm %9:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !657; cg.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %9:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !653 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %9:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !653 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
SU(1):   CMP32rm %9:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %36:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %36:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%36
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %37:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%37
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %38:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !674 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%38
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %37:gr64, 4, %38:gr64_nosp, 0, $noreg, %36:gr32, debug-location !675 :: (store 4 into %ir.arrayidx); cg.c:621:22
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%38
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%37
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%36
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !676 :: (store 4 into %ir.ivelt); cg.c:623:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !676 :: (store 4 into %ir.ivelt); cg.c:623:20
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %37:gr64, 4, %38:gr64_nosp, 0, $noreg, %36:gr32, debug-location !675 :: (store 4 into %ir.arrayidx); cg.c:621:22
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %38:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !674 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %37:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %36:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %36:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
SU(1):   %37:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
SU(2):   %38:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !674 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
SU(3):   MOV32mr %37:gr64, 4, %38:gr64_nosp, 0, $noreg, %36:gr32, debug-location !675 :: (store 4 into %ir.arrayidx); cg.c:621:22
SU(4):   MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !676 :: (store 4 into %ir.ivelt); cg.c:623:20

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $edi = COPY %31:gr32, debug-location !671; cg.c:620:9
    To: CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !671; cg.c:620:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %31:gr32, debug-location !671; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %29:gr64, debug-location !671; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rdx = COPY %30:gr64, debug-location !671; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rcx = COPY %34:gr64, debug-location !671; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8d = COPY %33:gr32, debug-location !671; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $xmm0 = COPY %35:fr64, debug-location !671; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !671; cg.c:620:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 0 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $xmm0 = COPY %35:fr64, debug-location !671; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8d = COPY %33:gr32, debug-location !671; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = COPY %34:gr64, debug-location !671; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = COPY %30:gr64, debug-location !671; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = COPY %29:gr64, debug-location !671; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $edi = COPY %31:gr32, debug-location !671; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $edi = COPY %31:gr32, debug-location !671; cg.c:620:9
SU(1):   $rsi = COPY %29:gr64, debug-location !671; cg.c:620:9
SU(2):   $rdx = COPY %30:gr64, debug-location !671; cg.c:620:9
SU(3):   $rcx = COPY %34:gr64, debug-location !671; cg.c:620:9
SU(4):   $r8d = COPY %33:gr32, debug-location !671; cg.c:620:9
SU(5):   $xmm0 = COPY %35:fr64, debug-location !671; cg.c:620:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %31:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !666 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; cg.c:620:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !666 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %33:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%33
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %33:gr32 = nsw INC32r %33:gr32(tied-def 0), implicit-def dead $eflags, debug-location !670; cg.c:620:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%33
    SU(1): Out  Latency=0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; cg.c:620:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %33:gr32 = nsw INC32r %33:gr32(tied-def 0), implicit-def dead $eflags, debug-location !670; cg.c:620:41
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %33:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !666 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %31:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !666 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
SU(1):   %33:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
SU(2):   %33:gr32 = nsw INC32r %33:gr32(tied-def 0), implicit-def dead $eflags, debug-location !670; cg.c:620:41

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $edi = COPY %26:gr32, debug-location !665; cg.c:619:9
    To: CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !665; cg.c:619:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $edi = COPY %26:gr32, debug-location !665; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 13, debug-location !665; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %27:gr32, debug-location !665; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rcx = COPY %29:gr64, debug-location !665; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r8 = COPY %30:gr64, debug-location !665; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !665; cg.c:619:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r8 = COPY %30:gr64, debug-location !665; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = COPY %29:gr64, debug-location !665; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $edx = COPY %27:gr32, debug-location !665; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 13, debug-location !665; cg.c:619:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $edi = COPY %26:gr32, debug-location !665; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $edi = COPY %26:gr32, debug-location !665; cg.c:619:9
SU(1):   $esi = MOV32ri 13, debug-location !665; cg.c:619:9
SU(2):   $edx = COPY %27:gr32, debug-location !665; cg.c:619:9
SU(3):   $rcx = COPY %29:gr64, debug-location !665; cg.c:619:9
SU(4):   $r8 = COPY %30:gr64, debug-location !665; cg.c:619:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: MOV32mi %stack.15.nzv, 1, $noreg, 0, $noreg, 13, debug-location !658 :: (store 4 into %ir.nzv); cg.c:618:13
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !665; cg.c:619:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.15.nzv, 1, $noreg, 0, $noreg, 13, debug-location !658 :: (store 4 into %ir.nzv); cg.c:618:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %26:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %27:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !662 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !665; cg.c:619:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %27:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !662 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %26:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.15.nzv, 1, $noreg, 0, $noreg, 13, debug-location !658 :: (store 4 into %ir.nzv); cg.c:618:13
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   MOV32mi %stack.15.nzv, 1, $noreg, 0, $noreg, 13, debug-location !658 :: (store 4 into %ir.nzv); cg.c:618:13
SU(1):   %26:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
SU(2):   %27:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !662 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24

********** MI Scheduling **********
makea:%bb.5 for.cond5
  From: %39:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
    To: JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !683; cg.c:623:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %39:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   CMP32rm %39:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !682 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !683; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %39:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !682 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %39:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %39:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
SU(1):   CMP32rm %39:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !682 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31

********** MI Scheduling **********
makea:%bb.6 for.body7
  From: %41:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
    To: JMP_1 %bb.5, debug-location !699; cg.c:623:9
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %41:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(6): Data Latency=4 Reg=%41
    SU(1): Data Latency=4 Reg=%41
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %43:gr32 = MOV32rm %stack.17.ivc, 4, %41:gr64_nosp, 0, $noreg, debug-location !686 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%41
  Successors:
    SU(2): Data Latency=4 Reg=%43
    SU(2): Out  Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags, debug-location !687; cg.c:624:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 14
  Predecessors:
    SU(1): Data Latency=4 Reg=%43
    SU(1): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%43
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %44:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !689 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(4): Data Latency=4 Reg=%44
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %46:gr64 = IMUL64rri8 %44:gr64, 56, implicit-def dead $eflags, debug-location !688; cg.c:624:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(3): Data Latency=4 Reg=%44
  Successors:
    SU(5): Data Latency=1 Reg=%46
    SU(5): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %46:gr64 = ADD64rm %46:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !688 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(4): Data Latency=1 Reg=%46
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%46
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  # preds left       : 7
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(2): Data Latency=1 Reg=%43
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%46
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%41
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(7):   %47:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%47
    SU(8): Data Latency=4 Reg=%47
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %48:fr64 = MOVSDrm_alt %stack.18.vc, 8, %47:gr64_nosp, 0, $noreg, debug-location !693 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%47
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%48
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(9):   %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%49
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   %51:gr64 = IMUL64rri8 %49:gr64, 112, implicit-def dead $eflags, debug-location !694; cg.c:625:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(9): Data Latency=4 Reg=%49
  Successors:
    SU(11): Data Latency=1 Reg=%51
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %51:gr64 = ADD64rm %51:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !694 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=%51
    SU(10): Out  Latency=0
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%51
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  # preds left       : 12
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(11): Data Latency=4 Reg=%51
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%48
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%47
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(13):   INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !698 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5, debug-location !699; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !698 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(13) 19c
  BotQ.A BotLatency SU(13) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %51
  UpdateRegP: SU(12) MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %47
  UpdateRegP: SU(8) %48:fr64 = MOVSDrm_alt %stack.18.vc, 8, %47:gr64_nosp, 0, $noreg, debug-location !693 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FR32 -1    FR32X -1
  UpdateRegP: SU(12) MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to FR32 1    FR32X 1
  LiveReg: %48
  UpdateRegP: SU(12) MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 8 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %51:gr64 = ADD64rm %51:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !694 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %51
  UpdateRegP: SU(11) %51:gr64 = ADD64rm %51:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !694 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(11) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 10 
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %51:gr64 = IMUL64rri8 %49:gr64, 112, implicit-def dead $eflags, debug-location !694; cg.c:625:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %49
  UpdateRegP: SU(10) %51:gr64 = IMUL64rri8 %49:gr64, 112, implicit-def dead $eflags, debug-location !694; cg.c:625:13
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(10) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(9) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %48:fr64 = MOVSDrm_alt %stack.18.vc, 8, %47:gr64_nosp, 0, $noreg, debug-location !693 :: (load 8 from %ir.arrayidx15); cg.c:625:35
Bottom Pressure:
GR16=2
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %47:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
Bottom Pressure:

  Ready @11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
Bottom Pressure:
GR16=6
  LiveReg: %46
  UpdateRegP: SU(6) MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GR16 4
  LiveReg: %41
  UpdateRegP: SU(1) %43:gr32 = MOV32rm %stack.17.ivc, 4, %41:gr64_nosp, 0, $noreg, debug-location !686 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to GR16 -2
  UpdateRegP: SU(6) MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GR16 2
  LiveReg: %43
  UpdateRegP: SU(6) MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to 
  Ready @13c
  BotQ.A BotLatency SU(6) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %46:gr64 = ADD64rm %46:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !688 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
Bottom Pressure:
GR16=6
  LiveReg: %46
  UpdateRegP: SU(5) %46:gr64 = ADD64rm %46:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !688 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
              to GR16 -2
  Ready @17c
  BotQ.A BotLatency SU(5) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %46:gr64 = IMUL64rri8 %44:gr64, 56, implicit-def dead $eflags, debug-location !688; cg.c:624:13
Bottom Pressure:
GR16=6
  LiveReg: %44
  UpdateRegP: SU(4) %46:gr64 = IMUL64rri8 %44:gr64, 56, implicit-def dead $eflags, debug-location !688; cg.c:624:13
              to GR16 -2
  Ready @18c
  BotQ.A BotLatency SU(4) 18c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %44:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !689 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
Bottom Pressure:
GR16=4
  Ready @22c
  BotQ.A BotLatency SU(3) 22c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags, debug-location !687; cg.c:624:46
Bottom Pressure:
GR16=4
  LiveReg: %43
  UpdateRegP: SU(2) %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags, debug-location !687; cg.c:624:46
              to GR16 -2
  Ready @14c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %43:gr32 = MOV32rm %stack.17.ivc, 4, %41:gr64_nosp, 0, $noreg, debug-location !686 :: (load 4 from %ir.arrayidx9); cg.c:624:35
Bottom Pressure:
GR16=2
  Ready @18c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %41:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
Bottom Pressure:

  Ready @22c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %41:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
SU(1):   %43:gr32 = MOV32rm %stack.17.ivc, 4, %41:gr64_nosp, 0, $noreg, debug-location !686 :: (load 4 from %ir.arrayidx9); cg.c:624:35
SU(2):   %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags, debug-location !687; cg.c:624:46
SU(3):   %44:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !689 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
SU(4):   %46:gr64 = IMUL64rri8 %44:gr64, 56, implicit-def dead $eflags, debug-location !688; cg.c:624:13
SU(5):   %46:gr64 = ADD64rm %46:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !688 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
SU(6):   MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
SU(7):   %47:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
SU(8):   %48:fr64 = MOVSDrm_alt %stack.18.vc, 8, %47:gr64_nosp, 0, $noreg, debug-location !693 :: (load 8 from %ir.arrayidx15); cg.c:625:35
SU(9):   %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
SU(10):   %51:gr64 = IMUL64rri8 %49:gr64, 112, implicit-def dead $eflags, debug-location !694; cg.c:625:13
SU(11):   %51:gr64 = ADD64rm %51:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !694 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
SU(12):   MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
SU(13):   INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !698 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: %24:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: PUSH64rmm %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=10
Live In: %15 %14 %13 %12 %11 
Live Out: XMM1 XMM0 R9B R9BH R9WH R8B R8BH R8WH CH CL HCX DH DL HDX SIL SIH HSI DIL DIH HDI 
Live Thru: 
Top Pressure:
GR16=10
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Excess PSets: 
SU(0):   %24:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%24
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%25
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(2):   $rdi = COPY %11:gr64, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(3):   $rsi = COPY %12:gr64, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(4):   $rdx = COPY %13:gr64, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
SU(5):   $ecx = COPY %14:gr32, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Single Issue       : false;
SU(6):   $r8d = COPY %15:gr32, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 1
  Single Issue       : false;
SU(7):   $r9d = MOV32ri 13, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Single Issue       : false;
SU(8):   $xmm0 = COPY %24:fr64, debug-location !717; cg.c:633:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%24
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   $xmm1 = COPY %25:fr64, debug-location !717; cg.c:633:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%25
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   PUSH64rmm %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 7 6 5 4 3 2 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) $xmm1 = COPY %25:fr64, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %25
  UpdateRegP: SU(9) $xmm1 = COPY %25:fr64, debug-location !717; cg.c:633:5
              to FR32 -1    FR32X -1
  Ready @0c
  BotQ.A TopLatency SU(9) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 7 6 5 4 3 1 
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) $xmm0 = COPY %24:fr64, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  LiveReg: %24
  UpdateRegP: SU(8) $xmm0 = COPY %24:fr64, debug-location !717; cg.c:633:5
              to FR32 -1    FR32X -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 7 6 5 4 3 0 
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $r9d = MOV32ri 13, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=7
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 6 5 4 3 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) $r8d = COPY %15:gr32, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=8
  LiveReg: %15
  UpdateRegP: SU(6) $r8d = COPY %15:gr32, debug-location !717; cg.c:633:5
              to GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 5 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $ecx = COPY %14:gr32, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %14
  UpdateRegP: SU(5) $ecx = COPY %14:gr32, debug-location !717; cg.c:633:5
              to GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $rdx = COPY %13:gr64, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %13
  UpdateRegP: SU(4) $rdx = COPY %13:gr64, debug-location !717; cg.c:633:5
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rsi = COPY %12:gr64, debug-location !717; cg.c:633:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=9
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  LiveReg: %12
  UpdateRegP: SU(3) $rsi = COPY %12:gr64, debug-location !717; cg.c:633:5
              to GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $rdi = COPY %11:gr64, debug-location !717; cg.c:633:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  LiveReg: %11
  UpdateRegP: SU(2) $rdi = COPY %11:gr64, debug-location !717; cg.c:633:5
              to GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR16 -1
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %24:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:
GR16=10
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %24:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $rdi = COPY %11:gr64, debug-location !717; cg.c:633:5
SU(3):   $rsi = COPY %12:gr64, debug-location !717; cg.c:633:5
SU(4):   $rdx = COPY %13:gr64, debug-location !717; cg.c:633:5
SU(5):   $ecx = COPY %14:gr32, debug-location !717; cg.c:633:5
SU(6):   $r8d = COPY %15:gr32, debug-location !717; cg.c:633:5
SU(7):   $r9d = MOV32ri 13, debug-location !717; cg.c:633:5
SU(8):   $xmm0 = COPY %24:fr64, debug-location !717; cg.c:633:5
SU(9):   $xmm1 = COPY %25:fr64, debug-location !717; cg.c:633:5

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: %11:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !706 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
    To: ADJCALLSTACKDOWN64 48, 0, 48, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !717; cg.c:633:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %11:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !706 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %12:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !707 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %13:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !708 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %14:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %15:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(5):   undef %55.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(6):   undef %53.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 48, 0, 48, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !717; cg.c:633:5
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) undef %53.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) undef %55.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %15:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %14:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %13:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !708 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %12:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !707 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  Ready @3c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !706 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  Ready @3c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %11:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !706 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
SU(1):   %12:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !707 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
SU(2):   %13:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !708 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
SU(3):   %14:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
SU(4):   %15:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
SU(5):   undef %55.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
SU(6):   undef %53.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12

********** INTERVALS **********
CH [0B,48r:0)[672r,704r:3)[864r,912r:2)[1696r,1904r:1)  0@0B-phi 1@1696r 2@864r 3@672r
CL [0B,48r:0)[672r,704r:3)[864r,912r:2)[1696r,1904r:1)  0@0B-phi 1@1696r 2@864r 3@672r
DH [0B,64r:0)[656r,704r:1)[848r,912r:2)[1680r,1904r:3)  0@0B-phi 1@656r 2@848r 3@1680r
DIL [0B,96r:0)[624r,704r:2)[816r,912r:1)[1648r,1904r:3)  0@0B-phi 1@816r 2@624r 3@1648r
DIH [0B,96r:0)[624r,704r:2)[816r,912r:1)[1648r,1904r:3)  0@0B-phi 1@816r 2@624r 3@1648r
DL [0B,64r:0)[656r,704r:1)[848r,912r:2)[1680r,1904r:3)  0@0B-phi 1@656r 2@848r 3@1680r
HCX [0B,48r:0)[672r,704r:3)[864r,912r:2)[1696r,1904r:1)  0@0B-phi 1@1696r 2@864r 3@672r
HDI [0B,96r:0)[624r,704r:2)[816r,912r:1)[1648r,1904r:3)  0@0B-phi 1@816r 2@624r 3@1648r
HDX [0B,64r:0)[656r,704r:1)[848r,912r:2)[1680r,1904r:3)  0@0B-phi 1@656r 2@848r 3@1680r
SIL [0B,80r:0)[640r,704r:1)[832r,912r:2)[1664r,1904r:3)  0@0B-phi 1@640r 2@832r 3@1664r
SIH [0B,80r:0)[640r,704r:1)[832r,912r:2)[1664r,1904r:3)  0@0B-phi 1@640r 2@832r 3@1664r
HSI [0B,80r:0)[640r,704r:1)[832r,912r:2)[1664r,1904r:3)  0@0B-phi 1@640r 2@832r 3@1664r
R8B [0B,32r:0)[688r,704r:3)[880r,912r:1)[1712r,1904r:2)  0@0B-phi 1@880r 2@1712r 3@688r
R8BH [0B,32r:0)[688r,704r:3)[880r,912r:1)[1712r,1904r:2)  0@0B-phi 1@880r 2@1712r 3@688r
R8WH [0B,32r:0)[688r,704r:3)[880r,912r:1)[1712r,1904r:2)  0@0B-phi 1@880r 2@1712r 3@688r
R9B [0B,16r:0)[1728r,1904r:1)  0@0B-phi 1@1728r
R9BH [0B,16r:0)[1728r,1904r:1)  0@0B-phi 1@1728r
R9WH [0B,16r:0)[1728r,1904r:1)  0@0B-phi 1@1728r
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%7 [240r,272r:0)[272r,304r:1)  0@240r 1@272r weight:0.000000e+00
%9 [480r,496r:0)  0@480r weight:0.000000e+00
%11 [1472r,1648r:0)  0@1472r weight:0.000000e+00
%12 [1488r,1664r:0)  0@1488r weight:0.000000e+00
%13 [1504r,1680r:0)  0@1504r weight:0.000000e+00
%14 [1520r,1696r:0)  0@1520r weight:0.000000e+00
%15 [1536r,1712r:0)  0@1536r weight:0.000000e+00
%24 [1616r,1744r:0)  0@1616r weight:0.000000e+00
%25 [1632r,1760r:0)  0@1632r weight:0.000000e+00
%26 [576r,624r:0)  0@576r weight:0.000000e+00
%27 [592r,656r:0)  0@592r weight:0.000000e+00
%29 [400r,1456B:0)  0@400r weight:0.000000e+00
%30 [416r,1456B:0)  0@416r weight:0.000000e+00
%31 [736r,816r:0)  0@736r weight:0.000000e+00
%33 [752r,784r:0)[784r,880r:1)  0@752r 1@784r weight:0.000000e+00
%34 [432r,1456B:0)  0@432r weight:0.000000e+00
%35 [448r,1456B:0)  0@448r weight:0.000000e+00
%36 [944r,992r:0)  0@944r weight:0.000000e+00
%37 [960r,992r:0)  0@960r weight:0.000000e+00
%38 [976r,992r:0)  0@976r weight:0.000000e+00
%39 [1040r,1056r:0)  0@1040r weight:0.000000e+00
%41 [1120r,1248r:0)  0@1120r weight:0.000000e+00
%43 [1136r,1168r:0)[1168r,1248r:1)  0@1136r 1@1168r weight:0.000000e+00
%44 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%46 [1200r,1232r:0)[1232r,1248r:1)  0@1200r 1@1232r weight:0.000000e+00
%47 [1264r,1360r:0)  0@1264r weight:0.000000e+00
%48 [1280r,1360r:0)  0@1280r weight:0.000000e+00
%49 [1296r,1312r:0)  0@1296r weight:0.000000e+00
%51 [1312r,1344r:0)[1344r,1360r:1)  0@1312r 1@1344r weight:0.000000e+00
%53 [1568r,1808r:0)  0@1568r weight:0.000000e+00
%55 [1552r,1840r:0)  0@1552r weight:0.000000e+00
RegMasks: 704r 912r 1904r
********** MACHINEINSTRS **********
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+56]
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=8, align=16, fixed, at location [SP+40]
  fi#-4: size=8, align=8, fixed, at location [SP+32]
  fi#-3: size=4, align=16, fixed, at location [SP+24]
  fi#-2: size=4, align=8, fixed, at location [SP+16]
  fi#-1: size=4, align=16, fixed, at location [SP+8]
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=56, align=16, at location [SP+8]
  fi#18: size=112, align=16, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $edi in %0, $esi in %1, $rdx in %2, $rcx in %3, $r8 in %4, $r9d in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi, $rdx, $rcx, $r8, $r9d
16B	  %5:gr32 = COPY $r9d
32B	  %4:gr64 = COPY $r8
48B	  %3:gr64 = COPY $rcx
64B	  %2:gr64 = COPY $rdx
80B	  %1:gr32 = COPY $esi
96B	  %0:gr32 = COPY $edi
112B	  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
128B	  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
144B	  MOV64mr %stack.2.a.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.a.addr)
160B	  MOV64mr %stack.3.colidx.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.colidx.addr)
176B	  MOV64mr %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.rowstr.addr)
192B	  MOV32mr %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.firstrow.addr)
208B	  MOV32mi %stack.16.nn1, 1, $noreg, 0, $noreg, 1, debug-location !638 :: (store 4 into %ir.nn1); cg.c:609:9

224B	bb.1.do.body:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

240B	  %7:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !640 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
272B	  %7:gr32 = ADD32rr %7:gr32(tied-def 0), %7:gr32, implicit-def dead $eflags, debug-location !642; cg.c:611:17
288B	  MOV32mr %stack.16.nn1, 1, $noreg, 0, $noreg, %7:gr32, debug-location !643 :: (store 4 into %ir.nn1); cg.c:611:13
304B	  CMP32rm %7:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !646 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:18
320B	  JCC_1 %bb.1, 12, implicit killed $eflags, debug-location !647; cg.c:612:5
336B	  JMP_1 %bb.2, debug-location !647; cg.c:612:5

352B	bb.2.do.end:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

368B	  MOV32mi %stack.13.iouter, 1, $noreg, 0, $noreg, 0, debug-location !650 :: (store 4 into %ir.iouter); cg.c:617:17
400B	  %29:gr64 = LEA64r %stack.18.vc, 1, $noreg, 0, $noreg
416B	  %30:gr64 = LEA64r %stack.17.ivc, 1, $noreg, 0, $noreg
432B	  %34:gr64 = LEA64r %stack.15.nzv, 1, $noreg, 0, $noreg
448B	  %35:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)

464B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

480B	  %9:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !653 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
496B	  CMP32rm %9:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !656 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:29
512B	  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !657; cg.c:617:5
528B	  JMP_1 %bb.4, debug-location !657; cg.c:617:5

544B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

560B	  MOV32mi %stack.15.nzv, 1, $noreg, 0, $noreg, 13, debug-location !658 :: (store 4 into %ir.nzv); cg.c:618:13
576B	  %26:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !660 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
592B	  %27:gr32 = MOV32rm %stack.16.nn1, 1, $noreg, 0, $noreg, debug-location !662 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !665; cg.c:619:9
624B	  $edi = COPY %26:gr32, debug-location !665; cg.c:619:9
640B	  $esi = MOV32ri 13, debug-location !665; cg.c:619:9
656B	  $edx = COPY %27:gr32, debug-location !665; cg.c:619:9
672B	  $rcx = COPY %29:gr64, debug-location !665; cg.c:619:9
688B	  $r8 = COPY %30:gr64, debug-location !665; cg.c:619:9
704B	  CALL64pcrel32 @sprnvc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, debug-location !665; cg.c:619:9
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !665; cg.c:619:9
736B	  %31:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !666 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
752B	  %33:gr32 = MOV32rm %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !669 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
784B	  %33:gr32 = nsw INC32r %33:gr32(tied-def 0), implicit-def dead $eflags, debug-location !670; cg.c:620:41
800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; cg.c:620:9
816B	  $edi = COPY %31:gr32, debug-location !671; cg.c:620:9
832B	  $rsi = COPY %29:gr64, debug-location !671; cg.c:620:9
848B	  $rdx = COPY %30:gr64, debug-location !671; cg.c:620:9
864B	  $rcx = COPY %34:gr64, debug-location !671; cg.c:620:9
880B	  $r8d = COPY %33:gr32, debug-location !671; cg.c:620:9
896B	  $xmm0 = COPY %35:fr64, debug-location !671; cg.c:620:9
912B	  CALL64pcrel32 @vecset, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8d, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, debug-location !671; cg.c:620:9
928B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; cg.c:620:9
944B	  %36:gr32 = MOV32rm %stack.15.nzv, 1, $noreg, 0, $noreg, debug-location !672 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
960B	  %37:gr64 = MOV64rm %fixed-stack.3, 1, $noreg, 0, $noreg, debug-location !673 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
976B	  %38:gr64_nosp = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !674 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
992B	  MOV32mr %37:gr64, 4, %38:gr64_nosp, 0, $noreg, %36:gr32, debug-location !675 :: (store 4 into %ir.arrayidx); cg.c:621:22
1008B	  MOV32mi %stack.14.ivelt, 1, $noreg, 0, $noreg, 0, debug-location !676 :: (store 4 into %ir.ivelt); cg.c:623:20

1024B	bb.5.for.cond5:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

1040B	  %39:gr32 = MOV32rm %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !679 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
1056B	  CMP32rm %39:gr32, %stack.15.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !682 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:31
1072B	  JCC_1 %bb.7, 13, implicit killed $eflags, debug-location !683; cg.c:623:9
1088B	  JMP_1 %bb.6, debug-location !683; cg.c:623:9

1104B	bb.6.for.body7:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1120B	  %41:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
1136B	  %43:gr32 = MOV32rm %stack.17.ivc, 4, %41:gr64_nosp, 0, $noreg, debug-location !686 :: (load 4 from %ir.arrayidx9); cg.c:624:35
1168B	  %43:gr32 = DEC32r %43:gr32(tied-def 0), implicit-def dead $eflags, debug-location !687; cg.c:624:46
1184B	  %44:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !689 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
1200B	  %46:gr64 = IMUL64rri8 %44:gr64, 56, implicit-def dead $eflags, debug-location !688; cg.c:624:13
1232B	  %46:gr64 = ADD64rm %46:gr64(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !688 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
1248B	  MOV32mr %46:gr64, 4, %41:gr64_nosp, 0, $noreg, %43:gr32, debug-location !691 :: (store 4 into %ir.arrayidx13); cg.c:624:33
1264B	  %47:gr64_nosp = MOVSX64rm32 %stack.14.ivelt, 1, $noreg, 0, $noreg, debug-location !692 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
1280B	  %48:fr64 = MOVSDrm_alt %stack.18.vc, 8, %47:gr64_nosp, 0, $noreg, debug-location !693 :: (load 8 from %ir.arrayidx15); cg.c:625:35
1296B	  %49:gr64 = MOVSX64rm32 %stack.13.iouter, 1, $noreg, 0, $noreg, debug-location !695 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
1312B	  %51:gr64 = IMUL64rri8 %49:gr64, 112, implicit-def dead $eflags, debug-location !694; cg.c:625:13
1344B	  %51:gr64 = ADD64rm %51:gr64(tied-def 0), %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !694 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
1360B	  MOVSDmr %51:gr64, 8, %47:gr64_nosp, 0, $noreg, %48:fr64, debug-location !697 :: (store 8 into %ir.arrayidx19); cg.c:625:33
1376B	  INC32m %stack.14.ivelt, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !698 :: (store 4 into %ir.ivelt), (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
1392B	  JMP_1 %bb.5, debug-location !699; cg.c:623:9

1408B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1424B	  INC32m %stack.13.iouter, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !702 :: (store 4 into %ir.iouter), (dereferenceable load 4 from %ir.iouter); cg.c:617:40
1440B	  JMP_1 %bb.3, debug-location !703; cg.c:617:5

1456B	bb.8.for.end22:
	; predecessors: %bb.3

1472B	  %11:gr64 = MOV64rm %stack.2.a.addr, 1, $noreg, 0, $noreg, debug-location !706 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
1488B	  %12:gr64 = MOV64rm %stack.3.colidx.addr, 1, $noreg, 0, $noreg, debug-location !707 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
1504B	  %13:gr64 = MOV64rm %stack.4.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !708 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
1520B	  %14:gr32 = MOV32rm %stack.0.n.addr, 1, $noreg, 0, $noreg, debug-location !709 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
1536B	  %15:gr32 = MOV32rm %stack.1.nz.addr, 1, $noreg, 0, $noreg, debug-location !710 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
1552B	  undef %55.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.5.firstrow.addr, 1, $noreg, 0, $noreg, debug-location !714 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
1568B	  undef %53.sub_32bit:gr64_with_sub_8bit = MOV32rm %fixed-stack.6, 1, $noreg, 0, $noreg, debug-location !715 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
1584B	  ADJCALLSTACKDOWN64 48, 0, 48, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !717; cg.c:633:5
1616B	  %24:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
1632B	  %25:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
1648B	  $rdi = COPY %11:gr64, debug-location !717; cg.c:633:5
1664B	  $rsi = COPY %12:gr64, debug-location !717; cg.c:633:5
1680B	  $rdx = COPY %13:gr64, debug-location !717; cg.c:633:5
1696B	  $ecx = COPY %14:gr32, debug-location !717; cg.c:633:5
1712B	  $r8d = COPY %15:gr32, debug-location !717; cg.c:633:5
1728B	  $r9d = MOV32ri 13, debug-location !717; cg.c:633:5
1744B	  $xmm0 = COPY %24:fr64, debug-location !717; cg.c:633:5
1760B	  $xmm1 = COPY %25:fr64, debug-location !717; cg.c:633:5
1776B	  PUSH64rmm %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
1808B	  PUSH64r %53:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
1840B	  PUSH64r %55:gr64_with_sub_8bit, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
1856B	  PUSH64rmm %fixed-stack.1, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
1872B	  PUSH64rmm %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
1888B	  PUSH64rmm %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def $rsp, implicit $rsp, debug-location !717; cg.c:633:5
1904B	  CALL64pcrel32 @sparse, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $ecx, implicit $r8d, implicit $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !717; cg.c:633:5
1920B	  ADJCALLSTACKUP64 48, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !717; cg.c:633:5
1936B	  RET 0, debug-location !718; cg.c:635:1

# End machine code for function makea.

Before MISched:
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %4, $rsi in %5, $rdx in %6, $rcx in %7, $r8 in %8, $r9 in %9

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  %9:gr64 = COPY $r9
  %8:gr64 = COPY $r8
  %7:gr64 = COPY $rcx
  %6:gr64 = COPY $rdx
  %5:gr64 = COPY $rsi
  %4:gr64 = COPY $rdi
  MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
  MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
  MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
  MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
  MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
  MOV32mi %stack.12.cgitmax, 1, $noreg, 0, $noreg, 25, debug-location !747 :: (store 4 into %ir.cgitmax); cg.c:406:15
  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 8 into %ir.rho); cg.c:409:9
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !761 :: (store 4 into %ir.j); cg.c:414:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %12:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !766 :: (dereferenceable load 4 from @naa); cg.c:414:21
  %12:gr32 = nsw INC32r %12:gr32(tied-def 0), implicit-def dead $eflags, debug-location !767; cg.c:414:25
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !769; cg.c:414:5
  JMP_1 %bb.2, debug-location !769; cg.c:414:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %153:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !770 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  %154:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !772 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
  %155:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !774 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  %157:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  %160:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !779 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  %161:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  %164:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !787 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
  JMP_1 %bb.1, debug-location !788; cg.c:414:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !791 :: (store 4 into %ir.j); cg.c:425:12

bb.4.for.cond11:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %17:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !796 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  %17:gr32 = nsw SUB32rm %17:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !798 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
  %17:gr32 = nsw INC32r %17:gr32(tied-def 0), implicit-def dead $eflags, debug-location !799; cg.c:425:40
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !800 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
  JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !801; cg.c:425:5
  JMP_1 %bb.5, debug-location !801; cg.c:425:5

bb.5.for.body14:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %146:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !804 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !805 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  %151:fr64 = MULSDrr %151:fr64(tied-def 0), %151:fr64, debug-location !808; cg.c:426:26
  %151:fr64 = ADDSDrm %151:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !809 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %151:fr64, debug-location !810 :: (store 8 into %ir.rho); cg.c:426:13
  %152:gr32 = LEA64_32r %166:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !811; cg.c:425:46
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %152:gr32, debug-location !811 :: (store 4 into %ir.j); cg.c:425:46
  JMP_1 %bb.4, debug-location !812; cg.c:425:5

bb.6.for.end22:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.11.cgit, 1, $noreg, 0, $noreg, 1, debug-location !815 :: (store 4 into %ir.cgit); cg.c:434:15

bb.7.for.cond23:
; predecessors: %bb.6, %bb.26
  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

  %19:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !818 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  CMP32rm %19:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !821 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
  JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !822; cg.c:434:5
  JMP_1 %bb.8, debug-location !822; cg.c:434:5

bb.8.for.body25:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !823 :: (store 4 into %ir.j); cg.c:447:16

bb.9.for.cond26:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %66:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !829 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !831 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
  %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !832; cg.c:447:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !833 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
  JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !834; cg.c:447:9
  JMP_1 %bb.10, debug-location !834; cg.c:447:9

bb.10.for.body30:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !835 :: (store 8 into %ir.sum); cg.c:448:17
  %126:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !837 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  %127:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !839 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  %128:gr32 = MOV32rm %126:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !837 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %128:gr32, debug-location !840 :: (store 4 into %ir.k); cg.c:449:20

bb.11.for.cond33:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %129:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  %130:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !844 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  %131:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  CMP32rm %129:gr32, %130:gr64, 4, %131:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:35
  JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !848; cg.c:449:13
  JMP_1 %bb.12, debug-location !848; cg.c:449:13

bb.12.for.body38:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %136:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !851 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  %167:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !852 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  %140:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !853 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  %141:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
  %144:fr64 = ADDSDrm %144:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %144:fr64, debug-location !858 :: (store 8 into %ir.sum); cg.c:450:21
  %145:gr32 = LEA64_32r %167:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !859; cg.c:449:53
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %145:gr32, debug-location !859 :: (store 4 into %ir.k); cg.c:449:53
  JMP_1 %bb.11, debug-location !860; cg.c:449:13

bb.13.for.end49:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !863 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  %134:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !864 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  %135:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !865 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  MOVSDmr %134:gr64, 8, %135:gr64_nosp, 0, $noreg, %133:fr64, debug-location !866 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !867 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
  JMP_1 %bb.9, debug-location !868; cg.c:447:9

bb.14.for.end54:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !871 :: (store 8 into %ir.d); cg.c:496:11
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !872 :: (store 4 into %ir.j); cg.c:497:16

bb.15.for.cond55:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %71:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !877 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  %71:gr32 = nsw SUB32rm %71:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !879 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
  %71:gr32 = nsw INC32r %71:gr32(tied-def 0), implicit-def dead $eflags, debug-location !880; cg.c:497:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %71:gr32, implicit-def $eflags, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
  JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !882; cg.c:497:9
  JMP_1 %bb.16, debug-location !882; cg.c:497:9

bb.16.for.body59:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %118:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !885 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  %168:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !886 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  %122:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !887 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
  %124:fr64 = ADDSDrm %124:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %124:fr64, debug-location !891 :: (store 8 into %ir.d); cg.c:498:15
  %125:gr32 = LEA64_32r %168:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !892; cg.c:497:50
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !892 :: (store 4 into %ir.j); cg.c:497:50
  JMP_1 %bb.15, debug-location !893; cg.c:497:9

bb.17.for.end68:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %73:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !896 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  %74:fr64 = COPY %73:fr64, debug-location !898; cg.c:504:21
  %74:fr64 = DIVSDrm %74:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !898 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
  MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %74:fr64, debug-location !899 :: (store 8 into %ir.alpha); cg.c:504:15
  MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %73:fr64, debug-location !901 :: (store 8 into %ir.rho0); cg.c:509:14
  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !902 :: (store 8 into %ir.rho); cg.c:515:13
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !903 :: (store 4 into %ir.j); cg.c:516:16

bb.18.for.cond69:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %78:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !908 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  %78:gr32 = nsw SUB32rm %78:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !910 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
  %78:gr32 = nsw INC32r %78:gr32(tied-def 0), implicit-def dead $eflags, debug-location !911; cg.c:516:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %78:gr32, implicit-def $eflags, debug-location !912 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !913; cg.c:516:9
  JMP_1 %bb.19, debug-location !913; cg.c:516:9

bb.19.for.body73:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %105:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !914 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  %106:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !916 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  %110:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  %108:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !918 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
  %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
  MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  %111:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !925 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  %112:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !926 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  %116:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !927 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  %115:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
  %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
  %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
  MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !935 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
  JMP_1 %bb.18, debug-location !936; cg.c:516:9

bb.20.for.end92:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !939 :: (store 4 into %ir.j); cg.c:526:16

bb.21.for.cond93:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %83:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !944 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  %83:gr32 = nsw SUB32rm %83:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !946 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
  %83:gr32 = nsw INC32r %83:gr32(tied-def 0), implicit-def dead $eflags, debug-location !947; cg.c:526:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %83:gr32, implicit-def $eflags, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !949; cg.c:526:9
  JMP_1 %bb.22, debug-location !949; cg.c:526:9

bb.22.for.body97:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %98:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !952 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !953 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  %103:fr64 = MULSDrr %103:fr64(tied-def 0), %103:fr64, debug-location !956; cg.c:527:30
  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !957 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %103:fr64, debug-location !958 :: (store 8 into %ir.rho); cg.c:527:17
  %104:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !959; cg.c:526:50
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %104:gr32, debug-location !959 :: (store 4 into %ir.j); cg.c:526:50
  JMP_1 %bb.21, debug-location !960; cg.c:526:9

bb.23.for.end106:
; predecessors: %bb.21
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %86:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !963 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  %86:fr64 = DIVSDrm %86:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !965 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
  MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %86:fr64, debug-location !966 :: (store 8 into %ir.beta); cg.c:533:14
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !967 :: (store 4 into %ir.j); cg.c:538:16

bb.24.for.cond108:
; predecessors: %bb.23, %bb.25
  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

  %90:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !972 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  %90:gr32 = nsw SUB32rm %90:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !974 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
  %90:gr32 = nsw INC32r %90:gr32(tied-def 0), implicit-def dead $eflags, debug-location !975; cg.c:538:44
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %90:gr32, implicit-def $eflags, debug-location !976 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
  JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !977; cg.c:538:9
  JMP_1 %bb.25, debug-location !977; cg.c:538:9

bb.25.for.body112:
; predecessors: %bb.24
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %92:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !978 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  %93:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !980 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  %97:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  %95:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !982 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
  %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
  MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !989 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
  JMP_1 %bb.24, debug-location !990; cg.c:538:9

bb.26.for.end123:
; predecessors: %bb.24
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.11.cgit, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !993 :: (store 4 into %ir.cgit), (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  JMP_1 %bb.7, debug-location !994; cg.c:434:5

bb.27.for.end126:
; predecessors: %bb.7
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !997 :: (store 8 into %ir.sum); cg.c:548:9
  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !998 :: (store 4 into %ir.j); cg.c:549:12

bb.28.for.cond127:
; predecessors: %bb.27, %bb.32
  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

  %24:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1003 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  %24:gr32 = nsw SUB32rm %24:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1005 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
  %24:gr32 = nsw INC32r %24:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1006; cg.c:549:40
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1008; cg.c:549:5
  JMP_1 %bb.29, debug-location !1008; cg.c:549:5

bb.29.for.body131:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1009 :: (store 8 into %ir.d); cg.c:550:11
  %43:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1011 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  %44:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  %45:gr32 = MOV32rm %43:gr64, 4, %44:gr64_nosp, 0, $noreg, debug-location !1011 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %45:gr32, debug-location !1014 :: (store 4 into %ir.k); cg.c:551:16

bb.30.for.cond134:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

  %46:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  %47:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1018 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  %48:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  CMP32rm %46:gr32, %47:gr64, 4, %48:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:31
  JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1022; cg.c:551:9
  JMP_1 %bb.31, debug-location !1022; cg.c:551:9

bb.31.for.body139:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %53:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1025 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1026 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  %57:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1027 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  %58:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
  %61:fr64 = ADDSDrm %61:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %61:fr64, debug-location !1032 :: (store 8 into %ir.d); cg.c:552:15
  %62:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1033; cg.c:551:49
  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %62:gr32, debug-location !1033 :: (store 4 into %ir.k); cg.c:551:49
  JMP_1 %bb.30, debug-location !1034; cg.c:551:9

bb.32.for.end150:
; predecessors: %bb.30
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  %50:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1037 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  %51:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1038 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  %52:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1039 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  MOVSDmr %51:gr64, 8, %52:gr64_nosp, 0, $noreg, %50:fr64, debug-location !1040 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1041 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
  JMP_1 %bb.28, debug-location !1042; cg.c:549:5

bb.33.for.end155:
; predecessors: %bb.28
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1045 :: (store 4 into %ir.j); cg.c:560:12

bb.34.for.cond156:
; predecessors: %bb.33, %bb.35
  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

  %29:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1050 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  %29:gr32 = nsw SUB32rm %29:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1052 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
  %29:gr32 = nsw INC32r %29:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1053; cg.c:560:40
  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %29:gr32, implicit-def $eflags, debug-location !1054 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
  JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1055; cg.c:560:5
  JMP_1 %bb.35, debug-location !1055; cg.c:560:5

bb.35.for.body160:
; predecessors: %bb.34
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  %34:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1056 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1058 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  %38:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1062 :: (store 8 into %ir.d); cg.c:561:11
  %40:fr64 = MULSDrr %40:fr64(tied-def 0), %40:fr64, debug-location !1066; cg.c:562:23
  %40:fr64 = ADDSDrm %40:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1067 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1068 :: (store 8 into %ir.sum); cg.c:562:13
  %42:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1069; cg.c:560:46
  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %42:gr32, debug-location !1069 :: (store 4 into %ir.j); cg.c:560:46
  JMP_1 %bb.34, debug-location !1070; cg.c:560:5

bb.36.for.end170:
; predecessors: %bb.34
  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

  %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1073 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  %31:fr64 = FsFLD0SD
  UCOMISDrr %0:fr64, %31:fr64, implicit-def $eflags, debug-location !1075; cg.c:565:6
  JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1075; cg.c:565:6

bb.37:
; predecessors: %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %165:fr64 = SQRTSDr %0:fr64
  JMP_1 %bb.39

bb.38.call.sqrt:
; predecessors: %bb.36
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1075; cg.c:565:6
  $xmm0 = COPY %0:fr64, debug-location !1075; cg.c:565:6
  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1075; cg.c:565:6
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1075; cg.c:565:6
  %165:fr64 = COPY killed $xmm0, debug-location !1075; cg.c:565:6

bb.39.for.end170.split:
; predecessors: %bb.38, %bb.37

  %33:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1075 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  MOVSDmr %33:gr64, 1, $noreg, 0, $noreg, %165:fr64, debug-location !1076 :: (store 8 into %ir.158); cg.c:565:12
  RET 0, debug-location !1077; cg.c:566:1

# End machine code for function conj_grad.

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: %9:gr64 = COPY $r9
    To: End RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gr64 = COPY $r9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%9
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %8:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%8
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %7:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%7
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %6:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%6
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %5:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %4:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   MOV32mi %stack.12.cgitmax, 1, $noreg, 0, $noreg, 25, debug-location !747 :: (store 4 into %ir.cgitmax); cg.c:406:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 8 into %ir.rho); cg.c:409:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !761 :: (store 4 into %ir.j); cg.c:414:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !761 :: (store 4 into %ir.j); cg.c:414:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 8 into %ir.rho); cg.c:409:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 12 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mi %stack.12.cgitmax, 1, $noreg, 0, $noreg, 25, debug-location !747 :: (store 4 into %ir.cgitmax); cg.c:406:15
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 11 10 9 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
Bottom Pressure:
GR16=2
  LiveReg: %9
  UpdateRegP: SU(11) MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GR16=4
  LiveReg: %8
  UpdateRegP: SU(10) MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 0 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
Bottom Pressure:
GR16=6
  LiveReg: %7
  UpdateRegP: SU(9) MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 1 0 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
Bottom Pressure:
GR16=8
  LiveReg: %6
  UpdateRegP: SU(8) MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 1 0 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GR16=10
  LiveReg: %5
  UpdateRegP: SU(7) MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 1 0 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GR16=12
  LiveReg: %4
  UpdateRegP: SU(6) MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %4:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %5:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %6:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %7:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %8:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=9
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64 = COPY $r9
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gr64 = COPY $r9
SU(1):   %8:gr64 = COPY $r8
SU(2):   %7:gr64 = COPY $rcx
SU(3):   %6:gr64 = COPY $rdx
SU(4):   %5:gr64 = COPY $rsi
SU(5):   %4:gr64 = COPY $rdi
SU(6):   MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
SU(7):   MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
SU(8):   MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
SU(9):   MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
SU(10):   MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
SU(11):   MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
SU(12):   MOV32mi %stack.12.cgitmax, 1, $noreg, 0, $noreg, 25, debug-location !747 :: (store 4 into %ir.cgitmax); cg.c:406:15
SU(13):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 8 into %ir.rho); cg.c:409:9
SU(14):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !761 :: (store 4 into %ir.j); cg.c:414:12

********** MI Scheduling **********
conj_grad:%bb.1 for.cond
  From: %12:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !766 :: (dereferenceable load 4 from @naa); cg.c:414:21
    To: JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !769; cg.c:414:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !766 :: (dereferenceable load 4 from @naa); cg.c:414:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%12
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %12:gr32 = nsw INC32r %12:gr32(tied-def 0), implicit-def dead $eflags, debug-location !767; cg.c:414:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%12
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%12
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !769; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %12:gr32 = nsw INC32r %12:gr32(tied-def 0), implicit-def dead $eflags, debug-location !767; cg.c:414:25
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !766 :: (dereferenceable load 4 from @naa); cg.c:414:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %12:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !766 :: (dereferenceable load 4 from @naa); cg.c:414:21
SU(1):   %12:gr32 = nsw INC32r %12:gr32(tied-def 0), implicit-def dead $eflags, debug-location !767; cg.c:414:25
SU(2):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:414:19

********** MI Scheduling **********
conj_grad:%bb.2 for.body
  From: %153:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !770 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
    To: JMP_1 %bb.1, debug-location !788; cg.c:414:5
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %153:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !770 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(2): Data Latency=4 Reg=%153
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %154:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !772 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 30
  Successors:
    SU(2): Data Latency=4 Reg=%154
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
  # preds left       : 4
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 26
  Predecessors:
    SU(1): Data Latency=4 Reg=%154
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%153
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(3):   %155:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !774 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%155
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 25
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%156
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  # preds left       : 7
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 21
  Predecessors:
    SU(4): Data Latency=4 Reg=%156
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%155
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   %157:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 20
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%157
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 20
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%158
    SU(8): Data Latency=4 Reg=%158
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 16
  Predecessors:
    SU(7): Data Latency=4 Reg=%158
    SU(6): Data Latency=4 Reg=%157
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%159
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(9):   %160:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !779 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 16
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%160
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(10):   MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  # preds left       : 13
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 12
  Predecessors:
    SU(8): Data Latency=4 Reg=%159
    SU(9): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%160
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%158
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(11):   %161:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 11
  Predecessors:
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%161
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 11
  Predecessors:
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%162
    SU(13): Data Latency=4 Reg=%162
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 23
  Height             : 7
  Predecessors:
    SU(12): Data Latency=4 Reg=%162
    SU(11): Data Latency=4 Reg=%161
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%163
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(14):   %164:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(10): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%164
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  # preds left       : 18
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 3
  Predecessors:
    SU(13): Data Latency=4 Reg=%163
    SU(14): Ord  Latency=0 Memory
    SU(14): Data Latency=4 Reg=%164
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=4 Reg=%162
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(16):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !787 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 27
  Height             : 3
  Predecessors:
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !788; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 30
  Height             : 0
  Predecessors:
    SU(16): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 30
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Scheduling SU(16) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !787 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(16) 27c
  BotQ.A BotLatency SU(16) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %164
  UpdateRegP: SU(15) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %162
  UpdateRegP: SU(13) %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(15) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to FR32 1    FR32X 1
  LiveReg: %163
  UpdateRegP: SU(15) MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 
  Cand SU(14) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(14) %164:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @7c
  BotQ.A BotLatency SU(14) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
Bottom Pressure:
GR16=4
  LiveReg: %161
  UpdateRegP: SU(13) %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FR32 -1    FR32X -1
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
Bottom Pressure:
GR16=2
  Ready @11c
  BotQ.A BotLatency SU(12) 11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %161:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
Bottom Pressure:

  Ready @11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %160
  UpdateRegP: SU(10) MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %158
  UpdateRegP: SU(8) %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(10) MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to FR32 1    FR32X 1
  LiveReg: %159
  UpdateRegP: SU(10) MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to 
  Ready @12c
  BotQ.A BotLatency SU(10) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 
  Cand SU(9) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(9) %160:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !779 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(9) 16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
Bottom Pressure:
GR16=4
  LiveReg: %157
  UpdateRegP: SU(8) %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FR32 -1    FR32X -1
  Ready @16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
Bottom Pressure:
GR16=2
  Ready @20c
  BotQ.A BotLatency SU(7) 20c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %157:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
Bottom Pressure:

  Ready @20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
Bottom Pressure:
GR16=4
  LiveReg: %155
  UpdateRegP: SU(5) MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to GR16 2
  LiveReg: %156
  UpdateRegP: SU(5) MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to 
  Ready @21c
  BotQ.A BotLatency SU(5) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
Bottom Pressure:
GR16=2
  Ready @25c
  BotQ.A BotLatency SU(4) 25c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %155:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !774 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
Bottom Pressure:

  Ready @25c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
Bottom Pressure:
GR16=4
  LiveReg: %153
  UpdateRegP: SU(2) MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to GR16 2
  LiveReg: %154
  UpdateRegP: SU(2) MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to 
  Ready @26c
  BotQ.A BotLatency SU(2) 26c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %154:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !772 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
Bottom Pressure:
GR16=2
  Ready @30c
  BotQ.A BotLatency SU(1) 30c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %153:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !770 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
Bottom Pressure:

  Ready @30c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %153:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !770 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
SU(1):   %154:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !772 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
SU(2):   MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
SU(3):   %155:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !774 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
SU(4):   %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
SU(5):   MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
SU(6):   %157:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
SU(7):   %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
SU(8):   %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
SU(9):   %160:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !779 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
SU(10):   MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
SU(11):   %161:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
SU(12):   %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
SU(13):   %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
SU(14):   %164:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
SU(15):   MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
SU(16):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !787 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31

********** MI Scheduling **********
conj_grad:%bb.4 for.cond11
  From: %17:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !796 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
    To: JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !801; cg.c:425:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %17:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !796 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %17:gr32 = nsw SUB32rm %17:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !798 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%17
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %17:gr32 = nsw INC32r %17:gr32(tied-def 0), implicit-def dead $eflags, debug-location !799; cg.c:425:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%17
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !800 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%17
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !801; cg.c:425:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !800 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %17:gr32 = nsw INC32r %17:gr32(tied-def 0), implicit-def dead $eflags, debug-location !799; cg.c:425:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %17:gr32 = nsw SUB32rm %17:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !798 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !796 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %17:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !796 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
SU(1):   %17:gr32 = nsw SUB32rm %17:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !798 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
SU(2):   %17:gr32 = nsw INC32r %17:gr32(tied-def 0), implicit-def dead $eflags, debug-location !799; cg.c:425:40
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !800 :: (dereferenceable load 4 from %ir.j); cg.c:425:19

********** MI Scheduling **********
conj_grad:%bb.5 for.body14
  From: %146:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !804 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
    To: JMP_1 %bb.4, debug-location !812; cg.c:425:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %146:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !804 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%146
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !805 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(6): Data Latency=4 Reg=%166
    SU(2): Data Latency=4 Reg=%166
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%166
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(3): Data Latency=4 Reg=%151
    SU(3): Out  Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %151:fr64 = MULSDrr %151:fr64(tied-def 0), %151:fr64, debug-location !808; cg.c:426:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%151
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%151
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %151:fr64 = ADDSDrm %151:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !809 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%151
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%151
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %151:fr64, debug-location !810 :: (store 8 into %ir.rho); cg.c:426:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%151
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %152:gr32 = LEA64_32r %166:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !811; cg.c:425:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%166
  Successors:
    SU(7): Data Latency=1 Reg=%152
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %152:gr32, debug-location !811 :: (store 4 into %ir.j); cg.c:425:46
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%152
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.4, debug-location !812; cg.c:425:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %152:gr32, debug-location !811 :: (store 4 into %ir.j); cg.c:425:46
Bottom Pressure:
GR16=2
  LiveReg: %152
  UpdateRegP: SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %152:gr32, debug-location !811 :: (store 4 into %ir.j); cg.c:425:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %152:gr32 = LEA64_32r %166:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !811; cg.c:425:46
Bottom Pressure:
GR16=2
  LiveReg: %166
  UpdateRegP: SU(2) %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(6) %152:gr32 = LEA64_32r %166:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !811; cg.c:425:46
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %151:fr64, debug-location !810 :: (store 8 into %ir.rho); cg.c:426:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %151
  UpdateRegP: SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %151:fr64, debug-location !810 :: (store 8 into %ir.rho); cg.c:426:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %151:fr64 = ADDSDrm %151:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !809 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %151
  UpdateRegP: SU(4) %151:fr64 = ADDSDrm %151:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !809 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %151:fr64 = MULSDrr %151:fr64(tied-def 0), %151:fr64, debug-location !808; cg.c:426:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %151
  UpdateRegP: SU(3) %151:fr64 = MULSDrr %151:fr64(tied-def 0), %151:fr64, debug-location !808; cg.c:426:26
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
Bottom Pressure:
GR16=4
  LiveReg: %146
  UpdateRegP: SU(2) %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !805 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
Bottom Pressure:
GR16=2
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %146:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !804 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
Bottom Pressure:

  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %146:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !804 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
SU(1):   %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !805 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
SU(2):   %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
SU(3):   %151:fr64 = MULSDrr %151:fr64(tied-def 0), %151:fr64, debug-location !808; cg.c:426:26
SU(4):   %151:fr64 = ADDSDrm %151:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !809 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %151:fr64, debug-location !810 :: (store 8 into %ir.rho); cg.c:426:13
SU(6):   %152:gr32 = LEA64_32r %166:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !811; cg.c:425:46
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %152:gr32, debug-location !811 :: (store 4 into %ir.j); cg.c:425:46

********** MI Scheduling **********
conj_grad:%bb.7 for.cond23
  From: %19:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !818 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
    To: JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !822; cg.c:434:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %19:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !818 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(1):   CMP32rm %19:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !821 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%19
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !822; cg.c:434:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %19:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !821 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %19:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !818 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %19:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !818 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
SU(1):   CMP32rm %19:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !821 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25

********** MI Scheduling **********
conj_grad:%bb.9 for.cond26
  From: %66:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !829 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
    To: JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !834; cg.c:447:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !829 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%66
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !831 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%66
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%66
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !832; cg.c:447:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%66
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%66
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !833 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%66
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !834; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !833 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !832; cg.c:447:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !831 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !829 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %66:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !829 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
SU(1):   %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !831 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
SU(2):   %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !832; cg.c:447:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !833 :: (dereferenceable load 4 from %ir.j); cg.c:447:23

********** MI Scheduling **********
conj_grad:%bb.10 for.body30
  From: MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !835 :: (store 8 into %ir.sum); cg.c:448:17
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !835 :: (store 8 into %ir.sum); cg.c:448:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %126:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !837 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(2):   %127:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !839 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%127
  Single Issue       : false;
SU(3):   %128:gr32 = MOV32rm %126:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !837 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%127
    SU(1): Data Latency=4 Reg=%126
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%128
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %128:gr32, debug-location !840 :: (store 4 into %ir.k); cg.c:449:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%128
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %128:gr32, debug-location !840 :: (store 4 into %ir.k); cg.c:449:20
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %128:gr32 = MOV32rm %126:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !837 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %127:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !839 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %126:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !837 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !835 :: (store 8 into %ir.sum); cg.c:448:17
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !835 :: (store 8 into %ir.sum); cg.c:448:17
SU(1):   %126:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !837 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
SU(2):   %127:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !839 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
SU(3):   %128:gr32 = MOV32rm %126:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !837 :: (load 4 from %ir.arrayidx32); cg.c:449:22
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %128:gr32, debug-location !840 :: (store 4 into %ir.k); cg.c:449:20

********** MI Scheduling **********
conj_grad:%bb.11 for.cond33
  From: %129:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
    To: JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !848; cg.c:449:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %129:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%129
  Single Issue       : false;
SU(1):   %130:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !844 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%130
  Single Issue       : false;
SU(2):   %131:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%131
  Single Issue       : false;
SU(3):   CMP32rm %129:gr32, %130:gr64, 4, %131:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%131
    SU(1): Data Latency=4 Reg=%130
    SU(0): Data Latency=4 Reg=%129
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !848; cg.c:449:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %129:gr32, %130:gr64, 4, %131:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:35
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %131:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %130:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !844 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %129:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %129:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
SU(1):   %130:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !844 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
SU(2):   %131:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
SU(3):   CMP32rm %129:gr32, %130:gr64, 4, %131:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:35

********** MI Scheduling **********
conj_grad:%bb.12 for.body38
  From: %136:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !851 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
    To: JMP_1 %bb.11, debug-location !860; cg.c:449:13
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %136:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !851 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%136
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %167:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !852 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%167
    SU(5): Data Latency=4 Reg=%167
    SU(2): Data Latency=4 Reg=%167
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%167
    SU(0): Data Latency=4 Reg=%136
  Successors:
    SU(6): Data Latency=4 Reg=%144
    SU(6): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %140:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !853 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=4 Reg=%140
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %141:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%141
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%141
    SU(1): Data Latency=4 Reg=%167
  Successors:
    SU(6): Data Latency=4 Reg=%142
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(5): Data Latency=4 Reg=%142
    SU(3): Data Latency=4 Reg=%140
    SU(2): Data Latency=4 Reg=%144
    SU(2): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%144
    SU(7): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   %144:fr64 = ADDSDrm %144:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%144
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%144
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %144:fr64, debug-location !858 :: (store 8 into %ir.sum); cg.c:450:21
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%144
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %145:gr32 = LEA64_32r %167:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !859; cg.c:449:53
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%167
  Successors:
    SU(10): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %145:gr32, debug-location !859 :: (store 4 into %ir.k); cg.c:449:53
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%145
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.11, debug-location !860; cg.c:449:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %145:gr32, debug-location !859 :: (store 4 into %ir.k); cg.c:449:53
Bottom Pressure:
GR16=2
  LiveReg: %145
  UpdateRegP: SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %145:gr32, debug-location !859 :: (store 4 into %ir.k); cg.c:449:53
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %145:gr32 = LEA64_32r %167:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !859; cg.c:449:53
Bottom Pressure:
GR16=2
  LiveReg: %167
  UpdateRegP: SU(2) %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(5) %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
              to 
  UpdateRegP: SU(9) %145:gr32 = LEA64_32r %167:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !859; cg.c:449:53
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %144:fr64, debug-location !858 :: (store 8 into %ir.sum); cg.c:450:21
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %144
  UpdateRegP: SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %144:fr64, debug-location !858 :: (store 8 into %ir.sum); cg.c:450:21
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 16c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %144:fr64 = ADDSDrm %144:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %144
  UpdateRegP: SU(7) %144:fr64 = ADDSDrm %144:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %144
  UpdateRegP: SU(6) %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %140
  UpdateRegP: SU(6) %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %142
  UpdateRegP: SU(6) %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(6) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 
  Cand SU(5) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(5) %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %141
  UpdateRegP: SU(5) %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(5) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %141:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %140:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !853 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
Bottom Pressure:
GR16=4
  LiveReg: %136
  UpdateRegP: SU(2) %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %167:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !852 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
Bottom Pressure:
GR16=2
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %136:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !851 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
Bottom Pressure:

  Ready @16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %136:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !851 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
SU(1):   %167:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !852 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
SU(2):   %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
SU(3):   %140:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !853 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
SU(4):   %141:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
SU(5):   %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
SU(6):   %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
SU(7):   %144:fr64 = ADDSDrm %144:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %144:fr64, debug-location !858 :: (store 8 into %ir.sum); cg.c:450:21
SU(9):   %145:gr32 = LEA64_32r %167:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !859; cg.c:449:53
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %145:gr32, debug-location !859 :: (store 4 into %ir.k); cg.c:449:53

********** MI Scheduling **********
conj_grad:%bb.13 for.end49
  From: %133:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !863 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
    To: JMP_1 %bb.9, debug-location !868; cg.c:447:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %133:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !863 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%133
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %134:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !864 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%134
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %135:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !865 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%135
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %134:gr64, 8, %135:gr64_nosp, 0, $noreg, %133:fr64, debug-location !866 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%135
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%134
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%133
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !867 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.9, debug-location !868; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !867 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %134:gr64, 8, %135:gr64_nosp, 0, $noreg, %133:fr64, debug-location !866 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %135:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !865 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %134:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !864 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %133:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !863 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %133:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !863 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
SU(1):   %134:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !864 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
SU(2):   %135:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !865 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
SU(3):   MOVSDmr %134:gr64, 8, %135:gr64_nosp, 0, $noreg, %133:fr64, debug-location !866 :: (store 8 into %ir.arrayidx51); cg.c:452:18
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !867 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50

********** MI Scheduling **********
conj_grad:%bb.14 for.end54
  From: MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !871 :: (store 8 into %ir.d); cg.c:496:11
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !871 :: (store 8 into %ir.d); cg.c:496:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !872 :: (store 4 into %ir.j); cg.c:497:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !872 :: (store 4 into %ir.j); cg.c:497:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !871 :: (store 8 into %ir.d); cg.c:496:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !871 :: (store 8 into %ir.d); cg.c:496:11
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !872 :: (store 4 into %ir.j); cg.c:497:16

********** MI Scheduling **********
conj_grad:%bb.15 for.cond55
  From: %71:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !877 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
    To: JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !882; cg.c:497:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %71:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !877 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%71
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %71:gr32 = nsw SUB32rm %71:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !879 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%71
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%71
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %71:gr32 = nsw INC32r %71:gr32(tied-def 0), implicit-def dead $eflags, debug-location !880; cg.c:497:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%71
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%71
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %71:gr32, implicit-def $eflags, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%71
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !882; cg.c:497:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %71:gr32, implicit-def $eflags, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %71:gr32 = nsw INC32r %71:gr32(tied-def 0), implicit-def dead $eflags, debug-location !880; cg.c:497:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %71:gr32 = nsw SUB32rm %71:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !879 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %71:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !877 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %71:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !877 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
SU(1):   %71:gr32 = nsw SUB32rm %71:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !879 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
SU(2):   %71:gr32 = nsw INC32r %71:gr32(tied-def 0), implicit-def dead $eflags, debug-location !880; cg.c:497:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %71:gr32, implicit-def $eflags, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:497:23

********** MI Scheduling **********
conj_grad:%bb.16 for.body59
  From: %118:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !885 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
    To: JMP_1 %bb.15, debug-location !893; cg.c:497:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %118:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !885 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%118
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %168:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !886 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(7): Data Latency=4 Reg=%168
    SU(4): Data Latency=4 Reg=%168
    SU(2): Data Latency=4 Reg=%168
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%168
    SU(0): Data Latency=4 Reg=%118
  Successors:
    SU(4): Data Latency=4 Reg=%124
    SU(4): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %122:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !887 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%122
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%124
    SU(3): Data Latency=4 Reg=%122
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%168
  Successors:
    SU(5): Data Latency=4 Reg=%124
    SU(5): Out  Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   %124:fr64 = ADDSDrm %124:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(4): Data Latency=4 Reg=%124
    SU(4): Out  Latency=0
  Successors:
    SU(6): Data Latency=4 Reg=%124
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %124:fr64, debug-location !891 :: (store 8 into %ir.d); cg.c:498:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%124
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(7):   %125:gr32 = LEA64_32r %168:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !892; cg.c:497:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%168
  Successors:
    SU(8): Data Latency=1 Reg=%125
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !892 :: (store 4 into %ir.j); cg.c:497:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%125
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !893; cg.c:497:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !892 :: (store 4 into %ir.j); cg.c:497:50
Bottom Pressure:
GR16=2
  LiveReg: %125
  UpdateRegP: SU(8) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !892 :: (store 4 into %ir.j); cg.c:497:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %125:gr32 = LEA64_32r %168:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !892; cg.c:497:50
Bottom Pressure:
GR16=2
  LiveReg: %168
  UpdateRegP: SU(2) %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(4) %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
              to GR16 2
  UpdateRegP: SU(7) %125:gr32 = LEA64_32r %168:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !892; cg.c:497:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %124:fr64, debug-location !891 :: (store 8 into %ir.d); cg.c:498:15
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %124
  UpdateRegP: SU(6) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %124:fr64, debug-location !891 :: (store 8 into %ir.d); cg.c:498:15
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 16c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %124:fr64 = ADDSDrm %124:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %124
  UpdateRegP: SU(5) %124:fr64 = ADDSDrm %124:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %124
  UpdateRegP: SU(4) %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %122
  UpdateRegP: SU(4) %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(4) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(3) %122:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !887 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(3) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
Bottom Pressure:
GR16=4
  LiveReg: %118
  UpdateRegP: SU(2) %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %168:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !886 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
Bottom Pressure:
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %118:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !885 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
Bottom Pressure:

  Ready @16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %118:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !885 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
SU(1):   %168:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !886 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
SU(2):   %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
SU(3):   %122:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !887 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
SU(4):   %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
SU(5):   %124:fr64 = ADDSDrm %124:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
SU(6):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %124:fr64, debug-location !891 :: (store 8 into %ir.d); cg.c:498:15
SU(7):   %125:gr32 = LEA64_32r %168:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !892; cg.c:497:50
SU(8):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !892 :: (store 4 into %ir.j); cg.c:497:50

********** MI Scheduling **********
conj_grad:%bb.17 for.end68
  From: %73:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !896 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Constraining copy SU(1)
  Local use SU(4) -> SU(1)
SU(0):   %73:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !896 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%73
    SU(1): Data Latency=4 Reg=%73
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %74:fr64 = COPY %73:fr64, debug-location !898; cg.c:504:21
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
    SU(4): Ord  Latency=0 Weak
  Successors:
    SU(2): Data Latency=0 Reg=%74
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %74:fr64 = DIVSDrm %74:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !898 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%74
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(3):   MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %74:fr64, debug-location !899 :: (store 8 into %ir.alpha); cg.c:504:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(4):   MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %73:fr64, debug-location !901 :: (store 8 into %ir.rho0); cg.c:509:14
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
  Successors:
    SU(1): Ord  Latency=0 Weak
  Single Issue       : false;
SU(5):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !902 :: (store 8 into %ir.rho); cg.c:515:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !903 :: (store 4 into %ir.j); cg.c:516:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 
  Cand SU(6) ORDER                              
Pick Bot WEAK      
Scheduling SU(6) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !903 :: (store 4 into %ir.j); cg.c:516:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot WEAK      
Scheduling SU(5) MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !902 :: (store 8 into %ir.rho); cg.c:515:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
Pick Bot WEAK      
Scheduling SU(3) MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %74:fr64, debug-location !899 :: (store 8 into %ir.alpha); cg.c:504:15
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 
  Cand SU(4) ORDER                              
  Cand SU(2) WEAK                               
Pick Bot WEAK      
Scheduling SU(2) %74:fr64 = DIVSDrm %74:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !898 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
  Cand SU(4) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot WEAK      
Scheduling SU(1) %74:fr64 = COPY %73:fr64, debug-location !898; cg.c:504:21
  Ready @4c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %73:fr64, debug-location !901 :: (store 8 into %ir.rho0); cg.c:509:14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !896 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %73:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !896 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
SU(4):   MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %73:fr64, debug-location !901 :: (store 8 into %ir.rho0); cg.c:509:14
SU(1):   %74:fr64 = COPY %73:fr64, debug-location !898; cg.c:504:21
SU(2):   %74:fr64 = DIVSDrm %74:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !898 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
SU(3):   MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %74:fr64, debug-location !899 :: (store 8 into %ir.alpha); cg.c:504:15
SU(5):   MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !902 :: (store 8 into %ir.rho); cg.c:515:13
SU(6):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !903 :: (store 4 into %ir.j); cg.c:516:16

********** MI Scheduling **********
conj_grad:%bb.18 for.cond69
  From: %78:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !908 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
    To: JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !913; cg.c:516:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %78:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !908 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%78
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %78:gr32 = nsw SUB32rm %78:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !910 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%78
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%78
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %78:gr32 = nsw INC32r %78:gr32(tied-def 0), implicit-def dead $eflags, debug-location !911; cg.c:516:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%78
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%78
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %78:gr32, implicit-def $eflags, debug-location !912 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%78
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !913; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %78:gr32, implicit-def $eflags, debug-location !912 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %78:gr32 = nsw INC32r %78:gr32(tied-def 0), implicit-def dead $eflags, debug-location !911; cg.c:516:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %78:gr32 = nsw SUB32rm %78:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !910 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %78:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !908 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %78:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !908 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
SU(1):   %78:gr32 = nsw SUB32rm %78:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !910 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
SU(2):   %78:gr32 = nsw INC32r %78:gr32(tied-def 0), implicit-def dead $eflags, debug-location !911; cg.c:516:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %78:gr32, implicit-def $eflags, debug-location !912 :: (dereferenceable load 4 from %ir.j); cg.c:516:23

********** MI Scheduling **********
conj_grad:%bb.19 for.body73
  From: %105:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !914 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
    To: JMP_1 %bb.18, debug-location !936; cg.c:516:9
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %105:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !914 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(6): Data Latency=4 Reg=%105
    SU(5): Data Latency=4 Reg=%105
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %106:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !916 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(6): Data Latency=4 Reg=%106
    SU(5): Data Latency=4 Reg=%106
    SU(4): Data Latency=4 Reg=%106
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %110:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(4): Data Latency=4 Reg=%110
    SU(4): Out  Latency=0
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(3):   %108:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !918 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(4): Data Latency=4 Reg=%108
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(3): Data Latency=4 Reg=%108
    SU(2): Data Latency=4 Reg=%110
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%106
  Successors:
    SU(5): Data Latency=4 Reg=%110
    SU(5): Out  Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(4): Data Latency=4 Reg=%110
    SU(4): Out  Latency=0
    SU(1): Data Latency=4 Reg=%106
    SU(0): Data Latency=4 Reg=%105
  Successors:
    SU(6): Data Latency=4 Reg=%110
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  # preds left       : 9
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 13
  Predecessors:
    SU(5): Data Latency=4 Reg=%110
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%106
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%105
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(7):   %111:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !925 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%111
    SU(9): Data Latency=4 Reg=%111
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %112:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !926 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%112
    SU(12): Data Latency=4 Reg=%112
    SU(9): Data Latency=4 Reg=%112
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 8
  Predecessors:
    SU(8): Data Latency=4 Reg=%112
    SU(7): Data Latency=4 Reg=%111
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%117
    SU(13): Out  Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(10):   %116:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !927 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%116
    SU(12): Out  Latency=0
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(11):   %115:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%115
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 8
  Predecessors:
    SU(11): Data Latency=4 Reg=%115
    SU(10): Data Latency=4 Reg=%116
    SU(10): Out  Latency=0
    SU(8): Data Latency=4 Reg=%112
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%116
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(13):   %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 4
  Predecessors:
    SU(12): Data Latency=4 Reg=%116
    SU(9): Data Latency=4 Reg=%117
    SU(9): Out  Latency=0
  Successors:
    SU(14): Data Latency=1 Reg=%117
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(14):   MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  # preds left       : 16
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(13): Data Latency=1 Reg=%117
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%112
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%111
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(15):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !935 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.18, debug-location !936; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 25
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 25
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !935 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(15) 22c
  BotQ.A BotLatency SU(15) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %111
  UpdateRegP: SU(9) %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(14) MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %112
  UpdateRegP: SU(9) %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FR32 -1    FR32X -1
  UpdateRegP: SU(12) %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
              to GR16 2
  UpdateRegP: SU(14) MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to FR32 1    FR32X 1
  LiveReg: %117
  UpdateRegP: SU(14) MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Scheduling SU(13) %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %117
  UpdateRegP: SU(13) %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
              to 
  LiveReg: %116
  UpdateRegP: SU(13) %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(13) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 9 
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %116
  UpdateRegP: SU(12) %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %115
  UpdateRegP: SU(12) %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(12) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 10 
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %115:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  Ready @12c
  BotQ.A BotLatency SU(11) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %116:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !927 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
Bottom Pressure:
GR16=4
  Ready @8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %112:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !926 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
Bottom Pressure:
GR16=2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %111:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !925 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
Bottom Pressure:

  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %105
  UpdateRegP: SU(5) %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
              to GR16 2
  UpdateRegP: SU(6) MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %106
  UpdateRegP: SU(4) %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
              to GR16 2
  UpdateRegP: SU(5) %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
              to 
  UpdateRegP: SU(6) MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to FR32 1    FR32X 1
  LiveReg: %110
  UpdateRegP: SU(6) MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to 
  Ready @13c
  BotQ.A BotLatency SU(6) 13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %110
  UpdateRegP: SU(5) %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
              to FR32 -1    FR32X -1
  Ready @17c
  BotQ.A BotLatency SU(5) 17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %110
  UpdateRegP: SU(4) %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %108
  UpdateRegP: SU(4) %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
              to FR32 -1    FR32X -1
  Ready @21c
  BotQ.A BotLatency SU(4) 21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %108:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !918 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @25c
  BotQ.A BotLatency SU(3) 25c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %110:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
Bottom Pressure:
GR16=4
  Ready @25c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %106:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !916 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
Bottom Pressure:
GR16=2
  Ready @25c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %105:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !914 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
Bottom Pressure:

  Ready @21c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %105:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !914 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
SU(1):   %106:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !916 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
SU(2):   %110:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
SU(3):   %108:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !918 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
SU(4):   %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
SU(5):   %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
SU(6):   MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
SU(7):   %111:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !925 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
SU(8):   %112:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !926 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
SU(9):   %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
SU(10):   %116:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !927 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
SU(11):   %115:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
SU(12):   %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
SU(13):   %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
SU(14):   MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
SU(15):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !935 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50

********** MI Scheduling **********
conj_grad:%bb.21 for.cond93
  From: %83:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !944 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
    To: JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !949; cg.c:526:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %83:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !944 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%83
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %83:gr32 = nsw SUB32rm %83:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !946 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%83
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%83
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %83:gr32 = nsw INC32r %83:gr32(tied-def 0), implicit-def dead $eflags, debug-location !947; cg.c:526:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%83
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%83
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %83:gr32, implicit-def $eflags, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%83
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !949; cg.c:526:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %83:gr32, implicit-def $eflags, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %83:gr32 = nsw INC32r %83:gr32(tied-def 0), implicit-def dead $eflags, debug-location !947; cg.c:526:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %83:gr32 = nsw SUB32rm %83:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !946 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %83:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !944 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %83:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !944 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
SU(1):   %83:gr32 = nsw SUB32rm %83:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !946 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
SU(2):   %83:gr32 = nsw INC32r %83:gr32(tied-def 0), implicit-def dead $eflags, debug-location !947; cg.c:526:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %83:gr32, implicit-def $eflags, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:526:23

********** MI Scheduling **********
conj_grad:%bb.22 for.body97
  From: %98:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !952 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
    To: JMP_1 %bb.21, debug-location !960; cg.c:526:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %98:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !952 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%98
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !953 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(6): Data Latency=4 Reg=%170
    SU(2): Data Latency=4 Reg=%170
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%170
    SU(0): Data Latency=4 Reg=%98
  Successors:
    SU(3): Data Latency=4 Reg=%103
    SU(3): Out  Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %103:fr64 = MULSDrr %103:fr64(tied-def 0), %103:fr64, debug-location !956; cg.c:527:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%103
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%103
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !957 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%103
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%103
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %103:fr64, debug-location !958 :: (store 8 into %ir.rho); cg.c:527:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%103
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %104:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !959; cg.c:526:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%170
  Successors:
    SU(7): Data Latency=1 Reg=%104
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %104:gr32, debug-location !959 :: (store 4 into %ir.j); cg.c:526:50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%104
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !960; cg.c:526:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %104:gr32, debug-location !959 :: (store 4 into %ir.j); cg.c:526:50
Bottom Pressure:
GR16=2
  LiveReg: %104
  UpdateRegP: SU(7) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %104:gr32, debug-location !959 :: (store 4 into %ir.j); cg.c:526:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %104:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !959; cg.c:526:50
Bottom Pressure:
GR16=2
  LiveReg: %170
  UpdateRegP: SU(2) %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(6) %104:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !959; cg.c:526:50
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %103:fr64, debug-location !958 :: (store 8 into %ir.rho); cg.c:527:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %103
  UpdateRegP: SU(5) MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %103:fr64, debug-location !958 :: (store 8 into %ir.rho); cg.c:527:17
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !957 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %103
  UpdateRegP: SU(4) %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !957 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %103:fr64 = MULSDrr %103:fr64(tied-def 0), %103:fr64, debug-location !956; cg.c:527:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %103
  UpdateRegP: SU(3) %103:fr64 = MULSDrr %103:fr64(tied-def 0), %103:fr64, debug-location !956; cg.c:527:30
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
Bottom Pressure:
GR16=4
  LiveReg: %98
  UpdateRegP: SU(2) %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !953 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
Bottom Pressure:
GR16=2
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %98:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !952 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
Bottom Pressure:

  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %98:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !952 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
SU(1):   %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !953 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
SU(2):   %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
SU(3):   %103:fr64 = MULSDrr %103:fr64(tied-def 0), %103:fr64, debug-location !956; cg.c:527:30
SU(4):   %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !957 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
SU(5):   MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %103:fr64, debug-location !958 :: (store 8 into %ir.rho); cg.c:527:17
SU(6):   %104:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !959; cg.c:526:50
SU(7):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %104:gr32, debug-location !959 :: (store 4 into %ir.j); cg.c:526:50

********** MI Scheduling **********
conj_grad:%bb.23 for.end106
  From: %86:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !963 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %86:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !963 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%86
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %86:fr64 = DIVSDrm %86:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !965 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%86
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%86
  Single Issue       : false;
SU(2):   MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %86:fr64, debug-location !966 :: (store 8 into %ir.beta); cg.c:533:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%86
  Single Issue       : false;
SU(3):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !967 :: (store 4 into %ir.j); cg.c:538:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !967 :: (store 4 into %ir.j); cg.c:538:16
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %86:fr64, debug-location !966 :: (store 8 into %ir.beta); cg.c:533:14
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %86:fr64 = DIVSDrm %86:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !965 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !963 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %86:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !963 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
SU(1):   %86:fr64 = DIVSDrm %86:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !965 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
SU(2):   MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %86:fr64, debug-location !966 :: (store 8 into %ir.beta); cg.c:533:14
SU(3):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !967 :: (store 4 into %ir.j); cg.c:538:16

********** MI Scheduling **********
conj_grad:%bb.24 for.cond108
  From: %90:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !972 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
    To: JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !977; cg.c:538:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %90:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !972 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%90
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %90:gr32 = nsw SUB32rm %90:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !974 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%90
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%90
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %90:gr32 = nsw INC32r %90:gr32(tied-def 0), implicit-def dead $eflags, debug-location !975; cg.c:538:44
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%90
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%90
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %90:gr32, implicit-def $eflags, debug-location !976 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%90
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !977; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %90:gr32, implicit-def $eflags, debug-location !976 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %90:gr32 = nsw INC32r %90:gr32(tied-def 0), implicit-def dead $eflags, debug-location !975; cg.c:538:44
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %90:gr32 = nsw SUB32rm %90:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !974 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %90:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !972 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %90:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !972 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
SU(1):   %90:gr32 = nsw SUB32rm %90:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !974 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
SU(2):   %90:gr32 = nsw INC32r %90:gr32(tied-def 0), implicit-def dead $eflags, debug-location !975; cg.c:538:44
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %90:gr32, implicit-def $eflags, debug-location !976 :: (dereferenceable load 4 from %ir.j); cg.c:538:23

********** MI Scheduling **********
conj_grad:%bb.25 for.body112
  From: %92:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !978 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
    To: JMP_1 %bb.24, debug-location !990; cg.c:538:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %92:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !978 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=%92
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %93:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !980 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%93
    SU(5): Data Latency=4 Reg=%93
    SU(4): Data Latency=4 Reg=%93
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %97:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%97
    SU(4): Out  Latency=0
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(3):   %95:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !982 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%95
    SU(4): Data Latency=4 Reg=%95
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(3): Data Latency=4 Reg=%95
    SU(2): Data Latency=4 Reg=%97
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%93
  Successors:
    SU(5): Data Latency=4 Reg=%97
    SU(5): Out  Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%97
    SU(4): Out  Latency=0
    SU(1): Data Latency=4 Reg=%93
    SU(0): Data Latency=4 Reg=%92
  Successors:
    SU(6): Data Latency=4 Reg=%97
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(6):   MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  # preds left       : 9
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(5): Data Latency=4 Reg=%97
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%95
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%93
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(7):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !989 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.24, debug-location !990; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !989 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(7) 12c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %95
  UpdateRegP: SU(4) %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
              to GR16 2
  UpdateRegP: SU(6) MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %93
  UpdateRegP: SU(4) %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
              to 
  UpdateRegP: SU(5) %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
              to GR16 2
  UpdateRegP: SU(6) MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to FR32 1    FR32X 1
  LiveReg: %97
  UpdateRegP: SU(6) MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %97
  UpdateRegP: SU(5) %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %92
  UpdateRegP: SU(5) %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
              to FR32 -1    FR32X -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %97
  UpdateRegP: SU(4) %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
              to FR32 -1    FR32X -1
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %95:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !982 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @15c
  BotQ.A BotLatency SU(3) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %97:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
Bottom Pressure:
GR16=4
  Ready @15c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %93:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !980 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
Bottom Pressure:
GR16=2
  Ready @15c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %92:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !978 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
Bottom Pressure:

  Ready @11c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %92:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !978 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
SU(1):   %93:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !980 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
SU(2):   %97:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
SU(3):   %95:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !982 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
SU(4):   %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
SU(5):   %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
SU(6):   MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
SU(7):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !989 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50

********** MI Scheduling **********
conj_grad:%bb.27 for.end126
  From: MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !997 :: (store 8 into %ir.sum); cg.c:548:9
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !997 :: (store 8 into %ir.sum); cg.c:548:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !998 :: (store 4 into %ir.j); cg.c:549:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !998 :: (store 4 into %ir.j); cg.c:549:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !997 :: (store 8 into %ir.sum); cg.c:548:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !997 :: (store 8 into %ir.sum); cg.c:548:9
SU(1):   MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !998 :: (store 4 into %ir.j); cg.c:549:12

********** MI Scheduling **********
conj_grad:%bb.28 for.cond127
  From: %24:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1003 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
    To: JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1008; cg.c:549:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %24:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1003 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%24
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %24:gr32 = nsw SUB32rm %24:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1005 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%24
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%24
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %24:gr32 = nsw INC32r %24:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1006; cg.c:549:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%24
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%24
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%24
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1008; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %24:gr32 = nsw INC32r %24:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1006; cg.c:549:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %24:gr32 = nsw SUB32rm %24:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1005 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %24:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1003 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %24:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1003 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
SU(1):   %24:gr32 = nsw SUB32rm %24:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1005 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
SU(2):   %24:gr32 = nsw INC32r %24:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1006; cg.c:549:40
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:549:19

********** MI Scheduling **********
conj_grad:%bb.29 for.body131
  From: MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1009 :: (store 8 into %ir.d); cg.c:550:11
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1009 :: (store 8 into %ir.d); cg.c:550:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %43:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1011 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%43
  Single Issue       : false;
SU(2):   %44:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(3):   %45:gr32 = MOV32rm %43:gr64, 4, %44:gr64_nosp, 0, $noreg, debug-location !1011 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%44
    SU(1): Data Latency=4 Reg=%43
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%45
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %45:gr32, debug-location !1014 :: (store 4 into %ir.k); cg.c:551:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%45
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %45:gr32, debug-location !1014 :: (store 4 into %ir.k); cg.c:551:16
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %45:gr32 = MOV32rm %43:gr64, 4, %44:gr64_nosp, 0, $noreg, debug-location !1011 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %44:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %43:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1011 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1009 :: (store 8 into %ir.d); cg.c:550:11
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1009 :: (store 8 into %ir.d); cg.c:550:11
SU(1):   %43:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1011 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
SU(2):   %44:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
SU(3):   %45:gr32 = MOV32rm %43:gr64, 4, %44:gr64_nosp, 0, $noreg, debug-location !1011 :: (load 4 from %ir.arrayidx133); cg.c:551:18
SU(4):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %45:gr32, debug-location !1014 :: (store 4 into %ir.k); cg.c:551:16

********** MI Scheduling **********
conj_grad:%bb.30 for.cond134
  From: %46:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
    To: JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1022; cg.c:551:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %46:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(1):   %47:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1018 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(2):   %48:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(3):   CMP32rm %46:gr32, %47:gr64, 4, %48:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%48
    SU(1): Data Latency=4 Reg=%47
    SU(0): Data Latency=4 Reg=%46
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1022; cg.c:551:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %46:gr32, %47:gr64, 4, %48:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:31
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %48:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %47:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1018 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %46:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %46:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
SU(1):   %47:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1018 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
SU(2):   %48:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
SU(3):   CMP32rm %46:gr32, %47:gr64, 4, %48:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:31

********** MI Scheduling **********
conj_grad:%bb.31 for.body139
  From: %53:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1025 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
    To: JMP_1 %bb.30, debug-location !1034; cg.c:551:9
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %53:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1025 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%53
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1026 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%171
    SU(5): Data Latency=4 Reg=%171
    SU(2): Data Latency=4 Reg=%171
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%171
    SU(0): Data Latency=4 Reg=%53
  Successors:
    SU(6): Data Latency=4 Reg=%61
    SU(6): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %57:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1027 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=4 Reg=%57
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %58:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%58
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(4): Data Latency=4 Reg=%58
    SU(1): Data Latency=4 Reg=%171
  Successors:
    SU(6): Data Latency=4 Reg=%59
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(5): Data Latency=4 Reg=%59
    SU(3): Data Latency=4 Reg=%57
    SU(2): Data Latency=4 Reg=%61
    SU(2): Out  Latency=0
  Successors:
    SU(7): Data Latency=4 Reg=%61
    SU(7): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   %61:fr64 = ADDSDrm %61:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(6): Data Latency=4 Reg=%61
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%61
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %61:fr64, debug-location !1032 :: (store 8 into %ir.d); cg.c:552:15
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%61
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %62:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1033; cg.c:551:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%171
  Successors:
    SU(10): Data Latency=1 Reg=%62
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %62:gr32, debug-location !1033 :: (store 4 into %ir.k); cg.c:551:49
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%62
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.30, debug-location !1034; cg.c:551:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %62:gr32, debug-location !1033 :: (store 4 into %ir.k); cg.c:551:49
Bottom Pressure:
GR16=2
  LiveReg: %62
  UpdateRegP: SU(10) MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %62:gr32, debug-location !1033 :: (store 4 into %ir.k); cg.c:551:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %62:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1033; cg.c:551:49
Bottom Pressure:
GR16=2
  LiveReg: %171
  UpdateRegP: SU(2) %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(5) %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
              to 
  UpdateRegP: SU(9) %62:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1033; cg.c:551:49
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %61:fr64, debug-location !1032 :: (store 8 into %ir.d); cg.c:552:15
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %61
  UpdateRegP: SU(8) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %61:fr64, debug-location !1032 :: (store 8 into %ir.d); cg.c:552:15
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 16c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %61:fr64 = ADDSDrm %61:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %61
  UpdateRegP: SU(7) %61:fr64 = ADDSDrm %61:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %61
  UpdateRegP: SU(6) %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %57
  UpdateRegP: SU(6) %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %59
  UpdateRegP: SU(6) %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(6) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 2 
  Cand SU(5) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(5) %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %58
  UpdateRegP: SU(5) %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(5) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) REG-MAX                            
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %58:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %57:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1027 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
Bottom Pressure:
GR16=4
  LiveReg: %53
  UpdateRegP: SU(2) %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
              to FR32 -1    FR32X -1
  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1026 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
Bottom Pressure:
GR16=2
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %53:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1025 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
Bottom Pressure:

  Ready @16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %53:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1025 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
SU(1):   %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1026 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
SU(2):   %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
SU(3):   %57:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1027 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
SU(4):   %58:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
SU(5):   %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
SU(6):   %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
SU(7):   %61:fr64 = ADDSDrm %61:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
SU(8):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %61:fr64, debug-location !1032 :: (store 8 into %ir.d); cg.c:552:15
SU(9):   %62:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1033; cg.c:551:49
SU(10):   MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %62:gr32, debug-location !1033 :: (store 4 into %ir.k); cg.c:551:49

********** MI Scheduling **********
conj_grad:%bb.32 for.end150
  From: %50:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1037 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
    To: JMP_1 %bb.28, debug-location !1042; cg.c:549:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %50:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1037 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%50
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %51:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1038 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%51
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %52:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1039 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%52
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %51:gr64, 8, %52:gr64_nosp, 0, $noreg, %50:fr64, debug-location !1040 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%52
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%51
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%50
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1041 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.28, debug-location !1042; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1041 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %51:gr64, 8, %52:gr64_nosp, 0, $noreg, %50:fr64, debug-location !1040 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %52:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1039 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %51:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1038 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1037 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %50:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1037 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
SU(1):   %51:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1038 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
SU(2):   %52:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1039 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
SU(3):   MOVSDmr %51:gr64, 8, %52:gr64_nosp, 0, $noreg, %50:fr64, debug-location !1040 :: (store 8 into %ir.arrayidx152); cg.c:554:14
SU(4):   INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1041 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46

********** MI Scheduling **********
conj_grad:%bb.34 for.cond156
  From: %29:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1050 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
    To: JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1055; cg.c:560:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1050 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%29
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %29:gr32 = nsw SUB32rm %29:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1052 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%29
    SU(2): Out  Latency=0
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   %29:gr32 = nsw INC32r %29:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1053; cg.c:560:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%29
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%29
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %29:gr32, implicit-def $eflags, debug-location !1054 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%29
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1055; cg.c:560:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %29:gr32, implicit-def $eflags, debug-location !1054 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
  Ready @4c
  BotQ.A TopLatency SU(3) 9c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %29:gr32 = nsw INC32r %29:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1053; cg.c:560:40
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %29:gr32 = nsw SUB32rm %29:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1052 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1050 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %29:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1050 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
SU(1):   %29:gr32 = nsw SUB32rm %29:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1052 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
SU(2):   %29:gr32 = nsw INC32r %29:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1053; cg.c:560:40
SU(3):   CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %29:gr32, implicit-def $eflags, debug-location !1054 :: (dereferenceable load 4 from %ir.j); cg.c:560:19

********** MI Scheduling **********
conj_grad:%bb.35 for.body160
  From: %34:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1056 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
    To: JMP_1 %bb.34, debug-location !1070; cg.c:560:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %34:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1056 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%34
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1058 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(9): Data Latency=4 Reg=%172
    SU(4): Data Latency=4 Reg=%172
    SU(2): Data Latency=4 Reg=%172
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%172
    SU(0): Data Latency=4 Reg=%34
  Successors:
    SU(4): Data Latency=4 Reg=%40
    SU(4): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %38:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%38
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%40
    SU(3): Data Latency=4 Reg=%38
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%172
  Successors:
    SU(6): Data Latency=4 Reg=%40
    SU(5): Data Latency=4 Reg=%40
    SU(6): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1062 :: (store 8 into %ir.d); cg.c:561:11
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%40
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %40:fr64 = MULSDrr %40:fr64(tied-def 0), %40:fr64, debug-location !1066; cg.c:562:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=4 Reg=%40
    SU(4): Out  Latency=0
  Successors:
    SU(7): Data Latency=1 Reg=%40
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %40:fr64 = ADDSDrm %40:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1067 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%40
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%40
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1068 :: (store 8 into %ir.sum); cg.c:562:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%40
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %42:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1069; cg.c:560:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%172
  Successors:
    SU(10): Data Latency=1 Reg=%42
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %42:gr32, debug-location !1069 :: (store 4 into %ir.j); cg.c:560:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%42
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.34, debug-location !1070; cg.c:560:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %42:gr32, debug-location !1069 :: (store 4 into %ir.j); cg.c:560:46
Bottom Pressure:
GR16=2
  LiveReg: %42
  UpdateRegP: SU(10) MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %42:gr32, debug-location !1069 :: (store 4 into %ir.j); cg.c:560:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %42:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1069; cg.c:560:46
Bottom Pressure:
GR16=2
  LiveReg: %172
  UpdateRegP: SU(2) %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(4) %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
              to GR16 2
  UpdateRegP: SU(9) %42:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1069; cg.c:560:46
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1068 :: (store 8 into %ir.sum); cg.c:562:13
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %40
  UpdateRegP: SU(8) MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1068 :: (store 8 into %ir.sum); cg.c:562:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 17c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %40:fr64 = ADDSDrm %40:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1067 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %40
  UpdateRegP: SU(7) %40:fr64 = ADDSDrm %40:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1067 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %40:fr64 = MULSDrr %40:fr64(tied-def 0), %40:fr64, debug-location !1066; cg.c:562:23
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %40
  UpdateRegP: SU(5) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1062 :: (store 8 into %ir.d); cg.c:561:11
              to 
  UpdateRegP: SU(6) %40:fr64 = MULSDrr %40:fr64(tied-def 0), %40:fr64, debug-location !1066; cg.c:562:23
              to FR32 -1    FR32X -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1062 :: (store 8 into %ir.d); cg.c:561:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %40
  UpdateRegP: SU(4) %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %38
  UpdateRegP: SU(4) %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
              to FR32 -1    FR32X -1
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(3) %38:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @13c
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
Bottom Pressure:
GR16=4
  LiveReg: %34
  UpdateRegP: SU(2) %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
              to FR32 -1    FR32X -1
  Ready @13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1058 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
Bottom Pressure:
GR16=2
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1056 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
Bottom Pressure:

  Ready @17c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %34:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1056 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
SU(1):   %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1058 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
SU(2):   %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
SU(3):   %38:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
SU(4):   %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
SU(5):   MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1062 :: (store 8 into %ir.d); cg.c:561:11
SU(6):   %40:fr64 = MULSDrr %40:fr64(tied-def 0), %40:fr64, debug-location !1066; cg.c:562:23
SU(7):   %40:fr64 = ADDSDrm %40:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1067 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
SU(8):   MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1068 :: (store 8 into %ir.sum); cg.c:562:13
SU(9):   %42:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1069; cg.c:560:46
SU(10):   MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %42:gr32, debug-location !1069 :: (store 4 into %ir.j); cg.c:560:46

********** MI Scheduling **********
conj_grad:%bb.36 for.end170
  From: %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1073 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
    To: JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1075; cg.c:565:6
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1073 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%0
  Single Issue       : false;
SU(1):   %31:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(2):   UCOMISDrr %0:fr64, %31:fr64, implicit-def $eflags, debug-location !1075; cg.c:565:6
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%31
    SU(0): Data Latency=4 Reg=%0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1075; cg.c:565:6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %0:fr64, %31:fr64, implicit-def $eflags, debug-location !1075; cg.c:565:6
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %31:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1073 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1073 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
SU(1):   %31:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %0:fr64, %31:fr64, implicit-def $eflags, debug-location !1075; cg.c:565:6

********** MI Scheduling **********
conj_grad:%bb.39 for.end170.split
  From: %33:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1075 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
    To: RET 0, debug-location !1077; cg.c:566:1
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %33:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1075 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%33
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOVSDmr %33:gr64, 1, $noreg, 0, $noreg, %165:fr64, debug-location !1076 :: (store 8 into %ir.158); cg.c:565:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%33
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET 0, debug-location !1077; cg.c:566:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %33:gr64, 1, $noreg, 0, $noreg, %165:fr64, debug-location !1076 :: (store 8 into %ir.158); cg.c:565:12
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %33:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1075 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %33:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1075 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
SU(1):   MOVSDmr %33:gr64, 1, $noreg, 0, $noreg, %165:fr64, debug-location !1076 :: (store 8 into %ir.158); cg.c:565:12

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)  0@0B-phi
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)  0@0B-phi
DIH [0B,96r:0)  0@0B-phi
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)  0@0B-phi
HDX [0B,64r:0)  0@0B-phi
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
R9B [0B,16r:0)  0@0B-phi
R9BH [0B,16r:0)  0@0B-phi
R9WH [0B,16r:0)  0@0B-phi
%0 [5152r,5232r:0)[5280B,5312r:0)  0@5152r weight:0.000000e+00
%4 [96r,112r:0)  0@96r weight:0.000000e+00
%5 [80r,128r:0)  0@80r weight:0.000000e+00
%6 [64r,144r:0)  0@64r weight:0.000000e+00
%7 [48r,160r:0)  0@48r weight:0.000000e+00
%8 [32r,176r:0)  0@32r weight:0.000000e+00
%9 [16r,192r:0)  0@16r weight:0.000000e+00
%12 [272r,304r:0)[304r,320r:1)  0@272r 1@304r weight:0.000000e+00
%17 [720r,752r:2)[752r,784r:0)[784r,800r:1)  0@752r 1@784r 2@720r weight:0.000000e+00
%19 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%24 [3952r,3984r:2)[3984r,4016r:0)[4016r,4032r:1)  0@3984r 1@4016r 2@3952r weight:0.000000e+00
%29 [4720r,4752r:2)[4752r,4784r:0)[4784r,4800r:1)  0@4752r 1@4784r 2@4720r weight:0.000000e+00
%31 [5168r,5184r:0)  0@5168r weight:0.000000e+00
%33 [5440r,5456r:0)  0@5440r weight:0.000000e+00
%34 [4864r,4912r:0)  0@4864r weight:0.000000e+00
%38 [4928r,4960r:0)  0@4928r weight:0.000000e+00
%40 [4912r,4960r:2)[4960r,5008r:0)[5008r,5040r:1)[5040r,5056r:3)  0@4960r 1@5008r 2@4912r 3@5040r weight:0.000000e+00
%42 [5088r,5104r:0)  0@5088r weight:0.000000e+00
%43 [4112r,4144r:0)  0@4112r weight:0.000000e+00
%44 [4128r,4144r:0)  0@4128r weight:0.000000e+00
%45 [4144r,4160r:0)  0@4144r weight:0.000000e+00
%46 [4192r,4240r:0)  0@4192r weight:0.000000e+00
%47 [4208r,4240r:0)  0@4208r weight:0.000000e+00
%48 [4224r,4240r:0)  0@4224r weight:0.000000e+00
%50 [4576r,4624r:0)  0@4576r weight:0.000000e+00
%51 [4592r,4624r:0)  0@4592r weight:0.000000e+00
%52 [4608r,4624r:0)  0@4608r weight:0.000000e+00
%53 [4304r,4352r:0)  0@4304r weight:0.000000e+00
%57 [4368r,4432r:0)  0@4368r weight:0.000000e+00
%58 [4384r,4400r:0)  0@4384r weight:0.000000e+00
%59 [4400r,4432r:0)  0@4400r weight:0.000000e+00
%61 [4352r,4432r:2)[4432r,4464r:0)[4464r,4480r:1)  0@4432r 1@4464r 2@4352r weight:0.000000e+00
%62 [4512r,4528r:0)  0@4512r weight:0.000000e+00
%66 [1232r,1264r:2)[1264r,1296r:0)[1296r,1312r:1)  0@1264r 1@1296r 2@1232r weight:0.000000e+00
%71 [2016r,2048r:2)[2048r,2080r:0)[2080r,2096r:1)  0@2048r 1@2080r 2@2016r weight:0.000000e+00
%73 [2400r,2472r:0)  0@2400r weight:0.000000e+00
%74 [2472r,2480r:0)[2480r,2488r:1)  0@2472r 1@2480r weight:0.000000e+00
%78 [2528r,2560r:2)[2560r,2592r:0)[2592r,2608r:1)  0@2560r 1@2592r 2@2528r weight:0.000000e+00
%83 [3056r,3088r:2)[3088r,3120r:0)[3120r,3136r:1)  0@3088r 1@3120r 2@3056r weight:0.000000e+00
%86 [3424r,3456r:0)[3456r,3472r:1)  0@3424r 1@3456r weight:0.000000e+00
%90 [3520r,3552r:2)[3552r,3584r:0)[3584r,3600r:1)  0@3552r 1@3584r 2@3520r weight:0.000000e+00
%92 [3664r,3776r:0)  0@3664r weight:0.000000e+00
%93 [3680r,3792r:0)  0@3680r weight:0.000000e+00
%95 [3712r,3792r:0)  0@3712r weight:0.000000e+00
%97 [3696r,3744r:2)[3744r,3776r:0)[3776r,3792r:1)  0@3744r 1@3776r 2@3696r weight:0.000000e+00
%98 [3200r,3248r:0)  0@3200r weight:0.000000e+00
%103 [3248r,3280r:2)[3280r,3312r:0)[3312r,3328r:1)  0@3280r 1@3312r 2@3248r weight:0.000000e+00
%104 [3360r,3376r:0)  0@3360r weight:0.000000e+00
%105 [2672r,2800r:0)  0@2672r weight:0.000000e+00
%106 [2688r,2800r:0)  0@2688r weight:0.000000e+00
%108 [2720r,2752r:0)  0@2720r weight:0.000000e+00
%110 [2704r,2752r:2)[2752r,2784r:0)[2784r,2800r:1)  0@2752r 1@2784r 2@2704r weight:0.000000e+00
%111 [2816r,2960r:0)  0@2816r weight:0.000000e+00
%112 [2832r,2960r:0)  0@2832r weight:0.000000e+00
%115 [2880r,2912r:0)  0@2880r weight:0.000000e+00
%116 [2864r,2912r:0)[2912r,2944r:1)  0@2864r 1@2912r weight:0.000000e+00
%117 [2848r,2944r:0)[2944r,2960r:1)  0@2848r 1@2944r weight:0.000000e+00
%118 [2160r,2208r:0)  0@2160r weight:0.000000e+00
%122 [2224r,2256r:0)  0@2224r weight:0.000000e+00
%124 [2208r,2256r:2)[2256r,2288r:0)[2288r,2304r:1)  0@2256r 1@2288r 2@2208r weight:0.000000e+00
%125 [2336r,2352r:0)  0@2336r weight:0.000000e+00
%126 [1392r,1424r:0)  0@1392r weight:0.000000e+00
%127 [1408r,1424r:0)  0@1408r weight:0.000000e+00
%128 [1424r,1440r:0)  0@1424r weight:0.000000e+00
%129 [1472r,1520r:0)  0@1472r weight:0.000000e+00
%130 [1488r,1520r:0)  0@1488r weight:0.000000e+00
%131 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%133 [1856r,1904r:0)  0@1856r weight:0.000000e+00
%134 [1872r,1904r:0)  0@1872r weight:0.000000e+00
%135 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%136 [1584r,1632r:0)  0@1584r weight:0.000000e+00
%140 [1648r,1712r:0)  0@1648r weight:0.000000e+00
%141 [1664r,1680r:0)  0@1664r weight:0.000000e+00
%142 [1680r,1712r:0)  0@1680r weight:0.000000e+00
%144 [1632r,1712r:2)[1712r,1744r:0)[1744r,1760r:1)  0@1712r 1@1744r 2@1632r weight:0.000000e+00
%145 [1792r,1808r:0)  0@1792r weight:0.000000e+00
%146 [864r,912r:0)  0@864r weight:0.000000e+00
%151 [912r,944r:2)[944r,976r:0)[976r,992r:1)  0@944r 1@976r 2@912r weight:0.000000e+00
%152 [1024r,1040r:0)  0@1024r weight:0.000000e+00
%153 [384r,416r:0)  0@384r weight:0.000000e+00
%154 [400r,416r:0)  0@400r weight:0.000000e+00
%155 [432r,464r:0)  0@432r weight:0.000000e+00
%156 [448r,464r:0)  0@448r weight:0.000000e+00
%157 [480r,512r:0)  0@480r weight:0.000000e+00
%158 [496r,544r:0)  0@496r weight:0.000000e+00
%159 [512r,544r:0)  0@512r weight:0.000000e+00
%160 [528r,544r:0)  0@528r weight:0.000000e+00
%161 [560r,592r:0)  0@560r weight:0.000000e+00
%162 [576r,624r:0)  0@576r weight:0.000000e+00
%163 [592r,624r:0)  0@592r weight:0.000000e+00
%164 [608r,624r:0)  0@608r weight:0.000000e+00
%165 [5232r,5280B:0)[5360r,5408B:1)[5408B,5456r:2)  0@5232r 1@5360r 2@5408B-phi weight:0.000000e+00
%166 [880r,1024r:0)  0@880r weight:0.000000e+00
%167 [1600r,1792r:0)  0@1600r weight:0.000000e+00
%168 [2176r,2336r:0)  0@2176r weight:0.000000e+00
%170 [3216r,3360r:0)  0@3216r weight:0.000000e+00
%171 [4320r,4512r:0)  0@4320r weight:0.000000e+00
%172 [4880r,5088r:0)  0@4880r weight:0.000000e+00
RegMasks: 5328r
********** MACHINEINSTRS **********
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=8, align=8, at location [SP+8]
  fi#15: size=8, align=8, at location [SP+8]
  fi#16: size=8, align=8, at location [SP+8]
  fi#17: size=8, align=8, at location [SP+8]
  fi#18: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %4, $rsi in %5, $rdx in %6, $rcx in %7, $r8 in %8, $r9 in %9

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
16B	  %9:gr64 = COPY $r9
32B	  %8:gr64 = COPY $r8
48B	  %7:gr64 = COPY $rcx
64B	  %6:gr64 = COPY $rdx
80B	  %5:gr64 = COPY $rsi
96B	  %4:gr64 = COPY $rdi
112B	  MOV64mr %stack.0.colidx.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.colidx.addr)
128B	  MOV64mr %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, %5:gr64 :: (store 8 into %ir.rowstr.addr)
144B	  MOV64mr %stack.2.x.addr, 1, $noreg, 0, $noreg, %6:gr64 :: (store 8 into %ir.x.addr)
160B	  MOV64mr %stack.3.z.addr, 1, $noreg, 0, $noreg, %7:gr64 :: (store 8 into %ir.z.addr)
176B	  MOV64mr %stack.4.a.addr, 1, $noreg, 0, $noreg, %8:gr64 :: (store 8 into %ir.a.addr)
192B	  MOV64mr %stack.5.p.addr, 1, $noreg, 0, $noreg, %9:gr64 :: (store 8 into %ir.p.addr)
208B	  MOV32mi %stack.12.cgitmax, 1, $noreg, 0, $noreg, 25, debug-location !747 :: (store 4 into %ir.cgitmax); cg.c:406:15
224B	  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !760 :: (store 8 into %ir.rho); cg.c:409:9
240B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !761 :: (store 4 into %ir.j); cg.c:414:12

256B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

272B	  %12:gr32 = MOV32rm $rip, 1, $noreg, @naa, $noreg, debug-location !766 :: (dereferenceable load 4 from @naa); cg.c:414:21
304B	  %12:gr32 = nsw INC32r %12:gr32(tied-def 0), implicit-def dead $eflags, debug-location !767; cg.c:414:25
320B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %12:gr32, implicit-def $eflags, debug-location !768 :: (dereferenceable load 4 from %ir.j); cg.c:414:19
336B	  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !769; cg.c:414:5
352B	  JMP_1 %bb.2, debug-location !769; cg.c:414:5

368B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

384B	  %153:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !770 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
400B	  %154:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !772 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
416B	  MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !773 :: (store 8 into %ir.arrayidx); cg.c:415:14
432B	  %155:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !774 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
448B	  %156:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
464B	  MOV64mi32 %155:gr64, 8, %156:gr64_nosp, 0, $noreg, 0, debug-location !776 :: (store 8 into %ir.arrayidx2); cg.c:416:14
480B	  %157:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !777 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
496B	  %158:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
512B	  %159:fr64 = MOVSDrm_alt %157:gr64, 8, %158:gr64_nosp, 0, $noreg, debug-location !777 :: (load 8 from %ir.arrayidx4); cg.c:417:16
528B	  %160:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !779 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
544B	  MOVSDmr %160:gr64, 8, %158:gr64_nosp, 0, $noreg, %159:fr64, debug-location !781 :: (store 8 into %ir.arrayidx6); cg.c:417:14
560B	  %161:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
576B	  %162:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !783 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
592B	  %163:fr64 = MOVSDrm_alt %161:gr64, 8, %162:gr64_nosp, 0, $noreg, debug-location !782 :: (load 8 from %ir.arrayidx8); cg.c:418:16
608B	  %164:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !784 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
624B	  MOVSDmr %164:gr64, 8, %162:gr64_nosp, 0, $noreg, %163:fr64, debug-location !786 :: (store 8 into %ir.arrayidx10); cg.c:418:14
640B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !787 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:414:31
656B	  JMP_1 %bb.1, debug-location !788; cg.c:414:5

672B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

688B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !791 :: (store 4 into %ir.j); cg.c:425:12

704B	bb.4.for.cond11:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

720B	  %17:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !796 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
752B	  %17:gr32 = nsw SUB32rm %17:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !798 :: (dereferenceable load 4 from @firstcol); cg.c:425:29
784B	  %17:gr32 = nsw INC32r %17:gr32(tied-def 0), implicit-def dead $eflags, debug-location !799; cg.c:425:40
800B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !800 :: (dereferenceable load 4 from %ir.j); cg.c:425:19
816B	  JCC_1 %bb.6, 13, implicit killed $eflags, debug-location !801; cg.c:425:5
832B	  JMP_1 %bb.5, debug-location !801; cg.c:425:5

848B	bb.5.for.body14:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

864B	  %146:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !804 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
880B	  %166:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !805 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
912B	  %151:fr64 = MOVSDrm_alt %146:gr64, 8, %166:gr64_nosp, 0, $noreg, debug-location !804 :: (load 8 from %ir.arrayidx18); cg.c:426:21
944B	  %151:fr64 = MULSDrr %151:fr64(tied-def 0), %151:fr64, debug-location !808; cg.c:426:26
976B	  %151:fr64 = ADDSDrm %151:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !809 :: (dereferenceable load 8 from %ir.rho); cg.c:426:19
992B	  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %151:fr64, debug-location !810 :: (store 8 into %ir.rho); cg.c:426:13
1024B	  %152:gr32 = LEA64_32r %166:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !811; cg.c:425:46
1040B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %152:gr32, debug-location !811 :: (store 4 into %ir.j); cg.c:425:46
1056B	  JMP_1 %bb.4, debug-location !812; cg.c:425:5

1072B	bb.6.for.end22:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1088B	  MOV32mi %stack.11.cgit, 1, $noreg, 0, $noreg, 1, debug-location !815 :: (store 4 into %ir.cgit); cg.c:434:15

1104B	bb.7.for.cond23:
	; predecessors: %bb.6, %bb.26
	  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

1120B	  %19:gr32 = MOV32rm %stack.11.cgit, 1, $noreg, 0, $noreg, debug-location !818 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
1136B	  CMP32rm %19:gr32, %stack.12.cgitmax, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !821 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:25
1152B	  JCC_1 %bb.27, 15, implicit killed $eflags, debug-location !822; cg.c:434:5
1168B	  JMP_1 %bb.8, debug-location !822; cg.c:434:5

1184B	bb.8.for.body25:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1200B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !823 :: (store 4 into %ir.j); cg.c:447:16

1216B	bb.9.for.cond26:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1232B	  %66:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !829 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
1264B	  %66:gr32 = nsw SUB32rm %66:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !831 :: (dereferenceable load 4 from @firstrow); cg.c:447:33
1296B	  %66:gr32 = nsw INC32r %66:gr32(tied-def 0), implicit-def dead $eflags, debug-location !832; cg.c:447:44
1312B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %66:gr32, implicit-def $eflags, debug-location !833 :: (dereferenceable load 4 from %ir.j); cg.c:447:23
1328B	  JCC_1 %bb.14, 13, implicit killed $eflags, debug-location !834; cg.c:447:9
1344B	  JMP_1 %bb.10, debug-location !834; cg.c:447:9

1360B	bb.10.for.body30:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1376B	  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !835 :: (store 8 into %ir.sum); cg.c:448:17
1392B	  %126:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !837 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
1408B	  %127:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !839 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
1424B	  %128:gr32 = MOV32rm %126:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !837 :: (load 4 from %ir.arrayidx32); cg.c:449:22
1440B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %128:gr32, debug-location !840 :: (store 4 into %ir.k); cg.c:449:20

1456B	bb.11.for.cond33:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1472B	  %129:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !842 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
1488B	  %130:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !844 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
1504B	  %131:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !845 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
1520B	  CMP32rm %129:gr32, %130:gr64, 4, %131:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:35
1536B	  JCC_1 %bb.13, 13, implicit killed $eflags, debug-location !848; cg.c:449:13
1552B	  JMP_1 %bb.12, debug-location !848; cg.c:449:13

1568B	bb.12.for.body38:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1584B	  %136:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !851 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
1600B	  %167:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !852 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
1632B	  %144:fr64 = MOVSDrm_alt %136:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !851 :: (load 8 from %ir.arrayidx40); cg.c:450:29
1648B	  %140:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !853 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
1664B	  %141:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !854 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
1680B	  %142:gr64_nosp = MOVSX64rm32 %141:gr64, 4, %167:gr64_nosp, 0, $noreg, debug-location !854 :: (load 4 from %ir.arrayidx42); cg.c:450:38
1712B	  %144:fr64 = MULSDrm %144:fr64(tied-def 0), %140:gr64, 8, %142:gr64_nosp, 0, $noreg, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:34
1744B	  %144:fr64 = ADDSDrm %144:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !857 :: (dereferenceable load 8 from %ir.sum); cg.c:450:27
1760B	  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %144:fr64, debug-location !858 :: (store 8 into %ir.sum); cg.c:450:21
1792B	  %145:gr32 = LEA64_32r %167:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !859; cg.c:449:53
1808B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %145:gr32, debug-location !859 :: (store 4 into %ir.k); cg.c:449:53
1824B	  JMP_1 %bb.11, debug-location !860; cg.c:449:13

1840B	bb.13.for.end49:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1856B	  %133:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !863 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
1872B	  %134:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !864 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
1888B	  %135:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !865 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
1904B	  MOVSDmr %134:gr64, 8, %135:gr64_nosp, 0, $noreg, %133:fr64, debug-location !866 :: (store 8 into %ir.arrayidx51); cg.c:452:18
1920B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !867 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:447:50
1936B	  JMP_1 %bb.9, debug-location !868; cg.c:447:9

1952B	bb.14.for.end54:
	; predecessors: %bb.9
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

1968B	  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !871 :: (store 8 into %ir.d); cg.c:496:11
1984B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !872 :: (store 4 into %ir.j); cg.c:497:16

2000B	bb.15.for.cond55:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

2016B	  %71:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !877 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
2048B	  %71:gr32 = nsw SUB32rm %71:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !879 :: (dereferenceable load 4 from @firstcol); cg.c:497:33
2080B	  %71:gr32 = nsw INC32r %71:gr32(tied-def 0), implicit-def dead $eflags, debug-location !880; cg.c:497:44
2096B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %71:gr32, implicit-def $eflags, debug-location !881 :: (dereferenceable load 4 from %ir.j); cg.c:497:23
2112B	  JCC_1 %bb.17, 13, implicit killed $eflags, debug-location !882; cg.c:497:9
2128B	  JMP_1 %bb.16, debug-location !882; cg.c:497:9

2144B	bb.16.for.body59:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2160B	  %118:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !885 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
2176B	  %168:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !886 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
2208B	  %124:fr64 = MOVSDrm_alt %118:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !885 :: (load 8 from %ir.arrayidx61); cg.c:498:21
2224B	  %122:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !887 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
2256B	  %124:fr64 = MULSDrm %124:fr64(tied-def 0), %122:gr64, 8, %168:gr64_nosp, 0, $noreg, debug-location !889 :: (load 8 from %ir.arrayidx63); cg.c:498:26
2288B	  %124:fr64 = ADDSDrm %124:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !890 :: (dereferenceable load 8 from %ir.d); cg.c:498:19
2304B	  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %124:fr64, debug-location !891 :: (store 8 into %ir.d); cg.c:498:15
2336B	  %125:gr32 = LEA64_32r %168:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !892; cg.c:497:50
2352B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %125:gr32, debug-location !892 :: (store 4 into %ir.j); cg.c:497:50
2368B	  JMP_1 %bb.15, debug-location !893; cg.c:497:9

2384B	bb.17.for.end68:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2400B	  %73:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !896 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
2464B	  MOVSDmr %stack.16.rho0, 1, $noreg, 0, $noreg, %73:fr64, debug-location !901 :: (store 8 into %ir.rho0); cg.c:509:14
2472B	  %74:fr64 = COPY %73:fr64, debug-location !898; cg.c:504:21
2480B	  %74:fr64 = DIVSDrm %74:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !898 :: (dereferenceable load 8 from %ir.d); cg.c:504:21
2488B	  MOVSDmr %stack.17.alpha, 1, $noreg, 0, $noreg, %74:fr64, debug-location !899 :: (store 8 into %ir.alpha); cg.c:504:15
2496B	  MOV64mi32 %stack.15.rho, 1, $noreg, 0, $noreg, 0, debug-location !902 :: (store 8 into %ir.rho); cg.c:515:13
2504B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !903 :: (store 4 into %ir.j); cg.c:516:16

2512B	bb.18.for.cond69:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

2528B	  %78:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !908 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
2560B	  %78:gr32 = nsw SUB32rm %78:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !910 :: (dereferenceable load 4 from @firstcol); cg.c:516:33
2592B	  %78:gr32 = nsw INC32r %78:gr32(tied-def 0), implicit-def dead $eflags, debug-location !911; cg.c:516:44
2608B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %78:gr32, implicit-def $eflags, debug-location !912 :: (dereferenceable load 4 from %ir.j); cg.c:516:23
2624B	  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !913; cg.c:516:9
2640B	  JMP_1 %bb.19, debug-location !913; cg.c:516:9

2656B	bb.19.for.body73:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2672B	  %105:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !914 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
2688B	  %106:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !916 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
2704B	  %110:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !917 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
2720B	  %108:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !918 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
2752B	  %110:fr64 = MULSDrm %110:fr64(tied-def 0), %108:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !920 :: (load 8 from %ir.arrayidx77); cg.c:517:33
2784B	  %110:fr64 = ADDSDrm %110:fr64(tied-def 0), %105:gr64, 8, %106:gr64_nosp, 0, $noreg, debug-location !921 :: (load 8 from %ir.arrayidx75); cg.c:517:25
2800B	  MOVSDmr %105:gr64, 8, %106:gr64_nosp, 0, $noreg, %110:fr64, debug-location !924 :: (store 8 into %ir.arrayidx81); cg.c:517:18
2816B	  %111:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !925 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
2832B	  %112:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !926 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
2848B	  %117:fr64 = MOVSDrm_alt %111:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !925 :: (load 8 from %ir.arrayidx83); cg.c:518:20
2864B	  %116:fr64 = MOVSDrm_alt %stack.17.alpha, 1, $noreg, 0, $noreg, debug-location !927 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
2880B	  %115:gr64 = MOV64rm %fixed-stack.2, 1, $noreg, 0, $noreg, debug-location !928 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
2912B	  %116:fr64 = MULSDrm %116:fr64(tied-def 0), %115:gr64, 8, %112:gr64_nosp, 0, $noreg, debug-location !930 :: (load 8 from %ir.arrayidx85); cg.c:518:33
2944B	  %117:fr64 = SUBSDrr %117:fr64(tied-def 0), %116:fr64, debug-location !931; cg.c:518:25
2960B	  MOVSDmr %111:gr64, 8, %112:gr64_nosp, 0, $noreg, %117:fr64, debug-location !934 :: (store 8 into %ir.arrayidx89); cg.c:518:18
2976B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !935 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:516:50
2992B	  JMP_1 %bb.18, debug-location !936; cg.c:516:9

3008B	bb.20.for.end92:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3024B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !939 :: (store 4 into %ir.j); cg.c:526:16

3040B	bb.21.for.cond93:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

3056B	  %83:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !944 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
3088B	  %83:gr32 = nsw SUB32rm %83:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !946 :: (dereferenceable load 4 from @firstcol); cg.c:526:33
3120B	  %83:gr32 = nsw INC32r %83:gr32(tied-def 0), implicit-def dead $eflags, debug-location !947; cg.c:526:44
3136B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %83:gr32, implicit-def $eflags, debug-location !948 :: (dereferenceable load 4 from %ir.j); cg.c:526:23
3152B	  JCC_1 %bb.23, 13, implicit killed $eflags, debug-location !949; cg.c:526:9
3168B	  JMP_1 %bb.22, debug-location !949; cg.c:526:9

3184B	bb.22.for.body97:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3200B	  %98:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !952 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
3216B	  %170:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !953 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
3248B	  %103:fr64 = MOVSDrm_alt %98:gr64, 8, %170:gr64_nosp, 0, $noreg, debug-location !952 :: (load 8 from %ir.arrayidx101); cg.c:527:25
3280B	  %103:fr64 = MULSDrr %103:fr64(tied-def 0), %103:fr64, debug-location !956; cg.c:527:30
3312B	  %103:fr64 = ADDSDrm %103:fr64(tied-def 0), %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !957 :: (dereferenceable load 8 from %ir.rho); cg.c:527:23
3328B	  MOVSDmr %stack.15.rho, 1, $noreg, 0, $noreg, %103:fr64, debug-location !958 :: (store 8 into %ir.rho); cg.c:527:17
3360B	  %104:gr32 = LEA64_32r %170:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !959; cg.c:526:50
3376B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %104:gr32, debug-location !959 :: (store 4 into %ir.j); cg.c:526:50
3392B	  JMP_1 %bb.21, debug-location !960; cg.c:526:9

3408B	bb.23.for.end106:
	; predecessors: %bb.21
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3424B	  %86:fr64 = MOVSDrm_alt %stack.15.rho, 1, $noreg, 0, $noreg, debug-location !963 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
3456B	  %86:fr64 = DIVSDrm %86:fr64(tied-def 0), %stack.16.rho0, 1, $noreg, 0, $noreg, debug-location !965 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:20
3472B	  MOVSDmr %stack.18.beta, 1, $noreg, 0, $noreg, %86:fr64, debug-location !966 :: (store 8 into %ir.beta); cg.c:533:14
3488B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !967 :: (store 4 into %ir.j); cg.c:538:16

3504B	bb.24.for.cond108:
	; predecessors: %bb.23, %bb.25
	  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

3520B	  %90:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !972 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
3552B	  %90:gr32 = nsw SUB32rm %90:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !974 :: (dereferenceable load 4 from @firstcol); cg.c:538:33
3584B	  %90:gr32 = nsw INC32r %90:gr32(tied-def 0), implicit-def dead $eflags, debug-location !975; cg.c:538:44
3600B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %90:gr32, implicit-def $eflags, debug-location !976 :: (dereferenceable load 4 from %ir.j); cg.c:538:23
3616B	  JCC_1 %bb.26, 13, implicit killed $eflags, debug-location !977; cg.c:538:9
3632B	  JMP_1 %bb.25, debug-location !977; cg.c:538:9

3648B	bb.25.for.body112:
	; predecessors: %bb.24
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3664B	  %92:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !978 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
3680B	  %93:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !980 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
3696B	  %97:fr64 = MOVSDrm_alt %stack.18.beta, 1, $noreg, 0, $noreg, debug-location !981 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
3712B	  %95:gr64 = MOV64rm %stack.5.p.addr, 1, $noreg, 0, $noreg, debug-location !982 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
3744B	  %97:fr64 = MULSDrm %97:fr64(tied-def 0), %95:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !984 :: (load 8 from %ir.arrayidx116); cg.c:539:32
3776B	  %97:fr64 = ADDSDrm %97:fr64(tied-def 0), %92:gr64, 8, %93:gr64_nosp, 0, $noreg, debug-location !985 :: (load 8 from %ir.arrayidx114); cg.c:539:25
3792B	  MOVSDmr %95:gr64, 8, %93:gr64_nosp, 0, $noreg, %97:fr64, debug-location !988 :: (store 8 into %ir.arrayidx120); cg.c:539:18
3808B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !989 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:538:50
3824B	  JMP_1 %bb.24, debug-location !990; cg.c:538:9

3840B	bb.26.for.end123:
	; predecessors: %bb.24
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

3856B	  INC32m %stack.11.cgit, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !993 :: (store 4 into %ir.cgit), (dereferenceable load 4 from %ir.cgit); cg.c:434:41
3872B	  JMP_1 %bb.7, debug-location !994; cg.c:434:5

3888B	bb.27.for.end126:
	; predecessors: %bb.7
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

3904B	  MOV64mi32 %stack.14.sum, 1, $noreg, 0, $noreg, 0, debug-location !997 :: (store 8 into %ir.sum); cg.c:548:9
3920B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !998 :: (store 4 into %ir.j); cg.c:549:12

3936B	bb.28.for.cond127:
	; predecessors: %bb.27, %bb.32
	  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

3952B	  %24:gr32 = MOV32rm $rip, 1, $noreg, @lastrow, $noreg, debug-location !1003 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
3984B	  %24:gr32 = nsw SUB32rm %24:gr32(tied-def 0), $rip, 1, $noreg, @firstrow, $noreg, implicit-def dead $eflags, debug-location !1005 :: (dereferenceable load 4 from @firstrow); cg.c:549:29
4016B	  %24:gr32 = nsw INC32r %24:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1006; cg.c:549:40
4032B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !1007 :: (dereferenceable load 4 from %ir.j); cg.c:549:19
4048B	  JCC_1 %bb.33, 13, implicit killed $eflags, debug-location !1008; cg.c:549:5
4064B	  JMP_1 %bb.29, debug-location !1008; cg.c:549:5

4080B	bb.29.for.body131:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4096B	  MOV64mi32 %stack.13.d, 1, $noreg, 0, $noreg, 0, debug-location !1009 :: (store 8 into %ir.d); cg.c:550:11
4112B	  %43:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1011 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
4128B	  %44:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1013 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
4144B	  %45:gr32 = MOV32rm %43:gr64, 4, %44:gr64_nosp, 0, $noreg, debug-location !1011 :: (load 4 from %ir.arrayidx133); cg.c:551:18
4160B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %45:gr32, debug-location !1014 :: (store 4 into %ir.k); cg.c:551:16

4176B	bb.30.for.cond134:
	; predecessors: %bb.29, %bb.31
	  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

4192B	  %46:gr32 = MOV32rm %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1016 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
4208B	  %47:gr64 = MOV64rm %stack.1.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1018 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
4224B	  %48:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1019 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
4240B	  CMP32rm %46:gr32, %47:gr64, 4, %48:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:31
4256B	  JCC_1 %bb.32, 13, implicit killed $eflags, debug-location !1022; cg.c:551:9
4272B	  JMP_1 %bb.31, debug-location !1022; cg.c:551:9

4288B	bb.31.for.body139:
	; predecessors: %bb.30
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4304B	  %53:gr64 = MOV64rm %stack.4.a.addr, 1, $noreg, 0, $noreg, debug-location !1025 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
4320B	  %171:gr64_nosp = MOVSX64rm32 %stack.10.k, 1, $noreg, 0, $noreg, debug-location !1026 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
4352B	  %61:fr64 = MOVSDrm_alt %53:gr64, 8, %171:gr64_nosp, 0, $noreg, debug-location !1025 :: (load 8 from %ir.arrayidx141); cg.c:552:21
4368B	  %57:gr64 = MOV64rm %stack.3.z.addr, 1, $noreg, 0, $noreg, debug-location !1027 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
4384B	  %58:gr64 = MOV64rm %stack.0.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1028 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
4400B	  %59:gr64_nosp = MOVSX64rm32 %58:gr64, 4, %171:gr64_nosp, 0, $noreg, debug-location !1028 :: (load 4 from %ir.arrayidx143); cg.c:552:30
4432B	  %61:fr64 = MULSDrm %61:fr64(tied-def 0), %57:gr64, 8, %59:gr64_nosp, 0, $noreg, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:26
4464B	  %61:fr64 = ADDSDrm %61:fr64(tied-def 0), %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1031 :: (dereferenceable load 8 from %ir.d); cg.c:552:19
4480B	  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %61:fr64, debug-location !1032 :: (store 8 into %ir.d); cg.c:552:15
4512B	  %62:gr32 = LEA64_32r %171:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1033; cg.c:551:49
4528B	  MOV32mr %stack.10.k, 1, $noreg, 0, $noreg, %62:gr32, debug-location !1033 :: (store 4 into %ir.k); cg.c:551:49
4544B	  JMP_1 %bb.30, debug-location !1034; cg.c:551:9

4560B	bb.32.for.end150:
	; predecessors: %bb.30
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4576B	  %50:fr64 = MOVSDrm_alt %stack.13.d, 1, $noreg, 0, $noreg, debug-location !1037 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
4592B	  %51:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1038 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
4608B	  %52:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1039 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
4624B	  MOVSDmr %51:gr64, 8, %52:gr64_nosp, 0, $noreg, %50:fr64, debug-location !1040 :: (store 8 into %ir.arrayidx152); cg.c:554:14
4640B	  INC32m %stack.9.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1041 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:549:46
4656B	  JMP_1 %bb.28, debug-location !1042; cg.c:549:5

4672B	bb.33.for.end155:
	; predecessors: %bb.28
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

4688B	  MOV32mi %stack.9.j, 1, $noreg, 0, $noreg, 0, debug-location !1045 :: (store 4 into %ir.j); cg.c:560:12

4704B	bb.34.for.cond156:
	; predecessors: %bb.33, %bb.35
	  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

4720B	  %29:gr32 = MOV32rm $rip, 1, $noreg, @lastcol, $noreg, debug-location !1050 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
4752B	  %29:gr32 = nsw SUB32rm %29:gr32(tied-def 0), $rip, 1, $noreg, @firstcol, $noreg, implicit-def dead $eflags, debug-location !1052 :: (dereferenceable load 4 from @firstcol); cg.c:560:29
4784B	  %29:gr32 = nsw INC32r %29:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1053; cg.c:560:40
4800B	  CMP32mr %stack.9.j, 1, $noreg, 0, $noreg, %29:gr32, implicit-def $eflags, debug-location !1054 :: (dereferenceable load 4 from %ir.j); cg.c:560:19
4816B	  JCC_1 %bb.36, 13, implicit killed $eflags, debug-location !1055; cg.c:560:5
4832B	  JMP_1 %bb.35, debug-location !1055; cg.c:560:5

4848B	bb.35.for.body160:
	; predecessors: %bb.34
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

4864B	  %34:gr64 = MOV64rm %stack.2.x.addr, 1, $noreg, 0, $noreg, debug-location !1056 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
4880B	  %172:gr64_nosp = MOVSX64rm32 %stack.9.j, 1, $noreg, 0, $noreg, debug-location !1058 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
4912B	  %40:fr64 = MOVSDrm_alt %34:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1056 :: (load 8 from %ir.arrayidx162); cg.c:561:13
4928B	  %38:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1059 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
4960B	  %40:fr64 = SUBSDrm %40:fr64(tied-def 0), %38:gr64, 8, %172:gr64_nosp, 0, $noreg, debug-location !1061 :: (load 8 from %ir.arrayidx164); cg.c:561:18
4976B	  MOVSDmr %stack.13.d, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1062 :: (store 8 into %ir.d); cg.c:561:11
5008B	  %40:fr64 = MULSDrr %40:fr64(tied-def 0), %40:fr64, debug-location !1066; cg.c:562:23
5040B	  %40:fr64 = ADDSDrm %40:fr64(tied-def 0), %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1067 :: (dereferenceable load 8 from %ir.sum); cg.c:562:19
5056B	  MOVSDmr %stack.14.sum, 1, $noreg, 0, $noreg, %40:fr64, debug-location !1068 :: (store 8 into %ir.sum); cg.c:562:13
5088B	  %42:gr32 = LEA64_32r %172:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1069; cg.c:560:46
5104B	  MOV32mr %stack.9.j, 1, $noreg, 0, $noreg, %42:gr32, debug-location !1069 :: (store 4 into %ir.j); cg.c:560:46
5120B	  JMP_1 %bb.34, debug-location !1070; cg.c:560:5

5136B	bb.36.for.end170:
	; predecessors: %bb.34
	  successors: %bb.37(0x40000000), %bb.38(0x40000000); %bb.37(50.00%), %bb.38(50.00%)

5152B	  %0:fr64 = MOVSDrm_alt %stack.14.sum, 1, $noreg, 0, $noreg, debug-location !1073 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
5168B	  %31:fr64 = FsFLD0SD
5184B	  UCOMISDrr %0:fr64, %31:fr64, implicit-def $eflags, debug-location !1075; cg.c:565:6
5200B	  JCC_1 %bb.38, 2, implicit killed $eflags, debug-location !1075; cg.c:565:6

5216B	bb.37:
	; predecessors: %bb.36
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

5232B	  %165:fr64 = SQRTSDr %0:fr64
5264B	  JMP_1 %bb.39

5280B	bb.38.call.sqrt:
	; predecessors: %bb.36
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

5296B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1075; cg.c:565:6
5312B	  $xmm0 = COPY %0:fr64, debug-location !1075; cg.c:565:6
5328B	  CALL64pcrel32 @sqrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1075; cg.c:565:6
5344B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1075; cg.c:565:6
5360B	  %165:fr64 = COPY killed $xmm0, debug-location !1075; cg.c:565:6

5408B	bb.39.for.end170.split:
	; predecessors: %bb.38, %bb.37

5440B	  %33:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1075 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
5456B	  MOVSDmr %33:gr64, 1, $noreg, 0, $noreg, %165:fr64, debug-location !1076 :: (store 8 into %ir.158); cg.c:565:12
5472B	  RET 0, debug-location !1077; cg.c:566:1

# End machine code for function conj_grad.

Before MISched:
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1, $edx in %2, $rcx in %3, $r8 in %4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $esi, $edx, $rcx, $r8
  %4:gr64 = COPY $r8
  %3:gr64 = COPY $rcx
  %2:gr32 = COPY $edx
  %1:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
  MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
  MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
  MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1101 :: (store 4 into %ir.nzv); cg.c:809:9

bb.1.while.cond:
; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

  %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1103 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1105 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
  JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1102; cg.c:811:5
  JMP_1 %bb.2, debug-location !1102; cg.c:811:5

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1106 :: (dereferenceable load 8 from @amult); cg.c:812:32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1108; cg.c:812:18
  $rdi = MOV32ri64 @tran, debug-location !1108; cg.c:812:18
  $xmm0 = COPY %7:fr64, debug-location !1108; cg.c:812:18
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1108; cg.c:812:18
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1108; cg.c:812:18
  %9:fr64 = COPY killed $xmm0, debug-location !1108; cg.c:812:18
  MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1109 :: (store 8 into %ir.vecelt); cg.c:812:16
  %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1110 :: (dereferenceable load 8 from @amult); cg.c:817:32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:817:18
  $rdi = MOV32ri64 @tran, debug-location !1111; cg.c:817:18
  $xmm0 = COPY %10:fr64, debug-location !1111; cg.c:817:18
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:817:18
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:817:18
  %11:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:817:18
  MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1112 :: (store 8 into %ir.vecloc); cg.c:817:16
  %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1114 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:818:13
  $xmm0 = COPY %11:fr64, debug-location !1115; cg.c:818:13
  $edi = COPY %12:gr32, debug-location !1115; cg.c:818:13
  CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1115; cg.c:818:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:818:13
  %14:gr32 = COPY killed $eax, debug-location !1115; cg.c:818:13
  %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1116; cg.c:818:33
  MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1117 :: (store 4 into %ir.i); cg.c:818:11
  CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1121 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
  JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1122; cg.c:819:13
  JMP_1 %bb.3, debug-location !1122; cg.c:819:13

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1124 :: (store 4 into %ir.was_gen); cg.c:825:17
  MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1125 :: (store 4 into %ir.ii); cg.c:826:17

bb.4.for.cond:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1128 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1131 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1132; cg.c:826:9
  JMP_1 %bb.5, debug-location !1132; cg.c:826:9

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1133 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1133 :: (load 4 from %ir.arrayidx); cg.c:827:17
  CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1138 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1139; cg.c:827:17
  JMP_1 %bb.6, debug-location !1139; cg.c:827:17

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 1, debug-location !1140 :: (store 4 into %ir.was_gen); cg.c:828:25
  JMP_1 %bb.8, debug-location !1142; cg.c:829:17

bb.7.if.end7:
; predecessors: %bb.5
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  INC32m %stack.6.ii, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1143 :: (store 4 into %ir.ii), (dereferenceable load 4 from %ir.ii); cg.c:826:34
  JMP_1 %bb.4, debug-location !1144; cg.c:826:9

bb.8.for.end:
; predecessors: %bb.4, %bb.6
  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

  CMP32mi8 %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1147 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
  JCC_1 %bb.1, 5, implicit killed $eflags, debug-location !1149; cg.c:832:13
  JMP_1 %bb.9, debug-location !1149; cg.c:832:13

bb.9.if.end9:
; predecessors: %bb.8
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %22:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1150 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  %23:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1151 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  %24:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1152 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  %25:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  %26:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  %27:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1156 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1160 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
  JMP_1 %bb.1, debug-location !1102; cg.c:811:5

bb.10.while.end:
; predecessors: %bb.1

  RET 0, debug-location !1161; cg.c:838:1

# End machine code for function sprnvc.

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: %4:gr64 = COPY $r8
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=10
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=7
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY $r8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(2):   %2:gr32 = COPY $edx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(3):   %1:gr32 = COPY $esi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(4):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(5):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1101 :: (store 4 into %ir.nzv); cg.c:809:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 8 7 6 5 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1101 :: (store 4 into %ir.nzv); cg.c:809:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 9 8 7 6 
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
Bottom Pressure:
GR16=2
  LiveReg: %4
  UpdateRegP: SU(9) MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 8 7 0 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
Bottom Pressure:
GR16=4
  LiveReg: %3
  UpdateRegP: SU(8) MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 0 7 1 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
Bottom Pressure:
GR16=6
  LiveReg: %2
  UpdateRegP: SU(7) MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 0 1 2 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GR16=8
  LiveReg: %1
  UpdateRegP: SU(6) MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 0 1 3 
  Cand SU(5) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(5) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GR16=10
  LiveReg: %0
  UpdateRegP: SU(5) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 1 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR16=9
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %1:gr32 = COPY $esi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=8
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %2:gr32 = COPY $edx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR16=8
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY $r8
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR16=7
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY $r8
SU(1):   %3:gr64 = COPY $rcx
SU(2):   %2:gr32 = COPY $edx
SU(3):   %1:gr32 = COPY $esi
SU(4):   %0:gr32 = COPY $edi
SU(5):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
SU(6):   MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
SU(7):   MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
SU(8):   MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
SU(9):   MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
SU(10):   MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1101 :: (store 4 into %ir.nzv); cg.c:809:9

********** MI Scheduling **********
sprnvc:%bb.1 while.cond
  From: %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1103 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
    To: JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1102; cg.c:811:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1103 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%5
  Single Issue       : false;
SU(1):   CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1105 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%5
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1102; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1105 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1103 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1103 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
SU(1):   CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1105 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %14:gr32 = COPY killed $eax, debug-location !1115; cg.c:818:13
    To: JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1122; cg.c:819:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %14:gr32 = COPY killed $eax, debug-location !1115; cg.c:818:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=0 Reg=%14
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1116; cg.c:818:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
    SU(0): Out  Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=%14
    SU(2): Data Latency=1 Reg=%14
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(2):   MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1117 :: (store 4 into %ir.i); cg.c:818:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%14
  Single Issue       : false;
SU(3):   CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1121 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%14
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1122; cg.c:819:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1121 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
  Ready @4c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1117 :: (store 4 into %ir.i); cg.c:818:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1116; cg.c:818:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr32 = COPY killed $eax, debug-location !1115; cg.c:818:13
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %14:gr32 = COPY killed $eax, debug-location !1115; cg.c:818:13
SU(1):   %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1116; cg.c:818:33
SU(2):   MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1117 :: (store 4 into %ir.i); cg.c:818:11
SU(3):   CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1121 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $xmm0 = COPY %11:fr64, debug-location !1115; cg.c:818:13
    To: CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1115; cg.c:818:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %11:fr64, debug-location !1115; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $edi = COPY %12:gr32, debug-location !1115; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1115; cg.c:818:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $edi = COPY %12:gr32, debug-location !1115; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %11:fr64, debug-location !1115; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $xmm0 = COPY %11:fr64, debug-location !1115; cg.c:818:13
SU(1):   $edi = COPY %12:gr32, debug-location !1115; cg.c:818:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %11:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:817:18
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:818:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %11:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%11
  Single Issue       : false;
SU(1):   MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1112 :: (store 8 into %ir.vecloc); cg.c:817:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%11
  Single Issue       : false;
SU(2):   %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1114 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:818:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1114 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1112 :: (store 8 into %ir.vecloc); cg.c:817:16
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %11:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %11:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:817:18
SU(1):   MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1112 :: (store 8 into %ir.vecloc); cg.c:817:16
SU(2):   %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1114 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $rdi = MOV32ri64 @tran, debug-location !1111; cg.c:817:18
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:817:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @tran, debug-location !1111; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %10:fr64, debug-location !1111; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:817:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %10:fr64, debug-location !1111; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @tran, debug-location !1111; cg.c:817:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = MOV32ri64 @tran, debug-location !1111; cg.c:817:18
SU(1):   $xmm0 = COPY %10:fr64, debug-location !1111; cg.c:817:18

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %9:fr64 = COPY killed $xmm0, debug-location !1108; cg.c:812:18
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:817:18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:fr64 = COPY killed $xmm0, debug-location !1108; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(1):   MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1109 :: (store 8 into %ir.vecelt); cg.c:812:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(2):   %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1110 :: (dereferenceable load 8 from @amult); cg.c:817:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:817:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1110 :: (dereferenceable load 8 from @amult); cg.c:817:32
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1109 :: (store 8 into %ir.vecelt); cg.c:812:16
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:fr64 = COPY killed $xmm0, debug-location !1108; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %9:fr64 = COPY killed $xmm0, debug-location !1108; cg.c:812:18
SU(1):   MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1109 :: (store 8 into %ir.vecelt); cg.c:812:16
SU(2):   %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1110 :: (dereferenceable load 8 from @amult); cg.c:817:32

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $rdi = MOV32ri64 @tran, debug-location !1108; cg.c:812:18
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1108; cg.c:812:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @tran, debug-location !1108; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %7:fr64, debug-location !1108; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1108; cg.c:812:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %7:fr64, debug-location !1108; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @tran, debug-location !1108; cg.c:812:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = MOV32ri64 @tran, debug-location !1108; cg.c:812:18
SU(1):   $xmm0 = COPY %7:fr64, debug-location !1108; cg.c:812:18

********** MI Scheduling **********
sprnvc:%bb.3 if.end
  From: MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1124 :: (store 4 into %ir.was_gen); cg.c:825:17
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1124 :: (store 4 into %ir.was_gen); cg.c:825:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1125 :: (store 4 into %ir.ii); cg.c:826:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1125 :: (store 4 into %ir.ii); cg.c:826:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1124 :: (store 4 into %ir.was_gen); cg.c:825:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1124 :: (store 4 into %ir.was_gen); cg.c:825:17
SU(1):   MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1125 :: (store 4 into %ir.ii); cg.c:826:17

********** MI Scheduling **********
sprnvc:%bb.4 for.cond
  From: %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1128 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
    To: JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1132; cg.c:826:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1128 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%16
  Single Issue       : false;
SU(1):   CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1131 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1132; cg.c:826:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1131 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1128 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1128 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
SU(1):   CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1131 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25

********** MI Scheduling **********
sprnvc:%bb.5 for.body
  From: %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1133 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
    To: JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1139; cg.c:827:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1133 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1133 :: (load 4 from %ir.arrayidx); cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%19
    SU(0): Data Latency=4 Reg=%18
  Successors:
    SU(3): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(3):   CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1138 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1139; cg.c:827:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1138 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1133 :: (load 4 from %ir.arrayidx); cg.c:827:17
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1133 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1133 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1133 :: (load 4 from %ir.arrayidx); cg.c:827:17
SU(3):   CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1138 :: (dereferenceable load 4 from %ir.i); cg.c:827:24

********** MI Scheduling **********
sprnvc:%bb.9 if.end9
  From: %22:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1150 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
    To: JMP_1 %bb.1, debug-location !1102; cg.c:811:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %22:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1150 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Data Latency=4 Reg=%22
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %23:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1151 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Data Latency=4 Reg=%23
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %24:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1152 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Data Latency=4 Reg=%24
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(2): Data Latency=4 Reg=%24
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%23
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%22
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(4):   %25:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%25
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %26:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%26
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %27:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1156 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%27
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(6): Data Latency=4 Reg=%27
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%26
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%25
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(8):   INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1160 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !1102; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1160 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(8) 9c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
Bottom Pressure:
GR16=6
  LiveReg: %26
  UpdateRegP: SU(7) MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to GR16 4
  LiveReg: %27
  UpdateRegP: SU(7) MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to GR16 2
  LiveReg: %25
  UpdateRegP: SU(7) MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %27:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1156 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %26:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
Bottom Pressure:
GR16=2
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %25:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
Bottom Pressure:

  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %23
  UpdateRegP: SU(3) MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %24
  UpdateRegP: SU(3) MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to FR32 1    FR32X 1
  LiveReg: %22
  UpdateRegP: SU(3) MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to 
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %24:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1152 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %23:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1151 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
Bottom Pressure:
FR32=1
FR32X=1
  Ready @12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %22:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1150 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
Bottom Pressure:

  Ready @12c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %22:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1150 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
SU(1):   %23:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1151 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
SU(2):   %24:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1152 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
SU(3):   MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
SU(4):   %25:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
SU(5):   %26:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
SU(6):   %27:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1156 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
SU(7):   MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
SU(8):   INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1160 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13

********** INTERVALS **********
CH [0B,32r:0)  0@0B-phi
CL [0B,32r:0)  0@0B-phi
DH [0B,48r:0)  0@0B-phi
DIL [0B,80r:0)[336r,368r:3)[464r,496r:2)[608r,624r:1)  0@0B-phi 1@608r 2@464r 3@336r
DIH [0B,80r:0)[336r,368r:3)[464r,496r:2)[608r,624r:1)  0@0B-phi 1@608r 2@464r 3@336r
DL [0B,48r:0)  0@0B-phi
HCX [0B,32r:0)  0@0B-phi
HDI [0B,80r:0)[336r,368r:3)[464r,496r:2)[608r,624r:1)  0@0B-phi 1@608r 2@464r 3@336r
HDX [0B,48r:0)  0@0B-phi
SIL [0B,64r:0)  0@0B-phi
SIH [0B,64r:0)  0@0B-phi
HSI [0B,64r:0)  0@0B-phi
R8B [0B,16r:0)  0@0B-phi
R8BH [0B,16r:0)  0@0B-phi
R8WH [0B,16r:0)  0@0B-phi
%0 [80r,96r:0)  0@80r weight:0.000000e+00
%1 [64r,112r:0)  0@64r weight:0.000000e+00
%2 [48r,128r:0)  0@48r weight:0.000000e+00
%3 [32r,144r:0)  0@32r weight:0.000000e+00
%4 [16r,160r:0)  0@16r weight:0.000000e+00
%5 [224r,240r:0)  0@224r weight:0.000000e+00
%7 [304r,352r:0)  0@304r weight:0.000000e+00
%9 [400r,416r:0)  0@400r weight:0.000000e+00
%10 [432r,480r:0)  0@432r weight:0.000000e+00
%11 [528r,592r:0)  0@528r weight:0.000000e+00
%12 [560r,608r:0)  0@560r weight:0.000000e+00
%14 [656r,688r:0)[688r,720r:1)  0@656r 1@688r weight:0.000000e+00
%16 [832r,848r:0)  0@832r weight:0.000000e+00
%18 [912r,944r:0)  0@912r weight:0.000000e+00
%19 [928r,944r:0)  0@928r weight:0.000000e+00
%20 [944r,960r:0)  0@944r weight:0.000000e+00
%22 [1184r,1232r:0)  0@1184r weight:0.000000e+00
%23 [1200r,1232r:0)  0@1200r weight:0.000000e+00
%24 [1216r,1232r:0)  0@1216r weight:0.000000e+00
%25 [1248r,1296r:0)  0@1248r weight:0.000000e+00
%26 [1264r,1296r:0)  0@1264r weight:0.000000e+00
%27 [1280r,1296r:0)  0@1280r weight:0.000000e+00
RegMasks: 368r 496r 624r
********** MACHINEINSTRS **********
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %1, $edx in %2, $rcx in %3, $r8 in %4

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $esi, $edx, $rcx, $r8
16B	  %4:gr64 = COPY $r8
32B	  %3:gr64 = COPY $rcx
48B	  %2:gr32 = COPY $edx
64B	  %1:gr32 = COPY $esi
80B	  %0:gr32 = COPY $edi
96B	  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
112B	  MOV32mr %stack.1.nz.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.nz.addr)
128B	  MOV32mr %stack.2.nn1.addr, 1, $noreg, 0, $noreg, %2:gr32 :: (store 4 into %ir.nn1.addr)
144B	  MOV64mr %stack.3.v.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.v.addr)
160B	  MOV64mr %stack.4.iv.addr, 1, $noreg, 0, $noreg, %4:gr64 :: (store 8 into %ir.iv.addr)
176B	  MOV32mi %stack.5.nzv, 1, $noreg, 0, $noreg, 0, debug-location !1101 :: (store 4 into %ir.nzv); cg.c:809:9

208B	bb.1.while.cond:
	; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
	  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

224B	  %5:gr32 = MOV32rm %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1103 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
240B	  CMP32rm %5:gr32, %stack.1.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1105 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:16
256B	  JCC_1 %bb.10, 13, implicit killed $eflags, debug-location !1102; cg.c:811:5
272B	  JMP_1 %bb.2, debug-location !1102; cg.c:811:5

288B	bb.2.while.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

304B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1106 :: (dereferenceable load 8 from @amult); cg.c:812:32
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1108; cg.c:812:18
336B	  $rdi = MOV32ri64 @tran, debug-location !1108; cg.c:812:18
352B	  $xmm0 = COPY %7:fr64, debug-location !1108; cg.c:812:18
368B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1108; cg.c:812:18
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1108; cg.c:812:18
400B	  %9:fr64 = COPY killed $xmm0, debug-location !1108; cg.c:812:18
416B	  MOVSDmr %stack.8.vecelt, 1, $noreg, 0, $noreg, %9:fr64, debug-location !1109 :: (store 8 into %ir.vecelt); cg.c:812:16
432B	  %10:fr64 = MOVSDrm_alt $rip, 1, $noreg, @amult, $noreg, debug-location !1110 :: (dereferenceable load 8 from @amult); cg.c:817:32
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:817:18
464B	  $rdi = MOV32ri64 @tran, debug-location !1111; cg.c:817:18
480B	  $xmm0 = COPY %10:fr64, debug-location !1111; cg.c:817:18
496B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1111; cg.c:817:18
512B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1111; cg.c:817:18
528B	  %11:fr64 = COPY killed $xmm0, debug-location !1111; cg.c:817:18
544B	  MOVSDmr %stack.9.vecloc, 1, $noreg, 0, $noreg, %11:fr64, debug-location !1112 :: (store 8 into %ir.vecloc); cg.c:817:16
560B	  %12:gr32 = MOV32rm %stack.2.nn1.addr, 1, $noreg, 0, $noreg, debug-location !1114 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:818:13
592B	  $xmm0 = COPY %11:fr64, debug-location !1115; cg.c:818:13
608B	  $edi = COPY %12:gr32, debug-location !1115; cg.c:818:13
624B	  CALL64pcrel32 @icnvrt, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !1115; cg.c:818:13
640B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1115; cg.c:818:13
656B	  %14:gr32 = COPY killed $eax, debug-location !1115; cg.c:818:13
688B	  %14:gr32 = nsw INC32r %14:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1116; cg.c:818:33
704B	  MOV32mr %stack.7.i, 1, $noreg, 0, $noreg, %14:gr32, debug-location !1117 :: (store 4 into %ir.i); cg.c:818:11
720B	  CMP32rm %14:gr32, %stack.0.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1121 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:15
736B	  JCC_1 %bb.1, 15, implicit killed $eflags, debug-location !1122; cg.c:819:13
752B	  JMP_1 %bb.3, debug-location !1122; cg.c:819:13

768B	bb.3.if.end:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

784B	  MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, debug-location !1124 :: (store 4 into %ir.was_gen); cg.c:825:17
800B	  MOV32mi %stack.6.ii, 1, $noreg, 0, $noreg, 0, debug-location !1125 :: (store 4 into %ir.ii); cg.c:826:17

816B	bb.4.for.cond:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

832B	  %16:gr32 = MOV32rm %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1128 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
848B	  CMP32rm %16:gr32, %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1131 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:25
864B	  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1132; cg.c:826:9
880B	  JMP_1 %bb.5, debug-location !1132; cg.c:826:9

896B	bb.5.for.body:
	; predecessors: %bb.4
	  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

912B	  %18:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1133 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
928B	  %19:gr64_nosp = MOVSX64rm32 %stack.6.ii, 1, $noreg, 0, $noreg, debug-location !1136 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
944B	  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1133 :: (load 4 from %ir.arrayidx); cg.c:827:17
960B	  CMP32rm %20:gr32, %stack.7.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1138 :: (dereferenceable load 4 from %ir.i); cg.c:827:24
976B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1139; cg.c:827:17
992B	  JMP_1 %bb.6, debug-location !1139; cg.c:827:17

1008B	bb.6.if.then6:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1024B	  MOV32mi %stack.10.was_gen, 1, $noreg, 0, $noreg, 1, debug-location !1140 :: (store 4 into %ir.was_gen); cg.c:828:25
1040B	  JMP_1 %bb.8, debug-location !1142; cg.c:829:17

1056B	bb.7.if.end7:
	; predecessors: %bb.5
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1072B	  INC32m %stack.6.ii, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1143 :: (store 4 into %ir.ii), (dereferenceable load 4 from %ir.ii); cg.c:826:34
1088B	  JMP_1 %bb.4, debug-location !1144; cg.c:826:9

1104B	bb.8.for.end:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

1120B	  CMP32mi8 %stack.10.was_gen, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1147 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
1136B	  JCC_1 %bb.1, 5, implicit killed $eflags, debug-location !1149; cg.c:832:13
1152B	  JMP_1 %bb.9, debug-location !1149; cg.c:832:13

1168B	bb.9.if.end9:
	; predecessors: %bb.8
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

1184B	  %22:fr64 = MOVSDrm_alt %stack.8.vecelt, 1, $noreg, 0, $noreg, debug-location !1150 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
1200B	  %23:gr64 = MOV64rm %stack.3.v.addr, 1, $noreg, 0, $noreg, debug-location !1151 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
1216B	  %24:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1152 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
1232B	  MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1153 :: (store 8 into %ir.arrayidx11); cg.c:834:16
1248B	  %25:gr32 = MOV32rm %stack.7.i, 1, $noreg, 0, $noreg, debug-location !1154 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
1264B	  %26:gr64 = MOV64rm %stack.4.iv.addr, 1, $noreg, 0, $noreg, debug-location !1155 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
1280B	  %27:gr64_nosp = MOVSX64rm32 %stack.5.nzv, 1, $noreg, 0, $noreg, debug-location !1156 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
1296B	  MOV32mr %26:gr64, 4, %27:gr64_nosp, 0, $noreg, %25:gr32, debug-location !1157 :: (store 4 into %ir.arrayidx13); cg.c:835:17
1312B	  INC32m %stack.5.nzv, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1160 :: (store 4 into %ir.nzv), (dereferenceable load 4 from %ir.nzv); cg.c:836:13
1328B	  JMP_1 %bb.1, debug-location !1102; cg.c:811:5

1344B	bb.10.while.end:
	; predecessors: %bb.1

1360B	  RET 0, debug-location !1161; cg.c:838:1

# End machine code for function sprnvc.

Before MISched:
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8d in %4, $xmm0 in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi, $rsi, $rdx, $rcx, $r8d, $xmm0
  %5:fr64 = COPY $xmm0
  %4:gr32 = COPY $r8d
  %3:gr64 = COPY $rcx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
  MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
  MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
  MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
  MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
  MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1181 :: (store 4 into %ir.set); cg.c:854:9
  MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1182 :: (store 4 into %ir.k); cg.c:855:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

  %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1185 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1187 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1189 :: (load 4 from %ir.1); cg.c:855:19
  JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1190; cg.c:855:5
  JMP_1 %bb.2, debug-location !1190; cg.c:855:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1191 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1191 :: (load 4 from %ir.arrayidx); cg.c:856:13
  CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1196 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
  JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1197; cg.c:856:13
  JMP_1 %bb.3, debug-location !1197; cg.c:856:13

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1198 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1200 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1202 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 1, debug-location !1203 :: (store 4 into %ir.set); cg.c:858:17

bb.4.if.end:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  INC32m %stack.6.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1205 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:855:28
  JMP_1 %bb.1, debug-location !1206; cg.c:855:5

bb.5.for.end:
; predecessors: %bb.1
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

  CMP32mi8 %stack.7.set, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1211 :: (dereferenceable load 4 from %ir.set); cg.c:861:13
  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1212; cg.c:861:9
  JMP_1 %bb.6, debug-location !1212; cg.c:861:9

bb.6.if.then5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1213 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1215 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1217 :: (load 4 from %ir.14); cg.c:862:11
  MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1220 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1221 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1222 :: (load 4 from %ir.18); cg.c:863:12
  MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1228 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  RET 0, debug-location !1230; cg.c:866:1

# End machine code for function vecset.

********** MI Scheduling **********
vecset:%bb.0 entry
  From: %5:fr64 = COPY $xmm0
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=1
GR16=10
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH XMM0 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=1
GR16=7
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %4:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(2):   %3:gr64 = COPY $rcx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(3):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(4):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(5):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1181 :: (store 4 into %ir.set); cg.c:854:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1182 :: (store 4 into %ir.k); cg.c:855:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 11 10 9 8 7 6 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1182 :: (store 4 into %ir.k); cg.c:855:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 11 10 9 8 7 
  Cand SU(6) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1181 :: (store 4 into %ir.set); cg.c:854:9
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 11 10 9 8 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %5
  UpdateRegP: SU(11) MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
              to 
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 10 9 0 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %4
  UpdateRegP: SU(10) MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 0 9 1 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %3
  UpdateRegP: SU(9) MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 0 1 2 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=6
  LiveReg: %2
  UpdateRegP: SU(8) MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 2 0 1 3 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=8
  LiveReg: %1
  UpdateRegP: SU(7) MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 2 0 1 4 
  Cand SU(6) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=10
  LiveReg: %0
  UpdateRegP: SU(6) MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 1 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=9
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 1 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=1
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=1
GR16=8
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 0 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=1
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=1
GR16=8
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %3:gr64 = COPY $rcx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=1
GR16=8
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=1
GR16=7
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:fr64 = COPY $xmm0
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=1
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=1
GR16=7
  Ready @2c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:fr64 = COPY $xmm0
SU(1):   %4:gr32 = COPY $r8d
SU(2):   %3:gr64 = COPY $rcx
SU(3):   %2:gr64 = COPY $rdx
SU(4):   %1:gr64 = COPY $rsi
SU(5):   %0:gr32 = COPY $edi
SU(6):   MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
SU(7):   MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
SU(8):   MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
SU(9):   MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
SU(10):   MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
SU(11):   MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
SU(12):   MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1181 :: (store 4 into %ir.set); cg.c:854:9
SU(13):   MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1182 :: (store 4 into %ir.k); cg.c:855:12

********** MI Scheduling **********
vecset:%bb.1 for.cond
  From: %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1185 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
    To: JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1190; cg.c:855:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1185 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%6
  Single Issue       : false;
SU(1):   %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1187 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%7
  Single Issue       : false;
SU(2):   CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1189 :: (load 4 from %ir.1); cg.c:855:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%7
    SU(0): Data Latency=4 Reg=%6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1190; cg.c:855:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1189 :: (load 4 from %ir.1); cg.c:855:19
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1187 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1185 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1185 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
SU(1):   %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1187 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
SU(2):   CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1189 :: (load 4 from %ir.1); cg.c:855:19

********** MI Scheduling **********
vecset:%bb.2 for.body
  From: %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1191 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
    To: JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1197; cg.c:856:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1191 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1191 :: (load 4 from %ir.arrayidx); cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%19
    SU(0): Data Latency=4 Reg=%18
  Successors:
    SU(3): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(3):   CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1196 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1197; cg.c:856:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1196 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1191 :: (load 4 from %ir.arrayidx); cg.c:856:13
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1191 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1191 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
SU(1):   %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
SU(2):   %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1191 :: (load 4 from %ir.arrayidx); cg.c:856:13
SU(3):   CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1196 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19

********** MI Scheduling **********
vecset:%bb.3 if.then
  From: %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1198 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1198 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%22
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1200 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%23
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%24
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1202 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%24
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%23
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%22
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 1, debug-location !1203 :: (store 4 into %ir.set); cg.c:858:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 1, debug-location !1203 :: (store 4 into %ir.set); cg.c:858:17
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1202 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1200 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1198 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1198 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
SU(1):   %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1200 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
SU(2):   %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
SU(3):   MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1202 :: (store 8 into %ir.arrayidx3); cg.c:857:18
SU(4):   MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 1, debug-location !1203 :: (store 4 into %ir.set); cg.c:858:17

********** MI Scheduling **********
vecset:%bb.6 if.then5
  From: %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1213 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1213 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%9
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1215 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%10
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 25
  Successors:
    SU(3): Data Latency=4 Reg=%11
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1217 :: (load 4 from %ir.14); cg.c:862:11
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 21
  Predecessors:
    SU(2): Data Latency=4 Reg=%11
  Successors:
    SU(4): Data Latency=4 Reg=%12
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  # preds left       : 7
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 17
  Predecessors:
    SU(3): Data Latency=4 Reg=%12
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%10
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%9
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(5):   %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 12
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%13
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1220 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 12
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%14
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1221 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 16
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%15
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1222 :: (load 4 from %ir.18); cg.c:863:12
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 12
  Predecessors:
    SU(7): Data Latency=4 Reg=%15
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%16
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 8
  Predecessors:
    SU(8): Data Latency=4 Reg=%16
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=4 Reg=%14
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%13
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(10):   %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 7
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%17
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1228 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14
  # preds left       : 12
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%17
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 25
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1228 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14
Bottom Pressure:
GR16=2
  LiveReg: %17
  UpdateRegP: SU(11) INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1228 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 22c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
Bottom Pressure:

  Ready @7c
  BotQ.A BotLatency SU(10) 7c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
Bottom Pressure:
GR16=6
  LiveReg: %14
  UpdateRegP: SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to GR16 4
  LiveReg: %16
  UpdateRegP: SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to GR16 2
  LiveReg: %13
  UpdateRegP: SU(9) MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to 
  Ready @8c
  BotQ.A BotLatency SU(9) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 5 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1222 :: (load 4 from %ir.18); cg.c:863:12
Bottom Pressure:
GR16=6
  LiveReg: %15
  UpdateRegP: SU(8) %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1222 :: (load 4 from %ir.18); cg.c:863:12
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(8) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1221 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
Bottom Pressure:
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(7) 16c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1220 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
Bottom Pressure:
GR16=2
  Ready @12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
Bottom Pressure:

  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %10
  UpdateRegP: SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %12
  UpdateRegP: SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to FR32 1    FR32X 1
  LiveReg: %9
  UpdateRegP: SU(4) MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to 
  Ready @17c
  BotQ.A BotLatency SU(4) 17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1217 :: (load 4 from %ir.14); cg.c:862:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %11
  UpdateRegP: SU(3) %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1217 :: (load 4 from %ir.14); cg.c:862:11
              to GR16 -2
  Ready @21c
  BotQ.A BotLatency SU(3) 21c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @25c
  BotQ.A BotLatency SU(2) 25c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1215 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
Bottom Pressure:
FR32=1
FR32X=1
  Ready @21c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1213 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
Bottom Pressure:

  Ready @21c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1213 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
SU(1):   %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1215 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
SU(2):   %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
SU(3):   %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1217 :: (load 4 from %ir.14); cg.c:862:11
SU(4):   MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
SU(5):   %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
SU(6):   %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1220 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
SU(7):   %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1221 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
SU(8):   %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1222 :: (load 4 from %ir.18); cg.c:863:12
SU(9):   MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
SU(10):   %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
SU(11):   INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1228 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14

********** INTERVALS **********
CH [0B,48r:0)  0@0B-phi
CL [0B,48r:0)  0@0B-phi
DH [0B,64r:0)  0@0B-phi
DIL [0B,96r:0)  0@0B-phi
DIH [0B,96r:0)  0@0B-phi
DL [0B,64r:0)  0@0B-phi
HCX [0B,48r:0)  0@0B-phi
HDI [0B,96r:0)  0@0B-phi
HDX [0B,64r:0)  0@0B-phi
SIL [0B,80r:0)  0@0B-phi
SIH [0B,80r:0)  0@0B-phi
HSI [0B,80r:0)  0@0B-phi
R8B [0B,32r:0)  0@0B-phi
R8BH [0B,32r:0)  0@0B-phi
R8WH [0B,32r:0)  0@0B-phi
XMM0 [0B,16r:0)  0@0B-phi
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%6 [256r,288r:0)  0@256r weight:0.000000e+00
%7 [272r,288r:0)  0@272r weight:0.000000e+00
%9 [672r,736r:0)  0@672r weight:0.000000e+00
%10 [688r,736r:0)  0@688r weight:0.000000e+00
%11 [704r,720r:0)  0@704r weight:0.000000e+00
%12 [720r,736r:0)  0@720r weight:0.000000e+00
%13 [752r,816r:0)  0@752r weight:0.000000e+00
%14 [768r,816r:0)  0@768r weight:0.000000e+00
%15 [784r,800r:0)  0@784r weight:0.000000e+00
%16 [800r,816r:0)  0@800r weight:0.000000e+00
%17 [832r,848r:0)  0@832r weight:0.000000e+00
%18 [352r,384r:0)  0@352r weight:0.000000e+00
%19 [368r,384r:0)  0@368r weight:0.000000e+00
%20 [384r,400r:0)  0@384r weight:0.000000e+00
%22 [464r,512r:0)  0@464r weight:0.000000e+00
%23 [480r,512r:0)  0@480r weight:0.000000e+00
%24 [496r,512r:0)  0@496r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $rsi in %1, $rdx in %2, $rcx in %3, $r8d in %4, $xmm0 in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi, $rsi, $rdx, $rcx, $r8d, $xmm0
16B	  %5:fr64 = COPY $xmm0
32B	  %4:gr32 = COPY $r8d
48B	  %3:gr64 = COPY $rcx
64B	  %2:gr64 = COPY $rdx
80B	  %1:gr64 = COPY $rsi
96B	  %0:gr32 = COPY $edi
112B	  MOV32mr %stack.0.n.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.n.addr)
128B	  MOV64mr %stack.1.v.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.v.addr)
144B	  MOV64mr %stack.2.iv.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.iv.addr)
160B	  MOV64mr %stack.3.nzv.addr, 1, $noreg, 0, $noreg, %3:gr64 :: (store 8 into %ir.nzv.addr)
176B	  MOV32mr %stack.4.i.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.i.addr)
192B	  MOVSDmr %stack.5.val.addr, 1, $noreg, 0, $noreg, %5:fr64 :: (store 8 into %ir.val.addr)
208B	  MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 0, debug-location !1181 :: (store 4 into %ir.set); cg.c:854:9
224B	  MOV32mi %stack.6.k, 1, $noreg, 0, $noreg, 0, debug-location !1182 :: (store 4 into %ir.k); cg.c:855:12

240B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.4
	  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

256B	  %6:gr32 = MOV32rm %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1185 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
272B	  %7:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1187 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
288B	  CMP32rm %6:gr32, %7:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1189 :: (load 4 from %ir.1); cg.c:855:19
304B	  JCC_1 %bb.5, 13, implicit killed $eflags, debug-location !1190; cg.c:855:5
320B	  JMP_1 %bb.2, debug-location !1190; cg.c:855:5

336B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

352B	  %18:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1191 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
368B	  %19:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1194 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
384B	  %20:gr32 = MOV32rm %18:gr64, 4, %19:gr64_nosp, 0, $noreg, debug-location !1191 :: (load 4 from %ir.arrayidx); cg.c:856:13
400B	  CMP32rm %20:gr32, %stack.4.i.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1196 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:19
416B	  JCC_1 %bb.4, 5, implicit killed $eflags, debug-location !1197; cg.c:856:13
432B	  JMP_1 %bb.3, debug-location !1197; cg.c:856:13

448B	bb.3.if.then:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

464B	  %22:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1198 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
480B	  %23:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1200 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
496B	  %24:gr64_nosp = MOVSX64rm32 %stack.6.k, 1, $noreg, 0, $noreg, debug-location !1201 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
512B	  MOVSDmr %23:gr64, 8, %24:gr64_nosp, 0, $noreg, %22:fr64, debug-location !1202 :: (store 8 into %ir.arrayidx3); cg.c:857:18
528B	  MOV32mi %stack.7.set, 1, $noreg, 0, $noreg, 1, debug-location !1203 :: (store 4 into %ir.set); cg.c:858:17

544B	bb.4.if.end:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

560B	  INC32m %stack.6.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1205 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:855:28
576B	  JMP_1 %bb.1, debug-location !1206; cg.c:855:5

592B	bb.5.for.end:
	; predecessors: %bb.1
	  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

608B	  CMP32mi8 %stack.7.set, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1211 :: (dereferenceable load 4 from %ir.set); cg.c:861:13
624B	  JCC_1 %bb.7, 5, implicit killed $eflags, debug-location !1212; cg.c:861:9
640B	  JMP_1 %bb.6, debug-location !1212; cg.c:861:9

656B	bb.6.if.then5:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

672B	  %9:fr64 = MOVSDrm_alt %stack.5.val.addr, 1, $noreg, 0, $noreg, debug-location !1213 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
688B	  %10:gr64 = MOV64rm %stack.1.v.addr, 1, $noreg, 0, $noreg, debug-location !1215 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
704B	  %11:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1216 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
720B	  %12:gr64_nosp = MOVSX64rm32 %11:gr64, 1, $noreg, 0, $noreg, debug-location !1217 :: (load 4 from %ir.14); cg.c:862:11
736B	  MOVSDmr %10:gr64, 8, %12:gr64_nosp, 0, $noreg, %9:fr64, debug-location !1218 :: (store 8 into %ir.arrayidx7); cg.c:862:17
752B	  %13:gr32 = MOV32rm %stack.4.i.addr, 1, $noreg, 0, $noreg, debug-location !1219 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
768B	  %14:gr64 = MOV64rm %stack.2.iv.addr, 1, $noreg, 0, $noreg, debug-location !1220 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
784B	  %15:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1221 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
800B	  %16:gr64_nosp = MOVSX64rm32 %15:gr64, 1, $noreg, 0, $noreg, debug-location !1222 :: (load 4 from %ir.18); cg.c:863:12
816B	  MOV32mr %14:gr64, 4, %16:gr64_nosp, 0, $noreg, %13:gr32, debug-location !1223 :: (store 4 into %ir.arrayidx9); cg.c:863:18
832B	  %17:gr64 = MOV64rm %stack.3.nzv.addr, 1, $noreg, 0, $noreg, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
848B	  INC32m %17:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1228 :: (store 4 into %ir.22), (load 4 from %ir.20); cg.c:864:14

864B	bb.7.if.end10:
	; predecessors: %bb.5, %bb.6

880B	  RET 0, debug-location !1230; cg.c:866:1

# End machine code for function vecset.

Before MISched:
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=4, align=16, fixed, at location [SP+40]
  fi#-4: size=4, align=8, fixed, at location [SP+32]
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
  fi#25: size=8, align=8, at location [SP+8]
  fi#26: size=8, align=8, at location [SP+8]
  fi#27: size=8, align=8, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $ecx in %3, $r8d in %4, $r9d in %5, $xmm0 in %6, $xmm1 in %7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $rdi, $rsi, $rdx, $ecx, $r8d, $r9d, $xmm0, $xmm1
  %7:fr64 = COPY $xmm1
  %6:fr64 = COPY $xmm0
  %5:gr32 = COPY $r9d
  %4:gr32 = COPY $r8d
  %3:gr32 = COPY $ecx
  %2:gr64 = COPY $rdx
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
  MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
  MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
  MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
  MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
  MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
  MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
  MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
  %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1292 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1294 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
  %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1295; cg.c:659:32
  MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1296 :: (store 4 into %ir.nrows); cg.c:659:11
  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1297 :: (store 4 into %ir.j); cg.c:664:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1302 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1303; cg.c:664:27
  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1304 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1305; cg.c:664:5
  JMP_1 %bb.2, debug-location !1305; cg.c:664:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %202:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1306 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  %203:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1308 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  MOV32mi %202:gr64, 4, %203:gr64_nosp, 0, $noreg, 0, debug-location !1309 :: (store 4 into %ir.arrayidx); cg.c:665:19
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1310 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
  JMP_1 %bb.1, debug-location !1311; cg.c:664:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1314 :: (store 4 into %ir.i); cg.c:668:12

bb.4.for.cond2:
; predecessors: %bb.3, %bb.8
  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

  %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1317 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1320 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
  JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1321; cg.c:668:5
  JMP_1 %bb.5, debug-location !1321; cg.c:668:5

bb.5.for.body4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1322 :: (store 4 into %ir.nza); cg.c:669:18

bb.6.for.cond5:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %188:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1326 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  %189:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1328 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  %190:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  CMP32rm %188:gr32, %189:gr64, 4, %190:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1330 :: (load 4 from %ir.arrayidx7); cg.c:669:27
  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1331; cg.c:669:9
  JMP_1 %bb.7, debug-location !1331; cg.c:669:9

bb.7.for.body9:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %192:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1334 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  %194:gr64 = IMUL64rri8 %192:gr64_nosp, 56, implicit-def dead $eflags, debug-location !1332; cg.c:670:17
  %194:gr64 = ADD64rm %194:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1332 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  %195:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1335 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  %198:gr32 = LEA64_32r %204:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1336; cg.c:670:30
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %198:gr32, debug-location !1337 :: (store 4 into %ir.j); cg.c:670:15
  %199:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1340 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
  %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1346 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
  JMP_1 %bb.6, debug-location !1347; cg.c:669:9

bb.8.for.end24:
; predecessors: %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1350 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:668:25
  JMP_1 %bb.4, debug-location !1351; cg.c:668:5

bb.9.for.end27:
; predecessors: %bb.4
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1354 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1355 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1356 :: (store 4 into %ir.j); cg.c:676:12

bb.10.for.cond29:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %20:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1361 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  %20:gr32 = nsw INC32r %20:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1362; cg.c:676:27
  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %20:gr32, implicit-def $eflags, debug-location !1363 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1364; cg.c:676:5
  JMP_1 %bb.11, debug-location !1364; cg.c:676:5

bb.11.for.body32:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %185:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1365 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  %186:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1367 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  %187:gr32 = MOV32rm %185:gr64, 4, %186:gr64_nosp, -4, $noreg, debug-location !1368 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  ADD32mr %185:gr64, 4, %186:gr64_nosp, 0, $noreg, %187:gr32, implicit-def dead $eflags, debug-location !1374 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1375 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
  JMP_1 %bb.10, debug-location !1376; cg.c:676:5

bb.12.for.end43:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  %22:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1379 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  %23:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1380 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  %25:gr32 = MOV32rm %22:gr64, 4, %23:gr64_nosp, 0, $noreg, debug-location !1379 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  %25:gr32 = DEC32r %25:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1381; cg.c:679:25
  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1382 :: (store 4 into %ir.nza); cg.c:679:9
  CMP32rm %25:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1386 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
  JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1387; cg.c:685:9
  JMP_1 %bb.13, debug-location !1387; cg.c:685:9

bb.13.if.then:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1388; cg.c:686:9
  $rdi = MOV32ri64 @.str.37, debug-location !1388; cg.c:686:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1388; cg.c:686:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1388; cg.c:686:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1388; cg.c:686:9
  %31:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1390 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  %32:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1391 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1392; cg.c:687:9
  $rdi = MOV32ri64 @.str.38, debug-location !1392; cg.c:687:9
  $esi = COPY %31:gr32, debug-location !1392; cg.c:687:9
  $edx = COPY %32:gr32, debug-location !1392; cg.c:687:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1392; cg.c:687:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1392; cg.c:687:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1392; cg.c:687:9

bb.14.if.end:
; predecessors: %bb.12, %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1394 :: (store 4 into %ir.j); cg.c:694:12

bb.15.for.cond49:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

  %35:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1397 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  CMP32rm %35:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1400 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1401; cg.c:694:5
  JMP_1 %bb.16, debug-location !1401; cg.c:694:5

bb.16.for.body51:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %172:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1402 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  %173:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  %174:gr32 = MOV32rm %172:gr64, 4, %173:gr64_nosp, 0, $noreg, debug-location !1402 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %174:gr32, debug-location !1406 :: (store 4 into %ir.k); cg.c:695:16

bb.17.for.cond54:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %175:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  %176:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1410 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  %177:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  CMP32rm %175:gr32, %176:gr64, 4, %177:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:31
  JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1414; cg.c:695:9
  JMP_1 %bb.18, debug-location !1414; cg.c:695:9

bb.18.for.body59:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %181:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1415 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  %182:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1417 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  MOV64mi32 %181:gr64, 8, %182:gr64_nosp, 0, $noreg, 0, debug-location !1418 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  %183:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1419 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  %184:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  MOV32mi %183:gr64, 4, %184:gr64_nosp, 0, $noreg, -1, debug-location !1421 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1422 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
  JMP_1 %bb.17, debug-location !1423; cg.c:695:9

bb.19.for.end66:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %179:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1426 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  %180:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1427 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  MOV32mi %179:gr64, 4, %180:gr64_nosp, 0, $noreg, 0, debug-location !1428 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1429 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
  JMP_1 %bb.15, debug-location !1430; cg.c:694:5

bb.20.for.end71:
; predecessors: %bb.15
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %37:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %37:gr64, debug-location !1433 :: (store 8 into %ir.size); cg.c:705:10
  %38:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1434 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  %39:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1436 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %41:fr64 = DIVSDrr %41:fr64(tied-def 0), %39:fr64, debug-location !1437; cg.c:706:29
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1438; cg.c:706:13
  $xmm0 = COPY %38:fr64, debug-location !1438; cg.c:706:13
  $xmm1 = COPY %41:fr64, debug-location !1438; cg.c:706:13
  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1438; cg.c:706:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1438; cg.c:706:13
  %42:fr64 = COPY $xmm0, debug-location !1438; cg.c:706:13
  MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1439 :: (store 8 into %ir.ratio); cg.c:706:11
  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1440 :: (store 4 into %ir.i); cg.c:708:12

bb.21.for.cond73:
; predecessors: %bb.20, %bb.47
  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

  %43:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1443 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  CMP32rm %43:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1446 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
  JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1447; cg.c:708:5
  JMP_1 %bb.22, debug-location !1447; cg.c:708:5

bb.22.for.body76:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1448 :: (store 4 into %ir.nza); cg.c:709:18

bb.23.for.cond77:
; predecessors: %bb.22, %bb.46
  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

  %86:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1452 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  %87:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1454 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  %88:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  CMP32rm %86:gr32, %87:gr64, 4, %88:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1456 :: (load 4 from %ir.arrayidx79); cg.c:709:27
  JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1457; cg.c:709:9
  JMP_1 %bb.24, debug-location !1457; cg.c:709:9

bb.24.for.body82:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %92:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1460 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  %94:gr64 = IMUL64rri8 %92:gr64, 56, implicit-def dead $eflags, debug-location !1458; cg.c:710:17
  %94:gr64 = ADD64rm %94:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1458 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  %95:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1461 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %96:gr32, debug-location !1462 :: (store 4 into %ir.j); cg.c:710:15
  %100:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  %99:gr64 = IMUL64rri8 %92:gr64, 112, implicit-def dead $eflags, debug-location !1464; cg.c:712:28
  %99:gr64 = ADD64rm %99:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1464 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
  MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %100:fr64, debug-location !1468 :: (store 8 into %ir.scale); cg.c:712:19
  MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1469 :: (store 4 into %ir.nzrow); cg.c:713:24

bb.25.for.cond91:
; predecessors: %bb.24, %bb.45
  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

  %101:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1472 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  %102:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1474 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  %103:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  CMP32rm %101:gr32, %102:gr64, 4, %103:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1476 :: (load 4 from %ir.arrayidx93); cg.c:713:35
  JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1477; cg.c:713:13
  JMP_1 %bb.26, debug-location !1477; cg.c:713:13

bb.26.for.body96:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

  %105:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1480 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  %107:gr64 = IMUL64rri8 %105:gr64, 56, implicit-def dead $eflags, debug-location !1478; cg.c:714:24
  %107:gr64 = ADD64rm %107:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1478 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  %108:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1481 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %109:gr32, debug-location !1482 :: (store 4 into %ir.jcol); cg.c:714:22
  %111:gr64 = IMUL64rri8 %105:gr64, 112, implicit-def dead $eflags, debug-location !1483; cg.c:715:22
  %111:gr64 = ADD64rm %111:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1483 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  %113:fr64 = MULSDrm %113:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1487 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %113:fr64, debug-location !1488 :: (store 8 into %ir.va); cg.c:715:20
  CMP32rm %109:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1492 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1493; cg.c:721:31
  JMP_1 %bb.27, debug-location !1493; cg.c:721:31

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  %115:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  CMP32rm %115:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1496 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1497; cg.c:721:21
  JMP_1 %bb.28, debug-location !1497; cg.c:721:21

bb.28.if.then110:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %119:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1498 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  %119:fr64 = ADDSDrm %119:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
  %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1503 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %119:fr64, debug-location !1504 :: (store 8 into %ir.va); cg.c:722:24

bb.29.if.end113:
; predecessors: %bb.26, %bb.27, %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1506 :: (store 4 into %ir.cont40); cg.c:725:24
  %120:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1507 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  %121:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  %122:gr32 = MOV32rm %120:gr64, 4, %121:gr64_nosp, 0, $noreg, debug-location !1507 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %122:gr32, debug-location !1510 :: (store 4 into %ir.k); cg.c:726:24

bb.30.for.cond116:
; predecessors: %bb.29, %bb.42
  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

  %123:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  %124:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1514 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  %125:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  CMP32rm %123:gr32, %124:gr64, 4, %125:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:39
  JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1518; cg.c:726:17
  JMP_1 %bb.31, debug-location !1518; cg.c:726:17

bb.31.for.body122:
; predecessors: %bb.30
  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

  %127:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1519 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  %128:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1519 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  CMP32rm %129:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1524 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
  JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1525; cg.c:727:25
  JMP_1 %bb.32, debug-location !1525; cg.c:727:25

bb.32.if.then127:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %144:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1526 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  %145:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  %147:gr32 = MOV32rm %144:gr64, 4, %145:gr64_nosp, 4, $noreg, debug-location !1526 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  %147:gr32 = ADD32ri8 %147:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1531; cg.c:731:49
  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !1532 :: (store 4 into %ir.kk); cg.c:731:33

bb.33.for.cond132:
; predecessors: %bb.32, %bb.36
  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

  %148:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1534 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  CMP32rm %148:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1537 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
  JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1538; cg.c:731:25
  JMP_1 %bb.34, debug-location !1538; cg.c:731:25

bb.34.for.body135:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  %164:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1539 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  %165:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  CMP32mi8 %164:gr64, 4, %165:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1543 :: (load 4 from %ir.arrayidx137); cg.c:732:44
  JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1544; cg.c:732:33
  JMP_1 %bb.35, debug-location !1544; cg.c:732:33

bb.35.if.then140:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %166:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  %167:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  %169:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1552 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  %170:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48

bb.36.if.end151:
; predecessors: %bb.34, %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  DEC32m %stack.21.kk, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1559 :: (store 4 into %ir.kk), (dereferenceable load 4 from %ir.kk); cg.c:731:65
  JMP_1 %bb.33, debug-location !1560; cg.c:731:25

bb.37.for.end153:
; predecessors: %bb.33
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %150:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1563 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  %151:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1564 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  %152:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1565 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  %153:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  %154:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1570 :: (store 4 into %ir.cont40); cg.c:739:32
  JMP_1 %bb.43, debug-location !1571; cg.c:740:25

bb.38.if.else:
; predecessors: %bb.31
  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

  %131:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1572 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  %132:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  CMP32mi8 %131:gr64, 4, %132:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:40
  JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1576; cg.c:742:30
  JMP_1 %bb.39, debug-location !1576; cg.c:742:30

bb.39.if.then162:
; predecessors: %bb.38
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %141:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1579 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  MOV32mr %142:gr64, 4, %143:gr64_nosp, 0, $noreg, %141:gr32, debug-location !1581 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1582 :: (store 4 into %ir.cont40); cg.c:744:32
  JMP_1 %bb.43, debug-location !1583; cg.c:745:25

bb.40.if.else165:
; predecessors: %bb.38
  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

  %135:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1584 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  %136:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1586 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  %137:gr32 = MOV32rm %135:gr64, 4, %136:gr64_nosp, 0, $noreg, debug-location !1584 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  CMP32rm %137:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1588 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1589; cg.c:747:30
  JMP_1 %bb.41, debug-location !1589; cg.c:747:30

bb.41.if.then170:
; predecessors: %bb.40
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %139:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1590 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  %140:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1592 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  INC32m %139:gr64, 4, %140:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1596 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1597 :: (store 4 into %ir.cont40); cg.c:752:32
  JMP_1 %bb.43, debug-location !1598; cg.c:753:25

bb.42.if.end176:
; predecessors: %bb.40
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:726:57
  JMP_1 %bb.30, debug-location !1600; cg.c:726:17

bb.43.for.end181:
; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

  CMP32mi8 %stack.28.cont40, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1605 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:28
  JCC_1 %bb.45, 5, implicit killed $eflags, debug-location !1606; cg.c:756:21
  JMP_1 %bb.44, debug-location !1606; cg.c:756:21

bb.44.if.then184:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %155:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1607 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1609; cg.c:757:21
  $rdi = MOV32ri64 @.str.39, debug-location !1609; cg.c:757:21
  $esi = COPY %155:gr32, debug-location !1609; cg.c:757:21
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1609; cg.c:757:21
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1609; cg.c:757:21
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1609; cg.c:757:21

bb.45.if.end186:
; predecessors: %bb.43, %bb.44
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %160:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1611 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1612 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  %163:fr64 = MOVSDrm_alt %160:gr64, 8, %161:gr64_nosp, 0, $noreg, debug-location !1611 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  %163:fr64 = ADDSDrm %163:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
  MOVSDmr %160:gr64, 8, %161:gr64_nosp, 0, $noreg, %163:fr64, debug-location !1617 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1618 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  JMP_1 %bb.25, debug-location !1619; cg.c:713:13

bb.46.for.end194:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1622 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:709:41
  JMP_1 %bb.23, debug-location !1623; cg.c:709:9

bb.47.for.end197:
; predecessors: %bb.23
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %91:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1626 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  %91:fr64 = MULSDrm %91:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1628 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
  MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %91:fr64, debug-location !1629 :: (store 8 into %ir.size); cg.c:764:14
  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1630 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
  JMP_1 %bb.21, debug-location !1631; cg.c:708:5

bb.48.for.end201:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1634 :: (store 4 into %ir.j); cg.c:770:12

bb.49.for.cond202:
; predecessors: %bb.48, %bb.50
  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

  %45:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1637 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  CMP32rm %45:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1640 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
  JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1641; cg.c:770:5
  JMP_1 %bb.50, debug-location !1641; cg.c:770:5

bb.50.for.body205:
; predecessors: %bb.49
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %83:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1642 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  %84:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1644 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  %85:gr32 = MOV32rm %83:gr64, 4, %84:gr64_nosp, -4, $noreg, debug-location !1645 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  ADD32mr %83:gr64, 4, %84:gr64_nosp, 0, $noreg, %85:gr32, implicit-def dead $eflags, debug-location !1651 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1652 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
  JMP_1 %bb.49, debug-location !1653; cg.c:770:5

bb.51.for.end216:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1656 :: (store 4 into %ir.j); cg.c:774:12

bb.52.for.cond217:
; predecessors: %bb.51, %bb.59
  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

  %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1659 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1662 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
  JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1663; cg.c:774:5
  JMP_1 %bb.53, debug-location !1663; cg.c:774:5

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

  CMP32mi8 %stack.16.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:15
  JCC_1 %bb.55, 14, implicit killed $eflags, debug-location !1668; cg.c:775:13
  JMP_1 %bb.54, debug-location !1668; cg.c:775:13

bb.54.if.then223:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  %61:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1669 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  %62:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1671 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  %65:gr32 = MOV32rm %61:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !1669 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  %64:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  %65:gr32 = nsw SUB32rm %65:gr32(tied-def 0), %64:gr64, 4, %62:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:28
  MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %65:gr32, debug-location !1676 :: (store 4 into %ir.j1); cg.c:776:16
  JMP_1 %bb.56, debug-location !1677; cg.c:777:9

bb.55.if.else230:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  MOV32mi %stack.17.j1, 1, $noreg, 0, $noreg, 0, debug-location !1678 :: (store 4 into %ir.j1); cg.c:779:16

bb.56.if.end231:
; predecessors: %bb.55, %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %66:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1680 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  %67:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1681 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  %69:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
  MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %70:gr32, debug-location !1686 :: (store 4 into %ir.j2); cg.c:781:12
  %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %71:gr32, debug-location !1689 :: (store 4 into %ir.nza); cg.c:782:13
  %72:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1690 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %72:gr32, debug-location !1692 :: (store 4 into %ir.k); cg.c:783:16

bb.57.for.cond240:
; predecessors: %bb.56, %bb.58
  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

  %73:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1694 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  CMP32rm %73:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1697 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
  JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1698; cg.c:783:9
  JMP_1 %bb.58, debug-location !1698; cg.c:783:9

bb.58.for.body243:
; predecessors: %bb.57
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %75:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1699 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  %76:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1701 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  %78:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1703 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  %79:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1705 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  %80:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  %82:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1712 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1713 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
  JMP_1 %bb.57, debug-location !1714; cg.c:783:9

bb.59.for.end255:
; predecessors: %bb.57
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1717 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:774:29
  JMP_1 %bb.52, debug-location !1718; cg.c:774:5

bb.60.for.end258:
; predecessors: %bb.52
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1721 :: (store 4 into %ir.j); cg.c:789:12

bb.61.for.cond259:
; predecessors: %bb.60, %bb.62
  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

  %51:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1726 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  %51:gr32 = nsw INC32r %51:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1727; cg.c:789:27
  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, implicit-def $eflags, debug-location !1728 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
  JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1729; cg.c:789:5
  JMP_1 %bb.62, debug-location !1729; cg.c:789:5

bb.62.for.body263:
; predecessors: %bb.61
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %57:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1730 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  %58:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1732 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  %59:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  %60:gr32 = MOV32rm %59:gr64, 4, %58:gr64_nosp, -4, $noreg, debug-location !1733 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  SUB32mr %57:gr64, 4, %58:gr64_nosp, 0, $noreg, %60:gr32, implicit-def dead $eflags, debug-location !1739 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1740 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
  JMP_1 %bb.61, debug-location !1741; cg.c:789:5

bb.63.for.end274:
; predecessors: %bb.61

  %53:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1744 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  %54:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1745 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  %56:gr32 = MOV32rm %53:gr64, 4, %54:gr64_nosp, 0, $noreg, debug-location !1744 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  %56:gr32 = DEC32r %56:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1746; cg.c:792:25
  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %56:gr32, debug-location !1747 :: (store 4 into %ir.nza); cg.c:792:9
  RET 0, debug-location !1748; cg.c:793:1

# End machine code for function sparse.

********** MI Scheduling **********
sparse:%bb.0 entry
  From: %7:fr64 = COPY $xmm1
    To: End RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=12
Live In: DIL DIH HDI SIL SIH HSI DH DL HDX CH CL HCX R8B R8BH R8WH R9B R9BH R9WH XMM0 XMM1 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %7:fr64 = COPY $xmm1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%7
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %6:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %5:gr32 = COPY $r9d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%5
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(3):   %4:gr32 = COPY $r8d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%4
  Pressure Diff      : GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(4):   %3:gr32 = COPY $ecx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%3
  Pressure Diff      : GR32_BSI 2    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2
  Single Issue       : false;
SU(5):   %2:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%2
  Pressure Diff      : GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 2    GR32_TC 2    GR32_BPSP+GR32_TC 2    GR64_NOREX 2    GR64_TCW64 2    GR32_BPSP+GR64_TCW64 2    GR8 2    GR8+GR32_DIBP 2    GR8+GR32_BSI 2    GR64_TC+GR64_TCW64 2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 2    GR8+GR64_NOREX 2    GR64_TC 2    GR8+GR64_TCW64 2
  Single Issue       : false;
SU(6):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BSI 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR8_ABCD_H+GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(7):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(8):   MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(11):   MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(13):   MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(15):   MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(16):   %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1292 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(17): Data Latency=4 Reg=%10
    SU(17): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(17):   %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1294 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(16): Data Latency=4 Reg=%10
    SU(16): Out  Latency=0
  Successors:
    SU(18): Data Latency=4 Reg=%10
    SU(18): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1295; cg.c:659:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(17): Data Latency=4 Reg=%10
    SU(17): Out  Latency=0
  Successors:
    SU(19): Data Latency=1 Reg=%10
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1296 :: (store 4 into %ir.nrows); cg.c:659:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%10
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(20):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1297 :: (store 4 into %ir.j); cg.c:664:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 15 14 13 12 11 10 9 8 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1297 :: (store 4 into %ir.j); cg.c:664:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 19 15 14 13 12 11 10 9 
  Cand SU(8) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1296 :: (store 4 into %ir.nrows); cg.c:659:11
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(19) MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1296 :: (store 4 into %ir.nrows); cg.c:659:11
              to 
  Ready @0c
  BotQ.A TopLatency SU(19) 9c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 18 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1295; cg.c:659:32
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(18) %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1295; cg.c:659:32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(18) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 17 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1294 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
Bottom Pressure:
GR16=2
  LiveReg: %10
  UpdateRegP: SU(17) %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1294 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
              to GR16 -2
  Ready @5c
  BotQ.A BotLatency SU(17) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 16 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1292 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
Bottom Pressure:

  Ready @9c
  BotQ.A BotLatency SU(16) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %7
  UpdateRegP: SU(15) MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 14 13 12 11 0 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(14) MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %6
  UpdateRegP: SU(14) MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 13 12 11 1 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(13) MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %5
  UpdateRegP: SU(13) MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
              to 
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 1 12 11 2 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(12) MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %4
  UpdateRegP: SU(12) MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 1 2 11 3 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(11) MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=6
  LiveReg: %3
  UpdateRegP: SU(11) MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 0 1 2 3 4 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(10) MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=8
  LiveReg: %2
  UpdateRegP: SU(10) MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @2c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 4 0 1 2 3 5 
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(9) MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=10
  LiveReg: %1
  UpdateRegP: SU(9) MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 4 0 1 2 3 6 
  Cand SU(8) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(8) MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FR32=2
FR32X=2
GR16=12
  LiveReg: %0
  UpdateRegP: SU(8) MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 0 1 2 3 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %0:gr64 = COPY $rdi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=2
GR16=11
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 0 1 2 3 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %1:gr64 = COPY $rsi
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=10
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 0 1 2 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %2:gr64 = COPY $rdx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
FR32X=2
GR16=10
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 4 0 1 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %3:gr32 = COPY $ecx
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
FR32X=2
GR16=10
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %4:gr32 = COPY $r8d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
FR32X=2
GR16=9
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %5:gr32 = COPY $r9d
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %6:fr64 = COPY $xmm0
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %7:fr64 = COPY $xmm1
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
FR32X=2
GR16=8
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:fr64 = COPY $xmm1
SU(1):   %6:fr64 = COPY $xmm0
SU(2):   %5:gr32 = COPY $r9d
SU(3):   %4:gr32 = COPY $r8d
SU(4):   %3:gr32 = COPY $ecx
SU(5):   %2:gr64 = COPY $rdx
SU(6):   %1:gr64 = COPY $rsi
SU(7):   %0:gr64 = COPY $rdi
SU(8):   MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
SU(9):   MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
SU(10):   MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
SU(11):   MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
SU(12):   MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
SU(13):   MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
SU(14):   MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
SU(15):   MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
SU(16):   %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1292 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
SU(17):   %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1294 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
SU(18):   %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1295; cg.c:659:32
SU(19):   MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1296 :: (store 4 into %ir.nrows); cg.c:659:11
SU(20):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1297 :: (store 4 into %ir.j); cg.c:664:12

********** MI Scheduling **********
sparse:%bb.1 for.cond
  From: %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1302 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
    To: JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1305; cg.c:664:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1302 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%13
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1303; cg.c:664:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%13
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%13
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1304 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%13
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1305; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1304 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1303; cg.c:664:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1302 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1302 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
SU(1):   %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1303; cg.c:664:27
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1304 :: (dereferenceable load 4 from %ir.j); cg.c:664:19

********** MI Scheduling **********
sparse:%bb.2 for.body
  From: %202:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1306 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
    To: JMP_1 %bb.1, debug-location !1311; cg.c:664:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %202:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1306 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%202
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %203:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1308 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%203
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %202:gr64, 4, %203:gr64_nosp, 0, $noreg, 0, debug-location !1309 :: (store 4 into %ir.arrayidx); cg.c:665:19
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%203
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%202
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1310 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !1311; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1310 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
  Ready @3c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %202:gr64, 4, %203:gr64_nosp, 0, $noreg, 0, debug-location !1309 :: (store 4 into %ir.arrayidx); cg.c:665:19
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %203:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1308 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %202:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1306 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %202:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1306 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
SU(1):   %203:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1308 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
SU(2):   MOV32mi %202:gr64, 4, %203:gr64_nosp, 0, $noreg, 0, debug-location !1309 :: (store 4 into %ir.arrayidx); cg.c:665:19
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1310 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33

********** MI Scheduling **********
sparse:%bb.4 for.cond2
  From: %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1317 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
    To: JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1321; cg.c:668:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1317 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(1):   CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1320 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%15
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1321; cg.c:668:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1320 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1317 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1317 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
SU(1):   CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1320 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19

********** MI Scheduling **********
sparse:%bb.6 for.cond5
  From: %188:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1326 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
    To: JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1331; cg.c:669:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %188:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1326 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%188
  Single Issue       : false;
SU(1):   %189:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1328 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%189
  Single Issue       : false;
SU(2):   %190:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(3):   CMP32rm %188:gr32, %189:gr64, 4, %190:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1330 :: (load 4 from %ir.arrayidx7); cg.c:669:27
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%190
    SU(1): Data Latency=4 Reg=%189
    SU(0): Data Latency=4 Reg=%188
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1331; cg.c:669:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %188:gr32, %189:gr64, 4, %190:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1330 :: (load 4 from %ir.arrayidx7); cg.c:669:27
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %190:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %189:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1328 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %188:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1326 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %188:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1326 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
SU(1):   %189:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1328 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
SU(2):   %190:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
SU(3):   CMP32rm %188:gr32, %189:gr64, 4, %190:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1330 :: (load 4 from %ir.arrayidx7); cg.c:669:27

********** MI Scheduling **********
sparse:%bb.7 for.body9
  From: %192:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1334 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
    To: JMP_1 %bb.6, debug-location !1347; cg.c:669:9
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %192:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1334 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(9): Data Latency=4 Reg=%192
    SU(1): Data Latency=4 Reg=%192
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %194:gr64 = IMUL64rri8 %192:gr64_nosp, 56, implicit-def dead $eflags, debug-location !1332; cg.c:670:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%192
  Successors:
    SU(2): Data Latency=1 Reg=%194
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %194:gr64 = ADD64rm %194:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1332 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=%194
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%194
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %195:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1335 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(4): Data Latency=4 Reg=%195
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(2): Data Latency=4 Reg=%194
    SU(3): Data Latency=4 Reg=%195
  Successors:
    SU(10): Data Latency=4 Reg=%204
    SU(5): Data Latency=4 Reg=%204
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %198:gr32 = LEA64_32r %204:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1336; cg.c:670:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(4): Data Latency=4 Reg=%204
  Successors:
    SU(6): Data Latency=1 Reg=%198
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %198:gr32, debug-location !1337 :: (store 4 into %ir.j); cg.c:670:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(5): Data Latency=1 Reg=%198
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %199:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(10): Data Latency=4 Reg=%199
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1340 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(9): Data Latency=4 Reg=%200
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(8): Data Latency=4 Reg=%200
    SU(6): Ord  Latency=1 Memory
    SU(0): Data Latency=4 Reg=%192
  Successors:
    SU(10): Data Latency=4 Reg=%201
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
  # preds left       : 11
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(9): Data Latency=4 Reg=%201
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=4 Reg=%199
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%204
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(11):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1346 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 3
  Predecessors:
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.6, debug-location !1347; cg.c:669:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=3 Artificial
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1346 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(11) 19c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
Bottom Pressure:
GR16=6
  LiveReg: %199
  UpdateRegP: SU(10) ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
              to GR16 4
  LiveReg: %204
  UpdateRegP: SU(5) %198:gr32 = LEA64_32r %204:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1336; cg.c:670:30
              to GR16 -2
  UpdateRegP: SU(10) ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
              to GR16 2
  LiveReg: %201
  UpdateRegP: SU(10) ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
              to 
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
Bottom Pressure:
GR16=8
  LiveReg: %200
  UpdateRegP: SU(9) %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to 
  LiveReg: %192
  UpdateRegP: SU(1) %194:gr64 = IMUL64rri8 %192:gr64_nosp, 56, implicit-def dead $eflags, debug-location !1332; cg.c:670:17
              to GR16 -2
  UpdateRegP: SU(9) %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to GR16 -2
  Ready @7c
  BotQ.A BotLatency SU(9) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 6 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(8) %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1340 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
Bottom Pressure:
GR16=6
  Ready @11c
  BotQ.A BotLatency SU(8) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 6 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %199:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
Bottom Pressure:
GR16=4
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %198:gr32, debug-location !1337 :: (store 4 into %ir.j); cg.c:670:15
Bottom Pressure:
GR16=6
  LiveReg: %198
  UpdateRegP: SU(6) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %198:gr32, debug-location !1337 :: (store 4 into %ir.j); cg.c:670:15
              to 
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %198:gr32 = LEA64_32r %204:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1336; cg.c:670:30
Bottom Pressure:
GR16=4
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
Bottom Pressure:
GR16=6
  LiveReg: %194
  UpdateRegP: SU(4) %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to 
  LiveReg: %195
  UpdateRegP: SU(4) %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(4) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %195:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1335 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
Bottom Pressure:
GR16=4
  Ready @17c
  BotQ.A BotLatency SU(3) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %194:gr64 = ADD64rm %194:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1332 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
Bottom Pressure:
GR16=4
  LiveReg: %194
  UpdateRegP: SU(2) %194:gr64 = ADD64rm %194:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1332 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
              to GR16 -2
  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %194:gr64 = IMUL64rri8 %192:gr64_nosp, 56, implicit-def dead $eflags, debug-location !1332; cg.c:670:17
Bottom Pressure:
GR16=2
  Ready @18c
  BotQ.A BotLatency SU(1) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %192:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1334 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
Bottom Pressure:

  Ready @22c
  BotQ.A BotLatency SU(0) 22c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %192:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1334 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
SU(1):   %194:gr64 = IMUL64rri8 %192:gr64_nosp, 56, implicit-def dead $eflags, debug-location !1332; cg.c:670:17
SU(2):   %194:gr64 = ADD64rm %194:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1332 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
SU(3):   %195:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1335 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
SU(4):   %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
SU(5):   %198:gr32 = LEA64_32r %204:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1336; cg.c:670:30
SU(6):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %198:gr32, debug-location !1337 :: (store 4 into %ir.j); cg.c:670:15
SU(7):   %199:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
SU(8):   %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1340 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
SU(9):   %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
SU(10):   ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
SU(11):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1346 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41

********** MI Scheduling **********
sparse:%bb.9 for.end27
  From: %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1354 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1354 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%17
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1355 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1356 :: (store 4 into %ir.j); cg.c:676:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1356 :: (store 4 into %ir.j); cg.c:676:12
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1355 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1354 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1354 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
SU(1):   MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1355 :: (store 4 into %ir.arrayidx281); cg.c:675:15
SU(2):   MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1356 :: (store 4 into %ir.j); cg.c:676:12

********** MI Scheduling **********
sparse:%bb.10 for.cond29
  From: %20:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1361 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
    To: JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1364; cg.c:676:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %20:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1361 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%20
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %20:gr32 = nsw INC32r %20:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1362; cg.c:676:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%20
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%20
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %20:gr32, implicit-def $eflags, debug-location !1363 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%20
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1364; cg.c:676:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %20:gr32, implicit-def $eflags, debug-location !1363 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %20:gr32 = nsw INC32r %20:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1362; cg.c:676:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1361 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %20:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1361 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
SU(1):   %20:gr32 = nsw INC32r %20:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1362; cg.c:676:27
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %20:gr32, implicit-def $eflags, debug-location !1363 :: (dereferenceable load 4 from %ir.j); cg.c:676:19

********** MI Scheduling **********
sparse:%bb.11 for.body32
  From: %185:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1365 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
    To: JMP_1 %bb.10, debug-location !1376; cg.c:676:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %185:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1365 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%185
    SU(2): Data Latency=4 Reg=%185
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %186:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1367 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%186
    SU(2): Data Latency=4 Reg=%186
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %187:gr32 = MOV32rm %185:gr64, 4, %186:gr64_nosp, -4, $noreg, debug-location !1368 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%186
    SU(0): Data Latency=4 Reg=%185
  Successors:
    SU(3): Data Latency=4 Reg=%187
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   ADD32mr %185:gr64, 4, %186:gr64_nosp, 0, $noreg, %187:gr32, implicit-def dead $eflags, debug-location !1374 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%187
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%186
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%185
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1375 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10, debug-location !1376; cg.c:676:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1375 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
  Ready @3c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) ADD32mr %185:gr64, 4, %186:gr64_nosp, 0, $noreg, %187:gr32, implicit-def dead $eflags, debug-location !1374 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %187:gr32 = MOV32rm %185:gr64, 4, %186:gr64_nosp, -4, $noreg, debug-location !1368 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %186:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1367 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %185:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1365 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %185:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1365 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
SU(1):   %186:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1367 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
SU(2):   %187:gr32 = MOV32rm %185:gr64, 4, %186:gr64_nosp, -4, $noreg, debug-location !1368 :: (load 4 from %ir.arrayidx37); cg.c:677:33
SU(3):   ADD32mr %185:gr64, 4, %186:gr64_nosp, 0, $noreg, %187:gr32, implicit-def dead $eflags, debug-location !1374 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1375 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33

********** MI Scheduling **********
sparse:%bb.12 for.end43
  From: %22:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1379 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
    To: JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1387; cg.c:685:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %22:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1379 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(1):   %23:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1380 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(2): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(2):   %25:gr32 = MOV32rm %22:gr64, 4, %23:gr64_nosp, 0, $noreg, debug-location !1379 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Data Latency=4 Reg=%23
    SU(0): Data Latency=4 Reg=%22
  Successors:
    SU(3): Data Latency=4 Reg=%25
    SU(3): Out  Latency=0
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %25:gr32 = DEC32r %25:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1381; cg.c:679:25
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%25
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%25
    SU(4): Data Latency=1 Reg=%25
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1382 :: (store 4 into %ir.nza); cg.c:679:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%25
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   CMP32rm %25:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1386 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=%25
    SU(3): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1387; cg.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) CMP32rm %25:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1386 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
  Ready @4c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1382 :: (store 4 into %ir.nza); cg.c:679:9
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %25:gr32 = DEC32r %25:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1381; cg.c:679:25
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %25:gr32 = MOV32rm %22:gr64, 4, %23:gr64_nosp, 0, $noreg, debug-location !1379 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %23:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1380 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  Ready @13c
  BotQ.A BotLatency SU(1) 13c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %22:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1379 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  Ready @13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %22:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1379 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
SU(1):   %23:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1380 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
SU(2):   %25:gr32 = MOV32rm %22:gr64, 4, %23:gr64_nosp, 0, $noreg, debug-location !1379 :: (load 4 from %ir.arrayidx45); cg.c:679:11
SU(3):   %25:gr32 = DEC32r %25:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1381; cg.c:679:25
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1382 :: (store 4 into %ir.nza); cg.c:679:9
SU(5):   CMP32rm %25:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1386 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $rdi = MOV32ri64 @.str.38, debug-location !1392; cg.c:687:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1392; cg.c:687:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.38, debug-location !1392; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %31:gr32, debug-location !1392; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %32:gr32, debug-location !1392; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1392; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1392; cg.c:687:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1392; cg.c:687:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %32:gr32, debug-location !1392; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %31:gr32, debug-location !1392; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.38, debug-location !1392; cg.c:687:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = MOV32ri64 @.str.38, debug-location !1392; cg.c:687:9
SU(1):   $esi = COPY %31:gr32, debug-location !1392; cg.c:687:9
SU(2):   $edx = COPY %32:gr32, debug-location !1392; cg.c:687:9
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1392; cg.c:687:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: %31:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1390 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1392; cg.c:687:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %31:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1390 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %32:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1391 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1392; cg.c:687:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %32:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1391 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %31:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1390 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %31:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1390 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
SU(1):   %32:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1391 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $rdi = MOV32ri64 @.str.37, debug-location !1388; cg.c:686:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1388; cg.c:686:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.37, debug-location !1388; cg.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1388; cg.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1388; cg.c:686:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1388; cg.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.37, debug-location !1388; cg.c:686:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = MOV32ri64 @.str.37, debug-location !1388; cg.c:686:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1388; cg.c:686:9

********** MI Scheduling **********
sparse:%bb.15 for.cond49
  From: %35:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1397 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
    To: JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1401; cg.c:694:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %35:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1397 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%35
  Single Issue       : false;
SU(1):   CMP32rm %35:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1400 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%35
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1401; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %35:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1400 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %35:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1397 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %35:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1397 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
SU(1):   CMP32rm %35:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1400 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19

********** MI Scheduling **********
sparse:%bb.16 for.body51
  From: %172:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1402 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %172:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1402 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%172
  Single Issue       : false;
SU(1):   %173:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%173
  Single Issue       : false;
SU(2):   %174:gr32 = MOV32rm %172:gr64, 4, %173:gr64_nosp, 0, $noreg, debug-location !1402 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%173
    SU(0): Data Latency=4 Reg=%172
  Successors:
    SU(3): Data Latency=4 Reg=%174
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %174:gr32, debug-location !1406 :: (store 4 into %ir.k); cg.c:695:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%174
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %174:gr32, debug-location !1406 :: (store 4 into %ir.k); cg.c:695:16
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %174:gr32 = MOV32rm %172:gr64, 4, %173:gr64_nosp, 0, $noreg, debug-location !1402 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %173:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %172:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1402 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %172:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1402 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
SU(1):   %173:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
SU(2):   %174:gr32 = MOV32rm %172:gr64, 4, %173:gr64_nosp, 0, $noreg, debug-location !1402 :: (load 4 from %ir.arrayidx53); cg.c:695:18
SU(3):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %174:gr32, debug-location !1406 :: (store 4 into %ir.k); cg.c:695:16

********** MI Scheduling **********
sparse:%bb.17 for.cond54
  From: %175:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
    To: JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1414; cg.c:695:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %175:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%175
  Single Issue       : false;
SU(1):   %176:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1410 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%176
  Single Issue       : false;
SU(2):   %177:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%177
  Single Issue       : false;
SU(3):   CMP32rm %175:gr32, %176:gr64, 4, %177:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%177
    SU(1): Data Latency=4 Reg=%176
    SU(0): Data Latency=4 Reg=%175
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1414; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %175:gr32, %176:gr64, 4, %177:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:31
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %177:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %176:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1410 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %175:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %175:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
SU(1):   %176:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1410 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
SU(2):   %177:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
SU(3):   CMP32rm %175:gr32, %176:gr64, 4, %177:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:31

********** MI Scheduling **********
sparse:%bb.18 for.body59
  From: %181:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1415 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
    To: JMP_1 %bb.17, debug-location !1423; cg.c:695:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %181:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1415 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%181
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %182:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1417 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%182
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV64mi32 %181:gr64, 8, %182:gr64_nosp, 0, $noreg, 0, debug-location !1418 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%182
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%181
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %183:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1419 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%183
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %184:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%184
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   MOV32mi %183:gr64, 4, %184:gr64_nosp, 0, $noreg, -1, debug-location !1421 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%184
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%183
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1422 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.17, debug-location !1423; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1422 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
  Ready @3c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mi %183:gr64, 4, %184:gr64_nosp, 0, $noreg, -1, debug-location !1421 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %184:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  Ready @7c
  BotQ.A BotLatency SU(4) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %183:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1419 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV64mi32 %181:gr64, 8, %182:gr64_nosp, 0, $noreg, 0, debug-location !1418 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %182:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1417 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %181:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1415 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %181:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1415 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
SU(1):   %182:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1417 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
SU(2):   MOV64mi32 %181:gr64, 8, %182:gr64_nosp, 0, $noreg, 0, debug-location !1418 :: (store 8 into %ir.arrayidx61); cg.c:696:18
SU(3):   %183:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1419 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
SU(4):   %184:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
SU(5):   MOV32mi %183:gr64, 4, %184:gr64_nosp, 0, $noreg, -1, debug-location !1421 :: (store 4 into %ir.arrayidx63); cg.c:697:23
SU(6):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1422 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49

********** MI Scheduling **********
sparse:%bb.19 for.end66
  From: %179:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1426 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
    To: JMP_1 %bb.15, debug-location !1430; cg.c:694:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %179:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1426 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%179
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %180:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1427 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%180
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOV32mi %179:gr64, 4, %180:gr64_nosp, 0, $noreg, 0, debug-location !1428 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%180
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%179
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1429 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.15, debug-location !1430; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1429 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
  Ready @3c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mi %179:gr64, 4, %180:gr64_nosp, 0, $noreg, 0, debug-location !1428 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %180:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1427 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %179:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1426 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %179:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1426 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
SU(1):   %180:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1427 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
SU(2):   MOV32mi %179:gr64, 4, %180:gr64_nosp, 0, $noreg, 0, debug-location !1428 :: (store 4 into %ir.arrayidx68); cg.c:699:18
SU(3):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1429 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %42:fr64 = COPY $xmm0, debug-location !1438; cg.c:706:13
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %42:fr64 = COPY $xmm0, debug-location !1438; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(1):   MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1439 :: (store 8 into %ir.ratio); cg.c:706:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%42
  Single Issue       : false;
SU(2):   MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1440 :: (store 4 into %ir.i); cg.c:708:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1440 :: (store 4 into %ir.i); cg.c:708:12
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1439 :: (store 8 into %ir.ratio); cg.c:706:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %42:fr64 = COPY $xmm0, debug-location !1438; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %42:fr64 = COPY $xmm0, debug-location !1438; cg.c:706:13
SU(1):   MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1439 :: (store 8 into %ir.ratio); cg.c:706:11
SU(2):   MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1440 :: (store 4 into %ir.i); cg.c:708:12

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: $xmm0 = COPY %38:fr64, debug-location !1438; cg.c:706:13
    To: CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1438; cg.c:706:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $xmm0 = COPY %38:fr64, debug-location !1438; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $xmm1 = COPY %41:fr64, debug-location !1438; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1438; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $xmm1 = COPY %41:fr64, debug-location !1438; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $xmm0 = COPY %38:fr64, debug-location !1438; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $xmm0 = COPY %38:fr64, debug-location !1438; cg.c:706:13
SU(1):   $xmm1 = COPY %41:fr64, debug-location !1438; cg.c:706:13

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %37:gr64 = MOV64ri 4607182418800017408
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1438; cg.c:706:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %37:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(1):   MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %37:gr64, debug-location !1433 :: (store 8 into %ir.size); cg.c:705:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(2):   %38:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1434 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %39:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1436 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(4):   %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=%41
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(5):   %41:fr64 = DIVSDrr %41:fr64(tied-def 0), %39:fr64, debug-location !1437; cg.c:706:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 10
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(4): Data Latency=4 Reg=%41
    SU(4): Out  Latency=0
    SU(3): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=9 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1438; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=9 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 2 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %41:fr64 = DIVSDrr %41:fr64(tied-def 0), %39:fr64, debug-location !1437; cg.c:706:29
  Ready @9c
  BotQ.A TopLatency SU(5) 4c
  BotQ.A BotLatency SU(5) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 4 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @13c
  BotQ.A BotLatency SU(4) 13c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %39:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1436 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  Ready @13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %38:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1434 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  Ready @3c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %37:gr64, debug-location !1433 :: (store 8 into %ir.size); cg.c:705:10
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %37:gr64 = MOV64ri 4607182418800017408
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %37:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %37:gr64, debug-location !1433 :: (store 8 into %ir.size); cg.c:705:10
SU(2):   %38:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1434 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
SU(3):   %39:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1436 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
SU(4):   %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(5):   %41:fr64 = DIVSDrr %41:fr64(tied-def 0), %39:fr64, debug-location !1437; cg.c:706:29

********** MI Scheduling **********
sparse:%bb.21 for.cond73
  From: %43:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1443 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
    To: JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1447; cg.c:708:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %43:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1443 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%43
  Single Issue       : false;
SU(1):   CMP32rm %43:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1446 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%43
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1447; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %43:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1446 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %43:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1443 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %43:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1443 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
SU(1):   CMP32rm %43:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1446 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19

********** MI Scheduling **********
sparse:%bb.23 for.cond77
  From: %86:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1452 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
    To: JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1457; cg.c:709:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %86:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1452 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%86
  Single Issue       : false;
SU(1):   %87:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1454 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%87
  Single Issue       : false;
SU(2):   %88:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%88
  Single Issue       : false;
SU(3):   CMP32rm %86:gr32, %87:gr64, 4, %88:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1456 :: (load 4 from %ir.arrayidx79); cg.c:709:27
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%88
    SU(1): Data Latency=4 Reg=%87
    SU(0): Data Latency=4 Reg=%86
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1457; cg.c:709:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %86:gr32, %87:gr64, 4, %88:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1456 :: (load 4 from %ir.arrayidx79); cg.c:709:27
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %88:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %87:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1454 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %86:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1452 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %86:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1452 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
SU(1):   %87:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1454 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
SU(2):   %88:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
SU(3):   CMP32rm %86:gr32, %87:gr64, 4, %88:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1456 :: (load 4 from %ir.arrayidx79); cg.c:709:27

********** MI Scheduling **********
sparse:%bb.24 for.body82
  From: %92:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1460 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %92:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1460 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(7): Data Latency=4 Reg=%92
    SU(1): Data Latency=4 Reg=%92
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %94:gr64 = IMUL64rri8 %92:gr64, 56, implicit-def dead $eflags, debug-location !1458; cg.c:710:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(0): Data Latency=4 Reg=%92
  Successors:
    SU(2): Data Latency=1 Reg=%94
    SU(2): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %94:gr64 = ADD64rm %94:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1458 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(1): Data Latency=1 Reg=%94
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%94
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %95:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1461 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Data Latency=4 Reg=%95
    SU(4): Data Latency=4 Reg=%95
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%94
    SU(3): Data Latency=4 Reg=%95
  Successors:
    SU(5): Data Latency=4 Reg=%96
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %96:gr32, debug-location !1462 :: (store 4 into %ir.j); cg.c:710:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%96
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %100:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(9): Data Latency=4 Reg=%100
    SU(9): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(7):   %99:gr64 = IMUL64rri8 %92:gr64, 112, implicit-def dead $eflags, debug-location !1464; cg.c:712:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%92
  Successors:
    SU(8): Data Latency=1 Reg=%99
    SU(8): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %99:gr64 = ADD64rm %99:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1464 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=%99
    SU(7): Out  Latency=0
  Successors:
    SU(9): Data Latency=4 Reg=%99
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 4
  Predecessors:
    SU(8): Data Latency=4 Reg=%99
    SU(6): Data Latency=4 Reg=%100
    SU(6): Out  Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%95
  Successors:
    SU(10): Data Latency=4 Reg=%100
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(10):   MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %100:fr64, debug-location !1468 :: (store 8 into %ir.scale); cg.c:712:19
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(9): Data Latency=4 Reg=%100
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1469 :: (store 4 into %ir.nzrow); cg.c:713:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 18
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1469 :: (store 4 into %ir.nzrow); cg.c:713:24
Bottom Pressure:

  Ready @0c
  BotQ.A TopLatency SU(11) 14c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %100:fr64, debug-location !1468 :: (store 8 into %ir.scale); cg.c:712:19
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %100
  UpdateRegP: SU(10) MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %100:fr64, debug-location !1468 :: (store 8 into %ir.scale); cg.c:712:19
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 18c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %100
  UpdateRegP: SU(9) %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
              to FR32 -1    FR32X -1    GR16 4
  LiveReg: %99
  UpdateRegP: SU(9) %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %95
  UpdateRegP: SU(4) %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
              to 
  UpdateRegP: SU(9) %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(9) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 5 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %99:gr64 = ADD64rm %99:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1464 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %99
  UpdateRegP: SU(8) %99:gr64 = ADD64rm %99:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1464 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
              to GR16 -2
  Ready @8c
  BotQ.A BotLatency SU(8) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %99:gr64 = IMUL64rri8 %92:gr64, 112, implicit-def dead $eflags, debug-location !1464; cg.c:712:28
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %92
  UpdateRegP: SU(1) %94:gr64 = IMUL64rri8 %92:gr64, 56, implicit-def dead $eflags, debug-location !1458; cg.c:710:17
              to GR16 -2
  UpdateRegP: SU(7) %99:gr64 = IMUL64rri8 %92:gr64, 112, implicit-def dead $eflags, debug-location !1464; cg.c:712:28
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(7) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %100:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
Bottom Pressure:
GR16=4
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %96:gr32, debug-location !1462 :: (store 4 into %ir.j); cg.c:710:15
Bottom Pressure:
GR16=6
  LiveReg: %96
  UpdateRegP: SU(5) MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %96:gr32, debug-location !1462 :: (store 4 into %ir.j); cg.c:710:15
              to 
  Ready @5c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
Bottom Pressure:
GR16=6
  LiveReg: %94
  UpdateRegP: SU(4) %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
              to GR16 -2
  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %95:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1461 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
Bottom Pressure:
GR16=4
  Ready @13c
  BotQ.A BotLatency SU(3) 13c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %94:gr64 = ADD64rm %94:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1458 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
Bottom Pressure:
GR16=4
  LiveReg: %94
  UpdateRegP: SU(2) %94:gr64 = ADD64rm %94:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1458 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
              to GR16 -2
  Ready @13c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %94:gr64 = IMUL64rri8 %92:gr64, 56, implicit-def dead $eflags, debug-location !1458; cg.c:710:17
Bottom Pressure:
GR16=2
  Ready @14c
  BotQ.A BotLatency SU(1) 14c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %92:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1460 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(0) 18c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %92:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1460 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
SU(1):   %94:gr64 = IMUL64rri8 %92:gr64, 56, implicit-def dead $eflags, debug-location !1458; cg.c:710:17
SU(2):   %94:gr64 = ADD64rm %94:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1458 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
SU(3):   %95:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1461 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
SU(4):   %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
SU(5):   MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %96:gr32, debug-location !1462 :: (store 4 into %ir.j); cg.c:710:15
SU(6):   %100:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
SU(7):   %99:gr64 = IMUL64rri8 %92:gr64, 112, implicit-def dead $eflags, debug-location !1464; cg.c:712:28
SU(8):   %99:gr64 = ADD64rm %99:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1464 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
SU(9):   %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
SU(10):   MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %100:fr64, debug-location !1468 :: (store 8 into %ir.scale); cg.c:712:19
SU(11):   MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1469 :: (store 4 into %ir.nzrow); cg.c:713:24

********** MI Scheduling **********
sparse:%bb.25 for.cond91
  From: %101:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1472 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
    To: JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1477; cg.c:713:13
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %101:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1472 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%101
  Single Issue       : false;
SU(1):   %102:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1474 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(2):   %103:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(3):   CMP32rm %101:gr32, %102:gr64, 4, %103:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1476 :: (load 4 from %ir.arrayidx93); cg.c:713:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%103
    SU(1): Data Latency=4 Reg=%102
    SU(0): Data Latency=4 Reg=%101
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1477; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %101:gr32, %102:gr64, 4, %103:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1476 :: (load 4 from %ir.arrayidx93); cg.c:713:35
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %103:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %102:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1474 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %101:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1472 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %101:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1472 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
SU(1):   %102:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1474 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
SU(2):   %103:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
SU(3):   CMP32rm %101:gr32, %102:gr64, 4, %103:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1476 :: (load 4 from %ir.arrayidx93); cg.c:713:35

********** MI Scheduling **********
sparse:%bb.26 for.body96
  From: %105:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1480 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
    To: JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1493; cg.c:721:31
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %105:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1480 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(6): Data Latency=4 Reg=%105
    SU(1): Data Latency=4 Reg=%105
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %107:gr64 = IMUL64rri8 %105:gr64, 56, implicit-def dead $eflags, debug-location !1478; cg.c:714:24
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Successors:
    SU(2): Data Latency=1 Reg=%107
    SU(2): Out  Latency=0
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %107:gr64 = ADD64rm %107:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1478 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=%107
    SU(1): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%107
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %108:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1481 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(8): Data Latency=4 Reg=%108
    SU(4): Data Latency=4 Reg=%108
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(2): Data Latency=4 Reg=%107
    SU(3): Data Latency=4 Reg=%108
  Successors:
    SU(11): Data Latency=4 Reg=%109
    SU(5): Data Latency=4 Reg=%109
    SU(10): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %109:gr32, debug-location !1482 :: (store 4 into %ir.jcol); cg.c:714:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(4): Data Latency=4 Reg=%109
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %111:gr64 = IMUL64rri8 %105:gr64, 112, implicit-def dead $eflags, debug-location !1483; cg.c:715:22
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Successors:
    SU(7): Data Latency=1 Reg=%111
    SU(7): Out  Latency=0
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %111:gr64 = ADD64rm %111:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1483 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(6): Data Latency=1 Reg=%111
    SU(6): Out  Latency=0
  Successors:
    SU(8): Data Latency=4 Reg=%111
    SU(11): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(7): Data Latency=4 Reg=%111
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%108
  Successors:
    SU(9): Data Latency=4 Reg=%113
    SU(9): Out  Latency=0
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(9):   %113:fr64 = MULSDrm %113:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1487 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 4
  Predecessors:
    SU(8): Data Latency=4 Reg=%113
    SU(8): Out  Latency=0
  Successors:
    SU(10): Data Latency=4 Reg=%113
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %113:fr64, debug-location !1488 :: (store 8 into %ir.va); cg.c:715:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(9): Data Latency=4 Reg=%113
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(11):   CMP32rm %109:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1492 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(7): Out  Latency=0
    SU(6): Out  Latency=0
    SU(4): Data Latency=4 Reg=%109
    SU(2): Out  Latency=0
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1493; cg.c:721:31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) CMP32rm %109:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1492 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
Bottom Pressure:
GR16=2
  LiveReg: %109
  UpdateRegP: SU(5) MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %109:gr32, debug-location !1482 :: (store 4 into %ir.jcol); cg.c:714:22
              to 
  UpdateRegP: SU(11) CMP32rm %109:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1492 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
              to 
  Ready @4c
  BotQ.A TopLatency SU(11) 13c
  BotQ.A BotLatency SU(11) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %113:fr64, debug-location !1488 :: (store 8 into %ir.va); cg.c:715:20
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %113
  UpdateRegP: SU(10) MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %113:fr64, debug-location !1488 :: (store 8 into %ir.va); cg.c:715:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 22c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %113:fr64 = MULSDrm %113:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1487 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %113
  UpdateRegP: SU(9) %113:fr64 = MULSDrm %113:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1487 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
              to FR32 -1    FR32X -1
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Scheduling SU(8) %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
Bottom Pressure:
GR16=6
  LiveReg: %111
  UpdateRegP: SU(8) %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %108
  UpdateRegP: SU(4) %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
              to 
  UpdateRegP: SU(8) %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
              to FR32 -1    FR32X -1
  Ready @8c
  BotQ.A BotLatency SU(8) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %111:gr64 = ADD64rm %111:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1483 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
Bottom Pressure:
GR16=6
  LiveReg: %111
  UpdateRegP: SU(7) %111:gr64 = ADD64rm %111:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1483 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
              to GR16 -2
  Ready @12c
  BotQ.A BotLatency SU(7) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %111:gr64 = IMUL64rri8 %105:gr64, 112, implicit-def dead $eflags, debug-location !1483; cg.c:715:22
Bottom Pressure:
GR16=6
  LiveReg: %105
  UpdateRegP: SU(1) %107:gr64 = IMUL64rri8 %105:gr64, 56, implicit-def dead $eflags, debug-location !1478; cg.c:714:24
              to GR16 -2
  UpdateRegP: SU(6) %111:gr64 = IMUL64rri8 %105:gr64, 112, implicit-def dead $eflags, debug-location !1483; cg.c:715:22
              to GR16 -2
  Ready @13c
  BotQ.A BotLatency SU(6) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %109:gr32, debug-location !1482 :: (store 4 into %ir.jcol); cg.c:714:22
Bottom Pressure:
GR16=6
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
Bottom Pressure:
GR16=6
  LiveReg: %107
  UpdateRegP: SU(4) %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
              to GR16 -2
  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %108:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1481 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
Bottom Pressure:
GR16=4
  Ready @17c
  BotQ.A BotLatency SU(3) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %107:gr64 = ADD64rm %107:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1478 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
Bottom Pressure:
GR16=4
  LiveReg: %107
  UpdateRegP: SU(2) %107:gr64 = ADD64rm %107:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1478 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
              to GR16 -2
  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %107:gr64 = IMUL64rri8 %105:gr64, 56, implicit-def dead $eflags, debug-location !1478; cg.c:714:24
Bottom Pressure:
GR16=2
  Ready @18c
  BotQ.A BotLatency SU(1) 18c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %105:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1480 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
Bottom Pressure:

  Ready @22c
  BotQ.A BotLatency SU(0) 22c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %105:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1480 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
SU(1):   %107:gr64 = IMUL64rri8 %105:gr64, 56, implicit-def dead $eflags, debug-location !1478; cg.c:714:24
SU(2):   %107:gr64 = ADD64rm %107:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1478 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
SU(3):   %108:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1481 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
SU(4):   %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
SU(5):   MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %109:gr32, debug-location !1482 :: (store 4 into %ir.jcol); cg.c:714:22
SU(6):   %111:gr64 = IMUL64rri8 %105:gr64, 112, implicit-def dead $eflags, debug-location !1483; cg.c:715:22
SU(7):   %111:gr64 = ADD64rm %111:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1483 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
SU(8):   %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
SU(9):   %113:fr64 = MULSDrm %113:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1487 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
SU(10):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %113:fr64, debug-location !1488 :: (store 8 into %ir.va); cg.c:715:20
SU(11):   CMP32rm %109:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1492 :: (dereferenceable load 4 from %ir.j); cg.c:721:26

********** MI Scheduling **********
sparse:%bb.27 land.lhs.true
  From: %115:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
    To: JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1497; cg.c:721:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %115:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%115
  Single Issue       : false;
SU(1):   CMP32rm %115:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1496 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%115
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1497; cg.c:721:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %115:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1496 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %115:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %115:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
SU(1):   CMP32rm %115:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1496 :: (dereferenceable load 4 from %ir.i); cg.c:721:36

********** MI Scheduling **********
sparse:%bb.28 if.then110
  From: %119:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1498 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %119:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1498 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=4 Reg=%119
    SU(1): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %119:fr64 = ADDSDrm %119:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%119
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%119
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1503 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%119
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%119
  Single Issue       : false;
SU(3):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %119:fr64, debug-location !1504 :: (store 8 into %ir.va); cg.c:722:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%119
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %119:fr64, debug-location !1504 :: (store 8 into %ir.va); cg.c:722:24
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1503 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %119:fr64 = ADDSDrm %119:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %119:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1498 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %119:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1498 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
SU(1):   %119:fr64 = ADDSDrm %119:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
SU(2):   %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1503 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
SU(3):   MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %119:fr64, debug-location !1504 :: (store 8 into %ir.va); cg.c:722:24

********** MI Scheduling **********
sparse:%bb.29 if.end113
  From: MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1506 :: (store 4 into %ir.cont40); cg.c:725:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1506 :: (store 4 into %ir.cont40); cg.c:725:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %120:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1507 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%120
  Single Issue       : false;
SU(2):   %121:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%121
  Single Issue       : false;
SU(3):   %122:gr32 = MOV32rm %120:gr64, 4, %121:gr64_nosp, 0, $noreg, debug-location !1507 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%121
    SU(1): Data Latency=4 Reg=%120
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%122
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %122:gr32, debug-location !1510 :: (store 4 into %ir.k); cg.c:726:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%122
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %122:gr32, debug-location !1510 :: (store 4 into %ir.k); cg.c:726:24
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %122:gr32 = MOV32rm %120:gr64, 4, %121:gr64_nosp, 0, $noreg, debug-location !1507 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %121:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %120:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1507 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1506 :: (store 4 into %ir.cont40); cg.c:725:24
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1506 :: (store 4 into %ir.cont40); cg.c:725:24
SU(1):   %120:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1507 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
SU(2):   %121:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
SU(3):   %122:gr32 = MOV32rm %120:gr64, 4, %121:gr64_nosp, 0, $noreg, debug-location !1507 :: (load 4 from %ir.arrayidx115); cg.c:726:26
SU(4):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %122:gr32, debug-location !1510 :: (store 4 into %ir.k); cg.c:726:24

********** MI Scheduling **********
sparse:%bb.30 for.cond116
  From: %123:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
    To: JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1518; cg.c:726:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %123:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%123
  Single Issue       : false;
SU(1):   %124:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1514 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%124
  Single Issue       : false;
SU(2):   %125:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%125
  Single Issue       : false;
SU(3):   CMP32rm %123:gr32, %124:gr64, 4, %125:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:39
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%125
    SU(1): Data Latency=4 Reg=%124
    SU(0): Data Latency=4 Reg=%123
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1518; cg.c:726:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %123:gr32, %124:gr64, 4, %125:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:39
  Ready @4c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %125:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %124:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1514 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %123:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %123:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
SU(1):   %124:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1514 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
SU(2):   %125:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
SU(3):   CMP32rm %123:gr32, %124:gr64, 4, %125:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:39

********** MI Scheduling **********
sparse:%bb.31 for.body122
  From: %127:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1519 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
    To: JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1525; cg.c:727:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %127:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1519 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%127
  Single Issue       : false;
SU(1):   %128:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(2):   %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1519 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%128
    SU(0): Data Latency=4 Reg=%127
  Successors:
    SU(3): Data Latency=4 Reg=%129
  Single Issue       : false;
SU(3):   CMP32rm %129:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1524 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%129
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1525; cg.c:727:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %129:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1524 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1519 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %128:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %127:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1519 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %127:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1519 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
SU(1):   %128:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
SU(2):   %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1519 :: (load 4 from %ir.arrayidx124); cg.c:727:25
SU(3):   CMP32rm %129:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1524 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35

********** MI Scheduling **********
sparse:%bb.32 if.then127
  From: %144:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1526 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %144:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1526 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%144
  Single Issue       : false;
SU(1):   %145:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%145
  Single Issue       : false;
SU(2):   %147:gr32 = MOV32rm %144:gr64, 4, %145:gr64_nosp, 4, $noreg, debug-location !1526 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%145
    SU(0): Data Latency=4 Reg=%144
  Successors:
    SU(3): Data Latency=4 Reg=%147
    SU(3): Out  Latency=0
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %147:gr32 = ADD32ri8 %147:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1531; cg.c:731:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%147
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%147
  Single Issue       : false;
SU(4):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !1532 :: (store 4 into %ir.kk); cg.c:731:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%147
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !1532 :: (store 4 into %ir.kk); cg.c:731:33
  Ready @0c
  BotQ.A TopLatency SU(4) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %147:gr32 = ADD32ri8 %147:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1531; cg.c:731:49
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %147:gr32 = MOV32rm %144:gr64, 4, %145:gr64_nosp, 4, $noreg, debug-location !1526 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %145:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %144:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1526 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %144:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1526 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
SU(1):   %145:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
SU(2):   %147:gr32 = MOV32rm %144:gr64, 4, %145:gr64_nosp, 4, $noreg, debug-location !1526 :: (load 4 from %ir.arrayidx130); cg.c:731:35
SU(3):   %147:gr32 = ADD32ri8 %147:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1531; cg.c:731:49
SU(4):   MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !1532 :: (store 4 into %ir.kk); cg.c:731:33

********** MI Scheduling **********
sparse:%bb.33 for.cond132
  From: %148:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1534 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
    To: JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1538; cg.c:731:25
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %148:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1534 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%148
  Single Issue       : false;
SU(1):   CMP32rm %148:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1537 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%148
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1538; cg.c:731:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %148:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1537 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %148:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1534 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %148:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1534 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
SU(1):   CMP32rm %148:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1537 :: (dereferenceable load 4 from %ir.k); cg.c:731:57

********** MI Scheduling **********
sparse:%bb.34 for.body135
  From: %164:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1539 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
    To: JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1544; cg.c:732:33
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %164:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1539 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%164
  Single Issue       : false;
SU(1):   %165:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%165
  Single Issue       : false;
SU(2):   CMP32mi8 %164:gr64, 4, %165:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1543 :: (load 4 from %ir.arrayidx137); cg.c:732:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%165
    SU(0): Data Latency=4 Reg=%164
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1544; cg.c:732:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mi8 %164:gr64, 4, %165:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1543 :: (load 4 from %ir.arrayidx137); cg.c:732:44
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %165:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %164:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1539 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %164:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1539 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
SU(1):   %165:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
SU(2):   CMP32mi8 %164:gr64, 4, %165:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1543 :: (load 4 from %ir.arrayidx137); cg.c:732:44

********** MI Scheduling **********
sparse:%bb.35 if.then140
  From: %166:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %166:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Data Latency=4 Reg=%166
    SU(2): Data Latency=4 Reg=%166
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %167:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Data Latency=4 Reg=%167
    SU(2): Data Latency=4 Reg=%167
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%167
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(3): Data Latency=4 Reg=%168
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%168
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%167
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%166
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(4):   %169:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1552 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%169
    SU(6): Data Latency=4 Reg=%169
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %170:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%170
    SU(6): Data Latency=4 Reg=%170
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(5): Data Latency=4 Reg=%170
    SU(4): Data Latency=4 Reg=%169
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%171
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%171
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%170
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%169
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48
Bottom Pressure:
GR16=6
  LiveReg: %169
  UpdateRegP: SU(6) %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
              to 
  UpdateRegP: SU(7) MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to GR16 4
  LiveReg: %170
  UpdateRegP: SU(6) %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
              to GR16 -2
  UpdateRegP: SU(7) MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to GR16 2
  LiveReg: %171
  UpdateRegP: SU(7) MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 17c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %170:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
Bottom Pressure:
GR16=2
  Ready @8c
  BotQ.A BotLatency SU(5) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %169:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1552 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
Bottom Pressure:

  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %166
  UpdateRegP: SU(2) %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(3) MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %167
  UpdateRegP: SU(2) %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
              to FR32 -1    FR32X -1
  UpdateRegP: SU(3) MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to FR32 1    FR32X 1
  LiveReg: %168
  UpdateRegP: SU(3) MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to 
  Ready @9c
  BotQ.A BotLatency SU(3) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
Bottom Pressure:
GR16=4
  Ready @13c
  BotQ.A BotLatency SU(2) 13c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %167:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
Bottom Pressure:
GR16=2
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %166:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
Bottom Pressure:

  Ready @17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %166:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
SU(1):   %167:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
SU(2):   %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
SU(3):   MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
SU(4):   %169:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1552 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
SU(5):   %170:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
SU(6):   %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
SU(7):   MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48

********** MI Scheduling **********
sparse:%bb.37 for.end153
  From: %150:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1563 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
    To: JMP_1 %bb.43, debug-location !1571; cg.c:740:25
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %150:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1563 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%150
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %151:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1564 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%151
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %152:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1565 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%152
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%152
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%151
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%150
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(4):   %153:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%153
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %154:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%154
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%154
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%153
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1570 :: (store 4 into %ir.cont40); cg.c:739:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43, debug-location !1571; cg.c:740:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1570 :: (store 4 into %ir.cont40); cg.c:739:32
Bottom Pressure:

  Ready @0c
  BotQ.A TopLatency SU(7) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
Bottom Pressure:
GR16=4
  LiveReg: %153
  UpdateRegP: SU(6) MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
              to GR16 2
  LiveReg: %154
  UpdateRegP: SU(6) MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %154:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
Bottom Pressure:
GR16=2
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %153:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
Bottom Pressure:

  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
Bottom Pressure:
GR16=6
  LiveReg: %151
  UpdateRegP: SU(3) MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to GR16 4
  LiveReg: %152
  UpdateRegP: SU(3) MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to GR16 2
  LiveReg: %150
  UpdateRegP: SU(3) MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to 
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %152:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1565 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
Bottom Pressure:
GR16=4
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %151:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1564 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
Bottom Pressure:
GR16=2
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %150:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1563 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
Bottom Pressure:

  Ready @9c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %150:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1563 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
SU(1):   %151:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1564 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
SU(2):   %152:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1565 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
SU(3):   MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
SU(4):   %153:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
SU(5):   %154:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
SU(6):   MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
SU(7):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1570 :: (store 4 into %ir.cont40); cg.c:739:32

********** MI Scheduling **********
sparse:%bb.38 if.else
  From: %131:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1572 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
    To: JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1576; cg.c:742:30
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %131:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1572 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%131
  Single Issue       : false;
SU(1):   %132:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(2):   CMP32mi8 %131:gr64, 4, %132:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%132
    SU(0): Data Latency=4 Reg=%131
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1576; cg.c:742:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mi8 %131:gr64, 4, %132:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:40
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %132:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %131:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1572 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %131:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1572 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
SU(1):   %132:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
SU(2):   CMP32mi8 %131:gr64, 4, %132:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:40

********** MI Scheduling **********
sparse:%bb.39 if.then162
  From: %141:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
    To: JMP_1 %bb.43, debug-location !1583; cg.c:745:25
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %141:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%141
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1579 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%142
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%143
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %142:gr64, 4, %143:gr64_nosp, 0, $noreg, %141:gr32, debug-location !1581 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%143
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%142
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%141
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1582 :: (store 4 into %ir.cont40); cg.c:744:32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43, debug-location !1583; cg.c:745:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1582 :: (store 4 into %ir.cont40); cg.c:744:32
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %142:gr64, 4, %143:gr64_nosp, 0, $noreg, %141:gr32, debug-location !1581 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1579 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %141:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  Ready @4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %141:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
SU(1):   %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1579 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
SU(2):   %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
SU(3):   MOV32mr %142:gr64, 4, %143:gr64_nosp, 0, $noreg, %141:gr32, debug-location !1581 :: (store 4 into %ir.arrayidx164); cg.c:743:35
SU(4):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1582 :: (store 4 into %ir.cont40); cg.c:744:32

********** MI Scheduling **********
sparse:%bb.40 if.else165
  From: %135:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1584 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
    To: JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1589; cg.c:747:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %135:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1584 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%135
  Single Issue       : false;
SU(1):   %136:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1586 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(2):   %137:gr32 = MOV32rm %135:gr64, 4, %136:gr64_nosp, 0, $noreg, debug-location !1584 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%136
    SU(0): Data Latency=4 Reg=%135
  Successors:
    SU(3): Data Latency=4 Reg=%137
  Single Issue       : false;
SU(3):   CMP32rm %137:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1588 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%137
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1589; cg.c:747:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32rm %137:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1588 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
  Ready @4c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %137:gr32 = MOV32rm %135:gr64, 4, %136:gr64_nosp, 0, $noreg, debug-location !1584 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %136:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1586 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %135:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1584 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  Ready @12c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %135:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1584 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
SU(1):   %136:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1586 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
SU(2):   %137:gr32 = MOV32rm %135:gr64, 4, %136:gr64_nosp, 0, $noreg, debug-location !1584 :: (load 4 from %ir.arrayidx167); cg.c:747:30
SU(3):   CMP32rm %137:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1588 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40

********** MI Scheduling **********
sparse:%bb.41 if.then170
  From: %139:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1590 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
    To: JMP_1 %bb.43, debug-location !1598; cg.c:753:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %139:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1590 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%139
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %140:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1592 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%140
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   INC32m %139:gr64, 4, %140:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1596 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%140
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%139
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1597 :: (store 4 into %ir.cont40); cg.c:752:32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.43, debug-location !1598; cg.c:753:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1597 :: (store 4 into %ir.cont40); cg.c:752:32
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) INC32m %139:gr64, 4, %140:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1596 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %140:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1592 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %139:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1590 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  Ready @7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %139:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1590 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
SU(1):   %140:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1592 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
SU(2):   INC32m %139:gr64, 4, %140:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1596 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
SU(3):   MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1597 :: (store 4 into %ir.cont40); cg.c:752:32

********** MI Scheduling **********
sparse:%bb.44 if.then184
  From: $rdi = MOV32ri64 @.str.39, debug-location !1609; cg.c:757:21
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1609; cg.c:757:21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.39, debug-location !1609; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %155:gr32, debug-location !1609; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1609; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1609; cg.c:757:21
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1609; cg.c:757:21
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %155:gr32, debug-location !1609; cg.c:757:21
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.39, debug-location !1609; cg.c:757:21
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $rdi = MOV32ri64 @.str.39, debug-location !1609; cg.c:757:21
SU(1):   $esi = COPY %155:gr32, debug-location !1609; cg.c:757:21
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1609; cg.c:757:21

********** MI Scheduling **********
sparse:%bb.45 if.end186
  From: %160:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1611 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
    To: JMP_1 %bb.25, debug-location !1619; cg.c:713:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %160:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1611 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%160
    SU(2): Data Latency=4 Reg=%160
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1612 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Data Latency=4 Reg=%161
    SU(2): Data Latency=4 Reg=%161
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %163:fr64 = MOVSDrm_alt %160:gr64, 8, %161:gr64_nosp, 0, $noreg, debug-location !1611 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%161
    SU(0): Data Latency=4 Reg=%160
  Successors:
    SU(3): Data Latency=4 Reg=%163
    SU(3): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %163:fr64 = ADDSDrm %163:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%163
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%163
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOVSDmr %160:gr64, 8, %161:gr64_nosp, 0, $noreg, %163:fr64, debug-location !1617 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%163
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%161
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%160
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1618 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.25, debug-location !1619; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1618 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  Ready @3c
  BotQ.A TopLatency SU(5) 12c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %160:gr64, 8, %161:gr64_nosp, 0, $noreg, %163:fr64, debug-location !1617 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %163:fr64 = ADDSDrm %163:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %163:fr64 = MOVSDrm_alt %160:gr64, 8, %161:gr64_nosp, 0, $noreg, debug-location !1611 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1612 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  Ready @15c
  BotQ.A BotLatency SU(1) 15c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %160:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1611 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  Ready @15c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %160:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1611 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
SU(1):   %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1612 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
SU(2):   %163:fr64 = MOVSDrm_alt %160:gr64, 8, %161:gr64_nosp, 0, $noreg, debug-location !1611 :: (load 8 from %ir.arrayidx188); cg.c:761:24
SU(3):   %163:fr64 = ADDSDrm %163:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
SU(4):   MOVSDmr %160:gr64, 8, %161:gr64_nosp, 0, $noreg, %163:fr64, debug-location !1617 :: (store 8 into %ir.arrayidx191); cg.c:761:22
SU(5):   INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1618 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51

********** MI Scheduling **********
sparse:%bb.47 for.end197
  From: %91:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1626 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
    To: JMP_1 %bb.21, debug-location !1631; cg.c:708:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %91:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1626 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%91
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %91:fr64 = MULSDrm %91:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1628 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%91
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%91
  Single Issue       : false;
SU(2):   MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %91:fr64, debug-location !1629 :: (store 8 into %ir.size); cg.c:764:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%91
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1630 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.21, debug-location !1631; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1630 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %91:fr64, debug-location !1629 :: (store 8 into %ir.size); cg.c:764:14
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %91:fr64 = MULSDrm %91:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1628 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %91:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1626 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %91:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1626 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
SU(1):   %91:fr64 = MULSDrm %91:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1628 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
SU(2):   MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %91:fr64, debug-location !1629 :: (store 8 into %ir.size); cg.c:764:14
SU(3):   INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1630 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25

********** MI Scheduling **********
sparse:%bb.49 for.cond202
  From: %45:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1637 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
    To: JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1641; cg.c:770:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %45:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1637 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%45
  Single Issue       : false;
SU(1):   CMP32rm %45:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1640 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%45
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1641; cg.c:770:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %45:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1640 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %45:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1637 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %45:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1637 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
SU(1):   CMP32rm %45:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1640 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19

********** MI Scheduling **********
sparse:%bb.50 for.body205
  From: %83:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1642 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
    To: JMP_1 %bb.49, debug-location !1653; cg.c:770:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %83:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1642 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%83
    SU(2): Data Latency=4 Reg=%83
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %84:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1644 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%84
    SU(2): Data Latency=4 Reg=%84
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %85:gr32 = MOV32rm %83:gr64, 4, %84:gr64_nosp, -4, $noreg, debug-location !1645 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%84
    SU(0): Data Latency=4 Reg=%83
  Successors:
    SU(3): Data Latency=4 Reg=%85
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   ADD32mr %83:gr64, 4, %84:gr64_nosp, 0, $noreg, %85:gr32, implicit-def dead $eflags, debug-location !1651 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%85
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%84
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%83
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1652 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.49, debug-location !1653; cg.c:770:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1652 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
  Ready @3c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) ADD32mr %83:gr64, 4, %84:gr64_nosp, 0, $noreg, %85:gr32, implicit-def dead $eflags, debug-location !1651 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %85:gr32 = MOV32rm %83:gr64, 4, %84:gr64_nosp, -4, $noreg, debug-location !1645 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %84:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1644 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %83:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1642 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %83:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1642 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
SU(1):   %84:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1644 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
SU(2):   %85:gr32 = MOV32rm %83:gr64, 4, %84:gr64_nosp, -4, $noreg, debug-location !1645 :: (load 4 from %ir.arrayidx210); cg.c:771:31
SU(3):   ADD32mr %83:gr64, 4, %84:gr64_nosp, 0, $noreg, %85:gr32, implicit-def dead $eflags, debug-location !1651 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
SU(4):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1652 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29

********** MI Scheduling **********
sparse:%bb.52 for.cond217
  From: %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1659 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
    To: JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1663; cg.c:774:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1659 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1662 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1663; cg.c:774:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1662 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1659 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1659 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
SU(1):   CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1662 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19

********** MI Scheduling **********
sparse:%bb.54 if.then223
  From: %61:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1669 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
    To: JMP_1 %bb.56, debug-location !1677; cg.c:777:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %61:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1669 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(1):   %62:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1671 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%62
    SU(2): Data Latency=4 Reg=%62
  Single Issue       : false;
SU(2):   %65:gr32 = MOV32rm %61:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !1669 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%62
    SU(0): Data Latency=4 Reg=%61
  Successors:
    SU(4): Data Latency=4 Reg=%65
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %64:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=4 Reg=%64
  Single Issue       : false;
SU(4):   %65:gr32 = nsw SUB32rm %65:gr32(tied-def 0), %64:gr64, 4, %62:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:28
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%65
    SU(3): Data Latency=4 Reg=%64
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%62
  Successors:
    SU(5): Data Latency=4 Reg=%65
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %65:gr32, debug-location !1676 :: (store 4 into %ir.j1); cg.c:776:16
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(4): Data Latency=4 Reg=%65
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.56, debug-location !1677; cg.c:777:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %65:gr32, debug-location !1676 :: (store 4 into %ir.j1); cg.c:776:16
  Ready @0c
  BotQ.A TopLatency SU(5) 12c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %65:gr32 = nsw SUB32rm %65:gr32(tied-def 0), %64:gr64, 4, %62:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:28
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %64:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %65:gr32 = MOV32rm %61:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !1669 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  Ready @8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %62:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1671 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %61:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1669 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  Ready @12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %61:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1669 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
SU(1):   %62:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1671 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
SU(2):   %65:gr32 = MOV32rm %61:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !1669 :: (load 4 from %ir.arrayidx225); cg.c:776:18
SU(3):   %64:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
SU(4):   %65:gr32 = nsw SUB32rm %65:gr32(tied-def 0), %64:gr64, 4, %62:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:28
SU(5):   MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %65:gr32, debug-location !1676 :: (store 4 into %ir.j1); cg.c:776:16

********** MI Scheduling **********
sparse:%bb.56 if.end231
  From: %66:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1680 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=8
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %66:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1680 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(6): Data Latency=4 Reg=%66
    SU(2): Data Latency=4 Reg=%66
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %67:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1681 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(6): Data Latency=4 Reg=%67
    SU(4): Data Latency=4 Reg=%67
    SU(2): Data Latency=4 Reg=%67
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%67
    SU(0): Data Latency=4 Reg=%66
  Successors:
    SU(4): Data Latency=4 Reg=%70
    SU(4): Out  Latency=0
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %69:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%69
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%70
    SU(3): Data Latency=4 Reg=%69
    SU(2): Out  Latency=0
    SU(1): Data Latency=4 Reg=%67
  Successors:
    SU(5): Data Latency=4 Reg=%70
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(5):   MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %70:gr32, debug-location !1686 :: (store 4 into %ir.j2); cg.c:781:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=%70
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%67
    SU(0): Data Latency=4 Reg=%66
  Successors:
    SU(7): Data Latency=4 Reg=%71
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %71:gr32, debug-location !1689 :: (store 4 into %ir.nza); cg.c:782:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=%71
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %72:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1690 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=4 Reg=%72
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %72:gr32, debug-location !1692 :: (store 4 into %ir.k); cg.c:783:16
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%72
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %72:gr32, debug-location !1692 :: (store 4 into %ir.k); cg.c:783:16
Bottom Pressure:
GR16=2
  LiveReg: %72
  UpdateRegP: SU(9) MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %72:gr32, debug-location !1692 :: (store 4 into %ir.k); cg.c:783:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 13c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %72:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1690 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(8) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %71:gr32, debug-location !1689 :: (store 4 into %ir.nza); cg.c:782:13
Bottom Pressure:
GR16=2
  LiveReg: %71
  UpdateRegP: SU(7) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %71:gr32, debug-location !1689 :: (store 4 into %ir.nza); cg.c:782:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 17c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
Bottom Pressure:
GR16=4
  LiveReg: %66
  UpdateRegP: SU(2) %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
              to 
  UpdateRegP: SU(6) %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
              to 
  LiveReg: %67
  UpdateRegP: SU(2) %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
              to GR16 -2
  UpdateRegP: SU(4) %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
              to GR16 2
  UpdateRegP: SU(6) %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
              to GR16 -2
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %70:gr32, debug-location !1686 :: (store 4 into %ir.j2); cg.c:781:12
Bottom Pressure:
GR16=6
  LiveReg: %70
  UpdateRegP: SU(5) MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %70:gr32, debug-location !1686 :: (store 4 into %ir.j2); cg.c:781:12
              to 
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
Bottom Pressure:
GR16=8
  LiveReg: %70
  UpdateRegP: SU(4) %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
              to 
  LiveReg: %69
  UpdateRegP: SU(4) %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
              to GR16 -2
  Ready @9c
  BotQ.A BotLatency SU(4) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %69:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
Bottom Pressure:
GR16=6
  Ready @13c
  BotQ.A BotLatency SU(3) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
Bottom Pressure:
GR16=4
  Ready @13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %67:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1681 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
Bottom Pressure:
GR16=2
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1680 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
Bottom Pressure:

  Ready @17c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %66:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1680 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
SU(1):   %67:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1681 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
SU(2):   %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
SU(3):   %69:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
SU(4):   %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
SU(5):   MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %70:gr32, debug-location !1686 :: (store 4 into %ir.j2); cg.c:781:12
SU(6):   %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
SU(7):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %71:gr32, debug-location !1689 :: (store 4 into %ir.nza); cg.c:782:13
SU(8):   %72:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1690 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
SU(9):   MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %72:gr32, debug-location !1692 :: (store 4 into %ir.k); cg.c:783:16

********** MI Scheduling **********
sparse:%bb.57 for.cond240
  From: %73:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1694 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
    To: JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1698; cg.c:783:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %73:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1694 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%73
  Single Issue       : false;
SU(1):   CMP32rm %73:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1697 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%73
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1698; cg.c:783:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32rm %73:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1697 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %73:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1694 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %73:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1694 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
SU(1):   CMP32rm %73:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1697 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24

********** MI Scheduling **********
sparse:%bb.58 for.body243
  From: %75:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1699 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
    To: JMP_1 %bb.57, debug-location !1714; cg.c:783:9
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=6
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %75:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1699 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%75
    SU(2): Data Latency=4 Reg=%75
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %76:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1701 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(2): Data Latency=4 Reg=%76
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(1): Data Latency=4 Reg=%76
    SU(0): Data Latency=4 Reg=%75
  Successors:
    SU(4): Data Latency=4 Reg=%77
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 4
  Single Issue       : false;
SU(3):   %78:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1703 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Data Latency=4 Reg=%78
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(4):   MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  # preds left       : 7
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 12
  Predecessors:
    SU(2): Data Latency=4 Reg=%77
    SU(3): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%78
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%75
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 4
  Single Issue       : false;
SU(5):   %79:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1705 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%79
    SU(7): Data Latency=4 Reg=%79
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   %80:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 11
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%80
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 7
  Predecessors:
    SU(6): Data Latency=4 Reg=%80
    SU(5): Data Latency=4 Reg=%79
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%81
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %82:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%82
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(7): Data Latency=4 Reg=%81
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%82
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%79
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(10):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1712 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1713 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 3
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.57, debug-location !1714; cg.c:783:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 20
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=3 Artificial
    SU(10): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 20
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 10 
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1713 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
Bottom Pressure:

  Ready @3c
  BotQ.A TopLatency SU(11) 17c
  BotQ.A BotLatency SU(11) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Scheduling SU(10) INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1712 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
Bottom Pressure:

  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
Bottom Pressure:
GR16=6
  LiveReg: %79
  UpdateRegP: SU(7) %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to 
  UpdateRegP: SU(9) MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GR16 4
  LiveReg: %82
  UpdateRegP: SU(9) MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GR16 2
  LiveReg: %81
  UpdateRegP: SU(9) MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to 
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %82:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
Bottom Pressure:
GR16=4
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
Bottom Pressure:
GR16=4
  LiveReg: %80
  UpdateRegP: SU(7) %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to GR16 -2
  Ready @7c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %80:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
Bottom Pressure:
GR16=2
  Ready @11c
  BotQ.A BotLatency SU(6) 11c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %79:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1705 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
Bottom Pressure:

  Ready @11c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %75
  UpdateRegP: SU(2) %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FR32 -1    FR32X -1    GR16 2
  UpdateRegP: SU(4) MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to FR32 1    FR32X 1    GR16 2
  LiveReg: %78
  UpdateRegP: SU(4) MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to FR32 1    FR32X 1
  LiveReg: %77
  UpdateRegP: SU(4) MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to 
  Ready @12c
  BotQ.A BotLatency SU(4) 12c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %78:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1703 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @16c
  BotQ.A BotLatency SU(3) 16c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
Bottom Pressure:
GR16=4
  LiveReg: %76
  UpdateRegP: SU(2) %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FR32 -1    FR32X -1
  Ready @16c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %76:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1701 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
Bottom Pressure:
GR16=2
  Ready @20c
  BotQ.A BotLatency SU(1) 20c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1699 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
Bottom Pressure:

  Ready @20c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %75:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1699 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
SU(1):   %76:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1701 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
SU(2):   %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
SU(3):   %78:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1703 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
SU(4):   MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
SU(5):   %79:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1705 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
SU(6):   %80:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
SU(7):   %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
SU(8):   %82:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
SU(9):   MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
SU(10):   INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1712 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
SU(11):   INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1713 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31

********** MI Scheduling **********
sparse:%bb.61 for.cond259
  From: %51:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1726 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
    To: JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1729; cg.c:789:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %51:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1726 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%51
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %51:gr32 = nsw INC32r %51:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1727; cg.c:789:27
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%51
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%51
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, implicit-def $eflags, debug-location !1728 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%51
    SU(1): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1729; cg.c:789:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, implicit-def $eflags, debug-location !1728 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %51:gr32 = nsw INC32r %51:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1727; cg.c:789:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1726 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %51:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1726 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
SU(1):   %51:gr32 = nsw INC32r %51:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1727; cg.c:789:27
SU(2):   CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, implicit-def $eflags, debug-location !1728 :: (dereferenceable load 4 from %ir.j); cg.c:789:19

********** MI Scheduling **********
sparse:%bb.62 for.body263
  From: %57:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1730 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
    To: JMP_1 %bb.61, debug-location !1741; cg.c:789:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %57:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1730 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%57
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %58:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1732 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=%58
    SU(3): Data Latency=4 Reg=%58
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %59:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%59
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %60:gr32 = MOV32rm %59:gr64, 4, %58:gr64_nosp, -4, $noreg, debug-location !1733 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%59
    SU(1): Data Latency=4 Reg=%58
  Successors:
    SU(4): Data Latency=4 Reg=%60
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   SUB32mr %57:gr64, 4, %58:gr64_nosp, 0, $noreg, %60:gr32, implicit-def dead $eflags, debug-location !1739 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%60
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%58
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%57
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1740 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.61, debug-location !1741; cg.c:789:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1740 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
  Ready @3c
  BotQ.A TopLatency SU(5) 8c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) SUB32mr %57:gr64, 4, %58:gr64_nosp, 0, $noreg, %60:gr32, implicit-def dead $eflags, debug-location !1739 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %60:gr32 = MOV32rm %59:gr64, 4, %58:gr64_nosp, -4, $noreg, debug-location !1733 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %59:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %58:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1732 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %57:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1730 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %57:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1730 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
SU(1):   %58:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1732 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
SU(2):   %59:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
SU(3):   %60:gr32 = MOV32rm %59:gr64, 4, %58:gr64_nosp, -4, $noreg, debug-location !1733 :: (load 4 from %ir.arrayidx268); cg.c:790:33
SU(4):   SUB32mr %57:gr64, 4, %58:gr64_nosp, 0, $noreg, %60:gr32, implicit-def dead $eflags, debug-location !1739 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
SU(5):   INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1740 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33

********** MI Scheduling **********
sparse:%bb.63 for.end274
  From: %53:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1744 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
    To: RET 0, debug-location !1748; cg.c:793:1
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %53:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1744 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%53
  Single Issue       : false;
SU(1):   %54:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1745 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(2):   %56:gr32 = MOV32rm %53:gr64, 4, %54:gr64_nosp, 0, $noreg, debug-location !1744 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%54
    SU(0): Data Latency=4 Reg=%53
  Successors:
    SU(3): Data Latency=4 Reg=%56
    SU(3): Out  Latency=0
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %56:gr32 = DEC32r %56:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1746; cg.c:792:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%56
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%56
  Single Issue       : false;
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %56:gr32, debug-location !1747 :: (store 4 into %ir.nza); cg.c:792:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%56
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET 0, debug-location !1748; cg.c:793:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %56:gr32, debug-location !1747 :: (store 4 into %ir.nza); cg.c:792:9
  Ready @0c
  BotQ.A TopLatency SU(4) 9c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %56:gr32 = DEC32r %56:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1746; cg.c:792:25
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %56:gr32 = MOV32rm %53:gr64, 4, %54:gr64_nosp, 0, $noreg, debug-location !1744 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %54:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1745 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %53:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1744 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  Ready @9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   %53:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1744 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
SU(1):   %54:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1745 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
SU(2):   %56:gr32 = MOV32rm %53:gr64, 4, %54:gr64_nosp, 0, $noreg, debug-location !1744 :: (load 4 from %ir.arrayidx276); cg.c:792:11
SU(3):   %56:gr32 = DEC32r %56:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1746; cg.c:792:25
SU(4):   MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %56:gr32, debug-location !1747 :: (store 4 into %ir.nza); cg.c:792:9

********** INTERVALS **********
CH [0B,80r:0)  0@0B-phi
CL [0B,80r:0)  0@0B-phi
DH [0B,96r:0)[1856r,1888r:1)  0@0B-phi 1@1856r
DIL [0B,128r:0)[1696r,1728r:3)[1824r,1888r:2)[5376r,5424r:1)  0@0B-phi 1@5376r 2@1824r 3@1696r
DIH [0B,128r:0)[1696r,1728r:3)[1824r,1888r:2)[5376r,5424r:1)  0@0B-phi 1@5376r 2@1824r 3@1696r
DL [0B,96r:0)[1856r,1888r:1)  0@0B-phi 1@1856r
HCX [0B,80r:0)  0@0B-phi
HDI [0B,128r:0)[1696r,1728r:3)[1824r,1888r:2)[5376r,5424r:1)  0@0B-phi 1@5376r 2@1824r 3@1696r
HDX [0B,96r:0)[1856r,1888r:1)  0@0B-phi 1@1856r
SIL [0B,112r:0)[1840r,1888r:2)[5392r,5424r:1)  0@0B-phi 1@5392r 2@1840r
SIH [0B,112r:0)[1840r,1888r:2)[5392r,5424r:1)  0@0B-phi 1@5392r 2@1840r
HSI [0B,112r:0)[1840r,1888r:2)[5392r,5424r:1)  0@0B-phi 1@5392r 2@1840r
R8B [0B,64r:0)  0@0B-phi
R8BH [0B,64r:0)  0@0B-phi
R8WH [0B,64r:0)  0@0B-phi
R9B [0B,48r:0)  0@0B-phi
R9BH [0B,48r:0)  0@0B-phi
R9WH [0B,48r:0)  0@0B-phi
XMM0 [0B,32r:0)[2608r,2640r:2)[2640r,2672r:1)  0@0B-phi 1@2640r 2@2608r
XMM1 [0B,16r:0)[2624r,2640r:1)  0@0B-phi 1@2624r
%0 [128r,144r:0)  0@128r weight:0.000000e+00
%1 [112r,160r:0)  0@112r weight:0.000000e+00
%2 [96r,176r:0)  0@96r weight:0.000000e+00
%3 [80r,192r:0)  0@80r weight:0.000000e+00
%4 [64r,208r:0)  0@64r weight:0.000000e+00
%5 [48r,224r:0)  0@48r weight:0.000000e+00
%6 [32r,240r:0)  0@32r weight:0.000000e+00
%7 [16r,256r:0)  0@16r weight:0.000000e+00
%10 [272r,304r:2)[304r,336r:0)[336r,352r:1)  0@304r 1@336r 2@272r weight:0.000000e+00
%13 [400r,432r:0)[432r,448r:1)  0@400r 1@432r weight:0.000000e+00
%15 [640r,656r:0)  0@640r weight:0.000000e+00
%17 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%20 [1248r,1280r:0)[1280r,1296r:1)  0@1248r 1@1280r weight:0.000000e+00
%22 [1472r,1504r:0)  0@1472r weight:0.000000e+00
%23 [1488r,1504r:0)  0@1488r weight:0.000000e+00
%25 [1504r,1536r:0)[1536r,1568r:1)  0@1504r 1@1536r weight:0.000000e+00
%31 [1760r,1840r:0)  0@1760r weight:0.000000e+00
%32 [1776r,1856r:0)  0@1776r weight:0.000000e+00
%35 [1968r,1984r:0)  0@1968r weight:0.000000e+00
%37 [2480r,2496r:0)  0@2480r weight:0.000000e+00
%38 [2512r,2608r:0)  0@2512r weight:0.000000e+00
%39 [2528r,2576r:0)  0@2528r weight:0.000000e+00
%41 [2544r,2576r:0)[2576r,2624r:1)  0@2544r 1@2576r weight:0.000000e+00
%42 [2672r,2688r:0)  0@2672r weight:0.000000e+00
%43 [2768r,2784r:0)  0@2768r weight:0.000000e+00
%45 [5808r,5824r:0)  0@5808r weight:0.000000e+00
%47 [6032r,6048r:0)  0@6032r weight:0.000000e+00
%51 [6928r,6960r:0)[6960r,6976r:1)  0@6928r 1@6960r weight:0.000000e+00
%53 [7168r,7200r:0)  0@7168r weight:0.000000e+00
%54 [7184r,7200r:0)  0@7184r weight:0.000000e+00
%56 [7200r,7232r:0)[7232r,7248r:1)  0@7200r 1@7232r weight:0.000000e+00
%57 [7040r,7104r:0)  0@7040r weight:0.000000e+00
%58 [7056r,7104r:0)  0@7056r weight:0.000000e+00
%59 [7072r,7088r:0)  0@7072r weight:0.000000e+00
%60 [7088r,7104r:0)  0@7088r weight:0.000000e+00
%61 [6176r,6208r:0)  0@6176r weight:0.000000e+00
%62 [6192r,6256r:0)  0@6192r weight:0.000000e+00
%64 [6224r,6256r:0)  0@6224r weight:0.000000e+00
%65 [6208r,6256r:0)[6256r,6272r:1)  0@6208r 1@6256r weight:0.000000e+00
%66 [6352r,6464r:0)  0@6352r weight:0.000000e+00
%67 [6368r,6464r:0)  0@6368r weight:0.000000e+00
%69 [6400r,6432r:0)  0@6400r weight:0.000000e+00
%70 [6384r,6432r:0)[6432r,6448r:1)  0@6384r 1@6432r weight:0.000000e+00
%71 [6464r,6480r:0)  0@6464r weight:0.000000e+00
%72 [6496r,6512r:0)  0@6496r weight:0.000000e+00
%73 [6544r,6560r:0)  0@6544r weight:0.000000e+00
%75 [6624r,6688r:0)  0@6624r weight:0.000000e+00
%76 [6640r,6656r:0)  0@6640r weight:0.000000e+00
%77 [6656r,6688r:0)  0@6656r weight:0.000000e+00
%78 [6672r,6688r:0)  0@6672r weight:0.000000e+00
%79 [6704r,6768r:0)  0@6704r weight:0.000000e+00
%80 [6720r,6736r:0)  0@6720r weight:0.000000e+00
%81 [6736r,6768r:0)  0@6736r weight:0.000000e+00
%82 [6752r,6768r:0)  0@6752r weight:0.000000e+00
%83 [5888r,5936r:0)  0@5888r weight:0.000000e+00
%84 [5904r,5936r:0)  0@5904r weight:0.000000e+00
%85 [5920r,5936r:0)  0@5920r weight:0.000000e+00
%86 [2880r,2928r:0)  0@2880r weight:0.000000e+00
%87 [2896r,2928r:0)  0@2896r weight:0.000000e+00
%88 [2912r,2928r:0)  0@2912r weight:0.000000e+00
%91 [5664r,5696r:0)[5696r,5712r:1)  0@5664r 1@5696r weight:0.000000e+00
%92 [2992r,3120r:0)  0@2992r weight:0.000000e+00
%94 [3008r,3040r:0)[3040r,3072r:1)  0@3008r 1@3040r weight:0.000000e+00
%95 [3056r,3184r:0)  0@3056r weight:0.000000e+00
%96 [3072r,3088r:0)  0@3072r weight:0.000000e+00
%99 [3120r,3152r:0)[3152r,3184r:1)  0@3120r 1@3152r weight:0.000000e+00
%100 [3104r,3184r:0)[3184r,3200r:1)  0@3104r 1@3184r weight:0.000000e+00
%101 [3248r,3296r:0)  0@3248r weight:0.000000e+00
%102 [3264r,3296r:0)  0@3264r weight:0.000000e+00
%103 [3280r,3296r:0)  0@3280r weight:0.000000e+00
%105 [3360r,3472r:0)  0@3360r weight:0.000000e+00
%107 [3376r,3408r:0)[3408r,3440r:1)  0@3376r 1@3408r weight:0.000000e+00
%108 [3424r,3520r:0)  0@3424r weight:0.000000e+00
%109 [3440r,3584r:0)  0@3440r weight:0.000000e+00
%111 [3472r,3504r:0)[3504r,3520r:1)  0@3472r 1@3504r weight:0.000000e+00
%113 [3520r,3552r:0)[3552r,3568r:1)  0@3520r 1@3552r weight:0.000000e+00
%115 [3648r,3664r:0)  0@3648r weight:0.000000e+00
%119 [3728r,3760r:2)[3760r,3792r:0)[3792r,3808r:1)  0@3760r 1@3792r 2@3728r weight:0.000000e+00
%120 [3856r,3888r:0)  0@3856r weight:0.000000e+00
%121 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%122 [3888r,3904r:0)  0@3888r weight:0.000000e+00
%123 [3936r,3984r:0)  0@3936r weight:0.000000e+00
%124 [3952r,3984r:0)  0@3952r weight:0.000000e+00
%125 [3968r,3984r:0)  0@3968r weight:0.000000e+00
%127 [4048r,4080r:0)  0@4048r weight:0.000000e+00
%128 [4064r,4080r:0)  0@4064r weight:0.000000e+00
%129 [4080r,4096r:0)  0@4080r weight:0.000000e+00
%131 [4800r,4832r:0)  0@4800r weight:0.000000e+00
%132 [4816r,4832r:0)  0@4816r weight:0.000000e+00
%135 [5008r,5040r:0)  0@5008r weight:0.000000e+00
%136 [5024r,5040r:0)  0@5024r weight:0.000000e+00
%137 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%139 [5120r,5152r:0)  0@5120r weight:0.000000e+00
%140 [5136r,5152r:0)  0@5136r weight:0.000000e+00
%141 [4896r,4944r:0)  0@4896r weight:0.000000e+00
%142 [4912r,4944r:0)  0@4912r weight:0.000000e+00
%143 [4928r,4944r:0)  0@4928r weight:0.000000e+00
%144 [4160r,4192r:0)  0@4160r weight:0.000000e+00
%145 [4176r,4192r:0)  0@4176r weight:0.000000e+00
%147 [4192r,4224r:0)[4224r,4240r:1)  0@4192r 1@4224r weight:0.000000e+00
%148 [4272r,4288r:0)  0@4272r weight:0.000000e+00
%150 [4640r,4688r:0)  0@4640r weight:0.000000e+00
%151 [4656r,4688r:0)  0@4656r weight:0.000000e+00
%152 [4672r,4688r:0)  0@4672r weight:0.000000e+00
%153 [4704r,4736r:0)  0@4704r weight:0.000000e+00
%154 [4720r,4736r:0)  0@4720r weight:0.000000e+00
%155 [5328r,5392r:0)  0@5328r weight:0.000000e+00
%160 [5472r,5552r:0)  0@5472r weight:0.000000e+00
%161 [5488r,5552r:0)  0@5488r weight:0.000000e+00
%163 [5504r,5536r:0)[5536r,5552r:1)  0@5504r 1@5536r weight:0.000000e+00
%164 [4352r,4384r:0)  0@4352r weight:0.000000e+00
%165 [4368r,4384r:0)  0@4368r weight:0.000000e+00
%166 [4448r,4496r:0)  0@4448r weight:0.000000e+00
%167 [4464r,4496r:0)  0@4464r weight:0.000000e+00
%168 [4480r,4496r:0)  0@4480r weight:0.000000e+00
%169 [4512r,4560r:0)  0@4512r weight:0.000000e+00
%170 [4528r,4560r:0)  0@4528r weight:0.000000e+00
%171 [4544r,4560r:0)  0@4544r weight:0.000000e+00
%172 [2048r,2080r:0)  0@2048r weight:0.000000e+00
%173 [2064r,2080r:0)  0@2064r weight:0.000000e+00
%174 [2080r,2096r:0)  0@2080r weight:0.000000e+00
%175 [2128r,2176r:0)  0@2128r weight:0.000000e+00
%176 [2144r,2176r:0)  0@2144r weight:0.000000e+00
%177 [2160r,2176r:0)  0@2160r weight:0.000000e+00
%179 [2384r,2416r:0)  0@2384r weight:0.000000e+00
%180 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%181 [2240r,2272r:0)  0@2240r weight:0.000000e+00
%182 [2256r,2272r:0)  0@2256r weight:0.000000e+00
%183 [2288r,2320r:0)  0@2288r weight:0.000000e+00
%184 [2304r,2320r:0)  0@2304r weight:0.000000e+00
%185 [1360r,1408r:0)  0@1360r weight:0.000000e+00
%186 [1376r,1408r:0)  0@1376r weight:0.000000e+00
%187 [1392r,1408r:0)  0@1392r weight:0.000000e+00
%188 [752r,800r:0)  0@752r weight:0.000000e+00
%189 [768r,800r:0)  0@768r weight:0.000000e+00
%190 [784r,800r:0)  0@784r weight:0.000000e+00
%192 [864r,1056r:0)  0@864r weight:0.000000e+00
%194 [880r,912r:0)[912r,944r:1)  0@880r 1@912r weight:0.000000e+00
%195 [928r,944r:0)  0@928r weight:0.000000e+00
%198 [992r,1008r:0)  0@992r weight:0.000000e+00
%199 [1024r,1072r:0)  0@1024r weight:0.000000e+00
%200 [1040r,1056r:0)  0@1040r weight:0.000000e+00
%201 [1056r,1072r:0)  0@1056r weight:0.000000e+00
%202 [512r,544r:0)  0@512r weight:0.000000e+00
%203 [528r,544r:0)  0@528r weight:0.000000e+00
%204 [944r,1072r:0)  0@944r weight:0.000000e+00
RegMasks: 1728r 1888r 2640r 5424r
********** MACHINEINSTRS **********
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+48]
  fi#-5: size=4, align=16, fixed, at location [SP+40]
  fi#-4: size=4, align=8, fixed, at location [SP+32]
  fi#-3: size=8, align=16, fixed, at location [SP+24]
  fi#-2: size=8, align=8, fixed, at location [SP+16]
  fi#-1: size=8, align=16, fixed, at location [SP+8]
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP+8]
  fi#13: size=8, align=8, at location [SP+8]
  fi#14: size=4, align=4, at location [SP+8]
  fi#15: size=4, align=4, at location [SP+8]
  fi#16: size=4, align=4, at location [SP+8]
  fi#17: size=4, align=4, at location [SP+8]
  fi#18: size=4, align=4, at location [SP+8]
  fi#19: size=4, align=4, at location [SP+8]
  fi#20: size=4, align=4, at location [SP+8]
  fi#21: size=4, align=4, at location [SP+8]
  fi#22: size=4, align=4, at location [SP+8]
  fi#23: size=4, align=4, at location [SP+8]
  fi#24: size=8, align=8, at location [SP+8]
  fi#25: size=8, align=8, at location [SP+8]
  fi#26: size=8, align=8, at location [SP+8]
  fi#27: size=8, align=8, at location [SP+8]
  fi#28: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $rdi in %0, $rsi in %1, $rdx in %2, $ecx in %3, $r8d in %4, $r9d in %5, $xmm0 in %6, $xmm1 in %7

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rdi, $rsi, $rdx, $ecx, $r8d, $r9d, $xmm0, $xmm1
16B	  %7:fr64 = COPY $xmm1
32B	  %6:fr64 = COPY $xmm0
48B	  %5:gr32 = COPY $r9d
64B	  %4:gr32 = COPY $r8d
80B	  %3:gr32 = COPY $ecx
96B	  %2:gr64 = COPY $rdx
112B	  %1:gr64 = COPY $rsi
128B	  %0:gr64 = COPY $rdi
144B	  MOV64mr %stack.0.a.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.a.addr)
160B	  MOV64mr %stack.1.colidx.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.colidx.addr)
176B	  MOV64mr %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, %2:gr64 :: (store 8 into %ir.rowstr.addr)
192B	  MOV32mr %stack.3.n.addr, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.n.addr)
208B	  MOV32mr %stack.4.nz.addr, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.nz.addr)
224B	  MOV32mr %stack.5.nozer.addr, 1, $noreg, 0, $noreg, %5:gr32 :: (store 4 into %ir.nozer.addr)
240B	  MOVSDmr %stack.12.rcond.addr, 1, $noreg, 0, $noreg, %6:fr64 :: (store 8 into %ir.rcond.addr)
256B	  MOVSDmr %stack.13.shift.addr, 1, $noreg, 0, $noreg, %7:fr64 :: (store 8 into %ir.shift.addr)
272B	  %10:gr32 = MOV32rm %fixed-stack.1, 1, $noreg, 0, $noreg, debug-location !1292 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
304B	  %10:gr32 = nsw SUB32rm %10:gr32(tied-def 0), %fixed-stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1294 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:21
336B	  %10:gr32 = nsw INC32r %10:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1295; cg.c:659:32
352B	  MOV32mr %stack.14.nrows, 1, $noreg, 0, $noreg, %10:gr32, debug-location !1296 :: (store 4 into %ir.nrows); cg.c:659:11
368B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1297 :: (store 4 into %ir.j); cg.c:664:12

384B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

400B	  %13:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1302 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
432B	  %13:gr32 = nsw INC32r %13:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1303; cg.c:664:27
448B	  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %13:gr32, implicit-def $eflags, debug-location !1304 :: (dereferenceable load 4 from %ir.j); cg.c:664:19
464B	  JCC_1 %bb.3, 13, implicit killed $eflags, debug-location !1305; cg.c:664:5
480B	  JMP_1 %bb.2, debug-location !1305; cg.c:664:5

496B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

512B	  %202:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1306 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
528B	  %203:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1308 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
544B	  MOV32mi %202:gr64, 4, %203:gr64_nosp, 0, $noreg, 0, debug-location !1309 :: (store 4 into %ir.arrayidx); cg.c:665:19
560B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1310 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:664:33
576B	  JMP_1 %bb.1, debug-location !1311; cg.c:664:5

592B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

608B	  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1314 :: (store 4 into %ir.i); cg.c:668:12

624B	bb.4.for.cond2:
	; predecessors: %bb.3, %bb.8
	  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

640B	  %15:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1317 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
656B	  CMP32rm %15:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1320 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:19
672B	  JCC_1 %bb.9, 13, implicit killed $eflags, debug-location !1321; cg.c:668:5
688B	  JMP_1 %bb.5, debug-location !1321; cg.c:668:5

704B	bb.5.for.body4:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

720B	  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1322 :: (store 4 into %ir.nza); cg.c:669:18

736B	bb.6.for.cond5:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

752B	  %188:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1326 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
768B	  %189:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1328 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
784B	  %190:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1329 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
800B	  CMP32rm %188:gr32, %189:gr64, 4, %190:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1330 :: (load 4 from %ir.arrayidx7); cg.c:669:27
816B	  JCC_1 %bb.8, 13, implicit killed $eflags, debug-location !1331; cg.c:669:9
832B	  JMP_1 %bb.7, debug-location !1331; cg.c:669:9

848B	bb.7.for.body9:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

864B	  %192:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1334 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
880B	  %194:gr64 = IMUL64rri8 %192:gr64_nosp, 56, implicit-def dead $eflags, debug-location !1332; cg.c:670:17
912B	  %194:gr64 = ADD64rm %194:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1332 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
928B	  %195:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1335 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
944B	  %204:gr64_nosp = MOVSX64rm32 %194:gr64, 4, %195:gr64_nosp, 0, $noreg, debug-location !1332 :: (load 4 from %ir.arrayidx13); cg.c:670:17
992B	  %198:gr32 = LEA64_32r %204:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !1336; cg.c:670:30
1008B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %198:gr32, debug-location !1337 :: (store 4 into %ir.j); cg.c:670:15
1024B	  %199:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1338 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
1040B	  %200:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1340 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
1056B	  %201:gr32 = MOV32rm %200:gr64, 4, %192:gr64_nosp, 0, $noreg, debug-location !1340 :: (load 4 from %ir.arrayidx18); cg.c:671:37
1072B	  ADD32mr %199:gr64, 4, %204:gr64_nosp, 4, $noreg, %201:gr32, implicit-def dead $eflags, debug-location !1345 :: (store 4 into %ir.arrayidx21), (load 4 from %ir.arrayidx16); cg.c:671:23
1088B	  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1346 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:669:41
1104B	  JMP_1 %bb.6, debug-location !1347; cg.c:669:9

1120B	bb.8.for.end24:
	; predecessors: %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1136B	  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1350 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:668:25
1152B	  JMP_1 %bb.4, debug-location !1351; cg.c:668:5

1168B	bb.9.for.end27:
	; predecessors: %bb.4
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1184B	  %17:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1354 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
1200B	  MOV32mi %17:gr64, 1, $noreg, 0, $noreg, 0, debug-location !1355 :: (store 4 into %ir.arrayidx281); cg.c:675:15
1216B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1356 :: (store 4 into %ir.j); cg.c:676:12

1232B	bb.10.for.cond29:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1248B	  %20:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1361 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
1280B	  %20:gr32 = nsw INC32r %20:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1362; cg.c:676:27
1296B	  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %20:gr32, implicit-def $eflags, debug-location !1363 :: (dereferenceable load 4 from %ir.j); cg.c:676:19
1312B	  JCC_1 %bb.12, 13, implicit killed $eflags, debug-location !1364; cg.c:676:5
1328B	  JMP_1 %bb.11, debug-location !1364; cg.c:676:5

1344B	bb.11.for.body32:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1360B	  %185:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1365 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
1376B	  %186:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1367 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
1392B	  %187:gr32 = MOV32rm %185:gr64, 4, %186:gr64_nosp, -4, $noreg, debug-location !1368 :: (load 4 from %ir.arrayidx37); cg.c:677:33
1408B	  ADD32mr %185:gr64, 4, %186:gr64_nosp, 0, $noreg, %187:gr32, implicit-def dead $eflags, debug-location !1374 :: (store 4 into %ir.arrayidx40), (load 4 from %ir.arrayidx34); cg.c:677:19
1424B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1375 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:676:33
1440B	  JMP_1 %bb.10, debug-location !1376; cg.c:676:5

1456B	bb.12.for.end43:
	; predecessors: %bb.10
	  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

1472B	  %22:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1379 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
1488B	  %23:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1380 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
1504B	  %25:gr32 = MOV32rm %22:gr64, 4, %23:gr64_nosp, 0, $noreg, debug-location !1379 :: (load 4 from %ir.arrayidx45); cg.c:679:11
1536B	  %25:gr32 = DEC32r %25:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1381; cg.c:679:25
1552B	  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %25:gr32, debug-location !1382 :: (store 4 into %ir.nza); cg.c:679:9
1568B	  CMP32rm %25:gr32, %stack.4.nz.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1386 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:13
1584B	  JCC_1 %bb.14, 14, implicit killed $eflags, debug-location !1387; cg.c:685:9
1600B	  JMP_1 %bb.13, debug-location !1387; cg.c:685:9

1616B	bb.13.if.then:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

1632B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1388; cg.c:686:9
1696B	  $rdi = MOV32ri64 @.str.37, debug-location !1388; cg.c:686:9
1712B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1388; cg.c:686:9
1728B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1388; cg.c:686:9
1744B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1388; cg.c:686:9
1760B	  %31:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1390 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
1776B	  %32:gr32 = MOV32rm %stack.4.nz.addr, 1, $noreg, 0, $noreg, debug-location !1391 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1392; cg.c:687:9
1824B	  $rdi = MOV32ri64 @.str.38, debug-location !1392; cg.c:687:9
1840B	  $esi = COPY %31:gr32, debug-location !1392; cg.c:687:9
1856B	  $edx = COPY %32:gr32, debug-location !1392; cg.c:687:9
1872B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1392; cg.c:687:9
1888B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1392; cg.c:687:9
1904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1392; cg.c:687:9

1920B	bb.14.if.end:
	; predecessors: %bb.12, %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

1936B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1394 :: (store 4 into %ir.j); cg.c:694:12

1952B	bb.15.for.cond49:
	; predecessors: %bb.14, %bb.19
	  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

1968B	  %35:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1397 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
1984B	  CMP32rm %35:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1400 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:19
2000B	  JCC_1 %bb.20, 13, implicit killed $eflags, debug-location !1401; cg.c:694:5
2016B	  JMP_1 %bb.16, debug-location !1401; cg.c:694:5

2032B	bb.16.for.body51:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2048B	  %172:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1402 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
2064B	  %173:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1405 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
2080B	  %174:gr32 = MOV32rm %172:gr64, 4, %173:gr64_nosp, 0, $noreg, debug-location !1402 :: (load 4 from %ir.arrayidx53); cg.c:695:18
2096B	  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %174:gr32, debug-location !1406 :: (store 4 into %ir.k); cg.c:695:16

2112B	bb.17.for.cond54:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2128B	  %175:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1408 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
2144B	  %176:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1410 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
2160B	  %177:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1411 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
2176B	  CMP32rm %175:gr32, %176:gr64, 4, %177:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:31
2192B	  JCC_1 %bb.19, 13, implicit killed $eflags, debug-location !1414; cg.c:695:9
2208B	  JMP_1 %bb.18, debug-location !1414; cg.c:695:9

2224B	bb.18.for.body59:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2240B	  %181:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1415 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
2256B	  %182:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1417 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
2272B	  MOV64mi32 %181:gr64, 8, %182:gr64_nosp, 0, $noreg, 0, debug-location !1418 :: (store 8 into %ir.arrayidx61); cg.c:696:18
2288B	  %183:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1419 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
2304B	  %184:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
2320B	  MOV32mi %183:gr64, 4, %184:gr64_nosp, 0, $noreg, -1, debug-location !1421 :: (store 4 into %ir.arrayidx63); cg.c:697:23
2336B	  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1422 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:695:49
2352B	  JMP_1 %bb.17, debug-location !1423; cg.c:695:9

2368B	bb.19.for.end66:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2384B	  %179:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1426 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
2400B	  %180:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1427 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
2416B	  MOV32mi %179:gr64, 4, %180:gr64_nosp, 0, $noreg, 0, debug-location !1428 :: (store 4 into %ir.arrayidx68); cg.c:699:18
2432B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1429 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:694:29
2448B	  JMP_1 %bb.15, debug-location !1430; cg.c:694:5

2464B	bb.20.for.end71:
	; predecessors: %bb.15
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

2480B	  %37:gr64 = MOV64ri 4607182418800017408
2496B	  MOV64mr %stack.24.size, 1, $noreg, 0, $noreg, %37:gr64, debug-location !1433 :: (store 8 into %ir.size); cg.c:705:10
2512B	  %38:fr64 = MOVSDrm_alt %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1434 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
2528B	  %39:fr64 = CVTSI2SDrm %stack.3.n.addr, 1, $noreg, 0, $noreg, debug-location !1436 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
2544B	  %41:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
2576B	  %41:fr64 = DIVSDrr %41:fr64(tied-def 0), %39:fr64, debug-location !1437; cg.c:706:29
2592B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1438; cg.c:706:13
2608B	  $xmm0 = COPY %38:fr64, debug-location !1438; cg.c:706:13
2624B	  $xmm1 = COPY %41:fr64, debug-location !1438; cg.c:706:13
2640B	  CALL64pcrel32 @pow, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $xmm0, implicit $xmm1, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !1438; cg.c:706:13
2656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1438; cg.c:706:13
2672B	  %42:fr64 = COPY $xmm0, debug-location !1438; cg.c:706:13
2688B	  MOVSDmr %stack.26.ratio, 1, $noreg, 0, $noreg, %42:fr64, debug-location !1439 :: (store 8 into %ir.ratio); cg.c:706:11
2704B	  MOV32mi %stack.15.i, 1, $noreg, 0, $noreg, 0, debug-location !1440 :: (store 4 into %ir.i); cg.c:708:12

2752B	bb.21.for.cond73:
	; predecessors: %bb.20, %bb.47
	  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

2768B	  %43:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1443 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
2784B	  CMP32rm %43:gr32, %stack.3.n.addr, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1446 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:19
2800B	  JCC_1 %bb.48, 13, implicit killed $eflags, debug-location !1447; cg.c:708:5
2816B	  JMP_1 %bb.22, debug-location !1447; cg.c:708:5

2832B	bb.22.for.body76:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

2848B	  MOV32mi %stack.19.nza, 1, $noreg, 0, $noreg, 0, debug-location !1448 :: (store 4 into %ir.nza); cg.c:709:18

2864B	bb.23.for.cond77:
	; predecessors: %bb.22, %bb.46
	  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

2880B	  %86:gr32 = MOV32rm %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1452 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
2896B	  %87:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1454 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
2912B	  %88:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1455 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
2928B	  CMP32rm %86:gr32, %87:gr64, 4, %88:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1456 :: (load 4 from %ir.arrayidx79); cg.c:709:27
2944B	  JCC_1 %bb.47, 13, implicit killed $eflags, debug-location !1457; cg.c:709:9
2960B	  JMP_1 %bb.24, debug-location !1457; cg.c:709:9

2976B	bb.24.for.body82:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

2992B	  %92:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1460 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
3008B	  %94:gr64 = IMUL64rri8 %92:gr64, 56, implicit-def dead $eflags, debug-location !1458; cg.c:710:17
3040B	  %94:gr64 = ADD64rm %94:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1458 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
3056B	  %95:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1461 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
3072B	  %96:gr32 = MOV32rm %94:gr64, 4, %95:gr64_nosp, 0, $noreg, debug-location !1458 :: (load 4 from %ir.arrayidx86); cg.c:710:17
3088B	  MOV32mr %stack.16.j, 1, $noreg, 0, $noreg, %96:gr32, debug-location !1462 :: (store 4 into %ir.j); cg.c:710:15
3104B	  %100:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1463 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
3120B	  %99:gr64 = IMUL64rri8 %92:gr64, 112, implicit-def dead $eflags, debug-location !1464; cg.c:712:28
3152B	  %99:gr64 = ADD64rm %99:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1464 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
3184B	  %100:fr64 = MULSDrm %100:fr64(tied-def 0), %99:gr64, 8, %95:gr64_nosp, 0, $noreg, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:26
3200B	  MOVSDmr %stack.25.scale, 1, $noreg, 0, $noreg, %100:fr64, debug-location !1468 :: (store 8 into %ir.scale); cg.c:712:19
3216B	  MOV32mi %stack.22.nzrow, 1, $noreg, 0, $noreg, 0, debug-location !1469 :: (store 4 into %ir.nzrow); cg.c:713:24

3232B	bb.25.for.cond91:
	; predecessors: %bb.24, %bb.45
	  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

3248B	  %101:gr32 = MOV32rm %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1472 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
3264B	  %102:gr64 = MOV64rm %fixed-stack.5, 1, $noreg, 0, $noreg, debug-location !1474 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
3280B	  %103:gr64_nosp = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1475 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
3296B	  CMP32rm %101:gr32, %102:gr64, 4, %103:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !1476 :: (load 4 from %ir.arrayidx93); cg.c:713:35
3312B	  JCC_1 %bb.46, 13, implicit killed $eflags, debug-location !1477; cg.c:713:13
3328B	  JMP_1 %bb.26, debug-location !1477; cg.c:713:13

3344B	bb.26.for.body96:
	; predecessors: %bb.25
	  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

3360B	  %105:gr64 = MOVSX64rm32 %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1480 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
3376B	  %107:gr64 = IMUL64rri8 %105:gr64, 56, implicit-def dead $eflags, debug-location !1478; cg.c:714:24
3408B	  %107:gr64 = ADD64rm %107:gr64(tied-def 0), %fixed-stack.4, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1478 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
3424B	  %108:gr64_nosp = MOVSX64rm32 %stack.22.nzrow, 1, $noreg, 0, $noreg, debug-location !1481 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
3440B	  %109:gr32 = MOV32rm %107:gr64, 4, %108:gr64_nosp, 0, $noreg, debug-location !1478 :: (load 4 from %ir.arrayidx100); cg.c:714:24
3456B	  MOV32mr %stack.23.jcol, 1, $noreg, 0, $noreg, %109:gr32, debug-location !1482 :: (store 4 into %ir.jcol); cg.c:714:22
3472B	  %111:gr64 = IMUL64rri8 %105:gr64, 112, implicit-def dead $eflags, debug-location !1483; cg.c:715:22
3504B	  %111:gr64 = ADD64rm %111:gr64(tied-def 0), %fixed-stack.3, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1483 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
3520B	  %113:fr64 = MOVSDrm_alt %111:gr64, 8, %108:gr64_nosp, 0, $noreg, debug-location !1483 :: (load 8 from %ir.arrayidx104); cg.c:715:22
3552B	  %113:fr64 = MULSDrm %113:fr64(tied-def 0), %stack.25.scale, 1, $noreg, 0, $noreg, debug-location !1487 :: (dereferenceable load 8 from %ir.scale); cg.c:715:37
3568B	  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %113:fr64, debug-location !1488 :: (store 8 into %ir.va); cg.c:715:20
3584B	  CMP32rm %109:gr32, %stack.16.j, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1492 :: (dereferenceable load 4 from %ir.j); cg.c:721:26
3600B	  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1493; cg.c:721:31
3616B	  JMP_1 %bb.27, debug-location !1493; cg.c:721:31

3632B	bb.27.land.lhs.true:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

3648B	  %115:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
3664B	  CMP32rm %115:gr32, %stack.15.i, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1496 :: (dereferenceable load 4 from %ir.i); cg.c:721:36
3680B	  JCC_1 %bb.29, 5, implicit killed $eflags, debug-location !1497; cg.c:721:21
3696B	  JMP_1 %bb.28, debug-location !1497; cg.c:721:21

3712B	bb.28.if.then110:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

3728B	  %119:fr64 = MOVSDrm_alt %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1498 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
3760B	  %119:fr64 = ADDSDrm %119:fr64(tied-def 0), %stack.12.rcond.addr, 1, $noreg, 0, $noreg, debug-location !1501 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:29
3792B	  %119:fr64 = SUBSDrm %119:fr64(tied-def 0), %stack.13.shift.addr, 1, $noreg, 0, $noreg, debug-location !1503 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:37
3808B	  MOVSDmr %stack.27.va, 1, $noreg, 0, $noreg, %119:fr64, debug-location !1504 :: (store 8 into %ir.va); cg.c:722:24

3824B	bb.29.if.end113:
	; predecessors: %bb.26, %bb.27, %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

3840B	  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 0, debug-location !1506 :: (store 4 into %ir.cont40); cg.c:725:24
3856B	  %120:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1507 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
3872B	  %121:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1509 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
3888B	  %122:gr32 = MOV32rm %120:gr64, 4, %121:gr64_nosp, 0, $noreg, debug-location !1507 :: (load 4 from %ir.arrayidx115); cg.c:726:26
3904B	  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %122:gr32, debug-location !1510 :: (store 4 into %ir.k); cg.c:726:24

3920B	bb.30.for.cond116:
	; predecessors: %bb.29, %bb.42
	  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

3936B	  %123:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1512 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
3952B	  %124:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1514 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
3968B	  %125:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1515 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
3984B	  CMP32rm %123:gr32, %124:gr64, 4, %125:gr64_nosp, 4, $noreg, implicit-def $eflags, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:39
4000B	  JCC_1 %bb.43, 13, implicit killed $eflags, debug-location !1518; cg.c:726:17
4016B	  JMP_1 %bb.31, debug-location !1518; cg.c:726:17

4032B	bb.31.for.body122:
	; predecessors: %bb.30
	  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

4048B	  %127:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1519 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
4064B	  %128:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1522 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
4080B	  %129:gr32 = MOV32rm %127:gr64, 4, %128:gr64_nosp, 0, $noreg, debug-location !1519 :: (load 4 from %ir.arrayidx124); cg.c:727:25
4096B	  CMP32rm %129:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1524 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:35
4112B	  JCC_1 %bb.38, 14, implicit killed $eflags, debug-location !1525; cg.c:727:25
4128B	  JMP_1 %bb.32, debug-location !1525; cg.c:727:25

4144B	bb.32.if.then127:
	; predecessors: %bb.31
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

4160B	  %144:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1526 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
4176B	  %145:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1529 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
4192B	  %147:gr32 = MOV32rm %144:gr64, 4, %145:gr64_nosp, 4, $noreg, debug-location !1526 :: (load 4 from %ir.arrayidx130); cg.c:731:35
4224B	  %147:gr32 = ADD32ri8 %147:gr32(tied-def 0), -2, implicit-def dead $eflags, debug-location !1531; cg.c:731:49
4240B	  MOV32mr %stack.21.kk, 1, $noreg, 0, $noreg, %147:gr32, debug-location !1532 :: (store 4 into %ir.kk); cg.c:731:33

4256B	bb.33.for.cond132:
	; predecessors: %bb.32, %bb.36
	  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

4272B	  %148:gr32 = MOV32rm %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1534 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
4288B	  CMP32rm %148:gr32, %stack.20.k, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1537 :: (dereferenceable load 4 from %ir.k); cg.c:731:57
4304B	  JCC_1 %bb.37, 12, implicit killed $eflags, debug-location !1538; cg.c:731:25
4320B	  JMP_1 %bb.34, debug-location !1538; cg.c:731:25

4336B	bb.34.for.body135:
	; predecessors: %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

4352B	  %164:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1539 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
4368B	  %165:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1542 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
4384B	  CMP32mi8 %164:gr64, 4, %165:gr64_nosp, 0, $noreg, 0, implicit-def $eflags, debug-location !1543 :: (load 4 from %ir.arrayidx137); cg.c:732:44
4400B	  JCC_1 %bb.36, 8, implicit killed $eflags, debug-location !1544; cg.c:732:33
4416B	  JMP_1 %bb.35, debug-location !1544; cg.c:732:33

4432B	bb.35.if.then140:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

4448B	  %166:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1545 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
4464B	  %167:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1547 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
4480B	  %168:fr64 = MOVSDrm_alt %166:gr64, 8, %167:gr64_nosp, 0, $noreg, debug-location !1545 :: (load 8 from %ir.arrayidx142); cg.c:733:45
4496B	  MOVSDmr %166:gr64, 8, %167:gr64_nosp, 8, $noreg, %168:fr64, debug-location !1551 :: (store 8 into %ir.arrayidx145); cg.c:733:43
4512B	  %169:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1552 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
4528B	  %170:gr64_nosp = MOVSX64rm32 %stack.21.kk, 1, $noreg, 0, $noreg, debug-location !1553 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
4544B	  %171:gr32 = MOV32rm %169:gr64, 4, %170:gr64_nosp, 0, $noreg, debug-location !1552 :: (load 4 from %ir.arrayidx147); cg.c:734:50
4560B	  MOV32mr %169:gr64, 4, %170:gr64_nosp, 4, $noreg, %171:gr32, debug-location !1557 :: (store 4 into %ir.arrayidx150); cg.c:734:48

4576B	bb.36.if.end151:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

4592B	  DEC32m %stack.21.kk, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1559 :: (store 4 into %ir.kk), (dereferenceable load 4 from %ir.kk); cg.c:731:65
4608B	  JMP_1 %bb.33, debug-location !1560; cg.c:731:25

4624B	bb.37.for.end153:
	; predecessors: %bb.33
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

4640B	  %150:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1563 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
4656B	  %151:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1564 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
4672B	  %152:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1565 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
4688B	  MOV32mr %151:gr64, 4, %152:gr64_nosp, 0, $noreg, %150:gr32, debug-location !1566 :: (store 4 into %ir.arrayidx155); cg.c:737:35
4704B	  %153:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1567 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
4720B	  %154:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
4736B	  MOV64mi32 %153:gr64, 8, %154:gr64_nosp, 0, $noreg, 0, debug-location !1569 :: (store 8 into %ir.arrayidx157); cg.c:738:30
4752B	  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1570 :: (store 4 into %ir.cont40); cg.c:739:32
4768B	  JMP_1 %bb.43, debug-location !1571; cg.c:740:25

4784B	bb.38.if.else:
	; predecessors: %bb.31
	  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

4800B	  %131:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1572 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
4816B	  %132:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1574 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
4832B	  CMP32mi8 %131:gr64, 4, %132:gr64_nosp, 0, $noreg, -1, implicit-def $eflags, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:40
4848B	  JCC_1 %bb.40, 5, implicit killed $eflags, debug-location !1576; cg.c:742:30
4864B	  JMP_1 %bb.39, debug-location !1576; cg.c:742:30

4880B	bb.39.if.then162:
	; predecessors: %bb.38
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

4896B	  %141:gr32 = MOV32rm %stack.23.jcol, 1, $noreg, 0, $noreg, debug-location !1577 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
4912B	  %142:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1579 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
4928B	  %143:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1580 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
4944B	  MOV32mr %142:gr64, 4, %143:gr64_nosp, 0, $noreg, %141:gr32, debug-location !1581 :: (store 4 into %ir.arrayidx164); cg.c:743:35
4960B	  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1582 :: (store 4 into %ir.cont40); cg.c:744:32
4976B	  JMP_1 %bb.43, debug-location !1583; cg.c:745:25

4992B	bb.40.if.else165:
	; predecessors: %bb.38
	  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

5008B	  %135:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1584 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
5024B	  %136:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1586 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
5040B	  %137:gr32 = MOV32rm %135:gr64, 4, %136:gr64_nosp, 0, $noreg, debug-location !1584 :: (load 4 from %ir.arrayidx167); cg.c:747:30
5056B	  CMP32rm %137:gr32, %stack.23.jcol, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1588 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:40
5072B	  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !1589; cg.c:747:30
5088B	  JMP_1 %bb.41, debug-location !1589; cg.c:747:30

5104B	bb.41.if.then170:
	; predecessors: %bb.40
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5120B	  %139:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1590 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
5136B	  %140:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1592 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
5152B	  INC32m %139:gr64, 4, %140:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1596 :: (store 4 into %ir.arrayidx175), (load 4 from %ir.arrayidx172); cg.c:751:34
5168B	  MOV32mi %stack.28.cont40, 1, $noreg, 0, $noreg, 1, debug-location !1597 :: (store 4 into %ir.cont40); cg.c:752:32
5184B	  JMP_1 %bb.43, debug-location !1598; cg.c:753:25

5200B	bb.42.if.end176:
	; predecessors: %bb.40
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

5216B	  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1599 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:726:57
5232B	  JMP_1 %bb.30, debug-location !1600; cg.c:726:17

5248B	bb.43.for.end181:
	; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
	  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

5264B	  CMP32mi8 %stack.28.cont40, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1605 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:28
5280B	  JCC_1 %bb.45, 5, implicit killed $eflags, debug-location !1606; cg.c:756:21
5296B	  JMP_1 %bb.44, debug-location !1606; cg.c:756:21

5312B	bb.44.if.then184:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

5328B	  %155:gr32 = MOV32rm %stack.15.i, 1, $noreg, 0, $noreg, debug-location !1607 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
5344B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1609; cg.c:757:21
5376B	  $rdi = MOV32ri64 @.str.39, debug-location !1609; cg.c:757:21
5392B	  $esi = COPY %155:gr32, debug-location !1609; cg.c:757:21
5408B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !1609; cg.c:757:21
5424B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !1609; cg.c:757:21
5440B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !1609; cg.c:757:21

5456B	bb.45.if.end186:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

5472B	  %160:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1611 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
5488B	  %161:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1612 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
5504B	  %163:fr64 = MOVSDrm_alt %160:gr64, 8, %161:gr64_nosp, 0, $noreg, debug-location !1611 :: (load 8 from %ir.arrayidx188); cg.c:761:24
5536B	  %163:fr64 = ADDSDrm %163:fr64(tied-def 0), %stack.27.va, 1, $noreg, 0, $noreg, debug-location !1614 :: (dereferenceable load 8 from %ir.va); cg.c:761:29
5552B	  MOVSDmr %160:gr64, 8, %161:gr64_nosp, 0, $noreg, %163:fr64, debug-location !1617 :: (store 8 into %ir.arrayidx191); cg.c:761:22
5568B	  INC32m %stack.22.nzrow, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1618 :: (store 4 into %ir.nzrow), (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
5584B	  JMP_1 %bb.25, debug-location !1619; cg.c:713:13

5600B	bb.46.for.end194:
	; predecessors: %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

5616B	  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1622 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:709:41
5632B	  JMP_1 %bb.23, debug-location !1623; cg.c:709:9

5648B	bb.47.for.end197:
	; predecessors: %bb.23
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

5664B	  %91:fr64 = MOVSDrm_alt %stack.24.size, 1, $noreg, 0, $noreg, debug-location !1626 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
5696B	  %91:fr64 = MULSDrm %91:fr64(tied-def 0), %stack.26.ratio, 1, $noreg, 0, $noreg, debug-location !1628 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:21
5712B	  MOVSDmr %stack.24.size, 1, $noreg, 0, $noreg, %91:fr64, debug-location !1629 :: (store 8 into %ir.size); cg.c:764:14
5728B	  INC32m %stack.15.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1630 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); cg.c:708:25
5744B	  JMP_1 %bb.21, debug-location !1631; cg.c:708:5

5760B	bb.48.for.end201:
	; predecessors: %bb.21
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

5776B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1634 :: (store 4 into %ir.j); cg.c:770:12

5792B	bb.49.for.cond202:
	; predecessors: %bb.48, %bb.50
	  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

5808B	  %45:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1637 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
5824B	  CMP32rm %45:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1640 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:19
5840B	  JCC_1 %bb.51, 13, implicit killed $eflags, debug-location !1641; cg.c:770:5
5856B	  JMP_1 %bb.50, debug-location !1641; cg.c:770:5

5872B	bb.50.for.body205:
	; predecessors: %bb.49
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

5888B	  %83:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1642 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
5904B	  %84:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1644 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
5920B	  %85:gr32 = MOV32rm %83:gr64, 4, %84:gr64_nosp, -4, $noreg, debug-location !1645 :: (load 4 from %ir.arrayidx210); cg.c:771:31
5936B	  ADD32mr %83:gr64, 4, %84:gr64_nosp, 0, $noreg, %85:gr32, implicit-def dead $eflags, debug-location !1651 :: (store 4 into %ir.arrayidx213), (load 4 from %ir.arrayidx207); cg.c:771:18
5952B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1652 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:770:29
5968B	  JMP_1 %bb.49, debug-location !1653; cg.c:770:5

5984B	bb.51.for.end216:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

6000B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 0, debug-location !1656 :: (store 4 into %ir.j); cg.c:774:12

6016B	bb.52.for.cond217:
	; predecessors: %bb.51, %bb.59
	  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

6032B	  %47:gr32 = MOV32rm %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1659 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
6048B	  CMP32rm %47:gr32, %stack.14.nrows, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1662 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:19
6064B	  JCC_1 %bb.60, 13, implicit killed $eflags, debug-location !1663; cg.c:774:5
6080B	  JMP_1 %bb.53, debug-location !1663; cg.c:774:5

6096B	bb.53.for.body220:
	; predecessors: %bb.52
	  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

6112B	  CMP32mi8 %stack.16.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:15
6128B	  JCC_1 %bb.55, 14, implicit killed $eflags, debug-location !1668; cg.c:775:13
6144B	  JMP_1 %bb.54, debug-location !1668; cg.c:775:13

6160B	bb.54.if.then223:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

6176B	  %61:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1669 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
6192B	  %62:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1671 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
6208B	  %65:gr32 = MOV32rm %61:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !1669 :: (load 4 from %ir.arrayidx225); cg.c:776:18
6224B	  %64:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1672 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
6256B	  %65:gr32 = nsw SUB32rm %65:gr32(tied-def 0), %64:gr64, 4, %62:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:28
6272B	  MOV32mr %stack.17.j1, 1, $noreg, 0, $noreg, %65:gr32, debug-location !1676 :: (store 4 into %ir.j1); cg.c:776:16
6288B	  JMP_1 %bb.56, debug-location !1677; cg.c:777:9

6304B	bb.55.if.else230:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

6320B	  MOV32mi %stack.17.j1, 1, $noreg, 0, $noreg, 0, debug-location !1678 :: (store 4 into %ir.j1); cg.c:779:16

6336B	bb.56.if.end231:
	; predecessors: %bb.55, %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

6352B	  %66:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1680 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
6368B	  %67:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1681 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
6384B	  %70:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 4, $noreg, debug-location !1680 :: (load 4 from %ir.arrayidx234); cg.c:781:14
6400B	  %69:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1683 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
6432B	  %70:gr32 = nsw SUB32rm %70:gr32(tied-def 0), %69:gr64, 4, %67:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !1685 :: (load 4 from %ir.arrayidx236); cg.c:781:28
6448B	  MOV32mr %stack.18.j2, 1, $noreg, 0, $noreg, %70:gr32, debug-location !1686 :: (store 4 into %ir.j2); cg.c:781:12
6464B	  %71:gr32 = MOV32rm %66:gr64, 4, %67:gr64_nosp, 0, $noreg, debug-location !1687 :: (load 4 from %ir.arrayidx239); cg.c:782:15
6480B	  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %71:gr32, debug-location !1689 :: (store 4 into %ir.nza); cg.c:782:13
6496B	  %72:gr32 = MOV32rm %stack.17.j1, 1, $noreg, 0, $noreg, debug-location !1690 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
6512B	  MOV32mr %stack.20.k, 1, $noreg, 0, $noreg, %72:gr32, debug-location !1692 :: (store 4 into %ir.k); cg.c:783:16

6528B	bb.57.for.cond240:
	; predecessors: %bb.56, %bb.58
	  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

6544B	  %73:gr32 = MOV32rm %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1694 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
6560B	  CMP32rm %73:gr32, %stack.18.j2, 1, $noreg, 0, $noreg, implicit-def $eflags, debug-location !1697 :: (dereferenceable load 4 from %ir.j2); cg.c:783:24
6576B	  JCC_1 %bb.59, 13, implicit killed $eflags, debug-location !1698; cg.c:783:9
6592B	  JMP_1 %bb.58, debug-location !1698; cg.c:783:9

6608B	bb.58.for.body243:
	; predecessors: %bb.57
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

6624B	  %75:gr64 = MOV64rm %stack.0.a.addr, 1, $noreg, 0, $noreg, debug-location !1699 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
6640B	  %76:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1701 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
6656B	  %77:fr64 = MOVSDrm_alt %75:gr64, 8, %76:gr64_nosp, 0, $noreg, debug-location !1699 :: (load 8 from %ir.arrayidx245); cg.c:784:20
6672B	  %78:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1703 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
6688B	  MOVSDmr %75:gr64, 8, %78:gr64_nosp, 0, $noreg, %77:fr64, debug-location !1704 :: (store 8 into %ir.arrayidx247); cg.c:784:18
6704B	  %79:gr64 = MOV64rm %stack.1.colidx.addr, 1, $noreg, 0, $noreg, debug-location !1705 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
6720B	  %80:gr64_nosp = MOVSX64rm32 %stack.19.nza, 1, $noreg, 0, $noreg, debug-location !1706 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
6736B	  %81:gr32 = MOV32rm %79:gr64, 4, %80:gr64_nosp, 0, $noreg, debug-location !1705 :: (load 4 from %ir.arrayidx249); cg.c:785:25
6752B	  %82:gr64_nosp = MOVSX64rm32 %stack.20.k, 1, $noreg, 0, $noreg, debug-location !1708 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
6768B	  MOV32mr %79:gr64, 4, %82:gr64_nosp, 0, $noreg, %81:gr32, debug-location !1709 :: (store 4 into %ir.arrayidx251); cg.c:785:23
6784B	  INC32m %stack.19.nza, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1712 :: (store 4 into %ir.nza), (dereferenceable load 4 from %ir.nza); cg.c:786:17
6800B	  INC32m %stack.20.k, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1713 :: (store 4 into %ir.k), (dereferenceable load 4 from %ir.k); cg.c:783:31
6816B	  JMP_1 %bb.57, debug-location !1714; cg.c:783:9

6832B	bb.59.for.end255:
	; predecessors: %bb.57
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

6848B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1717 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:774:29
6864B	  JMP_1 %bb.52, debug-location !1718; cg.c:774:5

6880B	bb.60.for.end258:
	; predecessors: %bb.52
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

6896B	  MOV32mi %stack.16.j, 1, $noreg, 0, $noreg, 1, debug-location !1721 :: (store 4 into %ir.j); cg.c:789:12

6912B	bb.61.for.cond259:
	; predecessors: %bb.60, %bb.62
	  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

6928B	  %51:gr32 = MOV32rm %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1726 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
6960B	  %51:gr32 = nsw INC32r %51:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1727; cg.c:789:27
6976B	  CMP32mr %stack.16.j, 1, $noreg, 0, $noreg, %51:gr32, implicit-def $eflags, debug-location !1728 :: (dereferenceable load 4 from %ir.j); cg.c:789:19
6992B	  JCC_1 %bb.63, 13, implicit killed $eflags, debug-location !1729; cg.c:789:5
7008B	  JMP_1 %bb.62, debug-location !1729; cg.c:789:5

7024B	bb.62.for.body263:
	; predecessors: %bb.61
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

7040B	  %57:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1730 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
7056B	  %58:gr64_nosp = MOVSX64rm32 %stack.16.j, 1, $noreg, 0, $noreg, debug-location !1732 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
7072B	  %59:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg, debug-location !1733 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
7088B	  %60:gr32 = MOV32rm %59:gr64, 4, %58:gr64_nosp, -4, $noreg, debug-location !1733 :: (load 4 from %ir.arrayidx268); cg.c:790:33
7104B	  SUB32mr %57:gr64, 4, %58:gr64_nosp, 0, $noreg, %60:gr32, implicit-def dead $eflags, debug-location !1739 :: (store 4 into %ir.arrayidx271), (load 4 from %ir.arrayidx265); cg.c:790:19
7120B	  INC32m %stack.16.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !1740 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); cg.c:789:33
7136B	  JMP_1 %bb.61, debug-location !1741; cg.c:789:5

7152B	bb.63.for.end274:
	; predecessors: %bb.61

7168B	  %53:gr64 = MOV64rm %stack.2.rowstr.addr, 1, $noreg, 0, $noreg, debug-location !1744 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
7184B	  %54:gr64_nosp = MOVSX64rm32 %stack.14.nrows, 1, $noreg, 0, $noreg, debug-location !1745 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
7200B	  %56:gr32 = MOV32rm %53:gr64, 4, %54:gr64_nosp, 0, $noreg, debug-location !1744 :: (load 4 from %ir.arrayidx276); cg.c:792:11
7232B	  %56:gr32 = DEC32r %56:gr32(tied-def 0), implicit-def dead $eflags, debug-location !1746; cg.c:792:25
7248B	  MOV32mr %stack.19.nza, 1, $noreg, 0, $noreg, %56:gr32, debug-location !1747 :: (store 4 into %ir.nza); cg.c:792:9
7264B	  RET 0, debug-location !1748; cg.c:793:1

# End machine code for function sparse.

Before MISched:
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $edi in %1

bb.0.entry:
  liveins: $xmm0, $edi
  %1:gr32 = COPY $edi
  %0:fr64 = COPY $xmm0
  MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
  MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
  %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1756; cg.c:843:55
  %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
  %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1759; cg.c:843:49
  $eax = COPY %4:gr32, debug-location !1760; cg.c:843:42
  RET 0, killed $eax, debug-location !1760; cg.c:843:42

# End machine code for function icnvrt.

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: %1:gr32 = COPY $edi
    To: RET 0, killed $eax, debug-location !1760; cg.c:843:42
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
FR32X=2
GR16=2
Live In: XMM0 DIL DIH HDI 
Live Out: 
Live Thru: 
Top Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=1
Bottom Pressure:
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=2
GR32_TC=2
GR32_BPSP+GR32_TC=2
GR64_NOREX=2
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR16=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Data Latency=0 Reg=%1
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR16 -1
  Single Issue       : false;
SU(1):   %0:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=0 Reg=%0
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1756; cg.c:843:55
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(5): Data Latency=1 Reg=%3
    SU(5): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(5):   %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%3
    SU(4): Out  Latency=0
    SU(1): Data Latency=0 Reg=%0
  Successors:
    SU(6): Data Latency=1 Reg=%3
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(6):   %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1759; cg.c:843:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
  Successors:
    SU(7): Data Latency=1 Reg=%4
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(7):   $eax = COPY %4:gr32, debug-location !1760; cg.c:843:42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%4
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Single Issue       : false;
ExitSU:   RET 0, killed $eax, debug-location !1760; cg.c:843:42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 
  Cand SU(3) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(7) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(7) $eax = COPY %4:gr32, debug-location !1760; cg.c:843:42
Bottom Pressure:
GR16=2
  LiveReg: %4
  UpdateRegP: SU(7) $eax = COPY %4:gr32, debug-location !1760; cg.c:843:42
              to GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR64_TC -2    GR8+GR64_TCW64 -2
  Ready @0c
  BotQ.A TopLatency SU(7) 3c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 6 
  Cand SU(3) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1759; cg.c:843:49
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %3
  UpdateRegP: SU(6) %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1759; cg.c:843:49
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 5 
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %3
  UpdateRegP: SU(5) %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
              to 
  LiveReg: %0
  UpdateRegP: SU(2) MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
              to 
  UpdateRegP: SU(5) %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
              to FR32 -1    FR32X -1
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1756; cg.c:843:55
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %1
  UpdateRegP: SU(3) MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
              to 
  UpdateRegP: SU(4) %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1756; cg.c:843:55
              to FR32 -1    FR32X -1
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:fr64 = COPY $xmm0
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
FR32X=1
GR16=1
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr32 = COPY $edi
SU(1):   %0:fr64 = COPY $xmm0
SU(2):   MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
SU(3):   MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
SU(4):   %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1756; cg.c:843:55
SU(5):   %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
SU(6):   %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1759; cg.c:843:49
SU(7):   $eax = COPY %4:gr32, debug-location !1760; cg.c:843:42

********** INTERVALS **********
DIL [0B,16r:0)  0@0B-phi
DIH [0B,16r:0)  0@0B-phi
HDI [0B,16r:0)  0@0B-phi
XMM0 [0B,32r:0)  0@0B-phi
%0 [32r,112r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%3 [80r,112r:0)[112r,128r:1)  0@80r 1@112r weight:0.000000e+00
%4 [128r,144r:0)  0@128r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $edi in %1

0B	bb.0.entry:
	  liveins: $xmm0, $edi
16B	  %1:gr32 = COPY $edi
32B	  %0:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0.x.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.x.addr)
64B	  MOV32mr %stack.1.ipwr2.addr, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.ipwr2.addr)
80B	  %3:fr64 = CVTSI2SDrr %1:gr32, debug-location !1756; cg.c:843:55
112B	  %3:fr64 = MULSDrr %3:fr64(tied-def 0), %0:fr64, debug-location !1758; cg.c:843:61
128B	  %4:gr32 = CVTTSD2SIrr %3:fr64, debug-location !1759; cg.c:843:49
144B	  $eax = COPY %4:gr32, debug-location !1760; cg.c:843:42
160B	  RET 0, killed $eax, debug-location !1760; cg.c:843:42

# End machine code for function icnvrt.

